
H745_ETH_RMII_MODBUS_AWS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027f7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .iram         000007ac  0802821c  0802821c  0002921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000fee4  080289c8  080289c8  000299c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080388ac  080388ac  0003aa2c  2**0
                  CONTENTS
  5 .ARM          00000008  080388ac  080388ac  000398ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080388b4  080388b4  0003aa2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080388b4  080388b4  000398b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080388b8  080388b8  000398b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000096c  24000000  080388bc  0003a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  2400096c  08039228  0003a96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  240009cc  08039288  0003a9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000080d8  24000a30  080392e8  0003aa30  2**3
                  ALLOC
 13 ._user_heap_stack 00000600  24008b08  080392e8  0003ab08  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0003aa2c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003c922  00000000  00000000  0003aa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005499  00000000  00000000  0007737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e10  00000000  00000000  0007c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000258c  00000000  00000000  0007f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00040344  00000000  00000000  00081bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00035623  00000000  00000000  000c1ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a1359  00000000  00000000  000f751b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00298874  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e4dc  00000000  00000000  002988b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000099  00000000  00000000  002a6d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000a30 	.word	0x24000a30
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028204 	.word	0x08028204

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000a34 	.word	0x24000a34
 80002dc:	08028204 	.word	0x08028204

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <SystemInit+0xfc>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a3c      	ldr	r2, [pc, #240]	@ (8000c24 <SystemInit+0xfc>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000b3c:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <SystemInit+0xfc>)
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	4a38      	ldr	r2, [pc, #224]	@ (8000c24 <SystemInit+0xfc>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SystemInit+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d807      	bhi.n	8000b64 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <SystemInit+0x100>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 030f 	bic.w	r3, r3, #15
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <SystemInit+0x100>)
 8000b5e:	f043 0307 	orr.w	r3, r3, #7
 8000b62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b64:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <SystemInit+0x104>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <SystemInit+0x104>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <SystemInit+0x104>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <SystemInit+0x104>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	492c      	ldr	r1, [pc, #176]	@ (8000c2c <SystemInit+0x104>)
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <SystemInit+0x108>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemInit+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <SystemInit+0x100>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 030f 	bic.w	r3, r3, #15
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <SystemInit+0x100>)
 8000b98:	f043 0307 	orr.w	r3, r3, #7
 8000b9c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <SystemInit+0x104>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <SystemInit+0x104>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <SystemInit+0x104>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <SystemInit+0x104>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <SystemInit+0x10c>)
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <SystemInit+0x104>)
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <SystemInit+0x110>)
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <SystemInit+0x104>)
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <SystemInit+0x114>)
 8000bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <SystemInit+0x104>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <SystemInit+0x104>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <SystemInit+0x114>)
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <SystemInit+0x104>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <SystemInit+0x104>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <SystemInit+0x114>)
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <SystemInit+0x104>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <SystemInit+0x104>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <SystemInit+0x104>)
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <SystemInit+0x104>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <SystemInit+0x118>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <SystemInit+0x118>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <SystemInit+0x11c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <SystemInit+0x120>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c0a:	d202      	bcs.n	8000c12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <SystemInit+0x124>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <SystemInit+0x128>)
 8000c14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c18:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	52002000 	.word	0x52002000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c34:	02020200 	.word	0x02020200
 8000c38:	01ff0000 	.word	0x01ff0000
 8000c3c:	01010280 	.word	0x01010280
 8000c40:	580000c0 	.word	0x580000c0
 8000c44:	5c001000 	.word	0x5c001000
 8000c48:	ffff0000 	.word	0xffff0000
 8000c4c:	51008108 	.word	0x51008108
 8000c50:	52004000 	.word	0x52004000

08000c54 <ModbusMaster_CalculateCRC>:
    }
}

/* Calculate CRC for Modbus frame */
unsigned short ModbusMaster_CalculateCRC(unsigned char *buffer, unsigned short length)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c64:	81fb      	strh	r3, [r7, #14]
    for (unsigned short pos = 0; pos < length; pos++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	81bb      	strh	r3, [r7, #12]
 8000c6a:	e022      	b.n	8000cb2 <ModbusMaster_CalculateCRC+0x5e>
    {
        crc ^= buffer[pos];
 8000c6c:	89bb      	ldrh	r3, [r7, #12]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	4053      	eors	r3, r2
 8000c7a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	e011      	b.n	8000ca6 <ModbusMaster_CalculateCRC+0x52>
        {
            if (crc & 1)
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <ModbusMaster_CalculateCRC+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <ModbusMaster_CalculateCRC+0x74>)
 8000c94:	4053      	eors	r3, r2
 8000c96:	81fb      	strh	r3, [r7, #14]
 8000c98:	e002      	b.n	8000ca0 <ModbusMaster_CalculateCRC+0x4c>
            else
                crc >>= 1;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	ddea      	ble.n	8000c82 <ModbusMaster_CalculateCRC+0x2e>
    for (unsigned short pos = 0; pos < length; pos++)
 8000cac:	89bb      	ldrh	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	81bb      	strh	r3, [r7, #12]
 8000cb2:	89ba      	ldrh	r2, [r7, #12]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3d8      	bcc.n	8000c6c <ModbusMaster_CalculateCRC+0x18>
        }
    }
    return crc;
 8000cba:	89fb      	ldrh	r3, [r7, #14]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	ffffa001 	.word	0xffffa001

08000ccc <ModbusMaster_SendRequest>:

/* Send a Modbus request */
void ModbusMaster_SendRequest(unsigned char slave_id, unsigned char function_code, unsigned short start_address, unsigned short data_length, unsigned short *data)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4623      	mov	r3, r4
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71bb      	strb	r3, [r7, #6]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	80bb      	strh	r3, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	807b      	strh	r3, [r7, #2]
    ModbusMaster_Tx_index = 0;
 8000cea:	4b4b      	ldr	r3, [pc, #300]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	801a      	strh	r2, [r3, #0]

    /* Construct the Modbus frame */
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = slave_id;
 8000cf0:	4b49      	ldr	r3, [pc, #292]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	b291      	uxth	r1, r2
 8000cf8:	4a47      	ldr	r2, [pc, #284]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000cfa:	8011      	strh	r1, [r2, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4a47      	ldr	r2, [pc, #284]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = function_code;
 8000d04:	4b44      	ldr	r3, [pc, #272]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	b291      	uxth	r1, r2
 8000d0c:	4a42      	ldr	r2, [pc, #264]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d0e:	8011      	strh	r1, [r2, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4a42      	ldr	r2, [pc, #264]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (start_address >> 8) & 0xFF;
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b290      	uxth	r0, r2
 8000d26:	4a3c      	ldr	r2, [pc, #240]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d28:	8010      	strh	r0, [r2, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	b2c9      	uxtb	r1, r1
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d30:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = start_address & 0xFF;
 8000d32:	4b39      	ldr	r3, [pc, #228]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	b291      	uxth	r1, r2
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d3c:	8011      	strh	r1, [r2, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	b2d9      	uxtb	r1, r3
 8000d44:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d46:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (data_length >> 8) & 0xFF;
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	b290      	uxth	r0, r2
 8000d56:	4a30      	ldr	r2, [pc, #192]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d58:	8010      	strh	r0, [r2, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	b2c9      	uxtb	r1, r1
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d60:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = data_length & 0xFF;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	b291      	uxth	r1, r2
 8000d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d6c:	8011      	strh	r1, [r2, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	b2d9      	uxtb	r1, r3
 8000d74:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d76:	5499      	strb	r1, [r3, r2]

    /* Calculate CRC */
    unsigned short crc = ModbusMaster_CalculateCRC(ModbusMaster_outbox, ModbusMaster_Tx_index);
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4827      	ldr	r0, [pc, #156]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d80:	f7ff ff68 	bl	8000c54 <ModbusMaster_CalculateCRC>
 8000d84:	4603      	mov	r3, r0
 8000d86:	817b      	strh	r3, [r7, #10]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = crc & 0xFF;
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d92:	8011      	strh	r1, [r2, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	897b      	ldrh	r3, [r7, #10]
 8000d98:	b2d9      	uxtb	r1, r3
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d9c:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (crc >> 8) & 0xFF;
 8000d9e:	897b      	ldrh	r3, [r7, #10]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b299      	uxth	r1, r3
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	b290      	uxth	r0, r2
 8000dac:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000dae:	8010      	strh	r0, [r2, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	b2c9      	uxtb	r1, r1
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000db6:	5499      	strb	r1, [r3, r2]

    // Debug
    printf("Modbus Request: ");
 8000db8:	4819      	ldr	r0, [pc, #100]	@ (8000e20 <ModbusMaster_SendRequest+0x154>)
 8000dba:	f023 fe81 	bl	8024ac0 <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e00a      	b.n	8000dda <ModbusMaster_SendRequest+0x10e>
    {
        printf("%02X ", ModbusMaster_outbox[i]);
 8000dc4:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4815      	ldr	r0, [pc, #84]	@ (8000e24 <ModbusMaster_SendRequest+0x158>)
 8000dd0:	f023 fe76 	bl	8024ac0 <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	dbee      	blt.n	8000dc4 <ModbusMaster_SendRequest+0xf8>
    }
    printf("\n");
 8000de6:	200a      	movs	r0, #10
 8000de8:	f023 fe7c 	bl	8024ae4 <putchar>

    /* Enable TX and send the frame */
    RS485_TX_ENABLE();
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <ModbusMaster_SendRequest+0x15c>)
 8000df2:	f01b fa87 	bl	801c304 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart2, ModbusMaster_outbox, ModbusMaster_Tx_index, HAL_MAX_DELAY);
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	4907      	ldr	r1, [pc, #28]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000e00:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <ModbusMaster_SendRequest+0x160>)
 8000e02:	f01e fd1d 	bl	801f840 <HAL_UART_Transmit>
    RS485_RX_ENABLE();
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <ModbusMaster_SendRequest+0x15c>)
 8000e0c:	f01b fa7a 	bl	801c304 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	24000a4c 	.word	0x24000a4c
 8000e1c:	24000a54 	.word	0x24000a54
 8000e20:	080289e8 	.word	0x080289e8
 8000e24:	080289fc 	.word	0x080289fc
 8000e28:	58020c00 	.word	0x58020c00
 8000e2c:	24000c54 	.word	0x24000c54

08000e30 <ModbusMaster_ReceiveResponse>:

unsigned short ModbusMaster_ReceiveResponse(unsigned char *buffer, unsigned short length)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Receive(&huart2, buffer, length, MODBUS_MASTER_TIMEOUT_MS) == HAL_OK)
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	2364      	movs	r3, #100	@ 0x64
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4827      	ldr	r0, [pc, #156]	@ (8000ee0 <ModbusMaster_ReceiveResponse+0xb0>)
 8000e44:	f01e fd8a 	bl	801f95c <HAL_UART_Receive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d13f      	bne.n	8000ece <ModbusMaster_ReceiveResponse+0x9e>
    {
        // Debug: Print the received buffer
        printf("Received Buffer: ");
 8000e4e:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <ModbusMaster_ReceiveResponse+0xb4>)
 8000e50:	f023 fe36 	bl	8024ac0 <iprintf>
        for (int i = 0; i < length; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e00a      	b.n	8000e70 <ModbusMaster_ReceiveResponse+0x40>
            printf("%02X ", buffer[i]);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4820      	ldr	r0, [pc, #128]	@ (8000ee8 <ModbusMaster_ReceiveResponse+0xb8>)
 8000e66:	f023 fe2b 	bl	8024ac0 <iprintf>
        for (int i = 0; i < length; i++) {
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <ModbusMaster_ReceiveResponse+0x2a>
        }
        printf("\n");
 8000e78:	200a      	movs	r0, #10
 8000e7a:	f023 fe33 	bl	8024ae4 <putchar>

        // Validate CRC
        unsigned short crc_received = (buffer[length - 1] << 8) | buffer[length - 2];
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	440b      	add	r3, r1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	817b      	strh	r3, [r7, #10]
        unsigned short crc_calculated = ModbusMaster_CalculateCRC(buffer, length - 2);
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	3b02      	subs	r3, #2
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fed4 	bl	8000c54 <ModbusMaster_CalculateCRC>
 8000eac:	4603      	mov	r3, r0
 8000eae:	813b      	strh	r3, [r7, #8]

        // Debug: Print the CRC values
        printf("CRC Received: 0x%04X, CRC Calculated: 0x%04X\n", crc_received, crc_calculated);
 8000eb0:	897b      	ldrh	r3, [r7, #10]
 8000eb2:	893a      	ldrh	r2, [r7, #8]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <ModbusMaster_ReceiveResponse+0xbc>)
 8000eb8:	f023 fe02 	bl	8024ac0 <iprintf>

        if (crc_received == crc_calculated)
 8000ebc:	897a      	ldrh	r2, [r7, #10]
 8000ebe:	893b      	ldrh	r3, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d104      	bne.n	8000ece <ModbusMaster_ReceiveResponse+0x9e>
        {
            ModbusMaster_FrameComplete_Flag = 1;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <ModbusMaster_ReceiveResponse+0xc0>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	801a      	strh	r2, [r3, #0]
            return length;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	e003      	b.n	8000ed6 <ModbusMaster_ReceiveResponse+0xa6>
        }
    }

    ModbusMaster_TimeoutFlag = 1;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <ModbusMaster_ReceiveResponse+0xc4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	801a      	strh	r2, [r3, #0]
    return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	24000c54 	.word	0x24000c54
 8000ee4:	08028a04 	.word	0x08028a04
 8000ee8:	080289fc 	.word	0x080289fc
 8000eec:	08028a18 	.word	0x08028a18
 8000ef0:	24000a50 	.word	0x24000a50
 8000ef4:	24000a4e 	.word	0x24000a4e

08000ef8 <ModbusMaster_ReadInputRegisters>:

/* Read Input Registers */
void ModbusMaster_ReadInputRegisters(unsigned char slave_id, unsigned short start_address, unsigned short data_length)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	460b      	mov	r3, r1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	807b      	strh	r3, [r7, #2]
     ModbusMaster_SendRequest(slave_id, MODBUS_FC_READ_INPUT_REGISTERS, start_address, data_length, NULL);
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	88ba      	ldrh	r2, [r7, #4]
 8000f0e:	79f8      	ldrb	r0, [r7, #7]
 8000f10:	2100      	movs	r1, #0
 8000f12:	9100      	str	r1, [sp, #0]
 8000f14:	2104      	movs	r1, #4
 8000f16:	f7ff fed9 	bl	8000ccc <ModbusMaster_SendRequest>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e01a      	b.n	8000f6a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <mg_random+0x58>)
 8000f3c:	f01e f90c 	bl	801f158 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	18d0      	adds	r0, r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d203      	bcs.n	8000f58 <mg_random+0x34>
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	e000      	b.n	8000f5a <mg_random+0x36>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	f107 0108 	add.w	r1, r7, #8
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f024 f8c7 	bl	80250f2 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3304      	adds	r3, #4
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3e0      	bcc.n	8000f34 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	24000c40 	.word	0x24000c40

08000f80 <mg_millis>:

uint64_t mg_millis(void) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f84:	f01a face 	bl	801b524 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	461c      	mov	r4, r3
 8000f8e:	4615      	mov	r5, r2
 8000f90:	4622      	mov	r2, r4
 8000f92:	462b      	mov	r3, r5
}
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f9c <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <_write+0x18>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d107      	bne.n	8000fc4 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <_write+0x34>)
 8000fc0:	f01e fc3e 	bl	801f840 <HAL_UART_Transmit>
  }
  return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000ce8 	.word	0x24000ce8

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f01a fa54 	bl	801b484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f82c 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 f9a4 	bl	800132c <MX_GPIO_Init>
  MX_ETH_Init();
 8000fe4:	f000 f8a4 	bl	8001130 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fe8:	f000 f954 	bl	8001294 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000fec:	f000 f902 	bl	80011f4 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8000ff0:	f000 f8ea 	bl	80011c8 <MX_RNG_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff4:	f01f feb4 	bl	8020d60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ff8:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <main+0x4c>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4809      	ldr	r0, [pc, #36]	@ (8001024 <main+0x50>)
 8000ffe:	f01f fef9 	bl	8020df4 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <main+0x54>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001008:	4a08      	ldr	r2, [pc, #32]	@ (800102c <main+0x58>)
 800100a:	2100      	movs	r1, #0
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <main+0x5c>)
 800100e:	f01f fef1 	bl	8020df4 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <main+0x60>)
 8001016:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001018:	f01f fec6 	bl	8020da8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <main+0x48>
 8001020:	0802bdcc 	.word	0x0802bdcc
 8001024:	0800145d 	.word	0x0800145d
 8001028:	24000d7c 	.word	0x24000d7c
 800102c:	0802bdf0 	.word	0x0802bdf0
 8001030:	08001535 	.word	0x08001535
 8001034:	24000d80 	.word	0x24000d80

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09c      	sub	sp, #112	@ 0x70
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	224c      	movs	r2, #76	@ 0x4c
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f023 ff08 	bl	8024e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2220      	movs	r2, #32
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f023 ff02 	bl	8024e5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001058:	2004      	movs	r0, #4
 800105a:	f01b f96d 	bl	801c338 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <SystemClock_Config+0xf0>)
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	4a30      	ldr	r2, [pc, #192]	@ (8001128 <SystemClock_Config+0xf0>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800106e:	4b2e      	ldr	r3, [pc, #184]	@ (8001128 <SystemClock_Config+0xf0>)
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <SystemClock_Config+0xf4>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a2b      	ldr	r2, [pc, #172]	@ (800112c <SystemClock_Config+0xf4>)
 800107e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <SystemClock_Config+0xf4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001090:	bf00      	nop
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <SystemClock_Config+0xf4>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800109a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800109e:	d1f8      	bne.n	8001092 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010a0:	2321      	movs	r3, #33	@ 0x21
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b2:	2302      	movs	r3, #2
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010ba:	2364      	movs	r3, #100	@ 0x64
 80010bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010ca:	230c      	movs	r3, #12
 80010cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	4618      	mov	r0, r3
 80010dc:	f01b f986 	bl	801c3ec <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010e6:	f000 fa41 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	233f      	movs	r3, #63	@ 0x3f
 80010ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2303      	movs	r3, #3
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010f6:	2308      	movs	r3, #8
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010fa:	2340      	movs	r3, #64	@ 0x40
 80010fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010fe:	2340      	movs	r3, #64	@ 0x40
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001106:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2102      	movs	r1, #2
 8001110:	4618      	mov	r0, r3
 8001112:	f01b fdc5 	bl	801cca0 <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800111c:	f000 fa26 	bl	800156c <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3770      	adds	r7, #112	@ 0x70
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58000400 	.word	0x58000400
 800112c:	58024800 	.word	0x58024800

08001130 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001134:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <MX_ETH_Init+0x80>)
 8001136:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <MX_ETH_Init+0x84>)
 8001138:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_ETH_Init+0x88>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_ETH_Init+0x88>)
 8001142:	2280      	movs	r2, #128	@ 0x80
 8001144:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_ETH_Init+0x88>)
 8001148:	22e1      	movs	r2, #225	@ 0xe1
 800114a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_ETH_Init+0x88>)
 800114e:	2200      	movs	r2, #0
 8001150:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_ETH_Init+0x88>)
 8001154:	2200      	movs	r2, #0
 8001156:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_ETH_Init+0x88>)
 800115a:	2200      	movs	r2, #0
 800115c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_ETH_Init+0x80>)
 8001160:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <MX_ETH_Init+0x88>)
 8001162:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_ETH_Init+0x80>)
 8001166:	2201      	movs	r2, #1
 8001168:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_ETH_Init+0x80>)
 800116c:	4a13      	ldr	r2, [pc, #76]	@ (80011bc <MX_ETH_Init+0x8c>)
 800116e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_ETH_Init+0x80>)
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <MX_ETH_Init+0x90>)
 8001174:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_ETH_Init+0x80>)
 8001178:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800117c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800117e:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_ETH_Init+0x80>)
 8001180:	f01a fadc 	bl	801b73c <HAL_ETH_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800118a:	f000 f9ef 	bl	800156c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800118e:	2238      	movs	r2, #56	@ 0x38
 8001190:	2100      	movs	r1, #0
 8001192:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <MX_ETH_Init+0x94>)
 8001194:	f023 fe62 	bl	8024e5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_ETH_Init+0x94>)
 800119a:	2221      	movs	r2, #33	@ 0x21
 800119c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_ETH_Init+0x94>)
 80011a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011a4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_ETH_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000b90 	.word	0x24000b90
 80011b4:	40028000 	.word	0x40028000
 80011b8:	24000d84 	.word	0x24000d84
 80011bc:	240009cc 	.word	0x240009cc
 80011c0:	2400096c 	.word	0x2400096c
 80011c4:	24000b58 	.word	0x24000b58

080011c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <MX_RNG_Init+0x24>)
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <MX_RNG_Init+0x28>)
 80011d0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_RNG_Init+0x24>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_RNG_Init+0x24>)
 80011da:	f01d ff5b 	bl	801f094 <HAL_RNG_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80011e4:	f000 f9c2 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	24000c40 	.word	0x24000c40
 80011f0:	48021800 	.word	0x48021800

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <MX_USART2_UART_Init+0x98>)
 80011fa:	4a25      	ldr	r2, [pc, #148]	@ (8001290 <MX_USART2_UART_Init+0x9c>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <MX_USART2_UART_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <MX_USART2_UART_Init+0x98>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_USART2_UART_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001244:	f01f fbda 	bl	80209fc <HAL_RS485Ex_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 800124e:	f000 f98d 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001256:	f01f fc74 	bl	8020b42 <HAL_UARTEx_SetTxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 f984 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4809      	ldr	r0, [pc, #36]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001268:	f01f fca9 	bl	8020bbe <HAL_UARTEx_SetRxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 f97b 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_USART2_UART_Init+0x98>)
 8001278:	f01f fc2a 	bl	8020ad0 <HAL_UARTEx_DisableFifoMode>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8001282:	f000 f973 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000c54 	.word	0x24000c54
 8001290:	40004400 	.word	0x40004400

08001294 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001298:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 800129a:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <MX_USART3_UART_Init+0x94>)
 800129c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012dc:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012de:	f01e fa5f 	bl	801f7a0 <HAL_UART_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012e8:	f000 f940 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ec:	2100      	movs	r1, #0
 80012ee:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 80012f0:	f01f fc27 	bl	8020b42 <HAL_UARTEx_SetTxFifoThreshold>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012fa:	f000 f937 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fe:	2100      	movs	r1, #0
 8001300:	4808      	ldr	r0, [pc, #32]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 8001302:	f01f fc5c 	bl	8020bbe <HAL_UARTEx_SetRxFifoThreshold>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800130c:	f000 f92e 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <MX_USART3_UART_Init+0x90>)
 8001312:	f01f fbdd 	bl	8020ad0 <HAL_UARTEx_DisableFifoMode>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800131c:	f000 f926 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000ce8 	.word	0x24000ce8
 8001328:	40004800 	.word	0x40004800

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	@ 0x30
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b43      	ldr	r3, [pc, #268]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	4a41      	ldr	r2, [pc, #260]	@ (8001450 <MX_GPIO_Init+0x124>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	4a3a      	ldr	r2, [pc, #232]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001370:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138e:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <MX_GPIO_Init+0x124>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <MX_GPIO_Init+0x124>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ac:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ba:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_GPIO_Init+0x124>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80013fc:	4815      	ldr	r0, [pc, #84]	@ (8001454 <MX_GPIO_Init+0x128>)
 80013fe:	f01a ff81 	bl	801c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2102      	movs	r1, #2
 8001406:	4814      	ldr	r0, [pc, #80]	@ (8001458 <MX_GPIO_Init+0x12c>)
 8001408:	f01a ff7c 	bl	801c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 800140c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	480b      	ldr	r0, [pc, #44]	@ (8001454 <MX_GPIO_Init+0x128>)
 8001426:	f01a fdbd 	bl	801bfa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800142a:	2302      	movs	r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_GPIO_Init+0x12c>)
 8001442:	f01a fdaf 	bl	801bfa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001446:	bf00      	nop
 8001448:	3730      	adds	r7, #48	@ 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	58024400 	.word	0x58024400
 8001454:	58020400 	.word	0x58020400
 8001458:	58021000 	.word	0x58021000

0800145c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	 mongoose_init();
 8001464:	f019 fbe8 	bl	801ac38 <mongoose_init>
		  mg_mgr_poll(&g_mgr, 50);
 8001468:	2132      	movs	r1, #50	@ 0x32
 800146a:	4829      	ldr	r0, [pc, #164]	@ (8001510 <StartDefaultTask+0xb4>)
 800146c:	f00b fd96 	bl	800cf9c <mg_mgr_poll>
		  osDelay(10000);
 8001470:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001474:	f01f fd50 	bl	8020f18 <osDelay>

  for(;;)
  {
	      printf("Task1\r\n");
 8001478:	4826      	ldr	r0, [pc, #152]	@ (8001514 <StartDefaultTask+0xb8>)
 800147a:	f023 fb91 	bl	8024ba0 <puts>
	      // Send Modbus query: Slave ID 1, Function Code 4, Address 0, Length 1
	      ModbusMaster_ReadInputRegisters(1,2058, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	f640 010a 	movw	r1, #2058	@ 0x80a
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fd37 	bl	8000ef8 <ModbusMaster_ReadInputRegisters>

	      // Receive response buffer (7 bytes expected)
	      uint8_t responseBuffer[7];
	      unsigned short responseLength = ModbusMaster_ReceiveResponse(responseBuffer, sizeof(responseBuffer));
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2107      	movs	r1, #7
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fccd 	bl	8000e30 <ModbusMaster_ReceiveResponse>
 8001496:	4603      	mov	r3, r0
 8001498:	82fb      	strh	r3, [r7, #22]

	      // Check response status
	      if (ModbusMaster_FrameComplete_Flag)
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <StartDefaultTask+0xbc>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d022      	beq.n	80014e8 <StartDefaultTask+0x8c>
	      {
	    	  uint16_t registerValue = (responseBuffer[3] << 8) | responseBuffer[4];
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	7c3b      	ldrb	r3, [r7, #16]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	82bb      	strh	r3, [r7, #20]
	    	  scaledValue = registerValue * scaling_factor;
 80014b2:	8abb      	ldrh	r3, [r7, #20]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800151c <StartDefaultTask+0xc0>
 80014c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <StartDefaultTask+0xc4>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
	    	  printf("Input Register Raw: %u, Scaled: %.2f\r\n", registerValue, scaledValue);
 80014ca:	8ab9      	ldrh	r1, [r7, #20]
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <StartDefaultTask+0xc4>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d6:	ec53 2b17 	vmov	r2, r3, d7
 80014da:	4812      	ldr	r0, [pc, #72]	@ (8001524 <StartDefaultTask+0xc8>)
 80014dc:	f023 faf0 	bl	8024ac0 <iprintf>
	    	  ModbusMaster_FrameComplete_Flag = 0;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <StartDefaultTask+0xbc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
 80014e6:	e00d      	b.n	8001504 <StartDefaultTask+0xa8>
	      }
	      else if (ModbusMaster_TimeoutFlag)
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <StartDefaultTask+0xcc>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <StartDefaultTask+0xa2>
	      {
	        printf("Modbus Timeout!\r\n");
 80014f0:	480e      	ldr	r0, [pc, #56]	@ (800152c <StartDefaultTask+0xd0>)
 80014f2:	f023 fb55 	bl	8024ba0 <puts>
	        ModbusMaster_TimeoutFlag = 0; // Reset flag
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <StartDefaultTask+0xcc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
 80014fc:	e002      	b.n	8001504 <StartDefaultTask+0xa8>
	      }
	      else
	      {
	        printf("Invalid Response (CRC Error)\r\n");
 80014fe:	480c      	ldr	r0, [pc, #48]	@ (8001530 <StartDefaultTask+0xd4>)
 8001500:	f023 fb4e 	bl	8024ba0 <puts>
	      }

	      osDelay(1000); // Wait 1 second before next query
 8001504:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001508:	f01f fd06 	bl	8020f18 <osDelay>
  {
 800150c:	e7b4      	b.n	8001478 <StartDefaultTask+0x1c>
 800150e:	bf00      	nop
 8001510:	24003f20 	.word	0x24003f20
 8001514:	08028a60 	.word	0x08028a60
 8001518:	24000a50 	.word	0x24000a50
 800151c:	3c23d70a 	.word	0x3c23d70a
 8001520:	24000b54 	.word	0x24000b54
 8001524:	08028a68 	.word	0x08028a68
 8001528:	24000a4e 	.word	0x24000a4e
 800152c:	08028a90 	.word	0x08028a90
 8001530:	08028aa4 	.word	0x08028aa4

08001534 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    osDelay(1000);
 800153c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001540:	f01f fcea 	bl	8020f18 <osDelay>
 8001544:	e7fa      	b.n	800153c <StartTask02+0x8>
	...

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f019 ffcf 	bl	801b4fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40001000 	.word	0x40001000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <mg_base64_decode_single>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b40      	cmp	r3, #64	@ 0x40
 8001584:	dd05      	ble.n	8001592 <mg_base64_decode_single+0x1a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b5a      	cmp	r3, #90	@ 0x5a
 800158a:	dc02      	bgt.n	8001592 <mg_base64_decode_single+0x1a>
    return c - 'A';
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b41      	subs	r3, #65	@ 0x41
 8001590:	e022      	b.n	80015d8 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b60      	cmp	r3, #96	@ 0x60
 8001596:	dd05      	ble.n	80015a4 <mg_base64_decode_single+0x2c>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b7a      	cmp	r3, #122	@ 0x7a
 800159c:	dc02      	bgt.n	80015a4 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3b47      	subs	r3, #71	@ 0x47
 80015a2:	e019      	b.n	80015d8 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80015a8:	dd05      	ble.n	80015b6 <mg_base64_decode_single+0x3e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b39      	cmp	r3, #57	@ 0x39
 80015ae:	dc02      	bgt.n	80015b6 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3304      	adds	r3, #4
 80015b4:	e010      	b.n	80015d8 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b2b      	cmp	r3, #43	@ 0x2b
 80015ba:	d101      	bne.n	80015c0 <mg_base64_decode_single+0x48>
    return 62;
 80015bc:	233e      	movs	r3, #62	@ 0x3e
 80015be:	e00b      	b.n	80015d8 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80015c4:	d101      	bne.n	80015ca <mg_base64_decode_single+0x52>
    return 63;
 80015c6:	233f      	movs	r3, #63	@ 0x3f
 80015c8:	e006      	b.n	80015d8 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b3d      	cmp	r3, #61	@ 0x3d
 80015ce:	d101      	bne.n	80015d4 <mg_base64_decode_single+0x5c>
    return 64;
 80015d0:	2340      	movs	r3, #64	@ 0x40
 80015d2:	e001      	b.n	80015d8 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <mg_base64_decode+0x1c>
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4413      	add	r3, r2
 80015fe:	e000      	b.n	8001602 <mg_base64_decode+0x1e>
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	089a      	lsrs	r2, r3, #2
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	3301      	adds	r3, #1
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d375      	bcc.n	8001706 <mg_base64_decode+0x122>
  while (src != NULL && src + 3 < end) {
 800161a:	e065      	b.n	80016e8 <mg_base64_decode+0x104>
    int a = mg_base64_decode_single(src[0]),
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffa9 	bl	8001578 <mg_base64_decode_single>
 8001626:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffa2 	bl	8001578 <mg_base64_decode_single>
 8001634:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3302      	adds	r3, #2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff9b 	bl	8001578 <mg_base64_decode_single>
 8001642:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3303      	adds	r3, #3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff94 	bl	8001578 <mg_base64_decode_single>
 8001650:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	2b40      	cmp	r3, #64	@ 0x40
 8001656:	d058      	beq.n	800170a <mg_base64_decode+0x126>
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db55      	blt.n	800170a <mg_base64_decode+0x126>
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b40      	cmp	r3, #64	@ 0x40
 8001662:	d052      	beq.n	800170a <mg_base64_decode+0x126>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db4f      	blt.n	800170a <mg_base64_decode+0x126>
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db4c      	blt.n	800170a <mg_base64_decode+0x126>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db49      	blt.n	800170a <mg_base64_decode+0x126>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b25a      	sxtb	r2, r3
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	111b      	asrs	r3, r3, #4
 8001680:	b25b      	sxtb	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b259      	sxtb	r1, r3
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	627a      	str	r2, [r7, #36]	@ 0x24
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	b2ca      	uxtb	r2, r1
 8001692:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b3d      	cmp	r3, #61	@ 0x3d
 800169c:	d021      	beq.n	80016e2 <mg_base64_decode+0xfe>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	109b      	asrs	r3, r3, #2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b259      	sxtb	r1, r3
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2ca      	uxtb	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3303      	adds	r3, #3
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b3d      	cmp	r3, #61	@ 0x3d
 80016c4:	d00d      	beq.n	80016e2 <mg_base64_decode+0xfe>
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	b25a      	sxtb	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b259      	sxtb	r1, r3
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3304      	adds	r3, #4
 80016e6:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <mg_base64_decode+0x114>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3303      	adds	r3, #3
 80016f2:	6a3a      	ldr	r2, [r7, #32]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d891      	bhi.n	800161c <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	4413      	add	r3, r2
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
  return len;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	e009      	b.n	800171a <mg_base64_decode+0x136>
  if (dl < n / 4 * 3 + 1) goto fail;
 8001706:	bf00      	nop
 8001708:	e000      	b.n	800170c <mg_base64_decode+0x128>
      goto fail;
 800170a:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <mg_base64_decode+0x134>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <mg_flash_next>:
// | 32-bit size | 32-bit KEY | ..data.. | ..pad.. | 32-bit size | ......
//
// In order to get to the next object, read its size, then align up.

// Traverse the list of saved objects
size_t mg_flash_next(char *p, char *end, uint32_t *key, size_t *size) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b08a      	sub	sp, #40	@ 0x28
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
  size_t aligned_size = 0, align = mg_flash_write_align(), left = end - p;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
 8001734:	f026 fdfb 	bl	802832e <mg_flash_write_align>
 8001738:	6238      	str	r0, [r7, #32]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	61fb      	str	r3, [r7, #28]
  uint32_t *p32 = (uint32_t *) p, min_size = sizeof(uint32_t) * 2;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	2308      	movs	r3, #8
 8001748:	617b      	str	r3, [r7, #20]
  if (p32[0] != 0xffffffff && left > MG_ROUND_UP(min_size, align)) {
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001752:	d038      	beq.n	80017c6 <mg_flash_next+0xa4>
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <mg_flash_next+0x4e>
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	4413      	add	r3, r2
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	e000      	b.n	8001772 <mg_flash_next+0x50>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	4293      	cmp	r3, r2
 8001776:	d226      	bcs.n	80017c6 <mg_flash_next+0xa4>
    if (size) *size = (size_t) p32[0];
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <mg_flash_next+0x64>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	601a      	str	r2, [r3, #0]
    if (key) *key = p32[1];
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <mg_flash_next+0x72>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	601a      	str	r2, [r3, #0]
    aligned_size = MG_ROUND_UP(p32[0] + sizeof(uint32_t) * 2, align);
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <mg_flash_next+0x80>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3308      	adds	r3, #8
 80017a0:	e00a      	b.n	80017b8 <mg_flash_next+0x96>
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	4413      	add	r3, r2
 80017aa:	1dda      	adds	r2, r3, #7
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	6a3a      	ldr	r2, [r7, #32]
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (left < aligned_size) aligned_size = 0;  // Out of bounds, fail
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	429a      	cmp	r2, r3
 80017c0:	d201      	bcs.n	80017c6 <mg_flash_next+0xa4>
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return aligned_size;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3728      	adds	r7, #40	@ 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <flash_last_sector>:

// Return the last sector of Bank 2
static char *flash_last_sector(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
  size_t ss = mg_flash_sector_size(), size = mg_flash_size();
 80017d6:	f026 fda1 	bl	802831c <mg_flash_sector_size>
 80017da:	60b8      	str	r0, [r7, #8]
 80017dc:	f026 fd91 	bl	8028302 <mg_flash_size>
 80017e0:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *last = base + size - ss;
 80017e2:	f026 fd85 	bl	80282f0 <mg_flash_start>
 80017e6:	6038      	str	r0, [r7, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 2) last -= size / 2;
 80017f4:	f026 fda3 	bl	802833e <mg_flash_bank>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d105      	bne.n	800180a <flash_last_sector+0x3a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	425b      	negs	r3, r3
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  return last;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <mg_flash_load>:

// Find a saved object with a given key
bool mg_flash_load(void *sector, uint32_t key, void *buf, size_t len) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	@ 0x38
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector, *res = NULL;
 8001822:	f026 fd65 	bl	80282f0 <mg_flash_start>
 8001826:	6238      	str	r0, [r7, #32]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  size_t ss = mg_flash_sector_size(), ofs = 0, n, sz;
 8001830:	f026 fd74 	bl	802831c <mg_flash_sector_size>
 8001834:	61f8      	str	r0, [r7, #28]
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  bool ok = false;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (s == NULL) s = flash_last_sector();
 8001840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <mg_flash_load+0x38>
 8001846:	f7ff ffc3 	bl	80017d0 <flash_last_sector>
 800184a:	6378      	str	r0, [r7, #52]	@ 0x34
  if (s < base || s >= base + mg_flash_size()) {
 800184c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	429a      	cmp	r2, r3
 8001852:	d307      	bcc.n	8001864 <mg_flash_load+0x50>
 8001854:	f026 fd55 	bl	8028302 <mg_flash_size>
 8001858:	4602      	mov	r2, r0
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	4413      	add	r3, r2
 800185e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001860:	429a      	cmp	r2, r3
 8001862:	d30f      	bcc.n	8001884 <mg_flash_load+0x70>
    MG_ERROR(("%p is outsize of flash", sector));
 8001864:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <mg_flash_load+0x134>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd67      	ble.n	800193c <mg_flash_load+0x128>
 800186c:	4b37      	ldr	r3, [pc, #220]	@ (800194c <mg_flash_load+0x138>)
 800186e:	f240 1219 	movw	r2, #281	@ 0x119
 8001872:	4937      	ldr	r1, [pc, #220]	@ (8001950 <mg_flash_load+0x13c>)
 8001874:	2001      	movs	r0, #1
 8001876:	f006 fbd7 	bl	8008028 <mg_log_prefix>
 800187a:	68f9      	ldr	r1, [r7, #12]
 800187c:	4835      	ldr	r0, [pc, #212]	@ (8001954 <mg_flash_load+0x140>)
 800187e:	f006 fc23 	bl	80080c8 <mg_log>
 8001882:	e05b      	b.n	800193c <mg_flash_load+0x128>
  } else if (((s - base) % ss) != 0) {
 8001884:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001890:	69f9      	ldr	r1, [r7, #28]
 8001892:	fb01 f202 	mul.w	r2, r1, r2
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00f      	beq.n	80018bc <mg_flash_load+0xa8>
    MG_ERROR(("%p is not a sector boundary", sector));
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <mg_flash_load+0x134>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	dd4b      	ble.n	800193c <mg_flash_load+0x128>
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <mg_flash_load+0x138>)
 80018a6:	f240 121b 	movw	r2, #283	@ 0x11b
 80018aa:	4929      	ldr	r1, [pc, #164]	@ (8001950 <mg_flash_load+0x13c>)
 80018ac:	2001      	movs	r0, #1
 80018ae:	f006 fbbb 	bl	8008028 <mg_log_prefix>
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	4828      	ldr	r0, [pc, #160]	@ (8001958 <mg_flash_load+0x144>)
 80018b6:	f006 fc07 	bl	80080c8 <mg_log>
 80018ba:	e03f      	b.n	800193c <mg_flash_load+0x128>
  } else {
    uint32_t k, scanned = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 80018c0:	e01b      	b.n	80018fa <mg_flash_load+0xe6>
      // MG_DEBUG((" > obj %lu, ofs %lu, key %x/%x", scanned, ofs, k, key));
      // mg_hexdump(s + ofs, n);
      if (k == key && sz == len) {
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d110      	bne.n	80018ec <mg_flash_load+0xd8>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d10c      	bne.n	80018ec <mg_flash_load+0xd8>
        res = s + ofs + sizeof(uint32_t) * 2;
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	3308      	adds	r3, #8
 80018d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d8:	4413      	add	r3, r2
 80018da:	633b      	str	r3, [r7, #48]	@ 0x30
        memcpy(buf, res, len);  // Copy object
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f023 fc06 	bl	80250f2 <memcpy>
        ok = true;              // Keep scanning for the newer versions of it
 80018e6:	2301      	movs	r3, #1
 80018e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      }
      ofs += n, scanned++;
 80018ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4413      	add	r3, r2
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	3301      	adds	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 80018fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fe:	18d0      	adds	r0, r2, r3
 8001900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	18d1      	adds	r1, r2, r3
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	f107 0210 	add.w	r2, r7, #16
 800190e:	f7ff ff08 	bl	8001722 <mg_flash_next>
 8001912:	61b8      	str	r0, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1d3      	bne.n	80018c2 <mg_flash_load+0xae>
    }
    MG_DEBUG(("Scanned %u objects, key %x is @ %p", scanned, key, res));
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <mg_flash_load+0x134>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b02      	cmp	r3, #2
 8001920:	dd0c      	ble.n	800193c <mg_flash_load+0x128>
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <mg_flash_load+0x138>)
 8001924:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8001928:	4909      	ldr	r1, [pc, #36]	@ (8001950 <mg_flash_load+0x13c>)
 800192a:	2003      	movs	r0, #3
 800192c:	f006 fb7c 	bl	8008028 <mg_log_prefix>
 8001930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001936:	4809      	ldr	r0, [pc, #36]	@ (800195c <mg_flash_load+0x148>)
 8001938:	f006 fbc6 	bl	80080c8 <mg_log>
  }
  return ok;
 800193c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001940:	4618      	mov	r0, r3
 8001942:	3738      	adds	r7, #56	@ 0x38
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	24000240 	.word	0x24000240
 800194c:	0802c038 	.word	0x0802c038
 8001950:	08028ac4 	.word	0x08028ac4
 8001954:	08028b50 	.word	0x08028b50
 8001958:	08028b68 	.word	0x08028b68
 800195c:	08028b84 	.word	0x08028b84

08001960 <mg_flash_sector_cleanup>:

// For all saved objects in the sector, delete old versions of objects
static void mg_flash_sector_cleanup(char *sector) {
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b091      	sub	sp, #68	@ 0x44
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  // Buffer all saved objects into an IO buffer (backed by RAM)
  // erase sector, and re-save them.
  struct mg_iobuf io = {0, 0, 0, 2048};
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001978:	623b      	str	r3, [r7, #32]
  size_t ss = mg_flash_sector_size();
 800197a:	f026 fccf 	bl	802831c <mg_flash_sector_size>
 800197e:	6378      	str	r0, [r7, #52]	@ 0x34
  size_t n, size, size2, ofs = 0, hs = sizeof(uint32_t) * 2;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001984:	2308      	movs	r3, #8
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t key;
  // Traverse all objects
  MG_DEBUG(("Cleaning up sector %p", sector));
 8001988:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <mg_flash_sector_cleanup+0x138>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	dd41      	ble.n	8001a14 <mg_flash_sector_cleanup+0xb4>
 8001990:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <mg_flash_sector_cleanup+0x13c>)
 8001992:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8001996:	4942      	ldr	r1, [pc, #264]	@ (8001aa0 <mg_flash_sector_cleanup+0x140>)
 8001998:	2003      	movs	r0, #3
 800199a:	f006 fb45 	bl	8008028 <mg_log_prefix>
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4840      	ldr	r0, [pc, #256]	@ (8001aa4 <mg_flash_sector_cleanup+0x144>)
 80019a2:	f006 fb91 	bl	80080c8 <mg_log>
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 80019a6:	e035      	b.n	8001a14 <mg_flash_sector_cleanup+0xb4>
    // Delete an old copy of this object in the cache
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ac:	e01e      	b.n	80019ec <mg_flash_sector_cleanup+0x8c>
      uint32_t k = *(uint32_t *) (io.buf + o + sizeof(uint32_t));
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b2:	3304      	adds	r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      size2 = *(uint32_t *) (io.buf + o);
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019be:	4413      	add	r3, r2
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
      if (k == key) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d109      	bne.n	80019e0 <mg_flash_sector_cleanup+0x80>
        mg_iobuf_del(&io, o, size2 + hs);
 80019cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d0:	441a      	add	r2, r3
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fc35 	bl	8007248 <mg_iobuf_del>
        break;
 80019de:	e009      	b.n	80019f4 <mg_flash_sector_cleanup+0x94>
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 80019e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e4:	4413      	add	r3, r2
 80019e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e8:	4413      	add	r3, r2
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3dc      	bcc.n	80019ae <mg_flash_sector_cleanup+0x4e>
      }
    }
    // And add the new copy
    mg_iobuf_add(&io, io.len, sector + ofs, size + hs);
 80019f4:	69f9      	ldr	r1, [r7, #28]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019fa:	18d4      	adds	r4, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a00:	4413      	add	r3, r2
 8001a02:	f107 0014 	add.w	r0, r7, #20
 8001a06:	4622      	mov	r2, r4
 8001a08:	f005 fbcc 	bl	80071a4 <mg_iobuf_add>
    ofs += n;
 8001a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	4413      	add	r3, r2
 8001a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a18:	18d0      	adds	r0, r2, r3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1e:	18d1      	adds	r1, r2, r3
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	f7ff fe7b 	bl	8001722 <mg_flash_next>
 8001a2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1b9      	bne.n	80019a8 <mg_flash_sector_cleanup+0x48>
  }
  // All objects are cached in RAM now
  if (mg_flash_erase(sector)) {  // Erase sector. If successful,
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f026 fd71 	bl	802851c <mg_flash_erase>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d022      	beq.n	8001a86 <mg_flash_sector_cleanup+0x126>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 8001a40:	2300      	movs	r3, #0
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a44:	e01b      	b.n	8001a7e <mg_flash_sector_cleanup+0x11e>
      size = *(uint32_t *) (io.buf + ofs);
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
      key = *(uint32_t *) (io.buf + ofs + sizeof(uint32_t));
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a54:	3304      	adds	r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
      mg_flash_save(sector, key, io.buf + ofs + hs, size);  // Save to flash
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	440b      	add	r3, r1
 8001a66:	441a      	add	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f81b 	bl	8001aa8 <mg_flash_save>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a76:	4413      	add	r3, r2
 8001a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a7a:	4413      	add	r3, r2
 8001a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3df      	bcc.n	8001a46 <mg_flash_sector_cleanup+0xe6>
    }
  }
  mg_iobuf_free(&io);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 fc27 	bl	80072de <mg_iobuf_free>
}
 8001a90:	bf00      	nop
 8001a92:	3744      	adds	r7, #68	@ 0x44
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}
 8001a98:	24000240 	.word	0x24000240
 8001a9c:	0802c048 	.word	0x0802c048
 8001aa0:	08028ac4 	.word	0x08028ac4
 8001aa4:	08028ba8 	.word	0x08028ba8

08001aa8 <mg_flash_save>:

// Save an object with a given key - append to the end of an object list
bool mg_flash_save(void *sector, uint32_t key, const void *buf, size_t len) {
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b094      	sub	sp, #80	@ 0x50
 8001aae:	af02      	add	r7, sp, #8
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector;
 8001ab8:	f026 fc1a 	bl	80282f0 <mg_flash_start>
 8001abc:	6338      	str	r0, [r7, #48]	@ 0x30
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  size_t ss = mg_flash_sector_size(), ofs = 0, n;
 8001ac2:	f026 fc2b 	bl	802831c <mg_flash_sector_size>
 8001ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001ac8:	2300      	movs	r3, #0
 8001aca:	643b      	str	r3, [r7, #64]	@ 0x40
  bool ok = false;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (s == NULL) s = flash_last_sector();
 8001ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <mg_flash_save+0x36>
 8001ad8:	f7ff fe7a 	bl	80017d0 <flash_last_sector>
 8001adc:	6478      	str	r0, [r7, #68]	@ 0x44
  if (s < base || s >= base + mg_flash_size()) {
 8001ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d307      	bcc.n	8001af6 <mg_flash_save+0x4e>
 8001ae6:	f026 fc0c 	bl	8028302 <mg_flash_size>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aee:	4413      	add	r3, r2
 8001af0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d310      	bcc.n	8001b18 <mg_flash_save+0x70>
    MG_ERROR(("%p is outsize of flash", sector));
 8001af6:	4b82      	ldr	r3, [pc, #520]	@ (8001d00 <mg_flash_save+0x258>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f340 81af 	ble.w	8001e5e <mg_flash_save+0x3b6>
 8001b00:	4b80      	ldr	r3, [pc, #512]	@ (8001d04 <mg_flash_save+0x25c>)
 8001b02:	f240 1257 	movw	r2, #343	@ 0x157
 8001b06:	4980      	ldr	r1, [pc, #512]	@ (8001d08 <mg_flash_save+0x260>)
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f006 fa8d 	bl	8008028 <mg_log_prefix>
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	487e      	ldr	r0, [pc, #504]	@ (8001d0c <mg_flash_save+0x264>)
 8001b12:	f006 fad9 	bl	80080c8 <mg_log>
 8001b16:	e1a2      	b.n	8001e5e <mg_flash_save+0x3b6>
  } else if (((s - base) % ss) != 0) {
 8001b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b20:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b26:	fb01 f202 	mul.w	r2, r1, r2
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <mg_flash_save+0xaa>
    MG_ERROR(("%p is not a sector boundary", sector));
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <mg_flash_save+0x258>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f340 8192 	ble.w	8001e5e <mg_flash_save+0x3b6>
 8001b3a:	4b72      	ldr	r3, [pc, #456]	@ (8001d04 <mg_flash_save+0x25c>)
 8001b3c:	f240 1259 	movw	r2, #345	@ 0x159
 8001b40:	4971      	ldr	r1, [pc, #452]	@ (8001d08 <mg_flash_save+0x260>)
 8001b42:	2001      	movs	r0, #1
 8001b44:	f006 fa70 	bl	8008028 <mg_log_prefix>
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4871      	ldr	r0, [pc, #452]	@ (8001d10 <mg_flash_save+0x268>)
 8001b4c:	f006 fabc 	bl	80080c8 <mg_log>
 8001b50:	e185      	b.n	8001e5e <mg_flash_save+0x3b6>
  } else {
 8001b52:	466b      	mov	r3, sp
 8001b54:	461d      	mov	r5, r3
    char ab[mg_flash_write_align()];  // Aligned write block
 8001b56:	f026 fbea 	bl	802832e <mg_flash_write_align>
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b62:	2300      	movs	r3, #0
 8001b64:	46a2      	mov	sl, r4
 8001b66:	469b      	mov	fp, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	46a0      	mov	r8, r4
 8001b80:	4699      	mov	r9, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b96:	1de3      	adds	r3, r4, #7
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001ba0:	ab02      	add	r3, sp, #8
 8001ba2:	3300      	adds	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t hdr[2] = {(uint32_t) len, key};
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	617b      	str	r3, [r7, #20]
    size_t needed = sizeof(hdr) + len;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	3308      	adds	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
    size_t needed_aligned = MG_ROUND_UP(needed, sizeof(ab));
 8001bb4:	2c00      	cmp	r4, #0
 8001bb6:	d101      	bne.n	8001bbc <mg_flash_save+0x114>
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	e006      	b.n	8001bca <mg_flash_save+0x122>
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	4423      	add	r3, r4
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	fbb3 f3f4 	udiv	r3, r3, r4
 8001bc6:	fb04 f303 	mul.w	r3, r4, r3
 8001bca:	61fb      	str	r3, [r7, #28]
    while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 8001bcc:	e003      	b.n	8001bd6 <mg_flash_save+0x12e>
 8001bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bd2:	4413      	add	r3, r2
 8001bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bda:	18d0      	adds	r0, r2, r3
 8001bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be0:	18d1      	adds	r1, r2, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	f7ff fd9c 	bl	8001722 <mg_flash_next>
 8001bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ed      	bne.n	8001bce <mg_flash_save+0x126>

    // If there is not enough space left, cleanup sector and re-eval ofs
    if (ofs + needed_aligned >= ss) {
 8001bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d817      	bhi.n	8001c2e <mg_flash_save+0x186>
      mg_flash_sector_cleanup(s);
 8001bfe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c00:	f7ff feae 	bl	8001960 <mg_flash_sector_cleanup>
      ofs = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	643b      	str	r3, [r7, #64]	@ 0x40
      while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 8001c08:	e003      	b.n	8001c12 <mg_flash_save+0x16a>
 8001c0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c0e:	4413      	add	r3, r2
 8001c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c16:	18d0      	adds	r0, r2, r3
 8001c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	18d1      	adds	r1, r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	f7ff fd7e 	bl	8001722 <mg_flash_next>
 8001c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ed      	bne.n	8001c0a <mg_flash_save+0x162>
    }

    if (ofs + needed_aligned <= ss) {
 8001c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c36:	429a      	cmp	r2, r3
 8001c38:	f0c0 8102 	bcc.w	8001e40 <mg_flash_save+0x398>
      // Enough space to save this object
      if (sizeof(ab) < sizeof(hdr)) {
 8001c3c:	2c07      	cmp	r4, #7
 8001c3e:	d81a      	bhi.n	8001c76 <mg_flash_save+0x1ce>
        // Flash write granularity is 32 bit or less, write with no buffering
        ok = mg_flash_write(s + ofs, hdr, sizeof(hdr));
 8001c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c44:	4413      	add	r3, r2
 8001c46:	f107 0110 	add.w	r1, r7, #16
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f026 fd4d 	bl	80286ec <mg_flash_write>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok) mg_flash_write(s + ofs + sizeof(hdr), buf, len);
 8001c58:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80c1 	beq.w	8001de4 <mg_flash_save+0x33c>
 8001c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c64:	3308      	adds	r3, #8
 8001c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c68:	4413      	add	r3, r2
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f026 fd3c 	bl	80286ec <mg_flash_write>
 8001c74:	e0b6      	b.n	8001de4 <mg_flash_save+0x33c>
      } else {
        // Flash granularity is sizeof(hdr) or more. We need to save in
        // 3 chunks: initial block, bulk, rest. This is because we have
        // two memory chunks to write: hdr and buf, on aligned boundaries.
        n = sizeof(ab) - sizeof(hdr);      // Initial chunk that we write
 8001c76:	f1a4 0308 	sub.w	r3, r4, #8
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (n > len) n = len;              // is
 8001c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d901      	bls.n	8001c88 <mg_flash_save+0x1e0>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        memset(ab, 0xff, sizeof(ab));      // initialized to all-one
 8001c88:	4622      	mov	r2, r4
 8001c8a:	21ff      	movs	r1, #255	@ 0xff
 8001c8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c8e:	f023 f8e5 	bl	8024e5c <memset>
        memcpy(ab, hdr, sizeof(hdr));      // contains the header (key + size)
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	2208      	movs	r2, #8
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c9c:	f023 fa29 	bl	80250f2 <memcpy>
        memcpy(ab + sizeof(hdr), buf, n);  // and an initial part of buf
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f023 fa22 	bl	80250f2 <memcpy>
        MG_INFO(("saving initial block of %lu", sizeof(ab)));
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <mg_flash_save+0x258>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	dd0a      	ble.n	8001ccc <mg_flash_save+0x224>
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <mg_flash_save+0x25c>)
 8001cb8:	f240 1277 	movw	r2, #375	@ 0x177
 8001cbc:	4912      	ldr	r1, [pc, #72]	@ (8001d08 <mg_flash_save+0x260>)
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f006 f9b2 	bl	8008028 <mg_log_prefix>
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	4813      	ldr	r0, [pc, #76]	@ (8001d14 <mg_flash_save+0x26c>)
 8001cc8:	f006 f9fe 	bl	80080c8 <mg_log>
        ok = mg_flash_write(s + ofs, ab, sizeof(ab));
 8001ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f026 fd08 	bl	80286ec <mg_flash_write>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok && len > n) {
 8001ce2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d07c      	beq.n	8001de4 <mg_flash_save+0x33c>
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d978      	bls.n	8001de4 <mg_flash_save+0x33c>
          size_t n2 = MG_ROUND_DOWN(len - n, sizeof(ab));
 8001cf2:	2c00      	cmp	r4, #0
 8001cf4:	d110      	bne.n	8001d18 <mg_flash_save+0x270>
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	e013      	b.n	8001d26 <mg_flash_save+0x27e>
 8001cfe:	bf00      	nop
 8001d00:	24000240 	.word	0x24000240
 8001d04:	0802c060 	.word	0x0802c060
 8001d08:	08028ac4 	.word	0x08028ac4
 8001d0c:	08028b50 	.word	0x08028b50
 8001d10:	08028b68 	.word	0x08028b68
 8001d14:	08028bc0 	.word	0x08028bc0
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	fbb3 f3f4 	udiv	r3, r3, r4
 8001d22:	fb04 f303 	mul.w	r3, r4, r3
 8001d26:	61bb      	str	r3, [r7, #24]
          if (n2 > 0) {
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01c      	beq.n	8001d68 <mg_flash_save+0x2c0>
            MG_INFO(("saving bulk, %lu", n2));
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <mg_flash_save+0x3c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	dd0a      	ble.n	8001d4c <mg_flash_save+0x2a4>
 8001d36:	4b4e      	ldr	r3, [pc, #312]	@ (8001e70 <mg_flash_save+0x3c8>)
 8001d38:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001d3c:	494d      	ldr	r1, [pc, #308]	@ (8001e74 <mg_flash_save+0x3cc>)
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f006 f972 	bl	8008028 <mg_log_prefix>
 8001d44:	69b9      	ldr	r1, [r7, #24]
 8001d46:	484c      	ldr	r0, [pc, #304]	@ (8001e78 <mg_flash_save+0x3d0>)
 8001d48:	f006 f9be 	bl	80080c8 <mg_log>
            ok = mg_flash_write(s + ofs + sizeof(ab), (char *) buf + n, n2);
 8001d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d4e:	4423      	add	r3, r4
 8001d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d52:	18d0      	adds	r0, r2, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d58:	4413      	add	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f026 fcc5 	bl	80286ec <mg_flash_write>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
          if (ok && len > n) {
 8001d68:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d039      	beq.n	8001de4 <mg_flash_save+0x33c>
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d935      	bls.n	8001de4 <mg_flash_save+0x33c>
            size_t n3 = len - n - n2;
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	637b      	str	r3, [r7, #52]	@ 0x34
            if (n3 > sizeof(ab)) n3 = sizeof(ab);
 8001d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d86:	429c      	cmp	r4, r3
 8001d88:	d200      	bcs.n	8001d8c <mg_flash_save+0x2e4>
 8001d8a:	637c      	str	r4, [r7, #52]	@ 0x34
            memset(ab, 0xff, sizeof(ab));
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	21ff      	movs	r1, #255	@ 0xff
 8001d90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d92:	f023 f863 	bl	8024e5c <memset>
            memcpy(ab, (char *) buf + n + n2, n3);
 8001d96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001da2:	4619      	mov	r1, r3
 8001da4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001da6:	f023 f9a4 	bl	80250f2 <memcpy>
            MG_INFO(("saving rest, %lu", n3));
 8001daa:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <mg_flash_save+0x3c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	dd0a      	ble.n	8001dc8 <mg_flash_save+0x320>
 8001db2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <mg_flash_save+0x3c8>)
 8001db4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8001db8:	492e      	ldr	r1, [pc, #184]	@ (8001e74 <mg_flash_save+0x3cc>)
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f006 f934 	bl	8008028 <mg_log_prefix>
 8001dc0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dc2:	482e      	ldr	r0, [pc, #184]	@ (8001e7c <mg_flash_save+0x3d4>)
 8001dc4:	f006 f980 	bl	80080c8 <mg_log>
            ok = mg_flash_write(s + ofs + sizeof(ab) + n2, ab, sizeof(ab));
 8001dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dca:	18e2      	adds	r2, r4, r3
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	4413      	add	r3, r2
 8001dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f026 fc87 	bl	80286ec <mg_flash_write>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
        }
      }
      MG_DEBUG(("Saved %lu/%lu bytes @ %p, key %x: %d", len, needed_aligned,
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <mg_flash_save+0x3c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	dd14      	ble.n	8001e16 <mg_flash_save+0x36e>
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <mg_flash_save+0x3c8>)
 8001dee:	f240 1289 	movw	r2, #393	@ 0x189
 8001df2:	4920      	ldr	r1, [pc, #128]	@ (8001e74 <mg_flash_save+0x3cc>)
 8001df4:	2003      	movs	r0, #3
 8001df6:	f006 f917 	bl	8008028 <mg_log_prefix>
 8001dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dfe:	441a      	add	r2, r3
 8001e00:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	481b      	ldr	r0, [pc, #108]	@ (8001e80 <mg_flash_save+0x3d8>)
 8001e12:	f006 f959 	bl	80080c8 <mg_log>
                s + ofs, key, ok));
      MG_DEBUG(("Sector space left: %lu bytes", ss - ofs - needed_aligned));
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <mg_flash_save+0x3c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	dd1e      	ble.n	8001e5c <mg_flash_save+0x3b4>
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <mg_flash_save+0x3c8>)
 8001e20:	f240 128b 	movw	r2, #395	@ 0x18b
 8001e24:	4913      	ldr	r1, [pc, #76]	@ (8001e74 <mg_flash_save+0x3cc>)
 8001e26:	2003      	movs	r0, #3
 8001e28:	f006 f8fe 	bl	8008028 <mg_log_prefix>
 8001e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	4812      	ldr	r0, [pc, #72]	@ (8001e84 <mg_flash_save+0x3dc>)
 8001e3a:	f006 f945 	bl	80080c8 <mg_log>
 8001e3e:	e00d      	b.n	8001e5c <mg_flash_save+0x3b4>
    } else {
      MG_ERROR(("Sector is full"));
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <mg_flash_save+0x3c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd09      	ble.n	8001e5c <mg_flash_save+0x3b4>
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <mg_flash_save+0x3c8>)
 8001e4a:	f240 128d 	movw	r2, #397	@ 0x18d
 8001e4e:	4909      	ldr	r1, [pc, #36]	@ (8001e74 <mg_flash_save+0x3cc>)
 8001e50:	2001      	movs	r0, #1
 8001e52:	f006 f8e9 	bl	8008028 <mg_log_prefix>
 8001e56:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <mg_flash_save+0x3e0>)
 8001e58:	f006 f936 	bl	80080c8 <mg_log>
 8001e5c:	46ad      	mov	sp, r5
    }
  }
  return ok;
 8001e5e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3748      	adds	r7, #72	@ 0x48
 8001e66:	46bd      	mov	sp, r7
 8001e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6c:	24000240 	.word	0x24000240
 8001e70:	0802c060 	.word	0x0802c060
 8001e74:	08028ac4 	.word	0x08028ac4
 8001e78:	08028bdc 	.word	0x08028bdc
 8001e7c:	08028bf0 	.word	0x08028bf0
 8001e80:	08028c04 	.word	0x08028c04
 8001e84:	08028c2c 	.word	0x08028c2c
 8001e88:	08028c4c 	.word	0x08028c4c

08001e8c <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e002      	b.n	8001ea2 <mg_dns_free+0x16>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1f7      	bne.n	8001e9c <mg_dns_free+0x10>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]
  free(d);
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	f021 fd45 	bl	8023944 <free>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	3330      	adds	r3, #48	@ 0x30
 8001ed0:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e00d      	b.n	8001ef6 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d103      	bne.n	8001ef2 <mg_resolve_cancel+0x30>
 8001eea:	6979      	ldr	r1, [r7, #20]
 8001eec:	6938      	ldr	r0, [r7, #16]
 8001eee:	f7ff ffcd 	bl	8001e8c <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ee      	bne.n	8001eda <mg_resolve_cancel+0x18>
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b08c      	sub	sp, #48	@ 0x30
 8001f0a:	af04      	add	r7, sp, #16
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8001f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <mg_dns_parse_name_depth+0x24>
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <mg_dns_parse_name_depth+0x24>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	f340 8084 	ble.w	800203a <mg_dns_parse_name_depth+0x134>
 8001f32:	2300      	movs	r3, #0
 8001f34:	e093      	b.n	800205e <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <mg_dns_parse_name_depth+0x4c>
      i++;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
      break;
 8001f50:	e07b      	b.n	800204a <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d02f      	beq.n	8001fbc <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	440a      	add	r2, r1
 8001f6a:	3201      	adds	r2, #1
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	440a      	add	r2, r1
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d919      	bls.n	8001fb4 <mg_dns_parse_name_depth+0xae>
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d111      	bne.n	8001fb4 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	3301      	adds	r3, #1
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff ffae 	bl	8001f06 <mg_dns_parse_name_depth>
 8001faa:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <mg_dns_parse_name_depth+0xae>
        return 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e054      	b.n	800205e <mg_dns_parse_name_depth+0x158>
      i += 2;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	61fb      	str	r3, [r7, #28]
      break;
 8001fba:	e046      	b.n	800204a <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	441a      	add	r2, r3
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d801      	bhi.n	8001fd2 <mg_dns_parse_name_depth+0xcc>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e045      	b.n	800205e <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d204      	bcs.n	8001fea <mg_dns_parse_name_depth+0xe4>
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	222e      	movs	r2, #46	@ 0x2e
 8001fe8:	701a      	strb	r2, [r3, #0]
      j++;
 8001fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fec:	3301      	adds	r3, #1
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d90c      	bls.n	8002016 <mg_dns_parse_name_depth+0x110>
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002000:	18d0      	adds	r0, r2, r3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	3301      	adds	r3, #1
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4619      	mov	r1, r3
 8002012:	f023 f86e 	bl	80250f2 <memcpy>
    j += n;
 8002016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	4413      	add	r3, r2
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4413      	add	r3, r2
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8002028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800202a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202c:	429a      	cmp	r2, r3
 800202e:	d204      	bcs.n	800203a <mg_dns_parse_name_depth+0x134>
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002034:	4413      	add	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	3301      	adds	r3, #1
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	f63f af76 	bhi.w	8001f36 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <mg_dns_parse_name_depth+0x156>
 8002050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
  return i;
 800205c:	69fb      	ldr	r3, [r7, #28]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8002066:	b580      	push	{r7, lr}
 8002068:	b088      	sub	sp, #32
 800206a:	af04      	add	r7, sp, #16
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8002074:	2300      	movs	r3, #0
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff ff3d 	bl	8001f06 <mg_dns_parse_name_depth>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8002096:	b580      	push	{r7, lr}
 8002098:	b088      	sub	sp, #32
 800209a:	af02      	add	r7, sp, #8
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4413      	add	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80020b4:	2208      	movs	r2, #8
 80020b6:	2100      	movs	r1, #0
 80020b8:	6a38      	ldr	r0, [r7, #32]
 80020ba:	f022 fecf 	bl	8024e5c <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b0b      	cmp	r3, #11
 80020c2:	d801      	bhi.n	80020c8 <mg_dns_parse_rr+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	e074      	b.n	80021b2 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ce:	d901      	bls.n	80020d4 <mg_dns_parse_rr+0x3e>
 80020d0:	2300      	movs	r3, #0
 80020d2:	e06e      	b.n	80021b2 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d301      	bcc.n	80020e0 <mg_dns_parse_rr+0x4a>
 80020dc:	2300      	movs	r3, #0
 80020de:	e068      	b.n	80021b2 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff ffbb 	bl	8002066 <mg_dns_parse_name>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <mg_dns_parse_rr+0x6e>
    return 0;
 8002100:	2300      	movs	r3, #0
 8002102:	e056      	b.n	80021b2 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	3304      	adds	r3, #4
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4413      	add	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d901      	bls.n	800211c <mg_dns_parse_rr+0x86>
 8002118:	2300      	movs	r3, #0
 800211a:	e04a      	b.n	80021b2 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3b04      	subs	r3, #4
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	b21a      	sxth	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3b03      	subs	r3, #3
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b21b      	sxth	r3, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	b21b      	sxth	r3, r3
 8002132:	b29a      	uxth	r2, r3
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3b02      	subs	r3, #2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3b01      	subs	r3, #1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	b29a      	uxth	r2, r3
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <mg_dns_parse_rr+0xcc>
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	3304      	adds	r3, #4
 8002160:	e027      	b.n	80021b2 <mg_dns_parse_rr+0x11c>

  s += 6;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3306      	adds	r3, #6
 8002166:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	429a      	cmp	r2, r3
 800216e:	d901      	bls.n	8002174 <mg_dns_parse_rr+0xde>
 8002170:	2300      	movs	r3, #0
 8002172:	e01e      	b.n	80021b2 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3b02      	subs	r3, #2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b21a      	sxth	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3b01      	subs	r3, #1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21b      	sxth	r3, r3
 800218a:	b29a      	uxth	r2, r3
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	461a      	mov	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d201      	bcs.n	80021a4 <mg_dns_parse_rr+0x10e>
 80021a0:	2300      	movs	r3, #0
 80021a2:	e006      	b.n	80021b2 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	88db      	ldrh	r3, [r3, #6]
 80021ae:	4413      	add	r3, r2
 80021b0:	330a      	adds	r3, #10
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	@ 0x38
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80021cc:	230c      	movs	r3, #12
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 80021d0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80021d4:	2100      	movs	r1, #0
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f022 fe40 	bl	8024e5c <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b0b      	cmp	r3, #11
 80021e0:	d801      	bhi.n	80021e6 <mg_dns_parse+0x2a>
 80021e2:	2300      	movs	r3, #0
 80021e4:	e0aa      	b.n	800233c <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	889b      	ldrh	r3, [r3, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f015 fc9f 	bl	8017b2e <mg_ntohs>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d901      	bls.n	80021fa <mg_dns_parse+0x3e>
 80021f6:	2300      	movs	r3, #0
 80021f8:	e0a0      	b.n	800233c <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	88db      	ldrh	r3, [r3, #6]
 80021fe:	4618      	mov	r0, r3
 8002200:	f015 fc95 	bl	8017b2e <mg_ntohs>
 8002204:	4603      	mov	r3, r0
 8002206:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8002208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220a:	2b0a      	cmp	r3, #10
 800220c:	d910      	bls.n	8002230 <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 800220e:	4b4d      	ldr	r3, [pc, #308]	@ (8002344 <mg_dns_parse+0x188>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b02      	cmp	r3, #2
 8002214:	dd0a      	ble.n	800222c <mg_dns_parse+0x70>
 8002216:	4b4c      	ldr	r3, [pc, #304]	@ (8002348 <mg_dns_parse+0x18c>)
 8002218:	f240 524b 	movw	r2, #1355	@ 0x54b
 800221c:	494b      	ldr	r1, [pc, #300]	@ (800234c <mg_dns_parse+0x190>)
 800221e:	2003      	movs	r0, #3
 8002220:	f005 ff02 	bl	8008028 <mg_log_prefix>
 8002224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002226:	484a      	ldr	r0, [pc, #296]	@ (8002350 <mg_dns_parse+0x194>)
 8002228:	f005 ff4e 	bl	80080c8 <mg_log>
    num_answers = 10;  // Sanity cap
 800222c:	230a      	movs	r3, #10
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f015 fc7a 	bl	8017b2e <mg_ntohs>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002246:	e015      	b.n	8002274 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff ff1e 	bl	8002096 <mg_dns_parse_rr>
 800225a:	61f8      	str	r0, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <mg_dns_parse+0xaa>
 8002262:	2300      	movs	r3, #0
 8002264:	e06a      	b.n	800233c <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	4413      	add	r3, r2
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002270:	3301      	adds	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	889b      	ldrh	r3, [r3, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f015 fc58 	bl	8017b2e <mg_ntohs>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002284:	4293      	cmp	r3, r2
 8002286:	d3df      	bcc.n	8002248 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800228c:	e051      	b.n	8002332 <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff fefb 	bl	8002096 <mg_dns_parse_rr>
 80022a0:	61f8      	str	r0, [r7, #28]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <mg_dns_parse+0xf0>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e047      	b.n	800233c <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3318      	adds	r3, #24
 80022b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b4:	9200      	str	r2, [sp, #0]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fed3 	bl	8002066 <mg_dns_parse_name>
    ofs += n;
 80022c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80022c8:	8b7b      	ldrh	r3, [r7, #26]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d114      	bne.n	80022f8 <mg_dns_parse+0x13c>
 80022ce:	8afb      	ldrh	r3, [r7, #22]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d111      	bne.n	80022f8 <mg_dns_parse+0x13c>
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10e      	bne.n	80022f8 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e6:	3a04      	subs	r2, #4
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	440a      	add	r2, r1
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80022f6:	e020      	b.n	800233a <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d116      	bne.n	800232c <mg_dns_parse+0x170>
 80022fe:	8afb      	ldrh	r3, [r7, #22]
 8002300:	2b1c      	cmp	r3, #28
 8002302:	d113      	bne.n	800232c <mg_dns_parse+0x170>
 8002304:	8b3b      	ldrh	r3, [r7, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d110      	bne.n	800232c <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1d18      	adds	r0, r3, #4
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	3b10      	subs	r3, #16
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	2210      	movs	r2, #16
 800231e:	4619      	mov	r1, r3
 8002320:	f022 fee7 	bl	80250f2 <memcpy>
      dm->resolved = true;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 800232a:	e006      	b.n	800233a <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	3301      	adds	r3, #1
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002336:	429a      	cmp	r2, r3
 8002338:	d3a9      	bcc.n	800228e <mg_dns_parse+0xd2>
    }
  }
  return true;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3730      	adds	r7, #48	@ 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	24000240 	.word	0x24000240
 8002348:	0802c090 	.word	0x0802c090
 800234c:	08028ac4 	.word	0x08028ac4
 8002350:	08028d20 	.word	0x08028d20

08002354 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	b0d2      	sub	sp, #328	@ 0x148
 8002358:	af02      	add	r7, sp, #8
 800235a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800235e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002362:	6018      	str	r0, [r3, #0]
 8002364:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002368:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800236c:	6019      	str	r1, [r3, #0]
 800236e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002372:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002376:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8002378:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800237c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	3330      	adds	r3, #48	@ 0x30
 8002386:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 800238a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800238e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d12d      	bne.n	80023f4 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8002398:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800239c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80023aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80023b4:	e019      	b.n	80023ea <dns_cb+0x96>
      tmp = d->next;
 80023b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80023c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023c8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80023cc:	4290      	cmp	r0, r2
 80023ce:	eb71 0303 	sbcs.w	r3, r1, r3
 80023d2:	d206      	bcs.n	80023e2 <dns_cb+0x8e>
 80023d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4992      	ldr	r1, [pc, #584]	@ (8002624 <dns_cb+0x2d0>)
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fb37 	bl	8002a50 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80023e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023e6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80023ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e1      	bne.n	80023b6 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80023f2:	e112      	b.n	800261a <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 80023f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023f8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b07      	cmp	r3, #7
 8002400:	f040 80e4 	bne.w	80025cc <dns_cb+0x278>
    int resolved = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 800240a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800240e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002416:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800241a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f107 0210 	add.w	r2, r7, #16
 8002426:	4619      	mov	r1, r3
 8002428:	f7ff fec8 	bl	80021bc <mg_dns_parse>
 800242c:	4603      	mov	r3, r0
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01e      	beq.n	8002476 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8002438:	4b7b      	ldr	r3, [pc, #492]	@ (8002628 <dns_cb+0x2d4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	dd09      	ble.n	8002454 <dns_cb+0x100>
 8002440:	4b7a      	ldr	r3, [pc, #488]	@ (800262c <dns_cb+0x2d8>)
 8002442:	f240 5279 	movw	r2, #1401	@ 0x579
 8002446:	497a      	ldr	r1, [pc, #488]	@ (8002630 <dns_cb+0x2dc>)
 8002448:	2001      	movs	r0, #1
 800244a:	f005 fded 	bl	8008028 <mg_log_prefix>
 800244e:	4879      	ldr	r0, [pc, #484]	@ (8002634 <dns_cb+0x2e0>)
 8002450:	f005 fe3a 	bl	80080c8 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8002454:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002458:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002460:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002464:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f005 fe60 	bl	8008134 <mg_hexdump>
 8002474:	e090      	b.n	8002598 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8002476:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002480:	e085      	b.n	800258e <dns_cb+0x23a>
        tmp = d->next;
 8002482:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 800248c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002490:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800249a:	8a1b      	ldrh	r3, [r3, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d171      	bne.n	8002584 <dns_cb+0x230>
        if (d->c->is_resolving) {
 80024a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d04a      	beq.n	800254a <dns_cb+0x1f6>
          if (dm.resolved) {
 80024b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d038      	beq.n	8002534 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80024c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024d2:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80024d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024e2:	f102 041c 	add.w	r4, r2, #28
 80024e6:	1d1d      	adds	r5, r3, #4
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80024f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002628 <dns_cb+0x2d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	dd16      	ble.n	8002526 <dns_cb+0x1d2>
 80024f8:	4b4c      	ldr	r3, [pc, #304]	@ (800262c <dns_cb+0x2d8>)
 80024fa:	f240 5285 	movw	r2, #1413	@ 0x585
 80024fe:	494c      	ldr	r1, [pc, #304]	@ (8002630 <dns_cb+0x2dc>)
 8002500:	2003      	movs	r0, #3
 8002502:	f005 fd91 	bl	8008028 <mg_log_prefix>
 8002506:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800250e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	331c      	adds	r3, #28
 8002516:	f107 0210 	add.w	r2, r7, #16
 800251a:	3218      	adds	r2, #24
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4b46      	ldr	r3, [pc, #280]	@ (8002638 <dns_cb+0x2e4>)
 8002520:	4846      	ldr	r0, [pc, #280]	@ (800263c <dns_cb+0x2e8>)
 8002522:	f005 fdd1 	bl	80080c8 <mg_log>
            mg_connect_resolved(d->c);
 8002526:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	f00a fb41 	bl	800cbb4 <mg_connect_resolved>
 8002532:	e01d      	b.n	8002570 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8002534:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002538:	6858      	ldr	r0, [r3, #4]
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	3318      	adds	r3, #24
 8002540:	461a      	mov	r2, r3
 8002542:	493f      	ldr	r1, [pc, #252]	@ (8002640 <dns_cb+0x2ec>)
 8002544:	f000 fa84 	bl	8002a50 <mg_error>
 8002548:	e012      	b.n	8002570 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 800254a:	4b37      	ldr	r3, [pc, #220]	@ (8002628 <dns_cb+0x2d4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	dd0e      	ble.n	8002570 <dns_cb+0x21c>
 8002552:	4b36      	ldr	r3, [pc, #216]	@ (800262c <dns_cb+0x2d8>)
 8002554:	f240 5292 	movw	r2, #1426	@ 0x592
 8002558:	4935      	ldr	r1, [pc, #212]	@ (8002630 <dns_cb+0x2dc>)
 800255a:	2001      	movs	r0, #1
 800255c:	f005 fd64 	bl	8008028 <mg_log_prefix>
 8002560:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002568:	4619      	mov	r1, r3
 800256a:	4836      	ldr	r0, [pc, #216]	@ (8002644 <dns_cb+0x2f0>)
 800256c:	f005 fdac 	bl	80080c8 <mg_log>
        mg_dns_free(head, d);
 8002570:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002574:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8002578:	f7ff fc88 	bl	8001e8c <mg_dns_free>
        resolved = 1;
 800257c:	2301      	movs	r3, #1
 800257e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002582:	e000      	b.n	8002586 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8002584:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8002586:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800258a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800258e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f af75 	bne.w	8002482 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8002598:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <dns_cb+0x268>
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <dns_cb+0x2d4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dd09      	ble.n	80025bc <dns_cb+0x268>
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <dns_cb+0x2d8>)
 80025aa:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
 80025ae:	4920      	ldr	r1, [pc, #128]	@ (8002630 <dns_cb+0x2dc>)
 80025b0:	2001      	movs	r0, #1
 80025b2:	f005 fd39 	bl	8008028 <mg_log_prefix>
 80025b6:	4824      	ldr	r0, [pc, #144]	@ (8002648 <dns_cb+0x2f4>)
 80025b8:	f005 fd86 	bl	80080c8 <mg_log>
    c->recv.len = 0;
 80025bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80025ca:	e026      	b.n	800261a <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80025cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	d11f      	bne.n	800261a <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80025da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80025e4:	e015      	b.n	8002612 <dns_cb+0x2be>
      tmp = d->next;
 80025e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80025f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4915      	ldr	r1, [pc, #84]	@ (800264c <dns_cb+0x2f8>)
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fa29 	bl	8002a50 <mg_error>
      mg_dns_free(head, d);
 80025fe:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002602:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8002606:	f7ff fc41 	bl	8001e8c <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 800260a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800260e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1e5      	bne.n	80025e6 <dns_cb+0x292>
}
 800261a:	bf00      	nop
 800261c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002620:	46bd      	mov	sp, r7
 8002622:	bdb0      	pop	{r4, r5, r7, pc}
 8002624:	08028d4c 	.word	0x08028d4c
 8002628:	24000240 	.word	0x24000240
 800262c:	0802c0a0 	.word	0x0802c0a0
 8002630:	08028ac4 	.word	0x08028ac4
 8002634:	08028d58 	.word	0x08028d58
 8002638:	0800d97b 	.word	0x0800d97b
 800263c:	08028d74 	.word	0x08028d74
 8002640:	08028d84 	.word	0x08028d84
 8002644:	08028d9c 	.word	0x08028d9c
 8002648:	08028db4 	.word	0x08028db4
 800264c:	08028dc4 	.word	0x08028dc4

08002650 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b0cb      	sub	sp, #300	@ 0x12c
 8002654:	af00      	add	r7, sp, #0
 8002656:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800265a:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800265e:	6020      	str	r0, [r4, #0]
 8002660:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8002664:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8002668:	6001      	str	r1, [r0, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002670:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800267a:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 800267e:	460a      	mov	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f022 fbe5 	bl	8024e5c <memset>
  pkt.header.txnid = mg_htons(txnid);
 8002692:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002696:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f015 fa46 	bl	8017b2e <mg_ntohs>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026ae:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80026b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026b4:	f015 fa3b 	bl	8017b2e <mg_ntohs>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026c4:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f015 fa31 	bl	8017b2e <mg_ntohs>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026d8:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80026e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80026e8:	e054      	b.n	8002794 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80026ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80026fa:	4413      	add	r3, r2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002700:	d009      	beq.n	8002716 <mg_dns_send+0xc6>
 8002702:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002706:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002712:	429a      	cmp	r2, r3
 8002714:	d32f      	bcc.n	8002776 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8002716:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800271a:	b2da      	uxtb	r2, r3
 800271c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002720:	b2db      	uxtb	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b2d9      	uxtb	r1, r3
 8002726:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800272a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800272e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002732:	4413      	add	r3, r2
 8002734:	330c      	adds	r3, #12
 8002736:	460a      	mov	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 800273a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800273e:	3301      	adds	r3, #1
 8002740:	f107 0214 	add.w	r2, r7, #20
 8002744:	3308      	adds	r3, #8
 8002746:	4413      	add	r3, r2
 8002748:	1d18      	adds	r0, r3, #4
 800274a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800274e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800275a:	18d1      	adds	r1, r2, r3
 800275c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002760:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	461a      	mov	r2, r3
 8002768:	f022 fcc3 	bl	80250f2 <memcpy>
      n = i + 1;
 800276c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002770:	3301      	adds	r3, #1
 8002772:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8002776:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800277a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002786:	429a      	cmp	r2, r3
 8002788:	d209      	bcs.n	800279e <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 800278a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800278e:	3301      	adds	r3, #1
 8002790:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002794:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002798:	2bfa      	cmp	r3, #250	@ 0xfa
 800279a:	d9a6      	bls.n	80026ea <mg_dns_send+0x9a>
 800279c:	e000      	b.n	80027a0 <mg_dns_send+0x150>
    if (i >= name->len) break;
 800279e:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80027a0:	f107 0214 	add.w	r2, r7, #20
 80027a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027a8:	3308      	adds	r3, #8
 80027aa:	4413      	add	r3, r2
 80027ac:	3304      	adds	r3, #4
 80027ae:	2205      	movs	r2, #5
 80027b0:	4916      	ldr	r1, [pc, #88]	@ (800280c <mg_dns_send+0x1bc>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f022 fc9d 	bl	80250f2 <memcpy>
  n += 5;
 80027b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027bc:	3305      	adds	r3, #5
 80027be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80027c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027c6:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <mg_dns_send+0x194>
 80027d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027d4:	3b03      	subs	r3, #3
 80027d6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80027da:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80027de:	4413      	add	r3, r2
 80027e0:	221c      	movs	r2, #28
 80027e2:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80027e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027e8:	f103 020c 	add.w	r2, r3, #12
 80027ec:	f107 0114 	add.w	r1, r7, #20
 80027f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	f00a fc9f 	bl	800d13c <mg_send>
 80027fe:	4603      	mov	r3, r0
}
 8002800:	4618      	mov	r0, r3
 8002802:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	08028dd0 	.word	0x08028dd0

08002810 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8002810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002814:	b088      	sub	sp, #32
 8002816:	af02      	add	r7, sp, #8
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 800282c:	494d      	ldr	r1, [pc, #308]	@ (8002964 <mg_sendnsreq+0x154>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f90e 	bl	8002a50 <mg_error>
 8002834:	e017      	b.n	8002866 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6858      	ldr	r0, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	2200      	movs	r2, #0
 800284a:	f007 f891 	bl	8009970 <mg_connect>
 800284e:	4602      	mov	r2, r0
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a41      	ldr	r2, [pc, #260]	@ (8002968 <mg_sendnsreq+0x158>)
 8002862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 800286e:	493f      	ldr	r1, [pc, #252]	@ (800296c <mg_sendnsreq+0x15c>)
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f8ed 	bl	8002a50 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8002876:	e070      	b.n	800295a <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8002878:	2118      	movs	r1, #24
 800287a:	2001      	movs	r0, #1
 800287c:	f021 f83e 	bl	80238fc <calloc>
 8002880:	4603      	mov	r3, r0
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 800288a:	4939      	ldr	r1, [pc, #228]	@ (8002970 <mg_sendnsreq+0x160>)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f8df 	bl	8002a50 <mg_error>
}
 8002892:	e062      	b.n	800295a <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <mg_sendnsreq+0x9c>
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	8a1b      	ldrh	r3, [r3, #16]
 80028a6:	3301      	adds	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	e000      	b.n	80028ae <mg_sendnsreq+0x9e>
 80028ac:	2201      	movs	r2, #1
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80028c4:	f7fe fb5c 	bl	8000f80 <mg_millis>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	17c8      	asrs	r0, r1, #31
 80028d0:	460c      	mov	r4, r1
 80028d2:	4605      	mov	r5, r0
 80028d4:	eb12 0804 	adds.w	r8, r2, r4
 80028d8:	eb43 0905 	adc.w	r9, r3, r5
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 80028f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <mg_sendnsreq+0x164>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	dd18      	ble.n	8002930 <mg_sendnsreq+0x120>
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <mg_sendnsreq+0x168>)
 8002900:	f240 52d6 	movw	r2, #1494	@ 0x5d6
 8002904:	491d      	ldr	r1, [pc, #116]	@ (800297c <mg_sendnsreq+0x16c>)
 8002906:	2004      	movs	r0, #4
 8002908:	f005 fb8e 	bl	8008028 <mg_log_prefix>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	461c      	mov	r4, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	8a12      	ldrh	r2, [r2, #16]
 8002922:	9201      	str	r2, [sp, #4]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	4622      	mov	r2, r4
 800292a:	4815      	ldr	r0, [pc, #84]	@ (8002980 <mg_sendnsreq+0x170>)
 800292c:	f005 fbcc 	bl	80080c8 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6858      	ldr	r0, [r3, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	8a1a      	ldrh	r2, [r3, #16]
 8002938:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	f7ff fe87 	bl	8002650 <mg_dns_send>
 8002942:	4603      	mov	r3, r0
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	490c      	ldr	r1, [pc, #48]	@ (8002984 <mg_sendnsreq+0x174>)
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f87b 	bl	8002a50 <mg_error>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002964:	08028dd8 	.word	0x08028dd8
 8002968:	08002355 	.word	0x08002355
 800296c:	08028e04 	.word	0x08028e04
 8002970:	08028e10 	.word	0x08028e10
 8002974:	24000240 	.word	0x24000240
 8002978:	0802c0a8 	.word	0x0802c0a8
 800297c:	08028ac4 	.word	0x08028ac4
 8002980:	08028e1c 	.word	0x08028e1c
 8002984:	08028e40 	.word	0x08028e40

08002988 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f014 ffb8 	bl	801790e <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f014 ffe8 	bl	8017974 <mg_url_port>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f015 f8c1 	bl	8017b2e <mg_ntohs>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	331c      	adds	r3, #28
 80029b8:	461a      	mov	r2, r3
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029c2:	f006 ff06 	bl	80097d2 <mg_aton>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f00a f8f1 	bl	800cbb4 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80029d2:	e019      	b.n	8002a08 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	7e1b      	ldrb	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <mg_resolve+0x5e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	330c      	adds	r3, #12
 80029e4:	e002      	b.n	80029ec <mg_resolve+0x64>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	7e1b      	ldrb	r3, [r3, #24]
 80029fa:	f107 010c 	add.w	r1, r7, #12
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ff04 	bl	8002810 <mg_sendnsreq>
}
 8002a08:	bf00      	nop
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <mg_call+0x24>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <mg_call+0x38>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	4798      	blx	r3
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8002a50:	b40e      	push	{r1, r2, r3}
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b095      	sub	sp, #84	@ 0x54
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8002a5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002a5e:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	f107 0010 	add.w	r0, r7, #16
 8002a68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a6a:	2140      	movs	r1, #64	@ 0x40
 8002a6c:	f00a fe6a 	bl	800d744 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <mg_error+0x74>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dd0f      	ble.n	8002a98 <mg_error+0x48>
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <mg_error+0x78>)
 8002a7a:	f240 620b 	movw	r2, #1547	@ 0x60b
 8002a7e:	4913      	ldr	r1, [pc, #76]	@ (8002acc <mg_error+0x7c>)
 8002a80:	2001      	movs	r0, #1
 8002a82:	f005 fad1 	bl	8008028 <mg_log_prefix>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	480f      	ldr	r0, [pc, #60]	@ (8002ad0 <mg_error+0x80>)
 8002a94:	f005 fb18 	bl	80080c8 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2100      	movs	r1, #0
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffae 	bl	8002a10 <mg_call>
}
 8002ab4:	bf00      	nop
 8002ab6:	3754      	adds	r7, #84	@ 0x54
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002abe:	b003      	add	sp, #12
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	24000240 	.word	0x24000240
 8002ac8:	0802c0b8 	.word	0x0802c0b8
 8002acc:	08028ac4 	.word	0x08028ac4
 8002ad0:	08028e4c 	.word	0x08028e4c

08002ad4 <is_digit>:
#endif




static bool is_digit(int c) {
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b2f      	cmp	r3, #47	@ 0x2f
 8002ae0:	dd04      	ble.n	8002aec <is_digit+0x18>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b39      	cmp	r3, #57	@ 0x39
 8002ae6:	dc01      	bgt.n	8002aec <is_digit+0x18>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <is_digit+0x1a>
 8002aec:	2300      	movs	r3, #0
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  int n = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	617a      	str	r2, [r7, #20]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2265      	movs	r2, #101	@ 0x65
 8002b1e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	617a      	str	r2, [r7, #20]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002b38:	dd01      	ble.n	8002b3e <addexp+0x3e>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e057      	b.n	8002bee <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	dc07      	bgt.n	8002b54 <addexp+0x54>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	617a      	str	r2, [r7, #20]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	2230      	movs	r2, #48	@ 0x30
 8002b52:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b63      	cmp	r3, #99	@ 0x63
 8002b58:	dd1c      	ble.n	8002b94 <addexp+0x94>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <addexp+0xfc>)
 8002b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8002b62:	1152      	asrs	r2, r2, #5
 8002b64:	17db      	asrs	r3, r3, #31
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	6179      	str	r1, [r7, #20]
 8002b70:	4619      	mov	r1, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	440b      	add	r3, r1
 8002b76:	3230      	adds	r2, #48	@ 0x30
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bfc <addexp+0xfc>)
 8002b80:	fb82 1203 	smull	r1, r2, r2, r3
 8002b84:	1151      	asrs	r1, r2, #5
 8002b86:	17da      	asrs	r2, r3, #31
 8002b88:	1a8a      	subs	r2, r1, r2
 8002b8a:	2164      	movs	r1, #100	@ 0x64
 8002b8c:	fb01 f202 	mul.w	r2, r1, r2
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	dd1d      	ble.n	8002bd6 <addexp+0xd6>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4a18      	ldr	r2, [pc, #96]	@ (8002c00 <addexp+0x100>)
 8002b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002ba2:	1092      	asrs	r2, r2, #2
 8002ba4:	17db      	asrs	r3, r3, #31
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	6179      	str	r1, [r7, #20]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3230      	adds	r2, #48	@ 0x30
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <addexp+0x100>)
 8002bc0:	fb83 1302 	smull	r1, r3, r3, r2
 8002bc4:	1099      	asrs	r1, r3, #2
 8002bc6:	17d3      	asrs	r3, r2, #31
 8002bc8:	1ac9      	subs	r1, r1, r3
 8002bca:	460b      	mov	r3, r1
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	6179      	str	r1, [r7, #20]
 8002be0:	4619      	mov	r1, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	440b      	add	r3, r1
 8002be6:	3230      	adds	r2, #48	@ 0x30
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
  return n;
 8002bec:	697b      	ldr	r3, [r7, #20]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	51eb851f 	.word	0x51eb851f
 8002c00:	66666667 	.word	0x66666667

08002c04 <xisinf>:

static int xisinf(double x) {
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c12:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	000a      	movs	r2, r1
 8002c24:	2300      	movs	r3, #0
 8002c26:	4613      	mov	r3, r2
 8002c28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c2c:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <xisinf+0x4c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d106      	bne.n	8002c40 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8002c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c36:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <xisinf+0x3c>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <xisinf+0x3e>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	7ff00000 	.word	0x7ff00000

08002c54 <xisnan>:

static int xisnan(double x) {
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c62:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	000a      	movs	r2, r1
 8002c74:	2300      	movs	r3, #0
 8002c76:	4613      	mov	r3, r2
 8002c78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8002c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c80:	4613      	mov	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002c8c:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8002c8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <xisnan+0x54>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf8c      	ite	hi
 8002c94:	2301      	movhi	r3, #1
 8002c96:	2300      	movls	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	7ff00000 	.word	0x7ff00000
 8002cac:	00000000 	.word	0x00000000

08002cb0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b09e      	sub	sp, #120	@ 0x78
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	6178      	str	r0, [r7, #20]
 8002cb8:	6139      	str	r1, [r7, #16]
 8002cba:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cca:	2300      	movs	r3, #0
 8002ccc:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8002cce:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cda:	d107      	bne.n	8002cec <mg_dtoa+0x3c>
 8002cdc:	4bb1      	ldr	r3, [pc, #708]	@ (8002fa4 <mg_dtoa+0x2f4>)
 8002cde:	4ab2      	ldr	r2, [pc, #712]	@ (8002fa8 <mg_dtoa+0x2f8>)
 8002ce0:	6939      	ldr	r1, [r7, #16]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f00a fd56 	bl	800d794 <mg_snprintf>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	e266      	b.n	80031ba <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8002cec:	ed97 0b02 	vldr	d0, [r7, #8]
 8002cf0:	f7ff ff88 	bl	8002c04 <xisinf>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <mg_dtoa+0x6c>
 8002cfa:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	dd01      	ble.n	8002d0c <mg_dtoa+0x5c>
 8002d08:	4ba8      	ldr	r3, [pc, #672]	@ (8002fac <mg_dtoa+0x2fc>)
 8002d0a:	e000      	b.n	8002d0e <mg_dtoa+0x5e>
 8002d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8002fb0 <mg_dtoa+0x300>)
 8002d0e:	4aa6      	ldr	r2, [pc, #664]	@ (8002fa8 <mg_dtoa+0x2f8>)
 8002d10:	6939      	ldr	r1, [r7, #16]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f00a fd3e 	bl	800d794 <mg_snprintf>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	e24e      	b.n	80031ba <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8002d1c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002d20:	f7ff ff98 	bl	8002c54 <xisnan>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <mg_dtoa+0x8a>
 8002d2a:	4ba2      	ldr	r3, [pc, #648]	@ (8002fb4 <mg_dtoa+0x304>)
 8002d2c:	4a9e      	ldr	r2, [pc, #632]	@ (8002fa8 <mg_dtoa+0x2f8>)
 8002d2e:	6939      	ldr	r1, [r7, #16]
 8002d30:	6978      	ldr	r0, [r7, #20]
 8002d32:	f00a fd2f 	bl	800d794 <mg_snprintf>
 8002d36:	4603      	mov	r3, r0
 8002d38:	e23f      	b.n	80031ba <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8002d3a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	d50d      	bpl.n	8002d64 <mg_dtoa+0xb4>
 8002d48:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d4c:	eeb1 7b47 	vneg.f64	d7, d7
 8002d50:	ed87 7b02 	vstr	d7, [r7, #8]
 8002d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002d5a:	3370      	adds	r3, #112	@ 0x70
 8002d5c:	443b      	add	r3, r7
 8002d5e:	222d      	movs	r2, #45	@ 0x2d
 8002d60:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8002d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d68:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	4b91      	ldr	r3, [pc, #580]	@ (8002fb8 <mg_dtoa+0x308>)
 8002d72:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8002d76:	e007      	b.n	8002d88 <mg_dtoa+0xd8>
 8002d78:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002d7c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002d80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d84:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002d88:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002d90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	db0c      	blt.n	8002db4 <mg_dtoa+0x104>
 8002d9a:	ed97 5b02 	vldr	d5, [r7, #8]
 8002d9e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002da2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002da6:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	dae1      	bge.n	8002d78 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8002db4:	e007      	b.n	8002dc6 <mg_dtoa+0x116>
 8002db6:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002dba:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002dbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002dc2:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002dc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002dca:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002dce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d80c      	bhi.n	8002df2 <mg_dtoa+0x142>
 8002dd8:	ed97 5b02 	vldr	d5, [r7, #8]
 8002ddc:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002de0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002de4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002de8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	d9e1      	bls.n	8002db6 <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002df6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002dfa:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002dfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e02:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002e06:	e00a      	b.n	8002e1e <mg_dtoa+0x16e>
 8002e08:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002e0c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002e10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e14:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	dbf0      	blt.n	8002e08 <mg_dtoa+0x158>
  d += t;
 8002e26:	ed97 6b02 	vldr	d6, [r7, #8]
 8002e2a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002e2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e32:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb8 <mg_dtoa+0x308>)
 8002e3c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8002e40:	e00a      	b.n	8002e58 <mg_dtoa+0x1a8>
 8002e42:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002e46:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002e4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002e4e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e54:	3301      	adds	r3, #1
 8002e56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e58:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e5c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002e60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	db0c      	blt.n	8002e84 <mg_dtoa+0x1d4>
 8002e6a:	ed97 5b02 	vldr	d5, [r7, #8]
 8002e6e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002e72:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e76:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002e7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	dade      	bge.n	8002e42 <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8002e84:	e00a      	b.n	8002e9c <mg_dtoa+0x1ec>
 8002e86:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002e8a:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002e8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e92:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ea0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002ea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	d50c      	bpl.n	8002ec8 <mg_dtoa+0x218>
 8002eae:	ed97 5b02 	vldr	d5, [r7, #8]
 8002eb2:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002eb6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002eba:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002ebe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d4de      	bmi.n	8002e86 <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8002ec8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	db2d      	blt.n	8002f2c <mg_dtoa+0x27c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	dd2a      	ble.n	8002f2c <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002ed6:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002eda:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002ede:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f107 0018 	add.w	r0, r7, #24
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	eeb0 0b45 	vmov.f64	d0, d5
 8002eee:	2128      	movs	r1, #40	@ 0x28
 8002ef0:	f7ff fede 	bl	8002cb0 <mg_dtoa>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8002ef8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002efc:	4413      	add	r3, r2
 8002efe:	f107 0218 	add.w	r2, r7, #24
 8002f02:	4413      	add	r3, r2
 8002f04:	222b      	movs	r2, #43	@ 0x2b
 8002f06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fdf9 	bl	8002b00 <addexp>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f12:	4413      	add	r3, r2
 8002f14:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002f16:	f107 0318 	add.w	r3, r7, #24
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f1e:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <mg_dtoa+0x30c>)
 8002f20:	6939      	ldr	r1, [r7, #16]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f00a fc36 	bl	800d794 <mg_snprintf>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	e146      	b.n	80031ba <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	425b      	negs	r3, r3
 8002f30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f32:	429a      	cmp	r2, r3
 8002f34:	dc2e      	bgt.n	8002f94 <mg_dtoa+0x2e4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	dd2b      	ble.n	8002f94 <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002f3c:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002f40:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002f44:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f107 0018 	add.w	r0, r7, #24
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	eeb0 0b45 	vmov.f64	d0, d5
 8002f54:	2128      	movs	r1, #40	@ 0x28
 8002f56:	f7ff feab 	bl	8002cb0 <mg_dtoa>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8002f5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f62:	4413      	add	r3, r2
 8002f64:	f107 0218 	add.w	r2, r7, #24
 8002f68:	18d0      	adds	r0, r2, r3
 8002f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f6c:	425b      	negs	r3, r3
 8002f6e:	222d      	movs	r2, #45	@ 0x2d
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7ff fdc5 	bl	8002b00 <addexp>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f7a:	4413      	add	r3, r2
 8002f7c:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002f7e:	f107 0318 	add.w	r3, r7, #24
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f86:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <mg_dtoa+0x30c>)
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	6978      	ldr	r0, [r7, #20]
 8002f8c:	f00a fc02 	bl	800d794 <mg_snprintf>
 8002f90:	4603      	mov	r3, r0
 8002f92:	e112      	b.n	80031ba <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f9c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002fa0:	e046      	b.n	8003030 <mg_dtoa+0x380>
 8002fa2:	bf00      	nop
 8002fa4:	08028e58 	.word	0x08028e58
 8002fa8:	08028e5c 	.word	0x08028e5c
 8002fac:	08028e60 	.word	0x08028e60
 8002fb0:	08028e64 	.word	0x08028e64
 8002fb4:	08028e6c 	.word	0x08028e6c
 8002fb8:	3ff00000 	.word	0x3ff00000
 8002fbc:	08028e70 	.word	0x08028e70
      int ch = (int) (d / t);
 8002fc0:	ed97 5b02 	vldr	d5, [r7, #8]
 8002fc4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002fc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002fcc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002fd0:	ee17 3a90 	vmov	r3, s15
 8002fd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8002fd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dc02      	bgt.n	8002fe2 <mg_dtoa+0x332>
 8002fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	dd0c      	ble.n	8002ffc <mg_dtoa+0x34c>
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe8:	1c59      	adds	r1, r3, #1
 8002fea:	6679      	str	r1, [r7, #100]	@ 0x64
 8002fec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002fee:	440b      	add	r3, r1
 8002ff0:	3230      	adds	r2, #48	@ 0x30
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	3370      	adds	r3, #112	@ 0x70
 8002ff6:	443b      	add	r3, r7
 8002ff8:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003006:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800300a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800300e:	ed97 6b02 	vldr	d6, [r7, #8]
 8003012:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003016:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800301a:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800301e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8003022:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003026:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800302a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800302c:	3301      	adds	r3, #1
 800302e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003030:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8003034:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003038:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	db04      	blt.n	800304c <mg_dtoa+0x39c>
 8003042:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003046:	4413      	add	r3, r2
 8003048:	2b27      	cmp	r3, #39	@ 0x27
 800304a:	ddb9      	ble.n	8002fc0 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 800304c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <mg_dtoa+0x3d4>
 8003052:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003058:	3370      	adds	r3, #112	@ 0x70
 800305a:	443b      	add	r3, r7
 800305c:	2230      	movs	r2, #48	@ 0x30
 800305e:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8003062:	e00f      	b.n	8003084 <mg_dtoa+0x3d4>
 8003064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	667a      	str	r2, [r7, #100]	@ 0x64
 800306a:	3370      	adds	r3, #112	@ 0x70
 800306c:	443b      	add	r3, r7
 800306e:	2230      	movs	r2, #48	@ 0x30
 8003070:	f803 2c58 	strb.w	r2, [r3, #-88]
 8003074:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8003078:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800307c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003080:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8003084:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8003088:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800308c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	db04      	blt.n	80030a0 <mg_dtoa+0x3f0>
 8003096:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800309a:	4413      	add	r3, r2
 800309c:	2b27      	cmp	r3, #39	@ 0x27
 800309e:	dde1      	ble.n	8003064 <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80030a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80030a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030a4:	4413      	add	r3, r2
 80030a6:	2b27      	cmp	r3, #39	@ 0x27
 80030a8:	dc09      	bgt.n	80030be <mg_dtoa+0x40e>
 80030aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 80030b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80030b2:	4413      	add	r3, r2
 80030b4:	3370      	adds	r3, #112	@ 0x70
 80030b6:	443b      	add	r3, r7
 80030b8:	222e      	movs	r2, #46	@ 0x2e
 80030ba:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80030be:	2300      	movs	r3, #0
 80030c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030c2:	a342      	add	r3, pc, #264	@ (adr r3, 80031cc <mg_dtoa+0x51c>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80030cc:	e031      	b.n	8003132 <mg_dtoa+0x482>
      int ch = (int) (d / t);
 80030ce:	ed97 5b02 	vldr	d5, [r7, #8]
 80030d2:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80030d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80030da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80030de:	ee17 3a90 	vmov	r3, s15
 80030e2:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 80030e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ea:	1c59      	adds	r1, r3, #1
 80030ec:	6679      	str	r1, [r7, #100]	@ 0x64
 80030ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030f0:	440b      	add	r3, r1
 80030f2:	3230      	adds	r2, #48	@ 0x30
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	3370      	adds	r3, #112	@ 0x70
 80030f8:	443b      	add	r3, r7
 80030fa:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80030fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003108:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800310c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003110:	ed97 6b02 	vldr	d6, [r7, #8]
 8003114:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003118:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800311c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8003120:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8003124:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003128:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 800312c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800312e:	3301      	adds	r3, #1
 8003130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003132:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003136:	4413      	add	r3, r2
 8003138:	2b27      	cmp	r3, #39	@ 0x27
 800313a:	dc07      	bgt.n	800314c <mg_dtoa+0x49c>
 800313c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	dbc4      	blt.n	80030ce <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8003144:	e002      	b.n	800314c <mg_dtoa+0x49c>
 8003146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003148:	3b01      	subs	r3, #1
 800314a:	667b      	str	r3, [r7, #100]	@ 0x64
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <mg_dtoa+0x4bc>
 8003152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003154:	2b00      	cmp	r3, #0
 8003156:	dd09      	ble.n	800316c <mg_dtoa+0x4bc>
 8003158:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800315a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800315c:	4413      	add	r3, r2
 800315e:	3b01      	subs	r3, #1
 8003160:	3370      	adds	r3, #112	@ 0x70
 8003162:	443b      	add	r3, r7
 8003164:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8003168:	2b30      	cmp	r3, #48	@ 0x30
 800316a:	d0ec      	beq.n	8003146 <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 800316c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800316e:	2b00      	cmp	r3, #0
 8003170:	dd0c      	ble.n	800318c <mg_dtoa+0x4dc>
 8003172:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003176:	4413      	add	r3, r2
 8003178:	3b01      	subs	r3, #1
 800317a:	3370      	adds	r3, #112	@ 0x70
 800317c:	443b      	add	r3, r7
 800317e:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8003182:	2b2e      	cmp	r3, #46	@ 0x2e
 8003184:	d102      	bne.n	800318c <mg_dtoa+0x4dc>
 8003186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003188:	3b01      	subs	r3, #1
 800318a:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 800318c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800318e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003190:	4413      	add	r3, r2
 8003192:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8003194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003196:	2b27      	cmp	r3, #39	@ 0x27
 8003198:	dd01      	ble.n	800319e <mg_dtoa+0x4ee>
 800319a:	2327      	movs	r3, #39	@ 0x27
 800319c:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 800319e:	f107 0218 	add.w	r2, r7, #24
 80031a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031a4:	4413      	add	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80031aa:	f107 0318 	add.w	r3, r7, #24
 80031ae:	4a06      	ldr	r2, [pc, #24]	@ (80031c8 <mg_dtoa+0x518>)
 80031b0:	6939      	ldr	r1, [r7, #16]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f00a faee 	bl	800d794 <mg_snprintf>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3770      	adds	r7, #112	@ 0x70
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	f3af 8000 	nop.w
 80031c8:	08028e5c 	.word	0x08028e5c
 80031cc:	9999999a 	.word	0x9999999a
 80031d0:	3fb99999 	.word	0x3fb99999

080031d4 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b08c      	sub	sp, #48	@ 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80031e0:	4b53      	ldr	r3, [pc, #332]	@ (8003330 <mg_lld+0x15c>)
 80031e2:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80031e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 80031ec:	2300      	movs	r3, #0
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80031f0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d012      	beq.n	800321e <mg_lld+0x4a>
 80031f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da0e      	bge.n	800321e <mg_lld+0x4a>
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	627a      	str	r2, [r7, #36]	@ 0x24
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	222d      	movs	r2, #45	@ 0x2d
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003212:	2100      	movs	r1, #0
 8003214:	4254      	negs	r4, r2
 8003216:	eb61 0503 	sbc.w	r5, r1, r3
 800321a:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 800321e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	e019      	b.n	8003260 <mg_lld+0x8c>
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	441a      	add	r2, r3
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	1c59      	adds	r1, r3, #1
 800323a:	6239      	str	r1, [r7, #32]
 800323c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800323e:	440b      	add	r3, r1
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	440b      	add	r3, r1
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	0902      	lsrs	r2, r0, #4
 8003256:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800325a:	090b      	lsrs	r3, r1, #4
 800325c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003264:	4313      	orrs	r3, r2
 8003266:	d1e1      	bne.n	800322c <mg_lld+0x58>
 8003268:	e025      	b.n	80032b6 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	e01e      	b.n	80032ae <mg_lld+0xda>
 8003270:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003274:	f04f 020a 	mov.w	r2, #10
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f7fd faa4 	bl	80007c8 <__aeabi_uldivmod>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	441a      	add	r2, r3
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	6239      	str	r1, [r7, #32]
 800328a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800328c:	440b      	add	r3, r1
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	440b      	add	r3, r1
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800329a:	f04f 020a 	mov.w	r2, #10
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	f7fd fa91 	bl	80007c8 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80032ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d1dc      	bne.n	8003270 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e022      	b.n	8003302 <mg_lld+0x12e>
    char t = buf[s + i];
 80032bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80032ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	441a      	add	r2, r3
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	441a      	add	r2, r3
 80032da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	440b      	add	r3, r1
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	440b      	add	r3, r1
 80032e4:	7812      	ldrb	r2, [r2, #0]
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	441a      	add	r2, r3
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	7dfa      	ldrb	r2, [r7, #23]
 80032fa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	429a      	cmp	r2, r3
 800330a:	d3d7      	bcc.n	80032bc <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 800330c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003310:	4313      	orrs	r3, r2
 8003312:	d106      	bne.n	8003322 <mg_lld+0x14e>
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	623a      	str	r2, [r7, #32]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	2230      	movs	r2, #48	@ 0x30
 8003320:	701a      	strb	r2, [r3, #0]
  return n + s;
 8003322:	6a3a      	ldr	r2, [r7, #32]
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	4413      	add	r3, r2
}
 8003328:	4618      	mov	r0, r3
 800332a:	3730      	adds	r7, #48	@ 0x30
 800332c:	46bd      	mov	sp, r7
 800332e:	bdb0      	pop	{r4, r5, r7, pc}
 8003330:	08028e78 	.word	0x08028e78

08003334 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8003346:	e009      	b.n	800335c <scpy+0x28>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	617a      	str	r2, [r7, #20]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4610      	mov	r0, r2
 800335a:	4798      	blx	r3
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d205      	bcs.n	8003370 <scpy+0x3c>
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4413      	add	r3, r2
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1eb      	bne.n	8003348 <scpy+0x14>
  return i;
 8003370:	697b      	ldr	r3, [r7, #20]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800337a:	b40c      	push	{r2, r3}
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8003390:	f107 0308 	add.w	r3, r7, #8
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f809 	bl	80033b0 <mg_vxprintf>
 800339e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80033a0:	68fb      	ldr	r3, [r7, #12]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ac:	b002      	add	sp, #8
 80033ae:	4770      	bx	lr

080033b0 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80033b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b4:	b0a6      	sub	sp, #152	@ 0x98
 80033b6:	af02      	add	r7, sp, #8
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80033cc:	e383      	b.n	8003ad6 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d4:	4413      	add	r3, r2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b25      	cmp	r3, #37	@ 0x25
 80033da:	f040 8369 	bne.w	8003ab0 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80033de:	2300      	movs	r3, #0
 80033e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033e2:	2300      	movs	r3, #0
 80033e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033e6:	2300      	movs	r3, #0
 80033e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
 80033ee:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80033f0:	2320      	movs	r3, #32
 80033f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80033fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003400:	3301      	adds	r3, #1
 8003402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340c:	4413      	add	r3, r2
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8003414:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003418:	2b23      	cmp	r3, #35	@ 0x23
 800341a:	d10e      	bne.n	800343a <mg_vxprintf+0x8a>
 800341c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800341e:	3301      	adds	r3, #1
 8003420:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003426:	3301      	adds	r3, #1
 8003428:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 800343a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800343e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003440:	d110      	bne.n	8003464 <mg_vxprintf+0xb4>
 8003442:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003446:	3301      	adds	r3, #1
 8003448:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800344c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003450:	3301      	adds	r3, #1
 8003452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800345c:	4413      	add	r3, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8003464:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003468:	2b30      	cmp	r3, #48	@ 0x30
 800346a:	d127      	bne.n	80034bc <mg_vxprintf+0x10c>
 800346c:	2330      	movs	r3, #48	@ 0x30
 800346e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003476:	3301      	adds	r3, #1
 8003478:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 800348a:	e017      	b.n	80034bc <mg_vxprintf+0x10c>
 800348c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	677b      	str	r3, [r7, #116]	@ 0x74
 8003498:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	4413      	add	r3, r2
 80034a0:	3b30      	subs	r3, #48	@ 0x30
 80034a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80034a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a8:	3301      	adds	r3, #1
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b4:	4413      	add	r3, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80034bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fb07 	bl	8002ad4 <is_digit>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1df      	bne.n	800348c <mg_vxprintf+0xdc>
      if (c == '.') {
 80034cc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80034d2:	d153      	bne.n	800357c <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d8:	3301      	adds	r3, #1
 80034da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 80034ec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80034f2:	d113      	bne.n	800351c <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1d19      	adds	r1, r3, #4
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	6011      	str	r1, [r2, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003506:	3301      	adds	r3, #1
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003512:	4413      	add	r3, r2
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800351a:	e02f      	b.n	800357c <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8003520:	e017      	b.n	8003552 <mg_vxprintf+0x1a2>
 8003522:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	673b      	str	r3, [r7, #112]	@ 0x70
 800352e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8003532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003534:	4413      	add	r3, r2
 8003536:	3b30      	subs	r3, #48	@ 0x30
 8003538:	673b      	str	r3, [r7, #112]	@ 0x70
 800353a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800353e:	3301      	adds	r3, #1
 8003540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003552:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fabc 	bl	8002ad4 <is_digit>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1df      	bne.n	8003522 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8003562:	e00b      	b.n	800357c <mg_vxprintf+0x1cc>
 8003564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003568:	3301      	adds	r3, #1
 800356a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003574:	4413      	add	r3, r2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800357c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003580:	2b68      	cmp	r3, #104	@ 0x68
 8003582:	d0ef      	beq.n	8003564 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8003584:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003588:	2b6c      	cmp	r3, #108	@ 0x6c
 800358a:	d121      	bne.n	80035d0 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 800358c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800358e:	3301      	adds	r3, #1
 8003590:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003596:	3301      	adds	r3, #1
 8003598:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80035aa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035ae:	2b6c      	cmp	r3, #108	@ 0x6c
 80035b0:	d10e      	bne.n	80035d0 <mg_vxprintf+0x220>
 80035b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035b4:	3301      	adds	r3, #1
 80035b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035bc:	3301      	adds	r3, #1
 80035be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80035d0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035d4:	2b70      	cmp	r3, #112	@ 0x70
 80035d6:	d103      	bne.n	80035e0 <mg_vxprintf+0x230>
 80035d8:	2301      	movs	r3, #1
 80035da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035dc:	2301      	movs	r3, #1
 80035de:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80035e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035e4:	2b64      	cmp	r3, #100	@ 0x64
 80035e6:	d018      	beq.n	800361a <mg_vxprintf+0x26a>
 80035e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035ec:	2b75      	cmp	r3, #117	@ 0x75
 80035ee:	d014      	beq.n	800361a <mg_vxprintf+0x26a>
 80035f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035f4:	2b78      	cmp	r3, #120	@ 0x78
 80035f6:	d010      	beq.n	800361a <mg_vxprintf+0x26a>
 80035f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035fc:	2b58      	cmp	r3, #88	@ 0x58
 80035fe:	d00c      	beq.n	800361a <mg_vxprintf+0x26a>
 8003600:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003604:	2b70      	cmp	r3, #112	@ 0x70
 8003606:	d008      	beq.n	800361a <mg_vxprintf+0x26a>
 8003608:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800360c:	2b67      	cmp	r3, #103	@ 0x67
 800360e:	d004      	beq.n	800361a <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8003610:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003614:	2b66      	cmp	r3, #102	@ 0x66
 8003616:	f040 816c 	bne.w	80038f2 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 800361a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800362a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800362e:	2b78      	cmp	r3, #120	@ 0x78
 8003630:	d007      	beq.n	8003642 <mg_vxprintf+0x292>
 8003632:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003636:	2b58      	cmp	r3, #88	@ 0x58
 8003638:	d003      	beq.n	8003642 <mg_vxprintf+0x292>
 800363a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800363e:	2b70      	cmp	r3, #112	@ 0x70
 8003640:	d101      	bne.n	8003646 <mg_vxprintf+0x296>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <mg_vxprintf+0x298>
 8003646:	2300      	movs	r3, #0
 8003648:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800364c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8003658:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <mg_vxprintf+0x2b2>
 800365e:	2302      	movs	r3, #2
 8003660:	e000      	b.n	8003664 <mg_vxprintf+0x2b4>
 8003662:	2300      	movs	r3, #0
 8003664:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8003666:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800366a:	2b67      	cmp	r3, #103	@ 0x67
 800366c:	d003      	beq.n	8003676 <mg_vxprintf+0x2c6>
 800366e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003672:	2b66      	cmp	r3, #102	@ 0x66
 8003674:	d124      	bne.n	80036c0 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3307      	adds	r3, #7
 800367c:	f023 0307 	bic.w	r3, r3, #7
 8003680:	f103 0108 	add.w	r1, r3, #8
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	6011      	str	r1, [r2, #0]
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8003690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d101      	bne.n	800369c <mg_vxprintf+0x2ec>
 8003698:	2306      	movs	r3, #6
 800369a:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 800369c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800369e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80036a2:	2b67      	cmp	r3, #103	@ 0x67
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f107 0014 	add.w	r0, r7, #20
 80036b0:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80036b4:	2128      	movs	r1, #40	@ 0x28
 80036b6:	f7ff fafb 	bl	8002cb0 <mg_dtoa>
 80036ba:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80036be:	e069      	b.n	8003794 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80036c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d11c      	bne.n	8003700 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3307      	adds	r3, #7
 80036cc:	f023 0307 	bic.w	r3, r3, #7
 80036d0:	f103 0108 	add.w	r1, r3, #8
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	6011      	str	r1, [r2, #0]
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 80036e0:	f107 0114 	add.w	r1, r7, #20
 80036e4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036f4:	4608      	mov	r0, r1
 80036f6:	f7ff fd6d 	bl	80031d4 <mg_lld>
 80036fa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80036fe:	e049      	b.n	8003794 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8003700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003702:	2b01      	cmp	r3, #1
 8003704:	d123      	bne.n	800374e <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	1d19      	adds	r1, r3, #4
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	6011      	str	r1, [r2, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8003714:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <mg_vxprintf+0x376>
 800371c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800371e:	17da      	asrs	r2, r3, #31
 8003720:	461c      	mov	r4, r3
 8003722:	4615      	mov	r5, r2
 8003724:	e003      	b.n	800372e <mg_vxprintf+0x37e>
 8003726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003728:	2200      	movs	r2, #0
 800372a:	461c      	mov	r4, r3
 800372c:	4615      	mov	r5, r2
 800372e:	f107 0114 	add.w	r1, r7, #20
 8003732:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4622      	mov	r2, r4
 8003740:	462b      	mov	r3, r5
 8003742:	4608      	mov	r0, r1
 8003744:	f7ff fd46 	bl	80031d4 <mg_lld>
 8003748:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800374c:	e022      	b.n	8003794 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1d19      	adds	r1, r3, #4
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	6011      	str	r1, [r2, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 800375c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <mg_vxprintf+0x3be>
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	17da      	asrs	r2, r3, #31
 8003768:	4698      	mov	r8, r3
 800376a:	4691      	mov	r9, r2
 800376c:	e003      	b.n	8003776 <mg_vxprintf+0x3c6>
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	2200      	movs	r2, #0
 8003772:	4698      	mov	r8, r3
 8003774:	4691      	mov	r9, r2
 8003776:	f107 0114 	add.w	r1, r7, #20
 800377a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	4642      	mov	r2, r8
 8003788:	464b      	mov	r3, r9
 800378a:	4608      	mov	r0, r1
 800378c:	f7ff fd22 	bl	80031d4 <mg_lld>
 8003790:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800379a:	e007      	b.n	80037ac <mg_vxprintf+0x3fc>
 800379c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800379e:	3b01      	subs	r3, #1
 80037a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80037a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a6:	3301      	adds	r3, #1
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80037b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d202      	bcs.n	80037bc <mg_vxprintf+0x40c>
 80037b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ef      	bne.n	800379c <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037c2:	e011      	b.n	80037e8 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80037c4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80037c8:	2301      	movs	r3, #1
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff fdb1 	bl	8003334 <scpy>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037d8:	4413      	add	r3, r2
 80037da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80037de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037e2:	3301      	adds	r3, #1
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d110      	bne.n	8003812 <mg_vxprintf+0x462>
 80037f0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <mg_vxprintf+0x462>
 80037f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037fe:	429a      	cmp	r2, r3
 8003800:	d207      	bcs.n	8003812 <mg_vxprintf+0x462>
 8003802:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003806:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800380a:	4413      	add	r3, r2
 800380c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800380e:	429a      	cmp	r2, r3
 8003810:	d8d8      	bhi.n	80037c4 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8003812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003814:	4ab7      	ldr	r2, [pc, #732]	@ (8003af4 <mg_vxprintf+0x744>)
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fd8b 	bl	8003334 <scpy>
 800381e:	4602      	mov	r2, r0
 8003820:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003824:	4413      	add	r3, r2
 8003826:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003830:	e011      	b.n	8003856 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8003832:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8003836:	2301      	movs	r3, #1
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fd7a 	bl	8003334 <scpy>
 8003840:	4602      	mov	r2, r0
 8003842:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003846:	4413      	add	r3, r2
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800384c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003850:	3301      	adds	r3, #1
 8003852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003856:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800385a:	2b30      	cmp	r3, #48	@ 0x30
 800385c:	d10c      	bne.n	8003878 <mg_vxprintf+0x4c8>
 800385e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <mg_vxprintf+0x4c8>
 8003868:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800386c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003870:	4413      	add	r3, r2
 8003872:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003874:	429a      	cmp	r2, r3
 8003876:	d8dc      	bhi.n	8003832 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8003878:	f107 0214 	add.w	r2, r7, #20
 800387c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fd56 	bl	8003334 <scpy>
 8003888:	4602      	mov	r2, r0
 800388a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388e:	4413      	add	r3, r2
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800389a:	e011      	b.n	80038c0 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 800389c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80038a0:	2301      	movs	r3, #1
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fd45 	bl	8003334 <scpy>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b0:	4413      	add	r3, r2
 80038b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80038b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ba:	3301      	adds	r3, #1
 80038bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 80ea 	bne.w	8003a9e <mg_vxprintf+0x6ee>
 80038ca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80e5 	beq.w	8003a9e <mg_vxprintf+0x6ee>
 80038d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038da:	429a      	cmp	r2, r3
 80038dc:	f080 80df 	bcs.w	8003a9e <mg_vxprintf+0x6ee>
 80038e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80038e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038e8:	4413      	add	r3, r2
 80038ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d8d5      	bhi.n	800389c <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80038f0:	e0d5      	b.n	8003a9e <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80038f2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038f6:	2b6d      	cmp	r3, #109	@ 0x6d
 80038f8:	d003      	beq.n	8003902 <mg_vxprintf+0x552>
 80038fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038fe:	2b4d      	cmp	r3, #77	@ 0x4d
 8003900:	d128      	bne.n	8003954 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	1d19      	adds	r1, r3, #4
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6011      	str	r1, [r2, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8003910:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003914:	2b6d      	cmp	r3, #109	@ 0x6d
 8003916:	d103      	bne.n	8003920 <mg_vxprintf+0x570>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	2022      	movs	r0, #34	@ 0x22
 800391e:	4798      	blx	r3
        n += f(out, param, ap);
 8003920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	4798      	blx	r3
 800392a:	4602      	mov	r2, r0
 800392c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003930:	4413      	add	r3, r2
 8003932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8003936:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800393a:	2b6d      	cmp	r3, #109	@ 0x6d
 800393c:	f040 80b1 	bne.w	8003aa2 <mg_vxprintf+0x6f2>
 8003940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003944:	3302      	adds	r3, #2
 8003946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	2022      	movs	r0, #34	@ 0x22
 8003950:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8003952:	e0a6      	b.n	8003aa2 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8003954:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003958:	2b63      	cmp	r3, #99	@ 0x63
 800395a:	d112      	bne.n	8003982 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1d19      	adds	r1, r3, #4
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 800396a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4610      	mov	r0, r2
 8003974:	4798      	blx	r3
        n++;
 8003976:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800397a:	3301      	adds	r3, #1
 800397c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003980:	e090      	b.n	8003aa4 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8003982:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003986:	2b73      	cmp	r3, #115	@ 0x73
 8003988:	d16b      	bne.n	8003a62 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	1d19      	adds	r1, r3, #4
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	6011      	str	r1, [r2, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8003998:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d109      	bne.n	80039b4 <mg_vxprintf+0x604>
 80039a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <mg_vxprintf+0x600>
 80039a6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80039a8:	f7fc fcfa 	bl	80003a0 <strlen>
 80039ac:	4603      	mov	r3, r0
 80039ae:	e000      	b.n	80039b2 <mg_vxprintf+0x602>
 80039b0:	2300      	movs	r3, #0
 80039b2:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ba:	e011      	b.n	80039e0 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80039bc:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80039c0:	2301      	movs	r3, #1
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff fcb5 	bl	8003334 <scpy>
 80039ca:	4602      	mov	r2, r0
 80039cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039d0:	4413      	add	r3, r2
 80039d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80039d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039da:	3301      	adds	r3, #1
 80039dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <mg_vxprintf+0x64e>
 80039e8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80039ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d206      	bcs.n	80039fe <mg_vxprintf+0x64e>
 80039f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80039f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039f6:	4413      	add	r3, r2
 80039f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d8de      	bhi.n	80039bc <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 80039fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fc95 	bl	8003334 <scpy>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a10:	4413      	add	r3, r2
 8003a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a1c:	e011      	b.n	8003a42 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8003a1e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8003a22:	2301      	movs	r3, #1
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fc84 	bl	8003334 <scpy>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a32:	4413      	add	r3, r2
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02c      	beq.n	8003aa4 <mg_vxprintf+0x6f4>
 8003a4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d228      	bcs.n	8003aa4 <mg_vxprintf+0x6f4>
 8003a52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a58:	4413      	add	r3, r2
 8003a5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d8de      	bhi.n	8003a1e <mg_vxprintf+0x66e>
 8003a60:	e020      	b.n	8003aa4 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8003a62:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003a66:	2b25      	cmp	r3, #37	@ 0x25
 8003a68:	d109      	bne.n	8003a7e <mg_vxprintf+0x6ce>
        out('%', param);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	2025      	movs	r0, #37	@ 0x25
 8003a70:	4798      	blx	r3
        n++;
 8003a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a76:	3301      	adds	r3, #1
 8003a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a7c:	e012      	b.n	8003aa4 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	2025      	movs	r0, #37	@ 0x25
 8003a84:	4798      	blx	r3
        out(c, param);
 8003a86:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4798      	blx	r3
        n += 2;
 8003a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a96:	3302      	adds	r3, #2
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a9c:	e002      	b.n	8003aa4 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8003aa2:	bf00      	nop
      }
      i++;
 8003aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003aae:	e012      	b.n	8003ad6 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab6:	4413      	add	r3, r2
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4798      	blx	r3
 8003ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f47f ac74 	bne.w	80033ce <mg_vxprintf+0x1e>
    }
  }
  return n;
 8003ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3790      	adds	r7, #144	@ 0x90
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003af4:	08028e8c 	.word	0x08028e8c

08003af8 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8003b04:	2108      	movs	r1, #8
 8003b06:	2001      	movs	r0, #1
 8003b08:	f01f fef8 	bl	80238fc <calloc>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d013      	beq.n	8003b3e <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	4798      	blx	r3
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <mg_fs_open+0x46>
      free(fd);
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f01f ff05 	bl	8023944 <free>
      fd = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8003b3e:	697b      	ldr	r3, [r7, #20]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4610      	mov	r0, r2
 8003b62:	4798      	blx	r3
    free(fd);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f01f feed 	bl	8023944 <free>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fc fc0e 	bl	80003a0 <strlen>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d219      	bcs.n	8003bc0 <is_dir_prefix+0x4e>
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f021 f978 	bl	8024e86 <strncmp>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <is_dir_prefix+0x4e>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b2f      	cmp	r3, #47	@ 0x2f
 8003bac:	d006      	beq.n	8003bbc <is_dir_prefix+0x4a>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8003bba:	d101      	bne.n	8003bc0 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <is_dir_prefix+0x50>
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b088      	sub	sp, #32
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7fc fbe2 	bl	80003a0 <strlen>
 8003bdc:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f014 fdf8 	bl	80187d8 <mg_unpack>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <packed_stat+0x28>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e017      	b.n	8003c22 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e00c      	b.n	8003c12 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff ffb8 	bl	8003b72 <is_dir_prefix>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <packed_stat+0x42>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	e00a      	b.n	8003c22 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69f8      	ldr	r0, [r7, #28]
 8003c14:	f014 fdcc 	bl	80187b0 <mg_unlist>
 8003c18:	6178      	str	r0, [r7, #20]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1eb      	bne.n	8003bf8 <packed_stat+0x2e>
  }
  return 0;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0be      	sub	sp, #248	@ 0xf8
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7fc fbb1 	bl	80003a0 <strlen>
 8003c3e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 8003c42:	2300      	movs	r3, #0
 8003c44:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c4c:	e05a      	b.n	8003d04 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c52:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff ff8b 	bl	8003b72 <is_dir_prefix>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d048      	beq.n	8003cf4 <packed_list+0xc8>
    begin = &path[n + 1];
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c66:	3301      	adds	r3, #1
 8003c68:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 8003c72:	212f      	movs	r1, #47	@ 0x2f
 8003c74:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003c78:	f021 f8f8 	bl	8024e6c <strchr>
 8003c7c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 8003c80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <packed_list+0x70>
 8003c88:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003c8c:	f7fc fb88 	bl	80003a0 <strlen>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c96:	4413      	add	r3, r2
 8003c98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8003c9c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca4:	1ad2      	subs	r2, r2, r3
 8003ca6:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8003caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d24 <packed_list+0xf8>)
 8003cb4:	2164      	movs	r1, #100	@ 0x64
 8003cb6:	f009 fd6d 	bl	800d794 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8003cc0:	f107 0214 	add.w	r2, r7, #20
 8003cc4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fb08 	bl	80002e0 <strcmp>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 8003cd6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8003ce2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f021 f9f8 	bl	80250e2 <strcpy>
 8003cf2:	e002      	b.n	8003cfa <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003cf8:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d04:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8003d08:	f014 fd52 	bl	80187b0 <mg_unlist>
 8003d0c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 8003d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d19a      	bne.n	8003c4e <packed_list+0x22>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	37f0      	adds	r7, #240	@ 0xf0
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	08028e70 	.word	0x08028e70

08003d28 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8003d36:	f107 030c 	add.w	r3, r7, #12
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f014 fd4a 	bl	80187d8 <mg_unpack>
 8003d44:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <packed_open+0x2c>
 8003d50:	2300      	movs	r3, #0
 8003d52:	e016      	b.n	8003d82 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <packed_open+0x3a>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e00f      	b.n	8003d82 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8003d62:	210c      	movs	r1, #12
 8003d64:	2001      	movs	r0, #1
 8003d66:	f01f fdc9 	bl	80238fc <calloc>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <packed_open+0x58>
    fp->size = size;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8003d80:	693b      	ldr	r3, [r7, #16]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <packed_close>:

static void packed_close(void *fp) {
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <packed_close+0x14>
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f01f fdd3 	bl	8023944 <free>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d905      	bls.n	8003dd2 <packed_read+0x2c>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4413      	add	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	4619      	mov	r1, r3
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	f021 f986 	bl	80250f2 <memcpy>
  fp->pos += len;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	441a      	add	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	609a      	str	r2, [r3, #8]
  return len;
 8003df2:	687b      	ldr	r3, [r7, #4]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d903      	bls.n	8003e3e <packed_seek+0x28>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <packed_remove>:

static bool packed_remove(const char *path) {
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <p_open>:
static void *p_open(const char *path, int flags) {
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <p_close>:
static void p_close(void *fp) {
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8003f0a:	b480      	push	{r7}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <p_remove>:
static bool p_remove(const char *path) {
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <p_mkdir>:
static bool p_mkdir(const char *path) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8003f82:	b480      	push	{r7}
 8003f84:	b089      	sub	sp, #36	@ 0x24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02d      	beq.n	8003ff4 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60fa      	str	r2, [r7, #12]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	60ba      	str	r2, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	dd05      	ble.n	8003fbe <mg_ncasecmp+0x3c>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b5a      	cmp	r3, #90	@ 0x5a
 8003fb6:	dc02      	bgt.n	8003fbe <mg_ncasecmp+0x3c>
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	3320      	adds	r3, #32
 8003fbc:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	dd05      	ble.n	8003fd0 <mg_ncasecmp+0x4e>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b5a      	cmp	r3, #90	@ 0x5a
 8003fc8:	dc02      	bgt.n	8003fd0 <mg_ncasecmp+0x4e>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3320      	adds	r3, #32
 8003fce:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <mg_ncasecmp+0x72>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <mg_ncasecmp+0x72>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1d1      	bne.n	8003f98 <mg_ncasecmp+0x16>
  return diff;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3724      	adds	r7, #36	@ 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8004004:	b480      	push	{r7}
 8004006:	b08b      	sub	sp, #44	@ 0x2c
 8004008:	af00      	add	r7, sp, #0
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004012:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4a42      	ldr	r2, [pc, #264]	@ (800412c <mg_to_size_t+0x128>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8004032:	e002      	b.n	800403a <mg_to_size_t+0x36>
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	3301      	adds	r3, #1
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	429a      	cmp	r2, r3
 8004040:	d20b      	bcs.n	800405a <mg_to_size_t+0x56>
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	4413      	add	r3, r2
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b20      	cmp	r3, #32
 800404c:	d0f2      	beq.n	8004034 <mg_to_size_t+0x30>
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	4413      	add	r3, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b09      	cmp	r3, #9
 8004058:	d0ec      	beq.n	8004034 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405e:	429a      	cmp	r2, r3
 8004060:	d22b      	bcs.n	80040ba <mg_to_size_t+0xb6>
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	4413      	add	r3, r2
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b2d      	cmp	r3, #45	@ 0x2d
 800406c:	d125      	bne.n	80040ba <mg_to_size_t+0xb6>
 800406e:	2300      	movs	r3, #0
 8004070:	e056      	b.n	8004120 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	3b30      	subs	r3, #48	@ 0x30
 800407c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	429a      	cmp	r2, r3
 8004084:	d901      	bls.n	800408a <mg_to_size_t+0x86>
 8004086:	2300      	movs	r3, #0
 8004088:	e04a      	b.n	8004120 <mg_to_size_t+0x11c>
    result *= 10;
 800408a:	6a3a      	ldr	r2, [r7, #32]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d901      	bls.n	80040a6 <mg_to_size_t+0xa2>
 80040a2:	2300      	movs	r3, #0
 80040a4:	e03c      	b.n	8004120 <mg_to_size_t+0x11c>
    result += digit;
 80040a6:	6a3a      	ldr	r2, [r7, #32]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	3301      	adds	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	429a      	cmp	r2, r3
 80040c0:	d20f      	bcs.n	80040e2 <mg_to_size_t+0xde>
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80040cc:	d909      	bls.n	80040e2 <mg_to_size_t+0xde>
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b39      	cmp	r3, #57	@ 0x39
 80040d8:	d9cb      	bls.n	8004072 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80040da:	e002      	b.n	80040e2 <mg_to_size_t+0xde>
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	3301      	adds	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d20b      	bcs.n	8004102 <mg_to_size_t+0xfe>
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	4413      	add	r3, r2
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d0f2      	beq.n	80040dc <mg_to_size_t+0xd8>
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b09      	cmp	r3, #9
 8004100:	d0ec      	beq.n	80040dc <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <mg_to_size_t+0x108>
 8004108:	2300      	movs	r3, #0
 800410a:	e009      	b.n	8004120 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <mg_to_size_t+0x114>
 8004114:	2300      	movs	r3, #0
 8004116:	e003      	b.n	8004120 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a3a      	ldr	r2, [r7, #32]
 800411c:	601a      	str	r2, [r3, #0]
  return true;
 800411e:	2301      	movs	r3, #1
}
 8004120:	4618      	mov	r0, r3
 8004122:	372c      	adds	r7, #44	@ 0x2c
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	cccccccd 	.word	0xcccccccd

08004130 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8004130:	b082      	sub	sp, #8
 8004132:	b580      	push	{r7, lr}
 8004134:	b08e      	sub	sp, #56	@ 0x38
 8004136:	af02      	add	r7, sp, #8
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	1d38      	adds	r0, r7, #4
 800413c:	e880 0006 	stmia.w	r0, {r1, r2}
 8004140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8004142:	f107 0310 	add.w	r3, r7, #16
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f00a fe51 	bl	800edf2 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8004150:	e023      	b.n	800419a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8004152:	f107 0318 	add.w	r3, r7, #24
 8004156:	f107 0220 	add.w	r2, r7, #32
 800415a:	213d      	movs	r1, #61	@ 0x3d
 800415c:	9100      	str	r1, [sp, #0]
 800415e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004162:	c903      	ldmia	r1, {r0, r1}
 8004164:	f00b f826 	bl	800f1b4 <mg_span>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d015      	beq.n	800419a <mg_http_var+0x6a>
 800416e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d111      	bne.n	800419a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8004176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff00 	bl	8003f82 <mg_ncasecmp>
 8004182:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <mg_http_var+0x6a>
      result = v;
 8004188:	f107 0310 	add.w	r3, r7, #16
 800418c:	f107 0218 	add.w	r2, r7, #24
 8004190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004194:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8004198:	e00b      	b.n	80041b2 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80041a0:	2126      	movs	r1, #38	@ 0x26
 80041a2:	9100      	str	r1, [sp, #0]
 80041a4:	1d39      	adds	r1, r7, #4
 80041a6:	c903      	ldmia	r1, {r0, r1}
 80041a8:	f00b f804 	bl	800f1b4 <mg_span>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1cf      	bne.n	8004152 <mg_http_var+0x22>
    }
  }
  return result;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	461a      	mov	r2, r3
 80041b6:	f107 0310 	add.w	r3, r7, #16
 80041ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80041be:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	3730      	adds	r7, #48	@ 0x30
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041cc:	b002      	add	sp, #8
 80041ce:	4770      	bx	lr

080041d0 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08c      	sub	sp, #48	@ 0x30
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <mg_http_get_var+0x20>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <mg_http_get_var+0x2c>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 80041fc:	f06f 0301 	mvn.w	r3, #1
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
 8004202:	e033      	b.n	800426c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <mg_http_get_var+0x4a>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <mg_http_get_var+0x4a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	e024      	b.n	800426c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8004222:	f107 031c 	add.w	r3, r7, #28
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f00a fdc5 	bl	800edb8 <mg_str_s>
 800422e:	f107 0014 	add.w	r0, r7, #20
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	ca06      	ldmia	r2, {r1, r2}
 800423c:	f7ff ff78 	bl	8004130 <mg_http_var>
    if (v.buf == NULL) {
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8004246:	f06f 0303 	mvn.w	r3, #3
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
 800424c:	e00e      	b.n	800426c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	69b9      	ldr	r1, [r7, #24]
 8004252:	2301      	movs	r3, #1
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	f000 f82e 	bl	80042ba <mg_url_decode>
 800425e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	da02      	bge.n	800426c <mg_http_get_var+0x9c>
 8004266:	f06f 0302 	mvn.w	r3, #2
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800426e:	4618      	mov	r0, r3
 8004270:	3728      	adds	r7, #40	@ 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <isx>:

static bool isx(int c) {
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b2f      	cmp	r3, #47	@ 0x2f
 8004282:	dd02      	ble.n	800428a <isx+0x14>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b39      	cmp	r3, #57	@ 0x39
 8004288:	dd0b      	ble.n	80042a2 <isx+0x2c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b60      	cmp	r3, #96	@ 0x60
 800428e:	dd02      	ble.n	8004296 <isx+0x20>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b66      	cmp	r3, #102	@ 0x66
 8004294:	dd05      	ble.n	80042a2 <isx+0x2c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b40      	cmp	r3, #64	@ 0x40
 800429a:	dd04      	ble.n	80042a6 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b46      	cmp	r3, #70	@ 0x46
 80042a0:	dc01      	bgt.n	80042a6 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <isx+0x32>
 80042a6:	2300      	movs	r3, #0
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08a      	sub	sp, #40	@ 0x28
 80042be:	af02      	add	r7, sp, #8
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	e059      	b.n	8004386 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b25      	cmp	r3, #37	@ 0x25
 80042dc:	d136      	bne.n	800434c <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3302      	adds	r3, #2
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d92e      	bls.n	8004346 <mg_url_decode+0x8c>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	3301      	adds	r3, #1
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ffbf 	bl	8004276 <isx>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d023      	beq.n	8004346 <mg_url_decode+0x8c>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3302      	adds	r3, #2
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ffb4 	bl	8004276 <isx>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d018      	beq.n	8004346 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	3301      	adds	r3, #1
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	18d1      	adds	r1, r2, r3
 800431c:	f107 0310 	add.w	r3, r7, #16
 8004320:	2202      	movs	r2, #2
 8004322:	4618      	mov	r0, r3
 8004324:	f00a fd65 	bl	800edf2 <mg_str_n>
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	2201      	movs	r2, #1
 8004330:	9200      	str	r2, [sp, #0]
 8004332:	2210      	movs	r2, #16
 8004334:	f107 0110 	add.w	r1, r7, #16
 8004338:	c903      	ldmia	r1, {r0, r1}
 800433a:	f00a ff98 	bl	800f26e <mg_str_to_num>
        i += 2;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3302      	adds	r3, #2
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e019      	b.n	800437a <mg_url_decode+0xc0>
      } else {
        return -1;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e03a      	b.n	80043c2 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <mg_url_decode+0xb0>
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b2b      	cmp	r3, #43	@ 0x2b
 800435c:	d105      	bne.n	800436a <mg_url_decode+0xb0>
      dst[j] = ' ';
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	2220      	movs	r2, #32
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e007      	b.n	800437a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	441a      	add	r2, r3
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	440b      	add	r3, r1
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	3301      	adds	r3, #1
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d204      	bcs.n	8004398 <mg_url_decode+0xde>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3301      	adds	r3, #1
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d89c      	bhi.n	80042d2 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d204      	bcs.n	80043aa <mg_url_decode+0xf0>
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d305      	bcc.n	80043be <mg_url_decode+0x104>
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d201      	bcs.n	80043be <mg_url_decode+0x104>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	e001      	b.n	80043c2 <mg_url_decode+0x108>
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <isok>:

static bool isok(uint8_t c) {
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	2b0a      	cmp	r3, #10
 80043d8:	d008      	beq.n	80043ec <isok+0x22>
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b0d      	cmp	r3, #13
 80043de:	d005      	beq.n	80043ec <isok+0x22>
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	d002      	beq.n	80043ec <isok+0x22>
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	2b1f      	cmp	r3, #31
 80043ea:	d901      	bls.n	80043f0 <isok+0x26>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <isok+0x28>
 80043f0:	2300      	movs	r3, #0
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e03c      	b.n	800448e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ffd4 	bl	80043ca <isok>
 8004422:	4603      	mov	r3, r0
 8004424:	f083 0301 	eor.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <mg_http_get_request_len+0x30>
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e031      	b.n	8004498 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <mg_http_get_request_len+0x50>
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b0a      	cmp	r3, #10
 8004444:	d106      	bne.n	8004454 <mg_http_get_request_len+0x50>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3b01      	subs	r3, #1
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b0a      	cmp	r3, #10
 8004452:	d016      	beq.n	8004482 <mg_http_get_request_len+0x7e>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d916      	bls.n	8004488 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b0a      	cmp	r3, #10
 8004464:	d110      	bne.n	8004488 <mg_http_get_request_len+0x84>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b0d      	cmp	r3, #13
 8004472:	d109      	bne.n	8004488 <mg_http_get_request_len+0x84>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3b02      	subs	r3, #2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b0a      	cmp	r3, #10
 8004480:	d102      	bne.n	8004488 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	e007      	b.n	8004498 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3be      	bcc.n	8004414 <mg_http_get_request_len+0x10>
  }
  return 0;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80044aa:	6838      	ldr	r0, [r7, #0]
 80044ac:	f7fb ff78 	bl	80003a0 <strlen>
 80044b0:	61b8      	str	r0, [r7, #24]
 80044b2:	231e      	movs	r3, #30
 80044b4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	e01f      	b.n	80044fc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3302      	adds	r3, #2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d10b      	bne.n	80044f6 <mg_http_get_header+0x56>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fd4b 	bl	8003f82 <mg_ncasecmp>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <mg_http_get_header+0x56>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	e010      	b.n	8004518 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3301      	adds	r3, #1
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	429a      	cmp	r2, r3
 8004502:	d208      	bcs.n	8004516 <mg_http_get_header+0x76>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3302      	adds	r3, #2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1d2      	bne.n	80044bc <mg_http_get_header+0x1c>
  }
  return NULL;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004530:	2b80      	cmp	r3, #128	@ 0x80
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	2b20      	cmp	r3, #32
 8004566:	d904      	bls.n	8004572 <clen+0x2c>
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	2b7d      	cmp	r3, #125	@ 0x7d
 800456c:	d801      	bhi.n	8004572 <clen+0x2c>
 800456e:	2301      	movs	r3, #1
 8004570:	e054      	b.n	800461c <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004578:	2bc0      	cmp	r3, #192	@ 0xc0
 800457a:	d10d      	bne.n	8004598 <clen+0x52>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	dd0a      	ble.n	8004598 <clen+0x52>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3301      	adds	r3, #1
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ffc9 	bl	8004520 <vcb>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <clen+0x52>
 8004594:	2302      	movs	r3, #2
 8004596:	e041      	b.n	800461c <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800459e:	2be0      	cmp	r3, #224	@ 0xe0
 80045a0:	d116      	bne.n	80045d0 <clen+0x8a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	dd13      	ble.n	80045d0 <clen+0x8a>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ffb6 	bl	8004520 <vcb>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <clen+0x8a>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3302      	adds	r3, #2
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ffad 	bl	8004520 <vcb>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <clen+0x8a>
 80045cc:	2303      	movs	r3, #3
 80045ce:	e025      	b.n	800461c <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80045d6:	2bf0      	cmp	r3, #240	@ 0xf0
 80045d8:	d11f      	bne.n	800461a <clen+0xd4>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	dd1c      	ble.n	800461a <clen+0xd4>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff9a 	bl	8004520 <vcb>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d013      	beq.n	800461a <clen+0xd4>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	3302      	adds	r3, #2
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff91 	bl	8004520 <vcb>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <clen+0xd4>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3303      	adds	r3, #3
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff88 	bl	8004520 <vcb>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <clen+0xd4>
    return 4;
 8004616:	2304      	movs	r3, #4
 8004618:	e000      	b.n	800461c <clen+0xd6>
  return 0;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8004636:	e007      	b.n	8004648 <skiptorn+0x24>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d207      	bcs.n	8004660 <skiptorn+0x3c>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b0a      	cmp	r3, #10
 8004656:	d003      	beq.n	8004660 <skiptorn+0x3c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b0d      	cmp	r3, #13
 800465e:	d1eb      	bne.n	8004638 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d208      	bcs.n	800467a <skiptorn+0x56>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b0d      	cmp	r3, #13
 800466e:	d106      	bne.n	800467e <skiptorn+0x5a>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b0a      	cmp	r3, #10
 8004678:	d001      	beq.n	800467e <skiptorn+0x5a>
 800467a:	2300      	movs	r3, #0
 800467c:	e017      	b.n	80046ae <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d206      	bcs.n	8004694 <skiptorn+0x70>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b0d      	cmp	r3, #13
 800468c:	d102      	bne.n	8004694 <skiptorn+0x70>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	d205      	bcs.n	80046a8 <skiptorn+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	60fa      	str	r2, [r7, #12]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b0a      	cmp	r3, #10
 80046a6:	d001      	beq.n	80046ac <skiptorn+0x88>
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <skiptorn+0x8a>
  return s;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b08a      	sub	sp, #40	@ 0x28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80046c8:	2300      	movs	r3, #0
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80046cc:	e09a      	b.n	8004804 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d301      	bcc.n	80046ea <mg_http_parse_headers+0x30>
 80046e6:	2300      	movs	r3, #0
 80046e8:	e092      	b.n	8004810 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b0a      	cmp	r3, #10
 80046f0:	f000 808d 	beq.w	800480e <mg_http_parse_headers+0x154>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b0d      	cmp	r3, #13
 80046fa:	d105      	bne.n	8004708 <mg_http_parse_headers+0x4e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b0a      	cmp	r3, #10
 8004704:	f000 8083 	beq.w	800480e <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 800470c:	e007      	b.n	800471e <mg_http_parse_headers+0x64>
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	4413      	add	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4413      	add	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	d20b      	bcs.n	800473e <mg_http_parse_headers+0x84>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b3a      	cmp	r3, #58	@ 0x3a
 800472c:	d007      	beq.n	800473e <mg_http_parse_headers+0x84>
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff ff08 	bl	8004546 <clen>
 8004736:	6238      	str	r0, [r7, #32]
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e7      	bne.n	800470e <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <mg_http_parse_headers+0x8e>
 8004744:	2300      	movs	r3, #0
 8004746:	e063      	b.n	8004810 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d206      	bcs.n	800475e <mg_http_parse_headers+0xa4>
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fef7 	bl	8004546 <clen>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <mg_http_parse_headers+0xa8>
 800475e:	2300      	movs	r3, #0
 8004760:	e056      	b.n	8004810 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	60fa      	str	r2, [r7, #12]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b3a      	cmp	r3, #58	@ 0x3a
 800476c:	d004      	beq.n	8004778 <mg_http_parse_headers+0xbe>
 800476e:	2300      	movs	r3, #0
 8004770:	e04e      	b.n	8004810 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3301      	adds	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	d207      	bcs.n	8004790 <mg_http_parse_headers+0xd6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b20      	cmp	r3, #32
 8004786:	d0f4      	beq.n	8004772 <mg_http_parse_headers+0xb8>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b09      	cmp	r3, #9
 800478e:	d0f0      	beq.n	8004772 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	461a      	mov	r2, r3
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ff43 	bl	8004624 <skiptorn>
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <mg_http_parse_headers+0xf6>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e032      	b.n	8004810 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <mg_http_parse_headers+0x118>
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d0f2      	beq.n	80047aa <mg_http_parse_headers+0xf0>
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	d0eb      	beq.n	80047aa <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	461a      	mov	r2, r3
 80047dc:	f107 0318 	add.w	r3, r7, #24
 80047e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	3308      	adds	r3, #8
 80047f2:	f107 0210 	add.w	r2, r7, #16
 80047f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047fa:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	3301      	adds	r3, #1
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
 8004804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	f4ff af60 	bcc.w	80046ce <mg_http_parse_headers+0x14>
  }
  return true;
 800480e:	2301      	movs	r3, #1
}
 8004810:	4618      	mov	r0, r3
 8004812:	3728      	adds	r7, #40	@ 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b090      	sub	sp, #64	@ 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff fdec 	bl	8004404 <mg_http_get_request_len>
 800482c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <mg_http_parse+0x24>
 8004834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	e000      	b.n	800483e <mg_http_parse+0x26>
 800483c:	2300      	movs	r3, #0
 800483e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8004840:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8004844:	2100      	movs	r1, #0
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f020 fb08 	bl	8024e5c <memset>
  if (req_len <= 0) return req_len;
 800484c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	dc01      	bgt.n	8004856 <mg_http_parse+0x3e>
 8004852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004854:	e13f      	b.n	8004ad6 <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800486e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8004872:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f04f 32ff 	mov.w	r2, #4294967295
 8004880:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8004896:	e009      	b.n	80048ac <mg_http_parse+0x94>
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489c:	4413      	add	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a6:	441a      	add	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d20b      	bcs.n	80048cc <mg_http_parse+0xb4>
 80048b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fe45 	bl	8004546 <clen>
 80048bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e9      	bne.n	8004898 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80048c4:	e002      	b.n	80048cc <mg_http_parse+0xb4>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d203      	bcs.n	80048dc <mg_http_parse+0xc4>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d0f4      	beq.n	80048c6 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80048e2:	e009      	b.n	80048f8 <mg_http_parse+0xe0>
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d20b      	bcs.n	8004918 <mg_http_parse+0x100>
 8004900:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff fe1f 	bl	8004546 <clen>
 8004908:	6378      	str	r0, [r7, #52]	@ 0x34
 800490a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e9      	bne.n	80048e4 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8004910:	e002      	b.n	8004918 <mg_http_parse+0x100>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	429a      	cmp	r2, r3
 800491e:	d203      	bcs.n	8004928 <mg_http_parse+0x110>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b20      	cmp	r3, #32
 8004926:	d0f4      	beq.n	8004912 <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3318      	adds	r3, #24
 800492c:	461a      	mov	r2, r3
 800492e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fe77 	bl	8004624 <skiptorn>
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <mg_http_parse+0x12a>
 800493e:	2300      	movs	r3, #0
 8004940:	e0c9      	b.n	8004ad6 <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6898      	ldr	r0, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	213f      	movs	r1, #63	@ 0x3f
 800494e:	f7fb fcd7 	bl	8000300 <memchr>
 8004952:	6338      	str	r0, [r7, #48]	@ 0x30
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	2b00      	cmp	r3, #0
 8004958:	d015      	beq.n	8004986 <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	441a      	add	r2, r3
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	3301      	adds	r3, #1
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	461a      	mov	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <mg_http_parse+0x17e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <mg_http_parse+0x184>
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	e09c      	b.n	8004ad6 <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f103 0220 	add.w	r2, r3, #32
 80049a2:	231e      	movs	r3, #30
 80049a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff fe87 	bl	80046ba <mg_http_parse_headers>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	e08b      	b.n	8004ad6 <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80049be:	4948      	ldr	r1, [pc, #288]	@ (8004ae0 <mg_http_parse+0x2c8>)
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fd6d 	bl	80044a0 <mg_http_get_header>
 80049c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d018      	beq.n	8004a00 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 80049d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049da:	f7ff fb13 	bl	8004004 <mg_to_size_t>
 80049de:	4603      	mov	r3, r0
 80049e0:	f083 0301 	eor.w	r3, r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <mg_http_parse+0x1d8>
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295
 80049ee:	e072      	b.n	8004ad6 <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f8:	441a      	add	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2205      	movs	r2, #5
 8004a06:	4937      	ldr	r1, [pc, #220]	@ (8004ae4 <mg_http_parse+0x2cc>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff faba 	bl	8003f82 <mg_ncasecmp>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d12a      	bne.n	8004a7e <mg_http_parse+0x266>
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d127      	bne.n	8004a7e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	492d      	ldr	r1, [pc, #180]	@ (8004ae8 <mg_http_parse+0x2d0>)
 8004a34:	4618      	mov	r0, r3
 8004a36:	f00a f9bf 	bl	800edb8 <mg_str_s>
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	cb0c      	ldmia	r3, {r2, r3}
 8004a42:	c903      	ldmia	r1, {r0, r1}
 8004a44:	f00a fa7b 	bl	800ef3e <mg_strcasecmp>
 8004a48:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8004a4e:	f107 0318 	add.w	r3, r7, #24
 8004a52:	4926      	ldr	r1, [pc, #152]	@ (8004aec <mg_http_parse+0x2d4>)
 8004a54:	4618      	mov	r0, r3
 8004a56:	f00a f9af 	bl	800edb8 <mg_str_s>
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	f107 0318 	add.w	r3, r7, #24
 8004a60:	cb0c      	ldmia	r3, {r2, r3}
 8004a62:	c903      	ldmia	r1, {r0, r1}
 8004a64:	f00a fa6b 	bl	800ef3e <mg_strcasecmp>
 8004a68:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <mg_http_parse+0x266>
    hm->body.len = 0;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8004a76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d11b      	bne.n	8004ac2 <mg_http_parse+0x2aa>
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d018      	beq.n	8004ac2 <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8004a90:	f107 0320 	add.w	r3, r7, #32
 8004a94:	4916      	ldr	r1, [pc, #88]	@ (8004af0 <mg_http_parse+0x2d8>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f00a f98e 	bl	800edb8 <mg_str_s>
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	f107 0320 	add.w	r3, r7, #32
 8004aa2:	cb0c      	ldmia	r3, {r2, r3}
 8004aa4:	3108      	adds	r1, #8
 8004aa6:	c903      	ldmia	r1, {r0, r1}
 8004aa8:	f00a fa49 	bl	800ef3e <mg_strcasecmp>
 8004aac:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <mg_http_parse+0x2aa>
    hm->body.len = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8004aba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d202      	bcs.n	8004ad4 <mg_http_parse+0x2bc>
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e000      	b.n	8004ad6 <mg_http_parse+0x2be>

  return req_len;
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3740      	adds	r7, #64	@ 0x40
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08028eec 	.word	0x08028eec
 8004ae4:	08028efc 	.word	0x08028efc
 8004ae8:	08028f04 	.word	0x08028f04
 8004aec:	08028f08 	.word	0x08028f08
 8004af0:	08028f10 	.word	0x08028f10

08004af4 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3b64      	subs	r3, #100	@ 0x64
 8004b00:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8004b04:	4293      	cmp	r3, r2
 8004b06:	f200 8469 	bhi.w	80053dc <mg_http_status_code_str+0x8e8>
 8004b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b10 <mg_http_status_code_str+0x1c>)
 8004b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b10:	080052e1 	.word	0x080052e1
 8004b14:	080052e5 	.word	0x080052e5
 8004b18:	080052e9 	.word	0x080052e9
 8004b1c:	080053dd 	.word	0x080053dd
 8004b20:	080053dd 	.word	0x080053dd
 8004b24:	080053dd 	.word	0x080053dd
 8004b28:	080053dd 	.word	0x080053dd
 8004b2c:	080053dd 	.word	0x080053dd
 8004b30:	080053dd 	.word	0x080053dd
 8004b34:	080053dd 	.word	0x080053dd
 8004b38:	080053dd 	.word	0x080053dd
 8004b3c:	080053dd 	.word	0x080053dd
 8004b40:	080053dd 	.word	0x080053dd
 8004b44:	080053dd 	.word	0x080053dd
 8004b48:	080053dd 	.word	0x080053dd
 8004b4c:	080053dd 	.word	0x080053dd
 8004b50:	080053dd 	.word	0x080053dd
 8004b54:	080053dd 	.word	0x080053dd
 8004b58:	080053dd 	.word	0x080053dd
 8004b5c:	080053dd 	.word	0x080053dd
 8004b60:	080053dd 	.word	0x080053dd
 8004b64:	080053dd 	.word	0x080053dd
 8004b68:	080053dd 	.word	0x080053dd
 8004b6c:	080053dd 	.word	0x080053dd
 8004b70:	080053dd 	.word	0x080053dd
 8004b74:	080053dd 	.word	0x080053dd
 8004b78:	080053dd 	.word	0x080053dd
 8004b7c:	080053dd 	.word	0x080053dd
 8004b80:	080053dd 	.word	0x080053dd
 8004b84:	080053dd 	.word	0x080053dd
 8004b88:	080053dd 	.word	0x080053dd
 8004b8c:	080053dd 	.word	0x080053dd
 8004b90:	080053dd 	.word	0x080053dd
 8004b94:	080053dd 	.word	0x080053dd
 8004b98:	080053dd 	.word	0x080053dd
 8004b9c:	080053dd 	.word	0x080053dd
 8004ba0:	080053dd 	.word	0x080053dd
 8004ba4:	080053dd 	.word	0x080053dd
 8004ba8:	080053dd 	.word	0x080053dd
 8004bac:	080053dd 	.word	0x080053dd
 8004bb0:	080053dd 	.word	0x080053dd
 8004bb4:	080053dd 	.word	0x080053dd
 8004bb8:	080053dd 	.word	0x080053dd
 8004bbc:	080053dd 	.word	0x080053dd
 8004bc0:	080053dd 	.word	0x080053dd
 8004bc4:	080053dd 	.word	0x080053dd
 8004bc8:	080053dd 	.word	0x080053dd
 8004bcc:	080053dd 	.word	0x080053dd
 8004bd0:	080053dd 	.word	0x080053dd
 8004bd4:	080053dd 	.word	0x080053dd
 8004bd8:	080053dd 	.word	0x080053dd
 8004bdc:	080053dd 	.word	0x080053dd
 8004be0:	080053dd 	.word	0x080053dd
 8004be4:	080053dd 	.word	0x080053dd
 8004be8:	080053dd 	.word	0x080053dd
 8004bec:	080053dd 	.word	0x080053dd
 8004bf0:	080053dd 	.word	0x080053dd
 8004bf4:	080053dd 	.word	0x080053dd
 8004bf8:	080053dd 	.word	0x080053dd
 8004bfc:	080053dd 	.word	0x080053dd
 8004c00:	080053dd 	.word	0x080053dd
 8004c04:	080053dd 	.word	0x080053dd
 8004c08:	080053dd 	.word	0x080053dd
 8004c0c:	080053dd 	.word	0x080053dd
 8004c10:	080053dd 	.word	0x080053dd
 8004c14:	080053dd 	.word	0x080053dd
 8004c18:	080053dd 	.word	0x080053dd
 8004c1c:	080053dd 	.word	0x080053dd
 8004c20:	080053dd 	.word	0x080053dd
 8004c24:	080053dd 	.word	0x080053dd
 8004c28:	080053dd 	.word	0x080053dd
 8004c2c:	080053dd 	.word	0x080053dd
 8004c30:	080053dd 	.word	0x080053dd
 8004c34:	080053dd 	.word	0x080053dd
 8004c38:	080053dd 	.word	0x080053dd
 8004c3c:	080053dd 	.word	0x080053dd
 8004c40:	080053dd 	.word	0x080053dd
 8004c44:	080053dd 	.word	0x080053dd
 8004c48:	080053dd 	.word	0x080053dd
 8004c4c:	080053dd 	.word	0x080053dd
 8004c50:	080053dd 	.word	0x080053dd
 8004c54:	080053dd 	.word	0x080053dd
 8004c58:	080053dd 	.word	0x080053dd
 8004c5c:	080053dd 	.word	0x080053dd
 8004c60:	080053dd 	.word	0x080053dd
 8004c64:	080053dd 	.word	0x080053dd
 8004c68:	080053dd 	.word	0x080053dd
 8004c6c:	080053dd 	.word	0x080053dd
 8004c70:	080053dd 	.word	0x080053dd
 8004c74:	080053dd 	.word	0x080053dd
 8004c78:	080053dd 	.word	0x080053dd
 8004c7c:	080053dd 	.word	0x080053dd
 8004c80:	080053dd 	.word	0x080053dd
 8004c84:	080053dd 	.word	0x080053dd
 8004c88:	080053dd 	.word	0x080053dd
 8004c8c:	080053dd 	.word	0x080053dd
 8004c90:	080053dd 	.word	0x080053dd
 8004c94:	080053dd 	.word	0x080053dd
 8004c98:	080053dd 	.word	0x080053dd
 8004c9c:	080053dd 	.word	0x080053dd
 8004ca0:	080052ed 	.word	0x080052ed
 8004ca4:	080052f1 	.word	0x080052f1
 8004ca8:	080052f5 	.word	0x080052f5
 8004cac:	080052f9 	.word	0x080052f9
 8004cb0:	080052fd 	.word	0x080052fd
 8004cb4:	08005301 	.word	0x08005301
 8004cb8:	08005305 	.word	0x08005305
 8004cbc:	08005309 	.word	0x08005309
 8004cc0:	0800530d 	.word	0x0800530d
 8004cc4:	080053dd 	.word	0x080053dd
 8004cc8:	080053dd 	.word	0x080053dd
 8004ccc:	080053dd 	.word	0x080053dd
 8004cd0:	080053dd 	.word	0x080053dd
 8004cd4:	080053dd 	.word	0x080053dd
 8004cd8:	080053dd 	.word	0x080053dd
 8004cdc:	080053dd 	.word	0x080053dd
 8004ce0:	080053dd 	.word	0x080053dd
 8004ce4:	080053dd 	.word	0x080053dd
 8004ce8:	080053dd 	.word	0x080053dd
 8004cec:	080053dd 	.word	0x080053dd
 8004cf0:	080053dd 	.word	0x080053dd
 8004cf4:	080053dd 	.word	0x080053dd
 8004cf8:	080053dd 	.word	0x080053dd
 8004cfc:	080053dd 	.word	0x080053dd
 8004d00:	080053dd 	.word	0x080053dd
 8004d04:	080053dd 	.word	0x080053dd
 8004d08:	08005311 	.word	0x08005311
 8004d0c:	080053dd 	.word	0x080053dd
 8004d10:	080053dd 	.word	0x080053dd
 8004d14:	080053dd 	.word	0x080053dd
 8004d18:	080053dd 	.word	0x080053dd
 8004d1c:	080053dd 	.word	0x080053dd
 8004d20:	080053dd 	.word	0x080053dd
 8004d24:	080053dd 	.word	0x080053dd
 8004d28:	080053dd 	.word	0x080053dd
 8004d2c:	080053dd 	.word	0x080053dd
 8004d30:	080053dd 	.word	0x080053dd
 8004d34:	080053dd 	.word	0x080053dd
 8004d38:	080053dd 	.word	0x080053dd
 8004d3c:	080053dd 	.word	0x080053dd
 8004d40:	080053dd 	.word	0x080053dd
 8004d44:	080053dd 	.word	0x080053dd
 8004d48:	080053dd 	.word	0x080053dd
 8004d4c:	080053dd 	.word	0x080053dd
 8004d50:	080053dd 	.word	0x080053dd
 8004d54:	080053dd 	.word	0x080053dd
 8004d58:	080053dd 	.word	0x080053dd
 8004d5c:	080053dd 	.word	0x080053dd
 8004d60:	080053dd 	.word	0x080053dd
 8004d64:	080053dd 	.word	0x080053dd
 8004d68:	080053dd 	.word	0x080053dd
 8004d6c:	080053dd 	.word	0x080053dd
 8004d70:	080053dd 	.word	0x080053dd
 8004d74:	080053dd 	.word	0x080053dd
 8004d78:	080053dd 	.word	0x080053dd
 8004d7c:	080053dd 	.word	0x080053dd
 8004d80:	080053dd 	.word	0x080053dd
 8004d84:	080053dd 	.word	0x080053dd
 8004d88:	080053dd 	.word	0x080053dd
 8004d8c:	080053dd 	.word	0x080053dd
 8004d90:	080053dd 	.word	0x080053dd
 8004d94:	080053dd 	.word	0x080053dd
 8004d98:	080053dd 	.word	0x080053dd
 8004d9c:	080053dd 	.word	0x080053dd
 8004da0:	080053dd 	.word	0x080053dd
 8004da4:	080053dd 	.word	0x080053dd
 8004da8:	080053dd 	.word	0x080053dd
 8004dac:	080053dd 	.word	0x080053dd
 8004db0:	080053dd 	.word	0x080053dd
 8004db4:	080053dd 	.word	0x080053dd
 8004db8:	080053dd 	.word	0x080053dd
 8004dbc:	080053dd 	.word	0x080053dd
 8004dc0:	080053dd 	.word	0x080053dd
 8004dc4:	080053dd 	.word	0x080053dd
 8004dc8:	080053dd 	.word	0x080053dd
 8004dcc:	080053dd 	.word	0x080053dd
 8004dd0:	080053dd 	.word	0x080053dd
 8004dd4:	080053dd 	.word	0x080053dd
 8004dd8:	080053dd 	.word	0x080053dd
 8004ddc:	080053dd 	.word	0x080053dd
 8004de0:	080053dd 	.word	0x080053dd
 8004de4:	080053dd 	.word	0x080053dd
 8004de8:	080053dd 	.word	0x080053dd
 8004dec:	080053dd 	.word	0x080053dd
 8004df0:	080053dd 	.word	0x080053dd
 8004df4:	080053dd 	.word	0x080053dd
 8004df8:	080053dd 	.word	0x080053dd
 8004dfc:	080053dd 	.word	0x080053dd
 8004e00:	080053dd 	.word	0x080053dd
 8004e04:	080053dd 	.word	0x080053dd
 8004e08:	080053dd 	.word	0x080053dd
 8004e0c:	080053dd 	.word	0x080053dd
 8004e10:	080053dd 	.word	0x080053dd
 8004e14:	080053dd 	.word	0x080053dd
 8004e18:	080053dd 	.word	0x080053dd
 8004e1c:	080053dd 	.word	0x080053dd
 8004e20:	080053dd 	.word	0x080053dd
 8004e24:	080053dd 	.word	0x080053dd
 8004e28:	080053dd 	.word	0x080053dd
 8004e2c:	080053dd 	.word	0x080053dd
 8004e30:	08005315 	.word	0x08005315
 8004e34:	08005319 	.word	0x08005319
 8004e38:	0800531d 	.word	0x0800531d
 8004e3c:	08005321 	.word	0x08005321
 8004e40:	08005325 	.word	0x08005325
 8004e44:	08005329 	.word	0x08005329
 8004e48:	080053dd 	.word	0x080053dd
 8004e4c:	0800532d 	.word	0x0800532d
 8004e50:	08005331 	.word	0x08005331
 8004e54:	080053dd 	.word	0x080053dd
 8004e58:	080053dd 	.word	0x080053dd
 8004e5c:	080053dd 	.word	0x080053dd
 8004e60:	080053dd 	.word	0x080053dd
 8004e64:	080053dd 	.word	0x080053dd
 8004e68:	080053dd 	.word	0x080053dd
 8004e6c:	080053dd 	.word	0x080053dd
 8004e70:	080053dd 	.word	0x080053dd
 8004e74:	080053dd 	.word	0x080053dd
 8004e78:	080053dd 	.word	0x080053dd
 8004e7c:	080053dd 	.word	0x080053dd
 8004e80:	080053dd 	.word	0x080053dd
 8004e84:	080053dd 	.word	0x080053dd
 8004e88:	080053dd 	.word	0x080053dd
 8004e8c:	080053dd 	.word	0x080053dd
 8004e90:	080053dd 	.word	0x080053dd
 8004e94:	080053dd 	.word	0x080053dd
 8004e98:	080053dd 	.word	0x080053dd
 8004e9c:	080053dd 	.word	0x080053dd
 8004ea0:	080053dd 	.word	0x080053dd
 8004ea4:	080053dd 	.word	0x080053dd
 8004ea8:	080053dd 	.word	0x080053dd
 8004eac:	080053dd 	.word	0x080053dd
 8004eb0:	080053dd 	.word	0x080053dd
 8004eb4:	080053dd 	.word	0x080053dd
 8004eb8:	080053dd 	.word	0x080053dd
 8004ebc:	080053dd 	.word	0x080053dd
 8004ec0:	080053dd 	.word	0x080053dd
 8004ec4:	080053dd 	.word	0x080053dd
 8004ec8:	080053dd 	.word	0x080053dd
 8004ecc:	080053dd 	.word	0x080053dd
 8004ed0:	080053dd 	.word	0x080053dd
 8004ed4:	080053dd 	.word	0x080053dd
 8004ed8:	080053dd 	.word	0x080053dd
 8004edc:	080053dd 	.word	0x080053dd
 8004ee0:	080053dd 	.word	0x080053dd
 8004ee4:	080053dd 	.word	0x080053dd
 8004ee8:	080053dd 	.word	0x080053dd
 8004eec:	080053dd 	.word	0x080053dd
 8004ef0:	080053dd 	.word	0x080053dd
 8004ef4:	080053dd 	.word	0x080053dd
 8004ef8:	080053dd 	.word	0x080053dd
 8004efc:	080053dd 	.word	0x080053dd
 8004f00:	080053dd 	.word	0x080053dd
 8004f04:	080053dd 	.word	0x080053dd
 8004f08:	080053dd 	.word	0x080053dd
 8004f0c:	080053dd 	.word	0x080053dd
 8004f10:	080053dd 	.word	0x080053dd
 8004f14:	080053dd 	.word	0x080053dd
 8004f18:	080053dd 	.word	0x080053dd
 8004f1c:	080053dd 	.word	0x080053dd
 8004f20:	080053dd 	.word	0x080053dd
 8004f24:	080053dd 	.word	0x080053dd
 8004f28:	080053dd 	.word	0x080053dd
 8004f2c:	080053dd 	.word	0x080053dd
 8004f30:	080053dd 	.word	0x080053dd
 8004f34:	080053dd 	.word	0x080053dd
 8004f38:	080053dd 	.word	0x080053dd
 8004f3c:	080053dd 	.word	0x080053dd
 8004f40:	080053dd 	.word	0x080053dd
 8004f44:	080053dd 	.word	0x080053dd
 8004f48:	080053dd 	.word	0x080053dd
 8004f4c:	080053dd 	.word	0x080053dd
 8004f50:	080053dd 	.word	0x080053dd
 8004f54:	080053dd 	.word	0x080053dd
 8004f58:	080053dd 	.word	0x080053dd
 8004f5c:	080053dd 	.word	0x080053dd
 8004f60:	080053dd 	.word	0x080053dd
 8004f64:	080053dd 	.word	0x080053dd
 8004f68:	080053dd 	.word	0x080053dd
 8004f6c:	080053dd 	.word	0x080053dd
 8004f70:	080053dd 	.word	0x080053dd
 8004f74:	080053dd 	.word	0x080053dd
 8004f78:	080053dd 	.word	0x080053dd
 8004f7c:	080053dd 	.word	0x080053dd
 8004f80:	080053dd 	.word	0x080053dd
 8004f84:	080053dd 	.word	0x080053dd
 8004f88:	080053dd 	.word	0x080053dd
 8004f8c:	080053dd 	.word	0x080053dd
 8004f90:	080053dd 	.word	0x080053dd
 8004f94:	080053dd 	.word	0x080053dd
 8004f98:	080053dd 	.word	0x080053dd
 8004f9c:	080053dd 	.word	0x080053dd
 8004fa0:	080053dd 	.word	0x080053dd
 8004fa4:	080053dd 	.word	0x080053dd
 8004fa8:	080053dd 	.word	0x080053dd
 8004fac:	080053dd 	.word	0x080053dd
 8004fb0:	080053dd 	.word	0x080053dd
 8004fb4:	080053dd 	.word	0x080053dd
 8004fb8:	080053dd 	.word	0x080053dd
 8004fbc:	080053dd 	.word	0x080053dd
 8004fc0:	08005335 	.word	0x08005335
 8004fc4:	08005339 	.word	0x08005339
 8004fc8:	0800533d 	.word	0x0800533d
 8004fcc:	08005341 	.word	0x08005341
 8004fd0:	08005345 	.word	0x08005345
 8004fd4:	08005349 	.word	0x08005349
 8004fd8:	0800534d 	.word	0x0800534d
 8004fdc:	08005351 	.word	0x08005351
 8004fe0:	08005355 	.word	0x08005355
 8004fe4:	08005359 	.word	0x08005359
 8004fe8:	0800535d 	.word	0x0800535d
 8004fec:	08005361 	.word	0x08005361
 8004ff0:	08005365 	.word	0x08005365
 8004ff4:	08005369 	.word	0x08005369
 8004ff8:	0800536d 	.word	0x0800536d
 8004ffc:	08005371 	.word	0x08005371
 8005000:	08005375 	.word	0x08005375
 8005004:	08005379 	.word	0x08005379
 8005008:	0800537d 	.word	0x0800537d
 800500c:	080053dd 	.word	0x080053dd
 8005010:	080053dd 	.word	0x080053dd
 8005014:	08005381 	.word	0x08005381
 8005018:	08005385 	.word	0x08005385
 800501c:	08005389 	.word	0x08005389
 8005020:	0800538d 	.word	0x0800538d
 8005024:	080053dd 	.word	0x080053dd
 8005028:	08005391 	.word	0x08005391
 800502c:	080053dd 	.word	0x080053dd
 8005030:	08005395 	.word	0x08005395
 8005034:	08005399 	.word	0x08005399
 8005038:	080053dd 	.word	0x080053dd
 800503c:	0800539d 	.word	0x0800539d
 8005040:	080053dd 	.word	0x080053dd
 8005044:	080053dd 	.word	0x080053dd
 8005048:	080053dd 	.word	0x080053dd
 800504c:	080053dd 	.word	0x080053dd
 8005050:	080053dd 	.word	0x080053dd
 8005054:	080053dd 	.word	0x080053dd
 8005058:	080053dd 	.word	0x080053dd
 800505c:	080053dd 	.word	0x080053dd
 8005060:	080053dd 	.word	0x080053dd
 8005064:	080053dd 	.word	0x080053dd
 8005068:	080053dd 	.word	0x080053dd
 800506c:	080053dd 	.word	0x080053dd
 8005070:	080053a1 	.word	0x080053a1
 8005074:	080053dd 	.word	0x080053dd
 8005078:	080053dd 	.word	0x080053dd
 800507c:	080053dd 	.word	0x080053dd
 8005080:	080053dd 	.word	0x080053dd
 8005084:	080053dd 	.word	0x080053dd
 8005088:	080053dd 	.word	0x080053dd
 800508c:	080053a5 	.word	0x080053a5
 8005090:	080053dd 	.word	0x080053dd
 8005094:	080053dd 	.word	0x080053dd
 8005098:	080053dd 	.word	0x080053dd
 800509c:	080053dd 	.word	0x080053dd
 80050a0:	080053dd 	.word	0x080053dd
 80050a4:	080053dd 	.word	0x080053dd
 80050a8:	080053dd 	.word	0x080053dd
 80050ac:	080053dd 	.word	0x080053dd
 80050b0:	080053dd 	.word	0x080053dd
 80050b4:	080053dd 	.word	0x080053dd
 80050b8:	080053dd 	.word	0x080053dd
 80050bc:	080053dd 	.word	0x080053dd
 80050c0:	080053dd 	.word	0x080053dd
 80050c4:	080053dd 	.word	0x080053dd
 80050c8:	080053dd 	.word	0x080053dd
 80050cc:	080053dd 	.word	0x080053dd
 80050d0:	080053dd 	.word	0x080053dd
 80050d4:	080053dd 	.word	0x080053dd
 80050d8:	080053dd 	.word	0x080053dd
 80050dc:	080053dd 	.word	0x080053dd
 80050e0:	080053dd 	.word	0x080053dd
 80050e4:	080053dd 	.word	0x080053dd
 80050e8:	080053dd 	.word	0x080053dd
 80050ec:	080053dd 	.word	0x080053dd
 80050f0:	080053dd 	.word	0x080053dd
 80050f4:	080053dd 	.word	0x080053dd
 80050f8:	080053dd 	.word	0x080053dd
 80050fc:	080053dd 	.word	0x080053dd
 8005100:	080053dd 	.word	0x080053dd
 8005104:	080053dd 	.word	0x080053dd
 8005108:	080053dd 	.word	0x080053dd
 800510c:	080053dd 	.word	0x080053dd
 8005110:	080053dd 	.word	0x080053dd
 8005114:	080053dd 	.word	0x080053dd
 8005118:	080053dd 	.word	0x080053dd
 800511c:	080053dd 	.word	0x080053dd
 8005120:	080053dd 	.word	0x080053dd
 8005124:	080053dd 	.word	0x080053dd
 8005128:	080053dd 	.word	0x080053dd
 800512c:	080053dd 	.word	0x080053dd
 8005130:	080053dd 	.word	0x080053dd
 8005134:	080053dd 	.word	0x080053dd
 8005138:	080053dd 	.word	0x080053dd
 800513c:	080053dd 	.word	0x080053dd
 8005140:	080053dd 	.word	0x080053dd
 8005144:	080053dd 	.word	0x080053dd
 8005148:	080053dd 	.word	0x080053dd
 800514c:	080053a9 	.word	0x080053a9
 8005150:	080053ad 	.word	0x080053ad
 8005154:	080053b1 	.word	0x080053b1
 8005158:	080053b5 	.word	0x080053b5
 800515c:	080053b9 	.word	0x080053b9
 8005160:	080053bd 	.word	0x080053bd
 8005164:	080053c1 	.word	0x080053c1
 8005168:	080053c5 	.word	0x080053c5
 800516c:	080053c9 	.word	0x080053c9
 8005170:	080053cd 	.word	0x080053cd
 8005174:	080053dd 	.word	0x080053dd
 8005178:	080053d1 	.word	0x080053d1
 800517c:	080053d5 	.word	0x080053d5
 8005180:	080053dd 	.word	0x080053dd
 8005184:	080053dd 	.word	0x080053dd
 8005188:	080053dd 	.word	0x080053dd
 800518c:	080053dd 	.word	0x080053dd
 8005190:	080053dd 	.word	0x080053dd
 8005194:	080053dd 	.word	0x080053dd
 8005198:	080053dd 	.word	0x080053dd
 800519c:	080053dd 	.word	0x080053dd
 80051a0:	080053dd 	.word	0x080053dd
 80051a4:	080053dd 	.word	0x080053dd
 80051a8:	080053dd 	.word	0x080053dd
 80051ac:	080053dd 	.word	0x080053dd
 80051b0:	080053dd 	.word	0x080053dd
 80051b4:	080053dd 	.word	0x080053dd
 80051b8:	080053dd 	.word	0x080053dd
 80051bc:	080053dd 	.word	0x080053dd
 80051c0:	080053dd 	.word	0x080053dd
 80051c4:	080053dd 	.word	0x080053dd
 80051c8:	080053dd 	.word	0x080053dd
 80051cc:	080053dd 	.word	0x080053dd
 80051d0:	080053dd 	.word	0x080053dd
 80051d4:	080053dd 	.word	0x080053dd
 80051d8:	080053dd 	.word	0x080053dd
 80051dc:	080053dd 	.word	0x080053dd
 80051e0:	080053dd 	.word	0x080053dd
 80051e4:	080053dd 	.word	0x080053dd
 80051e8:	080053dd 	.word	0x080053dd
 80051ec:	080053dd 	.word	0x080053dd
 80051f0:	080053dd 	.word	0x080053dd
 80051f4:	080053dd 	.word	0x080053dd
 80051f8:	080053dd 	.word	0x080053dd
 80051fc:	080053dd 	.word	0x080053dd
 8005200:	080053dd 	.word	0x080053dd
 8005204:	080053dd 	.word	0x080053dd
 8005208:	080053dd 	.word	0x080053dd
 800520c:	080053dd 	.word	0x080053dd
 8005210:	080053dd 	.word	0x080053dd
 8005214:	080053dd 	.word	0x080053dd
 8005218:	080053dd 	.word	0x080053dd
 800521c:	080053dd 	.word	0x080053dd
 8005220:	080053dd 	.word	0x080053dd
 8005224:	080053dd 	.word	0x080053dd
 8005228:	080053dd 	.word	0x080053dd
 800522c:	080053dd 	.word	0x080053dd
 8005230:	080053dd 	.word	0x080053dd
 8005234:	080053dd 	.word	0x080053dd
 8005238:	080053dd 	.word	0x080053dd
 800523c:	080053dd 	.word	0x080053dd
 8005240:	080053dd 	.word	0x080053dd
 8005244:	080053dd 	.word	0x080053dd
 8005248:	080053dd 	.word	0x080053dd
 800524c:	080053dd 	.word	0x080053dd
 8005250:	080053dd 	.word	0x080053dd
 8005254:	080053dd 	.word	0x080053dd
 8005258:	080053dd 	.word	0x080053dd
 800525c:	080053dd 	.word	0x080053dd
 8005260:	080053dd 	.word	0x080053dd
 8005264:	080053dd 	.word	0x080053dd
 8005268:	080053dd 	.word	0x080053dd
 800526c:	080053dd 	.word	0x080053dd
 8005270:	080053dd 	.word	0x080053dd
 8005274:	080053dd 	.word	0x080053dd
 8005278:	080053dd 	.word	0x080053dd
 800527c:	080053dd 	.word	0x080053dd
 8005280:	080053dd 	.word	0x080053dd
 8005284:	080053dd 	.word	0x080053dd
 8005288:	080053dd 	.word	0x080053dd
 800528c:	080053dd 	.word	0x080053dd
 8005290:	080053dd 	.word	0x080053dd
 8005294:	080053dd 	.word	0x080053dd
 8005298:	080053dd 	.word	0x080053dd
 800529c:	080053dd 	.word	0x080053dd
 80052a0:	080053dd 	.word	0x080053dd
 80052a4:	080053dd 	.word	0x080053dd
 80052a8:	080053dd 	.word	0x080053dd
 80052ac:	080053dd 	.word	0x080053dd
 80052b0:	080053dd 	.word	0x080053dd
 80052b4:	080053dd 	.word	0x080053dd
 80052b8:	080053dd 	.word	0x080053dd
 80052bc:	080053dd 	.word	0x080053dd
 80052c0:	080053dd 	.word	0x080053dd
 80052c4:	080053dd 	.word	0x080053dd
 80052c8:	080053dd 	.word	0x080053dd
 80052cc:	080053dd 	.word	0x080053dd
 80052d0:	080053dd 	.word	0x080053dd
 80052d4:	080053dd 	.word	0x080053dd
 80052d8:	080053dd 	.word	0x080053dd
 80052dc:	080053d9 	.word	0x080053d9
    case 100: return "Continue";
 80052e0:	4b42      	ldr	r3, [pc, #264]	@ (80053ec <mg_http_status_code_str+0x8f8>)
 80052e2:	e07c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 80052e4:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <mg_http_status_code_str+0x8fc>)
 80052e6:	e07a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 80052e8:	4b42      	ldr	r3, [pc, #264]	@ (80053f4 <mg_http_status_code_str+0x900>)
 80052ea:	e078      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 80052ec:	4b42      	ldr	r3, [pc, #264]	@ (80053f8 <mg_http_status_code_str+0x904>)
 80052ee:	e076      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 80052f0:	4b42      	ldr	r3, [pc, #264]	@ (80053fc <mg_http_status_code_str+0x908>)
 80052f2:	e074      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 80052f4:	4b42      	ldr	r3, [pc, #264]	@ (8005400 <mg_http_status_code_str+0x90c>)
 80052f6:	e072      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 80052f8:	4b42      	ldr	r3, [pc, #264]	@ (8005404 <mg_http_status_code_str+0x910>)
 80052fa:	e070      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 80052fc:	4b42      	ldr	r3, [pc, #264]	@ (8005408 <mg_http_status_code_str+0x914>)
 80052fe:	e06e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8005300:	4b42      	ldr	r3, [pc, #264]	@ (800540c <mg_http_status_code_str+0x918>)
 8005302:	e06c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8005304:	4b42      	ldr	r3, [pc, #264]	@ (8005410 <mg_http_status_code_str+0x91c>)
 8005306:	e06a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8005308:	4b42      	ldr	r3, [pc, #264]	@ (8005414 <mg_http_status_code_str+0x920>)
 800530a:	e068      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800530c:	4b42      	ldr	r3, [pc, #264]	@ (8005418 <mg_http_status_code_str+0x924>)
 800530e:	e066      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8005310:	4b42      	ldr	r3, [pc, #264]	@ (800541c <mg_http_status_code_str+0x928>)
 8005312:	e064      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8005314:	4b42      	ldr	r3, [pc, #264]	@ (8005420 <mg_http_status_code_str+0x92c>)
 8005316:	e062      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8005318:	4b42      	ldr	r3, [pc, #264]	@ (8005424 <mg_http_status_code_str+0x930>)
 800531a:	e060      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800531c:	4b42      	ldr	r3, [pc, #264]	@ (8005428 <mg_http_status_code_str+0x934>)
 800531e:	e05e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8005320:	4b42      	ldr	r3, [pc, #264]	@ (800542c <mg_http_status_code_str+0x938>)
 8005322:	e05c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8005324:	4b42      	ldr	r3, [pc, #264]	@ (8005430 <mg_http_status_code_str+0x93c>)
 8005326:	e05a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8005328:	4b42      	ldr	r3, [pc, #264]	@ (8005434 <mg_http_status_code_str+0x940>)
 800532a:	e058      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800532c:	4b42      	ldr	r3, [pc, #264]	@ (8005438 <mg_http_status_code_str+0x944>)
 800532e:	e056      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8005330:	4b42      	ldr	r3, [pc, #264]	@ (800543c <mg_http_status_code_str+0x948>)
 8005332:	e054      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8005334:	4b42      	ldr	r3, [pc, #264]	@ (8005440 <mg_http_status_code_str+0x94c>)
 8005336:	e052      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8005338:	4b42      	ldr	r3, [pc, #264]	@ (8005444 <mg_http_status_code_str+0x950>)
 800533a:	e050      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800533c:	4b42      	ldr	r3, [pc, #264]	@ (8005448 <mg_http_status_code_str+0x954>)
 800533e:	e04e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8005340:	4b42      	ldr	r3, [pc, #264]	@ (800544c <mg_http_status_code_str+0x958>)
 8005342:	e04c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8005344:	4b42      	ldr	r3, [pc, #264]	@ (8005450 <mg_http_status_code_str+0x95c>)
 8005346:	e04a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8005348:	4b42      	ldr	r3, [pc, #264]	@ (8005454 <mg_http_status_code_str+0x960>)
 800534a:	e048      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800534c:	4b42      	ldr	r3, [pc, #264]	@ (8005458 <mg_http_status_code_str+0x964>)
 800534e:	e046      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8005350:	4b42      	ldr	r3, [pc, #264]	@ (800545c <mg_http_status_code_str+0x968>)
 8005352:	e044      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8005354:	4b42      	ldr	r3, [pc, #264]	@ (8005460 <mg_http_status_code_str+0x96c>)
 8005356:	e042      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8005358:	4b42      	ldr	r3, [pc, #264]	@ (8005464 <mg_http_status_code_str+0x970>)
 800535a:	e040      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800535c:	4b42      	ldr	r3, [pc, #264]	@ (8005468 <mg_http_status_code_str+0x974>)
 800535e:	e03e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8005360:	4b42      	ldr	r3, [pc, #264]	@ (800546c <mg_http_status_code_str+0x978>)
 8005362:	e03c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <mg_http_status_code_str+0x97c>)
 8005366:	e03a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8005368:	4b42      	ldr	r3, [pc, #264]	@ (8005474 <mg_http_status_code_str+0x980>)
 800536a:	e038      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800536c:	4b42      	ldr	r3, [pc, #264]	@ (8005478 <mg_http_status_code_str+0x984>)
 800536e:	e036      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8005370:	4b42      	ldr	r3, [pc, #264]	@ (800547c <mg_http_status_code_str+0x988>)
 8005372:	e034      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8005374:	4b42      	ldr	r3, [pc, #264]	@ (8005480 <mg_http_status_code_str+0x98c>)
 8005376:	e032      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8005378:	4b42      	ldr	r3, [pc, #264]	@ (8005484 <mg_http_status_code_str+0x990>)
 800537a:	e030      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800537c:	4b42      	ldr	r3, [pc, #264]	@ (8005488 <mg_http_status_code_str+0x994>)
 800537e:	e02e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8005380:	4b42      	ldr	r3, [pc, #264]	@ (800548c <mg_http_status_code_str+0x998>)
 8005382:	e02c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8005384:	4b42      	ldr	r3, [pc, #264]	@ (8005490 <mg_http_status_code_str+0x99c>)
 8005386:	e02a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8005388:	4b42      	ldr	r3, [pc, #264]	@ (8005494 <mg_http_status_code_str+0x9a0>)
 800538a:	e028      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800538c:	4b42      	ldr	r3, [pc, #264]	@ (8005498 <mg_http_status_code_str+0x9a4>)
 800538e:	e026      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8005390:	4b42      	ldr	r3, [pc, #264]	@ (800549c <mg_http_status_code_str+0x9a8>)
 8005392:	e024      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8005394:	4b42      	ldr	r3, [pc, #264]	@ (80054a0 <mg_http_status_code_str+0x9ac>)
 8005396:	e022      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8005398:	4b42      	ldr	r3, [pc, #264]	@ (80054a4 <mg_http_status_code_str+0x9b0>)
 800539a:	e020      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 800539c:	4b42      	ldr	r3, [pc, #264]	@ (80054a8 <mg_http_status_code_str+0x9b4>)
 800539e:	e01e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80053a0:	4b42      	ldr	r3, [pc, #264]	@ (80054ac <mg_http_status_code_str+0x9b8>)
 80053a2:	e01c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80053a4:	4b42      	ldr	r3, [pc, #264]	@ (80054b0 <mg_http_status_code_str+0x9bc>)
 80053a6:	e01a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80053a8:	4b42      	ldr	r3, [pc, #264]	@ (80054b4 <mg_http_status_code_str+0x9c0>)
 80053aa:	e018      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80053ac:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <mg_http_status_code_str+0x9c4>)
 80053ae:	e016      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80053b0:	4b42      	ldr	r3, [pc, #264]	@ (80054bc <mg_http_status_code_str+0x9c8>)
 80053b2:	e014      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80053b4:	4b42      	ldr	r3, [pc, #264]	@ (80054c0 <mg_http_status_code_str+0x9cc>)
 80053b6:	e012      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80053b8:	4b42      	ldr	r3, [pc, #264]	@ (80054c4 <mg_http_status_code_str+0x9d0>)
 80053ba:	e010      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80053bc:	4b42      	ldr	r3, [pc, #264]	@ (80054c8 <mg_http_status_code_str+0x9d4>)
 80053be:	e00e      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80053c0:	4b42      	ldr	r3, [pc, #264]	@ (80054cc <mg_http_status_code_str+0x9d8>)
 80053c2:	e00c      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80053c4:	4b42      	ldr	r3, [pc, #264]	@ (80054d0 <mg_http_status_code_str+0x9dc>)
 80053c6:	e00a      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80053c8:	4b42      	ldr	r3, [pc, #264]	@ (80054d4 <mg_http_status_code_str+0x9e0>)
 80053ca:	e008      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80053cc:	4b42      	ldr	r3, [pc, #264]	@ (80054d8 <mg_http_status_code_str+0x9e4>)
 80053ce:	e006      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80053d0:	4b42      	ldr	r3, [pc, #264]	@ (80054dc <mg_http_status_code_str+0x9e8>)
 80053d2:	e004      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80053d4:	4b42      	ldr	r3, [pc, #264]	@ (80054e0 <mg_http_status_code_str+0x9ec>)
 80053d6:	e002      	b.n	80053de <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 80053d8:	4b42      	ldr	r3, [pc, #264]	@ (80054e4 <mg_http_status_code_str+0x9f0>)
 80053da:	e000      	b.n	80053de <mg_http_status_code_str+0x8ea>
    default: return "";
 80053dc:	4b42      	ldr	r3, [pc, #264]	@ (80054e8 <mg_http_status_code_str+0x9f4>)
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	08028f30 	.word	0x08028f30
 80053f0:	08028f3c 	.word	0x08028f3c
 80053f4:	08028f50 	.word	0x08028f50
 80053f8:	08028f5c 	.word	0x08028f5c
 80053fc:	08028f60 	.word	0x08028f60
 8005400:	08028f68 	.word	0x08028f68
 8005404:	08028f74 	.word	0x08028f74
 8005408:	08028f94 	.word	0x08028f94
 800540c:	08028fa0 	.word	0x08028fa0
 8005410:	08028fb0 	.word	0x08028fb0
 8005414:	08028fc0 	.word	0x08028fc0
 8005418:	08028fd0 	.word	0x08028fd0
 800541c:	08028fe4 	.word	0x08028fe4
 8005420:	08028fec 	.word	0x08028fec
 8005424:	08029000 	.word	0x08029000
 8005428:	08029014 	.word	0x08029014
 800542c:	0802901c 	.word	0x0802901c
 8005430:	08029028 	.word	0x08029028
 8005434:	08029038 	.word	0x08029038
 8005438:	08029044 	.word	0x08029044
 800543c:	08029058 	.word	0x08029058
 8005440:	0802906c 	.word	0x0802906c
 8005444:	08029078 	.word	0x08029078
 8005448:	08029088 	.word	0x08029088
 800544c:	0802909c 	.word	0x0802909c
 8005450:	080290a8 	.word	0x080290a8
 8005454:	080290b4 	.word	0x080290b4
 8005458:	080290c8 	.word	0x080290c8
 800545c:	080290d8 	.word	0x080290d8
 8005460:	080290f8 	.word	0x080290f8
 8005464:	08029108 	.word	0x08029108
 8005468:	08029114 	.word	0x08029114
 800546c:	0802911c 	.word	0x0802911c
 8005470:	0802912c 	.word	0x0802912c
 8005474:	08029140 	.word	0x08029140
 8005478:	08029154 	.word	0x08029154
 800547c:	0802916c 	.word	0x0802916c
 8005480:	08029184 	.word	0x08029184
 8005484:	080291a4 	.word	0x080291a4
 8005488:	080291b8 	.word	0x080291b8
 800548c:	080291c8 	.word	0x080291c8
 8005490:	080291dc 	.word	0x080291dc
 8005494:	080291f4 	.word	0x080291f4
 8005498:	080291fc 	.word	0x080291fc
 800549c:	08029210 	.word	0x08029210
 80054a0:	08029224 	.word	0x08029224
 80054a4:	0802923c 	.word	0x0802923c
 80054a8:	08029250 	.word	0x08029250
 80054ac:	08029270 	.word	0x08029270
 80054b0:	08029294 	.word	0x08029294
 80054b4:	080292b4 	.word	0x080292b4
 80054b8:	080292cc 	.word	0x080292cc
 80054bc:	080292e4 	.word	0x080292e4
 80054c0:	080292f4 	.word	0x080292f4
 80054c4:	08029300 	.word	0x08029300
 80054c8:	08029314 	.word	0x08029314
 80054cc:	08029324 	.word	0x08029324
 80054d0:	08029340 	.word	0x08029340
 80054d4:	08029358 	.word	0x08029358
 80054d8:	08029370 	.word	0x08029370
 80054dc:	08029380 	.word	0x08029380
 80054e0:	08029390 	.word	0x08029390
 80054e4:	080293b0 	.word	0x080293b0
 80054e8:	080293d0 	.word	0x080293d0

080054ec <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80054ec:	b408      	push	{r3}
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b08b      	sub	sp, #44	@ 0x2c
 80054f2:	af02      	add	r7, sp, #8
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80054fa:	68b8      	ldr	r0, [r7, #8]
 80054fc:	f7ff fafa 	bl	8004af4 <mg_http_status_code_str>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <mg_http_reply+0x20>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	e000      	b.n	800550e <mg_http_reply+0x22>
 800550c:	4b1f      	ldr	r3, [pc, #124]	@ (800558c <mg_http_reply+0xa0>)
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	491e      	ldr	r1, [pc, #120]	@ (8005590 <mg_http_reply+0xa4>)
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f003 ff08 	bl	800932c <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005520:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8005522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005526:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005534:	4817      	ldr	r0, [pc, #92]	@ (8005594 <mg_http_reply+0xa8>)
 8005536:	f7fd ff3b 	bl	80033b0 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553e:	2b10      	cmp	r3, #16
 8005540:	d916      	bls.n	8005570 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3b0f      	subs	r3, #15
 800554a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8005554:	4a10      	ldr	r2, [pc, #64]	@ (8005598 <mg_http_reply+0xac>)
 8005556:	210b      	movs	r1, #11
 8005558:	f008 f91c 	bl	800d794 <mg_snprintf>
 800555c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005562:	69f9      	ldr	r1, [r7, #28]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	440b      	add	r3, r1
 8005568:	3b0f      	subs	r3, #15
 800556a:	4413      	add	r3, r2
 800556c:	2220      	movs	r2, #32
 800556e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8005576:	f36f 13c7 	bfc	r3, #7, #1
 800557a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800557e:	bf00      	nop
 8005580:	3724      	adds	r7, #36	@ 0x24
 8005582:	46bd      	mov	sp, r7
 8005584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005588:	b001      	add	sp, #4
 800558a:	4770      	bx	lr
 800558c:	080293d0 	.word	0x080293d0
 8005590:	080293d4 	.word	0x080293d4
 8005594:	0800d723 	.word	0x0800d723
 8005598:	08029408 	.word	0x08029408

0800559c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe facc 	bl	8003b48 <mg_fs_close>
  c->pfn_data = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a07      	ldr	r2, [pc, #28]	@ (80055d8 <restore_http_cb+0x3c>)
 80055bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80055c6:	f36f 13c7 	bfc	r3, #7, #1
 80055ca:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	0800690d 	.word	0x0800690d

080055dc <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80055dc:	b5b0      	push	{r4, r5, r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	461c      	mov	r4, r3
 80055ee:	4615      	mov	r5, r2
 80055f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80055f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055f8:	e9cd 2300 	strd	r2, r3, [sp]
 80055fc:	4a04      	ldr	r2, [pc, #16]	@ (8005610 <mg_http_etag+0x34>)
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f008 f8c7 	bl	800d794 <mg_snprintf>
  return buf;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bdb0      	pop	{r4, r5, r7, pc}
 8005610:	08029410 	.word	0x08029410

08005614 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	@ 0x28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d002      	beq.n	800562c <static_cb+0x18>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d148      	bne.n	80056be <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005632:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8005634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005638:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	33a4      	adds	r3, #164	@ 0xa4
 800563e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	429a      	cmp	r2, r3
 8005648:	d905      	bls.n	8005656 <static_cb+0x42>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3348      	adds	r3, #72	@ 0x48
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fd1b 	bl	800708c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565e:	429a      	cmp	r2, r3
 8005660:	d234      	bcs.n	80056cc <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <static_cb+0x6a>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	6a3a      	ldr	r2, [r7, #32]
 8005686:	6810      	ldr	r0, [r2, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005690:	4411      	add	r1, r2
 8005692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005694:	4798      	blx	r3
 8005696:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <static_cb+0xbc>
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff ff70 	bl	800559c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80056bc:	e008      	b.n	80056d0 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b09      	cmp	r3, #9
 80056c2:	d106      	bne.n	80056d2 <static_cb+0xbe>
    restore_http_cb(c);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff ff69 	bl	800559c <restore_http_cb>
 80056ca:	e002      	b.n	80056d2 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80056cc:	bf00      	nop
 80056ce:	e000      	b.n	80056d2 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80056d0:	bf00      	nop
  }
  (void) ev_data;
}
 80056d2:	3728      	adds	r7, #40	@ 0x28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b093      	sub	sp, #76	@ 0x4c
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	1d38      	adds	r0, r7, #4
 80056e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80056e6:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 80056e8:	f107 031c 	add.w	r3, r7, #28
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f009 fb62 	bl	800edb8 <mg_str_s>
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	2201      	movs	r2, #1
 80056fa:	4943      	ldr	r1, [pc, #268]	@ (8005808 <guess_content_type+0x130>)
 80056fc:	4618      	mov	r0, r3
 80056fe:	f009 fb78 	bl	800edf2 <mg_str_n>
  size_t i = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8005706:	e002      	b.n	800570e <guess_content_type+0x36>
 8005708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800570a:	3301      	adds	r3, #1
 800570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005712:	429a      	cmp	r2, r3
 8005714:	d208      	bcs.n	8005728 <guess_content_type+0x50>
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	1acb      	subs	r3, r1, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	4413      	add	r3, r2
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b2e      	cmp	r3, #46	@ 0x2e
 8005726:	d1ef      	bne.n	8005708 <guess_content_type+0x30>
  path.buf += path.len - i;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572e:	1acb      	subs	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	607b      	str	r3, [r7, #4]
  path.len = i;
 8005734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005736:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8005738:	e02b      	b.n	8005792 <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 800573a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800573e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005742:	213d      	movs	r1, #61	@ 0x3d
 8005744:	9100      	str	r1, [sp, #0]
 8005746:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800574a:	c903      	ldmia	r1, {r0, r1}
 800574c:	f009 fd32 	bl	800f1b4 <mg_span>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01d      	beq.n	8005792 <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8005756:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800575a:	cb0c      	ldmia	r3, {r2, r3}
 800575c:	f107 0114 	add.w	r1, r7, #20
 8005760:	c903      	ldmia	r1, {r0, r1}
 8005762:	f009 fbaa 	bl	800eeba <mg_strcmp>
 8005766:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800576c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005770:	cb0c      	ldmia	r3, {r2, r3}
 8005772:	1d39      	adds	r1, r7, #4
 8005774:	c903      	ldmia	r1, {r0, r1}
 8005776:	f009 fba0 	bl	800eeba <mg_strcmp>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <guess_content_type+0xba>
      return v;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	461a      	mov	r2, r3
 8005784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005788:	e893 0003 	ldmia.w	r3, {r0, r1}
 800578c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005790:	e036      	b.n	8005800 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 8005792:	f107 031c 	add.w	r3, r7, #28
 8005796:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800579a:	212c      	movs	r1, #44	@ 0x2c
 800579c:	9100      	str	r1, [sp, #0]
 800579e:	f107 011c 	add.w	r1, r7, #28
 80057a2:	c903      	ldmia	r1, {r0, r1}
 80057a4:	f009 fd06 	bl	800f1b4 <mg_span>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1c5      	bne.n	800573a <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80057ae:	2300      	movs	r3, #0
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b2:	e01a      	b.n	80057ea <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80057b4:	4a15      	ldr	r2, [pc, #84]	@ (800580c <guess_content_type+0x134>)
 80057b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	cb0c      	ldmia	r3, {r2, r3}
 80057be:	1d39      	adds	r1, r7, #4
 80057c0:	c903      	ldmia	r1, {r0, r1}
 80057c2:	f009 fb7a 	bl	800eeba <mg_strcmp>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <guess_content_type+0x10c>
 80057cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ce:	3301      	adds	r3, #1
 80057d0:	68f9      	ldr	r1, [r7, #12]
 80057d2:	4a0e      	ldr	r2, [pc, #56]	@ (800580c <guess_content_type+0x134>)
 80057d4:	460c      	mov	r4, r1
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057de:	e884 0003 	stmia.w	r4, {r0, r1}
 80057e2:	e00d      	b.n	8005800 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80057e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e6:	3302      	adds	r3, #2
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ea:	4a08      	ldr	r2, [pc, #32]	@ (800580c <guess_content_type+0x134>)
 80057ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1de      	bne.n	80057b4 <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4905      	ldr	r1, [pc, #20]	@ (8005810 <guess_content_type+0x138>)
 80057fa:	4618      	mov	r0, r3
 80057fc:	f009 fadc 	bl	800edb8 <mg_str_s>
}
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	3744      	adds	r7, #68	@ 0x44
 8005804:	46bd      	mov	sp, r7
 8005806:	bd90      	pop	{r4, r7, pc}
 8005808:	0802967c 	.word	0x0802967c
 800580c:	24000058 	.word	0x24000058
 8005810:	080294f8 	.word	0x080294f8

08005814 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b08c      	sub	sp, #48	@ 0x30
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8005824:	2300      	movs	r3, #0
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
 8005828:	e058      	b.n	80058dc <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	3306      	adds	r3, #6
 8005832:	18d1      	adds	r1, r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	1f9a      	subs	r2, r3, #6
 800583e:	f107 0310 	add.w	r3, r7, #16
 8005842:	4618      	mov	r0, r3
 8005844:	f009 fad5 	bl	800edf2 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	4413      	add	r3, r2
 8005850:	2206      	movs	r2, #6
 8005852:	4929      	ldr	r1, [pc, #164]	@ (80058f8 <getrange+0xe4>)
 8005854:	4618      	mov	r0, r3
 8005856:	f01f fad7 	bl	8024e08 <memcmp>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	3301      	adds	r3, #1
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
 8005866:	e039      	b.n	80058dc <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	f107 0218 	add.w	r2, r7, #24
 8005870:	212d      	movs	r1, #45	@ 0x2d
 8005872:	9100      	str	r1, [sp, #0]
 8005874:	f107 0110 	add.w	r1, r7, #16
 8005878:	c903      	ldmia	r1, {r0, r1}
 800587a:	f009 fc9b 	bl	800f1b4 <mg_span>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01d      	beq.n	80058c0 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800588e:	f7fe fbb9 	bl	8004004 <mg_to_size_t>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <getrange+0x8a>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	3301      	adds	r3, #1
 800589c:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d022      	beq.n	80058ea <getrange+0xd6>
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	f107 0310 	add.w	r3, r7, #16
 80058aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058ae:	f7fe fba9 	bl	8004004 <mg_to_size_t>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d018      	beq.n	80058ea <getrange+0xd6>
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	3301      	adds	r3, #1
 80058bc:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 80058be:	e014      	b.n	80058ea <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058ca:	f7fe fb9b 	bl	8004004 <mg_to_size_t>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <getrange+0xd6>
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	3301      	adds	r3, #1
 80058d8:	623b      	str	r3, [r7, #32]
 80058da:	e007      	b.n	80058ec <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	1d9a      	adds	r2, r3, #6
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d3a0      	bcc.n	800582a <getrange+0x16>
 80058e8:	e000      	b.n	80058ec <getrange+0xd8>
    break;
 80058ea:	bf00      	nop
  }
  return (int) numparsed;
 80058ec:	6a3b      	ldr	r3, [r7, #32]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3728      	adds	r7, #40	@ 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	08029680 	.word	0x08029680

080058fc <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	b0f3      	sub	sp, #460	@ 0x1cc
 8005902:	af0a      	add	r7, sp, #40	@ 0x28
 8005904:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8005908:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 800590c:	6020      	str	r0, [r4, #0]
 800590e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8005912:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 8005916:	6001      	str	r1, [r0, #0]
 8005918:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800591c:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 8005920:	600a      	str	r2, [r1, #0]
 8005922:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005926:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800592a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800592c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005930:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d006      	beq.n	800594a <mg_http_serve_file+0x4e>
 800593c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005940:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	e000      	b.n	800594c <mg_http_serve_file+0x50>
 800594a:	4ba4      	ldr	r3, [pc, #656]	@ (8005bdc <mg_http_serve_file+0x2e0>)
 800594c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800596e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8005972:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005976:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800597a:	6819      	ldr	r1, [r3, #0]
 800597c:	4610      	mov	r0, r2
 800597e:	f009 fa1b 	bl	800edb8 <mg_str_s>
 8005982:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005986:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005992:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 8005996:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800599a:	ca06      	ldmia	r2, {r1, r2}
 800599c:	f7ff fe9c 	bl	80056d8 <guess_content_type>
  bool gzip = false;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 80059a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d05c      	beq.n	8005a6e <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80059b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059b8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80059bc:	4988      	ldr	r1, [pc, #544]	@ (8005be0 <mg_http_serve_file+0x2e4>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	f7fe fd6e 	bl	80044a0 <mg_http_get_header>
 80059c4:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 80059c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d03e      	beq.n	8005a4e <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80059d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	4881      	ldr	r0, [pc, #516]	@ (8005be4 <mg_http_serve_file+0x2e8>)
 80059e0:	f007 ff0e 	bl	800d800 <mg_mprintf>
 80059e4:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80059e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02a      	beq.n	8005a46 <mg_http_serve_file+0x14a>
 80059f0:	497d      	ldr	r1, [pc, #500]	@ (8005be8 <mg_http_serve_file+0x2ec>)
 80059f2:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 80059f6:	f01f fa81 	bl	8024efc <strstr>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8005a00:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a04:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005a08:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a77      	ldr	r2, [pc, #476]	@ (8005bec <mg_http_serve_file+0x2f0>)
 8005a10:	2164      	movs	r1, #100	@ 0x64
 8005a12:	f007 febf 	bl	800d794 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8005a16:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8005a22:	f7fe f869 	bl	8003af8 <mg_fs_open>
 8005a26:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 8005a2a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <mg_http_serve_file+0x14a>
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8005a38:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a3c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005a40:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8005a44:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8005a46:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8005a4a:	f01d ff7b 	bl	8023944 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8005a4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <mg_http_serve_file+0x172>
 8005a56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a5a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005a5e:	2201      	movs	r2, #1
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8005a66:	f7fe f847 	bl	8003af8 <mg_fs_open>
 8005a6a:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8005a6e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d144      	bne.n	8005b00 <mg_http_serve_file+0x204>
 8005a76:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a7a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d03c      	beq.n	8005b00 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8005a86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a8a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2201      	movs	r2, #1
 8005a94:	4619      	mov	r1, r3
 8005a96:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8005a9a:	f7fe f82d 	bl	8003af8 <mg_fs_open>
 8005a9e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 8005aa2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005aa6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005aaa:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005aae:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	6912      	ldr	r2, [r2, #16]
 8005ab6:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8005ab8:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8005abc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005ac0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005ac4:	6819      	ldr	r1, [r3, #0]
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f009 f976 	bl	800edb8 <mg_str_s>
 8005acc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005ad0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005adc:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 8005ae0:	f107 0010 	add.w	r0, r7, #16
 8005ae4:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8005ae8:	ca06      	ldmia	r2, {r1, r2}
 8005aea:	f7ff fdf5 	bl	80056d8 <guess_content_type>
 8005aee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005af2:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8005af6:	4623      	mov	r3, r4
 8005af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005afc:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8005b00:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00f      	beq.n	8005b28 <mg_http_serve_file+0x22c>
 8005b08:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005b0c:	681c      	ldr	r4, [r3, #0]
 8005b0e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8005b12:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8005b16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	47a0      	blx	r4
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d114      	bne.n	8005b52 <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8005b28:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b2c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b38:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf0 <mg_http_serve_file+0x2f4>)
 8005b3e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8005b42:	6800      	ldr	r0, [r0, #0]
 8005b44:	f7ff fcd2 	bl	80054ec <mg_http_reply>
    mg_fs_close(fd);
 8005b48:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005b4c:	f7fd fffc 	bl	8003b48 <mg_fs_close>
 8005b50:	e190      	b.n	8005e74 <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8005b52:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8005b56:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005b5a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8005b5e:	e9cd 2300 	strd	r2, r3, [sp]
 8005b62:	460a      	mov	r2, r1
 8005b64:	2140      	movs	r1, #64	@ 0x40
 8005b66:	f7ff fd39 	bl	80055dc <mg_http_etag>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d045      	beq.n	8005bfc <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005b70:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b74:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005b78:	491e      	ldr	r1, [pc, #120]	@ (8005bf4 <mg_http_serve_file+0x2f8>)
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	f7fe fc90 	bl	80044a0 <mg_http_get_header>
 8005b80:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8005b84:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d037      	beq.n	8005bfc <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8005b8c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8005b90:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f009 f90e 	bl	800edb8 <mg_str_s>
 8005b9c:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8005ba0:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8005ba4:	cb0c      	ldmia	r3, {r2, r3}
 8005ba6:	c903      	ldmia	r1, {r0, r1}
 8005ba8:	f009 f9c9 	bl	800ef3e <mg_strcasecmp>
 8005bac:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d124      	bne.n	8005bfc <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 8005bb2:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005bb6:	f7fd ffc7 	bl	8003b48 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8005bba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005bbe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005bca:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <mg_http_serve_file+0x2fc>)
 8005bd0:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8005bd4:	6800      	ldr	r0, [r0, #0]
 8005bd6:	f7ff fc89 	bl	80054ec <mg_http_reply>
 8005bda:	e14b      	b.n	8005e74 <mg_http_serve_file+0x578>
 8005bdc:	24000030 	.word	0x24000030
 8005be0:	08029688 	.word	0x08029688
 8005be4:	08028e70 	.word	0x08028e70
 8005be8:	08029698 	.word	0x08029698
 8005bec:	080296a0 	.word	0x080296a0
 8005bf0:	080296a8 	.word	0x080296a8
 8005bf4:	080296b4 	.word	0x080296b4
 8005bf8:	080293d0 	.word	0x080293d0
  } else {
    int n, status = 200;
 8005bfc:	23c8      	movs	r3, #200	@ 0xc8
 8005bfe:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8005c02:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c1e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8005c22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c26:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005c2a:	4995      	ldr	r1, [pc, #596]	@ (8005e80 <mg_http_serve_file+0x584>)
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f7fe fc37 	bl	80044a0 <mg_http_get_header>
 8005c32:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 8005c36:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c3a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8005c42:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 808e 	beq.w	8005d68 <mg_http_serve_file+0x46c>
 8005c4c:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8005c50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005c54:	4619      	mov	r1, r3
 8005c56:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8005c5a:	f7ff fddb 	bl	8005814 <getrange>
 8005c5e:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 8005c62:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd7e      	ble.n	8005d68 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8005c6a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d107      	bne.n	8005c82 <mg_http_serve_file+0x386>
 8005c72:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005c76:	1e5a      	subs	r2, r3, #1
 8005c78:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005c80:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8005c82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d808      	bhi.n	8005cac <mg_http_serve_file+0x3b0>
 8005c9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d817      	bhi.n	8005cdc <mg_http_serve_file+0x3e0>
        status = 416;
 8005cac:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8005cb0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8005cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	60fa      	str	r2, [r7, #12]
 8005cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005cc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ccc:	e9cd 1200 	strd	r1, r2, [sp]
 8005cd0:	4a6c      	ldr	r2, [pc, #432]	@ (8005e84 <mg_http_serve_file+0x588>)
 8005cd2:	2164      	movs	r1, #100	@ 0x64
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f007 fd5d 	bl	800d794 <mg_snprintf>
 8005cda:	e045      	b.n	8005d68 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 8005cdc:	23ce      	movs	r3, #206	@ 0xce
 8005cde:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 8005ce2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005ce6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005cf0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 8005cfe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	469a      	mov	sl, r3
 8005d0c:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8005d0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8005d20:	2200      	movs	r2, #0
 8005d22:	461d      	mov	r5, r3
 8005d24:	4616      	mov	r6, r2
 8005d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	603b      	str	r3, [r7, #0]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d38:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005d3c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8005d40:	e9cd ab00 	strd	sl, fp, [sp]
 8005d44:	4a50      	ldr	r2, [pc, #320]	@ (8005e88 <mg_http_serve_file+0x58c>)
 8005d46:	2164      	movs	r1, #100	@ 0x64
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f007 fd23 	bl	800d794 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8005d4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005d58:	6810      	ldr	r0, [r2, #0]
 8005d5a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005d5e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	4611      	mov	r1, r2
 8005d66:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8005d68:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8005d6c:	f7fe fec2 	bl	8004af4 <mg_http_status_code_str>
 8005d70:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8005d72:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7a:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8005d7c:	461d      	mov	r5, r3
 8005d7e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4698      	mov	r8, r3
 8005d90:	4689      	mov	r9, r1
 8005d92:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <mg_http_serve_file+0x4a2>
 8005d9a:	493c      	ldr	r1, [pc, #240]	@ (8005e8c <mg_http_serve_file+0x590>)
 8005d9c:	e000      	b.n	8005da0 <mg_http_serve_file+0x4a4>
 8005d9e:	493c      	ldr	r1, [pc, #240]	@ (8005e90 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8005da0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005da4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <mg_http_serve_file+0x4c2>
 8005db0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005db4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	e000      	b.n	8005dc0 <mg_http_serve_file+0x4c4>
 8005dbe:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <mg_http_serve_file+0x594>)
 8005dc0:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8005dc4:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 8005dc8:	9308      	str	r3, [sp, #32]
 8005dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	9106      	str	r1, [sp, #24]
 8005dd2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005dd6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005dda:	9302      	str	r3, [sp, #8]
 8005ddc:	9201      	str	r2, [sp, #4]
 8005dde:	9500      	str	r5, [sp, #0]
 8005de0:	4623      	mov	r3, r4
 8005de2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005de6:	492b      	ldr	r1, [pc, #172]	@ (8005e94 <mg_http_serve_file+0x598>)
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f003 fa9f 	bl	800932c <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8005dee:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005df2:	4929      	ldr	r1, [pc, #164]	@ (8005e98 <mg_http_serve_file+0x59c>)
 8005df4:	4618      	mov	r0, r3
 8005df6:	f008 ffdf 	bl	800edb8 <mg_str_s>
 8005dfa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005dfe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005e08:	cb0c      	ldmia	r3, {r2, r3}
 8005e0a:	c903      	ldmia	r1, {r0, r1}
 8005e0c:	f009 f897 	bl	800ef3e <mg_strcasecmp>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 8005e16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005e1a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8005e24:	f36f 13c7 	bfc	r3, #7, #1
 8005e28:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8005e2c:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005e30:	f7fd fe8a 	bl	8003b48 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8005e34:	e01e      	b.n	8005e74 <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8005e36:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005e3a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	33a4      	adds	r3, #164	@ 0xa4
 8005e42:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 8005e46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005e4a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a12      	ldr	r2, [pc, #72]	@ (8005e9c <mg_http_serve_file+0x5a0>)
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8005e56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005e5a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8005e68:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8005e6c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005e70:	601a      	str	r2, [r3, #0]
}
 8005e72:	e7ff      	b.n	8005e74 <mg_http_serve_file+0x578>
 8005e74:	bf00      	nop
 8005e76:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	080296c4 	.word	0x080296c4
 8005e84:	080296cc 	.word	0x080296cc
 8005e88:	080296ec 	.word	0x080296ec
 8005e8c:	08029714 	.word	0x08029714
 8005e90:	080293d0 	.word	0x080293d0
 8005e94:	08029730 	.word	0x08029730
 8005e98:	08029780 	.word	0x08029780
 8005e9c:	08005615 	.word	0x08005615

08005ea0 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	b590      	push	{r4, r7, lr}
 8005ea4:	b08f      	sub	sp, #60	@ 0x3c
 8005ea6:	af02      	add	r7, sp, #8
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8005eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	4a9c      	ldr	r2, [pc, #624]	@ (800612c <uri_to_path2+0x28c>)
 8005ebc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ebe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005ec0:	f007 fc68 	bl	800d794 <mg_snprintf>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	3302      	adds	r3, #2
 8005eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d809      	bhi.n	8005ee4 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8005ed0:	4b97      	ldr	r3, [pc, #604]	@ (8006130 <uri_to_path2+0x290>)
 8005ed2:	4a98      	ldr	r2, [pc, #608]	@ (8006134 <uri_to_path2+0x294>)
 8005ed4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff fb07 	bl	80054ec <mg_http_reply>
    return -1;
 8005ede:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee2:	e143      	b.n	800616c <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8005ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eea:	4413      	add	r3, r2
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d012      	beq.n	8005f1c <uri_to_path2+0x7c>
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005efc:	4413      	add	r3, r2
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f02:	d00b      	beq.n	8005f1c <uri_to_path2+0x7c>
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f0c:	4413      	add	r3, r2
 8005f0e:	222f      	movs	r2, #47	@ 0x2f
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	4413      	add	r3, r2
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8005f1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d212      	bcs.n	8005f4c <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f2c:	18d0      	adds	r0, r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f34:	1ad1      	subs	r1, r2, r3
 8005f36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	18d4      	adds	r4, r2, r3
 8005f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2200      	movs	r2, #0
 8005f44:	9200      	str	r2, [sp, #0]
 8005f46:	4622      	mov	r2, r4
 8005f48:	f7fe f9b7 	bl	80042ba <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8005f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f52:	4413      	add	r3, r2
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f60:	4618      	mov	r0, r3
 8005f62:	f008 ff46 	bl	800edf2 <mg_str_n>
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f6e:	f011 fe2f 	bl	8017bd0 <mg_path_is_sane>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f083 0301 	eor.w	r3, r3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8005f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8006138 <uri_to_path2+0x298>)
 8005f80:	4a6c      	ldr	r2, [pc, #432]	@ (8006134 <uri_to_path2+0x294>)
 8005f82:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fab0 	bl	80054ec <mg_http_reply>
    return -1;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	e0ec      	b.n	800616c <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8005f92:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005f94:	f7fa fa04 	bl	80003a0 <strlen>
 8005f98:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8005f9a:	e007      	b.n	8005fac <uri_to_path2+0x10c>
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	4413      	add	r3, r2
 8005fa8:	2200      	movs	r2, #0
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d906      	bls.n	8005fc0 <uri_to_path2+0x120>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fb8:	4413      	add	r3, r2
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fbe:	d0ed      	beq.n	8005f9c <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005fc0:	f107 031c 	add.w	r3, r7, #28
 8005fc4:	495d      	ldr	r1, [pc, #372]	@ (800613c <uri_to_path2+0x29c>)
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f008 fef6 	bl	800edb8 <mg_str_s>
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	f107 031c 	add.w	r3, r7, #28
 8005fd2:	cb0c      	ldmia	r3, {r2, r3}
 8005fd4:	3108      	adds	r1, #8
 8005fd6:	c903      	ldmia	r1, {r0, r1}
 8005fd8:	f008 ff6f 	bl	800eeba <mg_strcmp>
 8005fdc:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <uri_to_path2+0x152>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005fec:	4798      	blx	r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	e000      	b.n	8005ff4 <uri_to_path2+0x154>
 8005ff2:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8005ff6:	4b52      	ldr	r3, [pc, #328]	@ (8006140 <uri_to_path2+0x2a0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	dd16      	ble.n	800602c <uri_to_path2+0x18c>
 8005ffe:	4b51      	ldr	r3, [pc, #324]	@ (8006144 <uri_to_path2+0x2a4>)
 8006000:	f640 427e 	movw	r2, #3198	@ 0xc7e
 8006004:	4950      	ldr	r1, [pc, #320]	@ (8006148 <uri_to_path2+0x2a8>)
 8006006:	2004      	movs	r0, #4
 8006008:	f002 f80e 	bl	8008028 <mg_log_prefix>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4618      	mov	r0, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	4602      	mov	r2, r0
 8006026:	4849      	ldr	r0, [pc, #292]	@ (800614c <uri_to_path2+0x2ac>)
 8006028:	f002 f84e 	bl	80080c8 <mg_log>
              flags));
  if (flags == 0) {
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 809b 	beq.w	800616a <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d020      	beq.n	8006080 <uri_to_path2+0x1e0>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01c      	beq.n	8006080 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	3b01      	subs	r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8006054:	2b2f      	cmp	r3, #47	@ 0x2f
 8006056:	d013      	beq.n	8006080 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	493b      	ldr	r1, [pc, #236]	@ (8006150 <uri_to_path2+0x2b0>)
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f003 f961 	bl	800932c <mg_printf>
    c->is_resp = 0;
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006070:	f36f 13c7 	bfc	r3, #7, #1
 8006074:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8006078:	f04f 33ff 	mov.w	r3, #4294967295
 800607c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800607e:	e074      	b.n	800616a <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d06f      	beq.n	800616a <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800608a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	18d0      	adds	r0, r2, r3
 8006090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	4a2f      	ldr	r2, [pc, #188]	@ (8006154 <uri_to_path2+0x2b4>)
 8006098:	4619      	mov	r1, r3
 800609a:	f007 fb7b 	bl	800d794 <mg_snprintf>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2100      	movs	r1, #0
 80060ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80060ae:	4798      	blx	r3
 80060b0:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80060b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	18d0      	adds	r0, r2, r3
 80060be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	4a24      	ldr	r2, [pc, #144]	@ (8006158 <uri_to_path2+0x2b8>)
 80060c6:	4619      	mov	r1, r3
 80060c8:	f007 fb64 	bl	800d794 <mg_snprintf>
 80060cc:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	2100      	movs	r1, #0
 80060da:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80060dc:	4798      	blx	r3
 80060de:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <uri_to_path2+0x24c>
      flags = tmp;
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ea:	e03e      	b.n	800616a <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 80060ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	18d0      	adds	r0, r2, r3
 80060f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	4a18      	ldr	r2, [pc, #96]	@ (800615c <uri_to_path2+0x2bc>)
 80060fa:	4619      	mov	r1, r3
 80060fc:	f007 fb4a 	bl	800d794 <mg_snprintf>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d02c      	beq.n	8006160 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006110:	4798      	blx	r3
 8006112:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d022      	beq.n	8006160 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	330b      	adds	r3, #11
 8006122:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006124:	4413      	add	r3, r2
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e01e      	b.n	800616a <uri_to_path2+0x2ca>
 800612c:	08028e70 	.word	0x08028e70
 8006130:	08029788 	.word	0x08029788
 8006134:	080293d0 	.word	0x080293d0
 8006138:	0802979c 	.word	0x0802979c
 800613c:	080297ac 	.word	0x080297ac
 8006140:	24000240 	.word	0x24000240
 8006144:	0802c0c4 	.word	0x0802c0c4
 8006148:	08028ac4 	.word	0x08028ac4
 800614c:	080297b0 	.word	0x080297b0
 8006150:	080297c4 	.word	0x080297c4
 8006154:	08029800 	.word	0x08029800
 8006158:	0802980c 	.word	0x0802980c
 800615c:	0802981c 	.word	0x0802981c
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8006160:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	4413      	add	r3, r2
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800616a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800616c:	4618      	mov	r0, r3
 800616e:	3734      	adds	r7, #52	@ 0x34
 8006170:	46bd      	mov	sp, r7
 8006172:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006176:	b002      	add	sp, #8
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop

0800617c <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b09c      	sub	sp, #112	@ 0x70
 8006180:	af06      	add	r7, sp, #24
 8006182:	6178      	str	r0, [r7, #20]
 8006184:	6139      	str	r1, [r7, #16]
 8006186:	60fa      	str	r2, [r7, #12]
 8006188:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <uri_to_path+0x1c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	e000      	b.n	800619a <uri_to_path+0x1e>
 8006198:	4b5b      	ldr	r3, [pc, #364]	@ (8006308 <uri_to_path+0x18c>)
 800619a:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f008 fe06 	bl	800edb8 <mg_str_s>
 80061ac:	2300      	movs	r3, #0
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b0:	2300      	movs	r3, #0
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b4:	f107 031c 	add.w	r3, r7, #28
 80061b8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80061bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061c0:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80061c4:	e078      	b.n	80062b8 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80061c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80061ca:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80061ce:	213d      	movs	r1, #61	@ 0x3d
 80061d0:	9100      	str	r1, [sp, #0]
 80061d2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80061d6:	c903      	ldmia	r1, {r0, r1}
 80061d8:	f008 ffec 	bl	800f1b4 <mg_span>
 80061dc:	4603      	mov	r3, r0
 80061de:	f083 0301 	eor.w	r3, r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d014      	beq.n	8006212 <uri_to_path+0x96>
 80061e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80061ec:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80061f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80061f8:	463b      	mov	r3, r7
 80061fa:	2200      	movs	r2, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f008 fdf7 	bl	800edf2 <mg_str_n>
 8006204:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006208:	463a      	mov	r2, r7
 800620a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800620e:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8006212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d123      	bne.n	8006260 <uri_to_path+0xe4>
 8006218:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800621c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006224:	e883 0003 	stmia.w	r3, {r0, r1}
 8006228:	463b      	mov	r3, r7
 800622a:	4938      	ldr	r1, [pc, #224]	@ (800630c <uri_to_path+0x190>)
 800622c:	4618      	mov	r0, r3
 800622e:	f008 fdc3 	bl	800edb8 <mg_str_s>
 8006232:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006236:	463a      	mov	r2, r7
 8006238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800623c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006244:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800624c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006250:	f107 031c 	add.w	r3, r7, #28
 8006254:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800625c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006266:	429a      	cmp	r2, r3
 8006268:	d323      	bcc.n	80062b2 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6899      	ldr	r1, [r3, #8]
 800626e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006270:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006274:	4618      	mov	r0, r3
 8006276:	f008 fdbc 	bl	800edf2 <mg_str_n>
 800627a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800627e:	cb0c      	ldmia	r3, {r2, r3}
 8006280:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8006284:	c903      	ldmia	r1, {r0, r1}
 8006286:	f008 fe18 	bl	800eeba <mg_strcmp>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d112      	bne.n	80062b6 <uri_to_path+0x13a>
    u = k, p = v;
 8006290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006294:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800629c:	e883 0003 	stmia.w	r3, {r0, r1}
 80062a0:	f107 031c 	add.w	r3, r7, #28
 80062a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80062a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80062b0:	e002      	b.n	80062b8 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80062b6:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 80062b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062bc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80062c0:	212c      	movs	r1, #44	@ 0x2c
 80062c2:	9100      	str	r1, [sp, #0]
 80062c4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80062c8:	c903      	ldmia	r1, {r0, r1}
 80062ca:	f008 ff73 	bl	800f1b4 <mg_span>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f47f af78 	bne.w	80061c6 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80062d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	9303      	str	r3, [sp, #12]
 80062de:	aa01      	add	r2, sp, #4
 80062e0:	f107 031c 	add.w	r3, r7, #28
 80062e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80062e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062f4:	6939      	ldr	r1, [r7, #16]
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff fdd2 	bl	8005ea0 <uri_to_path2>
 80062fc:	4603      	mov	r3, r0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3758      	adds	r7, #88	@ 0x58
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	24000030 	.word	0x24000030
 800630c:	080297ac 	.word	0x080297ac

08006310 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b0a6      	sub	sp, #152	@ 0x98
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	2264      	movs	r2, #100	@ 0x64
 800632a:	9200      	str	r2, [sp, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff ff23 	bl	800617c <uri_to_path>
 8006336:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800633a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800633e:	2b00      	cmp	r3, #0
 8006340:	db41      	blt.n	80063c6 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8006342:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800634e:	4b20      	ldr	r3, [pc, #128]	@ (80063d0 <mg_http_serve_dir+0xc0>)
 8006350:	4a20      	ldr	r2, [pc, #128]	@ (80063d4 <mg_http_serve_dir+0xc4>)
 8006352:	f240 1193 	movw	r1, #403	@ 0x193
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff f8c8 	bl	80054ec <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800635c:	e033      	b.n	80063c6 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800635e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006362:	2b00      	cmp	r3, #0
 8006364:	d028      	beq.n	80063b8 <mg_http_serve_dir+0xa8>
 8006366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d024      	beq.n	80063b8 <mg_http_serve_dir+0xa8>
 800636e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8006372:	f107 0214 	add.w	r2, r7, #20
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f008 fd1d 	bl	800edb8 <mg_str_s>
 800637e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006382:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8006386:	4618      	mov	r0, r3
 8006388:	f008 fd16 	bl	800edb8 <mg_str_s>
 800638c:	2300      	movs	r3, #0
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006394:	cb0c      	ldmia	r3, {r2, r3}
 8006396:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800639a:	c903      	ldmia	r1, {r0, r1}
 800639c:	f008 fe16 	bl	800efcc <mg_match>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f107 0214 	add.w	r2, r7, #20
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f008 fced 	bl	800ed90 <mg_http_serve_ssi>
}
 80063b6:	e006      	b.n	80063c6 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 80063b8:	f107 0214 	add.w	r2, r7, #20
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7ff fa9b 	bl	80058fc <mg_http_serve_file>
}
 80063c6:	bf00      	nop
 80063c8:	3790      	adds	r7, #144	@ 0x90
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	0802982c 	.word	0x0802982c
 80063d4:	080293d0 	.word	0x080293d0

080063d8 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 80063d8:	b590      	push	{r4, r7, lr}
 80063da:	b0cf      	sub	sp, #316	@ 0x13c
 80063dc:	af02      	add	r7, sp, #8
 80063de:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 80063e2:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 80063e6:	6020      	str	r0, [r4, #0]
 80063e8:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 80063ec:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 80063f0:	6001      	str	r1, [r0, #0]
 80063f2:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80063f6:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80063fa:	600a      	str	r2, [r1, #0]
 80063fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006400:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006404:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 8006406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800640a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800640e:	497a      	ldr	r1, [pc, #488]	@ (80065f8 <mg_http_creds+0x220>)
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	f7fe f845 	bl	80044a0 <mg_http_get_header>
 8006416:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800641a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800641e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800642c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006438:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8006440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d05e      	beq.n	8006506 <mg_http_creds+0x12e>
 8006448:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b06      	cmp	r3, #6
 8006450:	d959      	bls.n	8006506 <mg_http_creds+0x12e>
 8006452:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2206      	movs	r2, #6
 800645a:	4968      	ldr	r1, [pc, #416]	@ (80065fc <mg_http_creds+0x224>)
 800645c:	4618      	mov	r0, r3
 800645e:	f01e fcd3 	bl	8024e08 <memcmp>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d14e      	bne.n	8006506 <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8006468:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	1d98      	adds	r0, r3, #6
 8006470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	1f99      	subs	r1, r3, #6
 8006478:	f107 0214 	add.w	r2, r7, #20
 800647c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006480:	f7fb f8b0 	bl	80015e4 <mg_base64_decode>
 8006484:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8006488:	f107 0314 	add.w	r3, r7, #20
 800648c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006490:	213a      	movs	r1, #58	@ 0x3a
 8006492:	4618      	mov	r0, r3
 8006494:	f7f9 ff34 	bl	8000300 <memchr>
 8006498:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800649c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a2 	beq.w	80065ea <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 80064a6:	f107 0314 	add.w	r3, r7, #20
 80064aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064b4:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80064b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064bc:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	4613      	mov	r3, r2
 80064c8:	4a4d      	ldr	r2, [pc, #308]	@ (8006600 <mg_http_creds+0x228>)
 80064ca:	6809      	ldr	r1, [r1, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f007 f961 	bl	800d794 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 80064d2:	f107 0314 	add.w	r3, r7, #20
 80064d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80064ea:	3301      	adds	r3, #1
 80064ec:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80064f0:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	4a41      	ldr	r2, [pc, #260]	@ (8006600 <mg_http_creds+0x228>)
 80064fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80064fe:	6800      	ldr	r0, [r0, #0]
 8006500:	f007 f948 	bl	800d794 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8006504:	e071      	b.n	80065ea <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8006506:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d024      	beq.n	8006558 <mg_http_creds+0x180>
 800650e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b07      	cmp	r3, #7
 8006516:	d91f      	bls.n	8006558 <mg_http_creds+0x180>
 8006518:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2207      	movs	r2, #7
 8006520:	4938      	ldr	r1, [pc, #224]	@ (8006604 <mg_http_creds+0x22c>)
 8006522:	4618      	mov	r0, r3
 8006524:	f01e fc70 	bl	8024e08 <memcmp>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d114      	bne.n	8006558 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800652e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	1fda      	subs	r2, r3, #7
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3307      	adds	r3, #7
 800653e:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8006542:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	4a2d      	ldr	r2, [pc, #180]	@ (8006600 <mg_http_creds+0x228>)
 800654c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006550:	6800      	ldr	r0, [r0, #0]
 8006552:	f007 f91f 	bl	800d794 <mg_snprintf>
 8006556:	e049      	b.n	80065ec <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8006558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800655c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006560:	4929      	ldr	r1, [pc, #164]	@ (8006608 <mg_http_creds+0x230>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	f7fd ff9c 	bl	80044a0 <mg_http_get_header>
 8006568:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d028      	beq.n	80065c6 <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8006574:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8006578:	220c      	movs	r2, #12
 800657a:	4924      	ldr	r1, [pc, #144]	@ (800660c <mg_http_creds+0x234>)
 800657c:	4618      	mov	r0, r3
 800657e:	f008 fc38 	bl	800edf2 <mg_str_n>
 8006582:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8006586:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800658a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006594:	ca06      	ldmia	r2, {r1, r2}
 8006596:	f000 f864 	bl	8006662 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800659a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d024      	beq.n	80065ec <mg_http_creds+0x214>
 80065a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80065a6:	4619      	mov	r1, r3
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065b0:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	460b      	mov	r3, r1
 80065b8:	4a11      	ldr	r2, [pc, #68]	@ (8006600 <mg_http_creds+0x228>)
 80065ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80065be:	6800      	ldr	r0, [r0, #0]
 80065c0:	f007 f8e8 	bl	800d794 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 80065c4:	e012      	b.n	80065ec <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80065c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f103 0010 	add.w	r0, r3, #16
 80065d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065d8:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 80065dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	490a      	ldr	r1, [pc, #40]	@ (800660c <mg_http_creds+0x234>)
 80065e4:	f7fd fdf4 	bl	80041d0 <mg_http_get_var>
}
 80065e8:	e000      	b.n	80065ec <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80065ea:	bf00      	nop
}
 80065ec:	bf00      	nop
 80065ee:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd90      	pop	{r4, r7, pc}
 80065f6:	bf00      	nop
 80065f8:	08029840 	.word	0x08029840
 80065fc:	08029850 	.word	0x08029850
 8006600:	08028e70 	.word	0x08028e70
 8006604:	08029858 	.word	0x08029858
 8006608:	08029860 	.word	0x08029860
 800660c:	08029868 	.word	0x08029868

08006610 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800661e:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 8006620:	2b01      	cmp	r3, #1
 8006622:	d913      	bls.n	800664c <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b22      	cmp	r3, #34	@ 0x22
 800662a:	d10f      	bne.n	800664c <stripquotes+0x3c>
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3b01      	subs	r3, #1
 8006632:	4413      	add	r3, r2
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b22      	cmp	r3, #34	@ 0x22
 8006638:	d108      	bne.n	800664c <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	1e9a      	subs	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4618      	mov	r0, r3
 8006646:	f008 fbd4 	bl	800edf2 <mg_str_n>
             : s;
 800664a:	e006      	b.n	800665a <stripquotes+0x4a>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	461a      	mov	r2, r3
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006656:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8006662:	b082      	sub	sp, #8
 8006664:	b580      	push	{r7, lr}
 8006666:	b08c      	sub	sp, #48	@ 0x30
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	1d38      	adds	r0, r7, #4
 800666e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006678:	e072      	b.n	8006760 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	440b      	add	r3, r1
 8006682:	4413      	add	r3, r2
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b3d      	cmp	r3, #61	@ 0x3d
 8006688:	d167      	bne.n	800675a <mg_http_get_header_var+0xf8>
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	4413      	add	r3, r2
 8006690:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006694:	4618      	mov	r0, r3
 8006696:	f01e fbb7 	bl	8024e08 <memcmp>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d15c      	bne.n	800675a <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	440b      	add	r3, r1
 80066a8:	3301      	adds	r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4413      	add	r3, r2
 80066b8:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 80066ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d205      	bcs.n	80066ce <mg_http_get_header_var+0x6c>
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b22      	cmp	r3, #34	@ 0x22
 80066c8:	d101      	bne.n	80066ce <mg_http_get_header_var+0x6c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <mg_http_get_header_var+0x6e>
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 80066d2:	e002      	b.n	80066da <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	3301      	adds	r3, #1
 80066d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 80066da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d227      	bcs.n	8006732 <mg_http_get_header_var+0xd0>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d010      	beq.n	800670a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80066e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d003      	beq.n	80066f8 <mg_http_get_header_var+0x96>
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b22      	cmp	r3, #34	@ 0x22
 80066f6:	d001      	beq.n	80066fc <mg_http_get_header_var+0x9a>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <mg_http_get_header_var+0x9c>
 80066fc:	2300      	movs	r3, #0
      while (p < x &&
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <mg_http_get_header_var+0x72>
 8006708:	e013      	b.n	8006732 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006710:	d009      	beq.n	8006726 <mg_http_get_header_var+0xc4>
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b20      	cmp	r3, #32
 8006718:	d005      	beq.n	8006726 <mg_http_get_header_var+0xc4>
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b2c      	cmp	r3, #44	@ 0x2c
 8006720:	d001      	beq.n	8006726 <mg_http_get_header_var+0xc4>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <mg_http_get_header_var+0xc6>
 8006726:	2300      	movs	r3, #0
      while (p < x &&
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1d0      	bne.n	80066d4 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8006732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	461a      	mov	r2, r3
 800673e:	f107 0314 	add.w	r3, r7, #20
 8006742:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006744:	4618      	mov	r0, r3
 8006746:	f008 fb54 	bl	800edf2 <mg_str_n>
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006754:	f7ff ff5c 	bl	8006610 <stripquotes>
 8006758:	e012      	b.n	8006780 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	3301      	adds	r3, #1
 800675e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <mg_http_get_header_var+0x112>
 8006766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	4413      	add	r3, r2
 800676c:	1c9a      	adds	r2, r3, #2
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	d382      	bcc.n	800667a <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f008 fb39 	bl	800edf2 <mg_str_n>
}
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	3730      	adds	r7, #48	@ 0x30
 8006784:	46bd      	mov	sp, r7
 8006786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678a:	b002      	add	sp, #8
 800678c:	4770      	bx	lr

0800678e <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f01d f8aa 	bl	80238f4 <atoi>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <is_hex_digit>:

static bool is_hex_digit(int c) {
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80067b6:	dd02      	ble.n	80067be <is_hex_digit+0x14>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b39      	cmp	r3, #57	@ 0x39
 80067bc:	dd0b      	ble.n	80067d6 <is_hex_digit+0x2c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b60      	cmp	r3, #96	@ 0x60
 80067c2:	dd02      	ble.n	80067ca <is_hex_digit+0x20>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b66      	cmp	r3, #102	@ 0x66
 80067c8:	dd05      	ble.n	80067d6 <is_hex_digit+0x2c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b40      	cmp	r3, #64	@ 0x40
 80067ce:	dd04      	ble.n	80067da <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b46      	cmp	r3, #70	@ 0x46
 80067d4:	dc01      	bgt.n	80067da <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <is_hex_digit+0x32>
 80067da:	2300      	movs	r3, #0
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	b2db      	uxtb	r3, r3
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b08a      	sub	sp, #40	@ 0x28
 80067f2:	af02      	add	r7, sp, #8
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b02      	cmp	r3, #2
 8006808:	dc04      	bgt.n	8006814 <skip_chunk+0x26>
 800680a:	2300      	movs	r3, #0
 800680c:	e07a      	b.n	8006904 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3301      	adds	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	da09      	bge.n	8006830 <skip_chunk+0x42>
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff ffc0 	bl	80067aa <is_hex_digit>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1ee      	bne.n	800680e <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <skip_chunk+0x4e>
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	e063      	b.n	8006904 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	2b08      	cmp	r3, #8
 8006840:	dd02      	ble.n	8006848 <skip_chunk+0x5a>
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	e05d      	b.n	8006904 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	da0c      	bge.n	800686a <skip_chunk+0x7c>
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b0d      	cmp	r3, #13
 800685a:	d106      	bne.n	800686a <skip_chunk+0x7c>
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b0a      	cmp	r3, #10
 8006868:	d002      	beq.n	8006870 <skip_chunk+0x82>
 800686a:	f04f 33ff 	mov.w	r3, #4294967295
 800686e:	e049      	b.n	8006904 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	f107 0314 	add.w	r3, r7, #20
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	f008 faba 	bl	800edf2 <mg_str_n>
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	2204      	movs	r2, #4
 8006884:	9200      	str	r2, [sp, #0]
 8006886:	2210      	movs	r2, #16
 8006888:	f107 0114 	add.w	r1, r7, #20
 800688c:	c903      	ldmia	r1, {r0, r1}
 800688e:	f008 fcee 	bl	800f26e <mg_str_to_num>
 8006892:	4603      	mov	r3, r0
 8006894:	f083 0301 	eor.w	r3, r3, #1
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	e02f      	b.n	8006904 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da02      	bge.n	80068b0 <skip_chunk+0xc2>
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295
 80068ae:	e029      	b.n	8006904 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	1eda      	subs	r2, r3, #3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	dc01      	bgt.n	80068c2 <skip_chunk+0xd4>
 80068be:	2300      	movs	r3, #0
 80068c0:	e020      	b.n	8006904 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	3302      	adds	r3, #2
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b0d      	cmp	r3, #13
 80068d2:	d108      	bne.n	80068e6 <skip_chunk+0xf8>
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	3303      	adds	r3, #3
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b0a      	cmp	r3, #10
 80068e4:	d002      	beq.n	80068ec <skip_chunk+0xfe>
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ea:	e00b      	b.n	8006904 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1c9a      	adds	r2, r3, #2
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4413      	add	r3, r2
 8006902:	3302      	adds	r3, #2
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800690c:	b580      	push	{r7, lr}
 800690e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006912:	af00      	add	r7, sp, #0
 8006914:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006918:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800691c:	6018      	str	r0, [r3, #0]
 800691e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006922:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006926:	6019      	str	r1, [r3, #0]
 8006928:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800692c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006930:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8006932:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006936:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b07      	cmp	r3, #7
 800693e:	d031      	beq.n	80069a4 <http_cb+0x98>
 8006940:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006944:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b09      	cmp	r3, #9
 800694c:	d02a      	beq.n	80069a4 <http_cb+0x98>
 800694e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006952:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b02      	cmp	r3, #2
 800695a:	f040 8356 	bne.w	800700a <http_cb+0x6fe>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800695e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006962:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8349 	beq.w	800700a <http_cb+0x6fe>
 8006978:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800697c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 833c 	bne.w	800700a <http_cb+0x6fe>
       c->recv.len > 0)) {  // see #2796
 8006992:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006996:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8333 	beq.w	800700a <http_cb+0x6fe>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80069aa:	e301      	b.n	8006fb0 <http_cb+0x6a4>
      const char *buf = (char *) c->recv.buf + ofs;
 80069ac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069b0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80069bc:	4413      	add	r3, r2
 80069be:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80069c2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069c6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ce:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f107 0210 	add.w	r2, r7, #16
 80069d8:	4619      	mov	r1, r3
 80069da:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80069de:	f7fd ff1b 	bl	8004818 <mg_http_parse>
 80069e2:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 80069ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069f0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 80069fc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da38      	bge.n	8006a76 <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8006a04:	4bc2      	ldr	r3, [pc, #776]	@ (8006d10 <http_cb+0x404>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dd10      	ble.n	8006a2e <http_cb+0x122>
 8006a0c:	4bc1      	ldr	r3, [pc, #772]	@ (8006d14 <http_cb+0x408>)
 8006a0e:	f640 525a 	movw	r2, #3418	@ 0xd5a
 8006a12:	49c1      	ldr	r1, [pc, #772]	@ (8006d18 <http_cb+0x40c>)
 8006a14:	2001      	movs	r0, #1
 8006a16:	f001 fb07 	bl	8008028 <mg_log_prefix>
 8006a1a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a1e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a26:	4619      	mov	r1, r3
 8006a28:	48bc      	ldr	r0, [pc, #752]	@ (8006d1c <http_cb+0x410>)
 8006a2a:	f001 fb4d 	bl	80080c8 <mg_log>
        c->is_draining = 1;
 8006a2e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a32:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006a3c:	f043 0310 	orr.w	r3, r3, #16
 8006a40:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8006a44:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a48:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a50:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	bf28      	it	cs
 8006a5a:	2310      	movcs	r3, #16
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8006a62:	f001 fb67 	bl	8008134 <mg_hexdump>
        c->recv.len = 0;
 8006a66:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a6a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 8006a74:	e2c9      	b.n	800700a <http_cb+0x6fe>
      }
      if (n == 0) break;                 // Request is not buffered yet
 8006a76:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 82b0 	beq.w	8006fe0 <http_cb+0x6d4>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8006a80:	f107 0210 	add.w	r2, r7, #16
 8006a84:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a88:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a8c:	210a      	movs	r1, #10
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	f7fb ffbe 	bl	8002a10 <mg_call>
      if (c->recv.len != old_len) {
 8006a94:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a98:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d01d      	beq.n	8006ae4 <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 8006aa8:	4b99      	ldr	r3, [pc, #612]	@ (8006d10 <http_cb+0x404>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	dd10      	ble.n	8006ad2 <http_cb+0x1c6>
 8006ab0:	4b98      	ldr	r3, [pc, #608]	@ (8006d14 <http_cb+0x408>)
 8006ab2:	f640 5264 	movw	r2, #3428	@ 0xd64
 8006ab6:	4998      	ldr	r1, [pc, #608]	@ (8006d18 <http_cb+0x40c>)
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f001 fab5 	bl	8008028 <mg_log_prefix>
 8006abe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ac2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aca:	4619      	mov	r1, r3
 8006acc:	4894      	ldr	r0, [pc, #592]	@ (8006d20 <http_cb+0x414>)
 8006ace:	f001 fafb 	bl	80080c8 <mg_log>
        c->pfn = NULL;
 8006ad2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ad6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 8006ae2:	e292      	b.n	800700a <http_cb+0x6fe>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8006ae4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ae8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	d128      	bne.n	8006b44 <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8006af2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006af6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006afe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b08:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006b0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8006b10:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b14:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006b18:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b1c:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006b20:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8006b24:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8006b28:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006b2c:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8006b30:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8006b34:	1a8a      	subs	r2, r1, r2
 8006b36:	1a9a      	subs	r2, r3, r2
 8006b38:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b3c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006b40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8006b44:	f107 0310 	add.w	r3, r7, #16
 8006b48:	4976      	ldr	r1, [pc, #472]	@ (8006d24 <http_cb+0x418>)
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fd fca8 	bl	80044a0 <mg_http_get_header>
 8006b50:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 8006b54:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01d      	beq.n	8006b98 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8006b5c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b60:	4971      	ldr	r1, [pc, #452]	@ (8006d28 <http_cb+0x41c>)
 8006b62:	4618      	mov	r0, r3
 8006b64:	f008 f928 	bl	800edb8 <mg_str_s>
 8006b68:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8006b6c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b70:	cb0c      	ldmia	r3, {r2, r3}
 8006b72:	c903      	ldmia	r1, {r0, r1}
 8006b74:	f008 f9e3 	bl	800ef3e <mg_strcasecmp>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <http_cb+0x27a>
          is_chunked = true;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8006b84:	e09f      	b.n	8006cc6 <http_cb+0x3ba>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8006b86:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b8a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006b8e:	4967      	ldr	r1, [pc, #412]	@ (8006d2c <http_cb+0x420>)
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	f7fb ff5d 	bl	8002a50 <mg_error>
          return;
 8006b96:	e238      	b.n	800700a <http_cb+0x6fe>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8006b98:	f107 0310 	add.w	r3, r7, #16
 8006b9c:	4964      	ldr	r1, [pc, #400]	@ (8006d30 <http_cb+0x424>)
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd fc7e 	bl	80044a0 <mg_http_get_header>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 808d 	bne.w	8006cc6 <http_cb+0x3ba>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8006bac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006bb0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2205      	movs	r2, #5
 8006bb8:	495e      	ldr	r1, [pc, #376]	@ (8006d34 <http_cb+0x428>)
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fd f9e1 	bl	8003f82 <mg_ncasecmp>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8006bd4:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006bd8:	f083 0301 	eor.w	r3, r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d030      	beq.n	8006c44 <http_cb+0x338>
 8006be2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006be6:	4954      	ldr	r1, [pc, #336]	@ (8006d38 <http_cb+0x42c>)
 8006be8:	4618      	mov	r0, r3
 8006bea:	f008 f8e5 	bl	800edb8 <mg_str_s>
 8006bee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006bf2:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006bf6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006bfa:	cb0c      	ldmia	r3, {r2, r3}
 8006bfc:	c903      	ldmia	r1, {r0, r1}
 8006bfe:	f008 f99e 	bl	800ef3e <mg_strcasecmp>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8006c08:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006c0c:	494b      	ldr	r1, [pc, #300]	@ (8006d3c <http_cb+0x430>)
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f008 f8d2 	bl	800edb8 <mg_str_s>
 8006c14:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006c18:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006c1c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006c20:	cb0c      	ldmia	r3, {r2, r3}
 8006c22:	c903      	ldmia	r1, {r0, r1}
 8006c24:	f008 f98b 	bl	800ef3e <mg_strcasecmp>
 8006c28:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8006c34:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006c38:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006c42:	e022      	b.n	8006c8a <http_cb+0x37e>
        } else if (is_response) {
 8006c44:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01e      	beq.n	8006c8a <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8006c4c:	f107 0310 	add.w	r3, r7, #16
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fd9c 	bl	800678e <mg_http_status>
 8006c56:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 8006c5a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006c5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c60:	dd0a      	ble.n	8006c78 <http_cb+0x36c>
 8006c62:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006c66:	2bcc      	cmp	r3, #204	@ 0xcc
 8006c68:	d006      	beq.n	8006c78 <http_cb+0x36c>
 8006c6a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006c6e:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8006c72:	d001      	beq.n	8006c78 <http_cb+0x36c>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <http_cb+0x36e>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8006c7e:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8006c8a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d019      	beq.n	8006cc6 <http_cb+0x3ba>
          mg_http_reply(c, 411, "", "");
 8006c92:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006c96:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8006c9a:	4b29      	ldr	r3, [pc, #164]	@ (8006d40 <http_cb+0x434>)
 8006c9c:	4a28      	ldr	r2, [pc, #160]	@ (8006d40 <http_cb+0x434>)
 8006c9e:	f240 119b 	movw	r1, #411	@ 0x19b
 8006ca2:	6800      	ldr	r0, [r0, #0]
 8006ca4:	f7fe fc22 	bl	80054ec <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8006ca8:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <http_cb+0x404>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd0a      	ble.n	8006cc6 <http_cb+0x3ba>
 8006cb0:	4b18      	ldr	r3, [pc, #96]	@ (8006d14 <http_cb+0x408>)
 8006cb2:	f640 5287 	movw	r2, #3463	@ 0xd87
 8006cb6:	4918      	ldr	r1, [pc, #96]	@ (8006d18 <http_cb+0x40c>)
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f001 f9b5 	bl	8008028 <mg_log_prefix>
 8006cbe:	4921      	ldr	r1, [pc, #132]	@ (8006d44 <http_cb+0x438>)
 8006cc0:	4821      	ldr	r0, [pc, #132]	@ (8006d48 <http_cb+0x43c>)
 8006cc2:	f001 fa01 	bl	80080c8 <mg_log>
        }
      }

      if (is_chunked) {
 8006cc6:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80e7 	beq.w	8006e9e <http_cb+0x592>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8006cd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006cd4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cdc:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8006ce0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006ce4:	440b      	add	r3, r1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006cf2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006cf6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cfe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8006d0e:	e024      	b.n	8006d5a <http_cb+0x44e>
 8006d10:	24000240 	.word	0x24000240
 8006d14:	0802c0d4 	.word	0x0802c0d4
 8006d18:	08028ac4 	.word	0x08028ac4
 8006d1c:	08029920 	.word	0x08029920
 8006d20:	08029938 	.word	0x08029938
 8006d24:	08029954 	.word	0x08029954
 8006d28:	08029968 	.word	0x08029968
 8006d2c:	08029970 	.word	0x08029970
 8006d30:	0802998c 	.word	0x0802998c
 8006d34:	08028efc 	.word	0x08028efc
 8006d38:	08028f08 	.word	0x08028f08
 8006d3c:	08028f04 	.word	0x08028f04
 8006d40:	080293d0 	.word	0x080293d0
 8006d44:	0802999c 	.word	0x0802999c
 8006d48:	08028e5c 	.word	0x08028e5c
 8006d4c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006d50:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006d54:	4413      	add	r3, r2
 8006d56:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006d5a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006d5e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006d62:	18d0      	adds	r0, r2, r3
 8006d64:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006d68:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006d6c:	1ad1      	subs	r1, r2, r3
 8006d6e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006d72:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006d76:	f7ff fd3a 	bl	80067ee <skip_chunk>
 8006d7a:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 8006d7e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dd03      	ble.n	8006d8e <http_cb+0x482>
 8006d86:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1de      	bne.n	8006d4c <http_cb+0x440>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8006d8e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8126 	beq.w	8006fe4 <http_cb+0x6d8>
        if (cl < 0) {
 8006d98:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da08      	bge.n	8006db2 <http_cb+0x4a6>
          mg_error(c, "Invalid chunk");
 8006da0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006da4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006da8:	499a      	ldr	r1, [pc, #616]	@ (8007014 <http_cb+0x708>)
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	f7fb fe50 	bl	8002a50 <mg_error>
          break;
 8006db0:	e11b      	b.n	8006fea <http_cb+0x6de>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006db8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006dbc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006dc6:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006dca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006dce:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006dd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006dd6:	e03e      	b.n	8006e56 <http_cb+0x54a>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8006dd8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ddc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006de4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006de8:	18d0      	adds	r0, r2, r3
 8006dea:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006dee:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8006df2:	4413      	add	r3, r2
 8006df4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006df8:	4413      	add	r3, r2
 8006dfa:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f01e f812 	bl	8024e28 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8006e04:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006e08:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006e12:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e16:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006e1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006e1e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006e22:	441a      	add	r2, r3
 8006e24:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e28:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006e2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006e30:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e34:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006e38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e3c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006e40:	441a      	add	r2, r3
 8006e42:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e46:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006e4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8006e4e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d016      	beq.n	8006e84 <http_cb+0x578>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006e56:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006e5a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006e5e:	18d0      	adds	r0, r2, r3
 8006e60:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006e64:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006e68:	1ad1      	subs	r1, r2, r3
 8006e6a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006e6e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006e72:	f7ff fcbc 	bl	80067ee <skip_chunk>
 8006e76:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 8006e7a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dcaa      	bgt.n	8006dd8 <http_cb+0x4cc>
 8006e82:	e000      	b.n	8006e86 <http_cb+0x57a>
          if (dl == 0) break;
 8006e84:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8006e86:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006e8a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006e8e:	4413      	add	r3, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006e96:	4413      	add	r3, r2
 8006e98:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006e9c:	e026      	b.n	8006eec <http_cb+0x5e0>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8006e9e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ea2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eaa:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 8006eba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ebe:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006ec2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006ec6:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	f0c0 808c 	bcc.w	8006fe8 <http_cb+0x6dc>
        ofs += (size_t) n + hm.body.len;
 8006ed0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ed4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006edc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8006eec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ef0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <http_cb+0x60e>
 8006f04:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006f08:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f16:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8006f1a:	f107 0210 	add.w	r2, r7, #16
 8006f1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006f22:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006f26:	210b      	movs	r1, #11
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	f7fb fd71 	bl	8002a10 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 8006f2e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006f32:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d034      	beq.n	8006fb0 <http_cb+0x6a4>
 8006f46:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006f4a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006f54:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d128      	bne.n	8006fb0 <http_cb+0x6a4>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8006f5e:	f107 0310 	add.w	r3, r7, #16
 8006f62:	492d      	ldr	r1, [pc, #180]	@ (8007018 <http_cb+0x70c>)
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd fa9b 	bl	80044a0 <mg_http_get_header>
 8006f6a:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8006f6e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01c      	beq.n	8006fb0 <http_cb+0x6a4>
 8006f76:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006f7a:	4928      	ldr	r1, [pc, #160]	@ (800701c <http_cb+0x710>)
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f007 ff1b 	bl	800edb8 <mg_str_s>
 8006f82:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8006f86:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006f8a:	cb0c      	ldmia	r3, {r2, r3}
 8006f8c:	c903      	ldmia	r1, {r0, r1}
 8006f8e:	f007 ffd6 	bl	800ef3e <mg_strcasecmp>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <http_cb+0x6a4>
          c->is_draining = 1;  // honor "Connection: close"
 8006f98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006f9c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006fa6:	f043 0310 	orr.w	r3, r3, #16
 8006faa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8006fae:	e01c      	b.n	8006fea <http_cb+0x6de>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8006fb0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006fb4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006fbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d110      	bne.n	8006fea <http_cb+0x6de>
 8006fc8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006fcc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd4:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	f4ff ace7 	bcc.w	80069ac <http_cb+0xa0>
 8006fde:	e004      	b.n	8006fea <http_cb+0x6de>
      if (n == 0) break;                 // Request is not buffered yet
 8006fe0:	bf00      	nop
 8006fe2:	e002      	b.n	8006fea <http_cb+0x6de>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <http_cb+0x6de>
        if (hm.body.len > len) break;  // Buffer more data
 8006fe8:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8006fea:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <http_cb+0x6fe>
 8006ff2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ff6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3338      	adds	r3, #56	@ 0x38
 8006ffe:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f91f 	bl	8007248 <mg_iobuf_del>
  }
  (void) ev_data;
}
 800700a:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	080299c0 	.word	0x080299c0
 8007018:	080299d0 	.word	0x080299d0
 800701c:	080299dc 	.word	0x080299dc

08007020 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f002 fd29 	bl	8009a8c <mg_listen>
 800703a:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <mg_http_listen+0x2a>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4a03      	ldr	r2, [pc, #12]	@ (8007054 <mg_http_listen+0x34>)
 8007046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800704a:	697b      	ldr	r3, [r7, #20]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	0800690d 	.word	0x0800690d

08007058 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <roundup+0x26>
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	4413      	add	r3, r2
 800706e:	1e5a      	subs	r2, r3, #1
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	fb02 f303 	mul.w	r3, r2, r3
 800707c:	e000      	b.n	8007080 <roundup+0x28>
 800707e:	687b      	ldr	r3, [r7, #4]
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800708c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007090:	b088      	sub	sp, #32
 8007092:	af02      	add	r7, sp, #8
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6838      	ldr	r0, [r7, #0]
 80070a4:	f7ff ffd8 	bl	8007058 <roundup>
 80070a8:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d117      	bne.n	80070e0 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f010 fcbe 	bl	8017a3c <mg_bzero>
    free(io->buf);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f01c fc3d 	bl	8023944 <free>
    io->buf = NULL;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	609a      	str	r2, [r3, #8]
 80070de:	e053      	b.n	8007188 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d04e      	beq.n	8007188 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	2001      	movs	r0, #1
 80070ee:	f01c fc05 	bl	80238fc <calloc>
 80070f2:	4603      	mov	r3, r0
 80070f4:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d028      	beq.n	800714e <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	4293      	cmp	r3, r2
 8007104:	bf28      	it	cs
 8007106:	4613      	movcs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <mg_iobuf_resize+0x9a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <mg_iobuf_resize+0x9a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4619      	mov	r1, r3
 8007120:	6938      	ldr	r0, [r7, #16]
 8007122:	f01d fe81 	bl	8024e28 <memmove>
      mg_bzero(io->buf, io->size);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f010 fc83 	bl	8017a3c <mg_bzero>
      free(io->buf);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f01c fc02 	bl	8023944 <free>
      io->buf = (unsigned char *) p;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	605a      	str	r2, [r3, #4]
 800714c:	e01c      	b.n	8007188 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <mg_iobuf_resize+0x108>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	dd16      	ble.n	8007188 <mg_iobuf_resize+0xfc>
 800715a:	4b0f      	ldr	r3, [pc, #60]	@ (8007198 <mg_iobuf_resize+0x10c>)
 800715c:	f640 6201 	movw	r2, #3585	@ 0xe01
 8007160:	490e      	ldr	r1, [pc, #56]	@ (800719c <mg_iobuf_resize+0x110>)
 8007162:	2001      	movs	r0, #1
 8007164:	f000 ff60 	bl	8008028 <mg_log_prefix>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	4698      	mov	r8, r3
 8007170:	4691      	mov	r9, r2
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	461c      	mov	r4, r3
 8007178:	4615      	mov	r5, r2
 800717a:	e9cd 4500 	strd	r4, r5, [sp]
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	4807      	ldr	r0, [pc, #28]	@ (80071a0 <mg_iobuf_resize+0x114>)
 8007184:	f000 ffa0 	bl	80080c8 <mg_log>
    }
  }
  return ok;
 8007188:	697b      	ldr	r3, [r7, #20]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007194:	24000240 	.word	0x24000240
 8007198:	0802c0dc 	.word	0x0802c0dc
 800719c:	08028ac4 	.word	0x08028ac4
 80071a0:	08029a1c 	.word	0x08029a1c

080071a4 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	441a      	add	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f7ff ff49 	bl	8007058 <roundup>
 80071c6:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80071c8:	6979      	ldr	r1, [r7, #20]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff ff5e 	bl	800708c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d001      	beq.n	80071de <mg_iobuf_add+0x3a>
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d210      	bcs.n	800720a <mg_iobuf_add+0x66>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	440b      	add	r3, r1
 80071f2:	18d0      	adds	r0, r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	18d1      	adds	r1, r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	461a      	mov	r2, r3
 8007206:	f01d fe0f 	bl	8024e28 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <mg_iobuf_add+0x7e>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4413      	add	r3, r2
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	f01d fe03 	bl	8024e28 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	429a      	cmp	r2, r3
 800722a:	d902      	bls.n	8007232 <mg_iobuf_add+0x8e>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	609a      	str	r2, [r3, #8]
  io->len += len;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	609a      	str	r2, [r3, #8]
  return len;
 800723e:	683b      	ldr	r3, [r7, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d902      	bls.n	8007264 <mg_iobuf_del+0x1c>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	441a      	add	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	d904      	bls.n	800727c <mg_iobuf_del+0x34>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d012      	beq.n	80072aa <mg_iobuf_del+0x62>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	18d0      	adds	r0, r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	440b      	add	r3, r1
 8007296:	18d1      	adds	r1, r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	f01d fdbf 	bl	8024e28 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <mg_iobuf_del+0x80>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6899      	ldr	r1, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	1acb      	subs	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f010 fbba 	bl	8017a3c <mg_bzero>
  io->len -= len;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	609a      	str	r2, [r3, #8]
  return len;
 80072d4:	687b      	ldr	r3, [r7, #4]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 80072e6:	2100      	movs	r1, #0
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff fecf 	bl	800708c <mg_iobuf_resize>
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <escapeseq+0x12>
 8007306:	4b04      	ldr	r3, [pc, #16]	@ (8007318 <escapeseq+0x20>)
 8007308:	e000      	b.n	800730c <escapeseq+0x14>
 800730a:	4b04      	ldr	r3, [pc, #16]	@ (800731c <escapeseq+0x24>)
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	08029a28 	.word	0x08029a28
 800731c:	08029a30 	.word	0x08029a30

08007320 <json_esc>:

static char json_esc(int c, int esc) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800732a:	6838      	ldr	r0, [r7, #0]
 800732c:	f7ff ffe4 	bl	80072f8 <escapeseq>
 8007330:	6138      	str	r0, [r7, #16]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf0c      	ite	eq
 8007338:	2301      	moveq	r3, #1
 800733a:	2300      	movne	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff ffda 	bl	80072f8 <escapeseq>
 8007344:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	e010      	b.n	800736e <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4293      	cmp	r3, r2
 8007356:	d107      	bne.n	8007368 <json_esc+0x48>
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	461a      	mov	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	e007      	b.n	8007378 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	3301      	adds	r3, #1
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1ea      	bne.n	800734c <json_esc+0x2c>
  }
  return 0;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	e02e      	b.n	80073ee <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b5c      	cmp	r3, #92	@ 0x5c
 800739a:	d114      	bne.n	80073c6 <mg_pass_string+0x46>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3301      	adds	r3, #1
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	dd0f      	ble.n	80073c6 <mg_pass_string+0x46>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2101      	movs	r1, #1
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff ffb4 	bl	8007320 <json_esc>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <mg_pass_string+0x46>
      i++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e010      	b.n	80073e8 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 80073d2:	f06f 0301 	mvn.w	r3, #1
 80073d6:	e010      	b.n	80073fa <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b22      	cmp	r3, #34	@ 0x22
 80073e2:	d101      	bne.n	80073e8 <mg_pass_string+0x68>
      return i;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	e008      	b.n	80073fa <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	dbcc      	blt.n	8007390 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 80073f6:	f06f 0301 	mvn.w	r3, #1
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	0000      	movs	r0, r0
 8007404:	0000      	movs	r0, r0
	...

08007408 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8007408:	b480      	push	{r7}
 800740a:	b091      	sub	sp, #68	@ 0x44
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	2301      	movs	r3, #1
 8007426:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 8007428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	da0a      	bge.n	8007446 <mg_atod+0x3e>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b2d      	cmp	r3, #45	@ 0x2d
 8007436:	d106      	bne.n	8007446 <mg_atod+0x3e>
    sign = -1, i++;
 8007438:	f04f 33ff 	mov.w	r3, #4294967295
 800743c:	633b      	str	r3, [r7, #48]	@ 0x30
 800743e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007440:	3301      	adds	r3, #1
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	e00a      	b.n	800745c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 8007446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	da21      	bge.n	8007492 <mg_atod+0x8a>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b2b      	cmp	r3, #43	@ 0x2b
 8007454:	d11d      	bne.n	8007492 <mg_atod+0x8a>
    i++;
 8007456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007458:	3301      	adds	r3, #1
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800745c:	e019      	b.n	8007492 <mg_atod+0x8a>
    d *= 10.0;
 800745e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8007462:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800746a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800746e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	3b30      	subs	r3, #48	@ 0x30
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007480:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8007484:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007488:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800748c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748e:	3301      	adds	r3, #1
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
 8007492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	da0b      	bge.n	80074b2 <mg_atod+0xaa>
 800749a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80074a4:	d905      	bls.n	80074b2 <mg_atod+0xaa>
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b39      	cmp	r3, #57	@ 0x39
 80074b0:	d9d5      	bls.n	800745e <mg_atod+0x56>
  }
  d *= sign;
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074bc:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80074c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80074c4:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 80074c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	da51      	bge.n	8007574 <mg_atod+0x16c>
 80074d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074da:	d14b      	bne.n	8007574 <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80074e8:	a36d      	add	r3, pc, #436	@ (adr r3, 80076a0 <mg_atod+0x298>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 80074f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f4:	3301      	adds	r3, #1
 80074f6:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80074f8:	e01d      	b.n	8007536 <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	3b30      	subs	r3, #48	@ 0x30
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800750c:	ed97 7b08 	vldr	d7, [r7, #32]
 8007510:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007514:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8007518:	ee36 7b07 	vadd.f64	d7, d6, d7
 800751c:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 8007520:	ed97 6b08 	vldr	d6, [r7, #32]
 8007524:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007528:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800752c:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007532:	3301      	adds	r3, #1
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
 8007536:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	429a      	cmp	r2, r3
 800753c:	da0b      	bge.n	8007556 <mg_atod+0x14e>
 800753e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b2f      	cmp	r3, #47	@ 0x2f
 8007548:	d905      	bls.n	8007556 <mg_atod+0x14e>
 800754a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b39      	cmp	r3, #57	@ 0x39
 8007554:	d9d1      	bls.n	80074fa <mg_atod+0xf2>
    }
    d += frac * sign;
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007560:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8007564:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007568:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800756c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007570:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8007574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	da7e      	bge.n	800767a <mg_atod+0x272>
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b65      	cmp	r3, #101	@ 0x65
 8007586:	d005      	beq.n	8007594 <mg_atod+0x18c>
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b45      	cmp	r3, #69	@ 0x45
 8007592:	d172      	bne.n	800767a <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
    i++;
 800759c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759e:	3301      	adds	r3, #1
 80075a0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 80075a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	da0a      	bge.n	80075c0 <mg_atod+0x1b8>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80075b4:	d104      	bne.n	80075c0 <mg_atod+0x1b8>
 80075b6:	2301      	movs	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	3301      	adds	r3, #1
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 80075c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	da19      	bge.n	80075fc <mg_atod+0x1f4>
 80075c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b2b      	cmp	r3, #43	@ 0x2b
 80075d2:	d113      	bne.n	80075fc <mg_atod+0x1f4>
 80075d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d6:	3301      	adds	r3, #1
 80075d8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80075da:	e00f      	b.n	80075fc <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80075ee:	461a      	mov	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	3b30      	subs	r3, #48	@ 0x30
 80075f8:	440b      	add	r3, r1
 80075fa:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80075fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	429a      	cmp	r2, r3
 8007602:	da0f      	bge.n	8007624 <mg_atod+0x21c>
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b2f      	cmp	r3, #47	@ 0x2f
 800760e:	d909      	bls.n	8007624 <mg_atod+0x21c>
 8007610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b39      	cmp	r3, #57	@ 0x39
 800761a:	d803      	bhi.n	8007624 <mg_atod+0x21c>
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8007622:	dbdb      	blt.n	80075dc <mg_atod+0x1d4>
    if (minus) exp = -exp;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <mg_atod+0x228>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	425b      	negs	r3, r3
 800762e:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e00a      	b.n	800764c <mg_atod+0x244>
 8007636:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800763a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800763e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007642:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	3301      	adds	r3, #1
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	dbf0      	blt.n	8007636 <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e00a      	b.n	8007670 <mg_atod+0x268>
 800765a:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800765e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007662:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007666:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	3301      	adds	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	425b      	negs	r3, r3
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	429a      	cmp	r2, r3
 8007678:	dbef      	blt.n	800765a <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <mg_atod+0x27e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007684:	601a      	str	r2, [r3, #0]
  return d;
 8007686:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800768a:	ec43 2b17 	vmov	d7, r2, r3
}
 800768e:	eeb0 0b47 	vmov.f64	d0, d7
 8007692:	3744      	adds	r7, #68	@ 0x44
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w
 80076a0:	9999999a 	.word	0x9999999a
 80076a4:	3fb99999 	.word	0x3fb99999

080076a8 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b09b      	sub	sp, #108	@ 0x6c
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	f107 0408 	add.w	r4, r7, #8
 80076b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 80076c8:	2300      	movs	r3, #0
 80076ca:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 80076cc:	2300      	movs	r3, #0
 80076ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 80076d0:	2300      	movs	r3, #0
 80076d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 80076d4:	2300      	movs	r3, #0
 80076d6:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 80076d8:	2301      	movs	r3, #1
 80076da:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <mg_json_get+0x4c>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b24      	cmp	r3, #36	@ 0x24
 80076fa:	d002      	beq.n	8007702 <mg_json_get+0x5a>
 80076fc:	f06f 0301 	mvn.w	r3, #1
 8007700:	e308      	b.n	8007d14 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8007702:	2300      	movs	r3, #0
 8007704:	663b      	str	r3, [r7, #96]	@ 0x60
 8007706:	e2fe      	b.n	8007d06 <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 8007708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800770a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800770c:	4413      	add	r3, r2
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8007714:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007718:	2b20      	cmp	r3, #32
 800771a:	f000 82ee 	beq.w	8007cfa <mg_json_get+0x652>
 800771e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007722:	2b09      	cmp	r3, #9
 8007724:	f000 82e9 	beq.w	8007cfa <mg_json_get+0x652>
 8007728:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800772c:	2b0a      	cmp	r3, #10
 800772e:	f000 82e4 	beq.w	8007cfa <mg_json_get+0x652>
 8007732:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007736:	2b0d      	cmp	r3, #13
 8007738:	f000 82df 	beq.w	8007cfa <mg_json_get+0x652>
    switch (expecting) {
 800773c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007740:	2b03      	cmp	r3, #3
 8007742:	f200 82dd 	bhi.w	8007d00 <mg_json_get+0x658>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <mg_json_get+0xa4>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	0800775d 	.word	0x0800775d
 8007750:	08007a45 	.word	0x08007a45
 8007754:	08007bd3 	.word	0x08007bd3
 8007758:	08007be9 	.word	0x08007be9
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800775c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800775e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007760:	429a      	cmp	r2, r3
 8007762:	d101      	bne.n	8007768 <mg_json_get+0xc0>
 8007764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007766:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 8007768:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800776c:	2b7b      	cmp	r3, #123	@ 0x7b
 800776e:	d12b      	bne.n	80077c8 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8007770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007772:	2b1d      	cmp	r3, #29
 8007774:	dd02      	ble.n	800777c <mg_json_get+0xd4>
 8007776:	f04f 33ff 	mov.w	r3, #4294967295
 800777a:	e2cb      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800777c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800777e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007780:	429a      	cmp	r2, r3
 8007782:	d114      	bne.n	80077ae <mg_json_get+0x106>
 8007784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b2e      	cmp	r3, #46	@ 0x2e
 800778e:	d10e      	bne.n	80077ae <mg_json_get+0x106>
 8007790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007794:	429a      	cmp	r2, r3
 8007796:	d10a      	bne.n	80077ae <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8007798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800779a:	3301      	adds	r3, #1
 800779c:	657b      	str	r3, [r7, #84]	@ 0x54
 800779e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077a0:	3301      	adds	r3, #1
 80077a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295
 80077a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 80077ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077b4:	3368      	adds	r3, #104	@ 0x68
 80077b6:	443b      	add	r3, r7
 80077b8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80077bc:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 80077c6:	e29b      	b.n	8007d00 <mg_json_get+0x658>
        } else if (c == '[') {
 80077c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077cc:	2b5b      	cmp	r3, #91	@ 0x5b
 80077ce:	d14e      	bne.n	800786e <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80077d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077d2:	2b1d      	cmp	r3, #29
 80077d4:	dd02      	ble.n	80077dc <mg_json_get+0x134>
 80077d6:	f04f 33ff 	mov.w	r3, #4294967295
 80077da:	e29b      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80077dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d13a      	bne.n	800785a <mg_json_get+0x1b2>
 80077e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	4413      	add	r3, r2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b5b      	cmp	r3, #91	@ 0x5b
 80077ee:	d134      	bne.n	800785a <mg_json_get+0x1b2>
 80077f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d130      	bne.n	800785a <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 80077f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077fa:	3301      	adds	r3, #1
 80077fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80077fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007800:	3301      	adds	r3, #1
 8007802:	653b      	str	r3, [r7, #80]	@ 0x50
 8007804:	2300      	movs	r3, #0
 8007806:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8007808:	2300      	movs	r3, #0
 800780a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800780c:	e010      	b.n	8007830 <mg_json_get+0x188>
              ei *= 10;
 800780e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800781a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	3b30      	subs	r3, #48	@ 0x30
 8007824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007826:	4413      	add	r3, r2
 8007828:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800782a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800782c:	3301      	adds	r3, #1
 800782e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b5d      	cmp	r3, #93	@ 0x5d
 800783a:	d005      	beq.n	8007848 <mg_json_get+0x1a0>
 800783c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e2      	bne.n	800780e <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8007848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <mg_json_get+0x1b2>
 8007854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007856:	3301      	adds	r3, #1
 8007858:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800785a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007860:	3368      	adds	r3, #104	@ 0x68
 8007862:	443b      	add	r3, r7
 8007864:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007868:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800786c:	e248      	b.n	8007d00 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800786e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007872:	2b5d      	cmp	r3, #93	@ 0x5d
 8007874:	d13a      	bne.n	80078ec <mg_json_get+0x244>
 8007876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd37      	ble.n	80078ec <mg_json_get+0x244>
          MG_EOO(']');
 800787c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800787e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007880:	429a      	cmp	r2, r3
 8007882:	d106      	bne.n	8007892 <mg_json_get+0x1ea>
 8007884:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007888:	429a      	cmp	r2, r3
 800788a:	d002      	beq.n	8007892 <mg_json_get+0x1ea>
 800788c:	f06f 0302 	mvn.w	r3, #2
 8007890:	e240      	b.n	8007d14 <mg_json_get+0x66c>
 8007892:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007898:	3b01      	subs	r3, #1
 800789a:	3368      	adds	r3, #104	@ 0x68
 800789c:	443b      	add	r3, r7
 800789e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80078a2:	3302      	adds	r3, #2
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d002      	beq.n	80078ae <mg_json_get+0x206>
 80078a8:	f06f 0301 	mvn.w	r3, #1
 80078ac:	e232      	b.n	8007d14 <mg_json_get+0x66c>
 80078ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078b0:	3b01      	subs	r3, #1
 80078b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b8:	429a      	cmp	r2, r3
 80078ba:	f040 809c 	bne.w	80079f6 <mg_json_get+0x34e>
 80078be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	4413      	add	r3, r2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 8095 	bne.w	80079f6 <mg_json_get+0x34e>
 80078cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d0:	429a      	cmp	r2, r3
 80078d2:	f040 8090 	bne.w	80079f6 <mg_json_get+0x34e>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <mg_json_get+0x240>
 80078dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ea:	e213      	b.n	8007d14 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80078ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80078f0:	2b74      	cmp	r3, #116	@ 0x74
 80078f2:	d113      	bne.n	800791c <mg_json_get+0x274>
 80078f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f6:	3303      	adds	r3, #3
 80078f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078fa:	429a      	cmp	r2, r3
 80078fc:	dd0e      	ble.n	800791c <mg_json_get+0x274>
 80078fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007902:	4413      	add	r3, r2
 8007904:	2204      	movs	r2, #4
 8007906:	4998      	ldr	r1, [pc, #608]	@ (8007b68 <mg_json_get+0x4c0>)
 8007908:	4618      	mov	r0, r3
 800790a:	f01d fa7d 	bl	8024e08 <memcmp>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <mg_json_get+0x274>
          i += 3;
 8007914:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007916:	3303      	adds	r3, #3
 8007918:	663b      	str	r3, [r7, #96]	@ 0x60
 800791a:	e06c      	b.n	80079f6 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800791c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007920:	2b6e      	cmp	r3, #110	@ 0x6e
 8007922:	d113      	bne.n	800794c <mg_json_get+0x2a4>
 8007924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007926:	3303      	adds	r3, #3
 8007928:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800792a:	429a      	cmp	r2, r3
 800792c:	dd0e      	ble.n	800794c <mg_json_get+0x2a4>
 800792e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007932:	4413      	add	r3, r2
 8007934:	2204      	movs	r2, #4
 8007936:	498d      	ldr	r1, [pc, #564]	@ (8007b6c <mg_json_get+0x4c4>)
 8007938:	4618      	mov	r0, r3
 800793a:	f01d fa65 	bl	8024e08 <memcmp>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d103      	bne.n	800794c <mg_json_get+0x2a4>
          i += 3;
 8007944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007946:	3303      	adds	r3, #3
 8007948:	663b      	str	r3, [r7, #96]	@ 0x60
 800794a:	e054      	b.n	80079f6 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800794c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007950:	2b66      	cmp	r3, #102	@ 0x66
 8007952:	d113      	bne.n	800797c <mg_json_get+0x2d4>
 8007954:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007956:	3304      	adds	r3, #4
 8007958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800795a:	429a      	cmp	r2, r3
 800795c:	dd0e      	ble.n	800797c <mg_json_get+0x2d4>
 800795e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007962:	4413      	add	r3, r2
 8007964:	2205      	movs	r2, #5
 8007966:	4982      	ldr	r1, [pc, #520]	@ (8007b70 <mg_json_get+0x4c8>)
 8007968:	4618      	mov	r0, r3
 800796a:	f01d fa4d 	bl	8024e08 <memcmp>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <mg_json_get+0x2d4>
          i += 4;
 8007974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007976:	3304      	adds	r3, #4
 8007978:	663b      	str	r3, [r7, #96]	@ 0x60
 800797a:	e03c      	b.n	80079f6 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800797c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007980:	2b2d      	cmp	r3, #45	@ 0x2d
 8007982:	d007      	beq.n	8007994 <mg_json_get+0x2ec>
 8007984:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007988:	2b2f      	cmp	r3, #47	@ 0x2f
 800798a:	d916      	bls.n	80079ba <mg_json_get+0x312>
 800798c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007990:	2b39      	cmp	r3, #57	@ 0x39
 8007992:	d812      	bhi.n	80079ba <mg_json_get+0x312>
          int numlen = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8007998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800799a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799c:	18d0      	adds	r0, r2, r3
 800799e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	f107 0210 	add.w	r2, r7, #16
 80079a8:	4619      	mov	r1, r3
 80079aa:	f7ff fd2d 	bl	8007408 <mg_atod>
          i += numlen - 1;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079b4:	4413      	add	r3, r2
 80079b6:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80079b8:	e01d      	b.n	80079f6 <mg_json_get+0x34e>
        } else if (c == '"') {
 80079ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80079be:	2b22      	cmp	r3, #34	@ 0x22
 80079c0:	d116      	bne.n	80079f0 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80079c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079c4:	3301      	adds	r3, #1
 80079c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079c8:	18d0      	adds	r0, r2, r3
 80079ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	4619      	mov	r1, r3
 80079d4:	f7ff fcd4 	bl	8007380 <mg_pass_string>
 80079d8:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 80079da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da01      	bge.n	80079e4 <mg_json_get+0x33c>
 80079e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e2:	e197      	b.n	8007d14 <mg_json_get+0x66c>
          i += n + 1;
 80079e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e6:	3301      	adds	r3, #1
 80079e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079ea:	4413      	add	r3, r2
 80079ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ee:	e002      	b.n	80079f6 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 80079f0:	f06f 0301 	mvn.w	r3, #1
 80079f4:	e18e      	b.n	8007d14 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 80079f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d114      	bne.n	8007a28 <mg_json_get+0x380>
 80079fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10e      	bne.n	8007a28 <mg_json_get+0x380>
 8007a0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d10a      	bne.n	8007a28 <mg_json_get+0x380>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <mg_json_get+0x37c>
 8007a18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a26:	e175      	b.n	8007d14 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 8007a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d105      	bne.n	8007a3c <mg_json_get+0x394>
 8007a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	db02      	blt.n	8007a3c <mg_json_get+0x394>
 8007a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a38:	3301      	adds	r3, #1
 8007a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8007a42:	e15d      	b.n	8007d00 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 8007a44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a48:	2b22      	cmp	r3, #34	@ 0x22
 8007a4a:	d170      	bne.n	8007b2e <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8007a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a52:	18d0      	adds	r0, r2, r3
 8007a54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	f7ff fc8f 	bl	8007380 <mg_pass_string>
 8007a62:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da01      	bge.n	8007a6e <mg_json_get+0x3c6>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	e152      	b.n	8007d14 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8007a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a74:	4413      	add	r3, r2
 8007a76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	dc02      	bgt.n	8007a82 <mg_json_get+0x3da>
 8007a7c:	f06f 0302 	mvn.w	r3, #2
 8007a80:	e148      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8007a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a86:	429a      	cmp	r2, r3
 8007a88:	da02      	bge.n	8007a90 <mg_json_get+0x3e8>
 8007a8a:	f06f 0302 	mvn.w	r3, #2
 8007a8e:	e141      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8007a90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d109      	bne.n	8007aac <mg_json_get+0x404>
 8007a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007aa4:	d002      	beq.n	8007aac <mg_json_get+0x404>
 8007aa6:	f06f 0302 	mvn.w	r3, #2
 8007aaa:	e133      	b.n	8007d14 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8007aac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d133      	bne.n	8007b1c <mg_json_get+0x474>
 8007ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac0:	d12c      	bne.n	8007b1c <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8007ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac8:	18d0      	adds	r0, r2, r3
 8007aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f01d f9d7 	bl	8024e86 <strncmp>
 8007ad8:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11e      	bne.n	8007b1c <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007ade:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	4413      	add	r3, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d011      	beq.n	8007b14 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007af0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	4413      	add	r3, r2
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b00:	d008      	beq.n	8007b14 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8007b02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	4413      	add	r3, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007b10:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b12:	d103      	bne.n	8007b1c <mg_json_get+0x474>
            pos += n;
 8007b14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	4413      	add	r3, r2
 8007b1a:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b22:	4413      	add	r3, r2
 8007b24:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 8007b26:	2302      	movs	r3, #2
 8007b28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007b2c:	e0e7      	b.n	8007cfe <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 8007b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b32:	2b7d      	cmp	r3, #125	@ 0x7d
 8007b34:	d14a      	bne.n	8007bcc <mg_json_get+0x524>
          MG_EOO('}');
 8007b36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d106      	bne.n	8007b4c <mg_json_get+0x4a4>
 8007b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d002      	beq.n	8007b4c <mg_json_get+0x4a4>
 8007b46:	f06f 0302 	mvn.w	r3, #2
 8007b4a:	e0e3      	b.n	8007d14 <mg_json_get+0x66c>
 8007b4c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b52:	3b01      	subs	r3, #1
 8007b54:	3368      	adds	r3, #104	@ 0x68
 8007b56:	443b      	add	r3, r7
 8007b58:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d008      	beq.n	8007b74 <mg_json_get+0x4cc>
 8007b62:	f06f 0301 	mvn.w	r3, #1
 8007b66:	e0d5      	b.n	8007d14 <mg_json_get+0x66c>
 8007b68:	08029a3c 	.word	0x08029a3c
 8007b6c:	08029a44 	.word	0x08029a44
 8007b70:	08029a4c 	.word	0x08029a4c
 8007b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b76:	3b01      	subs	r3, #1
 8007b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d114      	bne.n	8007bac <mg_json_get+0x504>
 8007b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10e      	bne.n	8007bac <mg_json_get+0x504>
 8007b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d10a      	bne.n	8007bac <mg_json_get+0x504>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <mg_json_get+0x500>
 8007b9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007baa:	e0b3      	b.n	8007d14 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 8007bac:	2303      	movs	r3, #3
 8007bae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 8007bb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	f040 80a1 	bne.w	8007cfe <mg_json_get+0x656>
 8007bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f2c0 809d 	blt.w	8007cfe <mg_json_get+0x656>
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 8007bca:	e098      	b.n	8007cfe <mg_json_get+0x656>
          return MG_JSON_INVALID;
 8007bcc:	f06f 0301 	mvn.w	r3, #1
 8007bd0:	e0a0      	b.n	8007d14 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 8007bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007bd6:	2b3a      	cmp	r3, #58	@ 0x3a
 8007bd8:	d103      	bne.n	8007be2 <mg_json_get+0x53a>
          expecting = S_VALUE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007be0:	e08e      	b.n	8007d00 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 8007be2:	f06f 0301 	mvn.w	r3, #1
 8007be6:	e095      	b.n	8007d14 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8007be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dc02      	bgt.n	8007bf4 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 8007bee:	f06f 0301 	mvn.w	r3, #1
 8007bf2:	e08f      	b.n	8007d14 <mg_json_get+0x66c>
        } else if (c == ',') {
 8007bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007bf8:	2b2c      	cmp	r3, #44	@ 0x2c
 8007bfa:	d10d      	bne.n	8007c18 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8007bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	3368      	adds	r3, #104	@ 0x68
 8007c02:	443b      	add	r3, r7
 8007c04:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007c08:	2b7b      	cmp	r3, #123	@ 0x7b
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007c16:	e073      	b.n	8007d00 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 8007c18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c1c:	2b5d      	cmp	r3, #93	@ 0x5d
 8007c1e:	d003      	beq.n	8007c28 <mg_json_get+0x580>
 8007c20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c24:	2b7d      	cmp	r3, #125	@ 0x7d
 8007c26:	d163      	bne.n	8007cf0 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8007c28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d10d      	bne.n	8007c4c <mg_json_get+0x5a4>
 8007c30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c34:	2b7d      	cmp	r3, #125	@ 0x7d
 8007c36:	d109      	bne.n	8007c4c <mg_json_get+0x5a4>
 8007c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c44:	d102      	bne.n	8007c4c <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 8007c46:	f06f 0302 	mvn.w	r3, #2
 8007c4a:	e063      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8007c4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d10d      	bne.n	8007c70 <mg_json_get+0x5c8>
 8007c54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c58:	2b5d      	cmp	r3, #93	@ 0x5d
 8007c5a:	d109      	bne.n	8007c70 <mg_json_get+0x5c8>
 8007c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b2c      	cmp	r3, #44	@ 0x2c
 8007c68:	d102      	bne.n	8007c70 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 8007c6a:	f06f 0302 	mvn.w	r3, #2
 8007c6e:	e051      	b.n	8007d14 <mg_json_get+0x66c>
          MG_EOO('O');
 8007c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d106      	bne.n	8007c86 <mg_json_get+0x5de>
 8007c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d002      	beq.n	8007c86 <mg_json_get+0x5de>
 8007c80:	f06f 0302 	mvn.w	r3, #2
 8007c84:	e046      	b.n	8007d14 <mg_json_get+0x66c>
 8007c86:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	3368      	adds	r3, #104	@ 0x68
 8007c90:	443b      	add	r3, r7
 8007c92:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007c96:	3302      	adds	r3, #2
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d002      	beq.n	8007ca2 <mg_json_get+0x5fa>
 8007c9c:	f06f 0301 	mvn.w	r3, #1
 8007ca0:	e038      	b.n	8007d14 <mg_json_get+0x66c>
 8007ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d114      	bne.n	8007cda <mg_json_get+0x632>
 8007cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10e      	bne.n	8007cda <mg_json_get+0x632>
 8007cbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d10a      	bne.n	8007cda <mg_json_get+0x632>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <mg_json_get+0x62e>
 8007cca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cd8:	e01c      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8007cda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d109      	bne.n	8007cf6 <mg_json_get+0x64e>
 8007ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db06      	blt.n	8007cf6 <mg_json_get+0x64e>
 8007ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cea:	3301      	adds	r3, #1
 8007cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cee:	e002      	b.n	8007cf6 <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 8007cf0:	f06f 0301 	mvn.w	r3, #1
 8007cf4:	e00e      	b.n	8007d14 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8007cf6:	bf00      	nop
        break;
 8007cf8:	e002      	b.n	8007d00 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8007cfa:	bf00      	nop
 8007cfc:	e000      	b.n	8007d00 <mg_json_get+0x658>
        break;
 8007cfe:	bf00      	nop
  for (i = 0; i < len; i++) {
 8007d00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d02:	3301      	adds	r3, #1
 8007d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	f6ff acfc 	blt.w	8007708 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8007d10:	f06f 0302 	mvn.w	r3, #2
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	376c      	adds	r7, #108	@ 0x6c
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd90      	pop	{r4, r7, pc}

08007d1c <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	1d38      	adds	r0, r7, #4
 8007d26:	e880 0006 	stmia.w	r0, {r1, r2}
 8007d2a:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	1d39      	adds	r1, r7, #4
 8007d38:	c903      	ldmia	r1, {r0, r1}
 8007d3a:	f7ff fcb5 	bl	80076a8 <mg_json_get>
 8007d3e:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	db03      	blt.n	8007d4e <mg_json_get_tok+0x32>
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	e000      	b.n	8007d50 <mg_json_get_tok+0x34>
 8007d4e:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f007 f84a 	bl	800edf2 <mg_str_n>
}
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8007d66:	b590      	push	{r4, r7, lr}
 8007d68:	b089      	sub	sp, #36	@ 0x24
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	f107 0408 	add.w	r4, r7, #8
 8007d70:	e884 0003 	stmia.w	r4, {r0, r1}
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8007d7c:	f107 0314 	add.w	r3, r7, #20
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	f107 0108 	add.w	r1, r7, #8
 8007d86:	c903      	ldmia	r1, {r0, r1}
 8007d88:	f7ff fc8e 	bl	80076a8 <mg_json_get>
 8007d8c:	61b8      	str	r0, [r7, #24]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	db23      	blt.n	8007ddc <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	4413      	add	r3, r2
 8007d9a:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8007d9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d9e:	d00b      	beq.n	8007db8 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	4413      	add	r3, r2
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b2f      	cmp	r3, #47	@ 0x2f
 8007daa:	d917      	bls.n	8007ddc <mg_json_get_num+0x76>
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	4413      	add	r3, r2
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b39      	cmp	r3, #57	@ 0x39
 8007db6:	d811      	bhi.n	8007ddc <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00c      	beq.n	8007dd8 <mg_json_get_num+0x72>
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	6979      	ldr	r1, [r7, #20]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fb1d 	bl	8007408 <mg_atod>
 8007dce:	eeb0 7b40 	vmov.f64	d7, d0
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bf14      	ite	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	2300      	moveq	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3724      	adds	r7, #36	@ 0x24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd90      	pop	{r4, r7, pc}

08007df0 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	f107 0408 	add.w	r4, r7, #8
 8007dfa:	e884 0003 	stmia.w	r4, {r0, r1}
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	2300      	movs	r3, #0
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	f107 0108 	add.w	r1, r7, #8
 8007e0e:	c903      	ldmia	r1, {r0, r1}
 8007e10:	f7ff fc4a 	bl	80076a8 <mg_json_get>
 8007e14:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	db1b      	blt.n	8007e54 <mg_json_get_bool+0x64>
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b74      	cmp	r3, #116	@ 0x74
 8007e26:	d005      	beq.n	8007e34 <mg_json_get_bool+0x44>
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b66      	cmp	r3, #102	@ 0x66
 8007e32:	d10f      	bne.n	8007e54 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <mg_json_get_bool+0x60>
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b74      	cmp	r3, #116	@ 0x74
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	701a      	strb	r2, [r3, #0]
    found = 1;
 8007e50:	2301      	movs	r3, #1
 8007e52:	617b      	str	r3, [r7, #20]
  }
  return found;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd90      	pop	{r4, r7, pc}

08007e68 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08d      	sub	sp, #52	@ 0x34
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	f107 0408 	add.w	r4, r7, #8
 8007e72:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e7e:	2300      	movs	r3, #0
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	e064      	b.n	8007f4e <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	4413      	add	r3, r2
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007e8e:	d12c      	bne.n	8007eea <mg_json_unescape+0x82>
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	1d5a      	adds	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d227      	bcs.n	8007eea <mg_json_unescape+0x82>
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b75      	cmp	r3, #117	@ 0x75
 8007ea6:	d120      	bne.n	8007eea <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	3302      	adds	r3, #2
 8007eae:	18d1      	adds	r1, r2, r3
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f006 ff9b 	bl	800edf2 <mg_str_n>
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	9200      	str	r2, [sp, #0]
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	f107 0114 	add.w	r1, r7, #20
 8007ecc:	c903      	ldmia	r1, {r0, r1}
 8007ece:	f007 f9ce 	bl	800f26e <mg_str_to_num>
 8007ed2:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 8007ed4:	f083 0301 	eor.w	r3, r3, #1
 8007ed8:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <mg_json_unescape+0x7a>
        return false;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e04c      	b.n	8007f7c <mg_json_unescape+0x114>
      i += 5;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	3305      	adds	r3, #5
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee8:	e02b      	b.n	8007f42 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b5c      	cmp	r3, #92	@ 0x5c
 8007ef4:	d11d      	bne.n	8007f32 <mg_json_unescape+0xca>
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d218      	bcs.n	8007f32 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	3301      	adds	r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fa07 	bl	8007320 <json_esc>
 8007f12:	4603      	mov	r3, r0
 8007f14:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 8007f16:	7ffb      	ldrb	r3, [r7, #31]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <mg_json_unescape+0xb8>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e02d      	b.n	8007f7c <mg_json_unescape+0x114>
      to[j] = c;
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	4413      	add	r3, r2
 8007f26:	7ffa      	ldrb	r2, [r7, #31]
 8007f28:	701a      	strb	r2, [r3, #0]
      i++;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8007f30:	e007      	b.n	8007f42 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	441a      	add	r2, r3
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	440b      	add	r3, r1
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	3301      	adds	r3, #1
 8007f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d203      	bcs.n	8007f5e <mg_json_unescape+0xf6>
 8007f56:	6a3a      	ldr	r2, [r7, #32]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d392      	bcc.n	8007e84 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8007f5e:	6a3a      	ldr	r2, [r7, #32]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d301      	bcc.n	8007f6a <mg_json_unescape+0x102>
 8007f66:	2300      	movs	r3, #0
 8007f68:	e008      	b.n	8007f7c <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <mg_json_unescape+0x112>
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	4413      	add	r3, r2
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
  return true;
 8007f7a:	2301      	movs	r3, #1
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	372c      	adds	r7, #44	@ 0x2c
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd90      	pop	{r4, r7, pc}

08007f84 <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8007f84:	b590      	push	{r4, r7, lr}
 8007f86:	b089      	sub	sp, #36	@ 0x24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	f107 0408 	add.w	r4, r7, #8
 8007f8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 8007f9a:	f107 0310 	add.w	r3, r7, #16
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	f107 0108 	add.w	r1, r7, #8
 8007fa4:	c903      	ldmia	r1, {r0, r1}
 8007fa6:	f7ff fede 	bl	8007d66 <mg_json_get_num>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <mg_json_get_long+0x3a>
 8007fb0:	ed97 7b04 	vldr	d7, [r7, #16]
 8007fb4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007fb8:	ee17 3a90 	vmov	r3, s15
 8007fbc:	61fb      	str	r3, [r7, #28]
  return result;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3724      	adds	r7, #36	@ 0x24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd90      	pop	{r4, r7, pc}

08007fc8 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8007fd2:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <logc+0x20>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a05      	ldr	r2, [pc, #20]	@ (8007fec <logc+0x24>)
 8007fd8:	6811      	ldr	r1, [r2, #0]
 8007fda:	79fa      	ldrb	r2, [r7, #7]
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4798      	blx	r3
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	24000244 	.word	0x24000244
 8007fec:	24000d8c 	.word	0x24000d8c

08007ff0 <logs>:

static void logs(const char *buf, size_t len) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e009      	b.n	8008014 <logs+0x24>
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ffdd 	bl	8007fc8 <logc>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3301      	adds	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d3f1      	bcc.n	8008000 <logs+0x10>
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b099      	sub	sp, #100	@ 0x64
 800802c:	af06      	add	r7, sp, #24
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 8008036:	212f      	movs	r1, #47	@ 0x2f
 8008038:	68b8      	ldr	r0, [r7, #8]
 800803a:	f01c ff49 	bl	8024ed0 <strrchr>
 800803e:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 8008040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008042:	2b00      	cmp	r3, #0
 8008044:	d104      	bne.n	8008050 <mg_log_prefix+0x28>
 8008046:	215c      	movs	r1, #92	@ 0x5c
 8008048:	68b8      	ldr	r0, [r7, #8]
 800804a:	f01c ff41 	bl	8024ed0 <strrchr>
 800804e:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8008050:	f7f8 ff96 	bl	8000f80 <mg_millis>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800805a:	2900      	cmp	r1, #0
 800805c:	d002      	beq.n	8008064 <mg_log_prefix+0x3c>
 800805e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008060:	3101      	adds	r1, #1
 8008062:	e000      	b.n	8008066 <mg_log_prefix+0x3e>
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	f107 0414 	add.w	r4, r7, #20
 800806a:	6838      	ldr	r0, [r7, #0]
 800806c:	9005      	str	r0, [sp, #20]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	9004      	str	r0, [sp, #16]
 8008072:	9103      	str	r1, [sp, #12]
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	9102      	str	r1, [sp, #8]
 8008078:	e9cd 2300 	strd	r2, r3, [sp]
 800807c:	4a11      	ldr	r2, [pc, #68]	@ (80080c4 <mg_log_prefix+0x9c>)
 800807e:	2129      	movs	r1, #41	@ 0x29
 8008080:	4620      	mov	r0, r4
 8008082:	f005 fb87 	bl	800d794 <mg_snprintf>
 8008086:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8008088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800808a:	2b27      	cmp	r3, #39	@ 0x27
 800808c:	d90a      	bls.n	80080a4 <mg_log_prefix+0x7c>
 800808e:	2327      	movs	r3, #39	@ 0x27
 8008090:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 8008092:	e007      	b.n	80080a4 <mg_log_prefix+0x7c>
 8008094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	643a      	str	r2, [r7, #64]	@ 0x40
 800809a:	3348      	adds	r3, #72	@ 0x48
 800809c:	443b      	add	r3, r7
 800809e:	2220      	movs	r2, #32
 80080a0:	f803 2c34 	strb.w	r2, [r3, #-52]
 80080a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a6:	2b28      	cmp	r3, #40	@ 0x28
 80080a8:	d9f4      	bls.n	8008094 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 80080aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ac:	1e5a      	subs	r2, r3, #1
 80080ae:	f107 0314 	add.w	r3, r7, #20
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff ff9b 	bl	8007ff0 <logs>
}
 80080ba:	bf00      	nop
 80080bc:	374c      	adds	r7, #76	@ 0x4c
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd90      	pop	{r4, r7, pc}
 80080c2:	bf00      	nop
 80080c4:	08029a54 	.word	0x08029a54

080080c8 <mg_log>:

void mg_log(const char *fmt, ...) {
 80080c8:	b40f      	push	{r0, r1, r2, r3}
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 80080d0:	f107 0314 	add.w	r3, r7, #20
 80080d4:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80080d6:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <mg_log+0x34>)
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	4b09      	ldr	r3, [pc, #36]	@ (8008100 <mg_log+0x38>)
 80080dc:	6819      	ldr	r1, [r3, #0]
 80080de:	1d3b      	adds	r3, r7, #4
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	f7fb f965 	bl	80033b0 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 80080e6:	2102      	movs	r1, #2
 80080e8:	4806      	ldr	r0, [pc, #24]	@ (8008104 <mg_log+0x3c>)
 80080ea:	f7ff ff81 	bl	8007ff0 <logs>
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080f8:	b004      	add	sp, #16
 80080fa:	4770      	bx	lr
 80080fc:	24000244 	.word	0x24000244
 8008100:	24000d8c 	.word	0x24000d8c
 8008104:	08028ed8 	.word	0x08028ed8

08008108 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b09      	cmp	r3, #9
 8008114:	d804      	bhi.n	8008120 <nibble+0x18>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	3330      	adds	r3, #48	@ 0x30
 800811c:	b2db      	uxtb	r3, r3
 800811e:	e003      	b.n	8008128 <nibble+0x20>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	3357      	adds	r3, #87	@ 0x57
 8008126:	b2db      	uxtb	r3, r3
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	@ 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8008148:	2300      	movs	r3, #0
 800814a:	623b      	str	r3, [r7, #32]
 800814c:	e07a      	b.n	8008244 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	2b00      	cmp	r3, #0
 8008156:	d13a      	bne.n	80081ce <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00f      	beq.n	800817e <mg_hexdump+0x4a>
 800815e:	2102      	movs	r1, #2
 8008160:	484c      	ldr	r0, [pc, #304]	@ (8008294 <mg_hexdump+0x160>)
 8008162:	f7ff ff45 	bl	8007ff0 <logs>
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	2110      	movs	r1, #16
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ff3f 	bl	8007ff0 <logs>
 8008172:	200a      	movs	r0, #10
 8008174:	f7ff ff28 	bl	8007fc8 <logc>
 8008178:	2300      	movs	r3, #0
 800817a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	0b1b      	lsrs	r3, r3, #12
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff ffbe 	bl	8008108 <nibble>
 800818c:	4603      	mov	r3, r0
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff ff1a 	bl	8007fc8 <logc>
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff ffb3 	bl	8008108 <nibble>
 80081a2:	4603      	mov	r3, r0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff ff0f 	bl	8007fc8 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	091b      	lsrs	r3, r3, #4
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff ffa8 	bl	8008108 <nibble>
 80081b8:	4603      	mov	r3, r0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff ff04 	bl	8007fc8 <logc>
 80081c0:	2030      	movs	r0, #48	@ 0x30
 80081c2:	f7ff ff01 	bl	8007fc8 <logc>
 80081c6:	2103      	movs	r1, #3
 80081c8:	4833      	ldr	r0, [pc, #204]	@ (8008298 <mg_hexdump+0x164>)
 80081ca:	f7ff ff11 	bl	8007ff0 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	4413      	add	r3, r2
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	091b      	lsrs	r3, r3, #4
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff ff94 	bl	8008108 <nibble>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fef0 	bl	8007fc8 <logc>
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	4413      	add	r3, r2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff ff87 	bl	8008108 <nibble>
 80081fa:	4603      	mov	r3, r0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fee3 	bl	8007fc8 <logc>
    logc(' ');                                         // Space after hex number
 8008202:	2020      	movs	r0, #32
 8008204:	f7ff fee0 	bl	8007fc8 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8008208:	69fa      	ldr	r2, [r7, #28]
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	4413      	add	r3, r2
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b1f      	cmp	r3, #31
 8008212:	d90a      	bls.n	800822a <mg_hexdump+0xf6>
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	4413      	add	r3, r2
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b7e      	cmp	r3, #126	@ 0x7e
 800821e:	d804      	bhi.n	800822a <mg_hexdump+0xf6>
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	4413      	add	r3, r2
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	e000      	b.n	800822c <mg_hexdump+0xf8>
 800822a:	222e      	movs	r2, #46	@ 0x2e
 800822c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008230:	1c59      	adds	r1, r3, #1
 8008232:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8008236:	3328      	adds	r3, #40	@ 0x28
 8008238:	443b      	add	r3, r7
 800823a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	3301      	adds	r3, #1
 8008242:	623b      	str	r3, [r7, #32]
 8008244:	6a3a      	ldr	r2, [r7, #32]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d380      	bcc.n	800814e <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800824c:	e00d      	b.n	800826a <mg_hexdump+0x136>
 800824e:	2103      	movs	r1, #3
 8008250:	4811      	ldr	r0, [pc, #68]	@ (8008298 <mg_hexdump+0x164>)
 8008252:	f7ff fecd 	bl	8007ff0 <logs>
 8008256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8008260:	3328      	adds	r3, #40	@ 0x28
 8008262:	443b      	add	r3, r7
 8008264:	2220      	movs	r2, #32
 8008266:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800826a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800826e:	2b0f      	cmp	r3, #15
 8008270:	d9ed      	bls.n	800824e <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8008272:	2102      	movs	r1, #2
 8008274:	4807      	ldr	r0, [pc, #28]	@ (8008294 <mg_hexdump+0x160>)
 8008276:	f7ff febb 	bl	8007ff0 <logs>
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	2110      	movs	r1, #16
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff feb5 	bl	8007ff0 <logs>
 8008286:	200a      	movs	r0, #10
 8008288:	f7ff fe9e 	bl	8007fc8 <logc>
}
 800828c:	bf00      	nop
 800828e:	3728      	adds	r7, #40	@ 0x28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	08029a68 	.word	0x08029a68
 8008298:	08029a6c 	.word	0x08029a6c

0800829c <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	607b      	str	r3, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	72fb      	strb	r3, [r7, #11]
 80082aa:	4613      	mov	r3, r2
 80082ac:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 80082ae:	f107 0314 	add.w	r3, r7, #20
 80082b2:	3301      	adds	r3, #1
 80082b4:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	b25a      	sxtb	r2, r3
 80082bc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	09db      	lsrs	r3, r3, #7
 80082da:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d006      	beq.n	80082f0 <mg_mqtt_send_header+0x54>
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	701a      	strb	r2, [r3, #0]
    vlen++;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	3301      	adds	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <mg_mqtt_send_header+0x6c>
 80082fc:	f107 0314 	add.w	r3, r7, #20
 8008300:	3305      	adds	r3, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	429a      	cmp	r2, r3
 8008306:	d3df      	bcc.n	80082c8 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8008308:	f107 0314 	add.w	r3, r7, #20
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	461a      	mov	r2, r3
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	4619      	mov	r1, r3
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f004 ff0f 	bl	800d13c <mg_send>
}
 800831e:	bf00      	nop
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 8008332:	1cbb      	adds	r3, r7, #2
 8008334:	2202      	movs	r2, #2
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f004 feff 	bl	800d13c <mg_send>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 8008350:	463b      	mov	r3, r7
 8008352:	2204      	movs	r2, #4
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f004 fef0 	bl	800d13c <mg_send>
}
 800835c:	bf00      	nop
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <varint_size>:

static uint8_t varint_size(size_t length) {
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	3301      	adds	r3, #1
 8008374:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	09db      	lsrs	r3, r3, #7
 800837a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f6      	bne.n	8008370 <varint_size+0xc>
  return bytes_needed;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a6:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	09db      	lsrs	r3, r3, #7
 80083ac:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <encode_varint+0x2c>
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083ba:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	60fa      	str	r2, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	4413      	add	r3, r2
 80083c6:	7afa      	ldrb	r2, [r7, #11]
 80083c8:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e6      	bne.n	800839e <encode_varint+0xe>

  return len;
 80083d0:	68fb      	ldr	r3, [r7, #12]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80083de:	b480      	push	{r7}
 80083e0:	b089      	sub	sp, #36	@ 0x24
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 80083ea:	2301      	movs	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
  *value = 0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80083f4:	2300      	movs	r3, #0
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	e01c      	b.n	8008434 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800840e:	69f9      	ldr	r1, [r7, #28]
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	441a      	add	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	01db      	lsls	r3, r3, #7
 800841e:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8008420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008424:	2b00      	cmp	r3, #0
 8008426:	db02      	blt.n	800842e <decode_varint+0x50>
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	3301      	adds	r3, #1
 800842c:	e00a      	b.n	8008444 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	3301      	adds	r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d803      	bhi.n	8008442 <decode_varint+0x64>
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d3db      	bcc.n	80083fa <decode_varint+0x1c>
  }

  return 0;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3724      	adds	r7, #36	@ 0x24
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 800845a:	231b      	movs	r3, #27
 800845c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	e00f      	b.n	8008484 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8008464:	4a0d      	ldr	r2, [pc, #52]	@ (800849c <mqtt_prop_type_by_id+0x4c>)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800846c:	79fa      	ldrb	r2, [r7, #7]
 800846e:	429a      	cmp	r2, r3
 8008470:	d105      	bne.n	800847e <mqtt_prop_type_by_id+0x2e>
 8008472:	4a0a      	ldr	r2, [pc, #40]	@ (800849c <mqtt_prop_type_by_id+0x4c>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	4413      	add	r3, r2
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	e008      	b.n	8008490 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	d3eb      	bcc.n	8008464 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	0802be14 	.word	0x0802be14

080084a0 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e07a      	b.n	80085aa <get_properties_length+0x10a>
    size++;  // identifier
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4613      	mov	r3, r2
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	4413      	add	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	461a      	mov	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4413      	add	r3, r2
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff ffbf 	bl	8008450 <mqtt_prop_type_by_id>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b06      	cmp	r3, #6
 80084d6:	d863      	bhi.n	80085a0 <get_properties_length+0x100>
 80084d8:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <get_properties_length+0x40>)
 80084da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084de:	bf00      	nop
 80084e0:	08008599 	.word	0x08008599
 80084e4:	0800852d 	.word	0x0800852d
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	08008549 	.word	0x08008549
 80084f0:	08008565 	.word	0x08008565
 80084f4:	08008589 	.word	0x08008589
 80084f8:	08008591 	.word	0x08008591
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4613      	mov	r3, r2
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	4413      	add	r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	461a      	mov	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4413      	add	r3, r2
 800850c:	6959      	ldr	r1, [r3, #20]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4613      	mov	r3, r2
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	4413      	add	r3, r2
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	18ca      	adds	r2, r1, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4413      	add	r3, r2
 8008526:	3304      	adds	r3, #4
 8008528:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 800852a:	e03b      	b.n	80085a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	461a      	mov	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4413      	add	r3, r2
 800853c:	695a      	ldr	r2, [r3, #20]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	3302      	adds	r3, #2
 8008544:	60bb      	str	r3, [r7, #8]
        break;
 8008546:	e02d      	b.n	80085a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4613      	mov	r3, r2
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	4413      	add	r3, r2
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4413      	add	r3, r2
 8008558:	695a      	ldr	r2, [r3, #20]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4413      	add	r3, r2
 800855e:	3302      	adds	r3, #2
 8008560:	60bb      	str	r3, [r7, #8]
        break;
 8008562:	e01f      	b.n	80085a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4613      	mov	r3, r2
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	4413      	add	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fef4 	bl	8008364 <varint_size>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4413      	add	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]
        break;
 8008586:	e00d      	b.n	80085a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3304      	adds	r3, #4
 800858c:	60bb      	str	r3, [r7, #8]
        break;
 800858e:	e009      	b.n	80085a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	3302      	adds	r3, #2
 8008594:	60bb      	str	r3, [r7, #8]
        break;
 8008596:	e005      	b.n	80085a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	3301      	adds	r3, #1
 800859c:	60bb      	str	r3, [r7, #8]
        break;
 800859e:	e001      	b.n	80085a4 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	e007      	b.n	80085b4 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d380      	bcc.n	80084b4 <get_properties_length+0x14>
    }
  }

  return size;
 80085b2:	68bb      	ldr	r3, [r7, #8]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff ff69 	bl	80084a0 <get_properties_length>
 80085ce:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fec7 	bl	8008364 <varint_size>
 80085d6:	4603      	mov	r3, r0
 80085d8:	461a      	mov	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
  return size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	@ 0x28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	68b8      	ldr	r0, [r7, #8]
 80085fc:	f7ff ff50 	bl	80084a0 <get_properties_length>
 8008600:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8008602:	2300      	movs	r3, #0
 8008604:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 800860a:	f107 0314 	add.w	r3, r7, #20
 800860e:	6a39      	ldr	r1, [r7, #32]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff febd 	bl	8008390 <encode_varint>
 8008616:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 8008618:	f107 0314 	add.w	r3, r7, #20
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	4619      	mov	r1, r3
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f004 fd8b 	bl	800d13c <mg_send>
  for (i = 0; i < nprops; i++) {
 8008626:	2300      	movs	r3, #0
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24
 800862a:	e11f      	b.n	800886c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 800862c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800862e:	4613      	mov	r3, r2
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4413      	add	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	461a      	mov	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4413      	add	r3, r2
 800863c:	2201      	movs	r2, #1
 800863e:	4619      	mov	r1, r3
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f004 fd7b 	bl	800d13c <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8008646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	461a      	mov	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4413      	add	r3, r2
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fef9 	bl	8008450 <mqtt_prop_type_by_id>
 800865e:	4603      	mov	r3, r0
 8008660:	2b06      	cmp	r3, #6
 8008662:	f200 8100 	bhi.w	8008866 <mg_send_mqtt_properties+0x27a>
 8008666:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <mg_send_mqtt_properties+0x80>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	0800872b 	.word	0x0800872b
 8008670:	08008793 	.word	0x08008793
 8008674:	08008689 	.word	0x08008689
 8008678:	080087e5 	.word	0x080087e5
 800867c:	08008837 	.word	0x08008837
 8008680:	0800876f 	.word	0x0800876f
 8008684:	08008749 	.word	0x08008749
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8008688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800868a:	4613      	mov	r3, r2
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	4413      	add	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	461a      	mov	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	b29b      	uxth	r3, r3
 800869c:	4618      	mov	r0, r3
 800869e:	f00f fa46 	bl	8017b2e <mg_ntohs>
 80086a2:	4603      	mov	r3, r0
 80086a4:	4619      	mov	r1, r3
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff fe3d 	bl	8008326 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80086ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ae:	4613      	mov	r3, r2
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	4413      	add	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	461a      	mov	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4413      	add	r3, r2
 80086bc:	6899      	ldr	r1, [r3, #8]
 80086be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c0:	4613      	mov	r3, r2
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	4413      	add	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	461a      	mov	r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4413      	add	r3, r2
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	461a      	mov	r2, r3
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f004 fd32 	bl	800d13c <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80086d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086da:	4613      	mov	r3, r2
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	4413      	add	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	461a      	mov	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4413      	add	r3, r2
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4618      	mov	r0, r3
 80086ee:	f00f fa1e 	bl	8017b2e <mg_ntohs>
 80086f2:	4603      	mov	r3, r0
 80086f4:	4619      	mov	r1, r3
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7ff fe15 	bl	8008326 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80086fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086fe:	4613      	mov	r3, r2
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	4413      	add	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	461a      	mov	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4413      	add	r3, r2
 800870c:	6919      	ldr	r1, [r3, #16]
 800870e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008710:	4613      	mov	r3, r2
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	4413      	add	r3, r2
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	461a      	mov	r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	461a      	mov	r2, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f004 fd0a 	bl	800d13c <mg_send>
        break;
 8008728:	e09d      	b.n	8008866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 800872a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800872c:	4613      	mov	r3, r2
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	4413      	add	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	461a      	mov	r2, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	2201      	movs	r2, #1
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f004 fcfb 	bl	800d13c <mg_send>
        break;
 8008746:	e08e      	b.n	8008866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8008748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874a:	4613      	mov	r3, r2
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4413      	add	r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	461a      	mov	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4413      	add	r3, r2
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	b29b      	uxth	r3, r3
 800875c:	4618      	mov	r0, r3
 800875e:	f00f f9e6 	bl	8017b2e <mg_ntohs>
 8008762:	4603      	mov	r3, r0
 8008764:	4619      	mov	r1, r3
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f7ff fddd 	bl	8008326 <mg_send_u16>
        break;
 800876c:	e07b      	b.n	8008866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 800876e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008770:	4613      	mov	r3, r2
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	4413      	add	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	461a      	mov	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4618      	mov	r0, r3
 8008782:	f00f f9bb 	bl	8017afc <mg_ntohl>
 8008786:	4603      	mov	r3, r0
 8008788:	4619      	mov	r1, r3
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7ff fddb 	bl	8008346 <mg_send_u32>
        break;
 8008790:	e069      	b.n	8008866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8008792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008794:	4613      	mov	r3, r2
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	4413      	add	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	461a      	mov	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4413      	add	r3, r2
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	4618      	mov	r0, r3
 80087a8:	f00f f9c1 	bl	8017b2e <mg_ntohs>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4619      	mov	r1, r3
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff fdb8 	bl	8008326 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80087b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b8:	4613      	mov	r3, r2
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	4413      	add	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	461a      	mov	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	6919      	ldr	r1, [r3, #16]
 80087c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ca:	4613      	mov	r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	461a      	mov	r2, r3
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4413      	add	r3, r2
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	461a      	mov	r2, r3
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f004 fcad 	bl	800d13c <mg_send>
        break;
 80087e2:	e040      	b.n	8008866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80087e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e6:	4613      	mov	r3, r2
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4413      	add	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	461a      	mov	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4413      	add	r3, r2
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4618      	mov	r0, r3
 80087fa:	f00f f998 	bl	8017b2e <mg_ntohs>
 80087fe:	4603      	mov	r3, r0
 8008800:	4619      	mov	r1, r3
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fd8f 	bl	8008326 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8008808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880a:	4613      	mov	r3, r2
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	4413      	add	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	461a      	mov	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4413      	add	r3, r2
 8008818:	6919      	ldr	r1, [r3, #16]
 800881a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800881c:	4613      	mov	r3, r2
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	4413      	add	r3, r2
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	461a      	mov	r2, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4413      	add	r3, r2
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	461a      	mov	r2, r3
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f004 fc84 	bl	800d13c <mg_send>
        break;
 8008834:	e017      	b.n	8008866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 8008836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008838:	4613      	mov	r3, r2
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	461a      	mov	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	4413      	add	r3, r2
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	f107 0318 	add.w	r3, r7, #24
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fd9e 	bl	8008390 <encode_varint>
 8008854:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 8008856:	f107 0318 	add.w	r3, r7, #24
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	4619      	mov	r1, r3
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f004 fc6c 	bl	800d13c <mg_send>
        break;
 8008864:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	3301      	adds	r3, #1
 800886a:	627b      	str	r3, [r7, #36]	@ 0x24
 800886c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	f4ff aedb 	bcc.w	800862c <mg_send_mqtt_properties+0x40>
    }
  }
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	3728      	adds	r7, #40	@ 0x28
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b08e      	sub	sp, #56	@ 0x38
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	3210      	adds	r2, #16
 8008892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008896:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 800889a:	230c      	movs	r3, #12
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 800889e:	2300      	movs	r3, #0
 80088a0:	733b      	strb	r3, [r7, #12]
 80088a2:	2304      	movs	r3, #4
 80088a4:	737b      	strb	r3, [r7, #13]
 80088a6:	234d      	movs	r3, #77	@ 0x4d
 80088a8:	73bb      	strb	r3, [r7, #14]
 80088aa:	2351      	movs	r3, #81	@ 0x51
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	2354      	movs	r3, #84	@ 0x54
 80088b0:	743b      	strb	r3, [r7, #16]
 80088b2:	2354      	movs	r3, #84	@ 0x54
 80088b4:	747b      	strb	r3, [r7, #17]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80088bc:	74bb      	strb	r3, [r7, #18]
 80088be:	2300      	movs	r3, #0
 80088c0:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d110      	bne.n	80088ea <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 80088c8:	f107 031c 	add.w	r3, r7, #28
 80088cc:	2114      	movs	r1, #20
 80088ce:	4618      	mov	r0, r3
 80088d0:	f00f f8ce 	bl	8017a70 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 80088da:	f107 0314 	add.w	r3, r7, #20
 80088de:	f107 021c 	add.w	r2, r7, #28
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f006 fa67 	bl	800edb8 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80088ea:	7cbb      	ldrb	r3, [r7, #18]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <mg_mqtt_login+0x74>
 80088f0:	2304      	movs	r3, #4
 80088f2:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 80088f4:	7cbb      	ldrb	r3, [r7, #18]
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2d9      	uxtb	r1, r3
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008906:	f361 0382 	bfi	r3, r1, #2, #1
 800890a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 0318 	and.w	r3, r3, #24
 800891c:	b2db      	uxtb	r3, r3
 800891e:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892e:	4413      	add	r3, r2
 8008930:	3302      	adds	r3, #2
 8008932:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 8008934:	7cfb      	ldrb	r3, [r7, #19]
 8008936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800893a:	b2db      	uxtb	r3, r3
 800893c:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894c:	4413      	add	r3, r2
 800894e:	3302      	adds	r3, #2
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 8008952:	7cfb      	ldrb	r3, [r7, #19]
 8008954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008958:	b2db      	uxtb	r3, r3
 800895a:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00d      	beq.n	8008980 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	69da      	ldr	r2, [r3, #28]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896c:	441a      	add	r2, r3
 800896e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008970:	4413      	add	r3, r2
 8008972:	3304      	adds	r3, #4
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 8008976:	7cfb      	ldrb	r3, [r7, #19]
 8008978:	f043 0304 	orr.w	r3, r3, #4
 800897c:	b2db      	uxtb	r3, r3
 800897e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <mg_mqtt_login+0x110>
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <mg_mqtt_login+0x11a>
 8008990:	7cfb      	ldrb	r3, [r7, #19]
 8008992:	f043 0302 	orr.w	r3, r3, #2
 8008996:	b2db      	uxtb	r3, r3
 8008998:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <mg_mqtt_login+0x12e>
 80089a4:	7cfb      	ldrb	r3, [r7, #19]
 80089a6:	f043 0320 	orr.w	r3, r3, #32
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b2:	4413      	add	r3, r2
 80089b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01c      	beq.n	8008a00 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7ff fdf3 	bl	80085bc <get_props_size>
 80089d6:	4602      	mov	r2, r0
 80089d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089da:	4413      	add	r3, r2
 80089dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 80089de:	7cfb      	ldrb	r3, [r7, #19]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7ff fde2 	bl	80085bc <get_props_size>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fc:	4413      	add	r3, r2
 80089fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8008a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a02:	2200      	movs	r2, #0
 8008a04:	2101      	movs	r1, #1
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fc48 	bl	800829c <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8008a0c:	f107 030c 	add.w	r3, r7, #12
 8008a10:	2208      	movs	r2, #8
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f004 fb91 	bl	800d13c <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f00f f885 	bl	8017b2e <mg_ntohs>
 8008a24:	4603      	mov	r3, r0
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fc7c 	bl	8008326 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d007      	beq.n	8008a4e <mg_mqtt_login+0x1ce>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a46:	461a      	mov	r2, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff fdcf 	bl	80085ec <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4618      	mov	r0, r3
 8008a54:	f00f f86b 	bl	8017b2e <mg_ntohs>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fc62 	bl	8008326 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f004 fb67 	bl	800d13c <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 8008a6e:	7cfb      	ldrb	r3, [r7, #19]
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d035      	beq.n	8008ae4 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008a7e:	f003 0304 	and.w	r3, r3, #4
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a90:	461a      	mov	r2, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fdaa 	bl	80085ec <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f00f f845 	bl	8017b2e <mg_ntohs>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fc3c 	bl	8008326 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6999      	ldr	r1, [r3, #24]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f004 fb3f 	bl	800d13c <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f00f f832 	bl	8017b2e <mg_ntohs>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff fc29 	bl	8008326 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6a19      	ldr	r1, [r3, #32]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008adc:	461a      	mov	r2, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f004 fb2c 	bl	800d13c <mg_send>
  }
  if (opts->user.len > 0) {
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d012      	beq.n	8008b12 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	4618      	mov	r0, r3
 8008af4:	f00f f81b 	bl	8017b2e <mg_ntohs>
 8008af8:	4603      	mov	r3, r0
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff fc12 	bl	8008326 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f004 fb15 	bl	800d13c <mg_send>
  }
  if (opts->pass.len > 0) {
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d012      	beq.n	8008b40 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4618      	mov	r0, r3
 8008b22:	f00f f804 	bl	8017b2e <mg_ntohs>
 8008b26:	4603      	mov	r3, r0
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff fbfb 	bl	8008326 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	6899      	ldr	r1, [r3, #8]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f004 fafe 	bl	800d13c <mg_send>
  }
}
 8008b40:	bf00      	nop
 8008b42:	3738      	adds	r7, #56	@ 0x38
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008b48:	b590      	push	{r4, r7, lr}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b56:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f003 0306 	and.w	r3, r3, #6
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	d001      	beq.n	8008b76 <mg_mqtt_pub+0x2e>
 8008b72:	2201      	movs	r2, #1
 8008b74:	e000      	b.n	8008b78 <mg_mqtt_pub+0x30>
 8008b76:	2200      	movs	r2, #0
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	69da      	ldr	r2, [r3, #28]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	4413      	add	r3, r2
 8008b88:	3302      	adds	r3, #2
 8008b8a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8008b8c:	4b51      	ldr	r3, [pc, #324]	@ (8008cd4 <mg_mqtt_pub+0x18c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	dd19      	ble.n	8008bc8 <mg_mqtt_pub+0x80>
 8008b94:	4b50      	ldr	r3, [pc, #320]	@ (8008cd8 <mg_mqtt_pub+0x190>)
 8008b96:	f241 12f9 	movw	r2, #4601	@ 0x11f9
 8008b9a:	4950      	ldr	r1, [pc, #320]	@ (8008cdc <mg_mqtt_pub+0x194>)
 8008b9c:	2003      	movs	r0, #3
 8008b9e:	f7ff fa43 	bl	8008028 <mg_log_prefix>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	461c      	mov	r4, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	699a      	ldr	r2, [r3, #24]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	9000      	str	r0, [sp, #0]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4847      	ldr	r0, [pc, #284]	@ (8008ce0 <mg_mqtt_pub+0x198>)
 8008bc4:	f7ff fa80 	bl	80080c8 <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <mg_mqtt_pub+0x90>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3302      	adds	r3, #2
 8008bd6:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008bde:	f003 0304 	and.w	r3, r3, #4
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <mg_mqtt_pub+0xb8>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7ff fce2 	bl	80085bc <get_props_size>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d006      	beq.n	8008c18 <mg_mqtt_pub+0xd0>
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <mg_mqtt_pub+0xd0>
 8008c10:	7b7b      	ldrb	r3, [r7, #13]
 8008c12:	f043 0308 	orr.w	r3, r3, #8
 8008c16:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8008c18:	7b7a      	ldrb	r2, [r7, #13]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2103      	movs	r1, #3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff fb3c 	bl	800829c <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00e ff7f 	bl	8017b2e <mg_ntohs>
 8008c30:	4603      	mov	r3, r0
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff fb76 	bl	8008326 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6999      	ldr	r1, [r3, #24]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f004 fa79 	bl	800d13c <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01e      	beq.n	8008c92 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d112      	bne.n	8008c80 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c60:	3201      	adds	r2, #1
 8008c62:	b292      	uxth	r2, r2
 8008c64:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8008c66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d105      	bne.n	8008c78 <mg_mqtt_pub+0x130>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c72:	3201      	adds	r2, #1
 8008c74:	b292      	uxth	r2, r2
 8008c76:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c7e:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 8008c80:	89fb      	ldrh	r3, [r7, #14]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f00e ff53 	bl	8017b2e <mg_ntohs>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff fb4a 	bl	8008326 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d007      	beq.n	8008cb2 <mg_mqtt_pub+0x16a>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008caa:	461a      	mov	r2, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff fc9d 	bl	80085ec <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d007      	beq.n	8008cca <mg_mqtt_pub+0x182>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6a19      	ldr	r1, [r3, #32]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f004 fa39 	bl	800d13c <mg_send>
  return id;
 8008cca:	89fb      	ldrh	r3, [r7, #14]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd90      	pop	{r4, r7, pc}
 8008cd4:	24000240 	.word	0x24000240
 8008cd8:	0802c0ec 	.word	0x0802c0ec
 8008cdc:	08028ac4 	.word	0x08028ac4
 8008ce0:	08029a74 	.word	0x08029a74

08008ce4 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d009      	beq.n	8008d20 <mg_mqtt_sub+0x3c>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7ff fc50 	bl	80085bc <get_props_size>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	e000      	b.n	8008d22 <mg_mqtt_sub+0x3e>
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	69da      	ldr	r2, [r3, #28]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3305      	adds	r3, #5
 8008d2e:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2202      	movs	r2, #2
 8008d34:	2108      	movs	r1, #8
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff fab0 	bl	800829c <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008d42:	3201      	adds	r2, #1
 8008d44:	b292      	uxth	r2, r2
 8008d46:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8008d48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <mg_mqtt_sub+0x76>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008d54:	3201      	adds	r2, #1
 8008d56:	b292      	uxth	r2, r2
 8008d58:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d60:	4618      	mov	r0, r3
 8008d62:	f00e fee4 	bl	8017b2e <mg_ntohs>
 8008d66:	4603      	mov	r3, r0
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff fadb 	bl	8008326 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d007      	beq.n	8008d90 <mg_mqtt_sub+0xac>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fc2e 	bl	80085ec <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4618      	mov	r0, r3
 8008d98:	f00e fec9 	bl	8017b2e <mg_ntohs>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fac0 	bl	8008326 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6999      	ldr	r1, [r3, #24]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f004 f9c3 	bl	800d13c <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8008db6:	f107 030f 	add.w	r3, r7, #15
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f004 f9bc 	bl	800d13c <mg_send>
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	@ 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	2300      	movs	r3, #0
 8008de8:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 8008dea:	2228      	movs	r2, #40	@ 0x28
 8008dec:	2100      	movs	r1, #0
 8008dee:	6838      	ldr	r0, [r7, #0]
 8008df0:	f01c f834 	bl	8024e5c <memset>
  m->dgram.buf = (char *) buf;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d801      	bhi.n	8008e04 <mg_mqtt_parse+0x38>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e104      	b.n	800900e <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	091b      	lsrs	r3, r3, #4
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 8008e30:	e01f      	b.n	8008e72 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	623a      	str	r2, [r7, #32]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8008e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e42:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4413      	add	r3, r2
 8008e58:	61fb      	str	r3, [r7, #28]
    len_len++;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 8008e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da0c      	bge.n	8008e82 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d901      	bls.n	8008e72 <mg_mqtt_parse+0xa6>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0cd      	b.n	800900e <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 8008e72:	6a3a      	ldr	r2, [r7, #32]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d8d8      	bhi.n	8008e32 <mg_mqtt_parse+0x66>
 8008e80:	e000      	b.n	8008e84 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 8008e82:	bf00      	nop
  }
  end = p + n;
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8008e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	db05      	blt.n	8008ea0 <mg_mqtt_parse+0xd4>
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4413      	add	r3, r2
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d901      	bls.n	8008ea4 <mg_mqtt_parse+0xd8>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e0b4      	b.n	800900e <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	7e9b      	ldrb	r3, [r3, #26]
 8008eb4:	2b0b      	cmp	r3, #11
 8008eb6:	f300 80a8 	bgt.w	800900a <mg_mqtt_parse+0x23e>
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	da10      	bge.n	8008ee0 <mg_mqtt_parse+0x114>
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d002      	beq.n	8008ec8 <mg_mqtt_parse+0xfc>
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d024      	beq.n	8008f10 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 8008ec6:	e0a0      	b.n	800900a <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	dc01      	bgt.n	8008ed6 <mg_mqtt_parse+0x10a>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e09b      	b.n	800900e <mg_mqtt_parse+0x242>
      m->ack = p[1];
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	785a      	ldrb	r2, [r3, #1]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	771a      	strb	r2, [r3, #28]
      break;
 8008ede:	e095      	b.n	800900c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d201      	bcs.n	8008eee <mg_mqtt_parse+0x122>
 8008eea:	2302      	movs	r3, #2
 8008eec:	e08f      	b.n	800900e <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	b21a      	sxth	r2, r3
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b21b      	sxth	r3, r3
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	831a      	strh	r2, [r3, #24]
      p += 2;
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	3302      	adds	r3, #2
 8008f0c:	623b      	str	r3, [r7, #32]
      break;
 8008f0e:	e07d      	b.n	800900c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	3302      	adds	r3, #2
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d201      	bcs.n	8008f1e <mg_mqtt_parse+0x152>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e077      	b.n	800900e <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	021b      	lsls	r3, r3, #8
 8008f24:	b21a      	sxth	r2, r3
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b21b      	sxth	r3, r3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b21b      	sxth	r3, r3
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	1c9a      	adds	r2, r3, #2
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	3302      	adds	r3, #2
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008f4e:	6a3a      	ldr	r2, [r7, #32]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d901      	bls.n	8008f5a <mg_mqtt_parse+0x18e>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e059      	b.n	800900e <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	7edb      	ldrb	r3, [r3, #27]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d016      	beq.n	8008f90 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	3302      	adds	r3, #2
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d201      	bcs.n	8008f70 <mg_mqtt_parse+0x1a4>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e04e      	b.n	800900e <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b21a      	sxth	r2, r3
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b21b      	sxth	r3, r3
 8008f80:	4313      	orrs	r3, r2
 8008f82:	b21b      	sxth	r3, r3
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	831a      	strh	r2, [r3, #24]
        p += 2;
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008f90:	6a3a      	ldr	r2, [r7, #32]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d901      	bls.n	8008f9c <mg_mqtt_parse+0x1d0>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e038      	b.n	800900e <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	d123      	bne.n	8008fea <mg_mqtt_parse+0x21e>
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d91e      	bls.n	8008fea <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	3324      	adds	r3, #36	@ 0x24
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6a38      	ldr	r0, [r7, #32]
 8008fbc:	f7ff fa0f 	bl	80083de <decode_varint>
 8008fc0:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <mg_mqtt_parse+0x200>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e020      	b.n	800900e <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 8008fcc:	6a3a      	ldr	r2, [r7, #32]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	6a3a      	ldr	r2, [r7, #32]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008fea:	6a3a      	ldr	r2, [r7, #32]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d901      	bls.n	8008ff6 <mg_mqtt_parse+0x22a>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e00b      	b.n	800900e <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	461a      	mov	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	60da      	str	r2, [r3, #12]
      break;
 8009008:	e000      	b.n	800900c <mg_mqtt_parse+0x240>
      break;
 800900a:	bf00      	nop
  }
  return MQTT_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3728      	adds	r7, #40	@ 0x28
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8009018:	b590      	push	{r4, r7, lr}
 800901a:	b099      	sub	sp, #100	@ 0x64
 800901c:	af02      	add	r7, sp, #8
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b07      	cmp	r3, #7
 8009028:	f040 8124 	bne.w	8009274 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <mqtt_cb+0x28>
 800903c:	2305      	movs	r3, #5
 800903e:	e000      	b.n	8009042 <mqtt_cb+0x2a>
 8009040:	2304      	movs	r3, #4
 8009042:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800904e:	f107 0314 	add.w	r3, r7, #20
 8009052:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8009056:	f7ff feb9 	bl	8008dcc <mg_mqtt_parse>
 800905a:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 800905c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800905e:	2b02      	cmp	r3, #2
 8009060:	d118      	bne.n	8009094 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8009062:	4b86      	ldr	r3, [pc, #536]	@ (800927c <mqtt_cb+0x264>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	dd0c      	ble.n	8009084 <mqtt_cb+0x6c>
 800906a:	4b85      	ldr	r3, [pc, #532]	@ (8009280 <mqtt_cb+0x268>)
 800906c:	f241 226e 	movw	r2, #4718	@ 0x126e
 8009070:	4984      	ldr	r1, [pc, #528]	@ (8009284 <mqtt_cb+0x26c>)
 8009072:	2001      	movs	r0, #1
 8009074:	f7fe ffd8 	bl	8008028 <mg_log_prefix>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907c:	4619      	mov	r1, r3
 800907e:	4882      	ldr	r0, [pc, #520]	@ (8009288 <mqtt_cb+0x270>)
 8009080:	f7ff f822 	bl	80080c8 <mg_log>
        c->is_closing = 1;
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800908a:	f043 0320 	orr.w	r3, r3, #32
 800908e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 8009092:	e0ef      	b.n	8009274 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 8009094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 80eb 	bne.w	8009272 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 800909c:	4b77      	ldr	r3, [pc, #476]	@ (800927c <mqtt_cb+0x264>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	dd17      	ble.n	80090d4 <mqtt_cb+0xbc>
 80090a4:	4b76      	ldr	r3, [pc, #472]	@ (8009280 <mqtt_cb+0x268>)
 80090a6:	f241 2272 	movw	r2, #4722	@ 0x1272
 80090aa:	4976      	ldr	r1, [pc, #472]	@ (8009284 <mqtt_cb+0x26c>)
 80090ac:	2004      	movs	r0, #4
 80090ae:	f7fe ffbb 	bl	8008028 <mg_log_prefix>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80090b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090ba:	4618      	mov	r0, r3
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	461c      	mov	r4, r3
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	461a      	mov	r2, r3
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	9200      	str	r2, [sp, #0]
 80090ca:	4623      	mov	r3, r4
 80090cc:	4602      	mov	r2, r0
 80090ce:	486f      	ldr	r0, [pc, #444]	@ (800928c <mqtt_cb+0x274>)
 80090d0:	f7fe fffa 	bl	80080c8 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 80090d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090d8:	3b02      	subs	r3, #2
 80090da:	2b04      	cmp	r3, #4
 80090dc:	f200 80ba 	bhi.w	8009254 <mqtt_cb+0x23c>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <mqtt_cb+0xd0>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	080090fd 	.word	0x080090fd
 80090ec:	08009171 	.word	0x08009171
 80090f0:	08009255 	.word	0x08009255
 80090f4:	080091fb 	.word	0x080091fb
 80090f8:	08009227 	.word	0x08009227
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 80090fc:	f107 0314 	add.w	r3, r7, #20
 8009100:	331c      	adds	r3, #28
 8009102:	461a      	mov	r2, r3
 8009104:	2111      	movs	r1, #17
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7f9 fc82 	bl	8002a10 <mg_call>
            if (mm.ack == 0) {
 800910c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009110:	2b00      	cmp	r3, #0
 8009112:	d112      	bne.n	800913a <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 8009114:	4b59      	ldr	r3, [pc, #356]	@ (800927c <mqtt_cb+0x264>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b02      	cmp	r3, #2
 800911a:	f340 809a 	ble.w	8009252 <mqtt_cb+0x23a>
 800911e:	4b58      	ldr	r3, [pc, #352]	@ (8009280 <mqtt_cb+0x268>)
 8009120:	f241 2278 	movw	r2, #4728	@ 0x1278
 8009124:	4957      	ldr	r1, [pc, #348]	@ (8009284 <mqtt_cb+0x26c>)
 8009126:	2003      	movs	r0, #3
 8009128:	f7fe ff7e 	bl	8008028 <mg_log_prefix>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009130:	4619      	mov	r1, r3
 8009132:	4857      	ldr	r0, [pc, #348]	@ (8009290 <mqtt_cb+0x278>)
 8009134:	f7fe ffc8 	bl	80080c8 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 8009138:	e08b      	b.n	8009252 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 800913a:	4b50      	ldr	r3, [pc, #320]	@ (800927c <mqtt_cb+0x264>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd0e      	ble.n	8009160 <mqtt_cb+0x148>
 8009142:	4b4f      	ldr	r3, [pc, #316]	@ (8009280 <mqtt_cb+0x268>)
 8009144:	f241 227a 	movw	r2, #4730	@ 0x127a
 8009148:	494e      	ldr	r1, [pc, #312]	@ (8009284 <mqtt_cb+0x26c>)
 800914a:	2001      	movs	r0, #1
 800914c:	f7fe ff6c 	bl	8008028 <mg_log_prefix>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009154:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009158:	4619      	mov	r1, r3
 800915a:	484e      	ldr	r0, [pc, #312]	@ (8009294 <mqtt_cb+0x27c>)
 800915c:	f7fe ffb4 	bl	80080c8 <mg_log>
              c->is_closing = 1;
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009166:	f043 0320 	orr.w	r3, r3, #32
 800916a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 800916e:	e070      	b.n	8009252 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 8009170:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009174:	2b00      	cmp	r3, #0
 8009176:	d038      	beq.n	80091ea <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 8009178:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800917a:	4618      	mov	r0, r3
 800917c:	f00e fcd7 	bl	8017b2e <mg_ntohs>
 8009180:	4603      	mov	r3, r0
 8009182:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 8009186:	2302      	movs	r3, #2
 8009188:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <mqtt_cb+0x188>
 800919a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800919c:	3302      	adds	r3, #2
 800919e:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 80091a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d101      	bne.n	80091ac <mqtt_cb+0x194>
 80091a8:	2105      	movs	r1, #5
 80091aa:	e000      	b.n	80091ae <mqtt_cb+0x196>
 80091ac:	2104      	movs	r1, #4
 80091ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091b0:	2200      	movs	r2, #0
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff f872 	bl	800829c <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 80091b8:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80091bc:	2202      	movs	r2, #2
 80091be:	4619      	mov	r1, r3
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f003 ffbb 	bl	800d13c <mg_send>

              if (c->is_mqtt5) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 80091dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80091e0:	2202      	movs	r2, #2
 80091e2:	4619      	mov	r1, r3
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f003 ffa9 	bl	800d13c <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 80091ea:	f107 0314 	add.w	r3, r7, #20
 80091ee:	461a      	mov	r2, r3
 80091f0:	2110      	movs	r1, #16
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7f9 fc0c 	bl	8002a10 <mg_call>
            break;
 80091f8:	e02c      	b.n	8009254 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 80091fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80091fc:	4618      	mov	r0, r3
 80091fe:	f00e fc96 	bl	8017b2e <mg_ntohs>
 8009202:	4603      	mov	r3, r0
 8009204:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 8009206:	2302      	movs	r3, #2
 8009208:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 800920a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800920c:	2202      	movs	r2, #2
 800920e:	2106      	movs	r1, #6
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff f843 	bl	800829c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8009216:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800921a:	2202      	movs	r2, #2
 800921c:	4619      	mov	r1, r3
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f003 ff8c 	bl	800d13c <mg_send>
            break;
 8009224:	e016      	b.n	8009254 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8009226:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009228:	4618      	mov	r0, r3
 800922a:	f00e fc80 	bl	8017b2e <mg_ntohs>
 800922e:	4603      	mov	r3, r0
 8009230:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 8009232:	2302      	movs	r3, #2
 8009234:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8009236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009238:	2200      	movs	r2, #0
 800923a:	2107      	movs	r1, #7
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7ff f82d 	bl	800829c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8009242:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009246:	2202      	movs	r2, #2
 8009248:	4619      	mov	r1, r3
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f003 ff76 	bl	800d13c <mg_send>
            break;
 8009250:	e000      	b.n	8009254 <mqtt_cb+0x23c>
            break;
 8009252:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	461a      	mov	r2, r3
 800925a:	210f      	movs	r1, #15
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7f9 fbd7 	bl	8002a10 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3338      	adds	r3, #56	@ 0x38
 8009266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009268:	2100      	movs	r1, #0
 800926a:	4618      	mov	r0, r3
 800926c:	f7fd ffec 	bl	8007248 <mg_iobuf_del>
    for (;;) {
 8009270:	e6dc      	b.n	800902c <mqtt_cb+0x14>
      } else {
        break;
 8009272:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 8009274:	bf00      	nop
 8009276:	375c      	adds	r7, #92	@ 0x5c
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}
 800927c:	24000240 	.word	0x24000240
 8009280:	0802c0f8 	.word	0x0802c0f8
 8009284:	08028ac4 	.word	0x08028ac4
 8009288:	08029a8c 	.word	0x08029a8c
 800928c:	08029aa8 	.word	0x08029aa8
 8009290:	08029ac8 	.word	0x08029ac8
 8009294:	08029ad8 	.word	0x08029ad8

08009298 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 8009298:	b580      	push	{r7, lr}
 800929a:	b096      	sub	sp, #88	@ 0x58
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 80092a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 fb5f 	bl	8009970 <mg_connect>
 80092b2:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 80092b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d015      	beq.n	80092e6 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 80092ba:	f107 0314 	add.w	r3, r7, #20
 80092be:	2240      	movs	r2, #64	@ 0x40
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f01b fdca 	bl	8024e5c <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <mg_mqtt_connect+0x3c>
 80092ce:	f107 0314 	add.w	r3, r7, #20
 80092d2:	e000      	b.n	80092d6 <mg_mqtt_connect+0x3e>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80092da:	f7ff fad1 	bl	8008880 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 80092de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092e0:	4a03      	ldr	r2, [pc, #12]	@ (80092f0 <mg_mqtt_connect+0x58>)
 80092e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 80092e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3758      	adds	r7, #88	@ 0x58
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08009019 	.word	0x08009019

080092f4 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009304:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4805      	ldr	r0, [pc, #20]	@ (8009328 <mg_vprintf+0x34>)
 8009312:	f7fa f84d 	bl	80033b0 <mg_vxprintf>
  return c->send.len - old;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	1ad3      	subs	r3, r2, r3
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	0800d723 	.word	0x0800d723

0800932c <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800932c:	b40e      	push	{r1, r2, r3}
 800932e:	b580      	push	{r7, lr}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800933a:	f107 0320 	add.w	r3, r7, #32
 800933e:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8009340:	f107 0308 	add.w	r3, r7, #8
 8009344:	461a      	mov	r2, r3
 8009346:	69f9      	ldr	r1, [r7, #28]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ffd3 	bl	80092f4 <mg_vprintf>
 800934e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8009350:	68fb      	ldr	r3, [r7, #12]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800935c:	b003      	add	sp, #12
 800935e:	4770      	bx	lr

08009360 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	e883 0003 	stmia.w	r3, {r0, r1}
 800936e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 8009370:	4811      	ldr	r0, [pc, #68]	@ (80093b8 <mg_atonl+0x58>)
 8009372:	f00e fbc3 	bl	8017afc <mg_ntohl>
 8009376:	4603      	mov	r3, r0
 8009378:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800937a:	f107 0318 	add.w	r3, r7, #24
 800937e:	490f      	ldr	r1, [pc, #60]	@ (80093bc <mg_atonl+0x5c>)
 8009380:	4618      	mov	r0, r3
 8009382:	f005 fd19 	bl	800edb8 <mg_str_s>
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	cb0c      	ldmia	r3, {r2, r3}
 800938c:	f107 0108 	add.w	r1, r7, #8
 8009390:	c903      	ldmia	r1, {r0, r1}
 8009392:	f005 fdd4 	bl	800ef3e <mg_strcasecmp>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <mg_atonl+0x40>
 800939c:	2300      	movs	r3, #0
 800939e:	e006      	b.n	80093ae <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	74da      	strb	r2, [r3, #19]
  return true;
 80093ac:	2301      	movs	r3, #1
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	7f000001 	.word	0x7f000001
 80093bc:	08029af8 	.word	0x08029af8

080093c0 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	f107 0308 	add.w	r3, r7, #8
 80093ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80093ce:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <mg_atone+0x1a>
 80093d6:	2300      	movs	r3, #0
 80093d8:	e009      	b.n	80093ee <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2210      	movs	r2, #16
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f01b fd3b 	bl	8024e5c <memset>
  addr->is_ip6 = false;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	74da      	strb	r2, [r3, #19]
  return true;
 80093ec:	2301      	movs	r3, #1
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80093f6:	b480      	push	{r7}
 80093f8:	b089      	sub	sp, #36	@ 0x24
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	f107 0308 	add.w	r3, r7, #8
 8009400:	e883 0003 	stmia.w	r3, {r0, r1}
 8009404:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8009406:	2300      	movs	r3, #0
 8009408:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800940e:	2300      	movs	r3, #0
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	e049      	b.n	80094a8 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b2f      	cmp	r3, #47	@ 0x2f
 800941e:	d925      	bls.n	800946c <mg_aton4+0x76>
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b39      	cmp	r3, #57	@ 0x39
 800942a:	d81f      	bhi.n	800946c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800942c:	f107 0210 	add.w	r2, r7, #16
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	4413      	add	r3, r2
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	4619      	mov	r1, r3
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	4413      	add	r3, r2
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	3b30      	subs	r3, #48	@ 0x30
 800944c:	440b      	add	r3, r1
 800944e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2bff      	cmp	r3, #255	@ 0xff
 8009454:	dd01      	ble.n	800945a <mg_aton4+0x64>
 8009456:	2300      	movs	r3, #0
 8009458:	e03d      	b.n	80094d6 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	b2d9      	uxtb	r1, r3
 800945e:	f107 0210 	add.w	r2, r7, #16
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	4413      	add	r3, r2
 8009466:	460a      	mov	r2, r1
 8009468:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800946a:	e01a      	b.n	80094a2 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b2e      	cmp	r3, #46	@ 0x2e
 8009476:	d112      	bne.n	800949e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d809      	bhi.n	8009492 <mg_aton4+0x9c>
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d006      	beq.n	8009492 <mg_aton4+0x9c>
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	3b01      	subs	r3, #1
 800948a:	4413      	add	r3, r2
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009490:	d101      	bne.n	8009496 <mg_aton4+0xa0>
 8009492:	2300      	movs	r3, #0
 8009494:	e01f      	b.n	80094d6 <mg_aton4+0xe0>
      num_dots++;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	3301      	adds	r3, #1
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e001      	b.n	80094a2 <mg_aton4+0xac>
    } else {
      return false;
 800949e:	2300      	movs	r3, #0
 80094a0:	e019      	b.n	80094d6 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	3301      	adds	r3, #1
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d3b1      	bcc.n	8009414 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d106      	bne.n	80094c4 <mg_aton4+0xce>
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	4413      	add	r3, r2
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80094c2:	d101      	bne.n	80094c8 <mg_aton4+0xd2>
 80094c4:	2300      	movs	r3, #0
 80094c6:	e006      	b.n	80094d6 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	74da      	strb	r2, [r3, #19]
  return true;
 80094d4:	2301      	movs	r3, #1
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3724      	adds	r7, #36	@ 0x24
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b088      	sub	sp, #32
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	f107 0308 	add.w	r3, r7, #8
 80094ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80094f0:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b0d      	cmp	r3, #13
 80094f6:	d801      	bhi.n	80094fc <mg_v4mapped+0x1a>
 80094f8:	2300      	movs	r3, #0
 80094fa:	e056      	b.n	80095aa <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b3a      	cmp	r3, #58	@ 0x3a
 8009502:	d109      	bne.n	8009518 <mg_v4mapped+0x36>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	3301      	adds	r3, #1
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b3a      	cmp	r3, #58	@ 0x3a
 800950c:	d104      	bne.n	8009518 <mg_v4mapped+0x36>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3306      	adds	r3, #6
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b3a      	cmp	r3, #58	@ 0x3a
 8009516:	d001      	beq.n	800951c <mg_v4mapped+0x3a>
 8009518:	2300      	movs	r3, #0
 800951a:	e046      	b.n	80095aa <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800951c:	2302      	movs	r3, #2
 800951e:	61fb      	str	r3, [r7, #28]
 8009520:	e010      	b.n	8009544 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	4413      	add	r3, r2
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b66      	cmp	r3, #102	@ 0x66
 800952c:	d007      	beq.n	800953e <mg_v4mapped+0x5c>
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	4413      	add	r3, r2
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b46      	cmp	r3, #70	@ 0x46
 8009538:	d001      	beq.n	800953e <mg_v4mapped+0x5c>
 800953a:	2300      	movs	r3, #0
 800953c:	e035      	b.n	80095aa <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	3301      	adds	r3, #1
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	2b05      	cmp	r3, #5
 8009548:	ddeb      	ble.n	8009522 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	1dd9      	adds	r1, r3, #7
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1fda      	subs	r2, r3, #7
 8009552:	f107 0314 	add.w	r3, r7, #20
 8009556:	4618      	mov	r0, r3
 8009558:	f005 fc4b 	bl	800edf2 <mg_str_n>
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	f107 0314 	add.w	r3, r7, #20
 8009562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009566:	f7ff ff46 	bl	80093f6 <mg_aton4>
 800956a:	4603      	mov	r3, r0
 800956c:	f083 0301 	eor.w	r3, r3, #1
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <mg_v4mapped+0x98>
 8009576:	2300      	movs	r3, #0
 8009578:	e017      	b.n	80095aa <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2210      	movs	r2, #16
 8009584:	2100      	movs	r1, #0
 8009586:	4618      	mov	r0, r3
 8009588:	f01b fc68 	bl	8024e5c <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	22ff      	movs	r2, #255	@ 0xff
 8009590:	72da      	strb	r2, [r3, #11]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	7ada      	ldrb	r2, [r3, #11]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	330c      	adds	r3, #12
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	74da      	strb	r2, [r3, #19]
  return true;
 80095a8:	2301      	movs	r3, #1
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3720      	adds	r7, #32
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b090      	sub	sp, #64	@ 0x40
 80095b6:	af02      	add	r7, sp, #8
 80095b8:	f107 0308 	add.w	r3, r7, #8
 80095bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80095c0:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 80095c2:	2300      	movs	r3, #0
 80095c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80095c6:	2300      	movs	r3, #0
 80095c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ca:	232a      	movs	r3, #42	@ 0x2a
 80095cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d909      	bls.n	80095ee <mg_aton6+0x3c>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b5b      	cmp	r3, #91	@ 0x5b
 80095e0:	d105      	bne.n	80095ee <mg_aton6+0x3c>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3b02      	subs	r3, #2
 80095ec:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	f107 0308 	add.w	r3, r7, #8
 80095f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80095f8:	f7ff ff73 	bl	80094e2 <mg_v4mapped>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <mg_aton6+0x54>
 8009602:	2301      	movs	r3, #1
 8009604:	e0e1      	b.n	80097ca <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 8009606:	2300      	movs	r3, #0
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
 800960a:	e0b0      	b.n	800976e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009610:	4413      	add	r3, r2
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b2f      	cmp	r3, #47	@ 0x2f
 8009616:	d905      	bls.n	8009624 <mg_aton6+0x72>
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961c:	4413      	add	r3, r2
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b39      	cmp	r3, #57	@ 0x39
 8009622:	d917      	bls.n	8009654 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009628:	4413      	add	r3, r2
 800962a:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800962c:	2b60      	cmp	r3, #96	@ 0x60
 800962e:	d905      	bls.n	800963c <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009634:	4413      	add	r3, r2
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b66      	cmp	r3, #102	@ 0x66
 800963a:	d90b      	bls.n	8009654 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009640:	4413      	add	r3, r2
 8009642:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8009644:	2b40      	cmp	r3, #64	@ 0x40
 8009646:	d933      	bls.n	80096b0 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964c:	4413      	add	r3, r2
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b46      	cmp	r3, #70	@ 0x46
 8009652:	d82d      	bhi.n	80096b0 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	3303      	adds	r3, #3
 800965c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800965e:	429a      	cmp	r2, r3
 8009660:	d901      	bls.n	8009666 <mg_aton6+0xb4>
 8009662:	2300      	movs	r3, #0
 8009664:	e0b1      	b.n	80097ca <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	18d1      	adds	r1, r2, r3
 800966c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	f107 0318 	add.w	r3, r7, #24
 8009678:	4618      	mov	r0, r3
 800967a:	f005 fbba 	bl	800edf2 <mg_str_n>
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	2204      	movs	r2, #4
 8009684:	9200      	str	r2, [sp, #0]
 8009686:	2210      	movs	r2, #16
 8009688:	f107 0118 	add.w	r1, r7, #24
 800968c:	c903      	ldmia	r1, {r0, r1}
 800968e:	f005 fdee 	bl	800f26e <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	0a1b      	lsrs	r3, r3, #8
 8009696:	b2d9      	uxtb	r1, r3
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	4413      	add	r3, r2
 800969e:	460a      	mov	r2, r1
 80096a0:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a6:	3301      	adds	r3, #1
 80096a8:	b2d1      	uxtb	r1, r2
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 80096ae:	e05b      	b.n	8009768 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b4:	4413      	add	r3, r2
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80096ba:	d134      	bne.n	8009726 <mg_aton6+0x174>
      j = i + 1;
 80096bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096be:	3301      	adds	r3, #1
 80096c0:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 80096c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d014      	beq.n	80096f2 <mg_aton6+0x140>
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096cc:	3b01      	subs	r3, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80096d4:	d10d      	bne.n	80096f2 <mg_aton6+0x140>
        dc = n;  // Double colon
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 80096da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d90f      	bls.n	8009700 <mg_aton6+0x14e>
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e4:	3b02      	subs	r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80096ec:	d108      	bne.n	8009700 <mg_aton6+0x14e>
 80096ee:	2300      	movs	r3, #0
 80096f0:	e06b      	b.n	80097ca <mg_aton6+0x218>
      } else if (i > 0) {
 80096f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <mg_aton6+0x150>
        n += 2;
 80096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fa:	3302      	adds	r3, #2
 80096fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096fe:	e000      	b.n	8009702 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8009700:	bf00      	nop
      }
      if (n > 14) return false;
 8009702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009704:	2b0e      	cmp	r3, #14
 8009706:	d901      	bls.n	800970c <mg_aton6+0x15a>
 8009708:	2300      	movs	r3, #0
 800970a:	e05e      	b.n	80097ca <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800970c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970e:	3301      	adds	r3, #1
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	2100      	movs	r1, #0
 8009714:	54d1      	strb	r1, [r2, r3]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	5cd1      	ldrb	r1, [r2, r3]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971e:	4413      	add	r3, r2
 8009720:	460a      	mov	r2, r1
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	e020      	b.n	8009768 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972a:	4413      	add	r3, r2
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b25      	cmp	r3, #37	@ 0x25
 8009730:	d118      	bne.n	8009764 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009736:	3301      	adds	r3, #1
 8009738:	18d1      	adds	r1, r2, r3
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	1e5a      	subs	r2, r3, #1
 8009742:	f107 0320 	add.w	r3, r7, #32
 8009746:	4618      	mov	r0, r3
 8009748:	f005 fb53 	bl	800edf2 <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8009750:	2201      	movs	r2, #1
 8009752:	9200      	str	r2, [sp, #0]
 8009754:	220a      	movs	r2, #10
 8009756:	f107 0120 	add.w	r1, r7, #32
 800975a:	c903      	ldmia	r1, {r0, r1}
 800975c:	f005 fd87 	bl	800f26e <mg_str_to_num>
 8009760:	4603      	mov	r3, r0
 8009762:	e032      	b.n	80097ca <mg_aton6+0x218>
    } else {
      return false;
 8009764:	2300      	movs	r3, #0
 8009766:	e030      	b.n	80097ca <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 8009768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976a:	3301      	adds	r3, #1
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009772:	429a      	cmp	r2, r3
 8009774:	f4ff af4a 	bcc.w	800960c <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	2b0d      	cmp	r3, #13
 800977c:	d804      	bhi.n	8009788 <mg_aton6+0x1d6>
 800977e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009780:	2b2a      	cmp	r3, #42	@ 0x2a
 8009782:	d101      	bne.n	8009788 <mg_aton6+0x1d6>
 8009784:	2300      	movs	r3, #0
 8009786:	e020      	b.n	80097ca <mg_aton6+0x218>
  if (n < 14) {
 8009788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978a:	2b0d      	cmp	r3, #13
 800978c:	d819      	bhi.n	80097c2 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800978e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	330e      	adds	r3, #14
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	18d0      	adds	r0, r2, r3
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979e:	18d1      	adds	r1, r2, r3
 80097a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	3302      	adds	r3, #2
 80097a8:	461a      	mov	r2, r3
 80097aa:	f01b fb3d 	bl	8024e28 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b2:	18d0      	adds	r0, r2, r3
 80097b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b6:	f1c3 030e 	rsb	r3, r3, #14
 80097ba:	461a      	mov	r2, r3
 80097bc:	2100      	movs	r1, #0
 80097be:	f01b fb4d 	bl	8024e5c <memset>
  }

  addr->is_ip6 = true;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	74da      	strb	r2, [r3, #19]
  return true;
 80097c8:	2301      	movs	r3, #1
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3738      	adds	r7, #56	@ 0x38
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	f107 0308 	add.w	r3, r7, #8
 80097dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80097e0:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097ec:	f7ff fde8 	bl	80093c0 <mg_atone>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d11d      	bne.n	8009832 <mg_aton+0x60>
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	f107 0308 	add.w	r3, r7, #8
 80097fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009800:	f7ff fdae 	bl	8009360 <mg_atonl>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d113      	bne.n	8009832 <mg_aton+0x60>
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009814:	f7ff fdef 	bl	80093f6 <mg_aton4>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <mg_aton+0x60>
         mg_aton6(str, addr);
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	f107 0308 	add.w	r3, r7, #8
 8009824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009828:	f7ff fec3 	bl	80095b2 <mg_aton6>
 800982c:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <mg_aton+0x64>
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <mg_aton+0x66>
 8009836:	2300      	movs	r3, #0
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	b2db      	uxtb	r3, r3
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009852:	33b0      	adds	r3, #176	@ 0xb0
 8009854:	4619      	mov	r1, r3
 8009856:	2001      	movs	r0, #1
 8009858:	f01a f850 	bl	80238fc <calloc>
 800985c:	4603      	mov	r3, r0
 800985e:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d017      	beq.n	8009896 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009872:	675a      	str	r2, [r3, #116]	@ 0x74
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	645a      	str	r2, [r3, #68]	@ 0x44
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	61da      	str	r2, [r3, #28]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	69da      	ldr	r2, [r3, #28]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 8009896:	68fb      	ldr	r3, [r7, #12]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7f8 fb0a 	bl	8001ec2 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e002      	b.n	80098bc <mg_close_conn+0x1c>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d1f7      	bne.n	80098b6 <mg_close_conn+0x16>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d103      	bne.n	80098e2 <mg_close_conn+0x42>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d103      	bne.n	80098f6 <mg_close_conn+0x56>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80098f6:	2200      	movs	r2, #0
 80098f8:	2109      	movs	r1, #9
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7f9 f888 	bl	8002a10 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8009900:	4b17      	ldr	r3, [pc, #92]	@ (8009960 <mg_close_conn+0xc0>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b02      	cmp	r3, #2
 8009906:	dd0e      	ble.n	8009926 <mg_close_conn+0x86>
 8009908:	4b16      	ldr	r3, [pc, #88]	@ (8009964 <mg_close_conn+0xc4>)
 800990a:	f241 326b 	movw	r2, #4971	@ 0x136b
 800990e:	4916      	ldr	r1, [pc, #88]	@ (8009968 <mg_close_conn+0xc8>)
 8009910:	2003      	movs	r0, #3
 8009912:	f7fe fb89 	bl	8008028 <mg_log_prefix>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991e:	461a      	mov	r2, r3
 8009920:	4812      	ldr	r0, [pc, #72]	@ (800996c <mg_close_conn+0xcc>)
 8009922:	f7fe fbd1 	bl	80080c8 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f008 fd92 	bl	8012450 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3338      	adds	r3, #56	@ 0x38
 8009930:	4618      	mov	r0, r3
 8009932:	f7fd fcd4 	bl	80072de <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3348      	adds	r3, #72	@ 0x48
 800993a:	4618      	mov	r0, r3
 800993c:	f7fd fccf 	bl	80072de <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	3368      	adds	r3, #104	@ 0x68
 8009944:	4618      	mov	r0, r3
 8009946:	f7fd fcca 	bl	80072de <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800994a:	21b0      	movs	r1, #176	@ 0xb0
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f00e f875 	bl	8017a3c <mg_bzero>
  free(c);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f019 fff6 	bl	8023944 <free>
}
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	24000240 	.word	0x24000240
 8009964:	0802c100 	.word	0x0802c100
 8009968:	08028ac4 	.word	0x08028ac4
 800996c:	08029b04 	.word	0x08029b04

08009970 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <mg_connect+0x20>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10e      	bne.n	80099ae <mg_connect+0x3e>
    MG_ERROR(("null url"));
 8009990:	4b37      	ldr	r3, [pc, #220]	@ (8009a70 <mg_connect+0x100>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	dd66      	ble.n	8009a66 <mg_connect+0xf6>
 8009998:	4b36      	ldr	r3, [pc, #216]	@ (8009a74 <mg_connect+0x104>)
 800999a:	f241 327b 	movw	r2, #4987	@ 0x137b
 800999e:	4936      	ldr	r1, [pc, #216]	@ (8009a78 <mg_connect+0x108>)
 80099a0:	2001      	movs	r0, #1
 80099a2:	f7fe fb41 	bl	8008028 <mg_log_prefix>
 80099a6:	4835      	ldr	r0, [pc, #212]	@ (8009a7c <mg_connect+0x10c>)
 80099a8:	f7fe fb8e 	bl	80080c8 <mg_log>
 80099ac:	e05b      	b.n	8009a66 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7ff ff49 	bl	8009846 <mg_alloc_conn>
 80099b4:	6178      	str	r0, [r7, #20]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10e      	bne.n	80099da <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 80099bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009a70 <mg_connect+0x100>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dd50      	ble.n	8009a66 <mg_connect+0xf6>
 80099c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009a74 <mg_connect+0x104>)
 80099c6:	f241 327d 	movw	r2, #4989	@ 0x137d
 80099ca:	492b      	ldr	r1, [pc, #172]	@ (8009a78 <mg_connect+0x108>)
 80099cc:	2001      	movs	r0, #1
 80099ce:	f7fe fb2b 	bl	8008028 <mg_log_prefix>
 80099d2:	482b      	ldr	r0, [pc, #172]	@ (8009a80 <mg_connect+0x110>)
 80099d4:	f7fe fb78 	bl	80080c8 <mg_log>
 80099d8:	e045      	b.n	8009a66 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 80099e8:	2204      	movs	r2, #4
 80099ea:	4926      	ldr	r1, [pc, #152]	@ (8009a84 <mg_connect+0x114>)
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f01b fa4a 	bl	8024e86 <strncmp>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bf0c      	ite	eq
 80099f8:	2301      	moveq	r3, #1
 80099fa:	2300      	movne	r3, #0
 80099fc:	b2d9      	uxtb	r1, r3
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009a04:	f361 0300 	bfi	r3, r1, #0, #1
 8009a08:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a12:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8009a2e:	4b10      	ldr	r3, [pc, #64]	@ (8009a70 <mg_connect+0x100>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	dd0e      	ble.n	8009a54 <mg_connect+0xe4>
 8009a36:	4b0f      	ldr	r3, [pc, #60]	@ (8009a74 <mg_connect+0x104>)
 8009a38:	f241 3285 	movw	r2, #4997	@ 0x1385
 8009a3c:	490e      	ldr	r1, [pc, #56]	@ (8009a78 <mg_connect+0x108>)
 8009a3e:	2003      	movs	r0, #3
 8009a40:	f7fe faf2 	bl	8008028 <mg_log_prefix>
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	480e      	ldr	r0, [pc, #56]	@ (8009a88 <mg_connect+0x118>)
 8009a50:	f7fe fb3a 	bl	80080c8 <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	2101      	movs	r1, #1
 8009a58:	6978      	ldr	r0, [r7, #20]
 8009a5a:	f7f8 ffd9 	bl	8002a10 <mg_call>
    mg_resolve(c, url);
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	6978      	ldr	r0, [r7, #20]
 8009a62:	f7f8 ff91 	bl	8002988 <mg_resolve>
  }
  return c;
 8009a66:	697b      	ldr	r3, [r7, #20]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	24000240 	.word	0x24000240
 8009a74:	0802c110 	.word	0x0802c110
 8009a78:	08028ac4 	.word	0x08028ac4
 8009a7c:	08029b14 	.word	0x08029b14
 8009a80:	08029b20 	.word	0x08029b20
 8009a84:	08029b24 	.word	0x08029b24
 8009a88:	08028e4c 	.word	0x08028e4c

08009a8c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fed1 	bl	8009846 <mg_alloc_conn>
 8009aa4:	6178      	str	r0, [r7, #20]
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10f      	bne.n	8009acc <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 8009aac:	4b41      	ldr	r3, [pc, #260]	@ (8009bb4 <mg_listen+0x128>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd7a      	ble.n	8009baa <mg_listen+0x11e>
 8009ab4:	4b40      	ldr	r3, [pc, #256]	@ (8009bb8 <mg_listen+0x12c>)
 8009ab6:	f241 3290 	movw	r2, #5008	@ 0x1390
 8009aba:	4940      	ldr	r1, [pc, #256]	@ (8009bbc <mg_listen+0x130>)
 8009abc:	2001      	movs	r0, #1
 8009abe:	f7fe fab3 	bl	8008028 <mg_log_prefix>
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	483e      	ldr	r0, [pc, #248]	@ (8009bc0 <mg_listen+0x134>)
 8009ac6:	f7fe faff 	bl	80080c8 <mg_log>
 8009aca:	e06e      	b.n	8009baa <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f003 f974 	bl	800cdbc <mg_open_listener>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f083 0301 	eor.w	r3, r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d019      	beq.n	8009b14 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8009ae0:	4b34      	ldr	r3, [pc, #208]	@ (8009bb4 <mg_listen+0x128>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dd0f      	ble.n	8009b08 <mg_listen+0x7c>
 8009ae8:	4b33      	ldr	r3, [pc, #204]	@ (8009bb8 <mg_listen+0x12c>)
 8009aea:	f241 3292 	movw	r2, #5010	@ 0x1392
 8009aee:	4933      	ldr	r1, [pc, #204]	@ (8009bbc <mg_listen+0x130>)
 8009af0:	2001      	movs	r0, #1
 8009af2:	f7fe fa99 	bl	8008028 <mg_log_prefix>
 8009af6:	f01b fac7 	bl	8025088 <__errno>
 8009afa:	4603      	mov	r3, r0
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	4830      	ldr	r0, [pc, #192]	@ (8009bc4 <mg_listen+0x138>)
 8009b04:	f7fe fae0 	bl	80080c8 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f019 ff1b 	bl	8023944 <free>
    c = NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e04a      	b.n	8009baa <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009b1a:	f043 0301 	orr.w	r3, r3, #1
 8009b1e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8009b22:	2204      	movs	r2, #4
 8009b24:	4928      	ldr	r1, [pc, #160]	@ (8009bc8 <mg_listen+0x13c>)
 8009b26:	68b8      	ldr	r0, [r7, #8]
 8009b28:	f01b f9ad 	bl	8024e86 <strncmp>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bf0c      	ite	eq
 8009b32:	2301      	moveq	r3, #1
 8009b34:	2300      	movne	r3, #0
 8009b36:	b2d9      	uxtb	r1, r3
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009b3e:	f361 0300 	bfi	r3, r1, #0, #1
 8009b42:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 8009b60:	2200      	movs	r2, #0
 8009b62:	2101      	movs	r1, #1
 8009b64:	6978      	ldr	r0, [r7, #20]
 8009b66:	f7f8 ff53 	bl	8002a10 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8009b6a:	68b8      	ldr	r0, [r7, #8]
 8009b6c:	f00d fe06 	bl	801777c <mg_url_is_ssl>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d006      	beq.n	8009b84 <mg_listen+0xf8>
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b80:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8009b84:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <mg_listen+0x128>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	dd0e      	ble.n	8009baa <mg_listen+0x11e>
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb8 <mg_listen+0x12c>)
 8009b8e:	f241 329e 	movw	r2, #5022	@ 0x139e
 8009b92:	490a      	ldr	r1, [pc, #40]	@ (8009bbc <mg_listen+0x130>)
 8009b94:	2003      	movs	r0, #3
 8009b96:	f7fe fa47 	bl	8008028 <mg_log_prefix>
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4809      	ldr	r0, [pc, #36]	@ (8009bcc <mg_listen+0x140>)
 8009ba6:	f7fe fa8f 	bl	80080c8 <mg_log>
  }
  return c;
 8009baa:	697b      	ldr	r3, [r7, #20]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	24000240 	.word	0x24000240
 8009bb8:	0802c11c 	.word	0x0802c11c
 8009bbc:	08028ac4 	.word	0x08028ac4
 8009bc0:	08029b2c 	.word	0x08029b2c
 8009bc4:	08029b34 	.word	0x08029b34
 8009bc8:	08029b24 	.word	0x08029b24
 8009bcc:	08028e4c 	.word	0x08028e4c

08009bd0 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08a      	sub	sp, #40	@ 0x28
 8009bd4:	af04      	add	r7, sp, #16
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8009bdc:	2128      	movs	r1, #40	@ 0x28
 8009bde:	2001      	movs	r0, #1
 8009be0:	f019 fe8c 	bl	80238fc <calloc>
 8009be4:	4603      	mov	r3, r0
 8009be6:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d014      	beq.n	8009c18 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	9302      	str	r3, [sp, #8]
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c04:	6979      	ldr	r1, [r7, #20]
 8009c06:	f005 fd65 	bl	800f6d4 <mg_timer_init>
    t->id = mgr->timerid++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	1c59      	adds	r1, r3, #1
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	6211      	str	r1, [r2, #32]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	6013      	str	r3, [r2, #0]
  }
  return t;
 8009c18:	697b      	ldr	r3, [r7, #20]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8009c2c:	2248      	movs	r2, #72	@ 0x48
 8009c2e:	2100      	movs	r1, #0
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f01b f913 	bl	8024e5c <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	639a      	str	r2, [r3, #56]	@ 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 8009c3e:	4b34      	ldr	r3, [pc, #208]	@ (8009d10 <mg_mgr_init+0xec>)
 8009c40:	2204      	movs	r2, #4
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	4b32      	ldr	r3, [pc, #200]	@ (8009d10 <mg_mgr_init+0xec>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	711a      	strb	r2, [r3, #4]
 8009c4a:	4b31      	ldr	r3, [pc, #196]	@ (8009d10 <mg_mgr_init+0xec>)
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	715a      	strb	r2, [r3, #5]
 8009c50:	2000      	movs	r0, #0
 8009c52:	f00d ff53 	bl	8017afc <mg_ntohl>
 8009c56:	4603      	mov	r3, r0
 8009c58:	4a2e      	ldr	r2, [pc, #184]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c5a:	6093      	str	r3, [r2, #8]
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f00d ff4d 	bl	8017afc <mg_ntohl>
 8009c62:	4603      	mov	r3, r0
 8009c64:	4a2b      	ldr	r2, [pc, #172]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c66:	60d3      	str	r3, [r2, #12]
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f00d ff47 	bl	8017afc <mg_ntohl>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	4a28      	ldr	r2, [pc, #160]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c72:	6113      	str	r3, [r2, #16]
 8009c74:	4b27      	ldr	r3, [pc, #156]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c76:	4a28      	ldr	r2, [pc, #160]	@ (8009d18 <mg_mgr_init+0xf4>)
 8009c78:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c7a:	4b26      	ldr	r3, [pc, #152]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c7c:	4a24      	ldr	r2, [pc, #144]	@ (8009d10 <mg_mgr_init+0xec>)
 8009c7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c80:	4b24      	ldr	r3, [pc, #144]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c82:	2202      	movs	r2, #2
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	4b25      	ldr	r3, [pc, #148]	@ (8009d1c <mg_mgr_init+0xf8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	4b21      	ldr	r3, [pc, #132]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c8e:	705a      	strb	r2, [r3, #1]
 8009c90:	4b22      	ldr	r3, [pc, #136]	@ (8009d1c <mg_mgr_init+0xf8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	0a9b      	lsrs	r3, r3, #10
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	4b1e      	ldr	r3, [pc, #120]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009c9a:	709a      	strb	r2, [r3, #2]
 8009c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8009d1c <mg_mgr_init+0xf8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	0cdb      	lsrs	r3, r3, #19
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009ca6:	70da      	strb	r2, [r3, #3]
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d20 <mg_mgr_init+0xfc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	4b19      	ldr	r3, [pc, #100]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009cb0:	711a      	strb	r2, [r3, #4]
 8009cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d24 <mg_mgr_init+0x100>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	4b16      	ldr	r3, [pc, #88]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009cba:	715a      	strb	r2, [r3, #5]
 8009cbc:	4915      	ldr	r1, [pc, #84]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f002 fe44 	bl	800c94c <mg_tcpip_init>
 8009cc4:	4b18      	ldr	r3, [pc, #96]	@ (8009d28 <mg_mgr_init+0x104>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	dd0b      	ble.n	8009ce4 <mg_mgr_init+0xc0>
 8009ccc:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <mg_mgr_init+0x108>)
 8009cce:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 8009cd2:	4917      	ldr	r1, [pc, #92]	@ (8009d30 <mg_mgr_init+0x10c>)
 8009cd4:	2002      	movs	r0, #2
 8009cd6:	f7fe f9a7 	bl	8008028 <mg_log_prefix>
 8009cda:	4a0e      	ldr	r2, [pc, #56]	@ (8009d14 <mg_mgr_init+0xf0>)
 8009cdc:	4915      	ldr	r1, [pc, #84]	@ (8009d34 <mg_mgr_init+0x110>)
 8009cde:	4816      	ldr	r0, [pc, #88]	@ (8009d38 <mg_mgr_init+0x114>)
 8009ce0:	f7fe f9f2 	bl	80080c8 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cea:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8009cf2:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a11      	ldr	r2, [pc, #68]	@ (8009d3c <mg_mgr_init+0x118>)
 8009cf8:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a10      	ldr	r2, [pc, #64]	@ (8009d40 <mg_mgr_init+0x11c>)
 8009cfe:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f008 fc69 	bl	80125d8 <mg_tls_ctx_init>
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	24003e8c 	.word	0x24003e8c
 8009d14:	24003e98 	.word	0x24003e98
 8009d18:	24000268 	.word	0x24000268
 8009d1c:	1ff1e800 	.word	0x1ff1e800
 8009d20:	1ff1e804 	.word	0x1ff1e804
 8009d24:	1ff1e808 	.word	0x1ff1e808
 8009d28:	24000240 	.word	0x24000240
 8009d2c:	0802c128 	.word	0x0802c128
 8009d30:	08028ac4 	.word	0x08028ac4
 8009d34:	0800da11 	.word	0x0800da11
 8009d38:	08029b64 	.word	0x08029b64
 8009d3c:	08029b7c 	.word	0x08029b7c
 8009d40:	08029b90 	.word	0x08029b90

08009d44 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <mg_tcpip_call+0x20>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	4798      	blx	r3
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 8009d6c:	b590      	push	{r4, r7, lr}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	441a      	add	r2, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	461a      	mov	r2, r3
 8009d86:	68fc      	ldr	r4, [r7, #12]
 8009d88:	463b      	mov	r3, r7
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f005 f830 	bl	800edf2 <mg_str_n>
 8009d92:	f104 0308 	add.w	r3, r4, #8
 8009d96:	463a      	mov	r2, r7
 8009d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d9c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd90      	pop	{r4, r7, pc}

08009da8 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8009db8:	2300      	movs	r3, #0
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	e014      	b.n	8009de8 <csumup+0x40>
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <csumup+0x2a>
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	e004      	b.n	8009ddc <csumup+0x34>
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	3301      	adds	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d3e6      	bcc.n	8009dbe <csumup+0x16>
  return sum;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8009e06:	e005      	b.n	8009e14 <csumfin+0x16>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	0c1b      	lsrs	r3, r3, #16
 8009e10:	4413      	add	r3, r2
 8009e12:	607b      	str	r3, [r7, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	0c1b      	lsrs	r3, r3, #16
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f5      	bne.n	8009e08 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	43db      	mvns	r3, r3
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	4618      	mov	r0, r3
 8009e26:	f00d fe82 	bl	8017b2e <mg_ntohs>
 8009e2a:	4603      	mov	r3, r0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7ff ffb0 	bl	8009da8 <csumup>
 8009e48:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff ffd7 	bl	8009dfe <csumfin>
 8009e50:	4603      	mov	r3, r0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8009e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009e60:	b088      	sub	sp, #32
 8009e62:	af02      	add	r7, sp, #8
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	460b      	mov	r3, r1
 8009e68:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e70:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	33b0      	adds	r3, #176	@ 0xb0
 8009e76:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 8009e78:	78fb      	ldrb	r3, [r7, #3]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d013      	beq.n	8009ea6 <settmout+0x4a>
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d00e      	beq.n	8009ea2 <settmout+0x46>
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d008      	beq.n	8009e9c <settmout+0x40>
 8009e8a:	78fb      	ldrb	r3, [r7, #3]
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d102      	bne.n	8009e96 <settmout+0x3a>
 8009e90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009e94:	e008      	b.n	8009ea8 <settmout+0x4c>
 8009e96:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8009e9a:	e005      	b.n	8009ea8 <settmout+0x4c>
 8009e9c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8009ea0:	e002      	b.n	8009ea8 <settmout+0x4c>
 8009ea2:	2364      	movs	r3, #100	@ 0x64
 8009ea4:	e000      	b.n	8009ea8 <settmout+0x4c>
 8009ea6:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 8009ea8:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	eb12 0804 	adds.w	r8, r2, r4
 8009ebc:	eb43 0905 	adc.w	r9, r3, r5
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <settmout+0xa8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	dd12      	ble.n	8009efa <settmout+0x9e>
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8009f08 <settmout+0xac>)
 8009ed6:	f241 42a5 	movw	r2, #5285	@ 0x14a5
 8009eda:	490c      	ldr	r1, [pc, #48]	@ (8009f0c <settmout+0xb0>)
 8009edc:	2004      	movs	r0, #4
 8009ede:	f7fe f8a3 	bl	8008028 <mg_log_prefix>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009ee6:	78f8      	ldrb	r0, [r7, #3]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009eee:	e9cd 2300 	strd	r2, r3, [sp]
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	4806      	ldr	r0, [pc, #24]	@ (8009f10 <settmout+0xb4>)
 8009ef6:	f7fe f8e7 	bl	80080c8 <mg_log>
}
 8009efa:	bf00      	nop
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f04:	24000240 	.word	0x24000240
 8009f08:	0802c134 	.word	0x0802c134
 8009f0c:	08028ac4 	.word	0x08028ac4
 8009f10:	08029bb0 	.word	0x08029bb0

08009f14 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6950      	ldr	r0, [r2, #20]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	4798      	blx	r3
 8009f2e:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d104      	bne.n	8009f42 <ether_output+0x2e>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 8009f42:	68fb      	ldr	r3, [r7, #12]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	330e      	adds	r3, #14
 8009f62:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2206      	movs	r2, #6
 8009f68:	21ff      	movs	r1, #255	@ 0xff
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f01a ff76 	bl	8024e5c <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3306      	adds	r3, #6
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	2206      	movs	r2, #6
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f01b f8ba 	bl	80250f2 <memcpy>
  eth->type = mg_htons(0x806);
 8009f7e:	f640 0006 	movw	r0, #2054	@ 0x806
 8009f82:	f00d fdd4 	bl	8017b2e <mg_ntohs>
 8009f86:	4603      	mov	r3, r0
 8009f88:	461a      	mov	r2, r3
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8009f8e:	221c      	movs	r2, #28
 8009f90:	2100      	movs	r1, #0
 8009f92:	6938      	ldr	r0, [r7, #16]
 8009f94:	f01a ff62 	bl	8024e5c <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8009f98:	2001      	movs	r0, #1
 8009f9a:	f00d fdc8 	bl	8017b2e <mg_ntohs>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009faa:	f00d fdc0 	bl	8017b2e <mg_ntohs>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	805a      	strh	r2, [r3, #2]
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	2206      	movs	r2, #6
 8009fba:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2204      	movs	r2, #4
 8009fc0:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	f00d fdb3 	bl	8017b2e <mg_ntohs>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	80da      	strh	r2, [r3, #6]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	619a      	str	r2, [r3, #24]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689a      	ldr	r2, [r3, #8]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	2206      	movs	r2, #6
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f01b f882 	bl	80250f2 <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <mg_tcpip_arp_request+0xb6>
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	3312      	adds	r3, #18
 8009ff8:	2206      	movs	r2, #6
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f01b f878 	bl	80250f2 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f103 021c 	add.w	r2, r3, #28
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	4619      	mov	r1, r3
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff ff80 	bl	8009f14 <ether_output>
}
 800a014:	bf00      	nop
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d135      	bne.n	800a09a <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800a02e:	4b45      	ldr	r3, [pc, #276]	@ (800a144 <onstatechange+0x128>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b01      	cmp	r3, #1
 800a034:	dd0d      	ble.n	800a052 <onstatechange+0x36>
 800a036:	4b44      	ldr	r3, [pc, #272]	@ (800a148 <onstatechange+0x12c>)
 800a038:	f241 42bf 	movw	r2, #5311	@ 0x14bf
 800a03c:	4943      	ldr	r1, [pc, #268]	@ (800a14c <onstatechange+0x130>)
 800a03e:	2002      	movs	r0, #2
 800a040:	f7fd fff2 	bl	8008028 <mg_log_prefix>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3308      	adds	r3, #8
 800a048:	461a      	mov	r2, r3
 800a04a:	4941      	ldr	r1, [pc, #260]	@ (800a150 <onstatechange+0x134>)
 800a04c:	4841      	ldr	r0, [pc, #260]	@ (800a154 <onstatechange+0x138>)
 800a04e:	f7fe f83b 	bl	80080c8 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800a052:	4b3c      	ldr	r3, [pc, #240]	@ (800a144 <onstatechange+0x128>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b01      	cmp	r3, #1
 800a058:	dd0d      	ble.n	800a076 <onstatechange+0x5a>
 800a05a:	4b3b      	ldr	r3, [pc, #236]	@ (800a148 <onstatechange+0x12c>)
 800a05c:	f44f 52a6 	mov.w	r2, #5312	@ 0x14c0
 800a060:	493a      	ldr	r1, [pc, #232]	@ (800a14c <onstatechange+0x130>)
 800a062:	2002      	movs	r0, #2
 800a064:	f7fd ffe0 	bl	8008028 <mg_log_prefix>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3310      	adds	r3, #16
 800a06c:	461a      	mov	r2, r3
 800a06e:	4938      	ldr	r1, [pc, #224]	@ (800a150 <onstatechange+0x134>)
 800a070:	4839      	ldr	r0, [pc, #228]	@ (800a158 <onstatechange+0x13c>)
 800a072:	f7fe f829 	bl	80080c8 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800a076:	4b33      	ldr	r3, [pc, #204]	@ (800a144 <onstatechange+0x128>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	dd57      	ble.n	800a12e <onstatechange+0x112>
 800a07e:	4b32      	ldr	r3, [pc, #200]	@ (800a148 <onstatechange+0x12c>)
 800a080:	f241 42c1 	movw	r2, #5313	@ 0x14c1
 800a084:	4931      	ldr	r1, [pc, #196]	@ (800a14c <onstatechange+0x130>)
 800a086:	2002      	movs	r0, #2
 800a088:	f7fd ffce 	bl	8008028 <mg_log_prefix>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	461a      	mov	r2, r3
 800a090:	4932      	ldr	r1, [pc, #200]	@ (800a15c <onstatechange+0x140>)
 800a092:	4833      	ldr	r0, [pc, #204]	@ (800a160 <onstatechange+0x144>)
 800a094:	f7fe f818 	bl	80080c8 <mg_log>
 800a098:	e049      	b.n	800a12e <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d115      	bne.n	800a0d0 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 800a0a4:	4b27      	ldr	r3, [pc, #156]	@ (800a144 <onstatechange+0x128>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dd09      	ble.n	800a0c0 <onstatechange+0xa4>
 800a0ac:	4b26      	ldr	r3, [pc, #152]	@ (800a148 <onstatechange+0x12c>)
 800a0ae:	f241 42c3 	movw	r2, #5315	@ 0x14c3
 800a0b2:	4926      	ldr	r1, [pc, #152]	@ (800a14c <onstatechange+0x130>)
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f7fd ffb7 	bl	8008028 <mg_log_prefix>
 800a0ba:	482a      	ldr	r0, [pc, #168]	@ (800a164 <onstatechange+0x148>)
 800a0bc:	f7fe f804 	bl	80080c8 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ff3f 	bl	8009f4c <mg_tcpip_arp_request>
 800a0ce:	e02e      	b.n	800a12e <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d116      	bne.n	800a108 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 800a0da:	4b1a      	ldr	r3, [pc, #104]	@ (800a144 <onstatechange+0x128>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dd09      	ble.n	800a0f6 <onstatechange+0xda>
 800a0e2:	4b19      	ldr	r3, [pc, #100]	@ (800a148 <onstatechange+0x12c>)
 800a0e4:	f241 42c6 	movw	r2, #5318	@ 0x14c6
 800a0e8:	4918      	ldr	r1, [pc, #96]	@ (800a14c <onstatechange+0x130>)
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	f7fd ff9c 	bl	8008028 <mg_log_prefix>
 800a0f0:	481d      	ldr	r0, [pc, #116]	@ (800a168 <onstatechange+0x14c>)
 800a0f2:	f7fd ffe9 	bl	80080c8 <mg_log>
    srand((unsigned int) mg_millis());
 800a0f6:	f7f6 ff43 	bl	8000f80 <mg_millis>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4613      	mov	r3, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f019 fcd5 	bl	8023ab0 <srand>
 800a106:	e012      	b.n	800a12e <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10d      	bne.n	800a12e <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800a112:	4b0c      	ldr	r3, [pc, #48]	@ (800a144 <onstatechange+0x128>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	dd09      	ble.n	800a12e <onstatechange+0x112>
 800a11a:	4b0b      	ldr	r3, [pc, #44]	@ (800a148 <onstatechange+0x12c>)
 800a11c:	f241 42c9 	movw	r2, #5321	@ 0x14c9
 800a120:	490a      	ldr	r1, [pc, #40]	@ (800a14c <onstatechange+0x130>)
 800a122:	2001      	movs	r0, #1
 800a124:	f7fd ff80 	bl	8008028 <mg_log_prefix>
 800a128:	4810      	ldr	r0, [pc, #64]	@ (800a16c <onstatechange+0x150>)
 800a12a:	f7fd ffcd 	bl	80080c8 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	337c      	adds	r3, #124	@ 0x7c
 800a132:	461a      	mov	r2, r3
 800a134:	2100      	movs	r1, #0
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff fe04 	bl	8009d44 <mg_tcpip_call>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	24000240 	.word	0x24000240
 800a148:	0802c140 	.word	0x0802c140
 800a14c:	08028ac4 	.word	0x08028ac4
 800a150:	0800d94d 	.word	0x0800d94d
 800a154:	08029bc0 	.word	0x08029bc0
 800a158:	08029bd0 	.word	0x08029bd0
 800a15c:	0800da11 	.word	0x0800da11
 800a160:	08029be0 	.word	0x08029be0
 800a164:	08029bf0 	.word	0x08029bf0
 800a168:	08029bf8 	.word	0x08029bf8
 800a16c:	08029c00 	.word	0x08029c00

0800a170 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	4613      	mov	r3, r2
 800a17e:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	330e      	adds	r3, #14
 800a18a:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2206      	movs	r2, #6
 800a190:	68b9      	ldr	r1, [r7, #8]
 800a192:	4618      	mov	r0, r3
 800a194:	f01a ffad 	bl	80250f2 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	3306      	adds	r3, #6
 800a19c:	68f9      	ldr	r1, [r7, #12]
 800a19e:	2206      	movs	r2, #6
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f01a ffa6 	bl	80250f2 <memcpy>
  eth->type = mg_htons(0x800);
 800a1a6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a1aa:	f00d fcc0 	bl	8017b2e <mg_ntohs>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800a1b6:	2214      	movs	r2, #20
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	6938      	ldr	r0, [r7, #16]
 800a1bc:	f01a fe4e 	bl	8024e5c <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2245      	movs	r2, #69	@ 0x45
 800a1c4:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800a1c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a1ca:	f00d fcb0 	bl	8017b2e <mg_ntohs>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	3314      	adds	r3, #20
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f00d fca5 	bl	8017b2e <mg_ntohs>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2240      	movs	r2, #64	@ 0x40
 800a1f0:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	79fa      	ldrb	r2, [r7, #7]
 800a1f6:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	6a3a      	ldr	r2, [r7, #32]
 800a202:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800a204:	2114      	movs	r1, #20
 800a206:	6938      	ldr	r0, [r7, #16]
 800a208:	f7ff fe14 	bl	8009e34 <ipcsum>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	815a      	strh	r2, [r3, #10]
  return ip;
 800a214:	693b      	ldr	r3, [r7, #16]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800a21e:	b580      	push	{r7, lr}
 800a220:	b08a      	sub	sp, #40	@ 0x28
 800a222:	af02      	add	r7, sp, #8
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800a22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22e:	3308      	adds	r3, #8
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2211      	movs	r2, #17
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7ff ff97 	bl	800a170 <tx_ip>
 800a242:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	3314      	adds	r3, #20
 800a248:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	887a      	ldrh	r2, [r7, #2]
 800a24e:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a254:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800a256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a258:	b29b      	uxth	r3, r3
 800a25a:	3308      	adds	r3, #8
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4618      	mov	r0, r3
 800a260:	f00d fc65 	bl	8017b2e <mg_ntohs>
 800a264:	4603      	mov	r3, r0
 800a266:	461a      	mov	r2, r3
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2200      	movs	r2, #0
 800a270:	719a      	strb	r2, [r3, #6]
 800a272:	2200      	movs	r2, #0
 800a274:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800a276:	2208      	movs	r2, #8
 800a278:	69b9      	ldr	r1, [r7, #24]
 800a27a:	2000      	movs	r0, #0
 800a27c:	f7ff fd94 	bl	8009da8 <csumup>
 800a280:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800a282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a284:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a286:	6978      	ldr	r0, [r7, #20]
 800a288:	f7ff fd8e 	bl	8009da8 <csumup>
 800a28c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	330c      	adds	r3, #12
 800a292:	2204      	movs	r2, #4
 800a294:	4619      	mov	r1, r3
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7ff fd86 	bl	8009da8 <csumup>
 800a29c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	3310      	adds	r3, #16
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f7ff fd7e 	bl	8009da8 <csumup>
 800a2ac:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	7a5b      	ldrb	r3, [r3, #9]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b6:	441a      	add	r2, r3
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	3308      	adds	r3, #8
 800a2be:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800a2c0:	6978      	ldr	r0, [r7, #20]
 800a2c2:	f7ff fd9c 	bl	8009dfe <csumfin>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f01a fda6 	bl	8024e28 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2de:	332a      	adds	r3, #42	@ 0x2a
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fe16 	bl	8009f14 <ether_output>
}
 800a2e8:	bf00      	nop
 800a2ea:	3720      	adds	r7, #32
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800a2f0:	b5b0      	push	{r4, r5, r7, lr}
 800a2f2:	b0cc      	sub	sp, #304	@ 0x130
 800a2f4:	af04      	add	r7, sp, #16
 800a2f6:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800a2fa:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800a304:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800a308:	6001      	str	r1, [r0, #0]
 800a30a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800a30e:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800a312:	600a      	str	r2, [r1, #0]
 800a314:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800a318:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800a31c:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800a31e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a322:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a326:	4a38      	ldr	r2, [pc, #224]	@ (800a408 <tx_dhcp+0x118>)
 800a328:	4618      	mov	r0, r3
 800a32a:	4611      	mov	r1, r2
 800a32c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a330:	461a      	mov	r2, r3
 800a332:	f01a fede 	bl	80250f2 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800a336:	4835      	ldr	r0, [pc, #212]	@ (800a40c <tx_dhcp+0x11c>)
 800a338:	f00d fbe0 	bl	8017afc <mg_ntohl>
 800a33c:	4602      	mov	r2, r0
 800a33e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a342:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a346:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800a34a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a34e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	f107 0310 	add.w	r3, r7, #16
 800a358:	331c      	adds	r3, #28
 800a35a:	2206      	movs	r2, #6
 800a35c:	4618      	mov	r0, r3
 800a35e:	f01a fec8 	bl	80250f2 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800a362:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a366:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3302      	adds	r3, #2
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a376:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a37a:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800a37c:	f107 0310 	add.w	r3, r7, #16
 800a380:	33f0      	adds	r3, #240	@ 0xf0
 800a382:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800a386:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800a38a:	4618      	mov	r0, r3
 800a38c:	f01a feb1 	bl	80250f2 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800a390:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 800a394:	2b00      	cmp	r3, #0
 800a396:	d009      	beq.n	800a3ac <tx_dhcp+0xbc>
 800a398:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a39c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3a0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800a3a4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800a3ac:	2044      	movs	r0, #68	@ 0x44
 800a3ae:	f00d fbbe 	bl	8017b2e <mg_ntohs>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	461d      	mov	r5, r3
 800a3b6:	2043      	movs	r0, #67	@ 0x43
 800a3b8:	f00d fbb9 	bl	8017b2e <mg_ntohs>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	461c      	mov	r4, r3
 800a3c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a3c4:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800a3c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a3cc:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 800a3d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a3d4:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800a3d8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	f107 0310 	add.w	r3, r7, #16
 800a3e2:	9302      	str	r3, [sp, #8]
 800a3e4:	9401      	str	r4, [sp, #4]
 800a3e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a3ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	6812      	ldr	r2, [r2, #0]
 800a3f6:	6809      	ldr	r1, [r1, #0]
 800a3f8:	6800      	ldr	r0, [r0, #0]
 800a3fa:	f7ff ff10 	bl	800a21e <tx_udp>
         sizeof(dhcp));
}
 800a3fe:	bf00      	nop
 800a400:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a404:	46bd      	mov	sp, r7
 800a406:	bdb0      	pop	{r4, r5, r7, pc}
 800a408:	08029c0c 	.word	0x08029c0c
 800a40c:	63825363 	.word	0x63825363

0800a410 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800a410:	b5b0      	push	{r4, r5, r7, lr}
 800a412:	b090      	sub	sp, #64	@ 0x40
 800a414:	af04      	add	r7, sp, #16
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800a41c:	4b31      	ldr	r3, [pc, #196]	@ (800a4e4 <tx_dhcp_request_sel+0xd4>)
 800a41e:	f107 0414 	add.w	r4, r7, #20
 800a422:	461d      	mov	r5, r3
 800a424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a428:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a42c:	c403      	stmia	r4!, {r0, r1}
 800a42e:	8022      	strh	r2, [r4, #0]
 800a430:	3402      	adds	r4, #2
 800a432:	0c13      	lsrs	r3, r2, #16
 800a434:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 800a43c:	f107 0314 	add.w	r3, r7, #20
 800a440:	330a      	adds	r3, #10
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 800a446:	f107 0314 	add.w	r3, r7, #20
 800a44a:	3310      	adds	r3, #16
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	7fdb      	ldrb	r3, [r3, #31]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00a      	beq.n	800a46e <tx_dhcp_request_sel+0x5e>
 800a458:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800a462:	3318      	adds	r3, #24
 800a464:	3330      	adds	r3, #48	@ 0x30
 800a466:	443b      	add	r3, r7
 800a468:	2206      	movs	r2, #6
 800a46a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <tx_dhcp_request_sel+0x7e>
 800a478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800a482:	3318      	adds	r3, #24
 800a484:	3330      	adds	r3, #48	@ 0x30
 800a486:	443b      	add	r3, r7
 800a488:	222a      	movs	r2, #42	@ 0x2a
 800a48a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 800a48e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800a492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a496:	4413      	add	r3, r2
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 800a49e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4a2:	3319      	adds	r3, #25
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	9202      	str	r2, [sp, #8]
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	f107 0314 	add.w	r3, r7, #20
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	490c      	ldr	r1, [pc, #48]	@ (800a4e8 <tx_dhcp_request_sel+0xd8>)
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff ff19 	bl	800a2f0 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 800a4be:	4b0b      	ldr	r3, [pc, #44]	@ (800a4ec <tx_dhcp_request_sel+0xdc>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	dd09      	ble.n	800a4da <tx_dhcp_request_sel+0xca>
 800a4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f0 <tx_dhcp_request_sel+0xe0>)
 800a4c8:	f241 521b 	movw	r2, #5403	@ 0x151b
 800a4cc:	4909      	ldr	r1, [pc, #36]	@ (800a4f4 <tx_dhcp_request_sel+0xe4>)
 800a4ce:	2003      	movs	r0, #3
 800a4d0:	f7fd fdaa 	bl	8008028 <mg_log_prefix>
 800a4d4:	4808      	ldr	r0, [pc, #32]	@ (800a4f8 <tx_dhcp_request_sel+0xe8>)
 800a4d6:	f7fd fdf7 	bl	80080c8 <mg_log>
}
 800a4da:	bf00      	nop
 800a4dc:	3730      	adds	r7, #48	@ 0x30
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	08029d2c 	.word	0x08029d2c
 800a4e8:	0802be4c 	.word	0x0802be4c
 800a4ec:	24000240 	.word	0x24000240
 800a4f0:	0802c150 	.word	0x0802c150
 800a4f4:	08028ac4 	.word	0x08028ac4
 800a4f8:	08029d1c 	.word	0x08029d1c

0800a4fc <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	@ 0x28
 800a500:	af04      	add	r7, sp, #16
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800a50a:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <tx_dhcp_request_re+0x50>)
 800a50c:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800a50e:	2301      	movs	r3, #1
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	2304      	movs	r3, #4
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	f107 0314 	add.w	r3, r7, #20
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7ff fee4 	bl	800a2f0 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a528:	4b09      	ldr	r3, [pc, #36]	@ (800a550 <tx_dhcp_request_re+0x54>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	dd09      	ble.n	800a544 <tx_dhcp_request_re+0x48>
 800a530:	4b08      	ldr	r3, [pc, #32]	@ (800a554 <tx_dhcp_request_re+0x58>)
 800a532:	f241 5226 	movw	r2, #5414	@ 0x1526
 800a536:	4908      	ldr	r1, [pc, #32]	@ (800a558 <tx_dhcp_request_re+0x5c>)
 800a538:	2003      	movs	r0, #3
 800a53a:	f7fd fd75 	bl	8008028 <mg_log_prefix>
 800a53e:	4807      	ldr	r0, [pc, #28]	@ (800a55c <tx_dhcp_request_re+0x60>)
 800a540:	f7fd fdc2 	bl	80080c8 <mg_log>
}
 800a544:	bf00      	nop
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	ff030135 	.word	0xff030135
 800a550:	24000240 	.word	0x24000240
 800a554:	0802c164 	.word	0x0802c164
 800a558:	08028ac4 	.word	0x08028ac4
 800a55c:	08029d1c 	.word	0x08029d1c

0800a560 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af04      	add	r7, sp, #16
 800a566:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800a568:	4a14      	ldr	r2, [pc, #80]	@ (800a5bc <tx_dhcp_discover+0x5c>)
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a572:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800a576:	2300      	movs	r3, #0
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	2308      	movs	r3, #8
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	f107 0308 	add.w	r3, r7, #8
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	f04f 33ff 	mov.w	r3, #4294967295
 800a588:	2200      	movs	r2, #0
 800a58a:	490d      	ldr	r1, [pc, #52]	@ (800a5c0 <tx_dhcp_discover+0x60>)
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff feaf 	bl	800a2f0 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800a592:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c4 <tx_dhcp_discover+0x64>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b02      	cmp	r3, #2
 800a598:	dd0c      	ble.n	800a5b4 <tx_dhcp_discover+0x54>
 800a59a:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c8 <tx_dhcp_discover+0x68>)
 800a59c:	f241 5230 	movw	r2, #5424	@ 0x1530
 800a5a0:	490a      	ldr	r1, [pc, #40]	@ (800a5cc <tx_dhcp_discover+0x6c>)
 800a5a2:	2003      	movs	r0, #3
 800a5a4:	f7fd fd40 	bl	8008028 <mg_log_prefix>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4908      	ldr	r1, [pc, #32]	@ (800a5d0 <tx_dhcp_discover+0x70>)
 800a5ae:	4809      	ldr	r0, [pc, #36]	@ (800a5d4 <tx_dhcp_discover+0x74>)
 800a5b0:	f7fd fd8a 	bl	80080c8 <mg_log>
}
 800a5b4:	bf00      	nop
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	08029d68 	.word	0x08029d68
 800a5c0:	0802be4c 	.word	0x0802be4c
 800a5c4:	24000240 	.word	0x24000240
 800a5c8:	0802c178 	.word	0x0802c178
 800a5cc:	08028ac4 	.word	0x08028ac4
 800a5d0:	0800da11 	.word	0x0800da11
 800a5d4:	08029d48 	.word	0x08029d48

0800a5d8 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e057      	b.n	800a6a2 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d010      	beq.n	800a624 <getpeer+0x4c>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00c      	beq.n	800a624 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	f103 000e 	add.w	r0, r3, #14
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	331c      	adds	r3, #28
 800a616:	2204      	movs	r2, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	f01a fbf5 	bl	8024e08 <memcmp>
 800a61e:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800a620:	2b00      	cmp	r3, #0
 800a622:	d042      	beq.n	800a6aa <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00b      	beq.n	800a64c <getpeer+0x74>
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <getpeer+0x74>
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	8b1a      	ldrh	r2, [r3, #24]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a644:	885b      	ldrh	r3, [r3, #2]
 800a646:	b29b      	uxth	r3, r3
 800a648:	429a      	cmp	r2, r3
 800a64a:	d030      	beq.n	800a6ae <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11f      	bne.n	800a69c <getpeer+0xc4>
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01b      	beq.n	800a69c <getpeer+0xc4>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	8b1a      	ldrh	r2, [r3, #24]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	429a      	cmp	r2, r3
 800a672:	d113      	bne.n	800a69c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a67a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a67e:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a680:	79fa      	ldrb	r2, [r7, #7]
 800a682:	429a      	cmp	r2, r3
 800a684:	d10a      	bne.n	800a69c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d111      	bne.n	800a6b0 <getpeer+0xd8>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	b29b      	uxth	r3, r3
 800a698:	429a      	cmp	r2, r3
 800a69a:	d009      	beq.n	800a6b0 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1a4      	bne.n	800a5f2 <getpeer+0x1a>
 800a6a8:	e002      	b.n	800a6b0 <getpeer+0xd8>
      break;
 800a6aa:	bf00      	nop
 800a6ac:	e000      	b.n	800a6b0 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a6ae:	bf00      	nop
      break;
  }
  return c;
 800a6b0:	697b      	ldr	r3, [r7, #20]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a6bc:	b5b0      	push	{r4, r5, r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	b29c      	uxth	r4, r3
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	f00d fa2d 	bl	8017b2e <mg_ntohs>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	429c      	cmp	r4, r3
 800a6d8:	d176      	bne.n	800a7c8 <rx_arp+0x10c>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	699a      	ldr	r2, [r3, #24]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d16f      	bne.n	800a7c8 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	330e      	adds	r3, #14
 800a6f2:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800a6f4:	6978      	ldr	r0, [r7, #20]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	3306      	adds	r3, #6
 800a6fc:	2206      	movs	r2, #6
 800a6fe:	4619      	mov	r1, r3
 800a700:	f01a fcf7 	bl	80250f2 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	3306      	adds	r3, #6
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	2206      	movs	r2, #6
 800a70c:	4618      	mov	r0, r3
 800a70e:	f01a fcf0 	bl	80250f2 <memcpy>
    eth->type = mg_htons(0x806);
 800a712:	f640 0006 	movw	r0, #2054	@ 0x806
 800a716:	f00d fa0a 	bl	8017b2e <mg_ntohs>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	6814      	ldr	r4, [r2, #0]
 800a72a:	6850      	ldr	r0, [r2, #4]
 800a72c:	6891      	ldr	r1, [r2, #8]
 800a72e:	68d5      	ldr	r5, [r2, #12]
 800a730:	601c      	str	r4, [r3, #0]
 800a732:	6058      	str	r0, [r3, #4]
 800a734:	6099      	str	r1, [r3, #8]
 800a736:	60dd      	str	r5, [r3, #12]
 800a738:	6914      	ldr	r4, [r2, #16]
 800a73a:	6950      	ldr	r0, [r2, #20]
 800a73c:	6991      	ldr	r1, [r2, #24]
 800a73e:	611c      	str	r4, [r3, #16]
 800a740:	6158      	str	r0, [r3, #20]
 800a742:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800a744:	2002      	movs	r0, #2
 800a746:	f00d f9f2 	bl	8017b2e <mg_ntohs>
 800a74a:	4603      	mov	r3, r0
 800a74c:	461a      	mov	r2, r3
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f103 0012 	add.w	r0, r3, #18
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	3308      	adds	r3, #8
 800a75e:	2206      	movs	r2, #6
 800a760:	4619      	mov	r1, r3
 800a762:	f01a fcc6 	bl	80250f2 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3308      	adds	r3, #8
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	2206      	movs	r2, #6
 800a76e:	4618      	mov	r0, r3
 800a770:	f01a fcbf 	bl	80250f2 <memcpy>
    arp->tpa = pkt->arp->spa;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800a78a:	4b4e      	ldr	r3, [pc, #312]	@ (800a8c4 <rx_arp+0x208>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	dd10      	ble.n	800a7b4 <rx_arp+0xf8>
 800a792:	4b4d      	ldr	r3, [pc, #308]	@ (800a8c8 <rx_arp+0x20c>)
 800a794:	f241 5254 	movw	r2, #5460	@ 0x1554
 800a798:	494c      	ldr	r1, [pc, #304]	@ (800a8cc <rx_arp+0x210>)
 800a79a:	2003      	movs	r0, #3
 800a79c:	f7fd fc44 	bl	8008028 <mg_log_prefix>
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f103 0218 	add.w	r2, r3, #24
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4b49      	ldr	r3, [pc, #292]	@ (800a8d0 <rx_arp+0x214>)
 800a7ac:	4949      	ldr	r1, [pc, #292]	@ (800a8d4 <rx_arp+0x218>)
 800a7ae:	484a      	ldr	r0, [pc, #296]	@ (800a8d8 <rx_arp+0x21c>)
 800a7b0:	f7fd fc8a 	bl	80080c8 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f103 021c 	add.w	r2, r3, #28
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff fba7 	bl	8009f14 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a7c6:	e079      	b.n	800a8bc <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	88db      	ldrh	r3, [r3, #6]
 800a7ce:	b29c      	uxth	r4, r3
 800a7d0:	2002      	movs	r0, #2
 800a7d2:	f00d f9ac 	bl	8017b2e <mg_ntohs>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	d16f      	bne.n	800a8bc <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	3312      	adds	r3, #18
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	2206      	movs	r2, #6
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f01a fb0e 	bl	8024e08 <memcmp>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d163      	bne.n	800a8ba <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d116      	bne.n	800a830 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	3308      	adds	r3, #8
 800a80e:	2206      	movs	r2, #6
 800a810:	4619      	mov	r1, r3
 800a812:	f01a fc6e 	bl	80250f2 <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d14d      	bne.n	800a8bc <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2204      	movs	r2, #4
 800a824:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        onstatechange(ifp);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff fbf7 	bl	800a01c <onstatechange>
 800a82e:	e045      	b.n	800a8bc <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a834:	2200      	movs	r2, #0
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	4618      	mov	r0, r3
 800a83a:	f7ff fecd 	bl	800a5d8 <getpeer>
 800a83e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d03a      	beq.n	800a8bc <rx_arp+0x200>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d032      	beq.n	800a8bc <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	33b0      	adds	r3, #176	@ 0xb0
 800a85a:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f103 0018 	add.w	r0, r3, #24
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	3308      	adds	r3, #8
 800a868:	2206      	movs	r2, #6
 800a86a:	4619      	mov	r1, r3
 800a86c:	f01a fc41 	bl	80250f2 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800a870:	4b14      	ldr	r3, [pc, #80]	@ (800a8c4 <rx_arp+0x208>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b02      	cmp	r3, #2
 800a876:	dd15      	ble.n	800a8a4 <rx_arp+0x1e8>
 800a878:	4b13      	ldr	r3, [pc, #76]	@ (800a8c8 <rx_arp+0x20c>)
 800a87a:	f241 5265 	movw	r2, #5477	@ 0x1565
 800a87e:	4913      	ldr	r1, [pc, #76]	@ (800a8cc <rx_arp+0x210>)
 800a880:	2003      	movs	r0, #3
 800a882:	f7fd fbd1 	bl	8008028 <mg_log_prefix>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f103 021c 	add.w	r2, r3, #28
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	3318      	adds	r3, #24
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d0 <rx_arp+0x214>)
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	4613      	mov	r3, r2
 800a89c:	4a0d      	ldr	r2, [pc, #52]	@ (800a8d4 <rx_arp+0x218>)
 800a89e:	480f      	ldr	r0, [pc, #60]	@ (800a8dc <rx_arp+0x220>)
 800a8a0:	f7fd fc12 	bl	80080c8 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800a8aa:	f36f 1304 	bfc	r3, #4, #1
 800a8ae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f002 f959 	bl	800cb6a <mac_resolved>
 800a8b8:	e000      	b.n	800a8bc <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a8ba:	bf00      	nop
      }
    }
  }
}
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	24000240 	.word	0x24000240
 800a8c8:	0802c18c 	.word	0x0802c18c
 800a8cc:	08028ac4 	.word	0x08028ac4
 800a8d0:	0800da11 	.word	0x0800da11
 800a8d4:	0800d94d 	.word	0x0800d94d
 800a8d8:	08029d70 	.word	0x08029d70
 800a8dc:	08029d88 	.word	0x08029d88

0800a8e0 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08a      	sub	sp, #40	@ 0x28
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d14d      	bne.n	800a990 <rx_icmp+0xb0>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d049      	beq.n	800a990 <rx_icmp+0xb0>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	691a      	ldr	r2, [r3, #16]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	429a      	cmp	r2, r3
 800a908:	d142      	bne.n	800a990 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800a90a:	2326      	movs	r3, #38	@ 0x26
 800a90c:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699a      	ldr	r2, [r3, #24]
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800a91e:	69fa      	ldr	r2, [r7, #28]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	429a      	cmp	r2, r3
 800a924:	d901      	bls.n	800a92a <rx_icmp+0x4a>
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	1d99      	adds	r1, r3, #6
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6898      	ldr	r0, [r3, #8]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	69db      	ldr	r3, [r3, #28]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	69fa      	ldr	r2, [r7, #28]
 800a93c:	3204      	adds	r2, #4
 800a93e:	9201      	str	r2, [sp, #4]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	4603      	mov	r3, r0
 800a944:	2201      	movs	r2, #1
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff fc12 	bl	800a170 <tx_ip>
 800a94c:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	3314      	adds	r3, #20
 800a952:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800a954:	2204      	movs	r2, #4
 800a956:	2100      	movs	r1, #0
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f01a fa7f 	bl	8024e5c <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	1d18      	adds	r0, r3, #4
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	4619      	mov	r1, r3
 800a96a:	f01a fbc2 	bl	80250f2 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	3304      	adds	r3, #4
 800a972:	4619      	mov	r1, r3
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f7ff fa5d 	bl	8009e34 <ipcsum>
 800a97a:	4603      	mov	r3, r0
 800a97c:	461a      	mov	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	4413      	add	r3, r2
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff fac2 	bl	8009f14 <ether_output>
  }
}
 800a990:	bf00      	nop
 800a992:	3720      	adds	r7, #32
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a99c:	b090      	sub	sp, #64	@ 0x40
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	623b      	str	r3, [r7, #32]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a9c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d0:	33f0      	adds	r3, #240	@ 0xf0
 800a9d2:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a9e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	f0c0 81ac 	bcc.w	800ad48 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f4:	1d18      	adds	r0, r3, #4
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	2204      	movs	r2, #4
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f01a fa03 	bl	8024e08 <memcmp>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 81a1 	bne.w	800ad4c <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800aa0a:	e08a      	b.n	800ab22 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d10e      	bne.n	800aa32 <rx_dhcp_client+0x9a>
 800aa14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa16:	3301      	adds	r3, #1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d109      	bne.n	800aa32 <rx_dhcp_client+0x9a>
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa20:	3306      	adds	r3, #6
 800aa22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d904      	bls.n	800aa32 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800aa28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2a:	3302      	adds	r3, #2
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa30:	e070      	b.n	800ab14 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800aa32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d112      	bne.n	800aa60 <rx_dhcp_client+0xc8>
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d10d      	bne.n	800aa60 <rx_dhcp_client+0xc8>
 800aa44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa46:	3306      	adds	r3, #6
 800aa48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d908      	bls.n	800aa60 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800aa4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa50:	3302      	adds	r3, #2
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa5e:	e059      	b.n	800ab14 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	7fdb      	ldrb	r3, [r3, #31]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d012      	beq.n	800aa8e <rx_dhcp_client+0xf6>
 800aa68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b06      	cmp	r3, #6
 800aa6e:	d10e      	bne.n	800aa8e <rx_dhcp_client+0xf6>
 800aa70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa72:	3301      	adds	r3, #1
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d109      	bne.n	800aa8e <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7c:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800aa7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d904      	bls.n	800aa8e <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	3302      	adds	r3, #2
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	61fb      	str	r3, [r7, #28]
 800aa8c:	e042      	b.n	800ab14 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d012      	beq.n	800aabe <rx_dhcp_client+0x126>
 800aa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa9e:	d10e      	bne.n	800aabe <rx_dhcp_client+0x126>
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d109      	bne.n	800aabe <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaac:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800aaae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d904      	bls.n	800aabe <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800aab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab6:	3302      	adds	r3, #2
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	61bb      	str	r3, [r7, #24]
 800aabc:	e02a      	b.n	800ab14 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800aabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b33      	cmp	r3, #51	@ 0x33
 800aac4:	d114      	bne.n	800aaf0 <rx_dhcp_client+0x158>
 800aac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac8:	3301      	adds	r3, #1
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d10f      	bne.n	800aaf0 <rx_dhcp_client+0x158>
 800aad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad2:	3306      	adds	r3, #6
 800aad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d90a      	bls.n	800aaf0 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800aada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aadc:	3302      	adds	r3, #2
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f00d f809 	bl	8017afc <mg_ntohl>
 800aaea:	4603      	mov	r3, r0
 800aaec:	623b      	str	r3, [r7, #32]
 800aaee:	e011      	b.n	800ab14 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b35      	cmp	r3, #53	@ 0x35
 800aaf6:	d10d      	bne.n	800ab14 <rx_dhcp_client+0x17c>
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	3301      	adds	r3, #1
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d108      	bne.n	800ab14 <rx_dhcp_client+0x17c>
 800ab02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab04:	3306      	adds	r3, #6
 800ab06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d903      	bls.n	800ab14 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0e:	789b      	ldrb	r3, [r3, #2]
 800ab10:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800ab14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab16:	3301      	adds	r3, #1
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	3302      	adds	r3, #2
 800ab1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab1e:	4413      	add	r3, r2
 800ab20:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab24:	3301      	adds	r3, #1
 800ab26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d904      	bls.n	800ab36 <rx_dhcp_client+0x19e>
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2bff      	cmp	r3, #255	@ 0xff
 800ab32:	f47f af6b 	bne.w	800aa0c <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800ab36:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ab3a:	2b06      	cmp	r3, #6
 800ab3c:	d10c      	bne.n	800ab58 <rx_dhcp_client+0x1c0>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d107      	bne.n	800ab58 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	609a      	str	r2, [r3, #8]
 800ab56:	e0ec      	b.n	800ad32 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800ab58:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d123      	bne.n	800aba8 <rx_dhcp_client+0x210>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d11e      	bne.n	800aba8 <rx_dhcp_client+0x210>
 800ab6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01b      	beq.n	800aba8 <rx_dhcp_client+0x210>
 800ab70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d018      	beq.n	800aba8 <rx_dhcp_client+0x210>
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d015      	beq.n	800aba8 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab80:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	e002      	b.n	800ab94 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fc39 	bl	800a410 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2202      	movs	r2, #2
 800aba2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800aba6:	e0c4      	b.n	800ad32 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800aba8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800abac:	2b05      	cmp	r3, #5
 800abae:	f040 80c0 	bne.w	800ad32 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800abb8:	2b02      	cmp	r3, #2
 800abba:	f040 8081 	bne.w	800acc0 <rx_dhcp_client+0x328>
 800abbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d07d      	beq.n	800acc0 <rx_dhcp_client+0x328>
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d07a      	beq.n	800acc0 <rx_dhcp_client+0x328>
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d077      	beq.n	800acc0 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800abd6:	6a39      	ldr	r1, [r7, #32]
 800abd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800abdc:	fb00 f101 	mul.w	r1, r0, r1
 800abe0:	2000      	movs	r0, #0
 800abe2:	4688      	mov	r8, r1
 800abe4:	4681      	mov	r9, r0
 800abe6:	eb12 0108 	adds.w	r1, r2, r8
 800abea:	6039      	str	r1, [r7, #0]
 800abec:	eb43 0309 	adc.w	r3, r3, r9
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abf8:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800abfc:	4b56      	ldr	r3, [pc, #344]	@ (800ad58 <rx_dhcp_client+0x3c0>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	dd16      	ble.n	800ac32 <rx_dhcp_client+0x29a>
 800ac04:	4b55      	ldr	r3, [pc, #340]	@ (800ad5c <rx_dhcp_client+0x3c4>)
 800ac06:	f241 52a6 	movw	r2, #5542	@ 0x15a6
 800ac0a:	4955      	ldr	r1, [pc, #340]	@ (800ad60 <rx_dhcp_client+0x3c8>)
 800ac0c:	2002      	movs	r0, #2
 800ac0e:	f7fd fa0b 	bl	8008028 <mg_log_prefix>
 800ac12:	6a3c      	ldr	r4, [r7, #32]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800ac1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac1e:	f04f 0300 	mov.w	r3, #0
 800ac22:	f7f5 fdd1 	bl	80007c8 <__aeabi_uldivmod>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	484d      	ldr	r0, [pc, #308]	@ (800ad64 <rx_dhcp_client+0x3cc>)
 800ac2e:	f7fd fa4b 	bl	80080c8 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	3306      	adds	r3, #6
 800ac3e:	2206      	movs	r2, #6
 800ac40:	4619      	mov	r1, r3
 800ac42:	f01a fa56 	bl	80250f2 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac4a:	609a      	str	r2, [r3, #8]
 800ac4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	611a      	str	r2, [r3, #16]
 800ac52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2203      	movs	r2, #3
 800ac5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800ac60:	f107 0310 	add.w	r3, r7, #16
 800ac64:	2108      	movs	r1, #8
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7f6 f95c 	bl	8000f24 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800ac6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac70:	4614      	mov	r4, r2
 800ac72:	f7f6 f985 	bl	8000f80 <mg_millis>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	4423      	add	r3, r4
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f018 ff16 	bl	8023ab0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	7fdb      	ldrb	r3, [r3, #31]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d009      	beq.n	800aca0 <rx_dhcp_client+0x308>
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800ac92:	f107 031c 	add.w	r3, r7, #28
 800ac96:	461a      	mov	r2, r3
 800ac98:	2101      	movs	r1, #1
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff f852 	bl	8009d44 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d042      	beq.n	800ad30 <rx_dhcp_client+0x398>
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d03f      	beq.n	800ad30 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800acb0:	f107 0318 	add.w	r3, r7, #24
 800acb4:	461a      	mov	r2, r3
 800acb6:	2102      	movs	r1, #2
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff f843 	bl	8009d44 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800acbe:	e037      	b.n	800ad30 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	d133      	bne.n	800ad32 <rx_dhcp_client+0x39a>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d12e      	bne.n	800ad32 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800acda:	6a39      	ldr	r1, [r7, #32]
 800acdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ace0:	fb00 f101 	mul.w	r1, r0, r1
 800ace4:	2000      	movs	r0, #0
 800ace6:	460c      	mov	r4, r1
 800ace8:	4605      	mov	r5, r0
 800acea:	eb12 0a04 	adds.w	sl, r2, r4
 800acee:	eb43 0b05 	adc.w	fp, r3, r5
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800acf8:	4b17      	ldr	r3, [pc, #92]	@ (800ad58 <rx_dhcp_client+0x3c0>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	dd18      	ble.n	800ad32 <rx_dhcp_client+0x39a>
 800ad00:	4b16      	ldr	r3, [pc, #88]	@ (800ad5c <rx_dhcp_client+0x3c4>)
 800ad02:	f241 52b4 	movw	r2, #5556	@ 0x15b4
 800ad06:	4916      	ldr	r1, [pc, #88]	@ (800ad60 <rx_dhcp_client+0x3c8>)
 800ad08:	2002      	movs	r0, #2
 800ad0a:	f7fd f98d 	bl	8008028 <mg_log_prefix>
 800ad0e:	6a3c      	ldr	r4, [r7, #32]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800ad16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad1a:	f04f 0300 	mov.w	r3, #0
 800ad1e:	f7f5 fd53 	bl	80007c8 <__aeabi_uldivmod>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4621      	mov	r1, r4
 800ad28:	480e      	ldr	r0, [pc, #56]	@ (800ad64 <rx_dhcp_client+0x3cc>)
 800ad2a:	f7fd f9cd 	bl	80080c8 <mg_log>
 800ad2e:	e000      	b.n	800ad32 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800ad30:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ad38:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d006      	beq.n	800ad4e <rx_dhcp_client+0x3b6>
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7ff f96b 	bl	800a01c <onstatechange>
 800ad46:	e002      	b.n	800ad4e <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ad48:	bf00      	nop
 800ad4a:	e000      	b.n	800ad4e <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ad4c:	bf00      	nop
}
 800ad4e:	3740      	adds	r7, #64	@ 0x40
 800ad50:	46bd      	mov	sp, r7
 800ad52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad56:	bf00      	nop
 800ad58:	24000240 	.word	0x24000240
 800ad5c:	0802c194 	.word	0x0802c194
 800ad60:	08028ac4 	.word	0x08028ac4
 800ad64:	08029da4 	.word	0x08029da4

0800ad68 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	b0d6      	sub	sp, #344	@ 0x158
 800ad6e:	af04      	add	r7, sp, #16
 800ad70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ad78:	6018      	str	r0, [r3, #0]
 800ad7a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad7e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ad82:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800ad84:	2300      	movs	r3, #0
 800ad86:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800ad8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad8e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad96:	33f0      	adds	r3, #240	@ 0xf0
 800ad98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800ad9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ada0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	4413      	add	r3, r2
 800adb6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800adba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adbe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800adca:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800adce:	429a      	cmp	r2, r3
 800add0:	f0c0 81b0 	bcc.w	800b134 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800add4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800add8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800addc:	4ad8      	ldr	r2, [pc, #864]	@ (800b140 <rx_dhcp_server+0x3d8>)
 800adde:	4618      	mov	r0, r3
 800ade0:	4611      	mov	r1, r2
 800ade2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ade6:	461a      	mov	r2, r3
 800ade8:	f01a f983 	bl	80250f2 <memcpy>
  res.yiaddr = ifp->ip;
 800adec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adf0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adfc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ae00:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800ae02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ae06:	3310      	adds	r3, #16
 800ae08:	3303      	adds	r3, #3
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	3201      	adds	r2, #1
 800ae0e:	b2d2      	uxtb	r2, r2
 800ae10:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ae12:	e020      	b.n	800ae56 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800ae14:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b35      	cmp	r3, #53	@ 0x35
 800ae1c:	d111      	bne.n	800ae42 <rx_dhcp_server+0xda>
 800ae1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae22:	3301      	adds	r3, #1
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d10b      	bne.n	800ae42 <rx_dhcp_server+0xda>
 800ae2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae2e:	3302      	adds	r3, #2
 800ae30:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d904      	bls.n	800ae42 <rx_dhcp_server+0xda>
      op = p[2];
 800ae38:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae3c:	789b      	ldrb	r3, [r3, #2]
 800ae3e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 800ae42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae46:	3301      	adds	r3, #1
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800ae50:	4413      	add	r3, r2
 800ae52:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ae56:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d904      	bls.n	800ae6e <rx_dhcp_server+0x106>
 800ae64:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2bff      	cmp	r3, #255	@ 0xff
 800ae6c:	d1d2      	bne.n	800ae14 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800ae6e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d004      	beq.n	800ae80 <rx_dhcp_server+0x118>
 800ae76:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	f040 815b 	bne.w	800b136 <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800ae80:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d101      	bne.n	800ae8c <rx_dhcp_server+0x124>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e000      	b.n	800ae8e <rx_dhcp_server+0x126>
 800ae8c:	2305      	movs	r3, #5
 800ae8e:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 800ae92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae9a:	2235      	movs	r2, #53	@ 0x35
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aea2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aea6:	2201      	movs	r2, #1
 800aea8:	705a      	strb	r2, [r3, #1]
 800aeaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aeae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aeb2:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800aeb6:	709a      	strb	r2, [r3, #2]
 800aeb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aebc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aec0:	2201      	movs	r2, #1
 800aec2:	70da      	strb	r2, [r3, #3]
 800aec4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aec8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aecc:	2204      	movs	r2, #4
 800aece:	711a      	strb	r2, [r3, #4]
 800aed0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aed4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aed8:	2200      	movs	r2, #0
 800aeda:	715a      	strb	r2, [r3, #5]
 800aedc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aee0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aee4:	2200      	movs	r2, #0
 800aee6:	719a      	strb	r2, [r3, #6]
 800aee8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aeec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aef0:	2200      	movs	r2, #0
 800aef2:	71da      	strb	r2, [r3, #7]
 800aef4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aef8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aefc:	2200      	movs	r2, #0
 800aefe:	721a      	strb	r2, [r3, #8]
 800af00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af08:	2236      	movs	r2, #54	@ 0x36
 800af0a:	725a      	strb	r2, [r3, #9]
 800af0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af14:	2204      	movs	r2, #4
 800af16:	729a      	strb	r2, [r3, #10]
 800af18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af20:	2200      	movs	r2, #0
 800af22:	72da      	strb	r2, [r3, #11]
 800af24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af2c:	2200      	movs	r2, #0
 800af2e:	731a      	strb	r2, [r3, #12]
 800af30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af38:	2200      	movs	r2, #0
 800af3a:	735a      	strb	r2, [r3, #13]
 800af3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af44:	2200      	movs	r2, #0
 800af46:	739a      	strb	r2, [r3, #14]
 800af48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af50:	220c      	movs	r2, #12
 800af52:	73da      	strb	r2, [r3, #15]
 800af54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af5c:	2203      	movs	r2, #3
 800af5e:	741a      	strb	r2, [r3, #16]
 800af60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af68:	226d      	movs	r2, #109	@ 0x6d
 800af6a:	745a      	strb	r2, [r3, #17]
 800af6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af74:	2269      	movs	r2, #105	@ 0x69
 800af76:	749a      	strb	r2, [r3, #18]
 800af78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af80:	2270      	movs	r2, #112	@ 0x70
 800af82:	74da      	strb	r2, [r3, #19]
 800af84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af8c:	2233      	movs	r2, #51	@ 0x33
 800af8e:	751a      	strb	r2, [r3, #20]
 800af90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af98:	2204      	movs	r2, #4
 800af9a:	755a      	strb	r2, [r3, #21]
 800af9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afa0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afa4:	22ff      	movs	r2, #255	@ 0xff
 800afa6:	759a      	strb	r2, [r3, #22]
 800afa8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afb0:	22ff      	movs	r2, #255	@ 0xff
 800afb2:	75da      	strb	r2, [r3, #23]
 800afb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afbc:	22ff      	movs	r2, #255	@ 0xff
 800afbe:	761a      	strb	r2, [r3, #24]
 800afc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afc8:	22ff      	movs	r2, #255	@ 0xff
 800afca:	765a      	strb	r2, [r3, #25]
 800afcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afd4:	22ff      	movs	r2, #255	@ 0xff
 800afd6:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800afd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe4:	f103 011c 	add.w	r1, r3, #28
 800afe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800afec:	331c      	adds	r3, #28
 800afee:	2206      	movs	r2, #6
 800aff0:	4618      	mov	r0, r3
 800aff2:	f01a f87e 	bl	80250f2 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800aff6:	f107 030c 	add.w	r3, r7, #12
 800affa:	3305      	adds	r3, #5
 800affc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800b000:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800b004:	6812      	ldr	r2, [r2, #0]
 800b006:	320c      	adds	r2, #12
 800b008:	6812      	ldr	r2, [r2, #0]
 800b00a:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	330b      	adds	r3, #11
 800b012:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800b016:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800b01a:	6812      	ldr	r2, [r2, #0]
 800b01c:	3208      	adds	r2, #8
 800b01e:	6812      	ldr	r2, [r2, #0]
 800b020:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800b022:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b026:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b02a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800b02e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800b032:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800b036:	4615      	mov	r5, r2
 800b038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b03a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b040:	c403      	stmia	r4!, {r0, r1}
 800b042:	8022      	strh	r2, [r4, #0]
 800b044:	3402      	adds	r4, #2
 800b046:	0c13      	lsrs	r3, r2, #16
 800b048:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800b04a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b04e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b056:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800b05a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b05e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b062:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800b066:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b06a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b078:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b07c:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800b07e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b082:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	7f9b      	ldrb	r3, [r3, #30]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01c      	beq.n	800b0c8 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800b08e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b092:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b09c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800b0a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b0a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800b0b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b0b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	3306      	adds	r3, #6
 800b0c0:	2206      	movs	r2, #6
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	f01a f815 	bl	80250f2 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800b0c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b0cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	1d9d      	adds	r5, r3, #6
 800b0d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b0da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689e      	ldr	r6, [r3, #8]
 800b0e2:	2043      	movs	r0, #67	@ 0x43
 800b0e4:	f00c fd23 	bl	8017b2e <mg_ntohs>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	4698      	mov	r8, r3
 800b0ec:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d005      	beq.n	800b100 <rx_dhcp_server+0x398>
 800b0f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b0f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b0fc:	691c      	ldr	r4, [r3, #16]
 800b0fe:	e001      	b.n	800b104 <rx_dhcp_server+0x39c>
 800b100:	f04f 34ff 	mov.w	r4, #4294967295
 800b104:	2044      	movs	r0, #68	@ 0x44
 800b106:	f00c fd12 	bl	8017b2e <mg_ntohs>
 800b10a:	4603      	mov	r3, r0
 800b10c:	461a      	mov	r2, r3
 800b10e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b112:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 800b116:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	9201      	str	r2, [sp, #4]
 800b124:	9400      	str	r4, [sp, #0]
 800b126:	4643      	mov	r3, r8
 800b128:	4632      	mov	r2, r6
 800b12a:	4629      	mov	r1, r5
 800b12c:	6800      	ldr	r0, [r0, #0]
 800b12e:	f7ff f876 	bl	800a21e <tx_udp>
 800b132:	e000      	b.n	800b136 <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800b134:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800b136:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800b13a:	46bd      	mov	sp, r7
 800b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b140:	08029dbc 	.word	0x08029dbc

0800b144 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b152:	2201      	movs	r2, #1
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fa3e 	bl	800a5d8 <getpeer>
 800b15c:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d059      	beq.n	800b218 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	331c      	adds	r3, #28
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	69d2      	ldr	r2, [r2, #28]
 800b178:	320c      	adds	r2, #12
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	33b0      	adds	r3, #176	@ 0xb0
 800b182:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	f103 0018 	add.w	r0, r3, #24
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	3306      	adds	r3, #6
 800b190:	2206      	movs	r2, #6
 800b192:	4619      	mov	r1, r3
 800b194:	f019 ffad 	bl	80250f2 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1a0:	d304      	bcc.n	800b1ac <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800b1a2:	491f      	ldr	r1, [pc, #124]	@ (800b220 <rx_udp+0xdc>)
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7f7 fc53 	bl	8002a50 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800b1aa:	e035      	b.n	800b218 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b4:	1ad2      	subs	r2, r2, r3
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d212      	bcs.n	800b1e4 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	f7fb ff5c 	bl	800708c <mg_iobuf_resize>
 800b1d4:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d104      	bne.n	800b1e4 <rx_udp+0xa0>
      mg_error(c, "oom");
 800b1da:	4912      	ldr	r1, [pc, #72]	@ (800b224 <rx_udp+0xe0>)
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7f7 fc37 	bl	8002a50 <mg_error>
}
 800b1e2:	e019      	b.n	800b218 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ec:	18d0      	adds	r0, r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6899      	ldr	r1, [r3, #8]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	f019 ff7b 	bl	80250f2 <memcpy>
      c->recv.len += pkt->pay.len;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	441a      	add	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	330c      	adds	r3, #12
 800b20e:	461a      	mov	r2, r3
 800b210:	2107      	movs	r1, #7
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7f7 fbfc 	bl	8002a10 <mg_call>
}
 800b218:	bf00      	nop
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	08029ecc 	.word	0x08029ecc
 800b224:	08029ee8 	.word	0x08029ee8

0800b228 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b22a:	b091      	sub	sp, #68	@ 0x44
 800b22c:	af06      	add	r7, sp, #24
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	689a      	ldr	r2, [r3, #8]
 800b23a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b23c:	3314      	adds	r3, #20
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4613      	mov	r3, r2
 800b246:	2206      	movs	r2, #6
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7fe ff90 	bl	800a170 <tx_ip>
 800b250:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	3314      	adds	r3, #20
 800b256:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800b258:	2214      	movs	r2, #20
 800b25a:	2100      	movs	r1, #0
 800b25c:	6a38      	ldr	r0, [r7, #32]
 800b25e:	f019 fdfd 	bl	8024e5c <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800b262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <tx_tcp+0x54>
 800b268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d006      	beq.n	800b27c <tx_tcp+0x54>
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	3314      	adds	r3, #20
 800b272:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b274:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b276:	4618      	mov	r0, r3
 800b278:	f019 fdd6 	bl	8024e28 <memmove>
  tcp->sport = sport;
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b282:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b28a:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b290:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b296:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	78fa      	ldrb	r2, [r7, #3]
 800b29c:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800b29e:	f241 7070 	movw	r0, #6000	@ 0x1770
 800b2a2:	f00c fc44 	bl	8017b2e <mg_ntohs>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	2250      	movs	r2, #80	@ 0x50
 800b2b2:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800b2b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3314      	adds	r3, #20
 800b2be:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	753b      	strb	r3, [r7, #20]
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c6:	7a5b      	ldrb	r3, [r3, #9]
 800b2c8:	757b      	strb	r3, [r7, #21]
 800b2ca:	8b7b      	ldrh	r3, [r7, #26]
 800b2cc:	0a1b      	lsrs	r3, r3, #8
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	75bb      	strb	r3, [r7, #22]
 800b2d4:	8b7b      	ldrh	r3, [r7, #26]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800b2da:	8b7b      	ldrh	r3, [r7, #26]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6a39      	ldr	r1, [r7, #32]
 800b2e0:	69f8      	ldr	r0, [r7, #28]
 800b2e2:	f7fe fd61 	bl	8009da8 <csumup>
 800b2e6:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	330c      	adds	r3, #12
 800b2ec:	2204      	movs	r2, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	69f8      	ldr	r0, [r7, #28]
 800b2f2:	f7fe fd59 	bl	8009da8 <csumup>
 800b2f6:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	3310      	adds	r3, #16
 800b2fc:	2204      	movs	r2, #4
 800b2fe:	4619      	mov	r1, r3
 800b300:	69f8      	ldr	r0, [r7, #28]
 800b302:	f7fe fd51 	bl	8009da8 <csumup>
 800b306:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	2204      	movs	r2, #4
 800b30e:	4619      	mov	r1, r3
 800b310:	69f8      	ldr	r0, [r7, #28]
 800b312:	f7fe fd49 	bl	8009da8 <csumup>
 800b316:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800b318:	69f8      	ldr	r0, [r7, #28]
 800b31a:	f7fe fd70 	bl	8009dfe <csumfin>
 800b31e:	4603      	mov	r3, r0
 800b320:	461a      	mov	r2, r3
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800b326:	4b21      	ldr	r3, [pc, #132]	@ (800b3ac <tx_tcp+0x184>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	dd2c      	ble.n	800b388 <tx_tcp+0x160>
 800b32e:	4b20      	ldr	r3, [pc, #128]	@ (800b3b0 <tx_tcp+0x188>)
 800b330:	f241 6219 	movw	r2, #5657	@ 0x1619
 800b334:	491f      	ldr	r1, [pc, #124]	@ (800b3b4 <tx_tcp+0x18c>)
 800b336:	2004      	movs	r0, #4
 800b338:	f7fc fe76 	bl	8008028 <mg_log_prefix>
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	f103 050c 	add.w	r5, r3, #12
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	b29b      	uxth	r3, r3
 800b348:	4618      	mov	r0, r3
 800b34a:	f00c fbf0 	bl	8017b2e <mg_ntohs>
 800b34e:	4603      	mov	r3, r0
 800b350:	461e      	mov	r6, r3
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	f103 0410 	add.w	r4, r3, #16
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	885b      	ldrh	r3, [r3, #2]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	4618      	mov	r0, r3
 800b360:	f00c fbe5 	bl	8017b2e <mg_ntohs>
 800b364:	4603      	mov	r3, r0
 800b366:	461a      	mov	r2, r3
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	7b5b      	ldrb	r3, [r3, #13]
 800b36c:	4619      	mov	r1, r3
 800b36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	9103      	str	r1, [sp, #12]
 800b374:	9202      	str	r2, [sp, #8]
 800b376:	9401      	str	r4, [sp, #4]
 800b378:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b8 <tx_tcp+0x190>)
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	4633      	mov	r3, r6
 800b37e:	462a      	mov	r2, r5
 800b380:	490d      	ldr	r1, [pc, #52]	@ (800b3b8 <tx_tcp+0x190>)
 800b382:	480e      	ldr	r0, [pc, #56]	@ (800b3bc <tx_tcp+0x194>)
 800b384:	f7fc fea0 	bl	80080c8 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	f103 0214 	add.w	r2, r3, #20
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	461a      	mov	r2, r3
 800b396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b398:	4413      	add	r3, r2
 800b39a:	4619      	mov	r1, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7fe fdb9 	bl	8009f14 <ether_output>
 800b3a2:	4603      	mov	r3, r0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	372c      	adds	r7, #44	@ 0x2c
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ac:	24000240 	.word	0x24000240
 800b3b0:	0802c1a4 	.word	0x0802c1a4
 800b3b4:	08028ac4 	.word	0x08028ac4
 800b3b8:	0800d94d 	.word	0x0800d94d
 800b3bc:	08029eec 	.word	0x08029eec

0800b3c0 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c4:	b08c      	sub	sp, #48	@ 0x30
 800b3c6:	af06      	add	r7, sp, #24
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	603b      	str	r3, [r7, #0]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d6:	7b5b      	ldrb	r3, [r3, #13]
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bf14      	ite	ne
 800b3e0:	2301      	movne	r3, #1
 800b3e2:	2300      	moveq	r3, #0
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	1d9e      	adds	r6, r3, #6
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	69db      	ldr	r3, [r3, #28]
 800b3f2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fa:	885b      	ldrh	r3, [r3, #2]
 800b3fc:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f00c fb75 	bl	8017afc <mg_ntohl>
 800b412:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	4413      	add	r3, r2
 800b418:	4618      	mov	r0, r3
 800b41a:	f00c fb6f 	bl	8017afc <mg_ntohl>
 800b41e:	4601      	mov	r1, r0
 800b420:	79fa      	ldrb	r2, [r7, #7]
 800b422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b424:	9305      	str	r3, [sp, #20]
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	9103      	str	r1, [sp, #12]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	9302      	str	r3, [sp, #8]
 800b430:	9501      	str	r5, [sp, #4]
 800b432:	9400      	str	r4, [sp, #0]
 800b434:	4613      	mov	r3, r2
 800b436:	4642      	mov	r2, r8
 800b438:	4631      	mov	r1, r6
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f7ff fef4 	bl	800b228 <tx_tcp>
 800b440:	4603      	mov	r3, r0
                buf, len);
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b44c <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800b44c:	b5b0      	push	{r4, r5, r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe f9f3 	bl	8009846 <mg_alloc_conn>
 800b460:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10f      	bne.n	800b488 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800b468:	4b4e      	ldr	r3, [pc, #312]	@ (800b5a4 <accept_conn+0x158>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd09      	ble.n	800b484 <accept_conn+0x38>
 800b470:	4b4d      	ldr	r3, [pc, #308]	@ (800b5a8 <accept_conn+0x15c>)
 800b472:	f241 622d 	movw	r2, #5677	@ 0x162d
 800b476:	494d      	ldr	r1, [pc, #308]	@ (800b5ac <accept_conn+0x160>)
 800b478:	2001      	movs	r0, #1
 800b47a:	f7fc fdd5 	bl	8008028 <mg_log_prefix>
 800b47e:	484c      	ldr	r0, [pc, #304]	@ (800b5b0 <accept_conn+0x164>)
 800b480:	f7fc fe22 	bl	80080c8 <mg_log>
    return NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	e088      	b.n	800b59a <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	33b0      	adds	r3, #176	@ 0xb0
 800b48c:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	4618      	mov	r0, r3
 800b496:	f00c fb31 	bl	8017afc <mg_ntohl>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f00c fb28 	bl	8017afc <mg_ntohl>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f103 0018 	add.w	r0, r3, #24
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	3306      	adds	r3, #6
 800b4be:	2206      	movs	r2, #6
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f019 fe16 	bl	80250f2 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f7fe fcc7 	bl	8009e5c <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	331c      	adds	r3, #28
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	69d2      	ldr	r2, [r2, #28]
 800b4d6:	320c      	adds	r2, #12
 800b4d8:	6812      	ldr	r2, [r2, #0]
 800b4da:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800b4e8:	4b2e      	ldr	r3, [pc, #184]	@ (800b5a4 <accept_conn+0x158>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	dd0e      	ble.n	800b50e <accept_conn+0xc2>
 800b4f0:	4b2d      	ldr	r3, [pc, #180]	@ (800b5a8 <accept_conn+0x15c>)
 800b4f2:	f241 6236 	movw	r2, #5686	@ 0x1636
 800b4f6:	492d      	ldr	r1, [pc, #180]	@ (800b5ac <accept_conn+0x160>)
 800b4f8:	2003      	movs	r0, #3
 800b4fa:	f7fc fd95 	bl	8008028 <mg_log_prefix>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	331c      	adds	r3, #28
 800b506:	4a2b      	ldr	r2, [pc, #172]	@ (800b5b4 <accept_conn+0x168>)
 800b508:	482b      	ldr	r0, [pc, #172]	@ (800b5b8 <accept_conn+0x16c>)
 800b50a:	f7fc fddd 	bl	80080c8 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b526:	f043 0304 	orr.w	r3, r3, #4
 800b52a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b534:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b538:	b2d9      	uxtb	r1, r3
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b540:	f361 03c3 	bfi	r3, r1, #3, #1
 800b544:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f102 0408 	add.w	r4, r2, #8
 800b55c:	f103 0508 	add.w	r5, r3, #8
 800b560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 800b584:	2200      	movs	r2, #0
 800b586:	2101      	movs	r1, #1
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7f7 fa41 	bl	8002a10 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800b58e:	2200      	movs	r2, #0
 800b590:	2105      	movs	r1, #5
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f7f7 fa3c 	bl	8002a10 <mg_call>
  return c;
 800b598:	68fb      	ldr	r3, [r7, #12]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	24000240 	.word	0x24000240
 800b5a8:	0802c1ac 	.word	0x0802c1ac
 800b5ac:	08028ac4 	.word	0x08028ac4
 800b5b0:	08029b20 	.word	0x08029b20
 800b5b4:	0800d9c5 	.word	0x0800d9c5
 800b5b8:	08029f10 	.word	0x08029f10

0800b5bc <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	@ 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5cc:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800b5ce:	230e      	movs	r3, #14
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	2318      	movs	r3, #24
 800b5d4:	61fb      	str	r3, [r7, #28]
 800b5d6:	233c      	movs	r3, #60	@ 0x3c
 800b5d8:	61bb      	str	r3, [r7, #24]
 800b5da:	2308      	movs	r3, #8
 800b5dc:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800b5de:	6a3a      	ldr	r2, [r7, #32]
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	441a      	add	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <trim_len+0x3c>
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	e000      	b.n	800b5fa <trim_len+0x3e>
 800b5f8:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800b5fa:	4413      	add	r3, r2
 800b5fc:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d103      	bne.n	800b616 <trim_len+0x5a>
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	e000      	b.n	800b618 <trim_len+0x5c>
 800b616:	2344      	movs	r3, #68	@ 0x44
 800b618:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	441a      	add	r2, r3
 800b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	429a      	cmp	r2, r3
 800b626:	d904      	bls.n	800b632 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800b628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62a:	699a      	ldr	r2, [r3, #24]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800b632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b638:	461a      	mov	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d913      	bls.n	800b668 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800b640:	4b20      	ldr	r3, [pc, #128]	@ (800b6c4 <trim_len+0x108>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dd0a      	ble.n	800b65e <trim_len+0xa2>
 800b648:	4b1f      	ldr	r3, [pc, #124]	@ (800b6c8 <trim_len+0x10c>)
 800b64a:	f241 6251 	movw	r2, #5713	@ 0x1651
 800b64e:	491f      	ldr	r1, [pc, #124]	@ (800b6cc <trim_len+0x110>)
 800b650:	2001      	movs	r0, #1
 800b652:	f7fc fce9 	bl	8008028 <mg_log_prefix>
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	481d      	ldr	r0, [pc, #116]	@ (800b6d0 <trim_len+0x114>)
 800b65a:	f7fc fd35 	bl	80080c8 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	b29a      	uxth	r2, r3
 800b662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	441a      	add	r2, r3
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b674:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 800b678:	4293      	cmp	r3, r2
 800b67a:	d91e      	bls.n	800b6ba <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b682:	461a      	mov	r2, r3
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	6a3a      	ldr	r2, [r7, #32]
 800b68a:	4413      	add	r3, r2
 800b68c:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00d      	beq.n	800b6ba <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800b69e:	4b09      	ldr	r3, [pc, #36]	@ (800b6c4 <trim_len+0x108>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	dd09      	ble.n	800b6ba <trim_len+0xfe>
 800b6a6:	4b08      	ldr	r3, [pc, #32]	@ (800b6c8 <trim_len+0x10c>)
 800b6a8:	f241 6258 	movw	r2, #5720	@ 0x1658
 800b6ac:	4907      	ldr	r1, [pc, #28]	@ (800b6cc <trim_len+0x110>)
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	f7fc fcba 	bl	8008028 <mg_log_prefix>
 800b6b4:	4807      	ldr	r0, [pc, #28]	@ (800b6d4 <trim_len+0x118>)
 800b6b6:	f7fc fd07 	bl	80080c8 <mg_log>
    }
  }

  return len;
 800b6ba:	683b      	ldr	r3, [r7, #0]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3728      	adds	r7, #40	@ 0x28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	24000240 	.word	0x24000240
 800b6c8:	0802c1b8 	.word	0x0802c1b8
 800b6cc:	08028ac4 	.word	0x08028ac4
 800b6d0:	08029f20 	.word	0x08029f20
 800b6d4:	08029f4c 	.word	0x08029f4c

0800b6d8 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6da:	b08f      	sub	sp, #60	@ 0x3c
 800b6dc:	af06      	add	r7, sp, #24
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ea:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	33b0      	adds	r3, #176	@ 0xb0
 800b6f0:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	331c      	adds	r3, #28
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f7ff ff5d 	bl	800b5bc <trim_len>
 800b702:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d015      	beq.n	800b740 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f103 0118 	add.w	r1, r3, #24
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	6898      	ldr	r0, [r3, #8]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	8b1c      	ldrh	r4, [r3, #24]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	9203      	str	r2, [sp, #12]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	9202      	str	r2, [sp, #8]
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4623      	mov	r3, r4
 800b736:	4602      	mov	r2, r0
 800b738:	69f8      	ldr	r0, [r7, #28]
 800b73a:	f7fe fd70 	bl	800a21e <tx_udp>
 800b73e:	e03d      	b.n	800b7bc <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	f103 0618 	add.w	r6, r3, #24
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8b1c      	ldrh	r4, [r3, #24]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4618      	mov	r0, r3
 800b754:	f00c f9d2 	bl	8017afc <mg_ntohl>
 800b758:	6038      	str	r0, [r7, #0]
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	4618      	mov	r0, r3
 800b760:	f00c f9cc 	bl	8017afc <mg_ntohl>
 800b764:	4602      	mov	r2, r0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	9305      	str	r3, [sp, #20]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9203      	str	r2, [sp, #12]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	9501      	str	r5, [sp, #4]
 800b776:	9400      	str	r4, [sp, #0]
 800b778:	2318      	movs	r3, #24
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4631      	mov	r1, r6
 800b77e:	69f8      	ldr	r0, [r7, #28]
 800b780:	f7ff fd52 	bl	800b228 <tx_tcp>
 800b784:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <mg_io_send+0xba>
      return MG_IO_WAIT;
 800b78c:	f06f 0301 	mvn.w	r3, #1
 800b790:	e015      	b.n	800b7be <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d102      	bne.n	800b7a0 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800b79a:	f04f 33ff 	mov.w	r3, #4294967295
 800b79e:	e00e      	b.n	800b7be <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	441a      	add	r2, r3
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	7f9b      	ldrb	r3, [r3, #30]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d103      	bne.n	800b7bc <mg_io_send+0xe4>
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7fe fb50 	bl	8009e5c <settmout>
    }
  }
  return (long) len;
 800b7bc:	687b      	ldr	r3, [r7, #4]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3724      	adds	r7, #36	@ 0x24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b7c8 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	18d1      	adds	r1, r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f006 fe9d 	bl	8012528 <mg_tls_recv>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f8:	d104      	bne.n	800b804 <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 800b7fa:	490c      	ldr	r1, [pc, #48]	@ (800b82c <handle_tls_recv+0x64>)
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7f7 f927 	bl	8002a50 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 800b802:	e00f      	b.n	800b824 <handle_tls_recv+0x5c>
  } else if (n > 0) {
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	dd0c      	ble.n	800b824 <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	441a      	add	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 800b816:	f107 030c 	add.w	r3, r7, #12
 800b81a:	461a      	mov	r2, r3
 800b81c:	2107      	movs	r1, #7
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7f7 f8f6 	bl	8002a10 <mg_call>
}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	08029f78 	.word	0x08029f78

0800b830 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	b090      	sub	sp, #64	@ 0x40
 800b836:	af06      	add	r7, sp, #24
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	33b0      	adds	r3, #176	@ 0xb0
 800b840:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <read_conn+0x28>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3368      	adds	r3, #104	@ 0x68
 800b856:	e001      	b.n	800b85c <read_conn+0x2c>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3338      	adds	r3, #56	@ 0x38
 800b85c:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	f00c f949 	bl	8017afc <mg_ntohl>
 800b86a:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	331c      	adds	r3, #28
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b878:	7b5b      	ldrb	r3, [r3, #13]
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d070      	beq.n	800b964 <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800b882:	2310      	movs	r3, #16
 800b884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	4618      	mov	r0, r3
 800b890:	f00c f934 	bl	8017afc <mg_ntohl>
 800b894:	4602      	mov	r2, r0
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b8a8:	f003 0310 	and.w	r3, r3, #16
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01e      	beq.n	800b8f0 <read_conn+0xc0>
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	7f9b      	ldrb	r3, [r3, #30]
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	d11a      	bne.n	800b8f0 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	681c      	ldr	r4, [r3, #0]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f00c f919 	bl	8017afc <mg_ntohl>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	d105      	bne.n	800b8dc <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b8da:	e01a      	b.n	800b912 <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f00c f90a 	bl	8017afc <mg_ntohl>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b8ee:	e010      	b.n	800b912 <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 800b8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8f4:	f043 0301 	orr.w	r3, r3, #1
 800b8f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b902:	f043 0310 	orr.w	r3, r3, #16
 800b906:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800b90a:	2104      	movs	r1, #4
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7fe faa5 	bl	8009e5c <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	f103 0818 	add.w	r8, r3, #24
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	607b      	str	r3, [r7, #4]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8b1c      	ldrh	r4, [r3, #24]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4618      	mov	r0, r3
 800b930:	f00c f8e4 	bl	8017afc <mg_ntohl>
 800b934:	6038      	str	r0, [r7, #0]
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f00c f8de 	bl	8017afc <mg_ntohl>
 800b940:	4602      	mov	r2, r0
 800b942:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b946:	2100      	movs	r1, #0
 800b948:	9105      	str	r1, [sp, #20]
 800b94a:	4990      	ldr	r1, [pc, #576]	@ (800bb8c <read_conn+0x35c>)
 800b94c:	9104      	str	r1, [sp, #16]
 800b94e:	9203      	str	r2, [sp, #12]
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	9102      	str	r1, [sp, #8]
 800b954:	9501      	str	r5, [sp, #4]
 800b956:	9400      	str	r4, [sp, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	4641      	mov	r1, r8
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff fc63 	bl	800b228 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800b962:	e173      	b.n	800bc4c <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 816f 	beq.w	800bc4c <read_conn+0x41c>
  } else if (seq != s->ack) {
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	429a      	cmp	r2, r3
 800b976:	d059      	beq.n	800ba2c <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	4618      	mov	r0, r3
 800b980:	f00c f8bc 	bl	8017afc <mg_ntohl>
 800b984:	4602      	mov	r2, r0
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	4413      	add	r3, r2
 800b98c:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	429a      	cmp	r2, r3
 800b996:	d10f      	bne.n	800b9b8 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800b998:	4b7d      	ldr	r3, [pc, #500]	@ (800bb90 <read_conn+0x360>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	f340 8155 	ble.w	800bc4c <read_conn+0x41c>
 800b9a2:	4b7c      	ldr	r3, [pc, #496]	@ (800bb94 <read_conn+0x364>)
 800b9a4:	f241 629f 	movw	r2, #5791	@ 0x169f
 800b9a8:	497b      	ldr	r1, [pc, #492]	@ (800bb98 <read_conn+0x368>)
 800b9aa:	2004      	movs	r0, #4
 800b9ac:	f7fc fb3c 	bl	8008028 <mg_log_prefix>
 800b9b0:	487a      	ldr	r0, [pc, #488]	@ (800bb9c <read_conn+0x36c>)
 800b9b2:	f7fc fb89 	bl	80080c8 <mg_log>
}
 800b9b6:	e149      	b.n	800bc4c <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800b9b8:	4b75      	ldr	r3, [pc, #468]	@ (800bb90 <read_conn+0x360>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	dd0d      	ble.n	800b9dc <read_conn+0x1ac>
 800b9c0:	4b74      	ldr	r3, [pc, #464]	@ (800bb94 <read_conn+0x364>)
 800b9c2:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 800b9c6:	4974      	ldr	r1, [pc, #464]	@ (800bb98 <read_conn+0x368>)
 800b9c8:	2004      	movs	r0, #4
 800b9ca:	f7fc fb2d 	bl	8008028 <mg_log_prefix>
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	69b9      	ldr	r1, [r7, #24]
 800b9d6:	4872      	ldr	r0, [pc, #456]	@ (800bba0 <read_conn+0x370>)
 800b9d8:	f7fc fb76 	bl	80080c8 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	f103 0818 	add.w	r8, r3, #24
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	607b      	str	r3, [r7, #4]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8b1c      	ldrh	r4, [r3, #24]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f00c f87f 	bl	8017afc <mg_ntohl>
 800b9fe:	6038      	str	r0, [r7, #0]
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f00c f879 	bl	8017afc <mg_ntohl>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	9205      	str	r2, [sp, #20]
 800ba10:	4a5e      	ldr	r2, [pc, #376]	@ (800bb8c <read_conn+0x35c>)
 800ba12:	9204      	str	r2, [sp, #16]
 800ba14:	9303      	str	r3, [sp, #12]
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	9102      	str	r1, [sp, #8]
 800ba1a:	9501      	str	r5, [sp, #4]
 800ba1c:	9400      	str	r4, [sp, #0]
 800ba1e:	2310      	movs	r3, #16
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4641      	mov	r1, r8
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff fbff 	bl	800b228 <tx_tcp>
}
 800ba2a:	e10f      	b.n	800bc4c <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	1ad2      	subs	r2, r2, r3
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d210      	bcs.n	800ba60 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	689a      	ldr	r2, [r3, #8]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	4413      	add	r3, r2
 800ba48:	4619      	mov	r1, r3
 800ba4a:	69f8      	ldr	r0, [r7, #28]
 800ba4c:	f7fb fb1e 	bl	800708c <mg_iobuf_resize>
 800ba50:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d104      	bne.n	800ba60 <read_conn+0x230>
    mg_error(c, "oom");
 800ba56:	4953      	ldr	r1, [pc, #332]	@ (800bba4 <read_conn+0x374>)
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7f6 fff9 	bl	8002a50 <mg_error>
 800ba5e:	e0f5      	b.n	800bc4c <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	18d0      	adds	r0, r2, r3
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	6899      	ldr	r1, [r3, #8]
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f019 fb3d 	bl	80250f2 <memcpy>
    io->len += pkt->pay.len;
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	441a      	add	r2, r3
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800ba86:	4b42      	ldr	r3, [pc, #264]	@ (800bb90 <read_conn+0x360>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	dd15      	ble.n	800baba <read_conn+0x28a>
 800ba8e:	4b41      	ldr	r3, [pc, #260]	@ (800bb94 <read_conn+0x364>)
 800ba90:	f241 62b2 	movw	r2, #5810	@ 0x16b2
 800ba94:	4940      	ldr	r1, [pc, #256]	@ (800bb98 <read_conn+0x368>)
 800ba96:	2004      	movs	r0, #4
 800ba98:	f7fc fac6 	bl	8008028 <mg_log_prefix>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f00c f828 	bl	8017afc <mg_ntohl>
 800baac:	4602      	mov	r2, r0
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	4621      	mov	r1, r4
 800bab4:	483c      	ldr	r0, [pc, #240]	@ (800bba8 <read_conn+0x378>)
 800bab6:	f7fc fb07 	bl	80080c8 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f00c f81b 	bl	8017afc <mg_ntohl>
 800bac6:	4602      	mov	r2, r0
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	441a      	add	r2, r3
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	695a      	ldr	r2, [r3, #20]
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	441a      	add	r2, r3
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	695b      	ldr	r3, [r3, #20]
 800bae4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800bae8:	4293      	cmp	r3, r2
 800baea:	d961      	bls.n	800bbb0 <read_conn+0x380>
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	691a      	ldr	r2, [r3, #16]
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d05b      	beq.n	800bbb0 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800baf8:	4b25      	ldr	r3, [pc, #148]	@ (800bb90 <read_conn+0x360>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	dd0e      	ble.n	800bb1e <read_conn+0x2ee>
 800bb00:	4b24      	ldr	r3, [pc, #144]	@ (800bb94 <read_conn+0x364>)
 800bb02:	f241 62b9 	movw	r2, #5817	@ 0x16b9
 800bb06:	4924      	ldr	r1, [pc, #144]	@ (800bb98 <read_conn+0x368>)
 800bb08:	2004      	movs	r0, #4
 800bb0a:	f7fc fa8d 	bl	8008028 <mg_log_prefix>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	461a      	mov	r2, r3
 800bb18:	4824      	ldr	r0, [pc, #144]	@ (800bbac <read_conn+0x37c>)
 800bb1a:	f7fc fad5 	bl	80080c8 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	f103 0818 	add.w	r8, r3, #24
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8b1c      	ldrh	r4, [r3, #24]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f00b ffde 	bl	8017afc <mg_ntohl>
 800bb40:	6038      	str	r0, [r7, #0]
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f00b ffd8 	bl	8017afc <mg_ntohl>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2200      	movs	r2, #0
 800bb50:	9205      	str	r2, [sp, #20]
 800bb52:	2200      	movs	r2, #0
 800bb54:	9204      	str	r2, [sp, #16]
 800bb56:	9303      	str	r3, [sp, #12]
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	9102      	str	r1, [sp, #8]
 800bb5c:	9501      	str	r5, [sp, #4]
 800bb5e:	9400      	str	r4, [sp, #0]
 800bb60:	2310      	movs	r3, #16
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	4641      	mov	r1, r8
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7ff fb5e 	bl	800b228 <tx_tcp>
      s->unacked = 0;
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	7f9b      	ldrb	r3, [r3, #30]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d01e      	beq.n	800bbc0 <read_conn+0x390>
 800bb82:	2100      	movs	r1, #0
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f7fe f969 	bl	8009e5c <settmout>
 800bb8a:	e019      	b.n	800bbc0 <read_conn+0x390>
 800bb8c:	080293d0 	.word	0x080293d0
 800bb90:	24000240 	.word	0x24000240
 800bb94:	0802c1c4 	.word	0x0802c1c4
 800bb98:	08028ac4 	.word	0x08028ac4
 800bb9c:	08029f88 	.word	0x08029f88
 800bba0:	08029fa0 	.word	0x08029fa0
 800bba4:	08029ee8 	.word	0x08029ee8
 800bba8:	08029fb8 	.word	0x08029fb8
 800bbac:	08029fcc 	.word	0x08029fcc
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	7f9b      	ldrb	r3, [r3, #30]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d003      	beq.n	800bbc0 <read_conn+0x390>
 800bbb8:	2101      	movs	r1, #1
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f7fe f94e 	bl	8009e5c <settmout>
    if (c->is_tls && c->is_tls_hs) {
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bbc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <read_conn+0x3b8>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bbd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d003      	beq.n	800bbe8 <read_conn+0x3b8>
      mg_tls_handshake(c);
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f006 fa2b 	bl	801203c <mg_tls_handshake>
 800bbe6:	e031      	b.n	800bc4c <read_conn+0x41c>
    } else if (c->is_tls) {
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bbee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d021      	beq.n	800bc3c <read_conn+0x40c>
      io = &c->recv;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3338      	adds	r3, #56	@ 0x38
 800bbfc:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	1ad2      	subs	r2, r2, r3
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d210      	bcs.n	800bc32 <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	69f8      	ldr	r0, [r7, #28]
 800bc1e:	f7fb fa35 	bl	800708c <mg_iobuf_resize>
 800bc22:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d104      	bne.n	800bc32 <read_conn+0x402>
        mg_error(c, "oom");
 800bc28:	490b      	ldr	r1, [pc, #44]	@ (800bc58 <read_conn+0x428>)
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f7f6 ff10 	bl	8002a50 <mg_error>
 800bc30:	e00c      	b.n	800bc4c <read_conn+0x41c>
        handle_tls_recv(c, io);
 800bc32:	69f9      	ldr	r1, [r7, #28]
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fdc7 	bl	800b7c8 <handle_tls_recv>
}
 800bc3a:	e007      	b.n	800bc4c <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	330c      	adds	r3, #12
 800bc40:	461a      	mov	r2, r3
 800bc42:	2107      	movs	r1, #7
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7f6 fee3 	bl	8002a10 <mg_call>
}
 800bc4a:	e7ff      	b.n	800bc4c <read_conn+0x41c>
 800bc4c:	bf00      	nop
 800bc4e:	3728      	adds	r7, #40	@ 0x28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc56:	bf00      	nop
 800bc58:	08029ee8 	.word	0x08029ee8

0800bc5c <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b089      	sub	sp, #36	@ 0x24
 800bc60:	af02      	add	r7, sp, #8
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fcb2 	bl	800a5d8 <getpeer>
 800bc74:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <rx_tcp+0x26>
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	33b0      	adds	r3, #176	@ 0xb0
 800bc80:	e000      	b.n	800bc84 <rx_tcp+0x28>
 800bc82:	2300      	movs	r3, #0
 800bc84:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d048      	beq.n	800bd1e <rx_tcp+0xc2>
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d040      	beq.n	800bd1e <rx_tcp+0xc2>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca0:	7b5b      	ldrb	r3, [r3, #13]
 800bca2:	2b12      	cmp	r3, #18
 800bca4:	d13b      	bne.n	800bd1e <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f00b ff25 	bl	8017afc <mg_ntohl>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	601a      	str	r2, [r3, #0]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f00b ff1c 	bl	8017afc <mg_ntohl>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	9201      	str	r2, [sp, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	9200      	str	r2, [sp, #0]
 800bcda:	2210      	movs	r2, #16
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7ff fb6e 	bl	800b3c0 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800bcea:	f36f 1345 	bfc	r3, #5, #1
 800bcee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	6978      	ldr	r0, [r7, #20]
 800bcf6:	f7fe f8b1 	bl	8009e5c <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2104      	movs	r1, #4
 800bcfe:	6978      	ldr	r0, [r7, #20]
 800bd00:	f7f6 fe86 	bl	8002a10 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bd0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 80cd 	beq.w	800beb0 <rx_tcp+0x254>
 800bd16:	6978      	ldr	r0, [r7, #20]
 800bd18:	f006 f990 	bl	801203c <mg_tls_handshake>
 800bd1c:	e0c8      	b.n	800beb0 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d019      	beq.n	800bd58 <rx_tcp+0xfc>
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bd2a:	f003 0320 	and.w	r3, r3, #32
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d011      	beq.n	800bd58 <rx_tcp+0xfc>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd38:	7b5b      	ldrb	r3, [r3, #13]
 800bd3a:	2b10      	cmp	r3, #16
 800bd3c:	d00c      	beq.n	800bd58 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	2200      	movs	r2, #0
 800bd46:	9201      	str	r2, [sp, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	9200      	str	r2, [sp, #0]
 800bd4c:	2214      	movs	r2, #20
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff fb35 	bl	800b3c0 <tx_tcp_pkt>
 800bd56:	e0ab      	b.n	800beb0 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00b      	beq.n	800bd76 <rx_tcp+0x11a>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd62:	7b5b      	ldrb	r3, [r3, #13]
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d004      	beq.n	800bd76 <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800bd6c:	4952      	ldr	r1, [pc, #328]	@ (800beb8 <rx_tcp+0x25c>)
 800bd6e:	6978      	ldr	r0, [r7, #20]
 800bd70:	f7f6 fe6e 	bl	8002a50 <mg_error>
 800bd74:	e09c      	b.n	800beb0 <rx_tcp+0x254>
  } else if (c != NULL) {
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00f      	beq.n	800bd9c <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	7f9b      	ldrb	r3, [r3, #30]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d103      	bne.n	800bd92 <rx_tcp+0x136>
      settmout(c,
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	6978      	ldr	r0, [r7, #20]
 800bd8e:	f7fe f865 	bl	8009e5c <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6978      	ldr	r0, [r7, #20]
 800bd96:	f7ff fd4b 	bl	800b830 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800bd9a:	e089      	b.n	800beb0 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bda0:	2201      	movs	r2, #1
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fe fc17 	bl	800a5d8 <getpeer>
 800bdaa:	6178      	str	r0, [r7, #20]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10c      	bne.n	800bdcc <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	9201      	str	r2, [sp, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	9200      	str	r2, [sp, #0]
 800bdc0:	2214      	movs	r2, #20
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fafb 	bl	800b3c0 <tx_tcp_pkt>
}
 800bdca:	e071      	b.n	800beb0 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd0:	7b5b      	ldrb	r3, [r3, #13]
 800bdd2:	f003 0304 	and.w	r3, r3, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00c      	beq.n	800bdf4 <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bde0:	f003 0304 	and.w	r3, r3, #4
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d062      	beq.n	800beb0 <rx_tcp+0x254>
 800bdea:	4933      	ldr	r1, [pc, #204]	@ (800beb8 <rx_tcp+0x25c>)
 800bdec:	6978      	ldr	r0, [r7, #20]
 800bdee:	f7f6 fe2f 	bl	8002a50 <mg_error>
}
 800bdf2:	e05d      	b.n	800beb0 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf8:	7b5b      	ldrb	r3, [r3, #13]
 800bdfa:	f003 0302 	and.w	r3, r3, #2
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d016      	beq.n	800be30 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	4618      	mov	r0, r3
 800be0c:	f00b fe8f 	bl	8017b2e <mg_ntohs>
 800be10:	4603      	mov	r3, r0
 800be12:	4618      	mov	r0, r3
 800be14:	f00b fe72 	bl	8017afc <mg_ntohl>
 800be18:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800be1a:	2300      	movs	r3, #0
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	2300      	movs	r3, #0
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2212      	movs	r2, #18
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff fac9 	bl	800b3c0 <tx_tcp_pkt>
}
 800be2e:	e03f      	b.n	800beb0 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be34:	7b5b      	ldrb	r3, [r3, #13]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00c      	beq.n	800be58 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	2200      	movs	r2, #0
 800be46:	9201      	str	r2, [sp, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	9200      	str	r2, [sp, #0]
 800be4c:	2211      	movs	r2, #17
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff fab5 	bl	800b3c0 <tx_tcp_pkt>
}
 800be56:	e02b      	b.n	800beb0 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	4618      	mov	r0, r3
 800be60:	f00b fe4c 	bl	8017afc <mg_ntohl>
 800be64:	4604      	mov	r4, r0
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4618      	mov	r0, r3
 800be70:	f00b fe5d 	bl	8017b2e <mg_ntohs>
 800be74:	4603      	mov	r3, r0
 800be76:	3301      	adds	r3, #1
 800be78:	429c      	cmp	r4, r3
 800be7a:	d104      	bne.n	800be86 <rx_tcp+0x22a>
    accept_conn(c, pkt);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6978      	ldr	r0, [r7, #20]
 800be80:	f7ff fae4 	bl	800b44c <accept_conn>
}
 800be84:	e014      	b.n	800beb0 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800be8c:	f003 0304 	and.w	r3, r3, #4
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10c      	bne.n	800beb0 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	2200      	movs	r2, #0
 800be9e:	9201      	str	r2, [sp, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	9200      	str	r2, [sp, #0]
 800bea4:	2214      	movs	r2, #20
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff fa89 	bl	800b3c0 <tx_tcp_pkt>
}
 800beae:	e7ff      	b.n	800beb0 <rx_tcp+0x254>
 800beb0:	bf00      	nop
 800beb2:	371c      	adds	r7, #28
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd90      	pop	{r4, r7, pc}
 800beb8:	08029fdc 	.word	0x08029fdc

0800bebc <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bebe:	b08b      	sub	sp, #44	@ 0x2c
 800bec0:	af04      	add	r7, sp, #16
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	88db      	ldrh	r3, [r3, #6]
 800becc:	b29b      	uxth	r3, r3
 800bece:	4618      	mov	r0, r3
 800bed0:	f00b fe2d 	bl	8017b2e <mg_ntohs>
 800bed4:	4603      	mov	r3, r0
 800bed6:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bed8:	8afb      	ldrh	r3, [r7, #22]
 800beda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d104      	bne.n	800beec <rx_ip+0x30>
 800bee2:	8afb      	ldrh	r3, [r7, #22]
 800bee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d026      	beq.n	800bf3a <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	69db      	ldr	r3, [r3, #28]
 800bef0:	7a5b      	ldrb	r3, [r3, #9]
 800bef2:	2b11      	cmp	r3, #17
 800bef4:	d105      	bne.n	800bf02 <rx_ip+0x46>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	f103 0214 	add.w	r2, r3, #20
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	69db      	ldr	r3, [r3, #28]
 800bf06:	7a5b      	ldrb	r3, [r3, #9]
 800bf08:	2b06      	cmp	r3, #6
 800bf0a:	d105      	bne.n	800bf18 <rx_ip+0x5c>
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	f103 0214 	add.w	r2, r3, #20
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fe fb59 	bl	800a5d8 <getpeer>
 800bf26:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 811b 	beq.w	800c166 <rx_ip+0x2aa>
 800bf30:	4992      	ldr	r1, [pc, #584]	@ (800c17c <rx_ip+0x2c0>)
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f7f6 fd8c 	bl	8002a50 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bf38:	e115      	b.n	800c166 <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	7a5b      	ldrb	r3, [r3, #9]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d116      	bne.n	800bf72 <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	f103 0214 	add.w	r2, r3, #20
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	2b03      	cmp	r3, #3
 800bf56:	f240 8108 	bls.w	800c16a <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4619      	mov	r1, r3
 800bf62:	6838      	ldr	r0, [r7, #0]
 800bf64:	f7fd ff02 	bl	8009d6c <mkpay>
    rx_icmp(ifp, pkt);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7fe fcb8 	bl	800a8e0 <rx_icmp>
 800bf70:	e100      	b.n	800c174 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	7a5b      	ldrb	r3, [r3, #9]
 800bf78:	2b11      	cmp	r3, #17
 800bf7a:	f040 808b 	bne.w	800c094 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	f103 0214 	add.w	r2, r3, #20
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	2b07      	cmp	r3, #7
 800bf90:	f240 80ed 	bls.w	800c16e <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf98:	3308      	adds	r3, #8
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6838      	ldr	r0, [r7, #0]
 800bf9e:	f7fd fee5 	bl	8009d6c <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800bfa2:	4b77      	ldr	r3, [pc, #476]	@ (800c180 <rx_ip+0x2c4>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	dd2d      	ble.n	800c006 <rx_ip+0x14a>
 800bfaa:	4b76      	ldr	r3, [pc, #472]	@ (800c184 <rx_ip+0x2c8>)
 800bfac:	f241 721b 	movw	r2, #5915	@ 0x171b
 800bfb0:	4975      	ldr	r1, [pc, #468]	@ (800c188 <rx_ip+0x2cc>)
 800bfb2:	2004      	movs	r0, #4
 800bfb4:	f7fc f838 	bl	8008028 <mg_log_prefix>
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	69db      	ldr	r3, [r3, #28]
 800bfbc:	f103 050c 	add.w	r5, r3, #12
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f00b fdb0 	bl	8017b2e <mg_ntohs>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	461e      	mov	r6, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	69db      	ldr	r3, [r3, #28]
 800bfd6:	f103 0410 	add.w	r4, r3, #16
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfde:	885b      	ldrh	r3, [r3, #2]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f00b fda3 	bl	8017b2e <mg_ntohs>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	9303      	str	r3, [sp, #12]
 800bff2:	9202      	str	r2, [sp, #8]
 800bff4:	9401      	str	r4, [sp, #4]
 800bff6:	4b65      	ldr	r3, [pc, #404]	@ (800c18c <rx_ip+0x2d0>)
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4633      	mov	r3, r6
 800bffc:	462a      	mov	r2, r5
 800bffe:	4963      	ldr	r1, [pc, #396]	@ (800c18c <rx_ip+0x2d0>)
 800c000:	4863      	ldr	r0, [pc, #396]	@ (800c190 <rx_ip+0x2d4>)
 800c002:	f7fc f861 	bl	80080c8 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7f1b      	ldrb	r3, [r3, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d01c      	beq.n	800c048 <rx_ip+0x18c>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c012:	885b      	ldrh	r3, [r3, #2]
 800c014:	b29c      	uxth	r4, r3
 800c016:	2044      	movs	r0, #68	@ 0x44
 800c018:	f00b fd89 	bl	8017b2e <mg_ntohs>
 800c01c:	4603      	mov	r3, r0
 800c01e:	429c      	cmp	r4, r3
 800c020:	d112      	bne.n	800c048 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c026:	f103 0208 	add.w	r2, r3, #8
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c032:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c036:	4619      	mov	r1, r3
 800c038:	6838      	ldr	r0, [r7, #0]
 800c03a:	f7fd fe97 	bl	8009d6c <mkpay>
      rx_dhcp_client(ifp, pkt);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7fe fca9 	bl	800a998 <rx_dhcp_client>
 800c046:	e095      	b.n	800c174 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7f5b      	ldrb	r3, [r3, #29]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01c      	beq.n	800c08a <rx_ip+0x1ce>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	b29c      	uxth	r4, r3
 800c058:	2043      	movs	r0, #67	@ 0x43
 800c05a:	f00b fd68 	bl	8017b2e <mg_ntohs>
 800c05e:	4603      	mov	r3, r0
 800c060:	429c      	cmp	r4, r3
 800c062:	d112      	bne.n	800c08a <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c068:	f103 0208 	add.w	r2, r3, #8
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c074:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c078:	4619      	mov	r1, r3
 800c07a:	6838      	ldr	r0, [r7, #0]
 800c07c:	f7fd fe76 	bl	8009d6c <mkpay>
      rx_dhcp_server(ifp, pkt);
 800c080:	6839      	ldr	r1, [r7, #0]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7fe fe70 	bl	800ad68 <rx_dhcp_server>
 800c088:	e074      	b.n	800c174 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff f859 	bl	800b144 <rx_udp>
 800c092:	e06f      	b.n	800c174 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	7a5b      	ldrb	r3, [r3, #9]
 800c09a:	2b06      	cmp	r3, #6
 800c09c:	d16a      	bne.n	800c174 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	f103 0214 	add.w	r2, r3, #20
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	2b13      	cmp	r3, #19
 800c0b0:	d95f      	bls.n	800c172 <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b6:	3314      	adds	r3, #20
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6838      	ldr	r0, [r7, #0]
 800c0bc:	f7fd fe56 	bl	8009d6c <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	69db      	ldr	r3, [r3, #28]
 800c0c4:	885b      	ldrh	r3, [r3, #2]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f00b fd30 	bl	8017b2e <mg_ntohs>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d6:	7b1b      	ldrb	r3, [r3, #12]
 800c0d8:	091b      	lsrs	r3, r3, #4
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	3305      	adds	r3, #5
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800c0e4:	8aba      	ldrh	r2, [r7, #20]
 800c0e6:	8a7b      	ldrh	r3, [r7, #18]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d305      	bcc.n	800c0f8 <rx_ip+0x23c>
 800c0ec:	8aba      	ldrh	r2, [r7, #20]
 800c0ee:	8a7b      	ldrh	r3, [r7, #18]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800c0f8:	4b21      	ldr	r3, [pc, #132]	@ (800c180 <rx_ip+0x2c4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	dd2d      	ble.n	800c15c <rx_ip+0x2a0>
 800c100:	4b20      	ldr	r3, [pc, #128]	@ (800c184 <rx_ip+0x2c8>)
 800c102:	f241 7230 	movw	r2, #5936	@ 0x1730
 800c106:	4920      	ldr	r1, [pc, #128]	@ (800c188 <rx_ip+0x2cc>)
 800c108:	2004      	movs	r0, #4
 800c10a:	f7fb ff8d 	bl	8008028 <mg_log_prefix>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	69db      	ldr	r3, [r3, #28]
 800c112:	f103 050c 	add.w	r5, r3, #12
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	4618      	mov	r0, r3
 800c120:	f00b fd05 	bl	8017b2e <mg_ntohs>
 800c124:	4603      	mov	r3, r0
 800c126:	461e      	mov	r6, r3
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	69db      	ldr	r3, [r3, #28]
 800c12c:	f103 0410 	add.w	r4, r3, #16
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c134:	885b      	ldrh	r3, [r3, #2]
 800c136:	b29b      	uxth	r3, r3
 800c138:	4618      	mov	r0, r3
 800c13a:	f00b fcf8 	bl	8017b2e <mg_ntohs>
 800c13e:	4603      	mov	r3, r0
 800c140:	461a      	mov	r2, r3
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	9303      	str	r3, [sp, #12]
 800c148:	9202      	str	r2, [sp, #8]
 800c14a:	9401      	str	r4, [sp, #4]
 800c14c:	4b0f      	ldr	r3, [pc, #60]	@ (800c18c <rx_ip+0x2d0>)
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	4633      	mov	r3, r6
 800c152:	462a      	mov	r2, r5
 800c154:	490d      	ldr	r1, [pc, #52]	@ (800c18c <rx_ip+0x2d0>)
 800c156:	480f      	ldr	r0, [pc, #60]	@ (800c194 <rx_ip+0x2d8>)
 800c158:	f7fb ffb6 	bl	80080c8 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff fd7c 	bl	800bc5c <rx_tcp>
 800c164:	e006      	b.n	800c174 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800c166:	bf00      	nop
 800c168:	e004      	b.n	800c174 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800c16a:	bf00      	nop
 800c16c:	e002      	b.n	800c174 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800c16e:	bf00      	nop
 800c170:	e000      	b.n	800c174 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800c172:	bf00      	nop
  }
}
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c17a:	bf00      	nop
 800c17c:	08029fe8 	.word	0x08029fe8
 800c180:	24000240 	.word	0x24000240
 800c184:	0802c1d0 	.word	0x0802c1d0
 800c188:	08028ac4 	.word	0x08028ac4
 800c18c:	0800d94d 	.word	0x0800d94d
 800c190:	0802a004 	.word	0x0802a004
 800c194:	0802a020 	.word	0x0802a020

0800c198 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	799b      	ldrb	r3, [r3, #6]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d004      	beq.n	800c1b6 <rx_ip6+0x1e>
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	6a1b      	ldr	r3, [r3, #32]
 800c1b0:	799b      	ldrb	r3, [r3, #6]
 800c1b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c1b4:	d115      	bne.n	800c1e2 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d922      	bls.n	800c210 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6838      	ldr	r0, [r7, #0]
 800c1d4:	f7fd fdca 	bl	8009d6c <mkpay>
    rx_icmp(ifp, pkt);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7fe fb80 	bl	800a8e0 <rx_icmp>
 800c1e0:	e019      	b.n	800c216 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	799b      	ldrb	r3, [r3, #6]
 800c1e8:	2b11      	cmp	r3, #17
 800c1ea:	d114      	bne.n	800c216 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	6a1b      	ldr	r3, [r3, #32]
 800c1f0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	2b07      	cmp	r3, #7
 800c1fe:	d909      	bls.n	800c214 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c204:	3308      	adds	r3, #8
 800c206:	4619      	mov	r1, r3
 800c208:	6838      	ldr	r0, [r7, #0]
 800c20a:	f7fd fdaf 	bl	8009d6c <mkpay>
 800c20e:	e002      	b.n	800c216 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800c210:	bf00      	nop
 800c212:	e000      	b.n	800c216 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800c214:	bf00      	nop
  }
}
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800c21c:	b590      	push	{r4, r7, lr}
 800c21e:	b093      	sub	sp, #76	@ 0x4c
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800c228:	f107 0314 	add.w	r3, r7, #20
 800c22c:	2234      	movs	r2, #52	@ 0x34
 800c22e:	2100      	movs	r1, #0
 800c230:	4618      	mov	r0, r3
 800c232:	f018 fe13 	bl	8024e5c <memset>
  pkt.raw.buf = (char *) buf;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	2b0d      	cmp	r3, #13
 800c246:	f240 80df 	bls.w	800c408 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c250:	2b00      	cmp	r3, #0
 800c252:	d013      	beq.n	800c27c <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	4618      	mov	r0, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2206      	movs	r2, #6
 800c25c:	4619      	mov	r1, r3
 800c25e:	f018 fdd3 	bl	8024e08 <memcmp>
 800c262:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800c264:	2b00      	cmp	r3, #0
 800c266:	d009      	beq.n	800c27c <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800c268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26a:	2206      	movs	r2, #6
 800c26c:	4970      	ldr	r1, [pc, #448]	@ (800c430 <mg_tcpip_rx+0x214>)
 800c26e:	4618      	mov	r0, r3
 800c270:	f018 fdca 	bl	8024e08 <memcmp>
 800c274:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800c276:	2b00      	cmp	r3, #0
 800c278:	f040 80c8 	bne.w	800c40c <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c282:	2b00      	cmp	r3, #0
 800c284:	d01a      	beq.n	800c2bc <mg_tcpip_rx+0xa0>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d917      	bls.n	800c2bc <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3b04      	subs	r3, #4
 800c290:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	68b9      	ldr	r1, [r7, #8]
 800c296:	2000      	movs	r0, #0
 800c298:	f00b fc60 	bl	8017b5c <mg_crc32>
 800c29c:	4603      	mov	r3, r0
 800c29e:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f107 0310 	add.w	r3, r7, #16
 800c2ac:	2204      	movs	r2, #4
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	f018 fdaa 	bl	8024e08 <memcmp>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f040 80aa 	bne.w	800c410 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2be:	899b      	ldrh	r3, [r3, #12]
 800c2c0:	b29c      	uxth	r4, r3
 800c2c2:	f640 0006 	movw	r0, #2054	@ 0x806
 800c2c6:	f00b fc32 	bl	8017b2e <mg_ntohs>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	d114      	bne.n	800c2fa <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d2:	330e      	adds	r3, #14
 800c2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b29      	cmp	r3, #41	@ 0x29
 800c2da:	f240 809b 	bls.w	800c414 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800c2de:	f107 0314 	add.w	r3, r7, #20
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	2103      	movs	r1, #3
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7fd fd2c 	bl	8009d44 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800c2ec:	f107 0314 	add.w	r3, r7, #20
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f7fe f9e2 	bl	800a6bc <rx_arp>
 800c2f8:	e097      	b.n	800c42a <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	899b      	ldrh	r3, [r3, #12]
 800c2fe:	b29c      	uxth	r4, r3
 800c300:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800c304:	f00b fc13 	bl	8017b2e <mg_ntohs>
 800c308:	4603      	mov	r3, r0
 800c30a:	429c      	cmp	r4, r3
 800c30c:	d11b      	bne.n	800c346 <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	330e      	adds	r3, #14
 800c312:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b35      	cmp	r3, #53	@ 0x35
 800c318:	d97e      	bls.n	800c418 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800c31a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	091b      	lsrs	r3, r3, #4
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b06      	cmp	r3, #6
 800c324:	d17a      	bne.n	800c41c <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800c326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c328:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c32c:	f107 0314 	add.w	r3, r7, #20
 800c330:	4611      	mov	r1, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd fd1a 	bl	8009d6c <mkpay>
    rx_ip6(ifp, &pkt);
 800c338:	f107 0314 	add.w	r3, r7, #20
 800c33c:	4619      	mov	r1, r3
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff ff2a 	bl	800c198 <rx_ip6>
 800c344:	e071      	b.n	800c42a <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	899b      	ldrh	r3, [r3, #12]
 800c34a:	b29c      	uxth	r4, r3
 800c34c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c350:	f00b fbed 	bl	8017b2e <mg_ntohs>
 800c354:	4603      	mov	r3, r0
 800c356:	429c      	cmp	r4, r3
 800c358:	d133      	bne.n	800c3c2 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	330e      	adds	r3, #14
 800c35e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	2b21      	cmp	r3, #33	@ 0x21
 800c364:	d95c      	bls.n	800c420 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800c366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c368:	885b      	ldrh	r3, [r3, #2]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4618      	mov	r0, r3
 800c36e:	f00b fbde 	bl	8017b2e <mg_ntohs>
 800c372:	4603      	mov	r3, r0
 800c374:	f103 020e 	add.w	r2, r3, #14
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d208      	bcs.n	800c390 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	885b      	ldrh	r3, [r3, #2]
 800c382:	b29b      	uxth	r3, r3
 800c384:	4618      	mov	r0, r3
 800c386:	f00b fbd2 	bl	8017b2e <mg_ntohs>
 800c38a:	4603      	mov	r3, r0
 800c38c:	330e      	adds	r3, #14
 800c38e:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	2b21      	cmp	r3, #33	@ 0x21
 800c394:	d946      	bls.n	800c424 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800c396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	091b      	lsrs	r3, r3, #4
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d142      	bne.n	800c428 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a4:	f103 0214 	add.w	r2, r3, #20
 800c3a8:	f107 0314 	add.w	r3, r7, #20
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd fcdc 	bl	8009d6c <mkpay>
    rx_ip(ifp, &pkt);
 800c3b4:	f107 0314 	add.w	r3, r7, #20
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff fd7e 	bl	800bebc <rx_ip>
 800c3c0:	e033      	b.n	800c42a <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 800c3c2:	4b1c      	ldr	r3, [pc, #112]	@ (800c434 <mg_tcpip_rx+0x218>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	dd11      	ble.n	800c3ee <mg_tcpip_rx+0x1d2>
 800c3ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c438 <mg_tcpip_rx+0x21c>)
 800c3cc:	f241 726f 	movw	r2, #5999	@ 0x176f
 800c3d0:	491a      	ldr	r1, [pc, #104]	@ (800c43c <mg_tcpip_rx+0x220>)
 800c3d2:	2003      	movs	r0, #3
 800c3d4:	f7fb fe28 	bl	8008028 <mg_log_prefix>
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3da:	899b      	ldrh	r3, [r3, #12]
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f00b fba5 	bl	8017b2e <mg_ntohs>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4815      	ldr	r0, [pc, #84]	@ (800c440 <mg_tcpip_rx+0x224>)
 800c3ea:	f7fb fe6d 	bl	80080c8 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800c3ee:	4b11      	ldr	r3, [pc, #68]	@ (800c434 <mg_tcpip_rx+0x218>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	dd19      	ble.n	800c42a <mg_tcpip_rx+0x20e>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b20      	cmp	r3, #32
 800c3fa:	bf28      	it	cs
 800c3fc:	2320      	movcs	r3, #32
 800c3fe:	4619      	mov	r1, r3
 800c400:	68b8      	ldr	r0, [r7, #8]
 800c402:	f7fb fe97 	bl	8008134 <mg_hexdump>
 800c406:	e010      	b.n	800c42a <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800c408:	bf00      	nop
 800c40a:	e00e      	b.n	800c42a <mg_tcpip_rx+0x20e>
    return;
 800c40c:	bf00      	nop
 800c40e:	e00c      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800c410:	bf00      	nop
 800c412:	e00a      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800c414:	bf00      	nop
 800c416:	e008      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800c418:	bf00      	nop
 800c41a:	e006      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800c41c:	bf00      	nop
 800c41e:	e004      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c420:	bf00      	nop
 800c422:	e002      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c424:	bf00      	nop
 800c426:	e000      	b.n	800c42a <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800c428:	bf00      	nop
  }
}
 800c42a:	374c      	adds	r7, #76	@ 0x4c
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd90      	pop	{r4, r7, pc}
 800c430:	0802be4c 	.word	0x0802be4c
 800c434:	24000240 	.word	0x24000240
 800c438:	0802c1d8 	.word	0x0802c1d8
 800c43c:	08028ac4 	.word	0x08028ac4
 800c440:	0802a03c 	.word	0x0802a03c

0800c444 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800c444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c446:	b095      	sub	sp, #84	@ 0x54
 800c448:	af06      	add	r7, sp, #24
 800c44a:	6178      	str	r0, [r7, #20]
 800c44c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800c456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c45a:	e9cd 2300 	strd	r2, r3, [sp]
 800c45e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c462:	f04f 0300 	mov.w	r3, #0
 800c466:	4608      	mov	r0, r1
 800c468:	f003 f960 	bl	800f72c <mg_timer_expired>
 800c46c:	4603      	mov	r3, r0
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800c472:	6979      	ldr	r1, [r7, #20]
 800c474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c478:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800c47c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <mg_tcpip_poll+0x58>
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d106      	bne.n	800c49c <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY; // keep best-effort MAC
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2204      	movs	r2, #4
 800c492:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    onstatechange(ifp);
 800c496:	6978      	ldr	r0, [r7, #20]
 800c498:	f7fd fdc0 	bl	800a01c <onstatechange>
  }
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800c49c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d073      	beq.n	800c58c <mg_tcpip_poll+0x148>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d06e      	beq.n	800c58c <mg_tcpip_poll+0x148>
    bool up = ifp->driver->up(ifp);
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	6978      	ldr	r0, [r7, #20]
 800c4b6:	4798      	blx	r3
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bf14      	ite	ne
 800c4c8:	2301      	movne	r3, #1
 800c4ca:	2300      	moveq	r3, #0
 800c4cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800c4d0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c4d4:	f083 0301 	eor.w	r3, r3, #1
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d006      	beq.n	800c4ec <mg_tcpip_poll+0xa8>
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	7f1b      	ldrb	r3, [r3, #28]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <mg_tcpip_poll+0xa8>
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	609a      	str	r2, [r3, #8]
    if (up != current) {  // link state has changed
 800c4ec:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800c4f0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d01a      	beq.n	800c52e <mg_tcpip_poll+0xea>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c4f8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c4fc:	f083 0301 	eor.w	r3, r3, #1
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <mg_tcpip_poll+0xc6>
 800c506:	2300      	movs	r3, #0
 800c508:	e00a      	b.n	800c520 <mg_tcpip_poll+0xdc>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d103      	bne.n	800c51a <mg_tcpip_poll+0xd6>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <mg_tcpip_poll+0xda>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c51a:	2301      	movs	r3, #1
 800c51c:	e000      	b.n	800c520 <mg_tcpip_poll+0xdc>
 800c51e:	2303      	movs	r3, #3
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                       ? MG_TCPIP_STATE_UP
                       : MG_TCPIP_STATE_IP;
      onstatechange(ifp);
 800c526:	6978      	ldr	r0, [r7, #20]
 800c528:	f7fd fd78 	bl	800a01c <onstatechange>
 800c52c:	e016      	b.n	800c55c <mg_tcpip_poll+0x118>
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	7f1b      	ldrb	r3, [r3, #28]
 800c532:	f083 0301 	eor.w	r3, r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00f      	beq.n	800c55c <mg_tcpip_poll+0x118>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c542:	2b01      	cmp	r3, #1
 800c544:	d10a      	bne.n	800c55c <mg_tcpip_poll+0x118>
               ifp->ip) {
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	689b      	ldr	r3, [r3, #8]
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d006      	beq.n	800c55c <mg_tcpip_poll+0x118>
      ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2203      	movs	r2, #3
 800c552:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      onstatechange(ifp);
 800c556:	6978      	ldr	r0, [r7, #20]
 800c558:	f7fd fd60 	bl	800a01c <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10d      	bne.n	800c582 <mg_tcpip_poll+0x13e>
 800c566:	4ba2      	ldr	r3, [pc, #648]	@ (800c7f0 <mg_tcpip_poll+0x3ac>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	dd09      	ble.n	800c582 <mg_tcpip_poll+0x13e>
 800c56e:	4ba1      	ldr	r3, [pc, #644]	@ (800c7f4 <mg_tcpip_poll+0x3b0>)
 800c570:	f241 7296 	movw	r2, #6038	@ 0x1796
 800c574:	49a0      	ldr	r1, [pc, #640]	@ (800c7f8 <mg_tcpip_poll+0x3b4>)
 800c576:	2001      	movs	r0, #1
 800c578:	f7fb fd56 	bl	8008028 <mg_log_prefix>
 800c57c:	489f      	ldr	r0, [pc, #636]	@ (800c7fc <mg_tcpip_poll+0x3b8>)
 800c57e:	f7fb fda3 	bl	80080c8 <mg_log>
    mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800c582:	2200      	movs	r2, #0
 800c584:	2104      	movs	r1, #4
 800c586:	6978      	ldr	r0, [r7, #20]
 800c588:	f7fd fbdc 	bl	8009d44 <mg_tcpip_call>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 819d 	beq.w	800c8d2 <mg_tcpip_poll+0x48e>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	7f1b      	ldrb	r3, [r3, #28]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d055      	beq.n	800c64c <mg_tcpip_poll+0x208>
 800c5a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d051      	beq.n	800c64c <mg_tcpip_poll+0x208>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d103      	bne.n	800c5ba <mg_tcpip_poll+0x176>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7fd ffd4 	bl	800a560 <tx_dhcp_discover>
 800c5b8:	e048      	b.n	800c64c <mg_tcpip_poll+0x208>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d143      	bne.n	800c64c <mg_tcpip_poll+0x208>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	d03e      	beq.n	800c64c <mg_tcpip_poll+0x208>
      if (ifp->now >= ifp->lease_expire) {
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800c5da:	4290      	cmp	r0, r2
 800c5dc:	eb71 0303 	sbcs.w	r3, r1, r3
 800c5e0:	d30a      	bcc.n	800c5f8 <mg_tcpip_poll+0x1b4>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800c5f0:	6978      	ldr	r0, [r7, #20]
 800c5f2:	f7fd fd13 	bl	800a01c <onstatechange>
 800c5f6:	e029      	b.n	800c64c <mg_tcpip_poll+0x208>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800c5fe:	4980      	ldr	r1, [pc, #512]	@ (800c800 <mg_tcpip_poll+0x3bc>)
 800c600:	1854      	adds	r4, r2, r1
 800c602:	f143 0500 	adc.w	r5, r3, #0
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800c60c:	42a2      	cmp	r2, r4
 800c60e:	41ab      	sbcs	r3, r5
 800c610:	d21c      	bcs.n	800c64c <mg_tcpip_poll+0x208>
                 ((ifp->now / 1000) % 60) == 0) {
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c618:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c61c:	f04f 0300 	mov.w	r3, #0
 800c620:	f7f4 f8d2 	bl	80007c8 <__aeabi_uldivmod>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4610      	mov	r0, r2
 800c62a:	4619      	mov	r1, r3
 800c62c:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	f7f4 f8c8 	bl	80007c8 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c638:	4313      	orrs	r3, r2
 800c63a:	d107      	bne.n	800c64c <mg_tcpip_poll+0x208>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	f04f 33ff 	mov.w	r3, #4294967295
 800c644:	496f      	ldr	r1, [pc, #444]	@ (800c804 <mg_tcpip_poll+0x3c0>)
 800c646:	6978      	ldr	r0, [r7, #20]
 800c648:	f7fd ff58 	bl	800a4fc <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d019      	beq.n	800c68a <mg_tcpip_poll+0x246>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	4798      	blx	r3
 800c668:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800c66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d024      	beq.n	800c6ba <mg_tcpip_poll+0x276>
      ifp->nrecv++;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c680:	4619      	mov	r1, r3
 800c682:	6978      	ldr	r0, [r7, #20]
 800c684:	f7ff fdca 	bl	800c21c <mg_tcpip_rx>
 800c688:	e017      	b.n	800c6ba <mg_tcpip_poll+0x276>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	3334      	adds	r3, #52	@ 0x34
 800c68e:	f107 0220 	add.w	r2, r7, #32
 800c692:	4611      	mov	r1, r2
 800c694:	4618      	mov	r0, r3
 800c696:	f001 fb87 	bl	800dda8 <mg_queue_next>
 800c69a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <mg_tcpip_poll+0x276>
      mg_tcpip_rx(ifp, buf, len);
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6978      	ldr	r0, [r7, #20]
 800c6aa:	f7ff fdb7 	bl	800c21c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	3334      	adds	r3, #52	@ 0x34
 800c6b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f001 fbf5 	bl	800dea4 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c2:	e101      	b.n	800c8c8 <mg_tcpip_poll+0x484>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d008      	beq.n	800c6e6 <mg_tcpip_poll+0x2a2>
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c6da:	f003 0310 	and.w	r3, r3, #16
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 80eb 	beq.w	800c8bc <mg_tcpip_poll+0x478>
 800c6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c6ec:	f003 0301 	and.w	r3, r3, #1
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f040 80e2 	bne.w	800c8bc <mg_tcpip_poll+0x478>
 800c6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c6fe:	f003 0308 	and.w	r3, r3, #8
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b00      	cmp	r3, #0
 800c706:	f040 80d9 	bne.w	800c8bc <mg_tcpip_poll+0x478>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800c70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c70c:	33b0      	adds	r3, #176	@ 0xb0
 800c70e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c712:	331c      	adds	r3, #28
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 800c718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c71e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c722:	4290      	cmp	r0, r2
 800c724:	eb71 0303 	sbcs.w	r3, r1, r3
 800c728:	f080 80cb 	bcs.w	800c8c2 <mg_tcpip_poll+0x47e>
      if (s->ttype == MIP_TTYPE_ARP) {
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	7f9b      	ldrb	r3, [r3, #30]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d104      	bne.n	800c73e <mg_tcpip_poll+0x2fa>
        mg_error(c, "ARP timeout");
 800c734:	4934      	ldr	r1, [pc, #208]	@ (800c808 <mg_tcpip_poll+0x3c4>)
 800c736:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c738:	f7f6 f98a 	bl	8002a50 <mg_error>
 800c73c:	e0b9      	b.n	800c8b2 <mg_tcpip_poll+0x46e>
      } else if (c->is_udp) {
 800c73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c740:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f040 80b8 	bne.w	800c8c0 <mg_tcpip_poll+0x47c>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	7f9b      	ldrb	r3, [r3, #30]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d142      	bne.n	800c7de <mg_tcpip_poll+0x39a>
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	691a      	ldr	r2, [r3, #16]
 800c75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	429a      	cmp	r2, r3
 800c762:	d03c      	beq.n	800c7de <mg_tcpip_poll+0x39a>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 800c764:	4b22      	ldr	r3, [pc, #136]	@ (800c7f0 <mg_tcpip_poll+0x3ac>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	dd0f      	ble.n	800c78c <mg_tcpip_poll+0x348>
 800c76c:	4b21      	ldr	r3, [pc, #132]	@ (800c7f4 <mg_tcpip_poll+0x3b0>)
 800c76e:	f241 72ca 	movw	r2, #6090	@ 0x17ca
 800c772:	4921      	ldr	r1, [pc, #132]	@ (800c7f8 <mg_tcpip_poll+0x3b4>)
 800c774:	2004      	movs	r0, #4
 800c776:	f7fb fc57 	bl	8008028 <mg_log_prefix>
 800c77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c77c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	4821      	ldr	r0, [pc, #132]	@ (800c80c <mg_tcpip_poll+0x3c8>)
 800c788:	f7fb fc9e 	bl	80080c8 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	f103 0618 	add.w	r6, r3, #24
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	613b      	str	r3, [r7, #16]
 800c796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c798:	8b1c      	ldrh	r4, [r3, #24]
 800c79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800c79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f00b f9aa 	bl	8017afc <mg_ntohl>
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f00b f9a4 	bl	8017afc <mg_ntohl>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	9205      	str	r2, [sp, #20]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	9204      	str	r2, [sp, #16]
 800c7be:	9303      	str	r3, [sp, #12]
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	9102      	str	r1, [sp, #8]
 800c7c4:	9501      	str	r5, [sp, #4]
 800c7c6:	9400      	str	r4, [sp, #0]
 800c7c8:	2310      	movs	r3, #16
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	6978      	ldr	r0, [r7, #20]
 800c7d0:	f7fe fd2a 	bl	800b228 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	611a      	str	r2, [r3, #16]
 800c7dc:	e069      	b.n	800c8b2 <mg_tcpip_poll+0x46e>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	7f9b      	ldrb	r3, [r3, #30]
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d116      	bne.n	800c814 <mg_tcpip_poll+0x3d0>
        mg_error(c, "Connection timeout");
 800c7e6:	490a      	ldr	r1, [pc, #40]	@ (800c810 <mg_tcpip_poll+0x3cc>)
 800c7e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c7ea:	f7f6 f931 	bl	8002a50 <mg_error>
 800c7ee:	e060      	b.n	800c8b2 <mg_tcpip_poll+0x46e>
 800c7f0:	24000240 	.word	0x24000240
 800c7f4:	0802c1e4 	.word	0x0802c1e4
 800c7f8:	08028ac4 	.word	0x08028ac4
 800c7fc:	0802a050 	.word	0x0802a050
 800c800:	001b7740 	.word	0x001b7740
 800c804:	0802be4c 	.word	0x0802be4c
 800c808:	0802a060 	.word	0x0802a060
 800c80c:	0802a06c 	.word	0x0802a06c
 800c810:	0802a07c 	.word	0x0802a07c
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c816:	7f9b      	ldrb	r3, [r3, #30]
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d107      	bne.n	800c82c <mg_tcpip_poll+0x3e8>
        c->is_closing = 1;
 800c81c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c81e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800c822:	f043 0320 	orr.w	r3, r3, #32
 800c826:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800c82a:	e04a      	b.n	800c8c2 <mg_tcpip_poll+0x47e>
      } else {
        if (s->tmiss++ > 2) {
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	7fdb      	ldrb	r3, [r3, #31]
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	b2d1      	uxtb	r1, r2
 800c834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c836:	77d1      	strb	r1, [r2, #31]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d904      	bls.n	800c846 <mg_tcpip_poll+0x402>
          mg_error(c, "keepalive");
 800c83c:	4927      	ldr	r1, [pc, #156]	@ (800c8dc <mg_tcpip_poll+0x498>)
 800c83e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c840:	f7f6 f906 	bl	8002a50 <mg_error>
 800c844:	e035      	b.n	800c8b2 <mg_tcpip_poll+0x46e>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800c846:	4b26      	ldr	r3, [pc, #152]	@ (800c8e0 <mg_tcpip_poll+0x49c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	dd0c      	ble.n	800c868 <mg_tcpip_poll+0x424>
 800c84e:	4b25      	ldr	r3, [pc, #148]	@ (800c8e4 <mg_tcpip_poll+0x4a0>)
 800c850:	f241 72d7 	movw	r2, #6103	@ 0x17d7
 800c854:	4924      	ldr	r1, [pc, #144]	@ (800c8e8 <mg_tcpip_poll+0x4a4>)
 800c856:	2004      	movs	r0, #4
 800c858:	f7fb fbe6 	bl	8008028 <mg_log_prefix>
 800c85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c860:	4619      	mov	r1, r3
 800c862:	4822      	ldr	r0, [pc, #136]	@ (800c8ec <mg_tcpip_poll+0x4a8>)
 800c864:	f7fb fc30 	bl	80080c8 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86a:	f103 0618 	add.w	r6, r3, #24
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	613b      	str	r3, [r7, #16]
 800c872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c874:	8b1c      	ldrh	r4, [r3, #24]
 800c876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c878:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c87e:	3b01      	subs	r3, #1
 800c880:	4618      	mov	r0, r3
 800c882:	f00b f93b 	bl	8017afc <mg_ntohl>
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f00b f935 	bl	8017afc <mg_ntohl>
 800c892:	4603      	mov	r3, r0
 800c894:	2200      	movs	r2, #0
 800c896:	9205      	str	r2, [sp, #20]
 800c898:	2200      	movs	r2, #0
 800c89a:	9204      	str	r2, [sp, #16]
 800c89c:	9303      	str	r3, [sp, #12]
 800c89e:	6879      	ldr	r1, [r7, #4]
 800c8a0:	9102      	str	r1, [sp, #8]
 800c8a2:	9501      	str	r5, [sp, #4]
 800c8a4:	9400      	str	r4, [sp, #0]
 800c8a6:	2310      	movs	r3, #16
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	6978      	ldr	r0, [r7, #20]
 800c8ae:	f7fe fcbb 	bl	800b228 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c8b6:	f7fd fad1 	bl	8009e5c <settmout>
 800c8ba:	e002      	b.n	800c8c2 <mg_tcpip_poll+0x47e>
      continue;
 800c8bc:	bf00      	nop
 800c8be:	e000      	b.n	800c8c2 <mg_tcpip_poll+0x47e>
        continue;
 800c8c0:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f47f aefa 	bne.w	800c6c4 <mg_tcpip_poll+0x280>
 800c8d0:	e000      	b.n	800c8d4 <mg_tcpip_poll+0x490>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c8d2:	bf00      	nop
    }
  }
}
 800c8d4:	373c      	adds	r7, #60	@ 0x3c
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	0802a090 	.word	0x0802a090
 800c8e0:	24000240 	.word	0x24000240
 800c8e4:	0802c1e4 	.word	0x0802c1e4
 800c8e8:	08028ac4 	.word	0x08028ac4
 800c8ec:	0802a09c 	.word	0x0802a09c

0800c8f0 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3334      	adds	r3, #52	@ 0x34
 800c900:	f107 0114 	add.w	r1, r7, #20
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	4618      	mov	r0, r3
 800c908:	f001 f9f6 	bl	800dcf8 <mg_queue_book>
 800c90c:	4602      	mov	r2, r0
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	4293      	cmp	r3, r2
 800c912:	d811      	bhi.n	800c938 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	68f9      	ldr	r1, [r7, #12]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f018 fbe9 	bl	80250f2 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	3334      	adds	r3, #52	@ 0x34
 800c924:	68b9      	ldr	r1, [r7, #8]
 800c926:	4618      	mov	r0, r3
 800c928:	f001 fa84 	bl	800de34 <mg_queue_add>
    ifp->nrecv++;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	671a      	str	r2, [r3, #112]	@ 0x70
  } else {
    ifp->ndrop++;
  }
}
 800c936:	e004      	b.n	800c942 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800c942:	bf00      	nop
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
	...

0800c94c <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d12d      	bne.n	800c9ba <mg_tcpip_init+0x6e>
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	785b      	ldrb	r3, [r3, #1]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d129      	bne.n	800c9ba <mg_tcpip_init+0x6e>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	789b      	ldrb	r3, [r3, #2]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d125      	bne.n	800c9ba <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c972:	2b00      	cmp	r3, #0
 800c974:	d121      	bne.n	800c9ba <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	791b      	ldrb	r3, [r3, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d11d      	bne.n	800c9ba <mg_tcpip_init+0x6e>
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	795b      	ldrb	r3, [r3, #5]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d119      	bne.n	800c9ba <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2202      	movs	r2, #2
 800c98a:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	3301      	adds	r3, #1
 800c990:	2105      	movs	r1, #5
 800c992:	4618      	mov	r0, r3
 800c994:	f7f4 fac6 	bl	8000f24 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800c998:	4b51      	ldr	r3, [pc, #324]	@ (800cae0 <mg_tcpip_init+0x194>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	dd0c      	ble.n	800c9ba <mg_tcpip_init+0x6e>
 800c9a0:	4b50      	ldr	r3, [pc, #320]	@ (800cae4 <mg_tcpip_init+0x198>)
 800c9a2:	f241 72f6 	movw	r2, #6134	@ 0x17f6
 800c9a6:	4950      	ldr	r1, [pc, #320]	@ (800cae8 <mg_tcpip_init+0x19c>)
 800c9a8:	2002      	movs	r0, #2
 800c9aa:	f7fb fb3d 	bl	8008028 <mg_log_prefix>
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	494e      	ldr	r1, [pc, #312]	@ (800caec <mg_tcpip_init+0x1a0>)
 800c9b4:	484e      	ldr	r0, [pc, #312]	@ (800caf0 <mg_tcpip_init+0x1a4>)
 800c9b6:	f7fb fb87 	bl	80080c8 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d019      	beq.n	800c9f8 <mg_tcpip_init+0xac>
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6838      	ldr	r0, [r7, #0]
 800c9cc:	4798      	blx	r3
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f083 0301 	eor.w	r3, r3, #1
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00e      	beq.n	800c9f8 <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 800c9da:	4b41      	ldr	r3, [pc, #260]	@ (800cae0 <mg_tcpip_init+0x194>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	dd7a      	ble.n	800cad8 <mg_tcpip_init+0x18c>
 800c9e2:	4b40      	ldr	r3, [pc, #256]	@ (800cae4 <mg_tcpip_init+0x198>)
 800c9e4:	f241 72fa 	movw	r2, #6138	@ 0x17fa
 800c9e8:	493f      	ldr	r1, [pc, #252]	@ (800cae8 <mg_tcpip_init+0x19c>)
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	f7fb fb1c 	bl	8008028 <mg_log_prefix>
 800c9f0:	4840      	ldr	r0, [pc, #256]	@ (800caf4 <mg_tcpip_init+0x1a8>)
 800c9f2:	f7fb fb69 	bl	80080c8 <mg_log>
 800c9f6:	e06f      	b.n	800cad8 <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 800c9f8:	f240 6304 	movw	r3, #1540	@ 0x604
 800c9fc:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800c9fe:	68f9      	ldr	r1, [r7, #12]
 800ca00:	2001      	movs	r0, #1
 800ca02:	f016 ff7b 	bl	80238fc <calloc>
 800ca06:	4603      	mov	r3, r0
 800ca08:	461a      	mov	r2, r3
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	615a      	str	r2, [r3, #20]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <mg_tcpip_init+0xe6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <mg_tcpip_init+0xde>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	e001      	b.n	800ca2e <mg_tcpip_init+0xe2>
 800ca2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca36:	4619      	mov	r1, r3
 800ca38:	2001      	movs	r0, #1
 800ca3a:	f016 ff5f 	bl	80238fc <calloc>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	461a      	mov	r2, r3
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800ca46:	f7f4 fa9b 	bl	8000f80 <mg_millis>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ca66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2230      	movs	r2, #48	@ 0x30
 800ca6e:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d102      	bne.n	800ca7e <mg_tcpip_init+0x132>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	3346      	adds	r3, #70	@ 0x46
 800ca82:	2206      	movs	r2, #6
 800ca84:	21ff      	movs	r1, #255	@ 0xff
 800ca86:	4618      	mov	r0, r3
 800ca88:	f018 f9e8 	bl	8024e5c <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	3368      	adds	r3, #104	@ 0x68
 800ca90:	2102      	movs	r1, #2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7f4 fa46 	bl	8000f24 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800ca9e:	4b16      	ldr	r3, [pc, #88]	@ (800caf8 <mg_tcpip_init+0x1ac>)
 800caa0:	4313      	orrs	r3, r2
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	695b      	ldr	r3, [r3, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <mg_tcpip_init+0x16e>
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10e      	bne.n	800cad8 <mg_tcpip_init+0x18c>
 800caba:	4b09      	ldr	r3, [pc, #36]	@ (800cae0 <mg_tcpip_init+0x194>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	dd0a      	ble.n	800cad8 <mg_tcpip_init+0x18c>
 800cac2:	4b08      	ldr	r3, [pc, #32]	@ (800cae4 <mg_tcpip_init+0x198>)
 800cac4:	f641 020b 	movw	r2, #6155	@ 0x180b
 800cac8:	4907      	ldr	r1, [pc, #28]	@ (800cae8 <mg_tcpip_init+0x19c>)
 800caca:	2001      	movs	r0, #1
 800cacc:	f7fb faac 	bl	8008028 <mg_log_prefix>
 800cad0:	480a      	ldr	r0, [pc, #40]	@ (800cafc <mg_tcpip_init+0x1b0>)
 800cad2:	f7fb faf9 	bl	80080c8 <mg_log>
  }
}
 800cad6:	e7ff      	b.n	800cad8 <mg_tcpip_init+0x18c>
 800cad8:	bf00      	nop
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	24000240 	.word	0x24000240
 800cae4:	0802c1f4 	.word	0x0802c1f4
 800cae8:	08028ac4 	.word	0x08028ac4
 800caec:	0800da11 	.word	0x0800da11
 800caf0:	0802a0ac 	.word	0x0802a0ac
 800caf4:	0802a0d0 	.word	0x0802a0d0
 800caf8:	ffff8000 	.word	0xffff8000
 800cafc:	08029b20 	.word	0x08029b20

0800cb00 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 800cb00:	b590      	push	{r4, r7, lr}
 800cb02:	b08d      	sub	sp, #52	@ 0x34
 800cb04:	af06      	add	r7, sp, #24
 800cb06:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	33b0      	adds	r3, #176	@ 0xb0
 800cb0c:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8b1b      	ldrh	r3, [r3, #24]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f00b f80b 	bl	8017b2e <mg_ntohs>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f00a ffee 	bl	8017afc <mg_ntohl>
 800cb20:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb28:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	331c      	adds	r3, #28
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f103 0018 	add.w	r0, r3, #24
 800cb38:	68bc      	ldr	r4, [r7, #8]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8b1b      	ldrh	r3, [r3, #24]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800cb42:	2100      	movs	r1, #0
 800cb44:	9105      	str	r1, [sp, #20]
 800cb46:	2100      	movs	r1, #0
 800cb48:	9104      	str	r1, [sp, #16]
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	9103      	str	r1, [sp, #12]
 800cb4e:	6939      	ldr	r1, [r7, #16]
 800cb50:	9102      	str	r1, [sp, #8]
 800cb52:	9201      	str	r2, [sp, #4]
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	2302      	movs	r3, #2
 800cb58:	4622      	mov	r2, r4
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f7fe fb63 	bl	800b228 <tx_tcp>
         0);
}
 800cb62:	bf00      	nop
 800cb64:	371c      	adds	r7, #28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd90      	pop	{r4, r7, pc}

0800cb6a <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00c      	beq.n	800cb9c <mac_resolved+0x32>
    c->is_connecting = 0;
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cb88:	f36f 1345 	bfc	r3, #5, #1
 800cb8c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 800cb90:	2200      	movs	r2, #0
 800cb92:	2104      	movs	r1, #4
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7f5 ff3b 	bl	8002a10 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 800cb9a:	e006      	b.n	800cbaa <mac_resolved+0x40>
    send_syn(c);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7ff ffaf 	bl	800cb00 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 800cba2:	2103      	movs	r1, #3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7fd f959 	bl	8009e5c <settmout>
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08a      	sub	sp, #40	@ 0x28
 800cbb8:	af02      	add	r7, sp, #8
 800cbba:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc2:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	331c      	adds	r3, #28
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cbd2:	f36f 03c3 	bfc	r3, #3, #1
 800cbd6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cbe0:	b21b      	sxth	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	db04      	blt.n	800cbf0 <mg_connect_resolved+0x3c>
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800cbec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	69fa      	ldr	r2, [r7, #28]
 800cbf6:	3208      	adds	r2, #8
 800cbf8:	6812      	ldr	r2, [r2, #0]
 800cbfa:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc02:	1c5a      	adds	r2, r3, #1
 800cc04:	b291      	uxth	r1, r2
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f00a ff8e 	bl	8017b2e <mg_ntohs>
 800cc12:	4603      	mov	r3, r0
 800cc14:	461a      	mov	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 800cc1a:	4b61      	ldr	r3, [pc, #388]	@ (800cda0 <mg_connect_resolved+0x1ec>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	dd15      	ble.n	800cc4e <mg_connect_resolved+0x9a>
 800cc22:	4b60      	ldr	r3, [pc, #384]	@ (800cda4 <mg_connect_resolved+0x1f0>)
 800cc24:	f641 0230 	movw	r2, #6192	@ 0x1830
 800cc28:	495f      	ldr	r1, [pc, #380]	@ (800cda8 <mg_connect_resolved+0x1f4>)
 800cc2a:	2003      	movs	r0, #3
 800cc2c:	f7fb f9fc 	bl	8008028 <mg_log_prefix>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f103 0208 	add.w	r2, r3, #8
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	331c      	adds	r3, #28
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	4b5a      	ldr	r3, [pc, #360]	@ (800cdac <mg_connect_resolved+0x1f8>)
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	4613      	mov	r3, r2
 800cc46:	4a59      	ldr	r2, [pc, #356]	@ (800cdac <mg_connect_resolved+0x1f8>)
 800cc48:	4859      	ldr	r0, [pc, #356]	@ (800cdb0 <mg_connect_resolved+0x1fc>)
 800cc4a:	f7fb fa3d 	bl	80080c8 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2103      	movs	r1, #3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7f5 fedc 	bl	8002a10 <mg_call>
  c->is_connecting = 1;
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cc5e:	f043 0320 	orr.w	r3, r3, #32
 800cc62:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d01a      	beq.n	800ccac <mg_connect_resolved+0xf8>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d008      	beq.n	800cc90 <mg_connect_resolved+0xdc>
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	689a      	ldr	r2, [r3, #8]
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	43db      	mvns	r3, r3
 800cc88:	431a      	orrs	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d10d      	bne.n	800ccac <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	33b0      	adds	r3, #176	@ 0xb0
 800cc94:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	3318      	adds	r3, #24
 800cc9a:	2206      	movs	r2, #6
 800cc9c:	21ff      	movs	r1, #255	@ 0xff
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f018 f8dc 	bl	8024e5c <memset>
    mac_resolved(c);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f7ff ff60 	bl	800cb6a <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800ccaa:	e075      	b.n	800cd98 <mg_connect_resolved+0x1e4>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d030      	beq.n	800cd16 <mg_connect_resolved+0x162>
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	405a      	eors	r2, r3
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d127      	bne.n	800cd16 <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	691a      	ldr	r2, [r3, #16]
 800ccca:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d022      	beq.n	800cd16 <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 800ccd0:	4b33      	ldr	r3, [pc, #204]	@ (800cda0 <mg_connect_resolved+0x1ec>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	dd0c      	ble.n	800ccf2 <mg_connect_resolved+0x13e>
 800ccd8:	4b32      	ldr	r3, [pc, #200]	@ (800cda4 <mg_connect_resolved+0x1f0>)
 800ccda:	f641 023b 	movw	r2, #6203	@ 0x183b
 800ccde:	4932      	ldr	r1, [pc, #200]	@ (800cda8 <mg_connect_resolved+0x1f4>)
 800cce0:	2003      	movs	r0, #3
 800cce2:	f7fb f9a1 	bl	8008028 <mg_log_prefix>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccea:	4619      	mov	r1, r3
 800ccec:	4831      	ldr	r0, [pc, #196]	@ (800cdb4 <mg_connect_resolved+0x200>)
 800ccee:	f7fb f9eb 	bl	80080c8 <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	69f8      	ldr	r0, [r7, #28]
 800ccfa:	f7fd f927 	bl	8009f4c <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 800ccfe:	2102      	movs	r1, #2
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7fd f8ab 	bl	8009e5c <settmout>
    c->is_arplooking = 1;
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cd0c:	f043 0310 	orr.w	r3, r3, #16
 800cd10:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800cd14:	e040      	b.n	800cd98 <mg_connect_resolved+0x1e4>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800cd16:	f107 030c 	add.w	r3, r7, #12
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800cd20:	2be0      	cmp	r3, #224	@ 0xe0
 800cd22:	d129      	bne.n	800cd78 <mg_connect_resolved+0x1c4>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	33b0      	adds	r3, #176	@ 0xb0
 800cd28:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800cd2a:	4a23      	ldr	r2, [pc, #140]	@ (800cdb8 <mg_connect_resolved+0x204>)
 800cd2c:	f107 0308 	add.w	r3, r7, #8
 800cd30:	6812      	ldr	r2, [r2, #0]
 800cd32:	4611      	mov	r1, r2
 800cd34:	8019      	strh	r1, [r3, #0]
 800cd36:	3302      	adds	r3, #2
 800cd38:	0c12      	lsrs	r2, r2, #16
 800cd3a:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	3318      	adds	r3, #24
 800cd40:	461a      	mov	r2, r3
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	8819      	ldrh	r1, [r3, #0]
 800cd48:	789b      	ldrb	r3, [r3, #2]
 800cd4a:	8011      	strh	r1, [r2, #0]
 800cd4c:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	3318      	adds	r3, #24
 800cd52:	1cd8      	adds	r0, r3, #3
 800cd54:	f107 030c 	add.w	r3, r7, #12
 800cd58:	3301      	adds	r3, #1
 800cd5a:	2203      	movs	r2, #3
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	f018 f9c8 	bl	80250f2 <memcpy>
    s->mac[3] &= 0x7F;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	7edb      	ldrb	r3, [r3, #27]
 800cd66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	76da      	strb	r2, [r3, #27]
    mac_resolved(c);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fefa 	bl	800cb6a <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 800cd76:	e00f      	b.n	800cd98 <mg_connect_resolved+0x1e4>
    struct connstate *s = (struct connstate *) (c + 1);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	33b0      	adds	r3, #176	@ 0xb0
 800cd7c:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f103 0018 	add.w	r0, r3, #24
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	3346      	adds	r3, #70	@ 0x46
 800cd88:	2206      	movs	r2, #6
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	f018 f9b1 	bl	80250f2 <memcpy>
    mac_resolved(c);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff feea 	bl	800cb6a <mac_resolved>
}
 800cd96:	e7ff      	b.n	800cd98 <mg_connect_resolved+0x1e4>
 800cd98:	bf00      	nop
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	24000240 	.word	0x24000240
 800cda4:	0802c204 	.word	0x0802c204
 800cda8:	08028ac4 	.word	0x08028ac4
 800cdac:	0800d9c5 	.word	0x0800d9c5
 800cdb0:	0802a0e4 	.word	0x0802a0e4
 800cdb4:	0802a0f4 	.word	0x0802a0f4
 800cdb8:	0802a108 	.word	0x0802a108

0800cdbc <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800cdc6:	6838      	ldr	r0, [r7, #0]
 800cdc8:	f00a fdd4 	bl	8017974 <mg_url_port>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f00a fead 	bl	8017b2e <mg_ntohs>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	831a      	strh	r2, [r3, #24]
  return true;
 800cddc:	2301      	movs	r3, #1
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cdf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdfa:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce08:	461a      	mov	r2, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f005 fb44 	bl	8012498 <mg_tls_send>
 800ce10:	4603      	mov	r3, r0
 800ce12:	e008      	b.n	800ce26 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7fe fc5a 	bl	800b6d8 <mg_io_send>
 800ce24:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ce26:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2e:	d104      	bne.n	800ce3a <write_conn+0x52>
    mg_error(c, "tx err");
 800ce30:	490c      	ldr	r1, [pc, #48]	@ (800ce64 <write_conn+0x7c>)
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7f5 fe0c 	bl	8002a50 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 800ce38:	e010      	b.n	800ce5c <write_conn+0x74>
  } else if (len > 0) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	dd0d      	ble.n	800ce5c <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	3348      	adds	r3, #72	@ 0x48
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7fa f9fd 	bl	8007248 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800ce4e:	f107 030c 	add.w	r3, r7, #12
 800ce52:	461a      	mov	r2, r3
 800ce54:	2108      	movs	r1, #8
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7f5 fdda 	bl	8002a10 <mg_call>
}
 800ce5c:	bf00      	nop
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	0802a10c 	.word	0x0802a10c

0800ce68 <init_closure>:

static void init_closure(struct mg_connection *c) {
 800ce68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce6a:	b08f      	sub	sp, #60	@ 0x3c
 800ce6c:	af06      	add	r7, sp, #24
 800ce6e:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	33b0      	adds	r3, #176	@ 0xb0
 800ce74:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ce7c:	f003 0301 	and.w	r3, r3, #1
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d13f      	bne.n	800cf06 <init_closure+0x9e>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ce8c:	f003 0301 	and.w	r3, r3, #1
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d137      	bne.n	800cf06 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ce9c:	f003 0320 	and.w	r3, r3, #32
 800cea0:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d12f      	bne.n	800cf06 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800ceaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceac:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	331c      	adds	r3, #28
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	f103 0618 	add.w	r6, r3, #24
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	60bb      	str	r3, [r7, #8]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	8b1c      	ldrh	r4, [r3, #24]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4618      	mov	r0, r3
 800cece:	f00a fe15 	bl	8017afc <mg_ntohl>
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f00a fe0f 	bl	8017afc <mg_ntohl>
 800cede:	4603      	mov	r3, r0
 800cee0:	2200      	movs	r2, #0
 800cee2:	9205      	str	r2, [sp, #20]
 800cee4:	2200      	movs	r2, #0
 800cee6:	9204      	str	r2, [sp, #16]
 800cee8:	9303      	str	r3, [sp, #12]
 800ceea:	6879      	ldr	r1, [r7, #4]
 800ceec:	9102      	str	r1, [sp, #8]
 800ceee:	9501      	str	r5, [sp, #4]
 800cef0:	9400      	str	r4, [sp, #0]
 800cef2:	2311      	movs	r3, #17
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	4631      	mov	r1, r6
 800cef8:	69b8      	ldr	r0, [r7, #24]
 800cefa:	f7fe f995 	bl	800b228 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 800cefe:	2104      	movs	r1, #4
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7fc ffab 	bl	8009e5c <settmout>
  }
}
 800cf06:	bf00      	nop
 800cf08:	3724      	adds	r7, #36	@ 0x24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf0e <close_conn>:

static void close_conn(struct mg_connection *c) {
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	33b0      	adds	r3, #176	@ 0xb0
 800cf1a:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	3320      	adds	r3, #32
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fa f9dc 	bl	80072de <mg_iobuf_free>
  mg_close_conn(c);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7fc fcba 	bl	80098a0 <mg_close_conn>
}
 800cf2c:	bf00      	nop
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <can_write>:

static bool can_write(struct mg_connection *c) {
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d11d      	bne.n	800cf88 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf52:	f003 0308 	and.w	r3, r3, #8
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d115      	bne.n	800cf88 <can_write+0x54>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d011      	beq.n	800cf88 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cf6e:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d109      	bne.n	800cf88 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf7a:	f003 0310 	and.w	r3, r3, #16
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <can_write+0x54>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e000      	b.n	800cf8a <can_write+0x56>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	b2db      	uxtb	r3, r3
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800cf9c:	b5b0      	push	{r4, r5, r7, lr}
 800cf9e:	b08c      	sub	sp, #48	@ 0x30
 800cfa0:	af04      	add	r7, sp, #16
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfaa:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800cfac:	f7f3 ffe8 	bl	8000f80 <mg_millis>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cfbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cfc2:	4608      	mov	r0, r1
 800cfc4:	f002 fc16 	bl	800f7f4 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 80aa 	beq.w	800d124 <mg_mgr_poll+0x188>
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 80a5 	beq.w	800d124 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 800cfda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cfde:	69b8      	ldr	r0, [r7, #24]
 800cfe0:	f7ff fa30 	bl	800c444 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	e096      	b.n	800d11a <mg_mgr_poll+0x17e>
    tmp = c->next;
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	33b0      	adds	r3, #176	@ 0xb0
 800cff6:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800cff8:	f107 0308 	add.w	r3, r7, #8
 800cffc:	461a      	mov	r2, r3
 800cffe:	2102      	movs	r1, #2
 800d000:	69f8      	ldr	r0, [r7, #28]
 800d002:	f7f5 fd05 	bl	8002a10 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800d006:	4b49      	ldr	r3, [pc, #292]	@ (800d12c <mg_mgr_poll+0x190>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	dd48      	ble.n	800d0a0 <mg_mgr_poll+0x104>
 800d00e:	4b48      	ldr	r3, [pc, #288]	@ (800d130 <mg_mgr_poll+0x194>)
 800d010:	f641 0281 	movw	r2, #6273	@ 0x1881
 800d014:	4947      	ldr	r1, [pc, #284]	@ (800d134 <mg_mgr_poll+0x198>)
 800d016:	2004      	movs	r0, #4
 800d018:	f7fb f806 	bl	8008028 <mg_log_prefix>
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <mg_mgr_poll+0x98>
 800d030:	2454      	movs	r4, #84	@ 0x54
 800d032:	e000      	b.n	800d036 <mg_mgr_poll+0x9a>
 800d034:	2474      	movs	r4, #116	@ 0x74
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d03c:	f003 0320 	and.w	r3, r3, #32
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <mg_mgr_poll+0xae>
 800d046:	2543      	movs	r5, #67	@ 0x43
 800d048:	e000      	b.n	800d04c <mg_mgr_poll+0xb0>
 800d04a:	2563      	movs	r5, #99	@ 0x63
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d052:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <mg_mgr_poll+0xc4>
 800d05c:	2348      	movs	r3, #72	@ 0x48
 800d05e:	e000      	b.n	800d062 <mg_mgr_poll+0xc6>
 800d060:	2368      	movs	r3, #104	@ 0x68
 800d062:	69fa      	ldr	r2, [r7, #28]
 800d064:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 800d068:	f002 0208 	and.w	r2, r2, #8
 800d06c:	b2d2      	uxtb	r2, r2
 800d06e:	2a00      	cmp	r2, #0
 800d070:	d001      	beq.n	800d076 <mg_mgr_poll+0xda>
 800d072:	2252      	movs	r2, #82	@ 0x52
 800d074:	e000      	b.n	800d078 <mg_mgr_poll+0xdc>
 800d076:	2272      	movs	r2, #114	@ 0x72
 800d078:	69f9      	ldr	r1, [r7, #28]
 800d07a:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 800d07e:	f001 0120 	and.w	r1, r1, #32
 800d082:	b2c9      	uxtb	r1, r1
 800d084:	2900      	cmp	r1, #0
 800d086:	d001      	beq.n	800d08c <mg_mgr_poll+0xf0>
 800d088:	2143      	movs	r1, #67	@ 0x43
 800d08a:	e000      	b.n	800d08e <mg_mgr_poll+0xf2>
 800d08c:	2163      	movs	r1, #99	@ 0x63
 800d08e:	9102      	str	r1, [sp, #8]
 800d090:	9201      	str	r2, [sp, #4]
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	462b      	mov	r3, r5
 800d096:	4622      	mov	r2, r4
 800d098:	4601      	mov	r1, r0
 800d09a:	4827      	ldr	r0, [pc, #156]	@ (800d138 <mg_mgr_poll+0x19c>)
 800d09c:	f7fb f814 	bl	80080c8 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00b      	beq.n	800d0c8 <mg_mgr_poll+0x12c>
 800d0b0:	69f8      	ldr	r0, [r7, #28]
 800d0b2:	f005 fa85 	bl	80125c0 <mg_tls_pending>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d005      	beq.n	800d0c8 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	3368      	adds	r3, #104	@ 0x68
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	69f8      	ldr	r0, [r7, #28]
 800d0c4:	f7fe fb80 	bl	800b7c8 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 800d0c8:	69f8      	ldr	r0, [r7, #28]
 800d0ca:	f7ff ff33 	bl	800cf34 <can_write>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <mg_mgr_poll+0x13e>
 800d0d4:	69f8      	ldr	r0, [r7, #28]
 800d0d6:	f7ff fe87 	bl	800cde8 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d0e0:	f003 0310 	and.w	r3, r3, #16
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00a      	beq.n	800d100 <mg_mgr_poll+0x164>
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d106      	bne.n	800d100 <mg_mgr_poll+0x164>
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	7f9b      	ldrb	r3, [r3, #30]
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	d002      	beq.n	800d100 <mg_mgr_poll+0x164>
      init_closure(c);
 800d0fa:	69f8      	ldr	r0, [r7, #28]
 800d0fc:	f7ff feb4 	bl	800ce68 <init_closure>
    if (c->is_closing) close_conn(c);
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d106:	f003 0320 	and.w	r3, r3, #32
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <mg_mgr_poll+0x17a>
 800d110:	69f8      	ldr	r0, [r7, #28]
 800d112:	f7ff fefc 	bl	800cf0e <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	61fb      	str	r3, [r7, #28]
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f47f af65 	bne.w	800cfec <mg_mgr_poll+0x50>
 800d122:	e000      	b.n	800d126 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 800d124:	bf00      	nop
  }
  (void) ms;
}
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bdb0      	pop	{r4, r5, r7, pc}
 800d12c:	24000240 	.word	0x24000240
 800d130:	0802c218 	.word	0x0802c218
 800d134:	08028ac4 	.word	0x08028ac4
 800d138:	0802a114 	.word	0x0802a114

0800d13c <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800d13c:	b5b0      	push	{r4, r5, r7, lr}
 800d13e:	b08c      	sub	sp, #48	@ 0x30
 800d140:	af04      	add	r7, sp, #16
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d14e:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800d150:	2300      	movs	r3, #0
 800d152:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	331c      	adds	r3, #28
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <mg_send+0x32>
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d16a:	2b04      	cmp	r3, #4
 800d16c:	d004      	beq.n	800d178 <mg_send+0x3c>
    mg_error(c, "net down");
 800d16e:	4934      	ldr	r1, [pc, #208]	@ (800d240 <mg_send+0x104>)
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7f5 fc6d 	bl	8002a50 <mg_error>
 800d176:	e05e      	b.n	800d236 <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01e      	beq.n	800d1c6 <mg_send+0x8a>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d18e:	f003 0310 	and.w	r3, r3, #16
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d107      	bne.n	800d1a8 <mg_send+0x6c>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d19e:	f003 0308 	and.w	r3, r3, #8
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00e      	beq.n	800d1c6 <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 800d1a8:	4b26      	ldr	r3, [pc, #152]	@ (800d244 <mg_send+0x108>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	dd42      	ble.n	800d236 <mg_send+0xfa>
 800d1b0:	4b25      	ldr	r3, [pc, #148]	@ (800d248 <mg_send+0x10c>)
 800d1b2:	f641 0297 	movw	r2, #6295	@ 0x1897
 800d1b6:	4925      	ldr	r1, [pc, #148]	@ (800d24c <mg_send+0x110>)
 800d1b8:	2004      	movs	r0, #4
 800d1ba:	f7fa ff35 	bl	8008028 <mg_log_prefix>
 800d1be:	4824      	ldr	r0, [pc, #144]	@ (800d250 <mg_send+0x114>)
 800d1c0:	f7fa ff82 	bl	80080c8 <mg_log>
 800d1c4:	e037      	b.n	800d236 <mg_send+0xfa>
  } else if (c->is_udp) {
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d1cc:	f003 0301 	and.w	r3, r3, #1
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d020      	beq.n	800d218 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	33b0      	adds	r3, #176	@ 0xb0
 800d1da:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f7fe f9ec 	bl	800b5bc <trim_len>
 800d1e4:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	f103 0018 	add.w	r0, r3, #24
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	689c      	ldr	r4, [r3, #8]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	8b1d      	ldrh	r5, [r3, #24]
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	9103      	str	r1, [sp, #12]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	9102      	str	r1, [sp, #8]
 800d202:	9201      	str	r2, [sp, #4]
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	462b      	mov	r3, r5
 800d208:	4622      	mov	r2, r4
 800d20a:	4601      	mov	r1, r0
 800d20c:	69b8      	ldr	r0, [r7, #24]
 800d20e:	f7fd f806 	bl	800a21e <tx_udp>
    res = true;
 800d212:	2301      	movs	r3, #1
 800d214:	77fb      	strb	r3, [r7, #31]
 800d216:	e00e      	b.n	800d236 <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	f7f9 ffbd 	bl	80071a4 <mg_iobuf_add>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bf14      	ite	ne
 800d230:	2301      	movne	r3, #1
 800d232:	2300      	moveq	r3, #0
 800d234:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800d236:	7ffb      	ldrb	r3, [r7, #31]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3720      	adds	r7, #32
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bdb0      	pop	{r4, r5, r7, pc}
 800d240:	0802a128 	.word	0x0802a128
 800d244:	24000240 	.word	0x24000240
 800d248:	0802c224 	.word	0x0802c224
 800d24c:	08028ac4 	.word	0x08028ac4
 800d250:	0802a134 	.word	0x0802a134

0800d254 <mg_ota_begin>:

struct mg_otadata {
  uint32_t crc32, size, timestamp, status;
};

bool mg_ota_begin(size_t new_firmware_size) {
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  bool ok = false;
 800d25c:	2300      	movs	r3, #0
 800d25e:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 800d260:	4b33      	ldr	r3, [pc, #204]	@ (800d330 <mg_ota_begin+0xdc>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00e      	beq.n	800d286 <mg_ota_begin+0x32>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 800d268:	4b32      	ldr	r3, [pc, #200]	@ (800d334 <mg_ota_begin+0xe0>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd5a      	ble.n	800d326 <mg_ota_begin+0xd2>
 800d270:	4b31      	ldr	r3, [pc, #196]	@ (800d338 <mg_ota_begin+0xe4>)
 800d272:	f641 1223 	movw	r2, #6435	@ 0x1923
 800d276:	4931      	ldr	r1, [pc, #196]	@ (800d33c <mg_ota_begin+0xe8>)
 800d278:	2001      	movs	r0, #1
 800d27a:	f7fa fed5 	bl	8008028 <mg_log_prefix>
 800d27e:	4830      	ldr	r0, [pc, #192]	@ (800d340 <mg_ota_begin+0xec>)
 800d280:	f7fa ff22 	bl	80080c8 <mg_log>
 800d284:	e04f      	b.n	800d326 <mg_ota_begin+0xd2>
  } else {
    size_t half = mg_flash_size() / 2, max = half - mg_flash_sector_size();
 800d286:	f01b f83c 	bl	8028302 <mg_flash_size>
 800d28a:	4603      	mov	r3, r0
 800d28c:	085b      	lsrs	r3, r3, #1
 800d28e:	613b      	str	r3, [r7, #16]
 800d290:	f01b f844 	bl	802831c <mg_flash_sector_size>
 800d294:	4602      	mov	r2, r0
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	1a9b      	subs	r3, r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
    s_crc32 = 0;
 800d29c:	4b29      	ldr	r3, [pc, #164]	@ (800d344 <mg_ota_begin+0xf0>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	601a      	str	r2, [r3, #0]
    s_addr = (char *) mg_flash_start() + half;
 800d2a2:	f01b f825 	bl	80282f0 <mg_flash_start>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	4a26      	ldr	r2, [pc, #152]	@ (800d348 <mg_ota_begin+0xf4>)
 800d2ae:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Firmware %lu bytes, max %lu", new_firmware_size, max));
 800d2b0:	4b20      	ldr	r3, [pc, #128]	@ (800d334 <mg_ota_begin+0xe0>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	dd0b      	ble.n	800d2d0 <mg_ota_begin+0x7c>
 800d2b8:	4b1f      	ldr	r3, [pc, #124]	@ (800d338 <mg_ota_begin+0xe4>)
 800d2ba:	f641 1228 	movw	r2, #6440	@ 0x1928
 800d2be:	491f      	ldr	r1, [pc, #124]	@ (800d33c <mg_ota_begin+0xe8>)
 800d2c0:	2003      	movs	r0, #3
 800d2c2:	f7fa feb1 	bl	8008028 <mg_log_prefix>
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	4820      	ldr	r0, [pc, #128]	@ (800d34c <mg_ota_begin+0xf8>)
 800d2cc:	f7fa fefc 	bl	80080c8 <mg_log>
    if (new_firmware_size < max) {
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d216      	bcs.n	800d306 <mg_ota_begin+0xb2>
      ok = true;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	75fb      	strb	r3, [r7, #23]
      s_size = new_firmware_size;
 800d2dc:	4a14      	ldr	r2, [pc, #80]	@ (800d330 <mg_ota_begin+0xdc>)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 800d2e2:	4b14      	ldr	r3, [pc, #80]	@ (800d334 <mg_ota_begin+0xe0>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	dd1d      	ble.n	800d326 <mg_ota_begin+0xd2>
 800d2ea:	4b13      	ldr	r3, [pc, #76]	@ (800d338 <mg_ota_begin+0xe4>)
 800d2ec:	f641 122c 	movw	r2, #6444	@ 0x192c
 800d2f0:	4912      	ldr	r1, [pc, #72]	@ (800d33c <mg_ota_begin+0xe8>)
 800d2f2:	2002      	movs	r0, #2
 800d2f4:	f7fa fe98 	bl	8008028 <mg_log_prefix>
 800d2f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d330 <mg_ota_begin+0xdc>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	4814      	ldr	r0, [pc, #80]	@ (800d350 <mg_ota_begin+0xfc>)
 800d300:	f7fa fee2 	bl	80080c8 <mg_log>
 800d304:	e00f      	b.n	800d326 <mg_ota_begin+0xd2>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, max));
 800d306:	4b0b      	ldr	r3, [pc, #44]	@ (800d334 <mg_ota_begin+0xe0>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	dd0b      	ble.n	800d326 <mg_ota_begin+0xd2>
 800d30e:	4b0a      	ldr	r3, [pc, #40]	@ (800d338 <mg_ota_begin+0xe4>)
 800d310:	f641 122e 	movw	r2, #6446	@ 0x192e
 800d314:	4909      	ldr	r1, [pc, #36]	@ (800d33c <mg_ota_begin+0xe8>)
 800d316:	2001      	movs	r0, #1
 800d318:	f7fa fe86 	bl	8008028 <mg_log_prefix>
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	6879      	ldr	r1, [r7, #4]
 800d320:	480c      	ldr	r0, [pc, #48]	@ (800d354 <mg_ota_begin+0x100>)
 800d322:	f7fa fed1 	bl	80080c8 <mg_log>
    }
  }
  return ok;
 800d326:	7dfb      	ldrb	r3, [r7, #23]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	24000d94 	.word	0x24000d94
 800d334:	24000240 	.word	0x24000240
 800d338:	0802c22c 	.word	0x0802c22c
 800d33c:	08028ac4 	.word	0x08028ac4
 800d340:	0802a148 	.word	0x0802a148
 800d344:	24000d98 	.word	0x24000d98
 800d348:	24000d90 	.word	0x24000d90
 800d34c:	0802a174 	.word	0x0802a174
 800d350:	0802a190 	.word	0x0802a190
 800d354:	0802a1b0 	.word	0x0802a1b0

0800d358 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 800d358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d35c:	b08a      	sub	sp, #40	@ 0x28
 800d35e:	af02      	add	r7, sp, #8
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	6039      	str	r1, [r7, #0]
  bool ok = false;
 800d364:	2300      	movs	r3, #0
 800d366:	77fb      	strb	r3, [r7, #31]
  if (s_size == 0) {
 800d368:	4b51      	ldr	r3, [pc, #324]	@ (800d4b0 <mg_ota_write+0x158>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10f      	bne.n	800d390 <mg_ota_write+0x38>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 800d370:	4b50      	ldr	r3, [pc, #320]	@ (800d4b4 <mg_ota_write+0x15c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	f340 8095 	ble.w	800d4a4 <mg_ota_write+0x14c>
 800d37a:	4b4f      	ldr	r3, [pc, #316]	@ (800d4b8 <mg_ota_write+0x160>)
 800d37c:	f641 1237 	movw	r2, #6455	@ 0x1937
 800d380:	494e      	ldr	r1, [pc, #312]	@ (800d4bc <mg_ota_write+0x164>)
 800d382:	2001      	movs	r0, #1
 800d384:	f7fa fe50 	bl	8008028 <mg_log_prefix>
 800d388:	484d      	ldr	r0, [pc, #308]	@ (800d4c0 <mg_ota_write+0x168>)
 800d38a:	f7fa fe9d 	bl	80080c8 <mg_log>
 800d38e:	e089      	b.n	800d4a4 <mg_ota_write+0x14c>
  } else {
    size_t align = mg_flash_write_align();
 800d390:	f01a ffcd 	bl	802832e <mg_flash_write_align>
 800d394:	61b8      	str	r0, [r7, #24]
    size_t len_aligned_down = MG_ROUND_DOWN(len, align);
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d007      	beq.n	800d3ac <mg_ota_write+0x54>
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	fb02 f303 	mul.w	r3, r2, r3
 800d3aa:	e000      	b.n	800d3ae <mg_ota_write+0x56>
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	617b      	str	r3, [r7, #20]
    if (len_aligned_down) ok = mg_flash_write(s_addr, buf, len_aligned_down);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d008      	beq.n	800d3c8 <mg_ota_write+0x70>
 800d3b6:	4b43      	ldr	r3, [pc, #268]	@ (800d4c4 <mg_ota_write+0x16c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f01b f994 	bl	80286ec <mg_flash_write>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	77fb      	strb	r3, [r7, #31]
    if (len_aligned_down < len) {
 800d3c8:	697a      	ldr	r2, [r7, #20]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d242      	bcs.n	800d456 <mg_ota_write+0xfe>
 800d3d0:	466b      	mov	r3, sp
 800d3d2:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 800d3d4:	683a      	ldr	r2, [r7, #0]
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	613b      	str	r3, [r7, #16]
      char tmp[align];
 800d3dc:	69be      	ldr	r6, [r7, #24]
 800d3de:	4633      	mov	r3, r6
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	46b0      	mov	r8, r6
 800d3e8:	4699      	mov	r9, r3
 800d3ea:	f04f 0200 	mov.w	r2, #0
 800d3ee:	f04f 0300 	mov.w	r3, #0
 800d3f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d3f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d3fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d3fe:	2300      	movs	r3, #0
 800d400:	4634      	mov	r4, r6
 800d402:	461d      	mov	r5, r3
 800d404:	f04f 0200 	mov.w	r2, #0
 800d408:	f04f 0300 	mov.w	r3, #0
 800d40c:	00eb      	lsls	r3, r5, #3
 800d40e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d412:	00e2      	lsls	r2, r4, #3
 800d414:	1df3      	adds	r3, r6, #7
 800d416:	08db      	lsrs	r3, r3, #3
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	ebad 0d03 	sub.w	sp, sp, r3
 800d41e:	ab02      	add	r3, sp, #8
 800d420:	3300      	adds	r3, #0
 800d422:	60bb      	str	r3, [r7, #8]
      memset(tmp, 0xff, sizeof(tmp));
 800d424:	4632      	mov	r2, r6
 800d426:	21ff      	movs	r1, #255	@ 0xff
 800d428:	68b8      	ldr	r0, [r7, #8]
 800d42a:	f017 fd17 	bl	8024e5c <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	4413      	add	r3, r2
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	4619      	mov	r1, r3
 800d438:	68b8      	ldr	r0, [r7, #8]
 800d43a:	f017 fe5a 	bl	80250f2 <memcpy>
      ok = mg_flash_write(s_addr + len_aligned_down, tmp, sizeof(tmp));
 800d43e:	4b21      	ldr	r3, [pc, #132]	@ (800d4c4 <mg_ota_write+0x16c>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	4413      	add	r3, r2
 800d446:	4632      	mov	r2, r6
 800d448:	68b9      	ldr	r1, [r7, #8]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f01b f94e 	bl	80286ec <mg_flash_write>
 800d450:	4603      	mov	r3, r0
 800d452:	77fb      	strb	r3, [r7, #31]
 800d454:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 800d456:	4b1c      	ldr	r3, [pc, #112]	@ (800d4c8 <mg_ota_write+0x170>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	6879      	ldr	r1, [r7, #4]
 800d45e:	4618      	mov	r0, r3
 800d460:	f00a fb7c 	bl	8017b5c <mg_crc32>
 800d464:	4603      	mov	r3, r0
 800d466:	4a18      	ldr	r2, [pc, #96]	@ (800d4c8 <mg_ota_write+0x170>)
 800d468:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 800d46a:	4b12      	ldr	r3, [pc, #72]	@ (800d4b4 <mg_ota_write+0x15c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b02      	cmp	r3, #2
 800d470:	dd12      	ble.n	800d498 <mg_ota_write+0x140>
 800d472:	4b11      	ldr	r3, [pc, #68]	@ (800d4b8 <mg_ota_write+0x160>)
 800d474:	f641 1244 	movw	r2, #6468	@ 0x1944
 800d478:	4910      	ldr	r1, [pc, #64]	@ (800d4bc <mg_ota_write+0x164>)
 800d47a:	2003      	movs	r0, #3
 800d47c:	f7fa fdd4 	bl	8008028 <mg_log_prefix>
 800d480:	4b10      	ldr	r3, [pc, #64]	@ (800d4c4 <mg_ota_write+0x16c>)
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	425b      	negs	r3, r3
 800d488:	18d1      	adds	r1, r2, r3
 800d48a:	7ffb      	ldrb	r3, [r7, #31]
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	480e      	ldr	r0, [pc, #56]	@ (800d4cc <mg_ota_write+0x174>)
 800d494:	f7fa fe18 	bl	80080c8 <mg_log>
    s_addr += len;
 800d498:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c4 <mg_ota_write+0x16c>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	4413      	add	r3, r2
 800d4a0:	4a08      	ldr	r2, [pc, #32]	@ (800d4c4 <mg_ota_write+0x16c>)
 800d4a2:	6013      	str	r3, [r2, #0]
  }
  return ok;
 800d4a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3720      	adds	r7, #32
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b0:	24000d94 	.word	0x24000d94
 800d4b4:	24000240 	.word	0x24000240
 800d4b8:	0802c23c 	.word	0x0802c23c
 800d4bc:	08028ac4 	.word	0x08028ac4
 800d4c0:	0802a1d4 	.word	0x0802a1d4
 800d4c4:	24000d90 	.word	0x24000d90
 800d4c8:	24000d98 	.word	0x24000d98
 800d4cc:	0802a1fc 	.word	0x0802a1fc

0800d4d0 <mg_ota_end>:
  return key;
}

static size_t swap_size(void);

bool mg_ota_end(void) {
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b08f      	sub	sp, #60	@ 0x3c
 800d4d4:	af02      	add	r7, sp, #8
  char *base = (char *) mg_flash_start() + mg_flash_size() / 2;
 800d4d6:	f01a ff0b 	bl	80282f0 <mg_flash_start>
 800d4da:	4604      	mov	r4, r0
 800d4dc:	f01a ff11 	bl	8028302 <mg_flash_size>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	085b      	lsrs	r3, r3, #1
 800d4e4:	4423      	add	r3, r4
 800d4e6:	627b      	str	r3, [r7, #36]	@ 0x24
  bool ok = false;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (s_size) {
 800d4ee:	4b46      	ldr	r3, [pc, #280]	@ (800d608 <mg_ota_end+0x138>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d06c      	beq.n	800d5d0 <mg_ota_end+0x100>
    size_t size = s_addr - base;
 800d4f6:	4b45      	ldr	r3, [pc, #276]	@ (800d60c <mg_ota_end+0x13c>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	623b      	str	r3, [r7, #32]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 800d500:	4b41      	ldr	r3, [pc, #260]	@ (800d608 <mg_ota_end+0x138>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	461a      	mov	r2, r3
 800d506:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d508:	2000      	movs	r0, #0
 800d50a:	f00a fb27 	bl	8017b5c <mg_crc32>
 800d50e:	61f8      	str	r0, [r7, #28]
    if (size == s_size && crc32 == s_crc32) {
 800d510:	4b3d      	ldr	r3, [pc, #244]	@ (800d608 <mg_ota_end+0x138>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6a3a      	ldr	r2, [r7, #32]
 800d516:	429a      	cmp	r2, r3
 800d518:	d125      	bne.n	800d566 <mg_ota_end+0x96>
 800d51a:	4b3d      	ldr	r3, [pc, #244]	@ (800d610 <mg_ota_end+0x140>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	69fa      	ldr	r2, [r7, #28]
 800d520:	429a      	cmp	r2, r3
 800d522:	d120      	bne.n	800d566 <mg_ota_end+0x96>
      uint32_t now = (uint32_t) (mg_now() / 1000);
 800d524:	f001 f982 	bl	800e82c <mg_now>
 800d528:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d52c:	f04f 0300 	mov.w	r3, #0
 800d530:	f7f3 f94a 	bl	80007c8 <__aeabi_uldivmod>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4613      	mov	r3, r2
 800d53a:	61bb      	str	r3, [r7, #24]
      struct mg_otadata od = {crc32, size, now, MG_OTA_FIRST_BOOT};
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	607b      	str	r3, [r7, #4]
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	60bb      	str	r3, [r7, #8]
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	2301      	movs	r3, #1
 800d54a:	613b      	str	r3, [r7, #16]
      uint32_t key = mg_fwkey(MG_FIRMWARE_PREVIOUS);
 800d54c:	2001      	movs	r0, #1
 800d54e:	f01b f99d 	bl	802888c <mg_fwkey>
 800d552:	6178      	str	r0, [r7, #20]
      ok = mg_flash_save(NULL, key, &od, sizeof(od));
 800d554:	1d3a      	adds	r2, r7, #4
 800d556:	2310      	movs	r3, #16
 800d558:	6979      	ldr	r1, [r7, #20]
 800d55a:	2000      	movs	r0, #0
 800d55c:	f7f4 faa4 	bl	8001aa8 <mg_flash_save>
 800d560:	4603      	mov	r3, r0
 800d562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 800d566:	4b2b      	ldr	r3, [pc, #172]	@ (800d614 <mg_ota_end+0x144>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	dd19      	ble.n	800d5a2 <mg_ota_end+0xd2>
 800d56e:	4b2a      	ldr	r3, [pc, #168]	@ (800d618 <mg_ota_end+0x148>)
 800d570:	f44f 52cb 	mov.w	r2, #6496	@ 0x1960
 800d574:	4929      	ldr	r1, [pc, #164]	@ (800d61c <mg_ota_end+0x14c>)
 800d576:	2003      	movs	r0, #3
 800d578:	f7fa fd56 	bl	8008028 <mg_log_prefix>
 800d57c:	4b24      	ldr	r3, [pc, #144]	@ (800d610 <mg_ota_end+0x140>)
 800d57e:	6819      	ldr	r1, [r3, #0]
 800d580:	4b21      	ldr	r3, [pc, #132]	@ (800d608 <mg_ota_end+0x138>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <mg_ota_end+0xc0>
 800d58c:	4b24      	ldr	r3, [pc, #144]	@ (800d620 <mg_ota_end+0x150>)
 800d58e:	e000      	b.n	800d592 <mg_ota_end+0xc2>
 800d590:	4b24      	ldr	r3, [pc, #144]	@ (800d624 <mg_ota_end+0x154>)
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	4613      	mov	r3, r2
 800d59a:	69fa      	ldr	r2, [r7, #28]
 800d59c:	4822      	ldr	r0, [pc, #136]	@ (800d628 <mg_ota_end+0x158>)
 800d59e:	f7fa fd93 	bl	80080c8 <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 800d5a2:	4b19      	ldr	r3, [pc, #100]	@ (800d608 <mg_ota_end+0x138>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]
    if (ok) {
 800d5a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00f      	beq.n	800d5d0 <mg_ota_end+0x100>
      size_t sz = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (mg_flash_bank() == 0) {
 800d5b4:	f01a fec3 	bl	802833e <mg_flash_bank>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d102      	bne.n	800d5c4 <mg_ota_end+0xf4>
        // No dual bank support.
        sz = swap_size();
 800d5be:	f000 f837 	bl	800d630 <swap_size>
 800d5c2:	62b8      	str	r0, [r7, #40]	@ 0x28
      }
      ok = mg_flash_swap_bank(sz);
 800d5c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5c6:	f01b f851 	bl	802866c <mg_flash_swap_bank>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 800d5d0:	4b10      	ldr	r3, [pc, #64]	@ (800d614 <mg_ota_end+0x144>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	dd11      	ble.n	800d5fc <mg_ota_end+0x12c>
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d618 <mg_ota_end+0x148>)
 800d5da:	f641 126c 	movw	r2, #6508	@ 0x196c
 800d5de:	490f      	ldr	r1, [pc, #60]	@ (800d61c <mg_ota_end+0x14c>)
 800d5e0:	2002      	movs	r0, #2
 800d5e2:	f7fa fd21 	bl	8008028 <mg_log_prefix>
 800d5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <mg_ota_end+0x122>
 800d5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d620 <mg_ota_end+0x150>)
 800d5f0:	e000      	b.n	800d5f4 <mg_ota_end+0x124>
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d624 <mg_ota_end+0x154>)
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	480d      	ldr	r0, [pc, #52]	@ (800d62c <mg_ota_end+0x15c>)
 800d5f8:	f7fa fd66 	bl	80080c8 <mg_log>
  return ok;
 800d5fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d600:	4618      	mov	r0, r3
 800d602:	3734      	adds	r7, #52	@ 0x34
 800d604:	46bd      	mov	sp, r7
 800d606:	bd90      	pop	{r4, r7, pc}
 800d608:	24000d94 	.word	0x24000d94
 800d60c:	24000d90 	.word	0x24000d90
 800d610:	24000d98 	.word	0x24000d98
 800d614:	24000240 	.word	0x24000240
 800d618:	0802c24c 	.word	0x0802c24c
 800d61c:	08028ac4 	.word	0x08028ac4
 800d620:	08028c7c 	.word	0x08028c7c
 800d624:	08028c80 	.word	0x08028c80
 800d628:	0802a210 	.word	0x0802a210
 800d62c:	0802a238 	.word	0x0802a238

0800d630 <swap_size>:
  // MG_DEBUG(("Loaded OTA data. fw %d, bank %d, key %p", fw, bank, key));
  // mg_hexdump(&od, sizeof(od));
  return od;
}

static size_t swap_size(void) {
 800d630:	b580      	push	{r7, lr}
 800d632:	b08a      	sub	sp, #40	@ 0x28
 800d634:	af00      	add	r7, sp, #0
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 800d636:	f107 0314 	add.w	r3, r7, #20
 800d63a:	2100      	movs	r1, #0
 800d63c:	4618      	mov	r0, r3
 800d63e:	f01b f949 	bl	80288d4 <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 800d642:	1d3b      	adds	r3, r7, #4
 800d644:	2101      	movs	r1, #1
 800d646:	4618      	mov	r0, r3
 800d648:	f01b f944 	bl	80288d4 <mg_otadata>
  size_t sz = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (curr.status != MG_OTA_UNAVAILABLE && prev.status != MG_OTA_UNAVAILABLE) {
 800d650:	6a3b      	ldr	r3, [r7, #32]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d008      	beq.n	800d668 <swap_size+0x38>
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <swap_size+0x38>
    // We know exact sizes of both firmwares, use MAX(firmware1, firmware2)
    sz = (size_t) (curr.size > prev.size ? curr.size : prev.size);
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	4293      	cmp	r3, r2
 800d662:	bf38      	it	cc
 800d664:	4613      	movcc	r3, r2
 800d666:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return sz;
 800d668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3728      	adds	r7, #40	@ 0x28
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	4603      	mov	r3, r0
 800d67a:	6039      	str	r1, [r7, #0]
 800d67c:	71fb      	strb	r3, [r7, #7]
 800d67e:	4613      	mov	r3, r2
 800d680:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 800d686:	79bb      	ldrb	r3, [r7, #6]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00d      	beq.n	800d6a8 <mg_pfn_iobuf_private+0x36>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	1c9a      	adds	r2, r3, #2
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d906      	bls.n	800d6a8 <mg_pfn_iobuf_private+0x36>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	3302      	adds	r3, #2
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f7f9 fcf2 	bl	800708c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	1c9a      	adds	r2, r3, #2
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d811      	bhi.n	800d6da <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	1c58      	adds	r0, r3, #1
 800d6c0:	68f9      	ldr	r1, [r7, #12]
 800d6c2:	6088      	str	r0, [r1, #8]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	79fa      	ldrb	r2, [r7, #7]
 800d6c8:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 800d6d8:	e00f      	b.n	800d6fa <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	689a      	ldr	r2, [r3, #8]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d209      	bcs.n	800d6fa <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	1c58      	adds	r0, r3, #1
 800d6f0:	68f9      	ldr	r1, [r7, #12]
 800d6f2:	6088      	str	r0, [r1, #8]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	701a      	strb	r2, [r3, #0]
}
 800d6fa:	bf00      	nop
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	4603      	mov	r3, r0
 800d70a:	6039      	str	r1, [r7, #0]
 800d70c:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 800d70e:	79fb      	ldrb	r3, [r7, #7]
 800d710:	2200      	movs	r2, #0
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff ffac 	bl	800d672 <mg_pfn_iobuf_private>
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	4603      	mov	r3, r0
 800d72a:	6039      	str	r1, [r7, #0]
 800d72c:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	2201      	movs	r2, #1
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	4618      	mov	r0, r3
 800d736:	f7ff ff9c 	bl	800d672 <mg_pfn_iobuf_private>
}
 800d73a:	bf00      	nop
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	@ 0x28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	617b      	str	r3, [r7, #20]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	61bb      	str	r3, [r7, #24]
 800d75a:	2300      	movs	r3, #0
 800d75c:	61fb      	str	r3, [r7, #28]
 800d75e:	2300      	movs	r3, #0
 800d760:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800d762:	f107 0114 	add.w	r1, r7, #20
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	4809      	ldr	r0, [pc, #36]	@ (800d790 <mg_vsnprintf+0x4c>)
 800d76c:	f7f5 fe20 	bl	80033b0 <mg_vxprintf>
 800d770:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 800d772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	429a      	cmp	r2, r3
 800d778:	d204      	bcs.n	800d784 <mg_vsnprintf+0x40>
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	4413      	add	r3, r2
 800d780:	2200      	movs	r2, #0
 800d782:	701a      	strb	r2, [r3, #0]
  return n;
 800d784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d786:	4618      	mov	r0, r3
 800d788:	3728      	adds	r7, #40	@ 0x28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	0800d703 	.word	0x0800d703

0800d794 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 800d794:	b40c      	push	{r2, r3}
 800d796:	b580      	push	{r7, lr}
 800d798:	b084      	sub	sp, #16
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800d7a0:	f107 031c 	add.w	r3, r7, #28
 800d7a4:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 800d7a6:	f107 0308 	add.w	r3, r7, #8
 800d7aa:	69ba      	ldr	r2, [r7, #24]
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff ffc8 	bl	800d744 <mg_vsnprintf>
 800d7b4:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7c2:	b002      	add	sp, #8
 800d7c4:	4770      	bx	lr
	...

0800d7c8 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60bb      	str	r3, [r7, #8]
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	60fb      	str	r3, [r7, #12]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	613b      	str	r3, [r7, #16]
 800d7de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7e2:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	4803      	ldr	r0, [pc, #12]	@ (800d7fc <mg_vmprintf+0x34>)
 800d7ee:	f7f5 fddf 	bl	80033b0 <mg_vxprintf>
  return (char *) io.buf;
 800d7f2:	68bb      	ldr	r3, [r7, #8]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	0800d723 	.word	0x0800d723

0800d800 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 800d800:	b40f      	push	{r0, r1, r2, r3}
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 800d808:	f107 0314 	add.w	r3, r7, #20
 800d80c:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 800d80e:	463b      	mov	r3, r7
 800d810:	4619      	mov	r1, r3
 800d812:	6938      	ldr	r0, [r7, #16]
 800d814:	f7ff ffd8 	bl	800d7c8 <mg_vmprintf>
 800d818:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 800d81a:	687b      	ldr	r3, [r7, #4]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d826:	b004      	add	sp, #16
 800d828:	4770      	bx	lr

0800d82a <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	4603      	mov	r3, r0
 800d832:	6039      	str	r1, [r7, #0]
 800d834:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 800d836:	79fb      	ldrb	r3, [r7, #7]
 800d838:	4618      	mov	r0, r3
 800d83a:	f017 f953 	bl	8024ae4 <putchar>
  (void) param;
}
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af04      	add	r7, sp, #16
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	4618      	mov	r0, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3301      	adds	r3, #1
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	3302      	adds	r3, #2
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	4619      	mov	r1, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	3303      	adds	r3, #3
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	9302      	str	r3, [sp, #8]
 800d872:	9101      	str	r1, [sp, #4]
 800d874:	9200      	str	r2, [sp, #0]
 800d876:	4603      	mov	r3, r0
 800d878:	4a04      	ldr	r2, [pc, #16]	@ (800d88c <print_ip4+0x44>)
 800d87a:	68b9      	ldr	r1, [r7, #8]
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7f5 fd7c 	bl	800337a <mg_xprintf>
 800d882:	4603      	mov	r3, r0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	0802a2b4 	.word	0x0802a2b4

0800d890 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 800d890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d894:	b08e      	sub	sp, #56	@ 0x38
 800d896:	af08      	add	r7, sp, #32
 800d898:	6178      	str	r0, [r7, #20]
 800d89a:	6139      	str	r1, [r7, #16]
 800d89c:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f00a f943 	bl	8017b2e <mg_ntohs>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3302      	adds	r3, #2
 800d8b0:	881b      	ldrh	r3, [r3, #0]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f00a f93b 	bl	8017b2e <mg_ntohs>
 800d8b8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d8ba:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f00a f933 	bl	8017b2e <mg_ntohs>
 800d8c8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d8ca:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	3306      	adds	r3, #6
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f00a f92b 	bl	8017b2e <mg_ntohs>
 800d8d8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d8da:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	881b      	ldrh	r3, [r3, #0]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f00a f923 	bl	8017b2e <mg_ntohs>
 800d8e8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d8ea:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	330a      	adds	r3, #10
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f00a f91b 	bl	8017b2e <mg_ntohs>
 800d8f8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d8fa:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	330c      	adds	r3, #12
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	f00a f913 	bl	8017b2e <mg_ntohs>
 800d908:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d90a:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	330e      	adds	r3, #14
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	4618      	mov	r0, r3
 800d914:	f00a f90b 	bl	8017b2e <mg_ntohs>
 800d918:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d91a:	9306      	str	r3, [sp, #24]
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	9205      	str	r2, [sp, #20]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	9204      	str	r2, [sp, #16]
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	9303      	str	r3, [sp, #12]
 800d928:	9602      	str	r6, [sp, #8]
 800d92a:	9501      	str	r5, [sp, #4]
 800d92c:	9400      	str	r4, [sp, #0]
 800d92e:	4643      	mov	r3, r8
 800d930:	4a05      	ldr	r2, [pc, #20]	@ (800d948 <print_ip6+0xb8>)
 800d932:	6939      	ldr	r1, [r7, #16]
 800d934:	6978      	ldr	r0, [r7, #20]
 800d936:	f7f5 fd20 	bl	800337a <mg_xprintf>
 800d93a:	4603      	mov	r3, r0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d946:	bf00      	nop
 800d948:	0802a2c0 	.word	0x0802a2c0

0800d94c <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	1d19      	adds	r1, r3, #4
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	6011      	str	r1, [r2, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f7ff ff6c 	bl	800d848 <print_ip4>
 800d970:	4603      	mov	r3, r0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b086      	sub	sp, #24
 800d97e:	af00      	add	r7, sp, #0
 800d980:	60f8      	str	r0, [r7, #12]
 800d982:	60b9      	str	r1, [r7, #8]
 800d984:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	1d19      	adds	r1, r3, #4
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	6011      	str	r1, [r2, #0]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	7cdb      	ldrb	r3, [r3, #19]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d007      	beq.n	800d9ac <mg_print_ip+0x32>
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f7ff ff74 	bl	800d890 <print_ip6>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	e006      	b.n	800d9ba <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	68b9      	ldr	r1, [r7, #8]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff ff48 	bl	800d848 <print_ip4>
 800d9b8:	4603      	mov	r3, r0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
	...

0800d9c4 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	1d19      	adds	r1, r3, #4
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	6011      	str	r1, [r2, #0]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	8a1b      	ldrh	r3, [r3, #16]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f00a f8a3 	bl	8017b2e <mg_ntohs>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	4b05      	ldr	r3, [pc, #20]	@ (800da08 <mg_print_ip_port+0x44>)
 800d9f2:	4a06      	ldr	r2, [pc, #24]	@ (800da0c <mg_print_ip_port+0x48>)
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f7f5 fcbf 	bl	800337a <mg_xprintf>
 800d9fc:	4603      	mov	r3, r0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	0800d97b 	.word	0x0800d97b
 800da0c:	0802a2dc 	.word	0x0802a2dc

0800da10 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 800da10:	b5b0      	push	{r4, r5, r7, lr}
 800da12:	b08c      	sub	sp, #48	@ 0x30
 800da14:	af06      	add	r7, sp, #24
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	1d19      	adds	r1, r3, #4
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6011      	str	r1, [r2, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	461d      	mov	r5, r3
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	3301      	adds	r3, #1
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	3302      	adds	r3, #2
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	3303      	adds	r3, #3
 800da44:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800da46:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	3304      	adds	r3, #4
 800da4c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800da4e:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	3305      	adds	r3, #5
 800da54:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800da56:	9304      	str	r3, [sp, #16]
 800da58:	9403      	str	r4, [sp, #12]
 800da5a:	9002      	str	r0, [sp, #8]
 800da5c:	9101      	str	r1, [sp, #4]
 800da5e:	9200      	str	r2, [sp, #0]
 800da60:	462b      	mov	r3, r5
 800da62:	4a05      	ldr	r2, [pc, #20]	@ (800da78 <mg_print_mac+0x68>)
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7f5 fc87 	bl	800337a <mg_xprintf>
 800da6c:	4603      	mov	r3, r0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3718      	adds	r7, #24
 800da72:	46bd      	mov	sp, r7
 800da74:	bdb0      	pop	{r4, r5, r7, pc}
 800da76:	bf00      	nop
 800da78:	0802a2e4 	.word	0x0802a2e4

0800da7c <mg_esc>:

static char mg_esc(int c, bool esc) {
 800da7c:	b480      	push	{r7}
 800da7e:	b087      	sub	sp, #28
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 800da88:	4b19      	ldr	r3, [pc, #100]	@ (800daf0 <mg_esc+0x74>)
 800da8a:	613b      	str	r3, [r7, #16]
 800da8c:	4b19      	ldr	r3, [pc, #100]	@ (800daf4 <mg_esc+0x78>)
 800da8e:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d001      	beq.n	800da9a <mg_esc+0x1e>
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	e000      	b.n	800da9c <mg_esc+0x20>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	617b      	str	r3, [r7, #20]
 800da9e:	e01b      	b.n	800dad8 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	461a      	mov	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d112      	bne.n	800dad2 <mg_esc+0x56>
 800daac:	78fb      	ldrb	r3, [r7, #3]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d007      	beq.n	800dac2 <mg_esc+0x46>
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	461a      	mov	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	4413      	add	r3, r2
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	e00f      	b.n	800dae2 <mg_esc+0x66>
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	461a      	mov	r2, r3
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	4413      	add	r3, r2
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	e007      	b.n	800dae2 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	3301      	adds	r3, #1
 800dad6:	617b      	str	r3, [r7, #20]
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d1df      	bne.n	800daa0 <mg_esc+0x24>
  }
  return 0;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	371c      	adds	r7, #28
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	08029a28 	.word	0x08029a28
 800daf4:	08029a30 	.word	0x08029a30

0800daf8 <mg_escape>:

static char mg_escape(int c) {
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 800db00:	2101      	movs	r1, #1
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff ffba 	bl	800da7c <mg_esc>
 800db08:	4603      	mov	r3, r0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 800db12:	b580      	push	{r7, lr}
 800db14:	b088      	sub	sp, #32
 800db16:	af00      	add	r7, sp, #0
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	60b9      	str	r1, [r7, #8]
 800db1c:	607a      	str	r2, [r7, #4]
 800db1e:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	61fb      	str	r3, [r7, #28]
 800db24:	2300      	movs	r3, #0
 800db26:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800db28:	2300      	movs	r3, #0
 800db2a:	61fb      	str	r3, [r7, #28]
 800db2c:	e023      	b.n	800db76 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	4413      	add	r3, r2
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff ffde 	bl	800daf8 <mg_escape>
 800db3c:	4603      	mov	r3, r0
 800db3e:	75fb      	strb	r3, [r7, #23]
    if (c) {
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00c      	beq.n	800db60 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	68b9      	ldr	r1, [r7, #8]
 800db4a:	205c      	movs	r0, #92	@ 0x5c
 800db4c:	4798      	blx	r3
 800db4e:	7dfa      	ldrb	r2, [r7, #23]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	4610      	mov	r0, r2
 800db56:	4798      	blx	r3
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	3301      	adds	r3, #1
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	e007      	b.n	800db70 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	4413      	add	r3, r2
 800db66:	781a      	ldrb	r2, [r3, #0]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	68b9      	ldr	r1, [r7, #8]
 800db6c:	4610      	mov	r0, r2
 800db6e:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	3301      	adds	r3, #1
 800db74:	61fb      	str	r3, [r7, #28]
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d205      	bcs.n	800db8a <qcpy+0x78>
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	4413      	add	r3, r2
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1d1      	bne.n	800db2e <qcpy+0x1c>
    }
  }
  return i + extra;
 800db8a:	69fa      	ldr	r2, [r7, #28]
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	4413      	add	r3, r2
}
 800db90:	4618      	mov	r0, r3
 800db92:	3720      	adds	r7, #32
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 800db98:	b580      	push	{r7, lr}
 800db9a:	b088      	sub	sp, #32
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	1d19      	adds	r1, r3, #4
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	6011      	str	r1, [r2, #0]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	1d19      	adds	r1, r3, #4
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	6011      	str	r1, [r2, #0]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 800dbc0:	4b16      	ldr	r3, [pc, #88]	@ (800dc1c <mg_print_hex+0x84>)
 800dbc2:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	61fb      	str	r3, [r7, #28]
 800dbc8:	e01e      	b.n	800dc08 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 800dbca:	697a      	ldr	r2, [r7, #20]
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	4413      	add	r3, r2
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	091b      	lsrs	r3, r3, #4
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f003 030f 	and.w	r3, r3, #15
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	4413      	add	r3, r2
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68b9      	ldr	r1, [r7, #8]
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 800dbe8:	697a      	ldr	r2, [r7, #20]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	4413      	add	r3, r2
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	f003 030f 	and.w	r3, r3, #15
 800dbf4:	693a      	ldr	r2, [r7, #16]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	781a      	ldrb	r2, [r3, #0]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	4610      	mov	r0, r2
 800dc00:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	3301      	adds	r3, #1
 800dc06:	61fb      	str	r3, [r7, #28]
 800dc08:	69fa      	ldr	r2, [r7, #28]
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d3dc      	bcc.n	800dbca <mg_print_hex+0x32>
  }
  return 2 * bl;
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	005b      	lsls	r3, r3, #1
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3720      	adds	r7, #32
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	08028e78 	.word	0x08028e78

0800dc20 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	1d19      	adds	r1, r3, #4
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	6011      	str	r1, [r2, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	1d19      	adds	r1, r3, #4
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	6011      	str	r1, [r2, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d109      	bne.n	800dc62 <mg_print_esc+0x42>
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d004      	beq.n	800dc5e <mg_print_esc+0x3e>
 800dc54:	6938      	ldr	r0, [r7, #16]
 800dc56:	f7f2 fba3 	bl	80003a0 <strlen>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	e000      	b.n	800dc60 <mg_print_esc+0x40>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	68b9      	ldr	r1, [r7, #8]
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f7ff ff52 	bl	800db12 <qcpy>
 800dc6e:	4603      	mov	r3, r0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 800dc84:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	4413      	add	r3, r2
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	1d1a      	adds	r2, r3, #4
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d906      	bls.n	800dcb6 <mg_queue_read_len+0x3e>
 800dca8:	4b05      	ldr	r3, [pc, #20]	@ (800dcc0 <mg_queue_read_len+0x48>)
 800dcaa:	4a06      	ldr	r2, [pc, #24]	@ (800dcc4 <mg_queue_read_len+0x4c>)
 800dcac:	f641 21c9 	movw	r1, #6857	@ 0x1ac9
 800dcb0:	4805      	ldr	r0, [pc, #20]	@ (800dcc8 <mg_queue_read_len+0x50>)
 800dcb2:	f015 fe01 	bl	80238b8 <__assert_func>
  return n;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	0802a348 	.word	0x0802a348
 800dcc4:	0802c274 	.word	0x0802c274
 800dcc8:	08028ac4 	.word	0x08028ac4

0800dccc <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 800dce8:	f3bf 8f5b 	dmb	ish
}
 800dcec:	bf00      	nop
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 800dd04:	2300      	movs	r3, #0
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	2308      	movs	r3, #8
 800dd0a:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	68da      	ldr	r2, [r3, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d312      	bcc.n	800dd3e <mg_queue_book+0x46>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	68da      	ldr	r2, [r3, #12]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	441a      	add	r2, r3
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	441a      	add	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d808      	bhi.n	800dd3e <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	1ad2      	subs	r2, r2, r3
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	617b      	str	r3, [r7, #20]
 800dd3c:	e011      	b.n	800dd62 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	68da      	ldr	r2, [r3, #12]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d30b      	bcc.n	800dd62 <mg_queue_book+0x6a>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d206      	bcs.n	800dd62 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 800dd54:	2100      	movs	r1, #0
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7ff ffb8 	bl	800dccc <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	68da      	ldr	r2, [r3, #12]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	441a      	add	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	441a      	add	r2, r3
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d207      	bcs.n	800dd86 <mg_queue_book+0x8e>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	689a      	ldr	r2, [r3, #8]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	1ad2      	subs	r2, r2, r3
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d007      	beq.n	800dd9c <mg_queue_book+0xa4>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	3304      	adds	r3, #4
 800dd96:	441a      	add	r2, r3
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	601a      	str	r2, [r3, #0]
  return space;
 800dd9c:	697b      	ldr	r3, [r7, #20]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
	...

0800dda8 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d013      	beq.n	800ddea <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7ff ff58 	bl	800dc78 <mg_queue_read_len>
 800ddc8:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10c      	bne.n	800ddea <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	68da      	ldr	r2, [r3, #12]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d903      	bls.n	800ddea <mg_queue_next+0x42>
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff ff48 	bl	800dc78 <mg_queue_read_len>
 800dde8:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d007      	beq.n	800de00 <mg_queue_next+0x58>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	441a      	add	r2, r3
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	441a      	add	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d906      	bls.n	800de1e <mg_queue_next+0x76>
 800de10:	4b05      	ldr	r3, [pc, #20]	@ (800de28 <mg_queue_next+0x80>)
 800de12:	4a06      	ldr	r2, [pc, #24]	@ (800de2c <mg_queue_next+0x84>)
 800de14:	f641 21ea 	movw	r1, #6890	@ 0x1aea
 800de18:	4805      	ldr	r0, [pc, #20]	@ (800de30 <mg_queue_next+0x88>)
 800de1a:	f015 fd4d 	bl	80238b8 <__assert_func>
  return len;
 800de1e:	68fb      	ldr	r3, [r7, #12]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	0802a36c 	.word	0x0802a36c
 800de2c:	0802c288 	.word	0x0802c288
 800de30:	08028ac4 	.word	0x08028ac4

0800de34 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d106      	bne.n	800de52 <mg_queue_add+0x1e>
 800de44:	4b13      	ldr	r3, [pc, #76]	@ (800de94 <mg_queue_add+0x60>)
 800de46:	4a14      	ldr	r2, [pc, #80]	@ (800de98 <mg_queue_add+0x64>)
 800de48:	f641 21ef 	movw	r1, #6895	@ 0x1aef
 800de4c:	4813      	ldr	r0, [pc, #76]	@ (800de9c <mg_queue_add+0x68>)
 800de4e:	f015 fd33 	bl	80238b8 <__assert_func>
  mg_queue_write_len(q, len);
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7ff ff39 	bl	800dccc <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68da      	ldr	r2, [r3, #12]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	4413      	add	r3, r2
 800de62:	f103 0208 	add.w	r2, r3, #8
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d906      	bls.n	800de7c <mg_queue_add+0x48>
 800de6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dea0 <mg_queue_add+0x6c>)
 800de70:	4a09      	ldr	r2, [pc, #36]	@ (800de98 <mg_queue_add+0x64>)
 800de72:	f641 21f1 	movw	r1, #6897	@ 0x1af1
 800de76:	4809      	ldr	r0, [pc, #36]	@ (800de9c <mg_queue_add+0x68>)
 800de78:	f015 fd1e 	bl	80238b8 <__assert_func>
  q->head += len + sizeof(uint32_t);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68da      	ldr	r2, [r3, #12]
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	4413      	add	r3, r2
 800de84:	1d1a      	adds	r2, r3, #4
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	60da      	str	r2, [r3, #12]
}
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	0802a388 	.word	0x0802a388
 800de98:	0802c298 	.word	0x0802c298
 800de9c:	08028ac4 	.word	0x08028ac4
 800dea0:	0802a390 	.word	0x0802a390

0800dea4 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	689a      	ldr	r2, [r3, #8]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	4413      	add	r3, r2
 800deb6:	1d1a      	adds	r2, r3, #4
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	1d1a      	adds	r2, r3, #4
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d906      	bls.n	800ded8 <mg_queue_del+0x34>
 800deca:	4b05      	ldr	r3, [pc, #20]	@ (800dee0 <mg_queue_del+0x3c>)
 800decc:	4a05      	ldr	r2, [pc, #20]	@ (800dee4 <mg_queue_del+0x40>)
 800dece:	f641 21f7 	movw	r1, #6903	@ 0x1af7
 800ded2:	4805      	ldr	r0, [pc, #20]	@ (800dee8 <mg_queue_del+0x44>)
 800ded4:	f015 fcf0 	bl	80238b8 <__assert_func>
}
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	0802a3c0 	.word	0x0802a3c0
 800dee4:	0802c2a8 	.word	0x0802c2a8
 800dee8:	08028ac4 	.word	0x08028ac4

0800deec <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	f04f 0200 	mov.w	r2, #0
 800df00:	f04f 0300 	mov.w	r3, #0
 800df04:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4a0e      	ldr	r2, [pc, #56]	@ (800df44 <mg_sha256_init+0x58>)
 800df0c:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4a0d      	ldr	r2, [pc, #52]	@ (800df48 <mg_sha256_init+0x5c>)
 800df12:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a0d      	ldr	r2, [pc, #52]	@ (800df4c <mg_sha256_init+0x60>)
 800df18:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a0c      	ldr	r2, [pc, #48]	@ (800df50 <mg_sha256_init+0x64>)
 800df1e:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a0c      	ldr	r2, [pc, #48]	@ (800df54 <mg_sha256_init+0x68>)
 800df24:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a0b      	ldr	r2, [pc, #44]	@ (800df58 <mg_sha256_init+0x6c>)
 800df2a:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a0b      	ldr	r2, [pc, #44]	@ (800df5c <mg_sha256_init+0x70>)
 800df30:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4a0a      	ldr	r2, [pc, #40]	@ (800df60 <mg_sha256_init+0x74>)
 800df36:	61da      	str	r2, [r3, #28]
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	6a09e667 	.word	0x6a09e667
 800df48:	bb67ae85 	.word	0xbb67ae85
 800df4c:	3c6ef372 	.word	0x3c6ef372
 800df50:	a54ff53a 	.word	0xa54ff53a
 800df54:	510e527f 	.word	0x510e527f
 800df58:	9b05688c 	.word	0x9b05688c
 800df5c:	1f83d9ab 	.word	0x1f83d9ab
 800df60:	5be0cd19 	.word	0x5be0cd19

0800df64 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 800df64:	b480      	push	{r7}
 800df66:	b0cf      	sub	sp, #316	@ 0x13c
 800df68:	af00      	add	r7, sp, #0
 800df6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df6e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df72:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800df74:	2300      	movs	r3, #0
 800df76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800df7a:	2300      	movs	r3, #0
 800df7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800df80:	e043      	b.n	800e00a <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800df82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df86:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800df90:	4413      	add	r3, r2
 800df92:	332c      	adds	r3, #44	@ 0x2c
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800df98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800df9c:	3301      	adds	r3, #1
 800df9e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dfa2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dfa6:	6809      	ldr	r1, [r1, #0]
 800dfa8:	440b      	add	r3, r1
 800dfaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dfae:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800dfb0:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 800dfb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dfb6:	3302      	adds	r3, #2
 800dfb8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dfbc:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dfc0:	6809      	ldr	r1, [r1, #0]
 800dfc2:	440b      	add	r3, r1
 800dfc4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dfc8:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800dfca:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 800dfcc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800dfd0:	3203      	adds	r2, #3
 800dfd2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dfd6:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dfda:	6809      	ldr	r1, [r1, #0]
 800dfdc:	440a      	add	r2, r1
 800dfde:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800dfe2:	ea43 0102 	orr.w	r1, r3, r2
 800dfe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dfea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dfee:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800dff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800dff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dffa:	3301      	adds	r3, #1
 800dffc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e000:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e004:	3304      	adds	r3, #4
 800e006:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800e00a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e00e:	2b0f      	cmp	r3, #15
 800e010:	ddb7      	ble.n	800df82 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 800e012:	e069      	b.n	800e0e8 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 800e014:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e018:	1e9a      	subs	r2, r3, #2
 800e01a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e01e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e026:	ea4f 4273 	mov.w	r2, r3, ror #17
 800e02a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e02e:	1e99      	subs	r1, r3, #2
 800e030:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e034:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e038:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e03c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800e040:	405a      	eors	r2, r3
 800e042:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e046:	1e99      	subs	r1, r3, #2
 800e048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e04c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e050:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e054:	0a9b      	lsrs	r3, r3, #10
 800e056:	405a      	eors	r2, r3
 800e058:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e05c:	1fd9      	subs	r1, r3, #7
 800e05e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e062:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e066:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e06a:	441a      	add	r2, r3
 800e06c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e070:	f1a3 010f 	sub.w	r1, r3, #15
 800e074:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e078:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e07c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e080:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800e084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e088:	f1a3 000f 	sub.w	r0, r3, #15
 800e08c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e090:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e094:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e098:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800e09c:	4059      	eors	r1, r3
 800e09e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e0a2:	f1a3 000f 	sub.w	r0, r3, #15
 800e0a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e0aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e0ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e0b2:	08db      	lsrs	r3, r3, #3
 800e0b4:	404b      	eors	r3, r1
 800e0b6:	441a      	add	r2, r3
 800e0b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e0bc:	f1a3 0110 	sub.w	r1, r3, #16
 800e0c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e0c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e0c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0cc:	18d1      	adds	r1, r2, r3
 800e0ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e0d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e0d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800e0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 800e0de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e0e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e0ec:	2b3f      	cmp	r3, #63	@ 0x3f
 800e0ee:	dd91      	ble.n	800e014 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 800e0f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e0f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 800e100:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e104:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 800e110:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e114:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 800e120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e124:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 800e130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e134:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 800e140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e144:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	695b      	ldr	r3, [r3, #20]
 800e14c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 800e150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e154:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 800e160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e164:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69db      	ldr	r3, [r3, #28]
 800e16c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 800e170:	2300      	movs	r3, #0
 800e172:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e176:	e078      	b.n	800e26a <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 800e178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e17c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800e180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e184:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800e188:	405a      	eors	r2, r3
 800e18a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e18e:	ea4f 6373 	mov.w	r3, r3, ror #25
 800e192:	405a      	eors	r2, r3
 800e194:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e198:	441a      	add	r2, r3
 800e19a:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800e19e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e1a2:	4019      	ands	r1, r3
 800e1a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e1a8:	43d8      	mvns	r0, r3
 800e1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ae:	4003      	ands	r3, r0
 800e1b0:	404b      	eors	r3, r1
 800e1b2:	441a      	add	r2, r3
 800e1b4:	496e      	ldr	r1, [pc, #440]	@ (800e370 <mg_sha256_chunk+0x40c>)
 800e1b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e1ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e1be:	441a      	add	r2, r3
 800e1c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e1c8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800e1cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 800e1d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1da:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800e1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1e2:	ea4f 3373 	mov.w	r3, r3, ror #13
 800e1e6:	405a      	eors	r2, r3
 800e1e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800e1f0:	405a      	eors	r2, r3
 800e1f2:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800e1f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e1fa:	4059      	eors	r1, r3
 800e1fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e200:	4019      	ands	r1, r3
 800e202:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800e206:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e20a:	4003      	ands	r3, r0
 800e20c:	404b      	eors	r3, r1
 800e20e:	4413      	add	r3, r2
 800e210:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 800e214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e218:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 800e21c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e220:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 800e224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e228:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 800e22c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e234:	4413      	add	r3, r2
 800e236:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 800e23a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e23e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 800e242:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e246:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 800e24a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e24e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 800e252:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e256:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e25a:	4413      	add	r3, r2
 800e25c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 800e260:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e264:	3301      	adds	r3, #1
 800e266:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e26a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e26e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e270:	dd82      	ble.n	800e178 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 800e272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e276:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e282:	441a      	add	r2, r3
 800e284:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e288:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 800e290:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e294:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2a0:	441a      	add	r2, r3
 800e2a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 800e2ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	689a      	ldr	r2, [r3, #8]
 800e2ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e2be:	441a      	add	r2, r3
 800e2c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 800e2cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68da      	ldr	r2, [r3, #12]
 800e2d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e2dc:	441a      	add	r2, r3
 800e2de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 800e2ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	691a      	ldr	r2, [r3, #16]
 800e2f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e2fa:	441a      	add	r2, r3
 800e2fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e300:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 800e308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e30c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	695a      	ldr	r2, [r3, #20]
 800e314:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e318:	441a      	add	r2, r3
 800e31a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e31e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 800e326:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e32a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	699a      	ldr	r2, [r3, #24]
 800e332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e336:	441a      	add	r2, r3
 800e338:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e33c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 800e344:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e348:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	69da      	ldr	r2, [r3, #28]
 800e350:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e354:	441a      	add	r2, r3
 800e356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e35a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	61da      	str	r2, [r3, #28]
}
 800e362:	bf00      	nop
 800e364:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	0802be54 	.word	0x0802be54

0800e374 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 800e374:	b5b0      	push	{r4, r5, r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 800e380:	2300      	movs	r3, #0
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	e026      	b.n	800e3d4 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	441a      	add	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e390:	7811      	ldrb	r1, [r2, #0]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	4413      	add	r3, r2
 800e396:	460a      	mov	r2, r1
 800e398:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a0:	1c5a      	adds	r2, r3, #1
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3aa:	2b40      	cmp	r3, #64	@ 0x40
 800e3ac:	d10f      	bne.n	800e3ce <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f7ff fdd8 	bl	800df64 <mg_sha256_chunk>
      ctx->bits += 512;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3ba:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 800e3be:	f143 0500 	adc.w	r5, r3, #0
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	617b      	str	r3, [r7, #20]
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d3d4      	bcc.n	800e386 <mg_sha256_update+0x12>
    }
  }
}
 800e3dc:	bf00      	nop
 800e3de:	bf00      	nop
 800e3e0:	3718      	adds	r7, #24
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bdb0      	pop	{r4, r5, r7, pc}

0800e3e6 <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 800e3e6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f6:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2b37      	cmp	r3, #55	@ 0x37
 800e3fc:	d814      	bhi.n	800e428 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	1c5a      	adds	r2, r3, #1
 800e402:	60fa      	str	r2, [r7, #12]
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	4413      	add	r3, r2
 800e408:	2280      	movs	r2, #128	@ 0x80
 800e40a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800e40e:	e007      	b.n	800e420 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	60fa      	str	r2, [r7, #12]
 800e416:	683a      	ldr	r2, [r7, #0]
 800e418:	4413      	add	r3, r2
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2b37      	cmp	r3, #55	@ 0x37
 800e424:	d9f4      	bls.n	800e410 <mg_sha256_final+0x2a>
 800e426:	e01d      	b.n	800e464 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	60fa      	str	r2, [r7, #12]
 800e42e:	683a      	ldr	r2, [r7, #0]
 800e430:	4413      	add	r3, r2
 800e432:	2280      	movs	r2, #128	@ 0x80
 800e434:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800e438:	e007      	b.n	800e44a <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	1c5a      	adds	r2, r3, #1
 800e43e:	60fa      	str	r2, [r7, #12]
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	4413      	add	r3, r2
 800e444:	2200      	movs	r2, #0
 800e446:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2b3f      	cmp	r3, #63	@ 0x3f
 800e44e:	d9f4      	bls.n	800e43a <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 800e450:	6838      	ldr	r0, [r7, #0]
 800e452:	f7ff fd87 	bl	800df64 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	332c      	adds	r3, #44	@ 0x2c
 800e45a:	2238      	movs	r2, #56	@ 0x38
 800e45c:	2100      	movs	r1, #0
 800e45e:	4618      	mov	r0, r3
 800e460:	f016 fcfc 	bl	8024e5c <memset>
  }

  ctx->bits += ctx->len * 8;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e46e:	00c9      	lsls	r1, r1, #3
 800e470:	2000      	movs	r0, #0
 800e472:	460c      	mov	r4, r1
 800e474:	4605      	mov	r5, r0
 800e476:	eb12 0804 	adds.w	r8, r2, r4
 800e47a:	eb43 0905 	adc.w	r9, r3, r5
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e48a:	b2d2      	uxtb	r2, r2
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e498:	f04f 0200 	mov.w	r2, #0
 800e49c:	f04f 0300 	mov.w	r3, #0
 800e4a0:	0a02      	lsrs	r2, r0, #8
 800e4a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e4a6:	0a0b      	lsrs	r3, r1, #8
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e4b6:	f04f 0200 	mov.w	r2, #0
 800e4ba:	f04f 0300 	mov.w	r3, #0
 800e4be:	0c02      	lsrs	r2, r0, #16
 800e4c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e4c4:	0c0b      	lsrs	r3, r1, #16
 800e4c6:	b2d2      	uxtb	r2, r2
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e4d4:	f04f 0200 	mov.w	r2, #0
 800e4d8:	f04f 0300 	mov.w	r3, #0
 800e4dc:	0e02      	lsrs	r2, r0, #24
 800e4de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e4e2:	0e0b      	lsrs	r3, r1, #24
 800e4e4:	b2d2      	uxtb	r2, r2
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e4f2:	f04f 0200 	mov.w	r2, #0
 800e4f6:	f04f 0300 	mov.w	r3, #0
 800e4fa:	000a      	movs	r2, r1
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	b2d2      	uxtb	r2, r2
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e50c:	f04f 0200 	mov.w	r2, #0
 800e510:	f04f 0300 	mov.w	r3, #0
 800e514:	0a0a      	lsrs	r2, r1, #8
 800e516:	2300      	movs	r3, #0
 800e518:	b2d2      	uxtb	r2, r2
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e526:	f04f 0200 	mov.w	r2, #0
 800e52a:	f04f 0300 	mov.w	r3, #0
 800e52e:	0c0a      	lsrs	r2, r1, #16
 800e530:	2300      	movs	r3, #0
 800e532:	b2d2      	uxtb	r2, r2
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e540:	f04f 0200 	mov.w	r2, #0
 800e544:	f04f 0300 	mov.w	r3, #0
 800e548:	0e0a      	lsrs	r2, r1, #24
 800e54a:	2300      	movs	r3, #0
 800e54c:	b2d2      	uxtb	r2, r2
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 800e554:	6838      	ldr	r0, [r7, #0]
 800e556:	f7ff fd05 	bl	800df64 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 800e55a:	2300      	movs	r3, #0
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	e071      	b.n	800e644 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f1c3 0303 	rsb	r3, r3, #3
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	fa22 f103 	lsr.w	r1, r2, r3
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	4413      	add	r3, r2
 800e576:	b2ca      	uxtb	r2, r1
 800e578:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f1c3 0303 	rsb	r3, r3, #3
 800e584:	00db      	lsls	r3, r3, #3
 800e586:	fa22 f103 	lsr.w	r1, r2, r3
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	3304      	adds	r3, #4
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	4413      	add	r3, r2
 800e592:	b2ca      	uxtb	r2, r1
 800e594:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	689a      	ldr	r2, [r3, #8]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f1c3 0303 	rsb	r3, r3, #3
 800e5a0:	00db      	lsls	r3, r3, #3
 800e5a2:	fa22 f103 	lsr.w	r1, r2, r3
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	b2ca      	uxtb	r2, r1
 800e5b0:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	68da      	ldr	r2, [r3, #12]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f1c3 0303 	rsb	r3, r3, #3
 800e5bc:	00db      	lsls	r3, r3, #3
 800e5be:	fa22 f103 	lsr.w	r1, r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	330c      	adds	r3, #12
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	b2ca      	uxtb	r2, r1
 800e5cc:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	691a      	ldr	r2, [r3, #16]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f1c3 0303 	rsb	r3, r3, #3
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	fa22 f103 	lsr.w	r1, r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	3310      	adds	r3, #16
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	b2ca      	uxtb	r2, r1
 800e5e8:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	695a      	ldr	r2, [r3, #20]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f1c3 0303 	rsb	r3, r3, #3
 800e5f4:	00db      	lsls	r3, r3, #3
 800e5f6:	fa22 f103 	lsr.w	r1, r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3314      	adds	r3, #20
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	4413      	add	r3, r2
 800e602:	b2ca      	uxtb	r2, r1
 800e604:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	699a      	ldr	r2, [r3, #24]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f1c3 0303 	rsb	r3, r3, #3
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	fa22 f103 	lsr.w	r1, r2, r3
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3318      	adds	r3, #24
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	4413      	add	r3, r2
 800e61e:	b2ca      	uxtb	r2, r1
 800e620:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	69da      	ldr	r2, [r3, #28]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f1c3 0303 	rsb	r3, r3, #3
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	fa22 f103 	lsr.w	r1, r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	331c      	adds	r3, #28
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	4413      	add	r3, r2
 800e63a:	b2ca      	uxtb	r2, r1
 800e63c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3301      	adds	r3, #1
 800e642:	60fb      	str	r3, [r7, #12]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b03      	cmp	r3, #3
 800e648:	d98a      	bls.n	800e560 <mg_sha256_final+0x17a>
  }
}
 800e64a:	bf00      	nop
 800e64c:	bf00      	nop
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e656 <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 800e656:	b590      	push	{r4, r7, lr}
 800e658:	b0d3      	sub	sp, #332	@ 0x14c
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800e660:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800e664:	6020      	str	r0, [r4, #0]
 800e666:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800e66a:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800e66e:	6001      	str	r1, [r0, #0]
 800e670:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800e674:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800e678:	600a      	str	r2, [r1, #0]
 800e67a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e67e:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800e682:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 800e684:	2300      	movs	r3, #0
 800e686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e68a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e68e:	223c      	movs	r2, #60	@ 0x3c
 800e690:	2100      	movs	r1, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f016 fbe2 	bl	8024e5c <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 800e698:	f107 0310 	add.w	r3, r7, #16
 800e69c:	2240      	movs	r2, #64	@ 0x40
 800e69e:	2136      	movs	r1, #54	@ 0x36
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f016 fbdb 	bl	8024e5c <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 800e6a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e6aa:	2240      	movs	r2, #64	@ 0x40
 800e6ac:	215c      	movs	r1, #92	@ 0x5c
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f016 fbd4 	bl	8024e5c <memset>
  if (keysz < 64) {
 800e6b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b3f      	cmp	r3, #63	@ 0x3f
 800e6c0:	d815      	bhi.n	800e6ee <mg_hmac_sha256+0x98>
    if (keysz > 0) memmove(k, key, keysz);
 800e6c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d029      	beq.n	800e724 <mg_hmac_sha256+0xce>
 800e6d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6d4:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e6d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800e6e0:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800e6e4:	6812      	ldr	r2, [r2, #0]
 800e6e6:	6819      	ldr	r1, [r3, #0]
 800e6e8:	f016 fb9e 	bl	8024e28 <memmove>
 800e6ec:	e01a      	b.n	800e724 <mg_hmac_sha256+0xce>
  } else {
    mg_sha256_init(&ctx);
 800e6ee:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7ff fbfa 	bl	800deec <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 800e6f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6fc:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e700:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e704:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800e708:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e70c:	6812      	ldr	r2, [r2, #0]
 800e70e:	6819      	ldr	r1, [r3, #0]
 800e710:	f7ff fe30 	bl	800e374 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 800e714:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e718:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff fe61 	bl	800e3e6 <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 800e724:	2300      	movs	r3, #0
 800e726:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e72a:	e032      	b.n	800e792 <mg_hmac_sha256+0x13c>
    i_pad[i] ^= k[i];
 800e72c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e730:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800e734:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e738:	4413      	add	r3, r2
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800e740:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e744:	440b      	add	r3, r1
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	4053      	eors	r3, r2
 800e74a:	b2d9      	uxtb	r1, r3
 800e74c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e750:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800e754:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e758:	4413      	add	r3, r2
 800e75a:	460a      	mov	r2, r1
 800e75c:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 800e75e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e762:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e766:	4413      	add	r3, r2
 800e768:	781a      	ldrb	r2, [r3, #0]
 800e76a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800e76e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e772:	440b      	add	r3, r1
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	4053      	eors	r3, r2
 800e778:	b2d9      	uxtb	r1, r3
 800e77a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e77e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e782:	4413      	add	r3, r2
 800e784:	460a      	mov	r2, r1
 800e786:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 800e788:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e78c:	3301      	adds	r3, #1
 800e78e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e792:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e796:	2b3f      	cmp	r3, #63	@ 0x3f
 800e798:	d9c8      	bls.n	800e72c <mg_hmac_sha256+0xd6>
  }
  mg_sha256_init(&ctx);
 800e79a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7ff fba4 	bl	800deec <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 800e7a4:	f107 0110 	add.w	r1, r7, #16
 800e7a8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e7ac:	2240      	movs	r2, #64	@ 0x40
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7ff fde0 	bl	800e374 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 800e7b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e7b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800e7bc:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e7c0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800e7c4:	6819      	ldr	r1, [r3, #0]
 800e7c6:	f7ff fdd5 	bl	800e374 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800e7ca:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e7ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e7d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	6818      	ldr	r0, [r3, #0]
 800e7da:	f7ff fe04 	bl	800e3e6 <mg_sha256_final>
  mg_sha256_init(&ctx);
 800e7de:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7ff fb82 	bl	800deec <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 800e7e8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e7ec:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e7f0:	2240      	movs	r2, #64	@ 0x40
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff fdbe 	bl	800e374 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 800e7f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e7fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e800:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e804:	2220      	movs	r2, #32
 800e806:	6819      	ldr	r1, [r3, #0]
 800e808:	f7ff fdb4 	bl	800e374 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800e80c:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e810:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e814:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e818:	4611      	mov	r1, r2
 800e81a:	6818      	ldr	r0, [r3, #0]
 800e81c:	f7ff fde3 	bl	800e3e6 <mg_sha256_final>
}
 800e820:	bf00      	nop
 800e822:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800e826:	46bd      	mov	sp, r7
 800e828:	bd90      	pop	{r4, r7, pc}
	...

0800e82c <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 800e82c:	b5b0      	push	{r4, r5, r7, lr}
 800e82e:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800e830:	f7f2 fba6 	bl	8000f80 <mg_millis>
 800e834:	4b05      	ldr	r3, [pc, #20]	@ (800e84c <mg_now+0x20>)
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	1884      	adds	r4, r0, r2
 800e83c:	eb41 0503 	adc.w	r5, r1, r3
 800e840:	4622      	mov	r2, r4
 800e842:	462b      	mov	r3, r5
}
 800e844:	4610      	mov	r0, r2
 800e846:	4619      	mov	r1, r3
 800e848:	bdb0      	pop	{r4, r5, r7, pc}
 800e84a:	bf00      	nop
 800e84c:	24000da0 	.word	0x24000da0

0800e850 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 800e850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e854:	b086      	sub	sp, #24
 800e856:	af00      	add	r7, sp, #0
 800e858:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4618      	mov	r0, r3
 800e860:	f009 f94c 	bl	8017afc <mg_ntohl>
 800e864:	6178      	str	r0, [r7, #20]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	3304      	adds	r3, #4
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f009 f945 	bl	8017afc <mg_ntohl>
 800e872:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <gettimestamp+0x32>
 800e87a:	697a      	ldr	r2, [r7, #20]
 800e87c:	4b2e      	ldr	r3, [pc, #184]	@ (800e938 <gettimestamp+0xe8>)
 800e87e:	4413      	add	r3, r2
 800e880:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2200      	movs	r2, #0
 800e886:	4698      	mov	r8, r3
 800e888:	4691      	mov	r9, r2
 800e88a:	4642      	mov	r2, r8
 800e88c:	464b      	mov	r3, r9
 800e88e:	f04f 0000 	mov.w	r0, #0
 800e892:	f04f 0100 	mov.w	r1, #0
 800e896:	0159      	lsls	r1, r3, #5
 800e898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e89c:	0150      	lsls	r0, r2, #5
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	ebb2 0408 	subs.w	r4, r2, r8
 800e8a6:	eb63 0509 	sbc.w	r5, r3, r9
 800e8aa:	f04f 0200 	mov.w	r2, #0
 800e8ae:	f04f 0300 	mov.w	r3, #0
 800e8b2:	00ab      	lsls	r3, r5, #2
 800e8b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e8b8:	00a2      	lsls	r2, r4, #2
 800e8ba:	4614      	mov	r4, r2
 800e8bc:	461d      	mov	r5, r3
 800e8be:	eb14 0a08 	adds.w	sl, r4, r8
 800e8c2:	eb45 0b09 	adc.w	fp, r5, r9
 800e8c6:	f04f 0200 	mov.w	r2, #0
 800e8ca:	f04f 0300 	mov.w	r3, #0
 800e8ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e8d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e8d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8da:	4692      	mov	sl, r2
 800e8dc:	469b      	mov	fp, r3
 800e8de:	4654      	mov	r4, sl
 800e8e0:	465d      	mov	r5, fp
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	ee07 3a90 	vmov	s15, r3
 800e8e8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800e8ec:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800e928 <gettimestamp+0xd8>
 800e8f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e8f4:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800e930 <gettimestamp+0xe0>
 800e8f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8fc:	ec51 0b17 	vmov	r0, r1, d7
 800e900:	f7f1 ff7a 	bl	80007f8 <__aeabi_d2lz>
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	18a1      	adds	r1, r4, r2
 800e90a:	6039      	str	r1, [r7, #0]
 800e90c:	eb45 0303 	adc.w	r3, r5, r3
 800e910:	607b      	str	r3, [r7, #4]
 800e912:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e916:	4610      	mov	r0, r2
 800e918:	4619      	mov	r1, r3
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e922:	bf00      	nop
 800e924:	f3af 8000 	nop.w
 800e928:	ffe00000 	.word	0xffe00000
 800e92c:	41efffff 	.word	0x41efffff
 800e930:	00000000 	.word	0x00000000
 800e934:	408f4000 	.word	0x408f4000
 800e938:	7c558180 	.word	0x7c558180

0800e93c <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 800e93c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e940:	b096      	sub	sp, #88	@ 0x58
 800e942:	af00      	add	r7, sp, #0
 800e944:	61f8      	str	r0, [r7, #28]
 800e946:	61b9      	str	r1, [r7, #24]
  int64_t epoch_milliseconds = -1;
 800e948:	f04f 32ff 	mov.w	r2, #4294967295
 800e94c:	f04f 33ff 	mov.w	r3, #4294967295
 800e950:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  int mode = len > 0 ? buf[0] & 7 : 0;
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <mg_sntp_parse+0x28>
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	e000      	b.n	800e966 <mg_sntp_parse+0x2a>
 800e964:	2300      	movs	r3, #0
 800e966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d006      	beq.n	800e97c <mg_sntp_parse+0x40>
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	08db      	lsrs	r3, r3, #3
 800e974:	b2db      	uxtb	r3, r3
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	e000      	b.n	800e97e <mg_sntp_parse+0x42>
 800e97c:	2300      	movs	r3, #0
 800e97e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (len < 48) {
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2b2f      	cmp	r3, #47	@ 0x2f
 800e984:	d810      	bhi.n	800e9a8 <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 800e986:	4b5c      	ldr	r3, [pc, #368]	@ (800eaf8 <mg_sntp_parse+0x1bc>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f340 80ab 	ble.w	800eae6 <mg_sntp_parse+0x1aa>
 800e990:	4b5a      	ldr	r3, [pc, #360]	@ (800eafc <mg_sntp_parse+0x1c0>)
 800e992:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800e996:	495a      	ldr	r1, [pc, #360]	@ (800eb00 <mg_sntp_parse+0x1c4>)
 800e998:	2001      	movs	r0, #1
 800e99a:	f7f9 fb45 	bl	8008028 <mg_log_prefix>
 800e99e:	4959      	ldr	r1, [pc, #356]	@ (800eb04 <mg_sntp_parse+0x1c8>)
 800e9a0:	4859      	ldr	r0, [pc, #356]	@ (800eb08 <mg_sntp_parse+0x1cc>)
 800e9a2:	f7f9 fb91 	bl	80080c8 <mg_log>
 800e9a6:	e09e      	b.n	800eae6 <mg_sntp_parse+0x1aa>
  } else if (mode != 4 && mode != 5) {
 800e9a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9aa:	2b04      	cmp	r3, #4
 800e9ac:	d013      	beq.n	800e9d6 <mg_sntp_parse+0x9a>
 800e9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9b0:	2b05      	cmp	r3, #5
 800e9b2:	d010      	beq.n	800e9d6 <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 800e9b4:	4b50      	ldr	r3, [pc, #320]	@ (800eaf8 <mg_sntp_parse+0x1bc>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f340 8094 	ble.w	800eae6 <mg_sntp_parse+0x1aa>
 800e9be:	4b4f      	ldr	r3, [pc, #316]	@ (800eafc <mg_sntp_parse+0x1c0>)
 800e9c0:	f641 5203 	movw	r2, #7427	@ 0x1d03
 800e9c4:	494e      	ldr	r1, [pc, #312]	@ (800eb00 <mg_sntp_parse+0x1c4>)
 800e9c6:	2001      	movs	r0, #1
 800e9c8:	f7f9 fb2e 	bl	8008028 <mg_log_prefix>
 800e9cc:	494f      	ldr	r1, [pc, #316]	@ (800eb0c <mg_sntp_parse+0x1d0>)
 800e9ce:	484e      	ldr	r0, [pc, #312]	@ (800eb08 <mg_sntp_parse+0x1cc>)
 800e9d0:	f7f9 fb7a 	bl	80080c8 <mg_log>
 800e9d4:	e087      	b.n	800eae6 <mg_sntp_parse+0x1aa>
  } else if (buf[1] == 0) {
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10f      	bne.n	800ea00 <mg_sntp_parse+0xc4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 800e9e0:	4b45      	ldr	r3, [pc, #276]	@ (800eaf8 <mg_sntp_parse+0x1bc>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dd7e      	ble.n	800eae6 <mg_sntp_parse+0x1aa>
 800e9e8:	4b44      	ldr	r3, [pc, #272]	@ (800eafc <mg_sntp_parse+0x1c0>)
 800e9ea:	f641 5205 	movw	r2, #7429	@ 0x1d05
 800e9ee:	4944      	ldr	r1, [pc, #272]	@ (800eb00 <mg_sntp_parse+0x1c4>)
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	f7f9 fb19 	bl	8008028 <mg_log_prefix>
 800e9f6:	4946      	ldr	r1, [pc, #280]	@ (800eb10 <mg_sntp_parse+0x1d4>)
 800e9f8:	4843      	ldr	r0, [pc, #268]	@ (800eb08 <mg_sntp_parse+0x1cc>)
 800e9fa:	f7f9 fb65 	bl	80080c8 <mg_log>
 800e9fe:	e072      	b.n	800eae6 <mg_sntp_parse+0x1aa>
  } else if (version == 4 || version == 3) {
 800ea00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea02:	2b04      	cmp	r3, #4
 800ea04:	d002      	beq.n	800ea0c <mg_sntp_parse+0xd0>
 800ea06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	d15d      	bne.n	800eac8 <mg_sntp_parse+0x18c>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 800ea0c:	69fb      	ldr	r3, [r7, #28]
 800ea0e:	3318      	adds	r3, #24
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7ff ff1d 	bl	800e850 <gettimestamp>
 800ea16:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	3320      	adds	r3, #32
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff ff16 	bl	800e850 <gettimestamp>
 800ea24:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	3328      	adds	r3, #40	@ 0x28
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7ff ff0f 	bl	800e850 <gettimestamp>
 800ea32:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    int64_t now = (int64_t) mg_millis();
 800ea36:	f7f2 faa3 	bl	8000f80 <mg_millis>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 800ea42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ea46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ea4a:	ebb0 0802 	subs.w	r8, r0, r2
 800ea4e:	eb61 0903 	sbc.w	r9, r1, r3
 800ea52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ea56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ea5a:	1a84      	subs	r4, r0, r2
 800ea5c:	eb61 0503 	sbc.w	r5, r1, r3
 800ea60:	ebb8 0304 	subs.w	r3, r8, r4
 800ea64:	60bb      	str	r3, [r7, #8]
 800ea66:	eb69 0305 	sbc.w	r3, r9, r5
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ea70:	e9c7 3408 	strd	r3, r4, [r7, #32]
    epoch_milliseconds = transmit_time + latency / 2;
 800ea74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da06      	bge.n	800ea8a <mg_sntp_parse+0x14e>
 800ea7c:	1c51      	adds	r1, r2, #1
 800ea7e:	6039      	str	r1, [r7, #0]
 800ea80:	f143 0300 	adc.w	r3, r3, #0
 800ea84:	607b      	str	r3, [r7, #4]
 800ea86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea8a:	f04f 0000 	mov.w	r0, #0
 800ea8e:	f04f 0100 	mov.w	r1, #0
 800ea92:	0850      	lsrs	r0, r2, #1
 800ea94:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ea98:	1059      	asrs	r1, r3, #1
 800ea9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ea9e:	eb12 0a00 	adds.w	sl, r2, r0
 800eaa2:	eb43 0b01 	adc.w	fp, r3, r1
 800eaa6:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 800eaaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800eaae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800eab2:	1a84      	subs	r4, r0, r2
 800eab4:	613c      	str	r4, [r7, #16]
 800eab6:	eb61 0303 	sbc.w	r3, r1, r3
 800eaba:	617b      	str	r3, [r7, #20]
 800eabc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eac0:	4914      	ldr	r1, [pc, #80]	@ (800eb14 <mg_sntp_parse+0x1d8>)
 800eac2:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 800eac6:	e00e      	b.n	800eae6 <mg_sntp_parse+0x1aa>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 800eac8:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf8 <mg_sntp_parse+0x1bc>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dd0a      	ble.n	800eae6 <mg_sntp_parse+0x1aa>
 800ead0:	4b0a      	ldr	r3, [pc, #40]	@ (800eafc <mg_sntp_parse+0x1c0>)
 800ead2:	f641 5210 	movw	r2, #7440	@ 0x1d10
 800ead6:	490a      	ldr	r1, [pc, #40]	@ (800eb00 <mg_sntp_parse+0x1c4>)
 800ead8:	2001      	movs	r0, #1
 800eada:	f7f9 faa5 	bl	8008028 <mg_log_prefix>
 800eade:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800eae0:	480d      	ldr	r0, [pc, #52]	@ (800eb18 <mg_sntp_parse+0x1dc>)
 800eae2:	f7f9 faf1 	bl	80080c8 <mg_log>
  }
  return epoch_milliseconds;
 800eae6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
}
 800eaea:	4610      	mov	r0, r2
 800eaec:	4619      	mov	r1, r3
 800eaee:	3758      	adds	r7, #88	@ 0x58
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eaf6:	bf00      	nop
 800eaf8:	24000240 	.word	0x24000240
 800eafc:	0802c2b8 	.word	0x0802c2b8
 800eb00:	08028ac4 	.word	0x08028ac4
 800eb04:	0802a498 	.word	0x0802a498
 800eb08:	08028e5c 	.word	0x08028e5c
 800eb0c:	0802a4a8 	.word	0x0802a4a8
 800eb10:	0802a4bc 	.word	0x0802a4bc
 800eb14:	24000da0 	.word	0x24000da0
 800eb18:	0802a4d8 	.word	0x0802a4d8

0800eb1c <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 800eb1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800eb20:	b088      	sub	sp, #32
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	60f8      	str	r0, [r7, #12]
 800eb26:	60b9      	str	r1, [r7, #8]
 800eb28:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3388      	adds	r3, #136	@ 0x88
 800eb2e:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d10c      	bne.n	800eb50 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800eb36:	f7f2 fa23 	bl	8000f80 <mg_millis>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800eb42:	1854      	adds	r4, r2, r1
 800eb44:	f143 0500 	adc.w	r5, r3, #0
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 800eb4e:	e05d      	b.n	800ec0c <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	2b04      	cmp	r3, #4
 800eb54:	d103      	bne.n	800eb5e <sntp_cb+0x42>
    mg_sntp_request(c);
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f000 f86a 	bl	800ec30 <mg_sntp_request>
}
 800eb5c:	e056      	b.n	800ec0c <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b07      	cmp	r3, #7
 800eb62:	d141      	bne.n	800ebe8 <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f7ff fee4 	bl	800e93c <mg_sntp_parse>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 800eb7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb80:	2a01      	cmp	r2, #1
 800eb82:	f173 0300 	sbcs.w	r3, r3, #0
 800eb86:	db27      	blt.n	800ebd8 <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 800eb88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb8c:	4614      	mov	r4, r2
 800eb8e:	461d      	mov	r5, r3
 800eb90:	f7f2 f9f6 	bl	8000f80 <mg_millis>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	ebb4 0802 	subs.w	r8, r4, r2
 800eb9c:	eb65 0903 	sbc.w	r9, r5, r3
 800eba0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec18 <sntp_cb+0xfc>)
 800eba2:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 800eba6:	f107 0310 	add.w	r3, r7, #16
 800ebaa:	461a      	mov	r2, r3
 800ebac:	2112      	movs	r1, #18
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f7f3 ff2e 	bl	8002a10 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 800ebb4:	4b19      	ldr	r3, [pc, #100]	@ (800ec1c <sntp_cb+0x100>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	dd0d      	ble.n	800ebd8 <sntp_cb+0xbc>
 800ebbc:	4b18      	ldr	r3, [pc, #96]	@ (800ec20 <sntp_cb+0x104>)
 800ebbe:	f44f 52e9 	mov.w	r2, #7456	@ 0x1d20
 800ebc2:	4918      	ldr	r1, [pc, #96]	@ (800ec24 <sntp_cb+0x108>)
 800ebc4:	2003      	movs	r0, #3
 800ebc6:	f7f9 fa2f 	bl	8008028 <mg_log_prefix>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ebce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ebd2:	4815      	ldr	r0, [pc, #84]	@ (800ec28 <sntp_cb+0x10c>)
 800ebd4:	f7f9 fa78 	bl	80080c8 <mg_log>
    c->is_closing = 1;
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ebde:	f043 0320 	orr.w	r3, r3, #32
 800ebe2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800ebe6:	e011      	b.n	800ec0c <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d10e      	bne.n	800ec0c <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800ebee:	f7f2 f9c7 	bl	8000f80 <mg_millis>
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	4282      	cmp	r2, r0
 800ebfa:	418b      	sbcs	r3, r1
 800ebfc:	d206      	bcs.n	800ec0c <sntp_cb+0xf0>
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ec04:	f043 0320 	orr.w	r3, r3, #32
 800ec08:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800ec0c:	bf00      	nop
 800ec0e:	3720      	adds	r7, #32
 800ec10:	46bd      	mov	sp, r7
 800ec12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec16:	bf00      	nop
 800ec18:	24000da0 	.word	0x24000da0
 800ec1c:	24000240 	.word	0x24000240
 800ec20:	0802c2c8 	.word	0x0802c2c8
 800ec24:	08028ac4 	.word	0x08028ac4
 800ec28:	0802a4f0 	.word	0x0802a4f0
 800ec2c:	00000000 	.word	0x00000000

0800ec30 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 800ec30:	b590      	push	{r4, r7, lr}
 800ec32:	b095      	sub	sp, #84	@ 0x54
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ec3e:	f003 0308 	and.w	r3, r3, #8
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d011      	beq.n	800ec6c <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 800ec48:	4b37      	ldr	r3, [pc, #220]	@ (800ed28 <mg_sntp_request+0xf8>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dd5f      	ble.n	800ed10 <mg_sntp_request+0xe0>
 800ec50:	4b36      	ldr	r3, [pc, #216]	@ (800ed2c <mg_sntp_request+0xfc>)
 800ec52:	f641 522d 	movw	r2, #7469	@ 0x1d2d
 800ec56:	4936      	ldr	r1, [pc, #216]	@ (800ed30 <mg_sntp_request+0x100>)
 800ec58:	2001      	movs	r0, #1
 800ec5a:	f7f9 f9e5 	bl	8008028 <mg_log_prefix>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec62:	4619      	mov	r1, r3
 800ec64:	4833      	ldr	r0, [pc, #204]	@ (800ed34 <mg_sntp_request+0x104>)
 800ec66:	f7f9 fa2f 	bl	80080c8 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 800ec6a:	e051      	b.n	800ed10 <mg_sntp_request+0xe0>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 800ec6c:	f7f2 f988 	bl	8000f80 <mg_millis>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 800ec78:	2300      	movs	r3, #0
 800ec7a:	60bb      	str	r3, [r7, #8]
 800ec7c:	f107 030c 	add.w	r3, r7, #12
 800ec80:	222c      	movs	r2, #44	@ 0x2c
 800ec82:	2100      	movs	r1, #0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f016 f8e9 	bl	8024e5c <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 800ec8a:	f107 0308 	add.w	r3, r7, #8
 800ec8e:	3328      	adds	r3, #40	@ 0x28
 800ec90:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 800ec92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800ec96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec9a:	f04f 0300 	mov.w	r3, #0
 800ec9e:	f7f1 fd43 	bl	8000728 <__aeabi_ldivmod>
 800eca2:	4610      	mov	r0, r2
 800eca4:	4619      	mov	r1, r3
 800eca6:	f7f1 fd11 	bl	80006cc <__aeabi_l2d>
 800ecaa:	ec41 0b15 	vmov	d5, r0, r1
 800ecae:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 800ed18 <mg_sntp_request+0xe8>
 800ecb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ecb6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 800ed20 <mg_sntp_request+0xf0>
 800ecba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ecbe:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 800ecc2:	2323      	movs	r3, #35	@ 0x23
 800ecc4:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 800ecc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800ecca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ecce:	f04f 0300 	mov.w	r3, #0
 800ecd2:	f7f1 fd29 	bl	8000728 <__aeabi_ldivmod>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	4b17      	ldr	r3, [pc, #92]	@ (800ed38 <mg_sntp_request+0x108>)
 800ecdc:	4413      	add	r3, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f008 ff0c 	bl	8017afc <mg_ntohl>
 800ece4:	4602      	mov	r2, r0
 800ece6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ece8:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 800ecea:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800ecee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ecf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecf4:	1d1c      	adds	r4, r3, #4
 800ecf6:	ee17 0a90 	vmov	r0, s15
 800ecfa:	f008 feff 	bl	8017afc <mg_ntohl>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 800ed02:	f107 0308 	add.w	r3, r7, #8
 800ed06:	2230      	movs	r2, #48	@ 0x30
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7fe fa16 	bl	800d13c <mg_send>
}
 800ed10:	bf00      	nop
 800ed12:	3754      	adds	r7, #84	@ 0x54
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd90      	pop	{r4, r7, pc}
 800ed18:	00000000 	.word	0x00000000
 800ed1c:	408f4000 	.word	0x408f4000
 800ed20:	ffe00000 	.word	0xffe00000
 800ed24:	41efffff 	.word	0x41efffff
 800ed28:	24000240 	.word	0x24000240
 800ed2c:	0802c2d0 	.word	0x0802c2d0
 800ed30:	08028ac4 	.word	0x08028ac4
 800ed34:	0802a514 	.word	0x0802a514
 800ed38:	83aa7e80 	.word	0x83aa7e80

0800ed3c <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d101      	bne.n	800ed58 <mg_sntp_connect+0x1c>
 800ed54:	4b0c      	ldr	r3, [pc, #48]	@ (800ed88 <mg_sntp_connect+0x4c>)
 800ed56:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f7fa fe06 	bl	8009970 <mg_connect>
 800ed64:	6178      	str	r0, [r7, #20]
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d008      	beq.n	800ed7e <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	4a07      	ldr	r2, [pc, #28]	@ (800ed8c <mg_sntp_connect+0x50>)
 800ed70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	2101      	movs	r1, #1
 800ed78:	6978      	ldr	r0, [r7, #20]
 800ed7a:	f7ff fecf 	bl	800eb1c <sntp_cb>
  }
  return c;
 800ed7e:	697b      	ldr	r3, [r7, #20]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3718      	adds	r7, #24
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	0802a52c 	.word	0x0802a52c
 800ed8c:	0800eb1d 	.word	0x0800eb1d

0800ed90 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800ed9c:	4b05      	ldr	r3, [pc, #20]	@ (800edb4 <mg_http_serve_ssi+0x24>)
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f7f6 fba1 	bl	80054ec <mg_http_reply>
  (void) root, (void) fullpath;
}
 800edaa:	bf00      	nop
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	0802a548 	.word	0x0802a548

0800edb8 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	60bb      	str	r3, [r7, #8]
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <mg_str_s+0x1e>
 800edcc:	6838      	ldr	r0, [r7, #0]
 800edce:	f7f1 fae7 	bl	80003a0 <strlen>
 800edd2:	4603      	mov	r3, r0
 800edd4:	e000      	b.n	800edd8 <mg_str_s+0x20>
 800edd6:	2300      	movs	r3, #0
 800edd8:	60fb      	str	r3, [r7, #12]
  return str;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	461a      	mov	r2, r3
 800edde:	f107 0308 	add.w	r3, r7, #8
 800ede2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ede6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800edf2:	b480      	push	{r7}
 800edf4:	b087      	sub	sp, #28
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	613b      	str	r3, [r7, #16]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	617b      	str	r3, [r7, #20]
  return str;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	f107 0310 	add.w	r3, r7, #16
 800ee0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	371c      	adds	r7, #28
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <mg_tolc>:

static int mg_tolc(char c) {
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	4603      	mov	r3, r0
 800ee2a:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 800ee2c:	79fb      	ldrb	r3, [r7, #7]
 800ee2e:	2b40      	cmp	r3, #64	@ 0x40
 800ee30:	d905      	bls.n	800ee3e <mg_tolc+0x1c>
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	2b5a      	cmp	r3, #90	@ 0x5a
 800ee36:	d802      	bhi.n	800ee3e <mg_tolc+0x1c>
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	3320      	adds	r3, #32
 800ee3c:	e000      	b.n	800ee40 <mg_tolc+0x1e>
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	1d3b      	adds	r3, r7, #4
 800ee56:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	617b      	str	r3, [r7, #20]
 800ee5e:	2300      	movs	r3, #0
 800ee60:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01c      	beq.n	800eea2 <mg_strdup+0x56>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d019      	beq.n	800eea2 <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	3301      	adds	r3, #1
 800ee72:	4619      	mov	r1, r3
 800ee74:	2001      	movs	r0, #1
 800ee76:	f014 fd41 	bl	80238fc <calloc>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00e      	beq.n	800eea2 <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	69f8      	ldr	r0, [r7, #28]
 800ee8c:	f016 f931 	bl	80250f2 <memcpy>
      sc[s.len] = '\0';
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	69fa      	ldr	r2, [r7, #28]
 800ee94:	4413      	add	r3, r2
 800ee96:	2200      	movs	r2, #0
 800ee98:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	461a      	mov	r2, r3
 800eea6:	f107 0314 	add.w	r3, r7, #20
 800eeaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eeae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	3720      	adds	r7, #32
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800eeba:	b490      	push	{r4, r7}
 800eebc:	b088      	sub	sp, #32
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	f107 0408 	add.w	r4, r7, #8
 800eec4:	e884 0003 	stmia.w	r4, {r0, r1}
 800eec8:	4639      	mov	r1, r7
 800eeca:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800eed2:	e019      	b.n	800ef08 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	4413      	add	r3, r2
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	4413      	add	r3, r2
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800eee8:	69ba      	ldr	r2, [r7, #24]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	da02      	bge.n	800eef6 <mg_strcmp+0x3c>
 800eef0:	f04f 33ff 	mov.w	r3, #4294967295
 800eef4:	e01e      	b.n	800ef34 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	dd01      	ble.n	800ef02 <mg_strcmp+0x48>
 800eefe:	2301      	movs	r3, #1
 800ef00:	e018      	b.n	800ef34 <mg_strcmp+0x7a>
    i++;
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	3301      	adds	r3, #1
 800ef06:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	69fa      	ldr	r2, [r7, #28]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d203      	bcs.n	800ef18 <mg_strcmp+0x5e>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	69fa      	ldr	r2, [r7, #28]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d3dd      	bcc.n	800eed4 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d201      	bcs.n	800ef24 <mg_strcmp+0x6a>
 800ef20:	2301      	movs	r3, #1
 800ef22:	e007      	b.n	800ef34 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	69fa      	ldr	r2, [r7, #28]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d202      	bcs.n	800ef32 <mg_strcmp+0x78>
 800ef2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef30:	e000      	b.n	800ef34 <mg_strcmp+0x7a>
  return 0;
 800ef32:	2300      	movs	r3, #0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3720      	adds	r7, #32
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bc90      	pop	{r4, r7}
 800ef3c:	4770      	bx	lr

0800ef3e <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 800ef3e:	b590      	push	{r4, r7, lr}
 800ef40:	b089      	sub	sp, #36	@ 0x24
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	f107 0408 	add.w	r4, r7, #8
 800ef48:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800ef52:	2300      	movs	r3, #0
 800ef54:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800ef56:	e01f      	b.n	800ef98 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 800ef58:	68ba      	ldr	r2, [r7, #8]
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff ff5e 	bl	800ee22 <mg_tolc>
 800ef66:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7ff ff56 	bl	800ee22 <mg_tolc>
 800ef76:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 800ef78:	69ba      	ldr	r2, [r7, #24]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	da02      	bge.n	800ef86 <mg_strcasecmp+0x48>
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295
 800ef84:	e01e      	b.n	800efc4 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 800ef86:	69ba      	ldr	r2, [r7, #24]
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	dd01      	ble.n	800ef92 <mg_strcasecmp+0x54>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e018      	b.n	800efc4 <mg_strcasecmp+0x86>
    i++;
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	3301      	adds	r3, #1
 800ef96:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	69fa      	ldr	r2, [r7, #28]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d203      	bcs.n	800efa8 <mg_strcasecmp+0x6a>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d3d7      	bcc.n	800ef58 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	69fa      	ldr	r2, [r7, #28]
 800efac:	429a      	cmp	r2, r3
 800efae:	d201      	bcs.n	800efb4 <mg_strcasecmp+0x76>
 800efb0:	2301      	movs	r3, #1
 800efb2:	e007      	b.n	800efc4 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d202      	bcs.n	800efc2 <mg_strcasecmp+0x84>
 800efbc:	f04f 33ff 	mov.w	r3, #4294967295
 800efc0:	e000      	b.n	800efc4 <mg_strcasecmp+0x86>
  return 0;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3724      	adds	r7, #36	@ 0x24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd90      	pop	{r4, r7, pc}

0800efcc <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800efcc:	b490      	push	{r4, r7}
 800efce:	b088      	sub	sp, #32
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	f107 0408 	add.w	r4, r7, #8
 800efd6:	e884 0003 	stmia.w	r4, {r0, r1}
 800efda:	4639      	mov	r1, r7
 800efdc:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800efe0:	2300      	movs	r3, #0
 800efe2:	61fb      	str	r3, [r7, #28]
 800efe4:	2300      	movs	r3, #0
 800efe6:	61bb      	str	r3, [r7, #24]
 800efe8:	2300      	movs	r3, #0
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	2300      	movs	r3, #0
 800efee:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 800eff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 80ba 	beq.w	800f16c <mg_match+0x1a0>
 800eff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800effa:	2200      	movs	r2, #0
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f000:	2200      	movs	r2, #0
 800f002:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800f004:	e0b2      	b.n	800f16c <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	69fa      	ldr	r2, [r7, #28]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d25b      	bcs.n	800f0c6 <mg_match+0xfa>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	69ba      	ldr	r2, [r7, #24]
 800f012:	429a      	cmp	r2, r3
 800f014:	d257      	bcs.n	800f0c6 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 800f016:	683a      	ldr	r2, [r7, #0]
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	4413      	add	r3, r2
 800f01c:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 800f01e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f020:	d015      	beq.n	800f04e <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	4413      	add	r3, r2
 800f028:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 800f02a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f02c:	d04b      	beq.n	800f0c6 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	4413      	add	r3, r2
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	2b23      	cmp	r3, #35	@ 0x23
 800f038:	d045      	beq.n	800f0c6 <mg_match+0xfa>
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	4413      	add	r3, r2
 800f040:	781a      	ldrb	r2, [r3, #0]
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	440b      	add	r3, r1
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d13b      	bne.n	800f0c6 <mg_match+0xfa>
      if (caps == NULL) {
 800f04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f050:	2b00      	cmp	r3, #0
 800f052:	d031      	beq.n	800f0b8 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	4413      	add	r3, r2
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b3f      	cmp	r3, #63	@ 0x3f
 800f05e:	d111      	bne.n	800f084 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	441a      	add	r2, r3
 800f066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06c:	2201      	movs	r2, #1
 800f06e:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 800f070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f072:	3308      	adds	r3, #8
 800f074:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f07e:	2200      	movs	r2, #0
 800f080:	605a      	str	r2, [r3, #4]
 800f082:	e019      	b.n	800f0b8 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 800f084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d015      	beq.n	800f0b8 <mg_match+0xec>
 800f08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d111      	bne.n	800f0b8 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	441a      	add	r2, r3
 800f09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a4:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 800f0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	605a      	str	r2, [r3, #4]
 800f0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	61fb      	str	r3, [r7, #28]
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	61bb      	str	r3, [r7, #24]
 800f0c4:	e052      	b.n	800f16c <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	69fa      	ldr	r2, [r7, #28]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d222      	bcs.n	800f114 <mg_match+0x148>
 800f0ce:	683a      	ldr	r2, [r7, #0]
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0d8:	d005      	beq.n	800f0e6 <mg_match+0x11a>
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	4413      	add	r3, r2
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	2b23      	cmp	r3, #35	@ 0x23
 800f0e4:	d116      	bne.n	800f114 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 800f0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <mg_match+0x138>
 800f0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d107      	bne.n	800f104 <mg_match+0x138>
 800f0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	605a      	str	r2, [r3, #4]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	441a      	add	r2, r3
 800f100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f102:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	1c5a      	adds	r2, r3, #1
 800f108:	61fa      	str	r2, [r7, #28]
 800f10a:	617b      	str	r3, [r7, #20]
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	3301      	adds	r3, #1
 800f110:	613b      	str	r3, [r7, #16]
 800f112:	e02b      	b.n	800f16c <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d025      	beq.n	800f166 <mg_match+0x19a>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d821      	bhi.n	800f166 <mg_match+0x19a>
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	4413      	add	r3, r2
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	2b23      	cmp	r3, #35	@ 0x23
 800f12c:	d005      	beq.n	800f13a <mg_match+0x16e>
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	4413      	add	r3, r2
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b2f      	cmp	r3, #47	@ 0x2f
 800f138:	d015      	beq.n	800f166 <mg_match+0x19a>
      i = ni, j = nj;
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	61fb      	str	r3, [r7, #28]
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800f142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f144:	2b00      	cmp	r3, #0
 800f146:	d010      	beq.n	800f16a <mg_match+0x19e>
 800f148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10c      	bne.n	800f16a <mg_match+0x19e>
 800f150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d108      	bne.n	800f16a <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 800f158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15a:	3b08      	subs	r3, #8
 800f15c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f160:	2200      	movs	r2, #0
 800f162:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800f164:	e001      	b.n	800f16a <mg_match+0x19e>
      }
    } else {
      return false;
 800f166:	2300      	movs	r3, #0
 800f168:	e01f      	b.n	800f1aa <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 800f16a:	bf00      	nop
  while (i < p.len || j < s.len) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	429a      	cmp	r2, r3
 800f172:	f4ff af48 	bcc.w	800f006 <mg_match+0x3a>
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	69ba      	ldr	r2, [r7, #24]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	f4ff af43 	bcc.w	800f006 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 800f180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f182:	2b00      	cmp	r3, #0
 800f184:	d010      	beq.n	800f1a8 <mg_match+0x1dc>
 800f186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00c      	beq.n	800f1a8 <mg_match+0x1dc>
 800f18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d108      	bne.n	800f1a8 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	441a      	add	r2, r3
 800f19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a6:	605a      	str	r2, [r3, #4]
  }
  return true;
 800f1a8:	2301      	movs	r3, #1
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3720      	adds	r7, #32
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bc90      	pop	{r4, r7}
 800f1b2:	4770      	bx	lr

0800f1b4 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 800f1b4:	b590      	push	{r4, r7, lr}
 800f1b6:	b089      	sub	sp, #36	@ 0x24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	f107 0410 	add.w	r4, r7, #16
 800f1be:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1c2:	60fa      	str	r2, [r7, #12]
 800f1c4:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <mg_span+0x1e>
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d101      	bne.n	800f1d6 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	e047      	b.n	800f266 <mg_span+0xb2>
  } else {
    size_t len = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 800f1da:	e002      	b.n	800f1e2 <mg_span+0x2e>
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	61fb      	str	r3, [r7, #28]
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	69fa      	ldr	r2, [r7, #28]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d207      	bcs.n	800f1fa <mg_span+0x46>
 800f1ea:	693a      	ldr	r2, [r7, #16]
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d1f0      	bne.n	800f1dc <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00c      	beq.n	800f21a <mg_span+0x66>
 800f200:	6939      	ldr	r1, [r7, #16]
 800f202:	68fc      	ldr	r4, [r7, #12]
 800f204:	463b      	mov	r3, r7
 800f206:	69fa      	ldr	r2, [r7, #28]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff fdf2 	bl	800edf2 <mg_str_n>
 800f20e:	4622      	mov	r2, r4
 800f210:	463b      	mov	r3, r7
 800f212:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f216:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d010      	beq.n	800f242 <mg_span+0x8e>
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	18d1      	adds	r1, r2, r3
 800f226:	697a      	ldr	r2, [r7, #20]
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	1ad2      	subs	r2, r2, r3
 800f22c:	68bc      	ldr	r4, [r7, #8]
 800f22e:	463b      	mov	r3, r7
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff fdde 	bl	800edf2 <mg_str_n>
 800f236:	4622      	mov	r2, r4
 800f238:	463b      	mov	r3, r7
 800f23a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f23e:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00d      	beq.n	800f264 <mg_span+0xb0>
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	69fa      	ldr	r2, [r7, #28]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d209      	bcs.n	800f264 <mg_span+0xb0>
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	601a      	str	r2, [r3, #0]
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	1e5a      	subs	r2, r3, #1
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	605a      	str	r2, [r3, #4]
    return true;
 800f264:	2301      	movs	r3, #1
  }
}
 800f266:	4618      	mov	r0, r3
 800f268:	3724      	adds	r7, #36	@ 0x24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd90      	pop	{r4, r7, pc}

0800f26e <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 800f26e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f272:	b0a5      	sub	sp, #148	@ 0x94
 800f274:	af00      	add	r7, sp, #0
 800f276:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800f27a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f27e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f280:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f288:	2300      	movs	r3, #0
 800f28a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800f28e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f292:	2b01      	cmp	r3, #1
 800f294:	d016      	beq.n	800f2c4 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800f296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	d00d      	beq.n	800f2ba <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 800f29e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f2a2:	2b04      	cmp	r3, #4
 800f2a4:	d104      	bne.n	800f2b0 <mg_str_to_num+0x42>
 800f2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2aa:	f04f 0300 	mov.w	r3, #0
 800f2ae:	e00d      	b.n	800f2cc <mg_str_to_num+0x5e>
 800f2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b8:	e008      	b.n	800f2cc <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800f2ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2be:	f04f 0300 	mov.w	r3, #0
 800f2c2:	e003      	b.n	800f2cc <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800f2c4:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 800f2c8:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 800f2cc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 800f2d0:	f04f 0200 	mov.w	r2, #0
 800f2d4:	f04f 0300 	mov.w	r3, #0
 800f2d8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 800f2dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800f2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e4:	bf08      	it	eq
 800f2e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800f2ea:	d105      	bne.n	800f2f8 <mg_str_to_num+0x8a>
 800f2ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f2f0:	2b08      	cmp	r3, #8
 800f2f2:	d001      	beq.n	800f2f8 <mg_str_to_num+0x8a>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	e1e8      	b.n	800f6ca <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 800f2f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d12d      	bne.n	800f35a <mg_str_to_num+0xec>
 800f2fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f300:	2b01      	cmp	r3, #1
 800f302:	d92a      	bls.n	800f35a <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 800f304:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f306:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f30a:	4413      	add	r3, r2
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b30      	cmp	r3, #48	@ 0x30
 800f310:	d121      	bne.n	800f356 <mg_str_to_num+0xe8>
      i++;
 800f312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f316:	3301      	adds	r3, #1
 800f318:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 800f31c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f31e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f322:	4413      	add	r3, r2
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	2b62      	cmp	r3, #98	@ 0x62
 800f328:	d00a      	beq.n	800f340 <mg_str_to_num+0xd2>
 800f32a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f32c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f330:	4413      	add	r3, r2
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b78      	cmp	r3, #120	@ 0x78
 800f336:	d101      	bne.n	800f33c <mg_str_to_num+0xce>
 800f338:	2310      	movs	r3, #16
 800f33a:	e002      	b.n	800f342 <mg_str_to_num+0xd4>
 800f33c:	230a      	movs	r3, #10
 800f33e:	e000      	b.n	800f342 <mg_str_to_num+0xd4>
 800f340:	2302      	movs	r3, #2
 800f342:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 800f344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f346:	2b0a      	cmp	r3, #10
 800f348:	d007      	beq.n	800f35a <mg_str_to_num+0xec>
 800f34a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f34e:	3301      	adds	r3, #1
 800f350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f354:	e001      	b.n	800f35a <mg_str_to_num+0xec>
    } else {
      base = 10;
 800f356:	230a      	movs	r3, #10
 800f358:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 800f35a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f35c:	2b10      	cmp	r3, #16
 800f35e:	f000 8178 	beq.w	800f652 <mg_str_to_num+0x3e4>
 800f362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f364:	2b10      	cmp	r3, #16
 800f366:	f300 817d 	bgt.w	800f664 <mg_str_to_num+0x3f6>
 800f36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f36c:	2b02      	cmp	r3, #2
 800f36e:	d052      	beq.n	800f416 <mg_str_to_num+0x1a8>
 800f370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f372:	2b0a      	cmp	r3, #10
 800f374:	f000 80cd 	beq.w	800f512 <mg_str_to_num+0x2a4>
 800f378:	e174      	b.n	800f664 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800f37a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f37c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f380:	4413      	add	r3, r2
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	3b30      	subs	r3, #48	@ 0x30
 800f386:	17da      	asrs	r2, r3, #31
 800f388:	633b      	str	r3, [r7, #48]	@ 0x30
 800f38a:	637a      	str	r2, [r7, #52]	@ 0x34
 800f38c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800f390:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 800f394:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f398:	f04f 0200 	mov.w	r2, #0
 800f39c:	f04f 0300 	mov.w	r3, #0
 800f3a0:	0842      	lsrs	r2, r0, #1
 800f3a2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f3a6:	084b      	lsrs	r3, r1, #1
 800f3a8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f3ac:	4282      	cmp	r2, r0
 800f3ae:	418b      	sbcs	r3, r1
 800f3b0:	d201      	bcs.n	800f3b6 <mg_str_to_num+0x148>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e189      	b.n	800f6ca <mg_str_to_num+0x45c>
        result *= 2;
 800f3b6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f3ba:	1891      	adds	r1, r2, r2
 800f3bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f3be:	415b      	adcs	r3, r3
 800f3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800f3c6:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f3ca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f3ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f3d2:	1a85      	subs	r5, r0, r2
 800f3d4:	eb61 0603 	sbc.w	r6, r1, r3
 800f3d8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f3dc:	4295      	cmp	r5, r2
 800f3de:	eb76 0303 	sbcs.w	r3, r6, r3
 800f3e2:	d201      	bcs.n	800f3e8 <mg_str_to_num+0x17a>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	e170      	b.n	800f6ca <mg_str_to_num+0x45c>
        result += digit;
 800f3e8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f3ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f3f0:	1884      	adds	r4, r0, r2
 800f3f2:	623c      	str	r4, [r7, #32]
 800f3f4:	eb41 0303 	adc.w	r3, r1, r3
 800f3f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f3fe:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f406:	3301      	adds	r3, #1
 800f408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f40c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f410:	3301      	adds	r3, #1
 800f412:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 800f416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f418:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f41c:	429a      	cmp	r2, r3
 800f41e:	f080 8123 	bcs.w	800f668 <mg_str_to_num+0x3fa>
 800f422:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f428:	4413      	add	r3, r2
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b30      	cmp	r3, #48	@ 0x30
 800f42e:	d0a4      	beq.n	800f37a <mg_str_to_num+0x10c>
 800f430:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f436:	4413      	add	r3, r2
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b31      	cmp	r3, #49	@ 0x31
 800f43c:	d09d      	beq.n	800f37a <mg_str_to_num+0x10c>
      }
      break;
 800f43e:	e113      	b.n	800f668 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800f440:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f446:	4413      	add	r3, r2
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	3b30      	subs	r3, #48	@ 0x30
 800f44c:	17da      	asrs	r2, r3, #31
 800f44e:	61bb      	str	r3, [r7, #24]
 800f450:	61fa      	str	r2, [r7, #28]
 800f452:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f456:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 800f45a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f45e:	f04f 020a 	mov.w	r2, #10
 800f462:	f04f 0300 	mov.w	r3, #0
 800f466:	f7f1 f9af 	bl	80007c8 <__aeabi_uldivmod>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	4610      	mov	r0, r2
 800f470:	4619      	mov	r1, r3
 800f472:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f476:	4290      	cmp	r0, r2
 800f478:	eb71 0303 	sbcs.w	r3, r1, r3
 800f47c:	d201      	bcs.n	800f482 <mg_str_to_num+0x214>
 800f47e:	2300      	movs	r3, #0
 800f480:	e123      	b.n	800f6ca <mg_str_to_num+0x45c>
        result *= 10;
 800f482:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800f486:	4622      	mov	r2, r4
 800f488:	462b      	mov	r3, r5
 800f48a:	f04f 0000 	mov.w	r0, #0
 800f48e:	f04f 0100 	mov.w	r1, #0
 800f492:	0099      	lsls	r1, r3, #2
 800f494:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800f498:	0090      	lsls	r0, r2, #2
 800f49a:	4602      	mov	r2, r0
 800f49c:	460b      	mov	r3, r1
 800f49e:	eb12 0804 	adds.w	r8, r2, r4
 800f4a2:	eb43 0905 	adc.w	r9, r3, r5
 800f4a6:	eb18 0308 	adds.w	r3, r8, r8
 800f4aa:	613b      	str	r3, [r7, #16]
 800f4ac:	eb49 0309 	adc.w	r3, r9, r9
 800f4b0:	617b      	str	r3, [r7, #20]
 800f4b2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800f4b6:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f4ba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f4be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f4c2:	1a84      	subs	r4, r0, r2
 800f4c4:	63bc      	str	r4, [r7, #56]	@ 0x38
 800f4c6:	eb61 0303 	sbc.w	r3, r1, r3
 800f4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f4d0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	4291      	cmp	r1, r2
 800f4d8:	4629      	mov	r1, r5
 800f4da:	eb71 0303 	sbcs.w	r3, r1, r3
 800f4de:	d201      	bcs.n	800f4e4 <mg_str_to_num+0x276>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	e0f2      	b.n	800f6ca <mg_str_to_num+0x45c>
        result += digit;
 800f4e4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f4e8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f4ec:	1884      	adds	r4, r0, r2
 800f4ee:	60bc      	str	r4, [r7, #8]
 800f4f0:	eb41 0303 	adc.w	r3, r1, r3
 800f4f4:	60fb      	str	r3, [r7, #12]
 800f4f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f4fa:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f4fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f502:	3301      	adds	r3, #1
 800f504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f50c:	3301      	adds	r3, #1
 800f50e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800f512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f514:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f518:	429a      	cmp	r2, r3
 800f51a:	f080 80a7 	bcs.w	800f66c <mg_str_to_num+0x3fe>
 800f51e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f520:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f524:	4413      	add	r3, r2
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b2f      	cmp	r3, #47	@ 0x2f
 800f52a:	f240 809f 	bls.w	800f66c <mg_str_to_num+0x3fe>
 800f52e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f534:	4413      	add	r3, r2
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	2b39      	cmp	r3, #57	@ 0x39
 800f53a:	d981      	bls.n	800f440 <mg_str_to_num+0x1d2>
      }
      break;
 800f53c:	e096      	b.n	800f66c <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 800f53e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f544:	4413      	add	r3, r2
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f54c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f550:	2b2f      	cmp	r3, #47	@ 0x2f
 800f552:	d90a      	bls.n	800f56a <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800f554:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f558:	2b39      	cmp	r3, #57	@ 0x39
 800f55a:	d806      	bhi.n	800f56a <mg_str_to_num+0x2fc>
 800f55c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f560:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f562:	17da      	asrs	r2, r3, #31
 800f564:	643b      	str	r3, [r7, #64]	@ 0x40
 800f566:	647a      	str	r2, [r7, #68]	@ 0x44
 800f568:	e023      	b.n	800f5b2 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f56a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f56e:	2b40      	cmp	r3, #64	@ 0x40
 800f570:	d90a      	bls.n	800f588 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f572:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f576:	2b46      	cmp	r3, #70	@ 0x46
 800f578:	d806      	bhi.n	800f588 <mg_str_to_num+0x31a>
 800f57a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f57e:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f580:	17da      	asrs	r2, r3, #31
 800f582:	643b      	str	r3, [r7, #64]	@ 0x40
 800f584:	647a      	str	r2, [r7, #68]	@ 0x44
 800f586:	e014      	b.n	800f5b2 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 800f588:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f58c:	2b60      	cmp	r3, #96	@ 0x60
 800f58e:	d90a      	bls.n	800f5a6 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f590:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f594:	2b66      	cmp	r3, #102	@ 0x66
 800f596:	d806      	bhi.n	800f5a6 <mg_str_to_num+0x338>
 800f598:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f59c:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 800f59e:	17da      	asrs	r2, r3, #31
 800f5a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5a2:	647a      	str	r2, [r7, #68]	@ 0x44
 800f5a4:	e005      	b.n	800f5b2 <mg_str_to_num+0x344>
 800f5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5aa:	f04f 34ff 	mov.w	r4, #4294967295
 800f5ae:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800f5b2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800f5b6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 800f5ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c2:	bf08      	it	eq
 800f5c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800f5c8:	d04a      	beq.n	800f660 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 800f5ca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f5ce:	f04f 0200 	mov.w	r2, #0
 800f5d2:	f04f 0300 	mov.w	r3, #0
 800f5d6:	0902      	lsrs	r2, r0, #4
 800f5d8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800f5dc:	090b      	lsrs	r3, r1, #4
 800f5de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f5e2:	4282      	cmp	r2, r0
 800f5e4:	418b      	sbcs	r3, r1
 800f5e6:	d201      	bcs.n	800f5ec <mg_str_to_num+0x37e>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	e06e      	b.n	800f6ca <mg_str_to_num+0x45c>
        result *= 16;
 800f5ec:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f5f0:	f04f 0200 	mov.w	r2, #0
 800f5f4:	f04f 0300 	mov.w	r3, #0
 800f5f8:	010b      	lsls	r3, r1, #4
 800f5fa:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800f5fe:	0102      	lsls	r2, r0, #4
 800f600:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f604:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f608:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f60c:	ebb0 0a02 	subs.w	sl, r0, r2
 800f610:	eb61 0b03 	sbc.w	fp, r1, r3
 800f614:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f618:	4592      	cmp	sl, r2
 800f61a:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f61e:	d201      	bcs.n	800f624 <mg_str_to_num+0x3b6>
 800f620:	2300      	movs	r3, #0
 800f622:	e052      	b.n	800f6ca <mg_str_to_num+0x45c>
        result += digit;
 800f624:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f628:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f62c:	1884      	adds	r4, r0, r2
 800f62e:	603c      	str	r4, [r7, #0]
 800f630:	eb41 0303 	adc.w	r3, r1, r3
 800f634:	607b      	str	r3, [r7, #4]
 800f636:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f63a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f642:	3301      	adds	r3, #1
 800f644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f64c:	3301      	adds	r3, #1
 800f64e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 800f652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f654:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f658:	429a      	cmp	r2, r3
 800f65a:	f4ff af70 	bcc.w	800f53e <mg_str_to_num+0x2d0>
      }
      break;
 800f65e:	e006      	b.n	800f66e <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 800f660:	bf00      	nop
      break;
 800f662:	e004      	b.n	800f66e <mg_str_to_num+0x400>
    default:
      return false;
 800f664:	2300      	movs	r3, #0
 800f666:	e030      	b.n	800f6ca <mg_str_to_num+0x45c>
      break;
 800f668:	bf00      	nop
 800f66a:	e000      	b.n	800f66e <mg_str_to_num+0x400>
      break;
 800f66c:	bf00      	nop
  }
  if (ndigits == 0) return false;
 800f66e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <mg_str_to_num+0x40c>
 800f676:	2300      	movs	r3, #0
 800f678:	e027      	b.n	800f6ca <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 800f67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f67c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f680:	429a      	cmp	r2, r3
 800f682:	d001      	beq.n	800f688 <mg_str_to_num+0x41a>
 800f684:	2300      	movs	r3, #0
 800f686:	e020      	b.n	800f6ca <mg_str_to_num+0x45c>
  if (val_len == 1) {
 800f688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d104      	bne.n	800f69a <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 800f690:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800f694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f696:	701a      	strb	r2, [r3, #0]
 800f698:	e016      	b.n	800f6c8 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 800f69a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d104      	bne.n	800f6ac <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 800f6a2:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 800f6a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6a8:	801a      	strh	r2, [r3, #0]
 800f6aa:	e00d      	b.n	800f6c8 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 800f6ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f6b0:	2b04      	cmp	r3, #4
 800f6b2:	d104      	bne.n	800f6be <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 800f6b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f6b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	e004      	b.n	800f6c8 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 800f6be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f6c0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f6c4:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 800f6c8:	2301      	movs	r3, #1
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3794      	adds	r7, #148	@ 0x94
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6d4 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	601a      	str	r2, [r3, #0]
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f6f2:	68b9      	ldr	r1, [r7, #8]
 800f6f4:	f04f 0200 	mov.w	r2, #0
 800f6f8:	f04f 0300 	mov.w	r3, #0
 800f6fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	69ba      	ldr	r2, [r7, #24]
 800f704:	619a      	str	r2, [r3, #24]
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	69fa      	ldr	r2, [r7, #28]
 800f70a:	61da      	str	r2, [r3, #28]
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	6a3a      	ldr	r2, [r7, #32]
 800f710:	621a      	str	r2, [r3, #32]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	601a      	str	r2, [r3, #0]
}
 800f720:	bf00      	nop
 800f722:	3714      	adds	r7, #20
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800f72c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f730:	b086      	sub	sp, #24
 800f732:	af00      	add	r7, sp, #0
 800f734:	6178      	str	r0, [r7, #20]
 800f736:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800f73a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f73e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f742:	eb10 0a02 	adds.w	sl, r0, r2
 800f746:	eb41 0b03 	adc.w	fp, r1, r3
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f750:	4592      	cmp	sl, r2
 800f752:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f756:	d206      	bcs.n	800f766 <mg_timer_expired+0x3a>
 800f758:	6979      	ldr	r1, [r7, #20]
 800f75a:	f04f 0200 	mov.w	r2, #0
 800f75e:	f04f 0300 	mov.w	r3, #0
 800f762:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	d10d      	bne.n	800f78c <mg_timer_expired+0x60>
 800f770:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f778:	1886      	adds	r6, r0, r2
 800f77a:	603e      	str	r6, [r7, #0]
 800f77c:	eb41 0303 	adc.w	r3, r1, r3
 800f780:	607b      	str	r3, [r7, #4]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f788:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f792:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f796:	4290      	cmp	r0, r2
 800f798:	eb71 0303 	sbcs.w	r3, r1, r3
 800f79c:	d201      	bcs.n	800f7a2 <mg_timer_expired+0x76>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e022      	b.n	800f7e8 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f7ac:	ebb0 0802 	subs.w	r8, r0, r2
 800f7b0:	eb61 0903 	sbc.w	r9, r1, r3
 800f7b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f7b8:	4542      	cmp	r2, r8
 800f7ba:	eb73 0309 	sbcs.w	r3, r3, r9
 800f7be:	d207      	bcs.n	800f7d0 <mg_timer_expired+0xa4>
 800f7c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f7c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f7c8:	1884      	adds	r4, r0, r2
 800f7ca:	eb41 0503 	adc.w	r5, r1, r3
 800f7ce:	e007      	b.n	800f7e0 <mg_timer_expired+0xb4>
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f7da:	1884      	adds	r4, r0, r2
 800f7dc:	eb41 0503 	adc.w	r5, r1, r3
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800f7e6:	2301      	movs	r3, #1
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3718      	adds	r7, #24
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f7f2:	4770      	bx	lr

0800f7f4 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800f7f4:	b590      	push	{r4, r7, lr}
 800f7f6:	b08b      	sub	sp, #44	@ 0x2c
 800f7f8:	af02      	add	r7, sp, #8
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	61fb      	str	r3, [r7, #28]
 800f806:	e054      	b.n	800f8b2 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f80e:	4313      	orrs	r3, r2
 800f810:	d10d      	bne.n	800f82e <mg_timer_poll+0x3a>
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	699b      	ldr	r3, [r3, #24]
 800f816:	f003 0302 	and.w	r3, r3, #2
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d007      	beq.n	800f82e <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800f826:	2b00      	cmp	r3, #0
 800f828:	d101      	bne.n	800f82e <mg_timer_poll+0x3a>
 800f82a:	2301      	movs	r3, #1
 800f82c:	e000      	b.n	800f830 <mg_timer_poll+0x3c>
 800f82e:	2300      	movs	r3, #0
 800f830:	76fb      	strb	r3, [r7, #27]
 800f832:	7efb      	ldrb	r3, [r7, #27]
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	f103 0410 	add.w	r4, r3, #16
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f84a:	e9cd 2300 	strd	r2, r3, [sp]
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	4620      	mov	r0, r4
 800f854:	f7ff ff6a 	bl	800f72c <mg_timer_expired>
 800f858:	4603      	mov	r3, r0
 800f85a:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f860:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800f862:	7efb      	ldrb	r3, [r7, #27]
 800f864:	f083 0301 	eor.w	r3, r3, #1
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d005      	beq.n	800f87a <mg_timer_poll+0x86>
 800f86e:	7ebb      	ldrb	r3, [r7, #26]
 800f870:	f083 0301 	eor.w	r3, r3, #1
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d118      	bne.n	800f8ac <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	699b      	ldr	r3, [r3, #24]
 800f87e:	f003 0301 	and.w	r3, r3, #1
 800f882:	2b00      	cmp	r3, #0
 800f884:	d105      	bne.n	800f892 <mg_timer_poll+0x9e>
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	699b      	ldr	r3, [r3, #24]
 800f88a:	f003 0304 	and.w	r3, r3, #4
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d105      	bne.n	800f89e <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	69db      	ldr	r3, [r3, #28]
 800f896:	69fa      	ldr	r2, [r7, #28]
 800f898:	6a12      	ldr	r2, [r2, #32]
 800f89a:	4610      	mov	r0, r2
 800f89c:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	699b      	ldr	r3, [r3, #24]
 800f8a2:	f043 0204 	orr.w	r2, r3, #4
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	619a      	str	r2, [r3, #24]
 800f8aa:	e000      	b.n	800f8ae <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800f8ac:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	61fb      	str	r3, [r7, #28]
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1a7      	bne.n	800f808 <mg_timer_poll+0x14>
  }
}
 800f8b8:	bf00      	nop
 800f8ba:	bf00      	nop
 800f8bc:	3724      	adds	r7, #36	@ 0x24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd90      	pop	{r4, r7, pc}
	...

0800f8c4 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b086      	sub	sp, #24
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 800f8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f900 <mg_tls_hexdump+0x3c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2b03      	cmp	r3, #3
 800f8d6:	dd0e      	ble.n	800f8f6 <mg_tls_hexdump+0x32>
 800f8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800f904 <mg_tls_hexdump+0x40>)
 800f8da:	f242 6262 	movw	r2, #9826	@ 0x2662
 800f8de:	490a      	ldr	r1, [pc, #40]	@ (800f908 <mg_tls_hexdump+0x44>)
 800f8e0:	2004      	movs	r0, #4
 800f8e2:	f7f8 fba1 	bl	8008028 <mg_log_prefix>
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4a07      	ldr	r2, [pc, #28]	@ (800f90c <mg_tls_hexdump+0x48>)
 800f8ee:	68f9      	ldr	r1, [r7, #12]
 800f8f0:	4807      	ldr	r0, [pc, #28]	@ (800f910 <mg_tls_hexdump+0x4c>)
 800f8f2:	f7f8 fbe9 	bl	80080c8 <mg_log>
}
 800f8f6:	bf00      	nop
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	24000240 	.word	0x24000240
 800f904:	0802c2e0 	.word	0x0802c2e0
 800f908:	08028ac4 	.word	0x08028ac4
 800f90c:	0800db99 	.word	0x0800db99
 800f910:	0802a558 	.word	0x0802a558

0800f914 <mg_der_to_tlv>:
  uint32_t len;
  uint8_t *value;
};

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 800f914:	b480      	push	{r7}
 800f916:	b087      	sub	sp, #28
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d802      	bhi.n	800f92c <mg_der_to_tlv+0x18>
    return -1;
 800f926:	f04f 33ff 	mov.w	r3, #4294967295
 800f92a:	e041      	b.n	800f9b0 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	781a      	ldrb	r2, [r3, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	3301      	adds	r3, #1
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	461a      	mov	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	1c9a      	adds	r2, r3, #2
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f94e:	d921      	bls.n	800f994 <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	3b80      	subs	r3, #128	@ 0x80
 800f956:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800f95e:	2300      	movs	r3, #0
 800f960:	617b      	str	r3, [r7, #20]
 800f962:	e00d      	b.n	800f980 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	021b      	lsls	r3, r3, #8
 800f96a:	697a      	ldr	r2, [r7, #20]
 800f96c:	3202      	adds	r2, #2
 800f96e:	68f9      	ldr	r1, [r7, #12]
 800f970:	440a      	add	r2, r1
 800f972:	7812      	ldrb	r2, [r2, #0]
 800f974:	431a      	orrs	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	3301      	adds	r3, #1
 800f97e:	617b      	str	r3, [r7, #20]
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	429a      	cmp	r2, r3
 800f986:	d3ed      	bcc.n	800f964 <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	3302      	adds	r3, #2
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	441a      	add	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	441a      	add	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6899      	ldr	r1, [r3, #8]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	440b      	add	r3, r1
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d202      	bcs.n	800f9ae <mg_der_to_tlv+0x9a>
    return -1;
 800f9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ac:	e000      	b.n	800f9b0 <mg_der_to_tlv+0x9c>
  }
  return 0;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	371c      	adds	r7, #28
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <mg_der_find>:

static int mg_der_find(uint8_t *der, size_t dersz, uint8_t *oid, size_t oidsz,
                       struct mg_der_tlv *tlv) {
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08c      	sub	sp, #48	@ 0x30
 800f9c0:	af02      	add	r7, sp, #8
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	603b      	str	r3, [r7, #0]
  uint8_t *p, *end;
  struct mg_der_tlv child = {0, 0, NULL};
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	743b      	strb	r3, [r7, #16]
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	617b      	str	r3, [r7, #20]
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	61bb      	str	r3, [r7, #24]
  if (mg_der_to_tlv(der, dersz, tlv) < 0) {
 800f9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9d8:	68b9      	ldr	r1, [r7, #8]
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	f7ff ff9a 	bl	800f914 <mg_der_to_tlv>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	da02      	bge.n	800f9ec <mg_der_find+0x30>
    return -1;                  // invalid DER
 800f9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ea:	e052      	b.n	800fa92 <mg_der_find+0xd6>
  } else if (tlv->type == 6) {  // found OID, check value
 800f9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b06      	cmp	r3, #6
 800f9f2:	d112      	bne.n	800fa1a <mg_der_find+0x5e>
    return (tlv->len == oidsz && memcmp(tlv->value, oid, oidsz) == 0);
 800f9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d10b      	bne.n	800fa16 <mg_der_find+0x5a>
 800f9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	6879      	ldr	r1, [r7, #4]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f015 f9fe 	bl	8024e08 <memcmp>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d101      	bne.n	800fa16 <mg_der_find+0x5a>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e03d      	b.n	800fa92 <mg_der_find+0xd6>
 800fa16:	2300      	movs	r3, #0
 800fa18:	e03b      	b.n	800fa92 <mg_der_find+0xd6>
  } else if ((tlv->type & 0x20) == 0) {
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f003 0320 	and.w	r3, r3, #32
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d101      	bne.n	800fa2a <mg_der_find+0x6e>
    return 0;  // Primitive, but not OID: not found
 800fa26:	2300      	movs	r3, #0
 800fa28:	e033      	b.n	800fa92 <mg_der_find+0xd6>
  }
  // Constructed object: scan children
  p = tlv->value;
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	627b      	str	r3, [r7, #36]	@ 0x24
  end = tlv->value + tlv->len;
 800fa30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	4413      	add	r3, r2
 800fa3a:	623b      	str	r3, [r7, #32]
  while (end > p) {
 800fa3c:	e024      	b.n	800fa88 <mg_der_find+0xcc>
    int r;
    mg_der_to_tlv(p, (size_t) (end - p), &child);
 800fa3e:	6a3a      	ldr	r2, [r7, #32]
 800fa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	4619      	mov	r1, r3
 800fa46:	f107 0310 	add.w	r3, r7, #16
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa4e:	f7ff ff61 	bl	800f914 <mg_der_to_tlv>
    r = mg_der_find(p, (size_t) (end - p), oid, oidsz, tlv);
 800fa52:	6a3a      	ldr	r2, [r7, #32]
 800fa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	4619      	mov	r1, r3
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa64:	f7ff ffaa 	bl	800f9bc <mg_der_find>
 800fa68:	61f8      	str	r0, [r7, #28]
    if (r < 0) return -1;  // error
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	da02      	bge.n	800fa76 <mg_der_find+0xba>
 800fa70:	f04f 33ff 	mov.w	r3, #4294967295
 800fa74:	e00d      	b.n	800fa92 <mg_der_find+0xd6>
    if (r > 0) return 1;   // found OID!
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	dd01      	ble.n	800fa80 <mg_der_find+0xc4>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e008      	b.n	800fa92 <mg_der_find+0xd6>
    p = child.value + child.len;
 800fa80:	69ba      	ldr	r2, [r7, #24]
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	4413      	add	r3, r2
 800fa86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (end > p) {
 800fa88:	6a3a      	ldr	r2, [r7, #32]
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d8d6      	bhi.n	800fa3e <mg_der_find+0x82>
  }
  return 0;  // not found
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3728      	adds	r7, #40	@ 0x28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 800fa9a:	b480      	push	{r7}
 800fa9c:	b083      	sub	sp, #12
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800faa6:	2b04      	cmp	r3, #4
 800faa8:	d914      	bls.n	800fad4 <mg_tls_got_record+0x3a>
         c->rtls.len >=
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fab2:	3203      	adds	r2, #3
 800fab4:	7812      	ldrb	r2, [r2, #0]
 800fab6:	0212      	lsls	r2, r2, #8
 800fab8:	b211      	sxth	r1, r2
 800faba:	687a      	ldr	r2, [r7, #4]
 800fabc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fabe:	3204      	adds	r2, #4
 800fac0:	7812      	ldrb	r2, [r2, #0]
 800fac2:	b212      	sxth	r2, r2
 800fac4:	430a      	orrs	r2, r1
 800fac6:	b212      	sxth	r2, r2
 800fac8:	b292      	uxth	r2, r2
 800faca:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800facc:	4293      	cmp	r3, r2
 800face:	d301      	bcc.n	800fad4 <mg_tls_got_record+0x3a>
 800fad0:	2301      	movs	r3, #1
 800fad2:	e000      	b.n	800fad6 <mg_tls_got_record+0x3c>
 800fad4:	2300      	movs	r3, #0
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	b2db      	uxtb	r3, r3
}
 800fadc:	4618      	mov	r0, r3
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	3368      	adds	r3, #104	@ 0x68
 800faf4:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3303      	adds	r3, #3
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	021b      	lsls	r3, r3, #8
 800fb00:	b21a      	sxth	r2, r3
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	3304      	adds	r3, #4
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	b21b      	sxth	r3, r3
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	b21b      	sxth	r3, r3
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	3305      	adds	r3, #5
 800fb14:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 800fb16:	897b      	ldrh	r3, [r7, #10]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7f7 fb93 	bl	8007248 <mg_iobuf_del>
}
 800fb22:	bf00      	nop
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fb3a:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	4413      	add	r3, r2
 800fb46:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	699b      	ldr	r3, [r3, #24]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d033      	beq.n	800fbb8 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	3301      	adds	r3, #1
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	041a      	lsls	r2, r3, #16
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	3302      	adds	r3, #2
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	021b      	lsls	r3, r3, #8
 800fb60:	4313      	orrs	r3, r2
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	3203      	adds	r2, #3
 800fb66:	7812      	ldrb	r2, [r2, #0]
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d904      	bls.n	800fb82 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 800fb78:	4911      	ldr	r1, [pc, #68]	@ (800fbc0 <mg_tls_drop_message+0x94>)
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7f2 ff68 	bl	8002a50 <mg_error>
    return;
 800fb80:	e01b      	b.n	800fbba <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	3320      	adds	r3, #32
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	6939      	ldr	r1, [r7, #16]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe fbf2 	bl	800e374 <mg_sha256_update>
  tls->recv_offset += len;
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	695a      	ldr	r2, [r3, #20]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	441a      	add	r2, r3
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	699a      	ldr	r2, [r3, #24]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	1ad2      	subs	r2, r2, r3
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	699b      	ldr	r3, [r3, #24]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d104      	bne.n	800fbba <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f7ff ff99 	bl	800fae8 <mg_tls_drop_record>
 800fbb6:	e000      	b.n	800fbba <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 800fbb8:	bf00      	nop
  }
}
 800fbba:	3718      	adds	r7, #24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	0802a560 	.word	0x0802a560

0800fbc4 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 800fbc4:	b590      	push	{r4, r7, lr}
 800fbc6:	b0d1      	sub	sp, #324	@ 0x144
 800fbc8:	af02      	add	r7, sp, #8
 800fbca:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800fbce:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 800fbd2:	6020      	str	r0, [r4, #0]
 800fbd4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800fbd8:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 800fbdc:	6001      	str	r1, [r0, #0]
 800fbde:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800fbe2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800fbe6:	600a      	str	r2, [r1, #0]
 800fbe8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fbec:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800fbf0:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 800fbf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fbf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fbfa:	6818      	ldr	r0, [r3, #0]
 800fbfc:	f7f0 fbd0 	bl	80003a0 <strlen>
 800fc00:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 800fc04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc12:	461a      	mov	r2, r3
 800fc14:	2100      	movs	r1, #0
 800fc16:	f015 f921 	bl	8024e5c <memset>
 800fc1a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc28:	705a      	strb	r2, [r3, #1]
 800fc2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fc2e:	b2da      	uxtb	r2, r3
 800fc30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc38:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 800fc3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00c      	beq.n	800fc5c <mg_tls_derive_secret+0x98>
 800fc42:	f107 0314 	add.w	r3, r7, #20
 800fc46:	3303      	adds	r3, #3
 800fc48:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fc4c:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 800fc50:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800fc54:	6809      	ldr	r1, [r1, #0]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f015 f8e6 	bl	8024e28 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 800fc5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fc60:	3303      	adds	r3, #3
 800fc62:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800fc66:	b2d1      	uxtb	r1, r2
 800fc68:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fc6c:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800fc70:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 800fc72:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00e      	beq.n	800fc98 <mg_tls_derive_secret+0xd4>
 800fc7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fc7e:	3304      	adds	r3, #4
 800fc80:	f107 0214 	add.w	r2, r7, #20
 800fc84:	18d0      	adds	r0, r2, r3
 800fc86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fc8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	f015 f8c8 	bl	8024e28 <memmove>
  packed[4 + labelsz + datasz] = 1;
 800fc98:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800fc9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fca0:	4413      	add	r3, r2
 800fca2:	3304      	adds	r3, #4
 800fca4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fca8:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800fcac:	2101      	movs	r1, #1
 800fcae:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 800fcb0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800fcb4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fcb8:	4413      	add	r3, r2
 800fcba:	3305      	adds	r3, #5
 800fcbc:	f107 0414 	add.w	r4, r7, #20
 800fcc0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fcc4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800fcc8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800fccc:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 800fcd0:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	4623      	mov	r3, r4
 800fcd8:	6812      	ldr	r2, [r2, #0]
 800fcda:	6809      	ldr	r1, [r1, #0]
 800fcdc:	f7fe fcbb 	bl	800e656 <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 800fce0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800fce4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800fce8:	4619      	mov	r1, r3
 800fcea:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 800fcee:	f015 f89b 	bl	8024e28 <memmove>
}
 800fcf2:	bf00      	nop
 800fcf4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd90      	pop	{r4, r7, pc}

0800fcfc <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b0cc      	sub	sp, #304	@ 0x130
 800fd00:	af04      	add	r7, sp, #16
 800fd02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fd06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fd0a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fd0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fd10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fd1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800fd1e:	2320      	movs	r3, #32
 800fd20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 800fd24:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800fd28:	2320      	movs	r3, #32
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	4b89      	ldr	r3, [pc, #548]	@ (800ff54 <mg_tls_generate_handshake_keys+0x258>)
 800fd2e:	2200      	movs	r2, #0
 800fd30:	2100      	movs	r1, #0
 800fd32:	f7fe fc90 	bl	800e656 <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 800fd36:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800fd3a:	2320      	movs	r3, #32
 800fd3c:	9302      	str	r3, [sp, #8]
 800fd3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd42:	9301      	str	r3, [sp, #4]
 800fd44:	2320      	movs	r3, #32
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	4b83      	ldr	r3, [pc, #524]	@ (800ff58 <mg_tls_generate_handshake_keys+0x25c>)
 800fd4a:	2220      	movs	r2, #32
 800fd4c:	4883      	ldr	r0, [pc, #524]	@ (800ff5c <mg_tls_generate_handshake_keys+0x260>)
 800fd4e:	f7ff ff39 	bl	800fbc4 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800fd52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd56:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
                 sizeof(pre_extract_secret), tls->x25519_sec,
 800fd5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd5e:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800fd60:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800fd64:	2220      	movs	r2, #32
 800fd66:	9200      	str	r2, [sp, #0]
 800fd68:	2220      	movs	r2, #32
 800fd6a:	f7fe fc74 	bl	800e656 <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 800fd6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd72:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800fd76:	2220      	movs	r2, #32
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4879      	ldr	r0, [pc, #484]	@ (800ff60 <mg_tls_generate_handshake_keys+0x264>)
 800fd7c:	f7ff fda2 	bl	800f8c4 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800fd80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd84:	f103 0120 	add.w	r1, r3, #32
 800fd88:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800fd8c:	2270      	movs	r2, #112	@ 0x70
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f015 f84a 	bl	8024e28 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 800fd94:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800fd98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe fb21 	bl	800e3e6 <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 800fda4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fda8:	2220      	movs	r2, #32
 800fdaa:	4619      	mov	r1, r3
 800fdac:	486d      	ldr	r0, [pc, #436]	@ (800ff64 <mg_tls_generate_handshake_keys+0x268>)
 800fdae:	f7ff fd89 	bl	800f8c4 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 800fdb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdb6:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fdba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800fdbe:	2320      	movs	r3, #32
 800fdc0:	9302      	str	r3, [sp, #8]
 800fdc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdc6:	9301      	str	r3, [sp, #4]
 800fdc8:	2320      	movs	r3, #32
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	4613      	mov	r3, r2
 800fdce:	2220      	movs	r2, #32
 800fdd0:	4865      	ldr	r0, [pc, #404]	@ (800ff68 <mg_tls_generate_handshake_keys+0x26c>)
 800fdd2:	f7ff fef7 	bl	800fbc4 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 800fdd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdda:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fdde:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800fde2:	2320      	movs	r3, #32
 800fde4:	9302      	str	r3, [sp, #8]
 800fde6:	f107 0308 	add.w	r3, r7, #8
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	2320      	movs	r3, #32
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	2220      	movs	r2, #32
 800fdf4:	485d      	ldr	r0, [pc, #372]	@ (800ff6c <mg_tls_generate_handshake_keys+0x270>)
 800fdf6:	f7ff fee5 	bl	800fbc4 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800fdfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdfe:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 800fe02:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fe06:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fe0a:	9202      	str	r2, [sp, #8]
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	2300      	movs	r3, #0
 800fe14:	2220      	movs	r2, #32
 800fe16:	4856      	ldr	r0, [pc, #344]	@ (800ff70 <mg_tls_generate_handshake_keys+0x274>)
 800fe18:	f7ff fed4 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800fe1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe20:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 800fe24:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fe28:	220c      	movs	r2, #12
 800fe2a:	9202      	str	r2, [sp, #8]
 800fe2c:	9301      	str	r3, [sp, #4]
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9300      	str	r3, [sp, #0]
 800fe32:	2300      	movs	r3, #0
 800fe34:	2220      	movs	r2, #32
 800fe36:	484f      	ldr	r0, [pc, #316]	@ (800ff74 <mg_tls_generate_handshake_keys+0x278>)
 800fe38:	f7ff fec4 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 800fe3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe40:	f503 7345 	add.w	r3, r3, #788	@ 0x314
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 800fe44:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fe48:	2220      	movs	r2, #32
 800fe4a:	9202      	str	r2, [sp, #8]
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	2300      	movs	r3, #0
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	2220      	movs	r2, #32
 800fe56:	4848      	ldr	r0, [pc, #288]	@ (800ff78 <mg_tls_generate_handshake_keys+0x27c>)
 800fe58:	f7ff feb4 	bl	800fbc4 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800fe5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe60:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 800fe64:	f107 0108 	add.w	r1, r7, #8
 800fe68:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fe6c:	9202      	str	r2, [sp, #8]
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	2300      	movs	r3, #0
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	2300      	movs	r3, #0
 800fe76:	2220      	movs	r2, #32
 800fe78:	483d      	ldr	r0, [pc, #244]	@ (800ff70 <mg_tls_generate_handshake_keys+0x274>)
 800fe7a:	f7ff fea3 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800fe7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe82:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 800fe86:	f107 0108 	add.w	r1, r7, #8
 800fe8a:	220c      	movs	r2, #12
 800fe8c:	9202      	str	r2, [sp, #8]
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	2300      	movs	r3, #0
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	2300      	movs	r3, #0
 800fe96:	2220      	movs	r2, #32
 800fe98:	4836      	ldr	r0, [pc, #216]	@ (800ff74 <mg_tls_generate_handshake_keys+0x278>)
 800fe9a:	f7ff fe93 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 800fe9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fea2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 800fea6:	f107 0108 	add.w	r1, r7, #8
 800feaa:	2220      	movs	r2, #32
 800feac:	9202      	str	r2, [sp, #8]
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	2300      	movs	r3, #0
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	2300      	movs	r3, #0
 800feb6:	2220      	movs	r2, #32
 800feb8:	482f      	ldr	r0, [pc, #188]	@ (800ff78 <mg_tls_generate_handshake_keys+0x27c>)
 800feba:	f7ff fe83 	bl	800fbc4 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 800febe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fec2:	2220      	movs	r2, #32
 800fec4:	4619      	mov	r1, r3
 800fec6:	482d      	ldr	r0, [pc, #180]	@ (800ff7c <mg_tls_generate_handshake_keys+0x280>)
 800fec8:	f7ff fcfc 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800fecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fed0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800fed4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fed8:	4619      	mov	r1, r3
 800feda:	4829      	ldr	r0, [pc, #164]	@ (800ff80 <mg_tls_generate_handshake_keys+0x284>)
 800fedc:	f7ff fcf2 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 800fee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fee4:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800fee8:	220c      	movs	r2, #12
 800feea:	4619      	mov	r1, r3
 800feec:	4825      	ldr	r0, [pc, #148]	@ (800ff84 <mg_tls_generate_handshake_keys+0x288>)
 800feee:	f7ff fce9 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 800fef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fef6:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800fefa:	2220      	movs	r2, #32
 800fefc:	4619      	mov	r1, r3
 800fefe:	4822      	ldr	r0, [pc, #136]	@ (800ff88 <mg_tls_generate_handshake_keys+0x28c>)
 800ff00:	f7ff fce0 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 800ff04:	f107 0308 	add.w	r3, r7, #8
 800ff08:	2220      	movs	r2, #32
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	481f      	ldr	r0, [pc, #124]	@ (800ff8c <mg_tls_generate_handshake_keys+0x290>)
 800ff0e:	f7ff fcd9 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 800ff12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff16:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800ff1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ff1e:	4619      	mov	r1, r3
 800ff20:	481b      	ldr	r0, [pc, #108]	@ (800ff90 <mg_tls_generate_handshake_keys+0x294>)
 800ff22:	f7ff fccf 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 800ff26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff2a:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800ff2e:	220c      	movs	r2, #12
 800ff30:	4619      	mov	r1, r3
 800ff32:	4818      	ldr	r0, [pc, #96]	@ (800ff94 <mg_tls_generate_handshake_keys+0x298>)
 800ff34:	f7ff fcc6 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 800ff38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff3c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ff40:	2220      	movs	r2, #32
 800ff42:	4619      	mov	r1, r3
 800ff44:	4814      	ldr	r0, [pc, #80]	@ (800ff98 <mg_tls_generate_handshake_keys+0x29c>)
 800ff46:	f7ff fcbd 	bl	800f8c4 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 800ff4a:	bf00      	nop
 800ff4c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	24000da8 	.word	0x24000da8
 800ff58:	24000248 	.word	0x24000248
 800ff5c:	0802a56c 	.word	0x0802a56c
 800ff60:	0802a57c 	.word	0x0802a57c
 800ff64:	0802a588 	.word	0x0802a588
 800ff68:	0802a594 	.word	0x0802a594
 800ff6c:	0802a5a8 	.word	0x0802a5a8
 800ff70:	0802a5bc 	.word	0x0802a5bc
 800ff74:	0802a5c8 	.word	0x0802a5c8
 800ff78:	0802a5d4 	.word	0x0802a5d4
 800ff7c:	0802a5e4 	.word	0x0802a5e4
 800ff80:	0802a5f4 	.word	0x0802a5f4
 800ff84:	0802a5fc 	.word	0x0802a5fc
 800ff88:	0802a604 	.word	0x0802a604
 800ff8c:	0802a610 	.word	0x0802a610
 800ff90:	0802a620 	.word	0x0802a620
 800ff94:	0802a628 	.word	0x0802a628
 800ff98:	0802a630 	.word	0x0802a630

0800ff9c <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b0cc      	sub	sp, #304	@ 0x130
 800ffa0:	af04      	add	r7, sp, #16
 800ffa2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffa6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ffaa:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800ffac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ffba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800ffbe:	2320      	movs	r3, #32
 800ffc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800ffc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffc8:	f103 0120 	add.w	r1, r3, #32
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	2270      	movs	r2, #112	@ 0x70
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f014 ff28 	bl	8024e28 <memmove>
  mg_sha256_final(hash, &sha256);
 800ffd8:	f107 0208 	add.w	r2, r7, #8
 800ffdc:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fe f9ff 	bl	800e3e6 <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 800ffe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffec:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fff0:	2320      	movs	r3, #32
 800fff2:	9302      	str	r3, [sp, #8]
 800fff4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	2320      	movs	r3, #32
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	4b64      	ldr	r3, [pc, #400]	@ (8010190 <mg_tls_generate_application_keys+0x1f4>)
 8010000:	2220      	movs	r2, #32
 8010002:	4864      	ldr	r0, [pc, #400]	@ (8010194 <mg_tls_generate_application_keys+0x1f8>)
 8010004:	f7ff fdde 	bl	800fbc4 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8010008:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 801000c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8010010:	2320      	movs	r3, #32
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	4b60      	ldr	r3, [pc, #384]	@ (8010198 <mg_tls_generate_application_keys+0x1fc>)
 8010016:	2220      	movs	r2, #32
 8010018:	f7fe fb1d 	bl	800e656 <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 801001c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8010020:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8010024:	2320      	movs	r3, #32
 8010026:	9302      	str	r3, [sp, #8]
 8010028:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	2320      	movs	r3, #32
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	4613      	mov	r3, r2
 8010034:	2220      	movs	r2, #32
 8010036:	4859      	ldr	r0, [pc, #356]	@ (801019c <mg_tls_generate_application_keys+0x200>)
 8010038:	f7ff fdc4 	bl	800fbc4 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 801003c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010040:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8010044:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8010048:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801004c:	9202      	str	r2, [sp, #8]
 801004e:	9301      	str	r3, [sp, #4]
 8010050:	2300      	movs	r3, #0
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	2300      	movs	r3, #0
 8010056:	2220      	movs	r2, #32
 8010058:	4851      	ldr	r0, [pc, #324]	@ (80101a0 <mg_tls_generate_application_keys+0x204>)
 801005a:	f7ff fdb3 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 801005e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010062:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8010066:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 801006a:	220c      	movs	r2, #12
 801006c:	9202      	str	r2, [sp, #8]
 801006e:	9301      	str	r3, [sp, #4]
 8010070:	2300      	movs	r3, #0
 8010072:	9300      	str	r3, [sp, #0]
 8010074:	2300      	movs	r3, #0
 8010076:	2220      	movs	r2, #32
 8010078:	484a      	ldr	r0, [pc, #296]	@ (80101a4 <mg_tls_generate_application_keys+0x208>)
 801007a:	f7ff fda3 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 801007e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8010082:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8010086:	2320      	movs	r3, #32
 8010088:	9302      	str	r3, [sp, #8]
 801008a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	2320      	movs	r3, #32
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	4613      	mov	r3, r2
 8010096:	2220      	movs	r2, #32
 8010098:	4843      	ldr	r0, [pc, #268]	@ (80101a8 <mg_tls_generate_application_keys+0x20c>)
 801009a:	f7ff fd93 	bl	800fbc4 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 801009e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80100a2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 80100a6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80100aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80100ae:	9202      	str	r2, [sp, #8]
 80100b0:	9301      	str	r3, [sp, #4]
 80100b2:	2300      	movs	r3, #0
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	2300      	movs	r3, #0
 80100b8:	2220      	movs	r2, #32
 80100ba:	4839      	ldr	r0, [pc, #228]	@ (80101a0 <mg_tls_generate_application_keys+0x204>)
 80100bc:	f7ff fd82 	bl	800fbc4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 80100c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80100c4:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 80100c8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80100cc:	220c      	movs	r2, #12
 80100ce:	9202      	str	r2, [sp, #8]
 80100d0:	9301      	str	r3, [sp, #4]
 80100d2:	2300      	movs	r3, #0
 80100d4:	9300      	str	r3, [sp, #0]
 80100d6:	2300      	movs	r3, #0
 80100d8:	2220      	movs	r2, #32
 80100da:	4832      	ldr	r0, [pc, #200]	@ (80101a4 <mg_tls_generate_application_keys+0x208>)
 80100dc:	f7ff fd72 	bl	800fbc4 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 80100e0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80100e4:	2220      	movs	r2, #32
 80100e6:	4619      	mov	r1, r3
 80100e8:	4830      	ldr	r0, [pc, #192]	@ (80101ac <mg_tls_generate_application_keys+0x210>)
 80100ea:	f7ff fbeb 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 80100ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80100f2:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80100f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80100fa:	4619      	mov	r1, r3
 80100fc:	482c      	ldr	r0, [pc, #176]	@ (80101b0 <mg_tls_generate_application_keys+0x214>)
 80100fe:	f7ff fbe1 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8010102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010106:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 801010a:	220c      	movs	r2, #12
 801010c:	4619      	mov	r1, r3
 801010e:	4829      	ldr	r0, [pc, #164]	@ (80101b4 <mg_tls_generate_application_keys+0x218>)
 8010110:	f7ff fbd8 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8010114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010118:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801011c:	2220      	movs	r2, #32
 801011e:	4619      	mov	r1, r3
 8010120:	4825      	ldr	r0, [pc, #148]	@ (80101b8 <mg_tls_generate_application_keys+0x21c>)
 8010122:	f7ff fbcf 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8010126:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801012a:	2220      	movs	r2, #32
 801012c:	4619      	mov	r1, r3
 801012e:	4823      	ldr	r0, [pc, #140]	@ (80101bc <mg_tls_generate_application_keys+0x220>)
 8010130:	f7ff fbc8 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8010134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010138:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 801013c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8010140:	4619      	mov	r1, r3
 8010142:	481f      	ldr	r0, [pc, #124]	@ (80101c0 <mg_tls_generate_application_keys+0x224>)
 8010144:	f7ff fbbe 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8010148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801014c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8010150:	220c      	movs	r2, #12
 8010152:	4619      	mov	r1, r3
 8010154:	481b      	ldr	r0, [pc, #108]	@ (80101c4 <mg_tls_generate_application_keys+0x228>)
 8010156:	f7ff fbb5 	bl	800f8c4 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 801015a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801015e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8010162:	2220      	movs	r2, #32
 8010164:	4619      	mov	r1, r3
 8010166:	4818      	ldr	r0, [pc, #96]	@ (80101c8 <mg_tls_generate_application_keys+0x22c>)
 8010168:	f7ff fbac 	bl	800f8c4 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 801016c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010170:	2200      	movs	r2, #0
 8010172:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 8010176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801017a:	f8d3 22c4 	ldr.w	r2, [r3, #708]	@ 0x2c4
 801017e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010182:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8010186:	bf00      	nop
 8010188:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	24000248 	.word	0x24000248
 8010194:	0802a56c 	.word	0x0802a56c
 8010198:	24000da8 	.word	0x24000da8
 801019c:	0802a63c 	.word	0x0802a63c
 80101a0:	0802a5bc 	.word	0x0802a5bc
 80101a4:	0802a5c8 	.word	0x0802a5c8
 80101a8:	0802a650 	.word	0x0802a650
 80101ac:	0802a664 	.word	0x0802a664
 80101b0:	0802a5f4 	.word	0x0802a5f4
 80101b4:	0802a5fc 	.word	0x0802a5fc
 80101b8:	0802a604 	.word	0x0802a604
 80101bc:	0802a674 	.word	0x0802a674
 80101c0:	0802a620 	.word	0x0802a620
 80101c4:	0802a628 	.word	0x0802a628
 80101c8:	0802a630 	.word	0x0802a630

080101cc <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b09a      	sub	sp, #104	@ 0x68
 80101d0:	af04      	add	r7, sp, #16
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80101e0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 80101e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101e4:	3304      	adds	r3, #4
 80101e6:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3311      	adds	r3, #17
 80101ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80101ee:	2317      	movs	r3, #23
 80101f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80101f4:	2303      	movs	r3, #3
 80101f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80101fa:	2303      	movs	r3, #3
 80101fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8010200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010202:	0a1b      	lsrs	r3, r3, #8
 8010204:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8010206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 801020a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801020c:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801020e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8010212:	2317      	movs	r3, #23
 8010214:	773b      	strb	r3, [r7, #28]
 8010216:	2303      	movs	r3, #3
 8010218:	777b      	strb	r3, [r7, #29]
 801021a:	2303      	movs	r3, #3
 801021c:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 801021e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010220:	0a1b      	lsrs	r3, r3, #8
 8010222:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8010224:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8010226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010228:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801022a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010234:	f003 0302 	and.w	r3, r3, #2
 8010238:	b2db      	uxtb	r3, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <mg_tls_encrypt+0x7a>
 801023e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010240:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010244:	e002      	b.n	801024c <mg_tls_encrypt+0x80>
 8010246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801024c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010254:	f003 0302 	and.w	r3, r3, #2
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <mg_tls_encrypt+0x9a>
 801025e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010260:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8010264:	e002      	b.n	801026c <mg_tls_encrypt+0xa0>
 8010266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010268:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  uint8_t *key =
 801026c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010274:	f003 0302 	and.w	r3, r3, #2
 8010278:	b2db      	uxtb	r3, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	d003      	beq.n	8010286 <mg_tls_encrypt+0xba>
 801027e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010280:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8010284:	e002      	b.n	801028c <mg_tls_encrypt+0xc0>
 8010286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010288:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  uint8_t *iv =
 801028c:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 801028e:	f107 0310 	add.w	r3, r7, #16
 8010292:	220c      	movs	r2, #12
 8010294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010296:	4618      	mov	r0, r3
 8010298:	f014 fdc6 	bl	8024e28 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 801029c:	7e3a      	ldrb	r2, [r7, #24]
 801029e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102a0:	0e1b      	lsrs	r3, r3, #24
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	4053      	eors	r3, r2
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80102aa:	7e7a      	ldrb	r2, [r7, #25]
 80102ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102ae:	0c1b      	lsrs	r3, r3, #16
 80102b0:	b2db      	uxtb	r3, r3
 80102b2:	4053      	eors	r3, r2
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 80102b8:	7eba      	ldrb	r2, [r7, #26]
 80102ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102bc:	0a1b      	lsrs	r3, r3, #8
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	4053      	eors	r3, r2
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 80102c6:	7efa      	ldrb	r2, [r7, #27]
 80102c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	4053      	eors	r3, r2
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 80102d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102d4:	6899      	ldr	r1, [r3, #8]
 80102d6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80102da:	2305      	movs	r3, #5
 80102dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80102de:	f7f6 ff61 	bl	80071a4 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 80102e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102e4:	689a      	ldr	r2, [r3, #8]
 80102e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102e8:	4413      	add	r3, r2
 80102ea:	4619      	mov	r1, r3
 80102ec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80102ee:	f7f6 fecd 	bl	800708c <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 80102f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	4413      	add	r3, r2
 80102fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 80102fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010304:	6899      	ldr	r1, [r3, #8]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	440b      	add	r3, r1
 801030a:	3301      	adds	r3, #1
 801030c:	4413      	add	r3, r2
 801030e:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	68b9      	ldr	r1, [r7, #8]
 8010314:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010316:	f014 fd87 	bl	8024e28 <memmove>
  outmsg[msgsz] = msgtype;
 801031a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4413      	add	r3, r2
 8010320:	78fa      	ldrb	r2, [r7, #3]
 8010322:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8010324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010328:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 801032a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801032c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8010330:	4619      	mov	r1, r3
 8010332:	2001      	movs	r0, #1
 8010334:	f013 fae2 	bl	80238fc <calloc>
 8010338:	4603      	mov	r3, r0
 801033a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 801033c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033e:	2b00      	cmp	r3, #0
 8010340:	d104      	bne.n	801034c <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8010342:	491f      	ldr	r1, [pc, #124]	@ (80103c0 <mg_tls_encrypt+0x1f4>)
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7f2 fb83 	bl	8002a50 <mg_error>
 801034a:	e035      	b.n	80103b8 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3301      	adds	r3, #1
 8010350:	f107 011c 	add.w	r1, r7, #28
 8010354:	f107 0210 	add.w	r2, r7, #16
 8010358:	9302      	str	r3, [sp, #8]
 801035a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801035c:	9301      	str	r3, [sp, #4]
 801035e:	2305      	movs	r3, #5
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	460b      	mov	r3, r1
 8010364:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010366:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010368:	f004 f89d 	bl	80144a6 <mg_chacha20_poly1305_encrypt>
 801036c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 801036e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010370:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010372:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010374:	f014 fd58 	bl	8024e28 <memmove>
      free(enc);
 8010378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801037a:	f013 fae3 	bl	8023944 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010384:	f003 0302 	and.w	r3, r3, #2
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	d007      	beq.n	801039e <mg_tls_encrypt+0x1d2>
 801038e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010394:	1c5a      	adds	r2, r3, #1
 8010396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010398:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 801039c:	e006      	b.n	80103ac <mg_tls_encrypt+0x1e0>
 801039e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  wio->len += encsz;
 80103ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103ae:	689a      	ldr	r2, [r3, #8]
 80103b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103b2:	441a      	add	r2, r3
 80103b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103b6:	609a      	str	r2, [r3, #8]
}
 80103b8:	3758      	adds	r7, #88	@ 0x58
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	0802a684 	.word	0x0802a684

080103c4 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b092      	sub	sp, #72	@ 0x48
 80103c8:	af02      	add	r7, sp, #8
 80103ca:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80103d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	3368      	adds	r3, #104	@ 0x68
 80103d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80103e0:	f003 0302 	and.w	r3, r3, #2
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d003      	beq.n	80103f2 <mg_tls_recv_record+0x2e>
 80103ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80103f0:	e002      	b.n	80103f8 <mg_tls_recv_record+0x34>
 80103f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103f8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010400:	f003 0302 	and.w	r3, r3, #2
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b00      	cmp	r3, #0
 8010408:	d003      	beq.n	8010412 <mg_tls_recv_record+0x4e>
 801040a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801040c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8010410:	e002      	b.n	8010418 <mg_tls_recv_record+0x54>
 8010412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010414:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  uint8_t *key =
 8010418:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010420:	f003 0302 	and.w	r3, r3, #2
 8010424:	b2db      	uxtb	r3, r3
 8010426:	2b00      	cmp	r3, #0
 8010428:	d003      	beq.n	8010432 <mg_tls_recv_record+0x6e>
 801042a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801042c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8010430:	e002      	b.n	8010438 <mg_tls_recv_record+0x74>
 8010432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010434:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  uint8_t *iv =
 8010438:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 801043a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801043c:	699b      	ldr	r3, [r3, #24]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8010442:	2300      	movs	r3, #0
 8010444:	e0bc      	b.n	80105c0 <mg_tls_recv_record+0x1fc>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f7ff fb27 	bl	800fa9a <mg_tls_got_record>
 801044c:	4603      	mov	r3, r0
 801044e:	f083 0301 	eor.w	r3, r3, #1
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8010458:	f06f 0301 	mvn.w	r3, #1
 801045c:	e0b0      	b.n	80105c0 <mg_tls_recv_record+0x1fc>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 801045e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	2b17      	cmp	r3, #23
 8010466:	d026      	beq.n	80104b6 <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8010468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b14      	cmp	r3, #20
 8010470:	d103      	bne.n	801047a <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff fb38 	bl	800fae8 <mg_tls_drop_record>
 8010478:	e7e5      	b.n	8010446 <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 801047a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b15      	cmp	r3, #21
 8010482:	d111      	bne.n	80104a8 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8010484:	4b50      	ldr	r3, [pc, #320]	@ (80105c8 <mg_tls_recv_record+0x204>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	2b01      	cmp	r3, #1
 801048a:	dd09      	ble.n	80104a0 <mg_tls_recv_record+0xdc>
 801048c:	4b4f      	ldr	r3, [pc, #316]	@ (80105cc <mg_tls_recv_record+0x208>)
 801048e:	f242 729d 	movw	r2, #10141	@ 0x279d
 8010492:	494f      	ldr	r1, [pc, #316]	@ (80105d0 <mg_tls_recv_record+0x20c>)
 8010494:	2002      	movs	r0, #2
 8010496:	f7f7 fdc7 	bl	8008028 <mg_log_prefix>
 801049a:	484e      	ldr	r0, [pc, #312]	@ (80105d4 <mg_tls_recv_record+0x210>)
 801049c:	f7f7 fe14 	bl	80080c8 <mg_log>
      mg_tls_drop_record(c);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7ff fb21 	bl	800fae8 <mg_tls_drop_record>
 80104a6:	e7ce      	b.n	8010446 <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 80104a8:	494b      	ldr	r1, [pc, #300]	@ (80105d8 <mg_tls_recv_record+0x214>)
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f7f2 fad0 	bl	8002a50 <mg_error>
      return -1;
 80104b0:	f04f 33ff 	mov.w	r3, #4294967295
 80104b4:	e084      	b.n	80105c0 <mg_tls_recv_record+0x1fc>
      break;
 80104b6:	bf00      	nop

#if !CHACHA20
  mg_gcm_initialize();
#endif

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80104b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	3303      	adds	r3, #3
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	021b      	lsls	r3, r3, #8
 80104c2:	b21a      	sxth	r2, r3
 80104c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3304      	adds	r3, #4
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	b21b      	sxth	r3, r3
 80104ce:	4313      	orrs	r3, r2
 80104d0:	b21b      	sxth	r3, r3
 80104d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 80104d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	3305      	adds	r3, #5
 80104da:	627b      	str	r3, [r7, #36]	@ 0x24
  memmove(nonce, iv, sizeof(nonce));
 80104dc:	f107 030c 	add.w	r3, r7, #12
 80104e0:	220c      	movs	r2, #12
 80104e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104e4:	4618      	mov	r0, r3
 80104e6:	f014 fc9f 	bl	8024e28 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80104ea:	7d3a      	ldrb	r2, [r7, #20]
 80104ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ee:	0e1b      	lsrs	r3, r3, #24
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	4053      	eors	r3, r2
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80104f8:	7d7a      	ldrb	r2, [r7, #21]
 80104fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104fc:	0c1b      	lsrs	r3, r3, #16
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	4053      	eors	r3, r2
 8010502:	b2db      	uxtb	r3, r3
 8010504:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8010506:	7dba      	ldrb	r2, [r7, #22]
 8010508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801050a:	0a1b      	lsrs	r3, r3, #8
 801050c:	b2db      	uxtb	r3, r3
 801050e:	4053      	eors	r3, r2
 8010510:	b2db      	uxtb	r3, r3
 8010512:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8010514:	7dfa      	ldrb	r2, [r7, #23]
 8010516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010518:	b2db      	uxtb	r3, r3
 801051a:	4053      	eors	r3, r2
 801051c:	b2db      	uxtb	r3, r3
 801051e:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8010520:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010522:	4619      	mov	r1, r3
 8010524:	2001      	movs	r0, #1
 8010526:	f013 f9e9 	bl	80238fc <calloc>
 801052a:	4603      	mov	r3, r0
 801052c:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 801052e:	6a3b      	ldr	r3, [r7, #32]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d106      	bne.n	8010542 <mg_tls_recv_record+0x17e>
      mg_error(c, "TLS OOM");
 8010534:	4929      	ldr	r1, [pc, #164]	@ (80105dc <mg_tls_recv_record+0x218>)
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7f2 fa8a 	bl	8002a50 <mg_error>
      return -1;
 801053c:	f04f 33ff 	mov.w	r3, #4294967295
 8010540:	e03e      	b.n	80105c0 <mg_tls_recv_record+0x1fc>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8010542:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010544:	f107 020c 	add.w	r2, r7, #12
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801054e:	6a38      	ldr	r0, [r7, #32]
 8010550:	f003 ffe1 	bl	8014516 <mg_chacha20_poly1305_decrypt>
 8010554:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 8010556:	69fa      	ldr	r2, [r7, #28]
 8010558:	6a39      	ldr	r1, [r7, #32]
 801055a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801055c:	f014 fc64 	bl	8024e28 <memmove>
    free(dec);
 8010560:	6a38      	ldr	r0, [r7, #32]
 8010562:	f013 f9ef 	bl	8023944 <free>
    mg_error(c, "wrong size");
    return -1;
  }
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif
  r = msgsz - 16 - 1;
 8010566:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010568:	3b11      	subs	r3, #17
 801056a:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 801056c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801056e:	3b11      	subs	r3, #17
 8010570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010572:	4413      	add	r3, r2
 8010574:	781a      	ldrb	r2, [r3, #0]
 8010576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010578:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 801057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801057e:	6812      	ldr	r2, [r2, #0]
 8010580:	1a9a      	subs	r2, r3, r2
 8010582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010584:	615a      	str	r2, [r3, #20]
  tls->recv_len = msgsz - 16 - 1;
 8010586:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010588:	3b11      	subs	r3, #17
 801058a:	461a      	mov	r2, r3
 801058c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801058e:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010596:	f003 0302 	and.w	r3, r3, #2
 801059a:	b2db      	uxtb	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d007      	beq.n	80105b0 <mg_tls_recv_record+0x1ec>
 80105a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80105a6:	1c5a      	adds	r2, r3, #1
 80105a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105aa:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 80105ae:	e006      	b.n	80105be <mg_tls_recv_record+0x1fa>
 80105b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80105b6:	1c5a      	adds	r2, r3, #1
 80105b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105ba:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  return r;
 80105be:	69bb      	ldr	r3, [r7, #24]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3740      	adds	r7, #64	@ 0x40
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	24000240 	.word	0x24000240
 80105cc:	0802c2f0 	.word	0x0802c2f0
 80105d0:	08028ac4 	.word	0x08028ac4
 80105d4:	0802a68c 	.word	0x0802a68c
 80105d8:	0802a6a8 	.word	0x0802a6a8
 80105dc:	0802a684 	.word	0x0802a684

080105e0 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 80105e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105e2:	b0d5      	sub	sp, #340	@ 0x154
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80105ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80105ee:	6018      	str	r0, [r3, #0]
 80105f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80105f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80105f8:	6019      	str	r1, [r3, #0]
 80105fa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80105fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010602:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010604:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010608:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010612:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 8010616:	4b41      	ldr	r3, [pc, #260]	@ (801071c <mg_tls_calc_cert_verify_hash+0x13c>)
 8010618:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 801061c:	461d      	mov	r5, r3
 801061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 801062a:	4b3d      	ldr	r3, [pc, #244]	@ (8010720 <mg_tls_calc_cert_verify_hash+0x140>)
 801062c:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8010630:	461d      	mov	r5, r3
 8010632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801063a:	682b      	ldr	r3, [r5, #0]
 801063c:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 801063e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010642:	2240      	movs	r2, #64	@ 0x40
 8010644:	2120      	movs	r1, #32
 8010646:	4618      	mov	r0, r3
 8010648:	f014 fc08 	bl	8024e5c <memset>
  if (is_client) {
 801064c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010650:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d018      	beq.n	801068c <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 801065a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801065e:	3340      	adds	r3, #64	@ 0x40
 8010660:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8010664:	469c      	mov	ip, r3
 8010666:	f104 0e20 	add.w	lr, r4, #32
 801066a:	4665      	mov	r5, ip
 801066c:	4626      	mov	r6, r4
 801066e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010670:	6028      	str	r0, [r5, #0]
 8010672:	6069      	str	r1, [r5, #4]
 8010674:	60aa      	str	r2, [r5, #8]
 8010676:	60eb      	str	r3, [r5, #12]
 8010678:	3410      	adds	r4, #16
 801067a:	f10c 0c10 	add.w	ip, ip, #16
 801067e:	4574      	cmp	r4, lr
 8010680:	d1f3      	bne.n	801066a <mg_tls_calc_cert_verify_hash+0x8a>
 8010682:	4662      	mov	r2, ip
 8010684:	4623      	mov	r3, r4
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	8013      	strh	r3, [r2, #0]
 801068a:	e017      	b.n	80106bc <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 801068c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010690:	3340      	adds	r3, #64	@ 0x40
 8010692:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8010696:	469c      	mov	ip, r3
 8010698:	f104 0e20 	add.w	lr, r4, #32
 801069c:	4665      	mov	r5, ip
 801069e:	4626      	mov	r6, r4
 80106a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80106a2:	6028      	str	r0, [r5, #0]
 80106a4:	6069      	str	r1, [r5, #4]
 80106a6:	60aa      	str	r2, [r5, #8]
 80106a8:	60eb      	str	r3, [r5, #12]
 80106aa:	3410      	adds	r4, #16
 80106ac:	f10c 0c10 	add.w	ip, ip, #16
 80106b0:	4574      	cmp	r4, lr
 80106b2:	d1f3      	bne.n	801069c <mg_tls_calc_cert_verify_hash+0xbc>
 80106b4:	4662      	mov	r2, ip
 80106b6:	4623      	mov	r3, r4
 80106b8:	881b      	ldrh	r3, [r3, #0]
 80106ba:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80106bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80106c0:	f103 0120 	add.w	r1, r3, #32
 80106c4:	f107 0310 	add.w	r3, r7, #16
 80106c8:	2270      	movs	r2, #112	@ 0x70
 80106ca:	4618      	mov	r0, r3
 80106cc:	f014 fbac 	bl	8024e28 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 80106d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80106d4:	3362      	adds	r3, #98	@ 0x62
 80106d6:	f107 0210 	add.w	r2, r7, #16
 80106da:	4611      	mov	r1, r2
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fd fe82 	bl	800e3e6 <mg_sha256_final>

  mg_sha256_init(&sha256);
 80106e2:	f107 0310 	add.w	r3, r7, #16
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fd fc00 	bl	800deec <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 80106ec:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80106f0:	f107 0310 	add.w	r3, r7, #16
 80106f4:	2282      	movs	r2, #130	@ 0x82
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fd fe3c 	bl	800e374 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 80106fc:	f107 0210 	add.w	r2, r7, #16
 8010700:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010704:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8010708:	4611      	mov	r1, r2
 801070a:	6818      	ldr	r0, [r3, #0]
 801070c:	f7fd fe6b 	bl	800e3e6 <mg_sha256_final>
}
 8010710:	bf00      	nop
 8010712:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8010716:	46bd      	mov	sp, r7
 8010718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801071a:	bf00      	nop
 801071c:	0802a6bc 	.word	0x0802a6bc
 8010720:	0802a6e0 	.word	0x0802a6e0

08010724 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8010724:	b580      	push	{r7, lr}
 8010726:	b08c      	sub	sp, #48	@ 0x30
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010732:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	3368      	adds	r3, #104	@ 0x68
 8010738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff f9ad 	bl	800fa9a <mg_tls_got_record>
 8010740:	4603      	mov	r3, r0
 8010742:	f083 0301 	eor.w	r3, r3, #1
 8010746:	b2db      	uxtb	r3, r3
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 801074c:	f06f 0301 	mvn.w	r3, #1
 8010750:	e14b      	b.n	80109ea <mg_tls_server_recv_hello+0x2c6>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 8010752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	2b16      	cmp	r3, #22
 801075a:	d105      	bne.n	8010768 <mg_tls_server_recv_hello+0x44>
 801075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3305      	adds	r3, #5
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d006      	beq.n	8010776 <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8010768:	49a2      	ldr	r1, [pc, #648]	@ (80109f4 <mg_tls_server_recv_hello+0x2d0>)
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f7f2 f970 	bl	8002a50 <mg_error>
    return -1;
 8010770:	f04f 33ff 	mov.w	r3, #4294967295
 8010774:	e139      	b.n	80109ea <mg_tls_server_recv_hello+0x2c6>
  }
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8010776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	3303      	adds	r3, #3
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	021b      	lsls	r3, r3, #8
 8010780:	b21a      	sxth	r2, r3
 8010782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	3304      	adds	r3, #4
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	b21b      	sxth	r3, r3
 801078c:	4313      	orrs	r3, r2
 801078e:	b21b      	sxth	r3, r3
 8010790:	847b      	strh	r3, [r7, #34]	@ 0x22
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8010792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010794:	f103 0020 	add.w	r0, r3, #32
 8010798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3305      	adds	r3, #5
 801079e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80107a0:	4619      	mov	r1, r3
 80107a2:	f7fd fde7 	bl	800e374 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80107a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a8:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80107ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	330b      	adds	r3, #11
 80107b2:	2220      	movs	r2, #32
 80107b4:	4619      	mov	r1, r3
 80107b6:	f014 fb37 	bl	8024e28 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80107ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80107c2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80107c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80107ca:	2b20      	cmp	r3, #32
 80107cc:	d10b      	bne.n	80107e6 <mg_tls_server_recv_hello+0xc2>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 80107ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d0:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80107d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	332c      	adds	r3, #44	@ 0x2c
 80107da:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80107de:	4619      	mov	r1, r3
 80107e0:	f014 fb22 	bl	8024e28 <memmove>
 80107e4:	e011      	b.n	801080a <mg_tls_server_recv_hello+0xe6>
  } else if (session_id_len != 0) {
 80107e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00d      	beq.n	801080a <mg_tls_server_recv_hello+0xe6>
    MG_INFO(("bad session id len"));
 80107ee:	4b82      	ldr	r3, [pc, #520]	@ (80109f8 <mg_tls_server_recv_hello+0x2d4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	dd09      	ble.n	801080a <mg_tls_server_recv_hello+0xe6>
 80107f6:	4b81      	ldr	r3, [pc, #516]	@ (80109fc <mg_tls_server_recv_hello+0x2d8>)
 80107f8:	f242 72fd 	movw	r2, #10237	@ 0x27fd
 80107fc:	4980      	ldr	r1, [pc, #512]	@ (8010a00 <mg_tls_server_recv_hello+0x2dc>)
 80107fe:	2002      	movs	r0, #2
 8010800:	f7f7 fc12 	bl	8008028 <mg_log_prefix>
 8010804:	487f      	ldr	r0, [pc, #508]	@ (8010a04 <mg_tls_server_recv_hello+0x2e0>)
 8010806:	f7f7 fc5f 	bl	80080c8 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 801080a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010812:	332c      	adds	r3, #44	@ 0x2c
 8010814:	4413      	add	r3, r2
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	021b      	lsls	r3, r3, #8
 801081a:	b21a      	sxth	r2, r3
 801081c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081e:	6819      	ldr	r1, [r3, #0]
 8010820:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010824:	332d      	adds	r3, #45	@ 0x2d
 8010826:	440b      	add	r3, r1
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	b21b      	sxth	r3, r3
 801082c:	4313      	orrs	r3, r2
 801082e:	b21b      	sxth	r3, r3
 8010830:	83fb      	strh	r3, [r7, #30]
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 8010832:	8bfa      	ldrh	r2, [r7, #30]
 8010834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010836:	6899      	ldr	r1, [r3, #8]
 8010838:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801083c:	1acb      	subs	r3, r1, r3
 801083e:	3b2e      	subs	r3, #46	@ 0x2e
 8010840:	429a      	cmp	r2, r3
 8010842:	f200 80c5 	bhi.w	80109d0 <mg_tls_server_recv_hello+0x2ac>
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8010846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 801084e:	8bfb      	ldrh	r3, [r7, #30]
 8010850:	440b      	add	r3, r1
 8010852:	3330      	adds	r3, #48	@ 0x30
 8010854:	4413      	add	r3, r2
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	021b      	lsls	r3, r3, #8
 801085a:	b21a      	sxth	r2, r3
 801085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801085e:	6819      	ldr	r1, [r3, #0]
 8010860:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8010864:	8bfb      	ldrh	r3, [r7, #30]
 8010866:	4403      	add	r3, r0
 8010868:	3331      	adds	r3, #49	@ 0x31
 801086a:	440b      	add	r3, r1
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	b21b      	sxth	r3, r3
 8010870:	4313      	orrs	r3, r2
 8010872:	b21b      	sxth	r3, r3
 8010874:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 8010876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 801087e:	8bfb      	ldrh	r3, [r7, #30]
 8010880:	440b      	add	r3, r1
 8010882:	3332      	adds	r3, #50	@ 0x32
 8010884:	4413      	add	r3, r2
 8010886:	61bb      	str	r3, [r7, #24]
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 8010888:	8bba      	ldrh	r2, [r7, #28]
 801088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801088c:	6899      	ldr	r1, [r3, #8]
 801088e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010892:	1ac9      	subs	r1, r1, r3
 8010894:	8bfb      	ldrh	r3, [r7, #30]
 8010896:	1acb      	subs	r3, r1, r3
 8010898:	3b32      	subs	r3, #50	@ 0x32
 801089a:	429a      	cmp	r2, r3
 801089c:	f200 809a 	bhi.w	80109d4 <mg_tls_server_recv_hello+0x2b0>
  for (j = 0; j < ext_len;) {
 80108a0:	2300      	movs	r3, #0
 80108a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80108a4:	e08e      	b.n	80109c4 <mg_tls_server_recv_hello+0x2a0>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80108a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108a8:	3302      	adds	r3, #2
 80108aa:	69ba      	ldr	r2, [r7, #24]
 80108ac:	4413      	add	r3, r2
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	021b      	lsls	r3, r3, #8
 80108b2:	b21a      	sxth	r2, r3
 80108b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108b6:	3303      	adds	r3, #3
 80108b8:	69b9      	ldr	r1, [r7, #24]
 80108ba:	440b      	add	r3, r1
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	b21b      	sxth	r3, r3
 80108c0:	4313      	orrs	r3, r2
 80108c2:	b21b      	sxth	r3, r3
 80108c4:	82fb      	strh	r3, [r7, #22]
    if (ext[j] != 0x00 ||
 80108c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108c8:	69ba      	ldr	r2, [r7, #24]
 80108ca:	4413      	add	r3, r2
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <mg_tls_server_recv_hello+0x1bc>
        ext[j + 1] != 0x33) {  // not a key share extension, ignore
 80108d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108d4:	3301      	adds	r3, #1
 80108d6:	69ba      	ldr	r2, [r7, #24]
 80108d8:	4413      	add	r3, r2
 80108da:	781b      	ldrb	r3, [r3, #0]
    if (ext[j] != 0x00 ||
 80108dc:	2b33      	cmp	r3, #51	@ 0x33
 80108de:	d006      	beq.n	80108ee <mg_tls_server_recv_hello+0x1ca>
      j += (uint16_t) (n + 4);
 80108e0:	8afa      	ldrh	r2, [r7, #22]
 80108e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108e4:	4413      	add	r3, r2
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	3304      	adds	r3, #4
 80108ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 80108ec:	e06a      	b.n	80109c4 <mg_tls_server_recv_hello+0x2a0>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 80108ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108f0:	3304      	adds	r3, #4
 80108f2:	69ba      	ldr	r2, [r7, #24]
 80108f4:	4413      	add	r3, r2
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	021b      	lsls	r3, r3, #8
 80108fa:	b21a      	sxth	r2, r3
 80108fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108fe:	3305      	adds	r3, #5
 8010900:	69b9      	ldr	r1, [r7, #24]
 8010902:	440b      	add	r3, r1
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	b21b      	sxth	r3, r3
 8010908:	4313      	orrs	r3, r2
 801090a:	b21b      	sxth	r3, r3
 801090c:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 801090e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010910:	3306      	adds	r3, #6
 8010912:	69ba      	ldr	r2, [r7, #24]
 8010914:	4413      	add	r3, r2
 8010916:	613b      	str	r3, [r7, #16]
    if (key_exchange_len >
 8010918:	8aba      	ldrh	r2, [r7, #20]
        rio->len - (uint16_t) ((size_t) key_exchange - (size_t) rio->buf) - 2)
 801091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	6939      	ldr	r1, [r7, #16]
 8010920:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010922:	6800      	ldr	r0, [r0, #0]
 8010924:	1a09      	subs	r1, r1, r0
 8010926:	b289      	uxth	r1, r1
 8010928:	1a5b      	subs	r3, r3, r1
 801092a:	3b02      	subs	r3, #2
    if (key_exchange_len >
 801092c:	429a      	cmp	r2, r3
 801092e:	d853      	bhi.n	80109d8 <mg_tls_server_recv_hello+0x2b4>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8010930:	2300      	movs	r3, #0
 8010932:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010934:	e03c      	b.n	80109b0 <mg_tls_server_recv_hello+0x28c>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8010936:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010938:	3302      	adds	r3, #2
 801093a:	693a      	ldr	r2, [r7, #16]
 801093c:	4413      	add	r3, r2
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	021b      	lsls	r3, r3, #8
 8010942:	b21a      	sxth	r2, r3
 8010944:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010946:	3303      	adds	r3, #3
 8010948:	6939      	ldr	r1, [r7, #16]
 801094a:	440b      	add	r3, r1
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	b21b      	sxth	r3, r3
 8010950:	4313      	orrs	r3, r2
 8010952:	b21b      	sxth	r3, r3
 8010954:	81fb      	strh	r3, [r7, #14]
      if (m > (key_exchange_len - k - 4)) goto fail;
 8010956:	8aba      	ldrh	r2, [r7, #20]
 8010958:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	1eda      	subs	r2, r3, #3
 801095e:	89fb      	ldrh	r3, [r7, #14]
 8010960:	429a      	cmp	r2, r3
 8010962:	dd3b      	ble.n	80109dc <mg_tls_server_recv_hello+0x2b8>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8010964:	89fb      	ldrh	r3, [r7, #14]
 8010966:	2b20      	cmp	r3, #32
 8010968:	d11c      	bne.n	80109a4 <mg_tls_server_recv_hello+0x280>
 801096a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	4413      	add	r3, r2
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d116      	bne.n	80109a4 <mg_tls_server_recv_hello+0x280>
 8010976:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010978:	3301      	adds	r3, #1
 801097a:	693a      	ldr	r2, [r7, #16]
 801097c:	4413      	add	r3, r2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b1d      	cmp	r3, #29
 8010982:	d10f      	bne.n	80109a4 <mg_tls_server_recv_hello+0x280>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 8010984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010986:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 801098a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801098c:	3304      	adds	r3, #4
 801098e:	693a      	ldr	r2, [r7, #16]
 8010990:	4413      	add	r3, r2
 8010992:	89fa      	ldrh	r2, [r7, #14]
 8010994:	4619      	mov	r1, r3
 8010996:	f014 fa47 	bl	8024e28 <memmove>
        mg_tls_drop_record(c);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff f8a4 	bl	800fae8 <mg_tls_drop_record>
        return 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	e022      	b.n	80109ea <mg_tls_server_recv_hello+0x2c6>
      }
      k += (uint16_t) (m + 4);
 80109a4:	89fa      	ldrh	r2, [r7, #14]
 80109a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80109a8:	4413      	add	r3, r2
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	3304      	adds	r3, #4
 80109ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 80109b0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80109b2:	8abb      	ldrh	r3, [r7, #20]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d3be      	bcc.n	8010936 <mg_tls_server_recv_hello+0x212>
    }
    j += (uint16_t) (n + 4);
 80109b8:	8afa      	ldrh	r2, [r7, #22]
 80109ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80109bc:	4413      	add	r3, r2
 80109be:	b29b      	uxth	r3, r3
 80109c0:	3304      	adds	r3, #4
 80109c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 80109c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80109c6:	8bbb      	ldrh	r3, [r7, #28]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	f4ff af6c 	bcc.w	80108a6 <mg_tls_server_recv_hello+0x182>
  }
fail:
 80109ce:	e006      	b.n	80109de <mg_tls_server_recv_hello+0x2ba>
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 80109d0:	bf00      	nop
 80109d2:	e004      	b.n	80109de <mg_tls_server_recv_hello+0x2ba>
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 80109d4:	bf00      	nop
 80109d6:	e002      	b.n	80109de <mg_tls_server_recv_hello+0x2ba>
      goto fail;
 80109d8:	bf00      	nop
 80109da:	e000      	b.n	80109de <mg_tls_server_recv_hello+0x2ba>
      if (m > (key_exchange_len - k - 4)) goto fail;
 80109dc:	bf00      	nop
  mg_error(c, "bad client hello");
 80109de:	490a      	ldr	r1, [pc, #40]	@ (8010a08 <mg_tls_server_recv_hello+0x2e4>)
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f7f2 f835 	bl	8002a50 <mg_error>
  return -1;
 80109e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3730      	adds	r7, #48	@ 0x30
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	0802a704 	.word	0x0802a704
 80109f8:	24000240 	.word	0x24000240
 80109fc:	0802c304 	.word	0x0802c304
 8010a00:	08028ac4 	.word	0x08028ac4
 8010a04:	0802a720 	.word	0x0802a720
 8010a08:	0802a734 	.word	0x0802a734

08010a0c <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8010a0c:	b5b0      	push	{r4, r5, r7, lr}
 8010a0e:	b0b4      	sub	sp, #208	@ 0xd0
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8010a1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010a22:	3304      	adds	r3, #4
 8010a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8010a28:	4a4c      	ldr	r2, [pc, #304]	@ (8010b5c <mg_tls_server_send_hello+0x150>)
 8010a2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010a2e:	4611      	mov	r1, r2
 8010a30:	227a      	movs	r2, #122	@ 0x7a
 8010a32:	4618      	mov	r0, r3
 8010a34:	f014 fb5d 	bl	80250f2 <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8010a38:	f107 030c 	add.w	r3, r7, #12
 8010a3c:	2120      	movs	r1, #32
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7f0 fa70 	bl	8000f24 <mg_random>
 8010a44:	4603      	mov	r3, r0
 8010a46:	f083 0301 	eor.w	r3, r3, #1
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d003      	beq.n	8010a58 <mg_tls_server_send_hello+0x4c>
 8010a50:	4943      	ldr	r1, [pc, #268]	@ (8010b60 <mg_tls_server_send_hello+0x154>)
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7f1 fffc 	bl	8002a50 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8010a58:	f107 010c 	add.w	r1, r7, #12
 8010a5c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8010a60:	2301      	movs	r3, #1
 8010a62:	4a40      	ldr	r2, [pc, #256]	@ (8010b64 <mg_tls_server_send_hello+0x158>)
 8010a64:	f006 fdbe 	bl	80175e4 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8010a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010a6c:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8010a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010a74:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8010a78:	f107 010c 	add.w	r1, r7, #12
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	f006 fdb1 	bl	80175e4 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 8010a82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010a86:	33f0      	adds	r3, #240	@ 0xf0
 8010a88:	2220      	movs	r2, #32
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4836      	ldr	r0, [pc, #216]	@ (8010b68 <mg_tls_server_send_hello+0x15c>)
 8010a8e:	f7fe ff19 	bl	800f8c4 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 8010a92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010a96:	3306      	adds	r3, #6
 8010a98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010a9c:	3290      	adds	r2, #144	@ 0x90
 8010a9e:	6815      	ldr	r5, [r2, #0]
 8010aa0:	6854      	ldr	r4, [r2, #4]
 8010aa2:	6890      	ldr	r0, [r2, #8]
 8010aa4:	68d1      	ldr	r1, [r2, #12]
 8010aa6:	601d      	str	r5, [r3, #0]
 8010aa8:	605c      	str	r4, [r3, #4]
 8010aaa:	6098      	str	r0, [r3, #8]
 8010aac:	60d9      	str	r1, [r3, #12]
 8010aae:	6915      	ldr	r5, [r2, #16]
 8010ab0:	6954      	ldr	r4, [r2, #20]
 8010ab2:	6990      	ldr	r0, [r2, #24]
 8010ab4:	69d1      	ldr	r1, [r2, #28]
 8010ab6:	611d      	str	r5, [r3, #16]
 8010ab8:	615c      	str	r4, [r3, #20]
 8010aba:	6198      	str	r0, [r3, #24]
 8010abc:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 8010abe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010ac2:	3327      	adds	r3, #39	@ 0x27
 8010ac4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010ac8:	32b0      	adds	r2, #176	@ 0xb0
 8010aca:	6815      	ldr	r5, [r2, #0]
 8010acc:	6854      	ldr	r4, [r2, #4]
 8010ace:	6890      	ldr	r0, [r2, #8]
 8010ad0:	68d1      	ldr	r1, [r2, #12]
 8010ad2:	601d      	str	r5, [r3, #0]
 8010ad4:	605c      	str	r4, [r3, #4]
 8010ad6:	6098      	str	r0, [r3, #8]
 8010ad8:	60d9      	str	r1, [r3, #12]
 8010ada:	6915      	ldr	r5, [r2, #16]
 8010adc:	6954      	ldr	r4, [r2, #20]
 8010ade:	6990      	ldr	r0, [r2, #24]
 8010ae0:	69d1      	ldr	r1, [r2, #28]
 8010ae2:	611d      	str	r5, [r3, #16]
 8010ae4:	615c      	str	r4, [r3, #20]
 8010ae6:	6198      	str	r0, [r3, #24]
 8010ae8:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8010aea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010aee:	3354      	adds	r3, #84	@ 0x54
 8010af0:	461d      	mov	r5, r3
 8010af2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8010af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010af8:	6028      	str	r0, [r5, #0]
 8010afa:	6069      	str	r1, [r5, #4]
 8010afc:	60aa      	str	r2, [r5, #8]
 8010afe:	60eb      	str	r3, [r5, #12]
 8010b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b02:	6128      	str	r0, [r5, #16]
 8010b04:	6169      	str	r1, [r5, #20]
 8010b06:	61aa      	str	r2, [r5, #24]
 8010b08:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8010b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010b0e:	6899      	ldr	r1, [r3, #8]
 8010b10:	2305      	movs	r3, #5
 8010b12:	4a16      	ldr	r2, [pc, #88]	@ (8010b6c <mg_tls_server_send_hello+0x160>)
 8010b14:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010b18:	f7f6 fb44 	bl	80071a4 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8010b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010b20:	6899      	ldr	r1, [r3, #8]
 8010b22:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010b26:	237a      	movs	r3, #122	@ 0x7a
 8010b28:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010b2c:	f7f6 fb3a 	bl	80071a4 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8010b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010b34:	3320      	adds	r3, #32
 8010b36:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010b3a:	227a      	movs	r2, #122	@ 0x7a
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fd fc19 	bl	800e374 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8010b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010b46:	6899      	ldr	r1, [r3, #8]
 8010b48:	2306      	movs	r3, #6
 8010b4a:	4a09      	ldr	r2, [pc, #36]	@ (8010b70 <mg_tls_server_send_hello+0x164>)
 8010b4c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010b50:	f7f6 fb28 	bl	80071a4 <mg_iobuf_add>
}
 8010b54:	bf00      	nop
 8010b56:	37d0      	adds	r7, #208	@ 0xd0
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8010b5c:	0802a76c 	.word	0x0802a76c
 8010b60:	0802a748 	.word	0x0802a748
 8010b64:	0802c008 	.word	0x0802c008
 8010b68:	0802a74c 	.word	0x0802a74c
 8010b6c:	0802a75c 	.word	0x0802a75c
 8010b70:	0802a764 	.word	0x0802a764

08010b74 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010b82:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8010b84:	4a0d      	ldr	r2, [pc, #52]	@ (8010bbc <mg_tls_server_send_ext+0x48>)
 8010b86:	f107 030c 	add.w	r3, r7, #12
 8010b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b8e:	6018      	str	r0, [r3, #0]
 8010b90:	3304      	adds	r3, #4
 8010b92:	8019      	strh	r1, [r3, #0]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	3320      	adds	r3, #32
 8010b98:	f107 010c 	add.w	r1, r7, #12
 8010b9c:	2206      	movs	r2, #6
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fd fbe8 	bl	800e374 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8010ba4:	f107 010c 	add.w	r1, r7, #12
 8010ba8:	2316      	movs	r3, #22
 8010baa:	2206      	movs	r2, #6
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7ff fb0d 	bl	80101cc <mg_tls_encrypt>
}
 8010bb2:	bf00      	nop
 8010bb4:	3718      	adds	r7, #24
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	0802a7e8 	.word	0x0802a7e8

08010bc0 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010bce:	617b      	str	r3, [r7, #20]
  // server DER certificate (empty)
  size_t n = tls->cert_der.len;
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8010bd6:	613b      	str	r3, [r7, #16]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	330d      	adds	r3, #13
 8010bdc:	4619      	mov	r1, r3
 8010bde:	2001      	movs	r0, #1
 8010be0:	f012 fe8c 	bl	80238fc <calloc>
 8010be4:	4603      	mov	r3, r0
 8010be6:	60fb      	str	r3, [r7, #12]
  if (cert == NULL) {
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d104      	bne.n	8010bf8 <mg_tls_server_send_cert+0x38>
    mg_error(c, "tls cert oom");
 8010bee:	493a      	ldr	r1, [pc, #232]	@ (8010cd8 <mg_tls_server_send_cert+0x118>)
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7f1 ff2d 	bl	8002a50 <mg_error>
    return;
 8010bf6:	e06b      	b.n	8010cd0 <mg_tls_server_send_cert+0x110>
  }
  cert[0] = 0x0b;                                // handshake header
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	220b      	movs	r2, #11
 8010bfc:	701a      	strb	r2, [r3, #0]
  cert[1] = (uint8_t) (((n + 9) >> 16) & 255U);  // 3 bytes: payload length
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	3309      	adds	r3, #9
 8010c02:	0c1a      	lsrs	r2, r3, #16
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	3301      	adds	r3, #1
 8010c08:	b2d2      	uxtb	r2, r2
 8010c0a:	701a      	strb	r2, [r3, #0]
  cert[2] = (uint8_t) (((n + 9) >> 8) & 255U);
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	3309      	adds	r3, #9
 8010c10:	0a1a      	lsrs	r2, r3, #8
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	3302      	adds	r3, #2
 8010c16:	b2d2      	uxtb	r2, r2
 8010c18:	701a      	strb	r2, [r3, #0]
  cert[3] = (uint8_t) ((n + 9) & 255U);
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	3303      	adds	r3, #3
 8010c22:	3209      	adds	r2, #9
 8010c24:	b2d2      	uxtb	r2, r2
 8010c26:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                   // request context
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	701a      	strb	r2, [r3, #0]
  cert[5] = (uint8_t) (((n + 5) >> 16) & 255U);  // 3 bytes: cert (s) length
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	3305      	adds	r3, #5
 8010c34:	0c1a      	lsrs	r2, r3, #16
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	3305      	adds	r3, #5
 8010c3a:	b2d2      	uxtb	r2, r2
 8010c3c:	701a      	strb	r2, [r3, #0]
  cert[6] = (uint8_t) (((n + 5) >> 8) & 255U);
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	3305      	adds	r3, #5
 8010c42:	0a1a      	lsrs	r2, r3, #8
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	3306      	adds	r3, #6
 8010c48:	b2d2      	uxtb	r2, r2
 8010c4a:	701a      	strb	r2, [r3, #0]
  cert[7] = (uint8_t) ((n + 5) & 255U);
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	3307      	adds	r3, #7
 8010c54:	3205      	adds	r2, #5
 8010c56:	b2d2      	uxtb	r2, r2
 8010c58:	701a      	strb	r2, [r3, #0]
  cert[8] =
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	0c1a      	lsrs	r2, r3, #16
  cert[8] =
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3308      	adds	r3, #8
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 8010c62:	b2d2      	uxtb	r2, r2
  cert[8] =
 8010c64:	701a      	strb	r2, [r3, #0]
  cert[9] = (uint8_t) (((n) >> 8) & 255U);
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	0a1a      	lsrs	r2, r3, #8
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	3309      	adds	r3, #9
 8010c6e:	b2d2      	uxtb	r2, r2
 8010c70:	701a      	strb	r2, [r3, #0]
  cert[10] = (uint8_t) (n & 255U);
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	330a      	adds	r3, #10
 8010c76:	693a      	ldr	r2, [r7, #16]
 8010c78:	b2d2      	uxtb	r2, r2
 8010c7a:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, n);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f103 000b 	add.w	r0, r3, #11
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	f014 f8cc 	bl	8024e28 <memmove>
  cert[11 + n] = cert[12 + n] = 0;  // certificate extensions (none)
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	330c      	adds	r3, #12
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	4413      	add	r3, r2
 8010c98:	2200      	movs	r2, #0
 8010c9a:	701a      	strb	r2, [r3, #0]
 8010c9c:	693a      	ldr	r2, [r7, #16]
 8010c9e:	320b      	adds	r2, #11
 8010ca0:	68f9      	ldr	r1, [r7, #12]
 8010ca2:	440a      	add	r2, r1
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	7013      	strb	r3, [r2, #0]
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f103 0020 	add.w	r0, r3, #32
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	330d      	adds	r3, #13
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	68f9      	ldr	r1, [r7, #12]
 8010cb6:	f7fd fb5d 	bl	800e374 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	f103 020d 	add.w	r2, r3, #13
 8010cc0:	2316      	movs	r3, #22
 8010cc2:	68f9      	ldr	r1, [r7, #12]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7ff fa81 	bl	80101cc <mg_tls_encrypt>
  free(cert);
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f012 fe3a 	bl	8023944 <free>
}
 8010cd0:	3718      	adds	r7, #24
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	0802a7f0 	.word	0x0802a7f0

08010cdc <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	3318      	adds	r3, #24
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fd f8fd 	bl	800deec <mg_sha256_init>
}
 8010cf2:	bf00      	nop
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b086      	sub	sp, #24
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	60f8      	str	r0, [r7, #12]
 8010d02:	60b9      	str	r1, [r7, #8]
 8010d04:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	3318      	adds	r3, #24
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	68b9      	ldr	r1, [r7, #8]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fd fb2e 	bl	800e374 <mg_sha256_update>
}
 8010d18:	bf00      	nop
 8010d1a:	3718      	adds	r7, #24
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	3318      	adds	r3, #24
 8010d32:	4619      	mov	r1, r3
 8010d34:	6838      	ldr	r0, [r7, #0]
 8010d36:	f7fd fb56 	bl	800e3e6 <mg_sha256_final>
}
 8010d3a:	bf00      	nop
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
	...

08010d44 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b0f9      	sub	sp, #484	@ 0x1e4
 8010d48:	af02      	add	r7, sp, #8
 8010d4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010d52:	6018      	str	r0, [r3, #0]
 8010d54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d58:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8010d5c:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010d5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d62:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010d6c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8010d70:	4a8f      	ldr	r2, [pc, #572]	@ (8010fb0 <mg_tls_send_cert_verify+0x26c>)
 8010d72:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8010d76:	6810      	ldr	r0, [r2, #0]
 8010d78:	6851      	ldr	r1, [r2, #4]
 8010d7a:	c303      	stmia	r3!, {r0, r1}
 8010d7c:	7a12      	ldrb	r2, [r2, #8]
 8010d7e:	701a      	strb	r2, [r3, #0]
 8010d80:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8010d84:	2249      	movs	r2, #73	@ 0x49
 8010d86:	2100      	movs	r1, #0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f014 f867 	bl	8024e5c <memset>
  size_t sigsz, verifysz = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8010d94:	2300      	movs	r3, #0
 8010d96:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8010d9a:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8010d9e:	2200      	movs	r2, #0
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	605a      	str	r2, [r3, #4]
 8010da4:	609a      	str	r2, [r3, #8]
 8010da6:	60da      	str	r2, [r3, #12]
 8010da8:	611a      	str	r2, [r3, #16]
 8010daa:	615a      	str	r2, [r3, #20]
 8010dac:	619a      	str	r2, [r3, #24]
 8010dae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010db6:	2200      	movs	r2, #0
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	3304      	adds	r3, #4
 8010dbc:	227c      	movs	r2, #124	@ 0x7c
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f014 f84b 	bl	8024e5c <memset>
  struct SHA256_HashContext ctx = {
 8010dc6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010dca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010dce:	4618      	mov	r0, r3
 8010dd0:	2388      	movs	r3, #136	@ 0x88
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	f014 f841 	bl	8024e5c <memset>
 8010dda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010dde:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010de2:	4a74      	ldr	r2, [pc, #464]	@ (8010fb4 <mg_tls_send_cert_verify+0x270>)
 8010de4:	601a      	str	r2, [r3, #0]
 8010de6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010dea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010dee:	4a72      	ldr	r2, [pc, #456]	@ (8010fb8 <mg_tls_send_cert_verify+0x274>)
 8010df0:	605a      	str	r2, [r3, #4]
 8010df2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010df6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010dfa:	4a70      	ldr	r2, [pc, #448]	@ (8010fbc <mg_tls_send_cert_verify+0x278>)
 8010dfc:	609a      	str	r2, [r3, #8]
 8010dfe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010e06:	2240      	movs	r2, #64	@ 0x40
 8010e08:	60da      	str	r2, [r3, #12]
 8010e0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e0e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010e12:	2220      	movs	r2, #32
 8010e14:	611a      	str	r2, [r3, #16]
 8010e16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010e1e:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8010e22:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8010e24:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e28:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	3304      	adds	r3, #4
 8010e32:	223c      	movs	r2, #60	@ 0x3c
 8010e34:	2100      	movs	r1, #0
 8010e36:	4618      	mov	r0, r3
 8010e38:	f014 f810 	bl	8024e5c <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8010e3c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e40:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8010e44:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8010e48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e4c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010e50:	6812      	ldr	r2, [r2, #0]
 8010e52:	6818      	ldr	r0, [r3, #0]
 8010e54:	f7ff fbc4 	bl	80105e0 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8010e58:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8010e5c:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8010e60:	f004 fb6c 	bl	801553c <mg_uecc_secp256r1>
 8010e64:	4603      	mov	r3, r0
 8010e66:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010e6a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8010e6e:	9301      	str	r3, [sp, #4]
 8010e70:	f107 0308 	add.w	r3, r7, #8
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	4613      	mov	r3, r2
 8010e78:	2220      	movs	r2, #32
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f005 fbce 	bl	801661c <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8010e80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e84:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b25b      	sxtb	r3, r3
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	09db      	lsrs	r3, r3, #7
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8010e96:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e9a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ea2:	b25b      	sxtb	r3, r3
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	09db      	lsrs	r3, r3, #7
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8010eae:	2330      	movs	r3, #48	@ 0x30
 8010eb0:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8010eb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010eb8:	b2da      	uxtb	r2, r3
 8010eba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	4413      	add	r3, r2
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	3344      	adds	r3, #68	@ 0x44
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8010ecc:	2302      	movs	r3, #2
 8010ece:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8010ed2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	3320      	adds	r3, #32
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8010ee0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010ee4:	330c      	adds	r3, #12
 8010ee6:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8010eea:	4413      	add	r3, r2
 8010eec:	f107 0108 	add.w	r1, r7, #8
 8010ef0:	2220      	movs	r2, #32
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f013 ff98 	bl	8024e28 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8010ef8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010efc:	332c      	adds	r3, #44	@ 0x2c
 8010efe:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8010f02:	443b      	add	r3, r7
 8010f04:	2202      	movs	r2, #2
 8010f06:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8010f0a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010f14:	332d      	adds	r3, #45	@ 0x2d
 8010f16:	3220      	adds	r2, #32
 8010f18:	b2d2      	uxtb	r2, r2
 8010f1a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8010f1e:	443b      	add	r3, r7
 8010f20:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8010f24:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8010f28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010f2c:	4413      	add	r3, r2
 8010f2e:	332e      	adds	r3, #46	@ 0x2e
 8010f30:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8010f34:	18d0      	adds	r0, r2, r3
 8010f36:	f107 0308 	add.w	r3, r7, #8
 8010f3a:	3320      	adds	r3, #32
 8010f3c:	2220      	movs	r2, #32
 8010f3e:	4619      	mov	r1, r3
 8010f40:	f013 ff72 	bl	8024e28 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8010f44:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010f48:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8010f4c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010f50:	4413      	add	r3, r2
 8010f52:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8010f56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010f5a:	3308      	adds	r3, #8
 8010f5c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8010f60:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	3304      	adds	r3, #4
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8010f6e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8010f78:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8010f7c:	3320      	adds	r3, #32
 8010f7e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8010f82:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fd f9f4 	bl	800e374 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8010f8c:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8010f90:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010f94:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8010f98:	2316      	movs	r3, #22
 8010f9a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8010f9e:	6800      	ldr	r0, [r0, #0]
 8010fa0:	f7ff f914 	bl	80101cc <mg_tls_encrypt>
}
 8010fa4:	bf00      	nop
 8010fa6:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd90      	pop	{r4, r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	0802a800 	.word	0x0802a800
 8010fb4:	08010cdd 	.word	0x08010cdd
 8010fb8:	08010cfb 	.word	0x08010cfb
 8010fbc:	08010d21 	.word	0x08010d21

08010fc0 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b0b4      	sub	sp, #208	@ 0xd0
 8010fc4:	af02      	add	r7, sp, #8
 8010fc6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8010fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010fd6:	3304      	adds	r3, #4
 8010fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8010fdc:	4a28      	ldr	r2, [pc, #160]	@ (8011080 <mg_tls_server_send_finish+0xc0>)
 8010fde:	f107 030c 	add.w	r3, r7, #12
 8010fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fe6:	6018      	str	r0, [r3, #0]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	7019      	strb	r1, [r3, #0]
 8010fec:	f107 0311 	add.w	r3, r7, #17
 8010ff0:	221f      	movs	r2, #31
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f013 ff31 	bl	8024e5c <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8010ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010ffe:	f103 0120 	add.w	r1, r3, #32
 8011002:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011006:	2270      	movs	r2, #112	@ 0x70
 8011008:	4618      	mov	r0, r3
 801100a:	f013 ff0d 	bl	8024e28 <memmove>
  mg_sha256_final(hash, &sha256);
 801100e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8011012:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011016:	4611      	mov	r1, r2
 8011018:	4618      	mov	r0, r3
 801101a:	f7fd f9e4 	bl	800e3e6 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 801101e:	f107 000c 	add.w	r0, r7, #12
 8011022:	3004      	adds	r0, #4
 8011024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011028:	f503 7145 	add.w	r1, r3, #788	@ 0x314
 801102c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011030:	2220      	movs	r2, #32
 8011032:	9200      	str	r2, [sp, #0]
 8011034:	2220      	movs	r2, #32
 8011036:	f7fd fb0e 	bl	800e656 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801103a:	f107 010c 	add.w	r1, r7, #12
 801103e:	2316      	movs	r3, #22
 8011040:	2224      	movs	r2, #36	@ 0x24
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7ff f8c2 	bl	80101cc <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 8011048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801104c:	6819      	ldr	r1, [r3, #0]
 801104e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	461a      	mov	r2, r3
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f7fa fb3e 	bl	800b6d8 <mg_io_send>
  wio->len = 0;
 801105c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011060:	2200      	movs	r2, #0
 8011062:	609a      	str	r2, [r3, #8]

  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8011064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011068:	3320      	adds	r3, #32
 801106a:	f107 010c 	add.w	r1, r7, #12
 801106e:	2224      	movs	r2, #36	@ 0x24
 8011070:	4618      	mov	r0, r3
 8011072:	f7fd f97f 	bl	800e374 <mg_sha256_update>
}
 8011076:	bf00      	nop
 8011078:	37c8      	adds	r7, #200	@ 0xc8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	0802a80c 	.word	0x0802a80c

08011084 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8011084:	b580      	push	{r7, lr}
 8011086:	b0a0      	sub	sp, #128	@ 0x80
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011092:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8011094:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011096:	f107 0008 	add.w	r0, r7, #8
 801109a:	3320      	adds	r3, #32
 801109c:	2270      	movs	r2, #112	@ 0x70
 801109e:	4619      	mov	r1, r3
 80110a0:	f014 f827 	bl	80250f2 <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7ff f98d 	bl	80103c4 <mg_tls_recv_record>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	da02      	bge.n	80110b6 <mg_tls_server_recv_finish+0x32>
    return -1;
 80110b0:	f04f 33ff 	mov.w	r3, #4294967295
 80110b4:	e01f      	b.n	80110f6 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80110ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	4413      	add	r3, r2
 80110c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 80110c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b14      	cmp	r3, #20
 80110c8:	d009      	beq.n	80110de <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 80110ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	461a      	mov	r2, r3
 80110d0:	490b      	ldr	r1, [pc, #44]	@ (8011100 <mg_tls_server_recv_finish+0x7c>)
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7f1 fcbc 	bl	8002a50 <mg_error>
    return -1;
 80110d8:	f04f 33ff 	mov.w	r3, #4294967295
 80110dc:	e00b      	b.n	80110f6 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7fe fd24 	bl	800fb2c <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 80110e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110e6:	3320      	adds	r3, #32
 80110e8:	f107 0108 	add.w	r1, r7, #8
 80110ec:	2270      	movs	r2, #112	@ 0x70
 80110ee:	4618      	mov	r0, r3
 80110f0:	f013 ffff 	bl	80250f2 <memcpy>
  return 0;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3780      	adds	r7, #128	@ 0x80
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	0802a830 	.word	0x0802a830

08011104 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8011104:	b5b0      	push	{r4, r5, r7, lr}
 8011106:	b0c4      	sub	sp, #272	@ 0x110
 8011108:	af00      	add	r7, sp, #0
 801110a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801110e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011112:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011118:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011122:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  struct mg_iobuf *wio = &tls->send;
 8011126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801112a:	3304      	adds	r3, #4
 801112c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  uint8_t x25519_pub[X25519_BYTES];

  // the only signature algorithm we actually support
  uint8_t secp256r1_sig_algs[8] = {
 8011130:	4a28      	ldr	r2, [pc, #160]	@ (80111d4 <mg_tls_client_send_hello+0xd0>)
 8011132:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8011136:	e892 0003 	ldmia.w	r2, {r0, r1}
 801113a:	e883 0003 	stmia.w	r3, {r0, r1}
      0x00, 0x0d, 0x00, 0x04, 0x00, 0x02, 0x04, 0x03,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 801113e:	4b26      	ldr	r3, [pc, #152]	@ (80111d8 <mg_tls_client_send_hello+0xd4>)
 8011140:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8011144:	461d      	mov	r5, r3
 8011146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801114e:	682b      	ldr	r3, [r5, #0]
 8011150:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8011152:	4a22      	ldr	r2, [pc, #136]	@ (80111dc <mg_tls_client_send_hello+0xd8>)
 8011154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8011158:	ca07      	ldmia	r2, {r0, r1, r2}
 801115a:	c303      	stmia	r3!, {r0, r1}
 801115c:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 801115e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011166:	4a1e      	ldr	r2, [pc, #120]	@ (80111e0 <mg_tls_client_send_hello+0xdc>)
 8011168:	4618      	mov	r0, r3
 801116a:	4611      	mov	r1, r2
 801116c:	2391      	movs	r3, #145	@ 0x91
 801116e:	461a      	mov	r2, r3
 8011170:	f013 ffbf 	bl	80250f2 <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8011174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011178:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801117c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  size_t hostnamesz = strlen(tls->hostname);
 8011180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011184:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8011188:	4618      	mov	r0, r3
 801118a:	f7ef f909 	bl	80003a0 <strlen>
 801118e:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8011192:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <mg_tls_client_send_hello+0x9e>
 801119a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801119e:	3309      	adds	r3, #9
 80111a0:	e000      	b.n	80111a4 <mg_tls_client_send_hello+0xa0>
 80111a2:	2300      	movs	r3, #0
 80111a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 80111a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80111ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d002      	beq.n	80111ba <mg_tls_client_send_hello+0xb6>
 80111b4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80111b8:	e001      	b.n	80111be <mg_tls_client_send_hello+0xba>
 80111ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80111be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80111c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80111c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00a      	beq.n	80111e4 <mg_tls_client_send_hello+0xe0>
 80111ce:	2322      	movs	r3, #34	@ 0x22
 80111d0:	e009      	b.n	80111e6 <mg_tls_client_send_hello+0xe2>
 80111d2:	bf00      	nop
 80111d4:	0802a854 	.word	0x0802a854
 80111d8:	0802a85c 	.word	0x0802a85c
 80111dc:	0802a880 	.word	0x0802a880
 80111e0:	0802a88c 	.word	0x0802a88c
 80111e4:	2308      	movs	r3, #8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80111e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 80111ea:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80111ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111f2:	4413      	add	r3, r2
 80111f4:	338c      	adds	r3, #140	@ 0x8c
 80111f6:	0a1b      	lsrs	r3, r3, #8
 80111f8:	b2da      	uxtb	r2, r3
 80111fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80111fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011202:	70da      	strb	r2, [r3, #3]
 8011204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011208:	b2da      	uxtb	r2, r3
 801120a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801120e:	b2db      	uxtb	r3, r3
 8011210:	4413      	add	r3, r2
 8011212:	b2db      	uxtb	r3, r3
 8011214:	3b74      	subs	r3, #116	@ 0x74
 8011216:	b2da      	uxtb	r2, r3
 8011218:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801121c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011220:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8011222:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8011226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801122a:	4413      	add	r3, r2
 801122c:	3388      	adds	r3, #136	@ 0x88
 801122e:	0a1b      	lsrs	r3, r3, #8
 8011230:	b2da      	uxtb	r2, r3
 8011232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801123a:	71da      	strb	r2, [r3, #7]
 801123c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011240:	b2da      	uxtb	r2, r3
 8011242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011246:	b2db      	uxtb	r3, r3
 8011248:	4413      	add	r3, r2
 801124a:	b2db      	uxtb	r3, r3
 801124c:	3b78      	subs	r3, #120	@ 0x78
 801124e:	b2da      	uxtb	r2, r3
 8011250:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011258:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 801125a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801125e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011262:	4413      	add	r3, r2
 8011264:	333d      	adds	r3, #61	@ 0x3d
 8011266:	0a1b      	lsrs	r3, r3, #8
 8011268:	b2da      	uxtb	r2, r3
 801126a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801126e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011272:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8011276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801127a:	b2da      	uxtb	r2, r3
 801127c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011280:	b2db      	uxtb	r3, r3
 8011282:	4413      	add	r3, r2
 8011284:	b2db      	uxtb	r3, r3
 8011286:	333d      	adds	r3, #61	@ 0x3d
 8011288:	b2da      	uxtb	r2, r3
 801128a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801128e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011292:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8011296:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801129a:	2b00      	cmp	r3, #0
 801129c:	d026      	beq.n	80112ec <mg_tls_client_send_hello+0x1e8>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 801129e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80112a2:	3305      	adds	r3, #5
 80112a4:	0a1b      	lsrs	r3, r3, #8
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 80112ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	3305      	adds	r3, #5
 80112b4:	b2db      	uxtb	r3, r3
 80112b6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 80112ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80112be:	3303      	adds	r3, #3
 80112c0:	0a1b      	lsrs	r3, r3, #8
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 80112c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	3303      	adds	r3, #3
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 80112d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80112da:	0a1b      	lsrs	r3, r3, #8
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 80112e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 80112ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80112f0:	33d0      	adds	r3, #208	@ 0xd0
 80112f2:	2120      	movs	r1, #32
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7ef fe15 	bl	8000f24 <mg_random>
 80112fa:	4603      	mov	r3, r0
 80112fc:	f083 0301 	eor.w	r3, r3, #1
 8011300:	b2db      	uxtb	r3, r3
 8011302:	2b00      	cmp	r3, #0
 8011304:	d007      	beq.n	8011316 <mg_tls_client_send_hello+0x212>
 8011306:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801130a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801130e:	4974      	ldr	r1, [pc, #464]	@ (80114e0 <mg_tls_client_send_hello+0x3dc>)
 8011310:	6818      	ldr	r0, [r3, #0]
 8011312:	f7f1 fb9d 	bl	8002a50 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 8011316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801131a:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 801131e:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8011322:	2301      	movs	r3, #1
 8011324:	4a6f      	ldr	r2, [pc, #444]	@ (80114e4 <mg_tls_client_send_hello+0x3e0>)
 8011326:	f006 f95d 	bl	80175e4 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 801132a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801132e:	33b0      	adds	r3, #176	@ 0xb0
 8011330:	2120      	movs	r1, #32
 8011332:	4618      	mov	r0, r3
 8011334:	f7ef fdf6 	bl	8000f24 <mg_random>
 8011338:	4603      	mov	r3, r0
 801133a:	f083 0301 	eor.w	r3, r3, #1
 801133e:	b2db      	uxtb	r3, r3
 8011340:	2b00      	cmp	r3, #0
 8011342:	d007      	beq.n	8011354 <mg_tls_client_send_hello+0x250>
 8011344:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011348:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801134c:	4964      	ldr	r1, [pc, #400]	@ (80114e0 <mg_tls_client_send_hello+0x3dc>)
 801134e:	6818      	ldr	r0, [r3, #0]
 8011350:	f7f1 fb7e 	bl	8002a50 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 8011354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011358:	3390      	adds	r3, #144	@ 0x90
 801135a:	2120      	movs	r1, #32
 801135c:	4618      	mov	r0, r3
 801135e:	f7ef fde1 	bl	8000f24 <mg_random>
 8011362:	4603      	mov	r3, r0
 8011364:	f083 0301 	eor.w	r3, r3, #1
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	d007      	beq.n	801137e <mg_tls_client_send_hello+0x27a>
 801136e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011372:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011376:	495a      	ldr	r1, [pc, #360]	@ (80114e0 <mg_tls_client_send_hello+0x3dc>)
 8011378:	6818      	ldr	r0, [r3, #0]
 801137a:	f7f1 fb69 	bl	8002a50 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 801137e:	f107 0308 	add.w	r3, r7, #8
 8011382:	330b      	adds	r3, #11
 8011384:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8011388:	3290      	adds	r2, #144	@ 0x90
 801138a:	6815      	ldr	r5, [r2, #0]
 801138c:	6854      	ldr	r4, [r2, #4]
 801138e:	6890      	ldr	r0, [r2, #8]
 8011390:	68d1      	ldr	r1, [r2, #12]
 8011392:	601d      	str	r5, [r3, #0]
 8011394:	605c      	str	r4, [r3, #4]
 8011396:	6098      	str	r0, [r3, #8]
 8011398:	60d9      	str	r1, [r3, #12]
 801139a:	6915      	ldr	r5, [r2, #16]
 801139c:	6954      	ldr	r4, [r2, #20]
 801139e:	6990      	ldr	r0, [r2, #24]
 80113a0:	69d1      	ldr	r1, [r2, #28]
 80113a2:	611d      	str	r5, [r3, #16]
 80113a4:	615c      	str	r4, [r3, #20]
 80113a6:	6198      	str	r0, [r3, #24]
 80113a8:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 80113aa:	f107 0308 	add.w	r3, r7, #8
 80113ae:	332c      	adds	r3, #44	@ 0x2c
 80113b0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80113b4:	32b0      	adds	r2, #176	@ 0xb0
 80113b6:	6815      	ldr	r5, [r2, #0]
 80113b8:	6854      	ldr	r4, [r2, #4]
 80113ba:	6890      	ldr	r0, [r2, #8]
 80113bc:	68d1      	ldr	r1, [r2, #12]
 80113be:	601d      	str	r5, [r3, #0]
 80113c0:	605c      	str	r4, [r3, #4]
 80113c2:	6098      	str	r0, [r3, #8]
 80113c4:	60d9      	str	r1, [r3, #12]
 80113c6:	6915      	ldr	r5, [r2, #16]
 80113c8:	6954      	ldr	r4, [r2, #20]
 80113ca:	6990      	ldr	r0, [r2, #24]
 80113cc:	69d1      	ldr	r1, [r2, #28]
 80113ce:	611d      	str	r5, [r3, #16]
 80113d0:	615c      	str	r4, [r3, #20]
 80113d2:	6198      	str	r0, [r3, #24]
 80113d4:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 80113d6:	f107 0308 	add.w	r3, r7, #8
 80113da:	335e      	adds	r3, #94	@ 0x5e
 80113dc:	461d      	mov	r5, r3
 80113de:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 80113e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113e4:	6028      	str	r0, [r5, #0]
 80113e6:	6069      	str	r1, [r5, #4]
 80113e8:	60aa      	str	r2, [r5, #8]
 80113ea:	60eb      	str	r3, [r5, #12]
 80113ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113ee:	6128      	str	r0, [r5, #16]
 80113f0:	6169      	str	r1, [r5, #20]
 80113f2:	61aa      	str	r2, [r5, #24]
 80113f4:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 80113f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80113fa:	6899      	ldr	r1, [r3, #8]
 80113fc:	f107 0208 	add.w	r2, r7, #8
 8011400:	2391      	movs	r3, #145	@ 0x91
 8011402:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8011406:	f7f5 fecd 	bl	80071a4 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 801140a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801140e:	f103 0020 	add.w	r0, r3, #32
 8011412:	f107 0308 	add.w	r3, r7, #8
 8011416:	3305      	adds	r3, #5
 8011418:	228c      	movs	r2, #140	@ 0x8c
 801141a:	4619      	mov	r1, r3
 801141c:	f7fc ffaa 	bl	800e374 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8011420:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8011424:	6899      	ldr	r1, [r3, #8]
 8011426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801142a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801142e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8011432:	f7f5 feb7 	bl	80071a4 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 8011436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801143a:	3320      	adds	r3, #32
 801143c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8011440:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8011444:	4618      	mov	r0, r3
 8011446:	f7fc ff95 	bl	800e374 <mg_sha256_update>
  if (hostnamesz > 0) {
 801144a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801144e:	2b00      	cmp	r3, #0
 8011450:	d027      	beq.n	80114a2 <mg_tls_client_send_hello+0x39e>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 8011452:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8011456:	6899      	ldr	r1, [r3, #8]
 8011458:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 801145c:	2309      	movs	r3, #9
 801145e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8011462:	f7f5 fe9f 	bl	80071a4 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 8011466:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801146a:	6899      	ldr	r1, [r3, #8]
 801146c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011470:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8011474:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8011478:	f7f5 fe94 	bl	80071a4 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 801147c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011480:	3320      	adds	r3, #32
 8011482:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8011486:	2209      	movs	r2, #9
 8011488:	4618      	mov	r0, r3
 801148a:	f7fc ff73 	bl	800e374 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 801148e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011492:	3320      	adds	r3, #32
 8011494:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8011498:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 801149c:	4618      	mov	r0, r3
 801149e:	f7fc ff69 	bl	800e374 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 80114a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80114a6:	6899      	ldr	r1, [r3, #8]
 80114a8:	2306      	movs	r3, #6
 80114aa:	4a0f      	ldr	r2, [pc, #60]	@ (80114e8 <mg_tls_client_send_hello+0x3e4>)
 80114ac:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80114b0:	f7f5 fe78 	bl	80071a4 <mg_iobuf_add>
  mg_io_send(c, wio->buf, wio->len);
 80114b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80114b8:	6819      	ldr	r1, [r3, #0]
 80114ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80114be:	689a      	ldr	r2, [r3, #8]
 80114c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80114c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80114c8:	6818      	ldr	r0, [r3, #0]
 80114ca:	f7fa f905 	bl	800b6d8 <mg_io_send>
  wio->len = 0;
 80114ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80114d2:	2200      	movs	r2, #0
 80114d4:	609a      	str	r2, [r3, #8]
}
 80114d6:	bf00      	nop
 80114d8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80114dc:	46bd      	mov	sp, r7
 80114de:	bdb0      	pop	{r4, r5, r7, pc}
 80114e0:	0802a748 	.word	0x0802a748
 80114e4:	0802c008 	.word	0x0802c008
 80114e8:	0802a764 	.word	0x0802a764

080114ec <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b08a      	sub	sp, #40	@ 0x28
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80114fa:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	3368      	adds	r3, #104	@ 0x68
 8011500:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7fe fac9 	bl	800fa9a <mg_tls_got_record>
 8011508:	4603      	mov	r3, r0
 801150a:	f083 0301 	eor.w	r3, r3, #1
 801150e:	b2db      	uxtb	r3, r3
 8011510:	2b00      	cmp	r3, #0
 8011512:	d002      	beq.n	801151a <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 8011514:	f06f 0301 	mvn.w	r3, #1
 8011518:	e103      	b.n	8011722 <mg_tls_client_recv_hello+0x236>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	2b16      	cmp	r3, #22
 8011522:	d105      	bne.n	8011530 <mg_tls_client_recv_hello+0x44>
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	3305      	adds	r3, #5
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	2b02      	cmp	r3, #2
 801152e:	d032      	beq.n	8011596 <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	2b15      	cmp	r3, #21
 8011538:	d10f      	bne.n	801155a <mg_tls_client_recv_hello+0x6e>
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	689b      	ldr	r3, [r3, #8]
 801153e:	2b06      	cmp	r3, #6
 8011540:	d90b      	bls.n	801155a <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3306      	adds	r3, #6
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	461a      	mov	r2, r3
 801154c:	4977      	ldr	r1, [pc, #476]	@ (801172c <mg_tls_client_recv_hello+0x240>)
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7f1 fa7e 	bl	8002a50 <mg_error>
      return -1;
 8011554:	f04f 33ff 	mov.w	r3, #4294967295
 8011558:	e0e3      	b.n	8011722 <mg_tls_client_recv_hello+0x236>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 801155a:	4b75      	ldr	r3, [pc, #468]	@ (8011730 <mg_tls_client_recv_hello+0x244>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	2b01      	cmp	r3, #1
 8011560:	dd12      	ble.n	8011588 <mg_tls_client_recv_hello+0x9c>
 8011562:	4b74      	ldr	r3, [pc, #464]	@ (8011734 <mg_tls_client_recv_hello+0x248>)
 8011564:	f642 1256 	movw	r2, #10582	@ 0x2956
 8011568:	4973      	ldr	r1, [pc, #460]	@ (8011738 <mg_tls_client_recv_hello+0x24c>)
 801156a:	2002      	movs	r0, #2
 801156c:	f7f6 fd5c 	bl	8008028 <mg_log_prefix>
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	4619      	mov	r1, r3
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	3305      	adds	r3, #5
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	461a      	mov	r2, r3
 8011582:	486e      	ldr	r0, [pc, #440]	@ (801173c <mg_tls_client_recv_hello+0x250>)
 8011584:	f7f6 fda0 	bl	80080c8 <mg_log>
    mg_error(c, "not a server hello packet");
 8011588:	496d      	ldr	r1, [pc, #436]	@ (8011740 <mg_tls_client_recv_hello+0x254>)
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7f1 fa60 	bl	8002a50 <mg_error>
    return -1;
 8011590:	f04f 33ff 	mov.w	r3, #4294967295
 8011594:	e0c5      	b.n	8011722 <mg_tls_client_recv_hello+0x236>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	3303      	adds	r3, #3
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	021b      	lsls	r3, r3, #8
 80115a0:	b21a      	sxth	r2, r3
 80115a2:	69fb      	ldr	r3, [r7, #28]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3304      	adds	r3, #4
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	b21b      	sxth	r3, r3
 80115ac:	4313      	orrs	r3, r2
 80115ae:	b21b      	sxth	r3, r3
 80115b0:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80115b2:	6a3b      	ldr	r3, [r7, #32]
 80115b4:	f103 0020 	add.w	r0, r3, #32
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	3305      	adds	r3, #5
 80115be:	8b7a      	ldrh	r2, [r7, #26]
 80115c0:	4619      	mov	r1, r3
 80115c2:	f7fc fed7 	bl	800e374 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	334f      	adds	r3, #79	@ 0x4f
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	021b      	lsls	r3, r3, #8
 80115d0:	b21a      	sxth	r2, r3
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	3350      	adds	r3, #80	@ 0x50
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	b21b      	sxth	r3, r3
 80115dc:	4313      	orrs	r3, r2
 80115de:	b21b      	sxth	r3, r3
 80115e0:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	3351      	adds	r3, #81	@ 0x51
 80115e8:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 80115ea:	8b3a      	ldrh	r2, [r7, #24]
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	3b51      	subs	r3, #81	@ 0x51
 80115f2:	429a      	cmp	r2, r3
 80115f4:	f200 808c 	bhi.w	8011710 <mg_tls_client_recv_hello+0x224>

  for (j = 0; j < ext_len;) {
 80115f8:	2300      	movs	r3, #0
 80115fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80115fc:	e082      	b.n	8011704 <mg_tls_client_recv_hello+0x218>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 80115fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011600:	697a      	ldr	r2, [r7, #20]
 8011602:	4413      	add	r3, r2
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	021b      	lsls	r3, r3, #8
 8011608:	b21a      	sxth	r2, r3
 801160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160c:	3301      	adds	r3, #1
 801160e:	6979      	ldr	r1, [r7, #20]
 8011610:	440b      	add	r3, r1
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	b21b      	sxth	r3, r3
 8011616:	4313      	orrs	r3, r2
 8011618:	b21b      	sxth	r3, r3
 801161a:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 801161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161e:	3302      	adds	r3, #2
 8011620:	697a      	ldr	r2, [r7, #20]
 8011622:	4413      	add	r3, r2
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	021b      	lsls	r3, r3, #8
 8011628:	b21a      	sxth	r2, r3
 801162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162c:	3303      	adds	r3, #3
 801162e:	6979      	ldr	r1, [r7, #20]
 8011630:	440b      	add	r3, r1
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	b21b      	sxth	r3, r3
 8011636:	4313      	orrs	r3, r2
 8011638:	b21b      	sxth	r3, r3
 801163a:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801163c:	8b3a      	ldrh	r2, [r7, #24]
 801163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	1eda      	subs	r2, r3, #3
 8011644:	8a3b      	ldrh	r3, [r7, #16]
 8011646:	429a      	cmp	r2, r3
 8011648:	dd64      	ble.n	8011714 <mg_tls_client_recv_hello+0x228>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 801164a:	8a7b      	ldrh	r3, [r7, #18]
 801164c:	2b33      	cmp	r3, #51	@ 0x33
 801164e:	d007      	beq.n	8011660 <mg_tls_client_recv_hello+0x174>
      j += (uint16_t) (ext_len2 + 4);
 8011650:	8a3b      	ldrh	r3, [r7, #16]
 8011652:	3304      	adds	r3, #4
 8011654:	b29b      	uxth	r3, r3
 8011656:	461a      	mov	r2, r3
 8011658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165a:	4413      	add	r3, r2
 801165c:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 801165e:	e051      	b.n	8011704 <mg_tls_client_recv_hello+0x218>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8011660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011662:	3304      	adds	r3, #4
 8011664:	697a      	ldr	r2, [r7, #20]
 8011666:	4413      	add	r3, r2
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	021b      	lsls	r3, r3, #8
 801166c:	b21a      	sxth	r2, r3
 801166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011670:	3305      	adds	r3, #5
 8011672:	6979      	ldr	r1, [r7, #20]
 8011674:	440b      	add	r3, r1
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	b21b      	sxth	r3, r3
 801167a:	4313      	orrs	r3, r2
 801167c:	b21b      	sxth	r3, r3
 801167e:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 8011680:	89fb      	ldrh	r3, [r7, #14]
 8011682:	2b1d      	cmp	r3, #29
 8011684:	d006      	beq.n	8011694 <mg_tls_client_recv_hello+0x1a8>
      mg_error(c, "bad key exchange group");
 8011686:	492f      	ldr	r1, [pc, #188]	@ (8011744 <mg_tls_client_recv_hello+0x258>)
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7f1 f9e1 	bl	8002a50 <mg_error>
      return -1;
 801168e:	f04f 33ff 	mov.w	r3, #4294967295
 8011692:	e046      	b.n	8011722 <mg_tls_client_recv_hello+0x236>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 8011694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011696:	3306      	adds	r3, #6
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	4413      	add	r3, r2
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	021b      	lsls	r3, r3, #8
 80116a0:	b21a      	sxth	r2, r3
 80116a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a4:	3307      	adds	r3, #7
 80116a6:	6979      	ldr	r1, [r7, #20]
 80116a8:	440b      	add	r3, r1
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	b21b      	sxth	r3, r3
 80116ae:	4313      	orrs	r3, r2
 80116b0:	b21b      	sxth	r3, r3
 80116b2:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 80116b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b6:	3308      	adds	r3, #8
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	4413      	add	r3, r2
 80116bc:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 80116be:	89bb      	ldrh	r3, [r7, #12]
 80116c0:	2b20      	cmp	r3, #32
 80116c2:	d006      	beq.n	80116d2 <mg_tls_client_recv_hello+0x1e6>
      mg_error(c, "bad key exchange length");
 80116c4:	4920      	ldr	r1, [pc, #128]	@ (8011748 <mg_tls_client_recv_hello+0x25c>)
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7f1 f9c2 	bl	8002a50 <mg_error>
      return -1;
 80116cc:	f04f 33ff 	mov.w	r3, #4294967295
 80116d0:	e027      	b.n	8011722 <mg_tls_client_recv_hello+0x236>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80116de:	2301      	movs	r3, #1
 80116e0:	68ba      	ldr	r2, [r7, #8]
 80116e2:	f005 ff7f 	bl	80175e4 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	33f0      	adds	r3, #240	@ 0xf0
 80116ea:	2220      	movs	r2, #32
 80116ec:	4619      	mov	r1, r3
 80116ee:	4817      	ldr	r0, [pc, #92]	@ (801174c <mg_tls_client_recv_hello+0x260>)
 80116f0:	f7fe f8e8 	bl	800f8c4 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7fe f9f7 	bl	800fae8 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f7fe fafe 	bl	800fcfc <mg_tls_generate_handshake_keys>
    return 0;
 8011700:	2300      	movs	r3, #0
 8011702:	e00e      	b.n	8011722 <mg_tls_client_recv_hello+0x236>
  for (j = 0; j < ext_len;) {
 8011704:	8b3b      	ldrh	r3, [r7, #24]
 8011706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011708:	429a      	cmp	r2, r3
 801170a:	f6ff af78 	blt.w	80115fe <mg_tls_client_recv_hello+0x112>
  }
fail:
 801170e:	e002      	b.n	8011716 <mg_tls_client_recv_hello+0x22a>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8011710:	bf00      	nop
 8011712:	e000      	b.n	8011716 <mg_tls_client_recv_hello+0x22a>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8011714:	bf00      	nop
  mg_error(c, "bad client hello");
 8011716:	490e      	ldr	r1, [pc, #56]	@ (8011750 <mg_tls_client_recv_hello+0x264>)
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7f1 f999 	bl	8002a50 <mg_error>
  return -1;
 801171e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011722:	4618      	mov	r0, r3
 8011724:	3728      	adds	r7, #40	@ 0x28
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	0802a920 	.word	0x0802a920
 8011730:	24000240 	.word	0x24000240
 8011734:	0802c320 	.word	0x0802c320
 8011738:	08028ac4 	.word	0x08028ac4
 801173c:	0802a930 	.word	0x0802a930
 8011740:	0802a950 	.word	0x0802a950
 8011744:	0802a96c 	.word	0x0802a96c
 8011748:	0802a984 	.word	0x0802a984
 801174c:	0802a99c 	.word	0x0802a99c
 8011750:	0802a734 	.word	0x0802a734

08011754 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011762:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f7fe fe2d 	bl	80103c4 <mg_tls_recv_record>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	da02      	bge.n	8011776 <mg_tls_client_recv_ext+0x22>
    return -1;
 8011770:	f04f 33ff 	mov.w	r3, #4294967295
 8011774:	e017      	b.n	80117a6 <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	695b      	ldr	r3, [r3, #20]
 801177e:	4413      	add	r3, r2
 8011780:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	2b08      	cmp	r3, #8
 8011788:	d009      	beq.n	801179e <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	4907      	ldr	r1, [pc, #28]	@ (80117b0 <mg_tls_client_recv_ext+0x5c>)
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f7f1 f95c 	bl	8002a50 <mg_error>
    return -1;
 8011798:	f04f 33ff 	mov.w	r3, #4294967295
 801179c:	e003      	b.n	80117a6 <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f7fe f9c4 	bl	800fb2c <mg_tls_drop_message>
  return 0;
 80117a4:	2300      	movs	r3, #0
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	0802a9ac 	.word	0x0802a9ac

080117b4 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b09a      	sub	sp, #104	@ 0x68
 80117b8:	af02      	add	r7, sp, #8
 80117ba:	6078      	str	r0, [r7, #4]
  uint8_t *cert;
  uint32_t certsz;
  struct mg_der_tlv oid, pubkey, seq, subj;
  int subj_match = 0;
 80117bc:	2300      	movs	r3, #0
 80117be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  struct tls_data *tls = (struct tls_data *) c->tls;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80117c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f7fe fdfb 	bl	80103c4 <mg_tls_recv_record>
 80117ce:	4603      	mov	r3, r0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	da02      	bge.n	80117da <mg_tls_client_recv_cert+0x26>
    return -1;
 80117d4:	f04f 33ff 	mov.w	r3, #4294967295
 80117d8:	e191      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80117de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	4413      	add	r3, r2
 80117e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 80117e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b0d      	cmp	r3, #13
 80117ec:	d117      	bne.n	801181e <mg_tls_client_recv_cert+0x6a>
    MG_VERBOSE(("got certificate request"));
 80117ee:	4b9f      	ldr	r3, [pc, #636]	@ (8011a6c <mg_tls_client_recv_cert+0x2b8>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b03      	cmp	r3, #3
 80117f4:	dd09      	ble.n	801180a <mg_tls_client_recv_cert+0x56>
 80117f6:	4b9e      	ldr	r3, [pc, #632]	@ (8011a70 <mg_tls_client_recv_cert+0x2bc>)
 80117f8:	f642 129f 	movw	r2, #10655	@ 0x299f
 80117fc:	499d      	ldr	r1, [pc, #628]	@ (8011a74 <mg_tls_client_recv_cert+0x2c0>)
 80117fe:	2004      	movs	r0, #4
 8011800:	f7f6 fc12 	bl	8008028 <mg_log_prefix>
 8011804:	489c      	ldr	r0, [pc, #624]	@ (8011a78 <mg_tls_client_recv_cert+0x2c4>)
 8011806:	f7f6 fc5f 	bl	80080c8 <mg_log>
    mg_tls_drop_message(c);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7fe f98e 	bl	800fb2c <mg_tls_drop_message>
    tls->cert_requested = 1;
 8011810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011812:	2201      	movs	r2, #1
 8011814:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 8011818:	f04f 33ff 	mov.w	r3, #4294967295
 801181c:	e16f      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
  }
  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 801181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	2b0b      	cmp	r3, #11
 8011824:	d009      	beq.n	801183a <mg_tls_client_recv_cert+0x86>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 8011826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	461a      	mov	r2, r3
 801182c:	4993      	ldr	r1, [pc, #588]	@ (8011a7c <mg_tls_client_recv_cert+0x2c8>)
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7f1 f90e 	bl	8002a50 <mg_error>
    return -1;
 8011834:	f04f 33ff 	mov.w	r3, #4294967295
 8011838:	e161      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
  }
  if (tls->skip_verification) {
 801183a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801183c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011840:	2b00      	cmp	r3, #0
 8011842:	d004      	beq.n	801184e <mg_tls_client_recv_cert+0x9a>
    mg_tls_drop_message(c);
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7fe f971 	bl	800fb2c <mg_tls_drop_message>
    return 0;
 801184a:	2300      	movs	r3, #0
 801184c:	e157      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
  }

  if (tls->recv_len < 11) {
 801184e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011850:	699b      	ldr	r3, [r3, #24]
 8011852:	2b0a      	cmp	r3, #10
 8011854:	d806      	bhi.n	8011864 <mg_tls_client_recv_cert+0xb0>
    mg_error(c, "certificate list too short");
 8011856:	498a      	ldr	r1, [pc, #552]	@ (8011a80 <mg_tls_client_recv_cert+0x2cc>)
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7f1 f8f9 	bl	8002a50 <mg_error>
    return -1;
 801185e:	f04f 33ff 	mov.w	r3, #4294967295
 8011862:	e14c      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
  }

  cert = recv_buf + 11;
 8011864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011866:	330b      	adds	r3, #11
 8011868:	653b      	str	r3, [r7, #80]	@ 0x50
  certsz = MG_LOAD_BE24(recv_buf + 8);
 801186a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801186c:	3308      	adds	r3, #8
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	041a      	lsls	r2, r3, #16
 8011872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011874:	3309      	adds	r3, #9
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	021b      	lsls	r3, r3, #8
 801187a:	4313      	orrs	r3, r2
 801187c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801187e:	320a      	adds	r2, #10
 8011880:	7812      	ldrb	r2, [r2, #0]
 8011882:	4313      	orrs	r3, r2
 8011884:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (certsz > tls->recv_len - 11) {
 8011886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011888:	699b      	ldr	r3, [r3, #24]
 801188a:	3b0b      	subs	r3, #11
 801188c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801188e:	429a      	cmp	r2, r3
 8011890:	d90a      	bls.n	80118a8 <mg_tls_client_recv_cert+0xf4>
    mg_error(c, "certificate too long: %d vs %d", certsz, tls->recv_len - 11);
 8011892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011894:	699b      	ldr	r3, [r3, #24]
 8011896:	3b0b      	subs	r3, #11
 8011898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801189a:	497a      	ldr	r1, [pc, #488]	@ (8011a84 <mg_tls_client_recv_cert+0x2d0>)
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7f1 f8d7 	bl	8002a50 <mg_error>
    return -1;
 80118a2:	f04f 33ff 	mov.w	r3, #4294967295
 80118a6:	e12a      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
  }

  do {
    // secp256r1 public key
    if (mg_der_find(cert, certsz,
 80118a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	2308      	movs	r3, #8
 80118b0:	4a75      	ldr	r2, [pc, #468]	@ (8011a88 <mg_tls_client_recv_cert+0x2d4>)
 80118b2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80118b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80118b6:	f7fe f881 	bl	800f9bc <mg_der_find>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	da06      	bge.n	80118ce <mg_tls_client_recv_cert+0x11a>
                    (uint8_t *) "\x2A\x86\x48\xCE\x3D\x03\x01\x07", 8,
                    &oid) < 0) {
      mg_error(c, "certificate secp256r1 public key OID not found");
 80118c0:	4972      	ldr	r1, [pc, #456]	@ (8011a8c <mg_tls_client_recv_cert+0x2d8>)
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7f1 f8c4 	bl	8002a50 <mg_error>
      return -1;
 80118c8:	f04f 33ff 	mov.w	r3, #4294967295
 80118cc:	e117      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 80118ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118d2:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 80118d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118d8:	441a      	add	r2, r3
 80118da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118de:	440b      	add	r3, r1
 80118e0:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 80118e2:	4619      	mov	r1, r3
 80118e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80118e8:	461a      	mov	r2, r3
 80118ea:	f7fe f813 	bl	800f914 <mg_der_to_tlv>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	da06      	bge.n	8011902 <mg_tls_client_recv_cert+0x14e>
                      &pubkey) < 0) {
      mg_error(c, "certificate secp256r1 public key not found");
 80118f4:	4966      	ldr	r1, [pc, #408]	@ (8011a90 <mg_tls_client_recv_cert+0x2dc>)
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7f1 f8aa 	bl	8002a50 <mg_error>
      return -1;
 80118fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011900:	e0fd      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }

    // expect BIT STRING, unpadded, uncompressed: [0]+[4]+32+32 content bytes
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 8011902:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011906:	2b03      	cmp	r3, #3
 8011908:	d10b      	bne.n	8011922 <mg_tls_client_recv_cert+0x16e>
 801190a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801190c:	2b42      	cmp	r3, #66	@ 0x42
 801190e:	d108      	bne.n	8011922 <mg_tls_client_recv_cert+0x16e>
 8011910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d104      	bne.n	8011922 <mg_tls_client_recv_cert+0x16e>
        pubkey.value[1] != 4) {
 8011918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191a:	3301      	adds	r3, #1
 801191c:	781b      	ldrb	r3, [r3, #0]
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 801191e:	2b04      	cmp	r3, #4
 8011920:	d006      	beq.n	8011930 <mg_tls_client_recv_cert+0x17c>
      mg_error(c, "unsupported public key bitstring encoding");
 8011922:	495c      	ldr	r1, [pc, #368]	@ (8011a94 <mg_tls_client_recv_cert+0x2e0>)
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7f1 f893 	bl	8002a50 <mg_error>
      return -1;
 801192a:	f04f 33ff 	mov.w	r3, #4294967295
 801192e:	e0e6      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }
    memmove(tls->pubkey, pubkey.value + 2, pubkey.len - 2);
 8011930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011932:	f203 205e 	addw	r0, r3, #606	@ 0x25e
 8011936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011938:	1c99      	adds	r1, r3, #2
 801193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801193c:	3b02      	subs	r3, #2
 801193e:	461a      	mov	r2, r3
 8011940:	f013 fa72 	bl	8024e28 <memmove>
  } while (0);

  // Subject Alternative Names
  do {
    if (mg_der_find(cert, certsz, (uint8_t *) "\x55\x1d\x11", 3, &oid) < 0) {
 8011944:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	2303      	movs	r3, #3
 801194c:	4a52      	ldr	r2, [pc, #328]	@ (8011a98 <mg_tls_client_recv_cert+0x2e4>)
 801194e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011950:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011952:	f7fe f833 	bl	800f9bc <mg_der_find>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	da06      	bge.n	801196a <mg_tls_client_recv_cert+0x1b6>
      mg_error(c, "certificate does not contain subject alternative names");
 801195c:	494f      	ldr	r1, [pc, #316]	@ (8011a9c <mg_tls_client_recv_cert+0x2e8>)
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7f1 f876 	bl	8002a50 <mg_error>
      return -1;
 8011964:	f04f 33ff 	mov.w	r3, #4294967295
 8011968:	e0c9      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 801196a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801196c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801196e:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 8011970:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011974:	441a      	add	r2, r3
 8011976:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801197a:	440b      	add	r3, r1
 801197c:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 801197e:	4619      	mov	r1, r3
 8011980:	f107 0318 	add.w	r3, r7, #24
 8011984:	461a      	mov	r2, r3
 8011986:	f7fd ffc5 	bl	800f914 <mg_der_to_tlv>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	da06      	bge.n	801199e <mg_tls_client_recv_cert+0x1ea>
                      &seq) < 0) {
      mg_error(c, "certificate subject alternative names not found");
 8011990:	4943      	ldr	r1, [pc, #268]	@ (8011aa0 <mg_tls_client_recv_cert+0x2ec>)
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7f1 f85c 	bl	8002a50 <mg_error>
      return -1;
 8011998:	f04f 33ff 	mov.w	r3, #4294967295
 801199c:	e0af      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &seq) < 0) {
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	69f9      	ldr	r1, [r7, #28]
 80119a2:	f107 0218 	add.w	r2, r7, #24
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fd ffb4 	bl	800f914 <mg_der_to_tlv>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	da06      	bge.n	80119c0 <mg_tls_client_recv_cert+0x20c>
      mg_error(
 80119b2:	493c      	ldr	r1, [pc, #240]	@ (8011aa4 <mg_tls_client_recv_cert+0x2f0>)
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7f1 f84b 	bl	8002a50 <mg_error>
          c,
          "certificate subject alternative names is not a constructed object");
      return -1;
 80119ba:	f04f 33ff 	mov.w	r3, #4294967295
 80119be:	e09e      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }
    MG_VERBOSE(("verify hostname %s", tls->hostname));
 80119c0:	4b2a      	ldr	r3, [pc, #168]	@ (8011a6c <mg_tls_client_recv_cert+0x2b8>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b03      	cmp	r3, #3
 80119c6:	f340 8081 	ble.w	8011acc <mg_tls_client_recv_cert+0x318>
 80119ca:	4b29      	ldr	r3, [pc, #164]	@ (8011a70 <mg_tls_client_recv_cert+0x2bc>)
 80119cc:	f642 12e3 	movw	r2, #10723	@ 0x29e3
 80119d0:	4928      	ldr	r1, [pc, #160]	@ (8011a74 <mg_tls_client_recv_cert+0x2c0>)
 80119d2:	2004      	movs	r0, #4
 80119d4:	f7f6 fb28 	bl	8008028 <mg_log_prefix>
 80119d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119da:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80119de:	4619      	mov	r1, r3
 80119e0:	4831      	ldr	r0, [pc, #196]	@ (8011aa8 <mg_tls_client_recv_cert+0x2f4>)
 80119e2:	f7f6 fb71 	bl	80080c8 <mg_log>
    while (seq.len > 0) {
 80119e6:	e071      	b.n	8011acc <mg_tls_client_recv_cert+0x318>
      if (mg_der_to_tlv(seq.value, seq.len, &subj) < 0) {
 80119e8:	6a3b      	ldr	r3, [r7, #32]
 80119ea:	69f9      	ldr	r1, [r7, #28]
 80119ec:	f107 020c 	add.w	r2, r7, #12
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fd ff8f 	bl	800f914 <mg_der_to_tlv>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	da06      	bge.n	8011a0a <mg_tls_client_recv_cert+0x256>
        mg_error(c, "bad subject alternative name");
 80119fc:	492b      	ldr	r1, [pc, #172]	@ (8011aac <mg_tls_client_recv_cert+0x2f8>)
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7f1 f826 	bl	8002a50 <mg_error>
        return -1;
 8011a04:	f04f 33ff 	mov.w	r3, #4294967295
 8011a08:	e079      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
      }
      MG_VERBOSE(("subj=%.*s", subj.len, subj.value));
 8011a0a:	4b18      	ldr	r3, [pc, #96]	@ (8011a6c <mg_tls_client_recv_cert+0x2b8>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b03      	cmp	r3, #3
 8011a10:	dd0c      	ble.n	8011a2c <mg_tls_client_recv_cert+0x278>
 8011a12:	4b17      	ldr	r3, [pc, #92]	@ (8011a70 <mg_tls_client_recv_cert+0x2bc>)
 8011a14:	f642 12e9 	movw	r2, #10729	@ 0x29e9
 8011a18:	4916      	ldr	r1, [pc, #88]	@ (8011a74 <mg_tls_client_recv_cert+0x2c0>)
 8011a1a:	2004      	movs	r0, #4
 8011a1c:	f7f6 fb04 	bl	8008028 <mg_log_prefix>
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	697a      	ldr	r2, [r7, #20]
 8011a24:	4619      	mov	r1, r3
 8011a26:	4822      	ldr	r0, [pc, #136]	@ (8011ab0 <mg_tls_client_recv_cert+0x2fc>)
 8011a28:	f7f6 fb4e 	bl	80080c8 <mg_log>
      if (mg_match(mg_str((const char *) tls->hostname),
 8011a2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a2e:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8011a32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011a36:	4611      	mov	r1, r2
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7fd f9bd 	bl	800edb8 <mg_str_s>
                   mg_str_n((const char *) subj.value, subj.len), NULL)) {
 8011a3e:	6979      	ldr	r1, [r7, #20]
 8011a40:	693a      	ldr	r2, [r7, #16]
      if (mg_match(mg_str((const char *) tls->hostname),
 8011a42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fd f9d3 	bl	800edf2 <mg_str_n>
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011a54:	cb0c      	ldmia	r3, {r2, r3}
 8011a56:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8011a5a:	c903      	ldmia	r1, {r0, r1}
 8011a5c:	f7fd fab6 	bl	800efcc <mg_match>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d026      	beq.n	8011ab4 <mg_tls_client_recv_cert+0x300>
        subj_match = 1;
 8011a66:	2301      	movs	r3, #1
 8011a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
        break;
 8011a6a:	e032      	b.n	8011ad2 <mg_tls_client_recv_cert+0x31e>
 8011a6c:	24000240 	.word	0x24000240
 8011a70:	0802c33c 	.word	0x0802c33c
 8011a74:	08028ac4 	.word	0x08028ac4
 8011a78:	0802a9dc 	.word	0x0802a9dc
 8011a7c:	0802a9f4 	.word	0x0802a9f4
 8011a80:	0802aa24 	.word	0x0802aa24
 8011a84:	0802aa40 	.word	0x0802aa40
 8011a88:	0802aa60 	.word	0x0802aa60
 8011a8c:	0802aa6c 	.word	0x0802aa6c
 8011a90:	0802aa9c 	.word	0x0802aa9c
 8011a94:	0802aac8 	.word	0x0802aac8
 8011a98:	0802aaf4 	.word	0x0802aaf4
 8011a9c:	0802aaf8 	.word	0x0802aaf8
 8011aa0:	0802ab30 	.word	0x0802ab30
 8011aa4:	0802ab60 	.word	0x0802ab60
 8011aa8:	0802aba4 	.word	0x0802aba4
 8011aac:	0802abb8 	.word	0x0802abb8
 8011ab0:	0802abd8 	.word	0x0802abd8
      }
      seq.len = (uint32_t) (seq.value + seq.len - (subj.value + subj.len));
 8011ab4:	6a3a      	ldr	r2, [r7, #32]
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	441a      	add	r2, r3
 8011aba:	6979      	ldr	r1, [r7, #20]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	440b      	add	r3, r1
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	61fb      	str	r3, [r7, #28]
      seq.value = subj.value + subj.len;
 8011ac4:	697a      	ldr	r2, [r7, #20]
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	4413      	add	r3, r2
 8011aca:	623b      	str	r3, [r7, #32]
    while (seq.len > 0) {
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d18a      	bne.n	80119e8 <mg_tls_client_recv_cert+0x234>
    }
    if (!subj_match) {
 8011ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d106      	bne.n	8011ae6 <mg_tls_client_recv_cert+0x332>
      mg_error(c, "certificate did not match the hostname");
 8011ad8:	490b      	ldr	r1, [pc, #44]	@ (8011b08 <mg_tls_client_recv_cert+0x354>)
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7f0 ffb8 	bl	8002a50 <mg_error>
      return -1;
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae4:	e00b      	b.n	8011afe <mg_tls_client_recv_cert+0x34a>
    }
  } while (0);

  mg_tls_drop_message(c);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7fe f820 	bl	800fb2c <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 8011aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011aee:	f203 239e 	addw	r3, r3, #670	@ 0x29e
 8011af2:	2200      	movs	r2, #0
 8011af4:	4619      	mov	r1, r3
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7fe fd72 	bl	80105e0 <mg_tls_calc_cert_verify_hash>
  return 0;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3760      	adds	r7, #96	@ 0x60
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	0802abe4 	.word	0x0802abe4

08011b0c <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 8011b0c:	b5b0      	push	{r4, r5, r7, lr}
 8011b0e:	b0a0      	sub	sp, #128	@ 0x80
 8011b10:	af02      	add	r7, sp, #8
 8011b12:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011b1a:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7fe fc51 	bl	80103c4 <mg_tls_recv_record>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	da02      	bge.n	8011b2e <mg_tls_client_recv_cert_verify+0x22>
    return -1;
 8011b28:	f04f 33ff 	mov.w	r3, #4294967295
 8011b2c:	e09a      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011b32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	4413      	add	r3, r2
 8011b38:	673b      	str	r3, [r7, #112]	@ 0x70
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8011b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b0f      	cmp	r3, #15
 8011b40:	d009      	beq.n	8011b56 <mg_tls_client_recv_cert_verify+0x4a>
    mg_error(c, "expected server certificate verify but got msg 0x%02x", recv_buf[0]);
 8011b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	461a      	mov	r2, r3
 8011b48:	4948      	ldr	r1, [pc, #288]	@ (8011c6c <mg_tls_client_recv_cert_verify+0x160>)
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7f0 ff80 	bl	8002a50 <mg_error>
    return -1;
 8011b50:	f04f 33ff 	mov.w	r3, #4294967295
 8011b54:	e086      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>
  }
  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 8011b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b58:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d004      	beq.n	8011b6a <mg_tls_client_recv_cert_verify+0x5e>
    mg_tls_drop_message(c);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7fd ffe3 	bl	800fb2c <mg_tls_drop_message>
    return 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	e07c      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>

  // Extract certificate signature and verify it using pubkey and sighash
  do {
    uint8_t sig[64];
    struct mg_der_tlv seq, a, b;
    if (mg_der_to_tlv(recv_buf + 8, tls->recv_len - 8, &seq) < 0) {
 8011b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b6c:	f103 0008 	add.w	r0, r3, #8
 8011b70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b72:	699b      	ldr	r3, [r3, #24]
 8011b74:	3b08      	subs	r3, #8
 8011b76:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	f7fd feca 	bl	800f914 <mg_der_to_tlv>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	da06      	bge.n	8011b94 <mg_tls_client_recv_cert_verify+0x88>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 8011b86:	493a      	ldr	r1, [pc, #232]	@ (8011c70 <mg_tls_client_recv_cert_verify+0x164>)
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7f0 ff61 	bl	8002a50 <mg_error>
      return -1;
 8011b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b92:	e067      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &a) < 0) {
 8011b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011b98:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7fd feb9 	bl	800f914 <mg_der_to_tlv>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	da06      	bge.n	8011bb6 <mg_tls_client_recv_cert_verify+0xaa>
      mg_error(c, "missing first part of the signature");
 8011ba8:	4932      	ldr	r1, [pc, #200]	@ (8011c74 <mg_tls_client_recv_cert_verify+0x168>)
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7f0 ff50 	bl	8002a50 <mg_error>
      return -1;
 8011bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb4:	e056      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(a.value + a.len, seq.len - a.len, &b) < 0) {
 8011bb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011bb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bba:	18d0      	adds	r0, r2, r3
 8011bbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	f7fd fea4 	bl	800f914 <mg_der_to_tlv>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	da06      	bge.n	8011be0 <mg_tls_client_recv_cert_verify+0xd4>
      mg_error(c, "missing second part of the signature");
 8011bd2:	4929      	ldr	r1, [pc, #164]	@ (8011c78 <mg_tls_client_recv_cert_verify+0x16c>)
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7f0 ff3b 	bl	8002a50 <mg_error>
      return -1;
 8011bda:	f04f 33ff 	mov.w	r3, #4294967295
 8011bde:	e041      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>
    }
    // Integers may be padded with zeroes
    if (a.len > 32) {
 8011be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011be2:	2b20      	cmp	r3, #32
 8011be4:	d906      	bls.n	8011bf4 <mg_tls_client_recv_cert_verify+0xe8>
      a.value = a.value + (a.len - 32);
 8011be6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bea:	3b20      	subs	r3, #32
 8011bec:	4413      	add	r3, r2
 8011bee:	663b      	str	r3, [r7, #96]	@ 0x60
      a.len = 32;
 8011bf0:	2320      	movs	r3, #32
 8011bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    if (b.len > 32) {
 8011bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bf6:	2b20      	cmp	r3, #32
 8011bf8:	d906      	bls.n	8011c08 <mg_tls_client_recv_cert_verify+0xfc>
      b.value = b.value + (b.len - 32);
 8011bfa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bfe:	3b20      	subs	r3, #32
 8011c00:	4413      	add	r3, r2
 8011c02:	657b      	str	r3, [r7, #84]	@ 0x54
      b.len = 32;
 8011c04:	2320      	movs	r3, #32
 8011c06:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    memmove(sig, a.value, a.len);
 8011c08:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011c0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011c0c:	f107 030c 	add.w	r3, r7, #12
 8011c10:	4618      	mov	r0, r3
 8011c12:	f013 f909 	bl	8024e28 <memmove>
    memmove(sig + 32, b.value, b.len);
 8011c16:	f107 030c 	add.w	r3, r7, #12
 8011c1a:	3320      	adds	r3, #32
 8011c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c20:	4618      	mov	r0, r3
 8011c22:	f013 f901 	bl	8024e28 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 8011c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011c28:	f203 245e 	addw	r4, r3, #606	@ 0x25e
 8011c2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011c2e:	f203 259e 	addw	r5, r3, #670	@ 0x29e
 8011c32:	f003 fc83 	bl	801553c <mg_uecc_secp256r1>
 8011c36:	4602      	mov	r2, r0
 8011c38:	f107 030c 	add.w	r3, r7, #12
 8011c3c:	9200      	str	r2, [sp, #0]
 8011c3e:	2220      	movs	r2, #32
 8011c40:	4629      	mov	r1, r5
 8011c42:	4620      	mov	r0, r4
 8011c44:	f004 fe16 	bl	8016874 <mg_uecc_verify>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d006      	beq.n	8011c5c <mg_tls_client_recv_cert_verify+0x150>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify certificate");
 8011c4e:	490b      	ldr	r1, [pc, #44]	@ (8011c7c <mg_tls_client_recv_cert_verify+0x170>)
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f7f0 fefd 	bl	8002a50 <mg_error>
      return -1;
 8011c56:	f04f 33ff 	mov.w	r3, #4294967295
 8011c5a:	e003      	b.n	8011c64 <mg_tls_client_recv_cert_verify+0x158>
    }
  } while (0);

  mg_tls_drop_message(c);
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f7fd ff65 	bl	800fb2c <mg_tls_drop_message>
  return 0;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3778      	adds	r7, #120	@ 0x78
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8011c6c:	0802ac0c 	.word	0x0802ac0c
 8011c70:	0802ac44 	.word	0x0802ac44
 8011c74:	0802ac78 	.word	0x0802ac78
 8011c78:	0802ac9c 	.word	0x0802ac9c
 8011c7c:	0802acc4 	.word	0x0802acc4

08011c80 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011c8e:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f7fe fb97 	bl	80103c4 <mg_tls_recv_record>
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	da02      	bge.n	8011ca2 <mg_tls_client_recv_finish+0x22>
    return -1;
 8011c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca0:	e017      	b.n	8011cd2 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	695b      	ldr	r3, [r3, #20]
 8011caa:	4413      	add	r3, r2
 8011cac:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	2b14      	cmp	r3, #20
 8011cb4:	d009      	beq.n	8011cca <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	4907      	ldr	r1, [pc, #28]	@ (8011cdc <mg_tls_client_recv_finish+0x5c>)
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7f0 fec6 	bl	8002a50 <mg_error>
    return -1;
 8011cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc8:	e003      	b.n	8011cd2 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7fd ff2e 	bl	800fb2c <mg_tls_drop_message>
  return 0;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	0802ace4 	.word	0x0802ace4

08011ce0 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b0b4      	sub	sp, #208	@ 0xd0
 8011ce4:	af02      	add	r7, sp, #8
 8011ce6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011cee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8011cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8011cfc:	4a23      	ldr	r2, [pc, #140]	@ (8011d8c <mg_tls_client_send_finish+0xac>)
 8011cfe:	f107 030c 	add.w	r3, r7, #12
 8011d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d06:	6018      	str	r0, [r3, #0]
 8011d08:	3304      	adds	r3, #4
 8011d0a:	7019      	strb	r1, [r3, #0]
 8011d0c:	f107 0311 	add.w	r3, r7, #17
 8011d10:	221f      	movs	r2, #31
 8011d12:	2100      	movs	r1, #0
 8011d14:	4618      	mov	r0, r3
 8011d16:	f013 f8a1 	bl	8024e5c <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8011d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d1e:	f103 0120 	add.w	r1, r3, #32
 8011d22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011d26:	2270      	movs	r2, #112	@ 0x70
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f013 f87d 	bl	8024e28 <memmove>
  mg_sha256_final(hash, &sha256);
 8011d2e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8011d32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011d36:	4611      	mov	r1, r2
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fc fb54 	bl	800e3e6 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8011d3e:	f107 000c 	add.w	r0, r7, #12
 8011d42:	3004      	adds	r0, #4
 8011d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d48:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8011d4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011d50:	2220      	movs	r2, #32
 8011d52:	9200      	str	r2, [sp, #0]
 8011d54:	2220      	movs	r2, #32
 8011d56:	f7fc fc7e 	bl	800e656 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8011d5a:	f107 010c 	add.w	r1, r7, #12
 8011d5e:	2316      	movs	r3, #22
 8011d60:	2224      	movs	r2, #36	@ 0x24
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7fe fa32 	bl	80101cc <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 8011d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011d6c:	6819      	ldr	r1, [r3, #0]
 8011d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	461a      	mov	r2, r3
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7f9 fcae 	bl	800b6d8 <mg_io_send>
  wio->len = 0;
 8011d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011d80:	2200      	movs	r2, #0
 8011d82:	609a      	str	r2, [r3, #8]
}
 8011d84:	bf00      	nop
 8011d86:	37c8      	adds	r7, #200	@ 0xc8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	0802a80c 	.word	0x0802a80c

08011d90 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b0e4      	sub	sp, #400	@ 0x190
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011d9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011d9e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011da0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011da4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011dae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 8011db2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	2b05      	cmp	r3, #5
 8011dba:	f200 80d1 	bhi.w	8011f60 <mg_tls_client_handshake+0x1d0>
 8011dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8011dc4 <mg_tls_client_handshake+0x34>)
 8011dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc4:	08011ddd 	.word	0x08011ddd
 8011dc8:	08011df3 	.word	0x08011df3
 8011dcc:	08011e11 	.word	0x08011e11
 8011dd0:	08011e2f 	.word	0x08011e2f
 8011dd4:	08011e4d 	.word	0x08011e4d
 8011dd8:	08011e6b 	.word	0x08011e6b
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 8011ddc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011de0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011de4:	6818      	ldr	r0, [r3, #0]
 8011de6:	f7ff f98d 	bl	8011104 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 8011dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011dee:	2201      	movs	r2, #1
 8011df0:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8011df2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011df6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011dfa:	6818      	ldr	r0, [r3, #0]
 8011dfc:	f7ff fb76 	bl	80114ec <mg_tls_client_recv_hello>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f2c0 80b9 	blt.w	8011f7a <mg_tls_client_handshake+0x1ea>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8011e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e0c:	2202      	movs	r2, #2
 8011e0e:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8011e10:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e18:	6818      	ldr	r0, [r3, #0]
 8011e1a:	f7ff fc9b 	bl	8011754 <mg_tls_client_recv_ext>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f2c0 80ac 	blt.w	8011f7e <mg_tls_client_handshake+0x1ee>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 8011e26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e2a:	2203      	movs	r2, #3
 8011e2c:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 8011e2e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e32:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e36:	6818      	ldr	r0, [r3, #0]
 8011e38:	f7ff fcbc 	bl	80117b4 <mg_tls_client_recv_cert>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f2c0 809f 	blt.w	8011f82 <mg_tls_client_handshake+0x1f2>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 8011e44:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e48:	2204      	movs	r2, #4
 8011e4a:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 8011e4c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e50:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e54:	6818      	ldr	r0, [r3, #0]
 8011e56:	f7ff fe59 	bl	8011b0c <mg_tls_client_recv_cert_verify>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	f2c0 8092 	blt.w	8011f86 <mg_tls_client_handshake+0x1f6>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISHED;
 8011e62:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e66:	2205      	movs	r2, #5
 8011e68:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISHED:
      if (mg_tls_client_recv_finish(c) < 0) {
 8011e6a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e72:	6818      	ldr	r0, [r3, #0]
 8011e74:	f7ff ff04 	bl	8011c80 <mg_tls_client_recv_finish>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f2c0 8085 	blt.w	8011f8a <mg_tls_client_handshake+0x1fa>
        break;
      }
      if (tls->cert_requested) {
 8011e80:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e84:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d04b      	beq.n	8011f24 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 8011e8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e90:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8011e94:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011e98:	22c0      	movs	r2, #192	@ 0xc0
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	f013 f929 	bl	80250f2 <memcpy>
        mg_tls_generate_application_keys(c);
 8011ea0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011ea4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ea8:	6818      	ldr	r0, [r3, #0]
 8011eaa:	f7fe f877 	bl	800ff9c <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 8011eae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011eb2:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8011eb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011eba:	4610      	mov	r0, r2
 8011ebc:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011ec0:	22c0      	movs	r2, #192	@ 0xc0
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	f013 f915 	bl	80250f2 <memcpy>
        tls->enc = hs_keys;
 8011ec8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011ecc:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011ed0:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8011ed4:	22c0      	movs	r2, #192	@ 0xc0
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f013 f90b 	bl	80250f2 <memcpy>
        mg_tls_server_send_cert(c);
 8011edc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011ee0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ee4:	6818      	ldr	r0, [r3, #0]
 8011ee6:	f7fe fe6b 	bl	8010bc0 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 8011eea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011eee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	6818      	ldr	r0, [r3, #0]
 8011ef6:	f7fe ff25 	bl	8010d44 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 8011efa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011efe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011f02:	6818      	ldr	r0, [r3, #0]
 8011f04:	f7ff feec 	bl	8011ce0 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 8011f08:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011f0c:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8011f10:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8011f14:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011f18:	4611      	mov	r1, r2
 8011f1a:	22c0      	movs	r2, #192	@ 0xc0
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f013 f8e8 	bl	80250f2 <memcpy>
 8011f22:	e00d      	b.n	8011f40 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 8011f24:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011f28:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011f2c:	6818      	ldr	r0, [r3, #0]
 8011f2e:	f7ff fed7 	bl	8011ce0 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 8011f32:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011f36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011f3a:	6818      	ldr	r0, [r3, #0]
 8011f3c:	f7fe f82e 	bl	800ff9c <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 8011f40:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011f44:	2206      	movs	r2, #6
 8011f46:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8011f48:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011f4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011f56:	f36f 13c7 	bfc	r3, #7, #1
 8011f5a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      break;
 8011f5e:	e015      	b.n	8011f8c <mg_tls_client_handshake+0x1fc>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 8011f60:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	461a      	mov	r2, r3
 8011f68:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011f6c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011f70:	4909      	ldr	r1, [pc, #36]	@ (8011f98 <mg_tls_client_handshake+0x208>)
 8011f72:	6818      	ldr	r0, [r3, #0]
 8011f74:	f7f0 fd6c 	bl	8002a50 <mg_error>
      break;
 8011f78:	e008      	b.n	8011f8c <mg_tls_client_handshake+0x1fc>
        break;
 8011f7a:	bf00      	nop
 8011f7c:	e006      	b.n	8011f8c <mg_tls_client_handshake+0x1fc>
        break;
 8011f7e:	bf00      	nop
 8011f80:	e004      	b.n	8011f8c <mg_tls_client_handshake+0x1fc>
        break;
 8011f82:	bf00      	nop
 8011f84:	e002      	b.n	8011f8c <mg_tls_client_handshake+0x1fc>
        break;
 8011f86:	bf00      	nop
 8011f88:	e000      	b.n	8011f8c <mg_tls_client_handshake+0x1fc>
        break;
 8011f8a:	bf00      	nop
  }
}
 8011f8c:	bf00      	nop
 8011f8e:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	0802ad10 	.word	0x0802ad10

08011f9c <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011faa:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	2b07      	cmp	r3, #7
 8011fb2:	d002      	beq.n	8011fba <mg_tls_server_handshake+0x1e>
 8011fb4:	2b08      	cmp	r3, #8
 8011fb6:	d01c      	beq.n	8011ff2 <mg_tls_server_handshake+0x56>
 8011fb8:	e02f      	b.n	801201a <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7fe fbb2 	bl	8010724 <mg_tls_server_recv_hello>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	db31      	blt.n	801202a <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f7fe fd20 	bl	8010a0c <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7fd fe95 	bl	800fcfc <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7fe fdce 	bl	8010b74 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7fe fdf1 	bl	8010bc0 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 8011fde:	2100      	movs	r1, #0
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7fe feaf 	bl	8010d44 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f7fe ffea 	bl	8010fc0 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2208      	movs	r2, #8
 8011ff0:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f7ff f846 	bl	8011084 <mg_tls_server_recv_finish>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	db17      	blt.n	801202e <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7fd ffcc 	bl	800ff9c <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2209      	movs	r2, #9
 8012008:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012010:	f36f 13c7 	bfc	r3, #7, #1
 8012014:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8012018:	e00a      	b.n	8012030 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	461a      	mov	r2, r3
 8012020:	4905      	ldr	r1, [pc, #20]	@ (8012038 <mg_tls_server_handshake+0x9c>)
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7f0 fd14 	bl	8002a50 <mg_error>
      break;
 8012028:	e002      	b.n	8012030 <mg_tls_server_handshake+0x94>
        return;
 801202a:	bf00      	nop
 801202c:	e000      	b.n	8012030 <mg_tls_server_handshake+0x94>
        return;
 801202e:	bf00      	nop
  }
}
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	0802ad2c 	.word	0x0802ad2c

0801203c <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  if (c->is_client) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801204a:	f003 0302 	and.w	r3, r3, #2
 801204e:	b2db      	uxtb	r3, r3
 8012050:	2b00      	cmp	r3, #0
 8012052:	d003      	beq.n	801205c <mg_tls_handshake+0x20>
    mg_tls_client_handshake(c);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff fe9b 	bl	8011d90 <mg_tls_client_handshake>
  } else {
    mg_tls_server_handshake(c);
  }
}
 801205a:	e002      	b.n	8012062 <mg_tls_handshake+0x26>
    mg_tls_server_handshake(c);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7ff ff9d 	bl	8011f9c <mg_tls_server_handshake>
}
 8012062:	bf00      	nop
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
	...

0801206c <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 801206c:	b590      	push	{r4, r7, lr}
 801206e:	b09b      	sub	sp, #108	@ 0x6c
 8012070:	af02      	add	r7, sp, #8
 8012072:	f107 0410 	add.w	r4, r7, #16
 8012076:	e884 0003 	stmia.w	r4, {r0, r1}
 801207a:	f107 0108 	add.w	r1, r7, #8
 801207e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 8012082:	2300      	movs	r3, #0
 8012084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012086:	2300      	movs	r3, #0
 8012088:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801208a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801208e:	4946      	ldr	r1, [pc, #280]	@ (80121a8 <mg_parse_pem+0x13c>)
 8012090:	4618      	mov	r0, r3
 8012092:	f7fc fe91 	bl	800edb8 <mg_str_s>
 8012096:	f107 0318 	add.w	r3, r7, #24
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80120a0:	cb0c      	ldmia	r3, {r2, r3}
 80120a2:	f107 0110 	add.w	r1, r7, #16
 80120a6:	c903      	ldmia	r1, {r0, r1}
 80120a8:	f7fc ff90 	bl	800efcc <mg_match>
 80120ac:	4603      	mov	r3, r0
 80120ae:	f083 0301 	eor.w	r3, r3, #1
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d00f      	beq.n	80120d8 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 80120b8:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 80120ba:	4638      	mov	r0, r7
 80120bc:	f107 0310 	add.w	r3, r7, #16
 80120c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80120c4:	f7fc fec2 	bl	800ee4c <mg_strdup>
 80120c8:	4622      	mov	r2, r4
 80120ca:	463b      	mov	r3, r7
 80120cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80120d0:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 80120d4:	2300      	movs	r3, #0
 80120d6:	e062      	b.n	801219e <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 80120d8:	f107 0308 	add.w	r3, r7, #8
 80120dc:	cb0c      	ldmia	r3, {r2, r3}
 80120de:	f107 0120 	add.w	r1, r7, #32
 80120e2:	c903      	ldmia	r1, {r0, r1}
 80120e4:	f7fc fee9 	bl	800eeba <mg_strcmp>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d10a      	bne.n	8012104 <mg_parse_pem+0x98>
 80120ee:	f107 0308 	add.w	r3, r7, #8
 80120f2:	cb0c      	ldmia	r3, {r2, r3}
 80120f4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80120f8:	c903      	ldmia	r1, {r0, r1}
 80120fa:	f7fc fede 	bl	800eeba <mg_strcmp>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d002      	beq.n	801210a <mg_parse_pem+0x9e>
    return -1;  // bad label
 8012104:	f04f 33ff 	mov.w	r3, #4294967295
 8012108:	e049      	b.n	801219e <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801210a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801210c:	4619      	mov	r1, r3
 801210e:	2001      	movs	r0, #1
 8012110:	f011 fbf4 	bl	80238fc <calloc>
 8012114:	4603      	mov	r3, r0
 8012116:	653b      	str	r3, [r7, #80]	@ 0x50
 8012118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801211a:	2b00      	cmp	r3, #0
 801211c:	d102      	bne.n	8012124 <mg_parse_pem+0xb8>
    return -1;
 801211e:	f04f 33ff 	mov.w	r3, #4294967295
 8012122:	e03c      	b.n	801219e <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8012124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012126:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012128:	e01c      	b.n	8012164 <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801212a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	2b20      	cmp	r3, #32
 8012130:	d014      	beq.n	801215c <mg_parse_pem+0xf0>
 8012132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	2b0a      	cmp	r3, #10
 8012138:	d010      	beq.n	801215c <mg_parse_pem+0xf0>
 801213a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	2b0d      	cmp	r3, #13
 8012140:	d00c      	beq.n	801215c <mg_parse_pem+0xf0>
 8012142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	2b09      	cmp	r3, #9
 8012148:	d008      	beq.n	801215c <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 801214a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801214c:	1c5a      	adds	r2, r3, #1
 801214e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8012150:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012152:	4413      	add	r3, r2
 8012154:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012156:	7812      	ldrb	r2, [r2, #0]
 8012158:	701a      	strb	r2, [r3, #0]
 801215a:	e000      	b.n	801215e <mg_parse_pem+0xf2>
      continue;
 801215c:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801215e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012160:	3301      	adds	r3, #1
 8012162:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012168:	4413      	add	r3, r2
 801216a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801216c:	429a      	cmp	r2, r3
 801216e:	d3dc      	bcc.n	801212a <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 8012170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012172:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012174:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8012176:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012178:	f7ef fa34 	bl	80015e4 <mg_base64_decode>
 801217c:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 801217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012180:	2b00      	cmp	r3, #0
 8012182:	d105      	bne.n	8012190 <mg_parse_pem+0x124>
    free(s);
 8012184:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012186:	f011 fbdd 	bl	8023944 <free>
    return -1;
 801218a:	f04f 33ff 	mov.w	r3, #4294967295
 801218e:	e006      	b.n	801219e <mg_parse_pem+0x132>
  }
  der->buf = s;
 8012190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012192:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012194:	601a      	str	r2, [r3, #0]
  der->len = m;
 8012196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012198:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801219a:	605a      	str	r2, [r3, #4]
  return 0;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3764      	adds	r7, #100	@ 0x64
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd90      	pop	{r4, r7, pc}
 80121a6:	bf00      	nop
 80121a8:	0802ad48 	.word	0x0802ad48

080121ac <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b08e      	sub	sp, #56	@ 0x38
 80121b0:	af02      	add	r7, sp, #8
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 80121b6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80121ba:	2001      	movs	r0, #1
 80121bc:	f011 fb9e 	bl	80238fc <calloc>
 80121c0:	4603      	mov	r3, r0
 80121c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (tls == NULL) {
 80121c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d104      	bne.n	80121d4 <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 80121ca:	4990      	ldr	r1, [pc, #576]	@ (801240c <mg_tls_init+0x260>)
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7f0 fc3f 	bl	8002a50 <mg_error>
    return;
 80121d2:	e117      	b.n	8012404 <mg_tls_init+0x258>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80121da:	f003 0302 	and.w	r3, r3, #2
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d001      	beq.n	80121e8 <mg_tls_init+0x3c>
 80121e4:	2200      	movs	r2, #0
 80121e6:	e000      	b.n	80121ea <mg_tls_init+0x3e>
 80121e8:	2207      	movs	r2, #7
  tls->state =
 80121ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ec:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	6a1a      	ldr	r2, [r3, #32]
 80121f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  //tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801220a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012214:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012218:	b2d9      	uxtb	r1, r3
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012220:	f361 1386 	bfi	r3, r1, #6, #1
 8012224:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 8012228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222a:	3320      	adds	r3, #32
 801222c:	4618      	mov	r0, r3
 801222e:	f7fb fe5d 	bl	800deec <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	69db      	ldr	r3, [r3, #28]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d018      	beq.n	801226c <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	69db      	ldr	r3, [r3, #28]
 801223e:	2bfc      	cmp	r3, #252	@ 0xfc
 8012240:	d904      	bls.n	801224c <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 8012242:	4973      	ldr	r1, [pc, #460]	@ (8012410 <mg_tls_init+0x264>)
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f7f0 fc03 	bl	8002a50 <mg_error>
      return;
 801224a:	e0db      	b.n	8012404 <mg_tls_init+0x258>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 801224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224e:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	699b      	ldr	r3, [r3, #24]
 8012256:	22fd      	movs	r2, #253	@ 0xfd
 8012258:	4619      	mov	r1, r3
 801225a:	f012 fe26 	bl	8024eaa <strncpy>
    tls->hostname[opts->name.len] = 0;
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	69db      	ldr	r3, [r3, #28]
 8012262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012264:	4413      	add	r3, r2
 8012266:	2200      	movs	r2, #0
 8012268:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
  }

  if (opts->cert.buf == NULL) {
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	689b      	ldr	r3, [r3, #8]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d10f      	bne.n	8012294 <mg_tls_init+0xe8>
    MG_VERBOSE(("no certificate provided"));
 8012274:	4b67      	ldr	r3, [pc, #412]	@ (8012414 <mg_tls_init+0x268>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b03      	cmp	r3, #3
 801227a:	f340 80bc 	ble.w	80123f6 <mg_tls_init+0x24a>
 801227e:	4b66      	ldr	r3, [pc, #408]	@ (8012418 <mg_tls_init+0x26c>)
 8012280:	f642 22f3 	movw	r2, #10995	@ 0x2af3
 8012284:	4965      	ldr	r1, [pc, #404]	@ (801241c <mg_tls_init+0x270>)
 8012286:	2004      	movs	r0, #4
 8012288:	f7f5 fece 	bl	8008028 <mg_log_prefix>
 801228c:	4864      	ldr	r0, [pc, #400]	@ (8012420 <mg_tls_init+0x274>)
 801228e:	f7f5 ff1b 	bl	80080c8 <mg_log>
    return;
 8012292:	e0b0      	b.n	80123f6 <mg_tls_init+0x24a>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 8012294:	f107 0314 	add.w	r3, r7, #20
 8012298:	4962      	ldr	r1, [pc, #392]	@ (8012424 <mg_tls_init+0x278>)
 801229a:	4618      	mov	r0, r3
 801229c:	f7fc fd8c 	bl	800edb8 <mg_str_s>
 80122a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80122a6:	6839      	ldr	r1, [r7, #0]
 80122a8:	9300      	str	r3, [sp, #0]
 80122aa:	f107 0314 	add.w	r3, r7, #20
 80122ae:	cb0c      	ldmia	r3, {r2, r3}
 80122b0:	3108      	adds	r1, #8
 80122b2:	c903      	ldmia	r1, {r0, r1}
 80122b4:	f7ff feda 	bl	801206c <mg_parse_pem>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	da0f      	bge.n	80122de <mg_tls_init+0x132>
    MG_ERROR(("Failed to load certificate"));
 80122be:	4b55      	ldr	r3, [pc, #340]	@ (8012414 <mg_tls_init+0x268>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f340 8099 	ble.w	80123fa <mg_tls_init+0x24e>
 80122c8:	4b53      	ldr	r3, [pc, #332]	@ (8012418 <mg_tls_init+0x26c>)
 80122ca:	f642 22f9 	movw	r2, #11001	@ 0x2af9
 80122ce:	4953      	ldr	r1, [pc, #332]	@ (801241c <mg_tls_init+0x270>)
 80122d0:	2001      	movs	r0, #1
 80122d2:	f7f5 fea9 	bl	8008028 <mg_log_prefix>
 80122d6:	4854      	ldr	r0, [pc, #336]	@ (8012428 <mg_tls_init+0x27c>)
 80122d8:	f7f5 fef6 	bl	80080c8 <mg_log>
    return;
 80122dc:	e08d      	b.n	80123fa <mg_tls_init+0x24e>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	691b      	ldr	r3, [r3, #16]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d104      	bne.n	80122f0 <mg_tls_init+0x144>
    mg_error(c, "certificate provided without a private key");
 80122e6:	4951      	ldr	r1, [pc, #324]	@ (801242c <mg_tls_init+0x280>)
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7f0 fbb1 	bl	8002a50 <mg_error>
    return;
 80122ee:	e089      	b.n	8012404 <mg_tls_init+0x258>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 80122f0:	f107 031c 	add.w	r3, r7, #28
 80122f4:	494e      	ldr	r1, [pc, #312]	@ (8012430 <mg_tls_init+0x284>)
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fc fd5e 	bl	800edb8 <mg_str_s>
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	f107 030c 	add.w	r3, r7, #12
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	f107 031c 	add.w	r3, r7, #28
 8012308:	cb0c      	ldmia	r3, {r2, r3}
 801230a:	3110      	adds	r1, #16
 801230c:	c903      	ldmia	r1, {r0, r1}
 801230e:	f7ff fead 	bl	801206c <mg_parse_pem>
 8012312:	4603      	mov	r3, r0
 8012314:	2b00      	cmp	r3, #0
 8012316:	d150      	bne.n	80123ba <mg_tls_init+0x20e>
    if (key.len < 39) {
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	2b26      	cmp	r3, #38	@ 0x26
 801231c:	d80e      	bhi.n	801233c <mg_tls_init+0x190>
      MG_ERROR(("EC private key too short"));
 801231e:	4b3d      	ldr	r3, [pc, #244]	@ (8012414 <mg_tls_init+0x268>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	dd6b      	ble.n	80123fe <mg_tls_init+0x252>
 8012326:	4b3c      	ldr	r3, [pc, #240]	@ (8012418 <mg_tls_init+0x26c>)
 8012328:	f642 3205 	movw	r2, #11013	@ 0x2b05
 801232c:	493b      	ldr	r1, [pc, #236]	@ (801241c <mg_tls_init+0x270>)
 801232e:	2001      	movs	r0, #1
 8012330:	f7f5 fe7a 	bl	8008028 <mg_log_prefix>
 8012334:	483f      	ldr	r0, [pc, #252]	@ (8012434 <mg_tls_init+0x288>)
 8012336:	f7f5 fec7 	bl	80080c8 <mg_log>
      return;
 801233a:	e060      	b.n	80123fe <mg_tls_init+0x252>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	2b30      	cmp	r3, #48	@ 0x30
 8012342:	d105      	bne.n	8012350 <mg_tls_init+0x1a4>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	3301      	adds	r3, #1
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	b25b      	sxtb	r3, r3
 801234c:	2b00      	cmp	r3, #0
 801234e:	da0e      	bge.n	801236e <mg_tls_init+0x1c2>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 8012350:	4b30      	ldr	r3, [pc, #192]	@ (8012414 <mg_tls_init+0x268>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	dd54      	ble.n	8012402 <mg_tls_init+0x256>
 8012358:	4b2f      	ldr	r3, [pc, #188]	@ (8012418 <mg_tls_init+0x26c>)
 801235a:	f642 320b 	movw	r2, #11019	@ 0x2b0b
 801235e:	492f      	ldr	r1, [pc, #188]	@ (801241c <mg_tls_init+0x270>)
 8012360:	2001      	movs	r0, #1
 8012362:	f7f5 fe61 	bl	8008028 <mg_log_prefix>
 8012366:	4834      	ldr	r0, [pc, #208]	@ (8012438 <mg_tls_init+0x28c>)
 8012368:	f7f5 feae 	bl	80080c8 <mg_log>
      return;
 801236c:	e049      	b.n	8012402 <mg_tls_init+0x256>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	3302      	adds	r3, #2
 8012372:	2205      	movs	r2, #5
 8012374:	4931      	ldr	r1, [pc, #196]	@ (801243c <mg_tls_init+0x290>)
 8012376:	4618      	mov	r0, r3
 8012378:	f012 fd46 	bl	8024e08 <memcmp>
 801237c:	4603      	mov	r3, r0
 801237e:	2b00      	cmp	r3, #0
 8012380:	d00d      	beq.n	801239e <mg_tls_init+0x1f2>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 8012382:	4b24      	ldr	r3, [pc, #144]	@ (8012414 <mg_tls_init+0x268>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	dd09      	ble.n	801239e <mg_tls_init+0x1f2>
 801238a:	4b23      	ldr	r3, [pc, #140]	@ (8012418 <mg_tls_init+0x26c>)
 801238c:	f642 320f 	movw	r2, #11023	@ 0x2b0f
 8012390:	4922      	ldr	r1, [pc, #136]	@ (801241c <mg_tls_init+0x270>)
 8012392:	2001      	movs	r0, #1
 8012394:	f7f5 fe48 	bl	8008028 <mg_log_prefix>
 8012398:	4829      	ldr	r0, [pc, #164]	@ (8012440 <mg_tls_init+0x294>)
 801239a:	f7f5 fe95 	bl	80080c8 <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 801239e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123a0:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	3307      	adds	r3, #7
 80123a8:	2220      	movs	r2, #32
 80123aa:	4619      	mov	r1, r3
 80123ac:	f012 fd3c 	bl	8024e28 <memmove>
    free((void *) key.buf);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	4618      	mov	r0, r3
 80123b4:	f011 fac6 	bl	8023944 <free>
 80123b8:	e024      	b.n	8012404 <mg_tls_init+0x258>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 80123ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80123be:	4921      	ldr	r1, [pc, #132]	@ (8012444 <mg_tls_init+0x298>)
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fc fcf9 	bl	800edb8 <mg_str_s>
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	f107 030c 	add.w	r3, r7, #12
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80123d2:	cb0c      	ldmia	r3, {r2, r3}
 80123d4:	3110      	adds	r1, #16
 80123d6:	c903      	ldmia	r1, {r0, r1}
 80123d8:	f7ff fe48 	bl	801206c <mg_parse_pem>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d104      	bne.n	80123ec <mg_tls_init+0x240>
    mg_error(c, "PKCS8 private key format is not supported");
 80123e2:	4919      	ldr	r1, [pc, #100]	@ (8012448 <mg_tls_init+0x29c>)
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7f0 fb33 	bl	8002a50 <mg_error>
 80123ea:	e00b      	b.n	8012404 <mg_tls_init+0x258>
  } else {
    mg_error(c, "expected EC PRIVATE KEY or PRIVATE KEY");
 80123ec:	4917      	ldr	r1, [pc, #92]	@ (801244c <mg_tls_init+0x2a0>)
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7f0 fb2e 	bl	8002a50 <mg_error>
 80123f4:	e006      	b.n	8012404 <mg_tls_init+0x258>
    return;
 80123f6:	bf00      	nop
 80123f8:	e004      	b.n	8012404 <mg_tls_init+0x258>
    return;
 80123fa:	bf00      	nop
 80123fc:	e002      	b.n	8012404 <mg_tls_init+0x258>
      return;
 80123fe:	bf00      	nop
 8012400:	e000      	b.n	8012404 <mg_tls_init+0x258>
      return;
 8012402:	bf00      	nop
  }
}
 8012404:	3730      	adds	r7, #48	@ 0x30
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	0802ad6c 	.word	0x0802ad6c
 8012410:	0802ad74 	.word	0x0802ad74
 8012414:	24000240 	.word	0x24000240
 8012418:	0802c354 	.word	0x0802c354
 801241c:	08028ac4 	.word	0x08028ac4
 8012420:	0802ad88 	.word	0x0802ad88
 8012424:	0802ada0 	.word	0x0802ada0
 8012428:	0802adac 	.word	0x0802adac
 801242c:	0802adc8 	.word	0x0802adc8
 8012430:	0802adf4 	.word	0x0802adf4
 8012434:	0802ae04 	.word	0x0802ae04
 8012438:	0802ae20 	.word	0x0802ae20
 801243c:	0802ae44 	.word	0x0802ae44
 8012440:	0802ae4c 	.word	0x0802ae4c
 8012444:	0802ae6c 	.word	0x0802ae6c
 8012448:	0802ae78 	.word	0x0802ae78
 801244c:	0802aea4 	.word	0x0802aea4

08012450 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8012450:	b580      	push	{r7, lr}
 8012452:	b084      	sub	sp, #16
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801245e:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00a      	beq.n	801247c <mg_tls_free+0x2c>
    mg_iobuf_free(&tls->send);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	3304      	adds	r3, #4
 801246a:	4618      	mov	r0, r3
 801246c:	f7f4 ff37 	bl	80072de <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012476:	4618      	mov	r0, r3
 8012478:	f011 fa64 	bl	8023944 <free>
  }
  free(c->tls);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012482:	4618      	mov	r0, r3
 8012484:	f011 fa5e 	bl	8023944 <free>
  c->tls = NULL;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8012490:	bf00      	nop
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8012498:	b580      	push	{r7, lr}
 801249a:	b086      	sub	sp, #24
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80124aa:	613b      	str	r3, [r7, #16]
  long n = MG_IO_WAIT;
 80124ac:	f06f 0301 	mvn.w	r3, #1
 80124b0:	617b      	str	r3, [r7, #20]
  if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80124b8:	d902      	bls.n	80124c0 <mg_tls_send+0x28>
 80124ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80124be:	607b      	str	r3, [r7, #4]
  if (len > 16384) len = 16384;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80124c6:	d902      	bls.n	80124ce <mg_tls_send+0x36>
 80124c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80124cc:	607b      	str	r3, [r7, #4]
  mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 80124ce:	2317      	movs	r3, #23
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	68b9      	ldr	r1, [r7, #8]
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7fd fe79 	bl	80101cc <mg_tls_encrypt>
  while (tls->send.len > 0 &&
 80124da:	e006      	b.n	80124ea <mg_tls_send+0x52>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	3304      	adds	r3, #4
 80124e0:	697a      	ldr	r2, [r7, #20]
 80124e2:	2100      	movs	r1, #0
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f4 feaf 	bl	8007248 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	68db      	ldr	r3, [r3, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d00b      	beq.n	801250a <mg_tls_send+0x72>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	6859      	ldr	r1, [r3, #4]
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	461a      	mov	r2, r3
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7f9 f8eb 	bl	800b6d8 <mg_io_send>
 8012502:	6178      	str	r0, [r7, #20]
  while (tls->send.len > 0 &&
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	2b00      	cmp	r3, #0
 8012508:	dce8      	bgt.n	80124dc <mg_tls_send+0x44>
  }
  if (n == MG_IO_ERR || n == MG_IO_WAIT) return n;
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012510:	d003      	beq.n	801251a <mg_tls_send+0x82>
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f113 0f02 	cmn.w	r3, #2
 8012518:	d101      	bne.n	801251e <mg_tls_send+0x86>
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	e000      	b.n	8012520 <mg_tls_send+0x88>
  return (long) len;
 801251e:	687b      	ldr	r3, [r7, #4]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3718      	adds	r7, #24
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8012528:	b580      	push	{r7, lr}
 801252a:	b088      	sub	sp, #32
 801252c:	af00      	add	r7, sp, #0
 801252e:	60f8      	str	r0, [r7, #12]
 8012530:	60b9      	str	r1, [r7, #8]
 8012532:	607a      	str	r2, [r7, #4]
  int r = 0;
 8012534:	2300      	movs	r3, #0
 8012536:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801253e:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f7fd ff3f 	bl	80103c4 <mg_tls_recv_record>
 8012546:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	2b00      	cmp	r3, #0
 801254c:	da01      	bge.n	8012552 <mg_tls_recv+0x2a>
    return r;
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	e032      	b.n	80125b8 <mg_tls_recv+0x90>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8012556:	69bb      	ldr	r3, [r7, #24]
 8012558:	695b      	ldr	r3, [r3, #20]
 801255a:	4413      	add	r3, r2
 801255c:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	7f1b      	ldrb	r3, [r3, #28]
 8012562:	2b17      	cmp	r3, #23
 8012564:	d008      	beq.n	8012578 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	2200      	movs	r2, #0
 801256a:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f7fd fabb 	bl	800fae8 <mg_tls_drop_record>
    return MG_IO_WAIT;
 8012572:	f06f 0301 	mvn.w	r3, #1
 8012576:	e01f      	b.n	80125b8 <mg_tls_recv+0x90>
  }
  minlen = len < tls->recv_len ? len : tls->recv_len;
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	699b      	ldr	r3, [r3, #24]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	4293      	cmp	r3, r2
 8012580:	bf28      	it	cs
 8012582:	4613      	movcs	r3, r2
 8012584:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 8012586:	693a      	ldr	r2, [r7, #16]
 8012588:	6979      	ldr	r1, [r7, #20]
 801258a:	68b8      	ldr	r0, [r7, #8]
 801258c:	f012 fc4c 	bl	8024e28 <memmove>
  tls->recv_offset += minlen;
 8012590:	69bb      	ldr	r3, [r7, #24]
 8012592:	695a      	ldr	r2, [r3, #20]
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	441a      	add	r2, r3
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	699a      	ldr	r2, [r3, #24]
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	1ad2      	subs	r2, r2, r3
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	699b      	ldr	r3, [r3, #24]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d102      	bne.n	80125b6 <mg_tls_recv+0x8e>
    mg_tls_drop_record(c);
 80125b0:	68f8      	ldr	r0, [r7, #12]
 80125b2:	f7fd fa99 	bl	800fae8 <mg_tls_drop_record>
  }
  return (long) minlen;
 80125b6:	693b      	ldr	r3, [r7, #16]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3720      	adds	r7, #32
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  return mg_tls_got_record(c) ? 1 : 0;
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7fd fa66 	bl	800fa9a <mg_tls_got_record>
 80125ce:	4603      	mov	r3, r0
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 80125d8:	b480      	push	{r7}
 80125da:	b083      	sub	sp, #12
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 80125e0:	bf00      	nop
 80125e2:	370c      	adds	r7, #12
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 80125ec:	b480      	push	{r7}
 80125ee:	b085      	sub	sp, #20
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
 80125f8:	603b      	str	r3, [r7, #0]
#ifdef static_assert
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
  state[0] = 0x61707865;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	4a2b      	ldr	r2, [pc, #172]	@ (80126ac <initialize_state+0xc0>)
 80125fe:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	3304      	adds	r3, #4
 8012604:	4a2a      	ldr	r2, [pc, #168]	@ (80126b0 <initialize_state+0xc4>)
 8012606:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	3308      	adds	r3, #8
 801260c:	4a29      	ldr	r2, [pc, #164]	@ (80126b4 <initialize_state+0xc8>)
 801260e:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	330c      	adds	r3, #12
 8012614:	4a28      	ldr	r2, [pc, #160]	@ (80126b8 <initialize_state+0xcc>)
 8012616:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	3310      	adds	r3, #16
 801261c:	68ba      	ldr	r2, [r7, #8]
 801261e:	6812      	ldr	r2, [r2, #0]
 8012620:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	3314      	adds	r3, #20
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	3204      	adds	r2, #4
 801262a:	6812      	ldr	r2, [r2, #0]
 801262c:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3318      	adds	r3, #24
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	3208      	adds	r2, #8
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	331c      	adds	r3, #28
 801263e:	68ba      	ldr	r2, [r7, #8]
 8012640:	320c      	adds	r2, #12
 8012642:	6812      	ldr	r2, [r2, #0]
 8012644:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	3320      	adds	r3, #32
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	3210      	adds	r2, #16
 801264e:	6812      	ldr	r2, [r2, #0]
 8012650:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	3324      	adds	r3, #36	@ 0x24
 8012656:	68ba      	ldr	r2, [r7, #8]
 8012658:	3214      	adds	r2, #20
 801265a:	6812      	ldr	r2, [r2, #0]
 801265c:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3328      	adds	r3, #40	@ 0x28
 8012662:	68ba      	ldr	r2, [r7, #8]
 8012664:	3218      	adds	r2, #24
 8012666:	6812      	ldr	r2, [r2, #0]
 8012668:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	332c      	adds	r3, #44	@ 0x2c
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	321c      	adds	r2, #28
 8012672:	6812      	ldr	r2, [r2, #0]
 8012674:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	3330      	adds	r3, #48	@ 0x30
 801267a:	683a      	ldr	r2, [r7, #0]
 801267c:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	3334      	adds	r3, #52	@ 0x34
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	6812      	ldr	r2, [r2, #0]
 8012686:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	3338      	adds	r3, #56	@ 0x38
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	3204      	adds	r2, #4
 8012690:	6812      	ldr	r2, [r2, #0]
 8012692:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	333c      	adds	r3, #60	@ 0x3c
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	3208      	adds	r2, #8
 801269c:	6812      	ldr	r2, [r2, #0]
 801269e:	601a      	str	r2, [r3, #0]
}
 80126a0:	bf00      	nop
 80126a2:	3714      	adds	r7, #20
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr
 80126ac:	61707865 	.word	0x61707865
 80126b0:	3320646e 	.word	0x3320646e
 80126b4:	79622d32 	.word	0x79622d32
 80126b8:	6b206574 	.word	0x6b206574

080126bc <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 80126bc:	b480      	push	{r7}
 80126be:	b095      	sub	sp, #84	@ 0x54
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3304      	adds	r3, #4
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	3308      	adds	r3, #8
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	643b      	str	r3, [r7, #64]	@ 0x40
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	330c      	adds	r3, #12
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	3310      	adds	r3, #16
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3314      	adds	r3, #20
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	3318      	adds	r3, #24
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	331c      	adds	r3, #28
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	3320      	adds	r3, #32
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	3324      	adds	r3, #36	@ 0x24
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	627b      	str	r3, [r7, #36]	@ 0x24
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	3328      	adds	r3, #40	@ 0x28
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	623b      	str	r3, [r7, #32]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	332c      	adds	r3, #44	@ 0x2c
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	61fb      	str	r3, [r7, #28]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3330      	adds	r3, #48	@ 0x30
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	61bb      	str	r3, [r7, #24]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	3334      	adds	r3, #52	@ 0x34
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	617b      	str	r3, [r7, #20]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	3338      	adds	r3, #56	@ 0x38
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	613b      	str	r3, [r7, #16]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	333c      	adds	r3, #60	@ 0x3c
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 8012744:	2300      	movs	r3, #0
 8012746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012748:	e182      	b.n	8012a50 <core_block+0x394>
    __Q(0, 4, 8, 12);
 801274a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801274e:	4413      	add	r3, r2
 8012750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012752:	69ba      	ldr	r2, [r7, #24]
 8012754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012756:	4053      	eors	r3, r2
 8012758:	61bb      	str	r3, [r7, #24]
 801275a:	69bb      	ldr	r3, [r7, #24]
 801275c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012760:	61bb      	str	r3, [r7, #24]
 8012762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	4413      	add	r3, r2
 8012768:	62bb      	str	r3, [r7, #40]	@ 0x28
 801276a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801276e:	4053      	eors	r3, r2
 8012770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012774:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012778:	63bb      	str	r3, [r7, #56]	@ 0x38
 801277a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801277e:	4413      	add	r3, r2
 8012780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012782:	69ba      	ldr	r2, [r7, #24]
 8012784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012786:	4053      	eors	r3, r2
 8012788:	61bb      	str	r3, [r7, #24]
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012790:	61bb      	str	r3, [r7, #24]
 8012792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	4413      	add	r3, r2
 8012798:	62bb      	str	r3, [r7, #40]	@ 0x28
 801279a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801279e:	4053      	eors	r3, r2
 80127a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80127a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127a4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80127a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 80127aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80127ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ae:	4413      	add	r3, r2
 80127b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80127b2:	697a      	ldr	r2, [r7, #20]
 80127b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127b6:	4053      	eors	r3, r2
 80127b8:	617b      	str	r3, [r7, #20]
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80127c0:	617b      	str	r3, [r7, #20]
 80127c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	4413      	add	r3, r2
 80127c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80127ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ce:	4053      	eors	r3, r2
 80127d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80127d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127d4:	ea4f 5333 	mov.w	r3, r3, ror #20
 80127d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80127da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80127dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127de:	4413      	add	r3, r2
 80127e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80127e2:	697a      	ldr	r2, [r7, #20]
 80127e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127e6:	4053      	eors	r3, r2
 80127e8:	617b      	str	r3, [r7, #20]
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	ea4f 6333 	mov.w	r3, r3, ror #24
 80127f0:	617b      	str	r3, [r7, #20]
 80127f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	4413      	add	r3, r2
 80127f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80127fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fe:	4053      	eors	r3, r2
 8012800:	637b      	str	r3, [r7, #52]	@ 0x34
 8012802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012804:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012808:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 801280a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801280c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801280e:	4413      	add	r3, r2
 8012810:	643b      	str	r3, [r7, #64]	@ 0x40
 8012812:	693a      	ldr	r2, [r7, #16]
 8012814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012816:	4053      	eors	r3, r2
 8012818:	613b      	str	r3, [r7, #16]
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012820:	613b      	str	r3, [r7, #16]
 8012822:	6a3a      	ldr	r2, [r7, #32]
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	4413      	add	r3, r2
 8012828:	623b      	str	r3, [r7, #32]
 801282a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801282c:	6a3b      	ldr	r3, [r7, #32]
 801282e:	4053      	eors	r3, r2
 8012830:	633b      	str	r3, [r7, #48]	@ 0x30
 8012832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012834:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012838:	633b      	str	r3, [r7, #48]	@ 0x30
 801283a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801283e:	4413      	add	r3, r2
 8012840:	643b      	str	r3, [r7, #64]	@ 0x40
 8012842:	693a      	ldr	r2, [r7, #16]
 8012844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012846:	4053      	eors	r3, r2
 8012848:	613b      	str	r3, [r7, #16]
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012850:	613b      	str	r3, [r7, #16]
 8012852:	6a3a      	ldr	r2, [r7, #32]
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	4413      	add	r3, r2
 8012858:	623b      	str	r3, [r7, #32]
 801285a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	4053      	eors	r3, r2
 8012860:	633b      	str	r3, [r7, #48]	@ 0x30
 8012862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012864:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012868:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801286a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801286c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801286e:	4413      	add	r3, r2
 8012870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012872:	68fa      	ldr	r2, [r7, #12]
 8012874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012876:	4053      	eors	r3, r2
 8012878:	60fb      	str	r3, [r7, #12]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012880:	60fb      	str	r3, [r7, #12]
 8012882:	69fa      	ldr	r2, [r7, #28]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	4413      	add	r3, r2
 8012888:	61fb      	str	r3, [r7, #28]
 801288a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	4053      	eors	r3, r2
 8012890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012894:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801289a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801289e:	4413      	add	r3, r2
 80128a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128a6:	4053      	eors	r3, r2
 80128a8:	60fb      	str	r3, [r7, #12]
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	ea4f 6333 	mov.w	r3, r3, ror #24
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	69fa      	ldr	r2, [r7, #28]
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	4413      	add	r3, r2
 80128b8:	61fb      	str	r3, [r7, #28]
 80128ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	4053      	eors	r3, r2
 80128c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80128c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 80128ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128ce:	4413      	add	r3, r2
 80128d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80128d2:	68fa      	ldr	r2, [r7, #12]
 80128d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80128d6:	4053      	eors	r3, r2
 80128d8:	60fb      	str	r3, [r7, #12]
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80128e0:	60fb      	str	r3, [r7, #12]
 80128e2:	6a3a      	ldr	r2, [r7, #32]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	4413      	add	r3, r2
 80128e8:	623b      	str	r3, [r7, #32]
 80128ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128ec:	6a3b      	ldr	r3, [r7, #32]
 80128ee:	4053      	eors	r3, r2
 80128f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80128f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128f4:	ea4f 5333 	mov.w	r3, r3, ror #20
 80128f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80128fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128fe:	4413      	add	r3, r2
 8012900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012902:	68fa      	ldr	r2, [r7, #12]
 8012904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012906:	4053      	eors	r3, r2
 8012908:	60fb      	str	r3, [r7, #12]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012910:	60fb      	str	r3, [r7, #12]
 8012912:	6a3a      	ldr	r2, [r7, #32]
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	4413      	add	r3, r2
 8012918:	623b      	str	r3, [r7, #32]
 801291a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801291c:	6a3b      	ldr	r3, [r7, #32]
 801291e:	4053      	eors	r3, r2
 8012920:	637b      	str	r3, [r7, #52]	@ 0x34
 8012922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012924:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012928:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801292a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801292c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801292e:	4413      	add	r3, r2
 8012930:	647b      	str	r3, [r7, #68]	@ 0x44
 8012932:	69ba      	ldr	r2, [r7, #24]
 8012934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012936:	4053      	eors	r3, r2
 8012938:	61bb      	str	r3, [r7, #24]
 801293a:	69bb      	ldr	r3, [r7, #24]
 801293c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012940:	61bb      	str	r3, [r7, #24]
 8012942:	69fa      	ldr	r2, [r7, #28]
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	4413      	add	r3, r2
 8012948:	61fb      	str	r3, [r7, #28]
 801294a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	4053      	eors	r3, r2
 8012950:	633b      	str	r3, [r7, #48]	@ 0x30
 8012952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012954:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012958:	633b      	str	r3, [r7, #48]	@ 0x30
 801295a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801295e:	4413      	add	r3, r2
 8012960:	647b      	str	r3, [r7, #68]	@ 0x44
 8012962:	69ba      	ldr	r2, [r7, #24]
 8012964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012966:	4053      	eors	r3, r2
 8012968:	61bb      	str	r3, [r7, #24]
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012970:	61bb      	str	r3, [r7, #24]
 8012972:	69fa      	ldr	r2, [r7, #28]
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	4413      	add	r3, r2
 8012978:	61fb      	str	r3, [r7, #28]
 801297a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801297c:	69fb      	ldr	r3, [r7, #28]
 801297e:	4053      	eors	r3, r2
 8012980:	633b      	str	r3, [r7, #48]	@ 0x30
 8012982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012984:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012988:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801298a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298e:	4413      	add	r3, r2
 8012990:	643b      	str	r3, [r7, #64]	@ 0x40
 8012992:	697a      	ldr	r2, [r7, #20]
 8012994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012996:	4053      	eors	r3, r2
 8012998:	617b      	str	r3, [r7, #20]
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	ea4f 4333 	mov.w	r3, r3, ror #16
 80129a0:	617b      	str	r3, [r7, #20]
 80129a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	4413      	add	r3, r2
 80129a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80129aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ae:	4053      	eors	r3, r2
 80129b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129b4:	ea4f 5333 	mov.w	r3, r3, ror #20
 80129b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80129bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129be:	4413      	add	r3, r2
 80129c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80129c2:	697a      	ldr	r2, [r7, #20]
 80129c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80129c6:	4053      	eors	r3, r2
 80129c8:	617b      	str	r3, [r7, #20]
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	ea4f 6333 	mov.w	r3, r3, ror #24
 80129d0:	617b      	str	r3, [r7, #20]
 80129d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	4413      	add	r3, r2
 80129d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80129da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129de:	4053      	eors	r3, r2
 80129e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80129e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 80129ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80129ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ee:	4413      	add	r3, r2
 80129f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129f6:	4053      	eors	r3, r2
 80129f8:	613b      	str	r3, [r7, #16]
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012a00:	613b      	str	r3, [r7, #16]
 8012a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	4413      	add	r3, r2
 8012a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a0e:	4053      	eors	r3, r2
 8012a10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a14:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012a18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a1e:	4413      	add	r3, r2
 8012a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012a22:	693a      	ldr	r2, [r7, #16]
 8012a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a26:	4053      	eors	r3, r2
 8012a28:	613b      	str	r3, [r7, #16]
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012a30:	613b      	str	r3, [r7, #16]
 8012a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	4413      	add	r3, r2
 8012a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3e:	4053      	eors	r3, r2
 8012a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a44:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 8012a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a52:	2b09      	cmp	r3, #9
 8012a54:	f77f ae79 	ble.w	801274a <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a5e:	441a      	add	r2, r3
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3304      	adds	r3, #4
 8012a68:	6819      	ldr	r1, [r3, #0]
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	3304      	adds	r3, #4
 8012a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012a70:	440a      	add	r2, r1
 8012a72:	601a      	str	r2, [r3, #0]
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	3308      	adds	r3, #8
 8012a78:	6819      	ldr	r1, [r3, #0]
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	3308      	adds	r3, #8
 8012a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012a80:	440a      	add	r2, r1
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	330c      	adds	r3, #12
 8012a88:	6819      	ldr	r1, [r3, #0]
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	330c      	adds	r3, #12
 8012a8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012a90:	440a      	add	r2, r1
 8012a92:	601a      	str	r2, [r3, #0]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	3310      	adds	r3, #16
 8012a98:	6819      	ldr	r1, [r3, #0]
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	3310      	adds	r3, #16
 8012a9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012aa0:	440a      	add	r2, r1
 8012aa2:	601a      	str	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	3314      	adds	r3, #20
 8012aa8:	6819      	ldr	r1, [r3, #0]
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	3314      	adds	r3, #20
 8012aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ab0:	440a      	add	r2, r1
 8012ab2:	601a      	str	r2, [r3, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	3318      	adds	r3, #24
 8012ab8:	6819      	ldr	r1, [r3, #0]
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	3318      	adds	r3, #24
 8012abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ac0:	440a      	add	r2, r1
 8012ac2:	601a      	str	r2, [r3, #0]
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	331c      	adds	r3, #28
 8012ac8:	6819      	ldr	r1, [r3, #0]
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	331c      	adds	r3, #28
 8012ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ad0:	440a      	add	r2, r1
 8012ad2:	601a      	str	r2, [r3, #0]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	3320      	adds	r3, #32
 8012ad8:	6819      	ldr	r1, [r3, #0]
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	3320      	adds	r3, #32
 8012ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ae0:	440a      	add	r2, r1
 8012ae2:	601a      	str	r2, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	3324      	adds	r3, #36	@ 0x24
 8012ae8:	6819      	ldr	r1, [r3, #0]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	3324      	adds	r3, #36	@ 0x24
 8012aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012af0:	440a      	add	r2, r1
 8012af2:	601a      	str	r2, [r3, #0]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	3328      	adds	r3, #40	@ 0x28
 8012af8:	6819      	ldr	r1, [r3, #0]
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	3328      	adds	r3, #40	@ 0x28
 8012afe:	6a3a      	ldr	r2, [r7, #32]
 8012b00:	440a      	add	r2, r1
 8012b02:	601a      	str	r2, [r3, #0]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	332c      	adds	r3, #44	@ 0x2c
 8012b08:	6819      	ldr	r1, [r3, #0]
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	332c      	adds	r3, #44	@ 0x2c
 8012b0e:	69fa      	ldr	r2, [r7, #28]
 8012b10:	440a      	add	r2, r1
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	3330      	adds	r3, #48	@ 0x30
 8012b18:	6819      	ldr	r1, [r3, #0]
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	3330      	adds	r3, #48	@ 0x30
 8012b1e:	69ba      	ldr	r2, [r7, #24]
 8012b20:	440a      	add	r2, r1
 8012b22:	601a      	str	r2, [r3, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	3334      	adds	r3, #52	@ 0x34
 8012b28:	6819      	ldr	r1, [r3, #0]
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	3334      	adds	r3, #52	@ 0x34
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	440a      	add	r2, r1
 8012b32:	601a      	str	r2, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3338      	adds	r3, #56	@ 0x38
 8012b38:	6819      	ldr	r1, [r3, #0]
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	3338      	adds	r3, #56	@ 0x38
 8012b3e:	693a      	ldr	r2, [r7, #16]
 8012b40:	440a      	add	r2, r1
 8012b42:	601a      	str	r2, [r3, #0]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	333c      	adds	r3, #60	@ 0x3c
 8012b48:	6819      	ldr	r1, [r3, #0]
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	333c      	adds	r3, #60	@ 0x3c
 8012b4e:	68fa      	ldr	r2, [r7, #12]
 8012b50:	440a      	add	r2, r1
 8012b52:	601a      	str	r2, [r3, #0]
}
 8012b54:	bf00      	nop
 8012b56:	3754      	adds	r7, #84	@ 0x54
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 8012b60:	b480      	push	{r7}
 8012b62:	b089      	sub	sp, #36	@ 0x24
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	089b      	lsrs	r3, r3, #2
 8012b72:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 8012b74:	2300      	movs	r3, #0
 8012b76:	61fb      	str	r3, [r7, #28]
 8012b78:	e016      	b.n	8012ba8 <xor_block+0x48>
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	4413      	add	r3, r2
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	617b      	str	r3, [r7, #20]
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	4053      	eors	r3, r2
 8012b94:	617b      	str	r3, [r7, #20]
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	601a      	str	r2, [r3, #0]
 8012ba2:	69fb      	ldr	r3, [r7, #28]
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	61fb      	str	r3, [r7, #28]
 8012ba8:	69fa      	ldr	r2, [r7, #28]
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d3e4      	bcc.n	8012b7a <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	68fa      	ldr	r2, [r7, #12]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	009b      	lsls	r3, r3, #2
 8012bbe:	68ba      	ldr	r2, [r7, #8]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	009b      	lsls	r3, r3, #2
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	4413      	add	r3, r2
 8012bcc:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	f003 0303 	and.w	r3, r3, #3
 8012bd4:	2b03      	cmp	r3, #3
 8012bd6:	d026      	beq.n	8012c26 <xor_block+0xc6>
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	d846      	bhi.n	8012c6a <xor_block+0x10a>
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d002      	beq.n	8012be6 <xor_block+0x86>
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	d00a      	beq.n	8012bfa <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 8012be4:	e041      	b.n	8012c6a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	781a      	ldrb	r2, [r3, #0]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	4053      	eors	r3, r2
 8012bf2:	b2da      	uxtb	r2, r3
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	701a      	strb	r2, [r3, #0]
      break;
 8012bf8:	e037      	b.n	8012c6a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	781a      	ldrb	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	4053      	eors	r3, r2
 8012c06:	b2da      	uxtb	r2, r3
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	7819      	ldrb	r1, [r3, #0]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	0a1b      	lsrs	r3, r3, #8
 8012c18:	b2da      	uxtb	r2, r3
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	404a      	eors	r2, r1
 8012c20:	b2d2      	uxtb	r2, r2
 8012c22:	701a      	strb	r2, [r3, #0]
      break;
 8012c24:	e021      	b.n	8012c6a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	781a      	ldrb	r2, [r3, #0]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	4053      	eors	r3, r2
 8012c32:	b2da      	uxtb	r2, r3
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	7819      	ldrb	r1, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	0a1b      	lsrs	r3, r3, #8
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	404a      	eors	r2, r1
 8012c4c:	b2d2      	uxtb	r2, r2
 8012c4e:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	3302      	adds	r3, #2
 8012c54:	7819      	ldrb	r1, [r3, #0]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	0c1b      	lsrs	r3, r3, #16
 8012c5c:	b2da      	uxtb	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	3302      	adds	r3, #2
 8012c62:	404a      	eors	r2, r1
 8012c64:	b2d2      	uxtb	r2, r2
 8012c66:	701a      	strb	r2, [r3, #0]
      break;
 8012c68:	bf00      	nop
}
 8012c6a:	bf00      	nop
 8012c6c:	3724      	adds	r7, #36	@ 0x24
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c74:	4770      	bx	lr

08012c76 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 8012c76:	b580      	push	{r7, lr}
 8012c78:	b0aa      	sub	sp, #168	@ 0xa8
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	60f8      	str	r0, [r7, #12]
 8012c7e:	60b9      	str	r1, [r7, #8]
 8012c80:	607a      	str	r2, [r7, #4]
 8012c82:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	099b      	lsrs	r3, r3, #6
 8012c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 8012c8c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8012c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	f7ff fca7 	bl	80125ec <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012ca4:	e03c      	b.n	8012d20 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 8012ca6:	f107 0218 	add.w	r2, r7, #24
 8012caa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012cae:	4611      	mov	r1, r2
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff fd03 	bl	80126bc <core_block>
    increment_counter(state);
 8012cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012cba:	3301      	adds	r3, #1
 8012cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012cc6:	e01c      	b.n	8012d02 <chacha20_xor_stream+0x8c>
 8012cc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	617b      	str	r3, [r7, #20]
 8012cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	f107 0218 	add.w	r2, r7, #24
 8012ce0:	4413      	add	r3, r2
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	4053      	eors	r3, r2
 8012ce8:	617b      	str	r3, [r7, #20]
 8012cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012cee:	009b      	lsls	r3, r3, #2
 8012cf0:	68fa      	ldr	r2, [r7, #12]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	697a      	ldr	r2, [r7, #20]
 8012cf6:	601a      	str	r2, [r3, #0]
 8012cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d06:	2b0f      	cmp	r3, #15
 8012d08:	d9de      	bls.n	8012cc8 <chacha20_xor_stream+0x52>
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	3340      	adds	r3, #64	@ 0x40
 8012d0e:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	3340      	adds	r3, #64	@ 0x40
 8012d14:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 8012d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012d20:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d3bc      	bcc.n	8012ca6 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012d32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 8012d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d00f      	beq.n	8012d5e <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 8012d3e:	f107 0218 	add.w	r2, r7, #24
 8012d42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012d46:	4611      	mov	r1, r2
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7ff fcb7 	bl	80126bc <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 8012d4e:	f107 0218 	add.w	r2, r7, #24
 8012d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012d56:	68b9      	ldr	r1, [r7, #8]
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7ff ff01 	bl	8012b60 <xor_block>
  }
}
 8012d5e:	bf00      	nop
 8012d60:	37a8      	adds	r7, #168	@ 0xa8
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 8012d66:	b580      	push	{r7, lr}
 8012d68:	b0a4      	sub	sp, #144	@ 0x90
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	60f8      	str	r0, [r7, #12]
 8012d6e:	60b9      	str	r1, [r7, #8]
 8012d70:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 8012d72:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8012d76:	2300      	movs	r3, #0
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	68b9      	ldr	r1, [r7, #8]
 8012d7c:	f7ff fc36 	bl	80125ec <initialize_state>
  core_block(state, result);
 8012d80:	f107 0210 	add.w	r2, r7, #16
 8012d84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012d88:	4611      	mov	r1, r2
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7ff fc96 	bl	80126bc <core_block>
  serialize(poly_key, result);
 8012d90:	f107 0310 	add.w	r3, r7, #16
 8012d94:	2220      	movs	r2, #32
 8012d96:	4619      	mov	r1, r3
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f012 f9aa 	bl	80250f2 <memcpy>
  (void) i;
}
 8012d9e:	bf00      	nop
 8012da0:	3790      	adds	r7, #144	@ 0x90
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 8012da6:	b480      	push	{r7}
 8012da8:	b083      	sub	sp, #12
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3301      	adds	r3, #1
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 8012dbc:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	3302      	adds	r3, #2
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 8012dc6:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3303      	adds	r3, #3
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 8012dd0:	4313      	orrs	r3, r2
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr

08012dde <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 8012dde:	b480      	push	{r7}
 8012de0:	b083      	sub	sp, #12
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
 8012de6:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	b2da      	uxtb	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	0a1a      	lsrs	r2, r3, #8
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	3301      	adds	r3, #1
 8012df8:	b2d2      	uxtb	r2, r2
 8012dfa:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	0c1a      	lsrs	r2, r3, #16
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	3302      	adds	r3, #2
 8012e04:	b2d2      	uxtb	r2, r2
 8012e06:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	0e1a      	lsrs	r2, r3, #24
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	3303      	adds	r3, #3
 8012e10:	b2d2      	uxtb	r2, r2
 8012e12:	701a      	strb	r2, [r3, #0]
}
 8012e14:	bf00      	nop
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 8012e2e:	6838      	ldr	r0, [r7, #0]
 8012e30:	f7ff ffb9 	bl	8012da6 <U8TO32>
 8012e34:	4603      	mov	r3, r0
 8012e36:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	3303      	adds	r3, #3
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff ffaf 	bl	8012da6 <U8TO32>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	089a      	lsrs	r2, r3, #2
 8012e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8012f0c <poly1305_init+0xec>)
 8012e4e:	4013      	ands	r3, r2
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	3306      	adds	r3, #6
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7ff ffa4 	bl	8012da6 <U8TO32>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	091a      	lsrs	r2, r3, #4
 8012e62:	4b2b      	ldr	r3, [pc, #172]	@ (8012f10 <poly1305_init+0xf0>)
 8012e64:	4013      	ands	r3, r2
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	3309      	adds	r3, #9
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7ff ff99 	bl	8012da6 <U8TO32>
 8012e74:	4603      	mov	r3, r0
 8012e76:	099a      	lsrs	r2, r3, #6
 8012e78:	4b26      	ldr	r3, [pc, #152]	@ (8012f14 <poly1305_init+0xf4>)
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	68fa      	ldr	r2, [r7, #12]
 8012e7e:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	330c      	adds	r3, #12
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff ff8e 	bl	8012da6 <U8TO32>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	0a1b      	lsrs	r3, r3, #8
 8012e8e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	3310      	adds	r3, #16
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff ff74 	bl	8012da6 <U8TO32>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	3314      	adds	r3, #20
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7ff ff6c 	bl	8012da6 <U8TO32>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	3318      	adds	r3, #24
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff ff64 	bl	8012da6 <U8TO32>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	331c      	adds	r3, #28
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7ff ff5c 	bl	8012da6 <U8TO32>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2200      	movs	r2, #0
 8012efe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8012f02:	bf00      	nop
 8012f04:	3710      	adds	r7, #16
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	03ffff03 	.word	0x03ffff03
 8012f10:	03ffc0ff 	.word	0x03ffc0ff
 8012f14:	03f03fff 	.word	0x03f03fff

08012f18 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 8012f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012f1c:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8012f26:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8012f2a:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 8012f2e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012f32:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d001      	beq.n	8012f3e <poly1305_blocks+0x26>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	e001      	b.n	8012f42 <poly1305_blocks+0x2a>
 8012f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012f42:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 8012f46:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 8012f50:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 8012f5a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012f5e:	689b      	ldr	r3, [r3, #8]
 8012f60:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8012f64:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 8012f6e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012f72:	691b      	ldr	r3, [r3, #16]
 8012f74:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 8012f78:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	4413      	add	r3, r2
 8012f82:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 8012f86:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	4413      	add	r3, r2
 8012f90:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8012f94:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8012f98:	4613      	mov	r3, r2
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	4413      	add	r3, r2
 8012f9e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 8012fa2:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	4413      	add	r3, r2
 8012fac:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 8012fb0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012fb4:	695b      	ldr	r3, [r3, #20]
 8012fb6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 8012fba:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012fbe:	699b      	ldr	r3, [r3, #24]
 8012fc0:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 8012fc4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012fc8:	69db      	ldr	r3, [r3, #28]
 8012fca:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 8012fce:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012fd2:	6a1b      	ldr	r3, [r3, #32]
 8012fd4:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 8012fd8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fde:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 8012fe2:	f000 be78 	b.w	8013cd6 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 8012fe6:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8012fea:	f7ff fedc 	bl	8012da6 <U8TO32>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012ff4:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012ff8:	4413      	add	r3, r2
 8012ffa:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 8012ffe:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8013002:	3303      	adds	r3, #3
 8013004:	4618      	mov	r0, r3
 8013006:	f7ff fece 	bl	8012da6 <U8TO32>
 801300a:	4603      	mov	r3, r0
 801300c:	089b      	lsrs	r3, r3, #2
 801300e:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8013012:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013016:	4413      	add	r3, r2
 8013018:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 801301c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8013020:	3306      	adds	r3, #6
 8013022:	4618      	mov	r0, r3
 8013024:	f7ff febf 	bl	8012da6 <U8TO32>
 8013028:	4603      	mov	r3, r0
 801302a:	091b      	lsrs	r3, r3, #4
 801302c:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8013030:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013034:	4413      	add	r3, r2
 8013036:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801303a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801303e:	3309      	adds	r3, #9
 8013040:	4618      	mov	r0, r3
 8013042:	f7ff feb0 	bl	8012da6 <U8TO32>
 8013046:	4603      	mov	r3, r0
 8013048:	099b      	lsrs	r3, r3, #6
 801304a:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801304e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013052:	4413      	add	r3, r2
 8013054:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 8013058:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801305c:	330c      	adds	r3, #12
 801305e:	4618      	mov	r0, r3
 8013060:	f7ff fea1 	bl	8012da6 <U8TO32>
 8013064:	4603      	mov	r3, r0
 8013066:	0a1a      	lsrs	r2, r3, #8
 8013068:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801306c:	431a      	orrs	r2, r3
 801306e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8013072:	4413      	add	r3, r2
 8013074:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8013078:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801307c:	2200      	movs	r2, #0
 801307e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8013082:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8013086:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801308a:	2200      	movs	r2, #0
 801308c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8013090:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8013094:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8013098:	460b      	mov	r3, r1
 801309a:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801309e:	fb02 f203 	mul.w	r2, r2, r3
 80130a2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80130a6:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 80130aa:	4601      	mov	r1, r0
 80130ac:	fb01 f303 	mul.w	r3, r1, r3
 80130b0:	4413      	add	r3, r2
 80130b2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80130b6:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 80130ba:	fba2 1201 	umull	r1, r2, r2, r1
 80130be:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 80130c2:	460a      	mov	r2, r1
 80130c4:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 80130c8:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 80130cc:	4413      	add	r3, r2
 80130ce:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80130d2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80130d6:	2200      	movs	r2, #0
 80130d8:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80130dc:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80130e0:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80130e4:	2200      	movs	r2, #0
 80130e6:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80130ea:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80130ee:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 80130f2:	460b      	mov	r3, r1
 80130f4:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80130f8:	fb02 f203 	mul.w	r2, r2, r3
 80130fc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8013100:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 8013104:	4601      	mov	r1, r0
 8013106:	fb01 f303 	mul.w	r3, r1, r3
 801310a:	4413      	add	r3, r2
 801310c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 8013110:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 8013114:	fba2 1201 	umull	r1, r2, r2, r1
 8013118:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801311c:	460a      	mov	r2, r1
 801311e:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 8013122:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8013126:	4413      	add	r3, r2
 8013128:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801312c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8013130:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8013134:	4602      	mov	r2, r0
 8013136:	189b      	adds	r3, r3, r2
 8013138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801313c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8013140:	460a      	mov	r2, r1
 8013142:	4153      	adcs	r3, r2
 8013144:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8013148:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801314c:	2200      	movs	r2, #0
 801314e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8013152:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8013156:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801315a:	2200      	movs	r2, #0
 801315c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8013160:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8013164:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8013168:	460b      	mov	r3, r1
 801316a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801316e:	fb02 f203 	mul.w	r2, r2, r3
 8013172:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8013176:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801317a:	4601      	mov	r1, r0
 801317c:	fb01 f303 	mul.w	r3, r1, r3
 8013180:	4413      	add	r3, r2
 8013182:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8013186:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801318a:	fba2 1201 	umull	r1, r2, r2, r1
 801318e:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8013192:	460a      	mov	r2, r1
 8013194:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 8013198:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801319c:	4413      	add	r3, r2
 801319e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 80131a2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80131a6:	2200      	movs	r2, #0
 80131a8:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80131ac:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80131b0:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80131b4:	2200      	movs	r2, #0
 80131b6:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80131ba:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 80131be:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80131c2:	460b      	mov	r3, r1
 80131c4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80131c8:	fb02 f203 	mul.w	r2, r2, r3
 80131cc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80131d0:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 80131d4:	4601      	mov	r1, r0
 80131d6:	fb01 f303 	mul.w	r3, r1, r3
 80131da:	4413      	add	r3, r2
 80131dc:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80131e0:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80131e4:	fba2 1201 	umull	r1, r2, r2, r1
 80131e8:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80131ec:	460a      	mov	r2, r1
 80131ee:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 80131f2:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80131f6:	4413      	add	r3, r2
 80131f8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80131fc:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8013200:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 8013204:	4602      	mov	r2, r0
 8013206:	189b      	adds	r3, r3, r2
 8013208:	66bb      	str	r3, [r7, #104]	@ 0x68
 801320a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801320e:	460a      	mov	r2, r1
 8013210:	4153      	adcs	r3, r2
 8013212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801321c:	4602      	mov	r2, r0
 801321e:	189b      	adds	r3, r3, r2
 8013220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013228:	460a      	mov	r2, r1
 801322a:	4153      	adcs	r3, r2
 801322c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8013230:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8013234:	2200      	movs	r2, #0
 8013236:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 801323a:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801323e:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8013242:	2200      	movs	r2, #0
 8013244:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8013248:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801324c:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8013250:	460b      	mov	r3, r1
 8013252:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8013256:	fb02 f203 	mul.w	r2, r2, r3
 801325a:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801325e:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 8013262:	4601      	mov	r1, r0
 8013264:	fb01 f303 	mul.w	r3, r1, r3
 8013268:	4413      	add	r3, r2
 801326a:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801326e:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 8013272:	fba2 1201 	umull	r1, r2, r2, r1
 8013276:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801327a:	460a      	mov	r2, r1
 801327c:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8013280:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8013284:	4413      	add	r3, r2
 8013286:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801328a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801328e:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8013292:	4602      	mov	r2, r0
 8013294:	189b      	adds	r3, r3, r2
 8013296:	643b      	str	r3, [r7, #64]	@ 0x40
 8013298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801329c:	460a      	mov	r2, r1
 801329e:	4153      	adcs	r3, r2
 80132a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80132a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80132a6:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80132aa:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80132ae:	2200      	movs	r2, #0
 80132b0:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 80132b4:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 80132b8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80132bc:	2200      	movs	r2, #0
 80132be:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80132c2:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80132c6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80132ca:	460b      	mov	r3, r1
 80132cc:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80132d0:	fb02 f203 	mul.w	r2, r2, r3
 80132d4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80132d8:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 80132dc:	4601      	mov	r1, r0
 80132de:	fb01 f303 	mul.w	r3, r1, r3
 80132e2:	4413      	add	r3, r2
 80132e4:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 80132e8:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 80132ec:	fba2 1201 	umull	r1, r2, r2, r1
 80132f0:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80132f4:	460a      	mov	r2, r1
 80132f6:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 80132fa:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80132fe:	4413      	add	r3, r2
 8013300:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8013304:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013308:	2200      	movs	r2, #0
 801330a:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801330e:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8013312:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013316:	2200      	movs	r2, #0
 8013318:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 801331c:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8013320:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8013324:	460b      	mov	r3, r1
 8013326:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801332a:	fb02 f203 	mul.w	r2, r2, r3
 801332e:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8013332:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 8013336:	4601      	mov	r1, r0
 8013338:	fb01 f303 	mul.w	r3, r1, r3
 801333c:	4413      	add	r3, r2
 801333e:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8013342:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8013346:	fba2 1201 	umull	r1, r2, r2, r1
 801334a:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801334e:	460a      	mov	r2, r1
 8013350:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 8013354:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8013358:	4413      	add	r3, r2
 801335a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801335e:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8013362:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8013366:	4602      	mov	r2, r0
 8013368:	189b      	adds	r3, r3, r2
 801336a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801336e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8013372:	460a      	mov	r2, r1
 8013374:	4153      	adcs	r3, r2
 8013376:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801337a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801337e:	2200      	movs	r2, #0
 8013380:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8013384:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8013388:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801338c:	2200      	movs	r2, #0
 801338e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8013392:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8013396:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801339a:	460b      	mov	r3, r1
 801339c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80133a0:	fb02 f203 	mul.w	r2, r2, r3
 80133a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80133a8:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 80133ac:	4601      	mov	r1, r0
 80133ae:	fb01 f303 	mul.w	r3, r1, r3
 80133b2:	4413      	add	r3, r2
 80133b4:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80133b8:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80133bc:	fba2 1201 	umull	r1, r2, r2, r1
 80133c0:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 80133c4:	460a      	mov	r2, r1
 80133c6:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 80133ca:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 80133ce:	4413      	add	r3, r2
 80133d0:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80133d4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80133d8:	2200      	movs	r2, #0
 80133da:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80133de:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80133e2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80133e6:	2200      	movs	r2, #0
 80133e8:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80133ec:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80133f0:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80133f4:	460b      	mov	r3, r1
 80133f6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80133fa:	fb02 f203 	mul.w	r2, r2, r3
 80133fe:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8013402:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 8013406:	4601      	mov	r1, r0
 8013408:	fb01 f303 	mul.w	r3, r1, r3
 801340c:	4413      	add	r3, r2
 801340e:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8013412:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8013416:	fba2 1201 	umull	r1, r2, r2, r1
 801341a:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 801341e:	460a      	mov	r2, r1
 8013420:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 8013424:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8013428:	4413      	add	r3, r2
 801342a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801342e:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8013432:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8013436:	4602      	mov	r2, r0
 8013438:	189b      	adds	r3, r3, r2
 801343a:	663b      	str	r3, [r7, #96]	@ 0x60
 801343c:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8013440:	460a      	mov	r2, r1
 8013442:	4153      	adcs	r3, r2
 8013444:	667b      	str	r3, [r7, #100]	@ 0x64
 8013446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801344a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801344e:	4602      	mov	r2, r0
 8013450:	189b      	adds	r3, r3, r2
 8013452:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801345a:	460a      	mov	r2, r1
 801345c:	4153      	adcs	r3, r2
 801345e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8013462:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8013466:	2200      	movs	r2, #0
 8013468:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801346c:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8013470:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8013474:	2200      	movs	r2, #0
 8013476:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801347a:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801347e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8013482:	460b      	mov	r3, r1
 8013484:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8013488:	fb02 f203 	mul.w	r2, r2, r3
 801348c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8013490:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 8013494:	4601      	mov	r1, r0
 8013496:	fb01 f303 	mul.w	r3, r1, r3
 801349a:	4413      	add	r3, r2
 801349c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80134a0:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 80134a4:	fba2 1201 	umull	r1, r2, r2, r1
 80134a8:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80134ac:	460a      	mov	r2, r1
 80134ae:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 80134b2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80134b6:	4413      	add	r3, r2
 80134b8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80134bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80134c0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80134c4:	4602      	mov	r2, r0
 80134c6:	189b      	adds	r3, r3, r2
 80134c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80134ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80134ce:	460a      	mov	r2, r1
 80134d0:	4153      	adcs	r3, r2
 80134d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80134d8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80134dc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80134e0:	2200      	movs	r2, #0
 80134e2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80134e6:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 80134ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80134ee:	2200      	movs	r2, #0
 80134f0:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80134f4:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 80134f8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80134fc:	460b      	mov	r3, r1
 80134fe:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8013502:	fb02 f203 	mul.w	r2, r2, r3
 8013506:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801350a:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 801350e:	4601      	mov	r1, r0
 8013510:	fb01 f303 	mul.w	r3, r1, r3
 8013514:	4413      	add	r3, r2
 8013516:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801351a:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 801351e:	fba2 1201 	umull	r1, r2, r2, r1
 8013522:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8013526:	460a      	mov	r2, r1
 8013528:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801352c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8013530:	4413      	add	r3, r2
 8013532:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8013536:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801353a:	2200      	movs	r2, #0
 801353c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8013540:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8013544:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013548:	2200      	movs	r2, #0
 801354a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801354e:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8013552:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8013556:	460b      	mov	r3, r1
 8013558:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801355c:	fb02 f203 	mul.w	r2, r2, r3
 8013560:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8013564:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 8013568:	4601      	mov	r1, r0
 801356a:	fb01 f303 	mul.w	r3, r1, r3
 801356e:	4413      	add	r3, r2
 8013570:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8013574:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8013578:	fba2 1201 	umull	r1, r2, r2, r1
 801357c:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8013580:	460a      	mov	r2, r1
 8013582:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 8013586:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801358a:	4413      	add	r3, r2
 801358c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8013590:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013594:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8013598:	4602      	mov	r2, r0
 801359a:	189b      	adds	r3, r3, r2
 801359c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80135a0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80135a4:	460a      	mov	r2, r1
 80135a6:	4153      	adcs	r3, r2
 80135a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 80135ac:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80135b0:	2200      	movs	r2, #0
 80135b2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80135b6:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80135ba:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80135be:	2200      	movs	r2, #0
 80135c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80135c4:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80135c8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80135cc:	460b      	mov	r3, r1
 80135ce:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80135d2:	fb02 f203 	mul.w	r2, r2, r3
 80135d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80135da:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 80135de:	4601      	mov	r1, r0
 80135e0:	fb01 f303 	mul.w	r3, r1, r3
 80135e4:	4413      	add	r3, r2
 80135e6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80135ea:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 80135ee:	fba2 1201 	umull	r1, r2, r2, r1
 80135f2:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80135f6:	460a      	mov	r2, r1
 80135f8:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 80135fc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8013600:	4413      	add	r3, r2
 8013602:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8013606:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801360a:	2200      	movs	r2, #0
 801360c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8013610:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8013614:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013618:	2200      	movs	r2, #0
 801361a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801361e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8013622:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8013626:	460b      	mov	r3, r1
 8013628:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801362c:	fb02 f203 	mul.w	r2, r2, r3
 8013630:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8013634:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8013638:	4601      	mov	r1, r0
 801363a:	fb01 f303 	mul.w	r3, r1, r3
 801363e:	4413      	add	r3, r2
 8013640:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8013644:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8013648:	fba2 1201 	umull	r1, r2, r2, r1
 801364c:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8013650:	460a      	mov	r2, r1
 8013652:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8013656:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801365a:	4413      	add	r3, r2
 801365c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8013660:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8013664:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8013668:	4602      	mov	r2, r0
 801366a:	189b      	adds	r3, r3, r2
 801366c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801366e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8013672:	460a      	mov	r2, r1
 8013674:	4153      	adcs	r3, r2
 8013676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801367c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013680:	4602      	mov	r2, r0
 8013682:	189b      	adds	r3, r3, r2
 8013684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801368c:	460a      	mov	r2, r1
 801368e:	4153      	adcs	r3, r2
 8013690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8013694:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8013698:	2200      	movs	r2, #0
 801369a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801369e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80136a2:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80136a6:	2200      	movs	r2, #0
 80136a8:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80136ac:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80136b0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 80136b4:	460b      	mov	r3, r1
 80136b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80136ba:	fb02 f203 	mul.w	r2, r2, r3
 80136be:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80136c2:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 80136c6:	4601      	mov	r1, r0
 80136c8:	fb01 f303 	mul.w	r3, r1, r3
 80136cc:	4413      	add	r3, r2
 80136ce:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80136d2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 80136d6:	fba2 1201 	umull	r1, r2, r2, r1
 80136da:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80136de:	460a      	mov	r2, r1
 80136e0:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 80136e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80136e8:	4413      	add	r3, r2
 80136ea:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80136ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80136f2:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80136f6:	4602      	mov	r2, r0
 80136f8:	189b      	adds	r3, r3, r2
 80136fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80136fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013700:	460a      	mov	r2, r1
 8013702:	4153      	adcs	r3, r2
 8013704:	637b      	str	r3, [r7, #52]	@ 0x34
 8013706:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801370a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801370e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013712:	2200      	movs	r2, #0
 8013714:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8013718:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 801371c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013720:	2200      	movs	r2, #0
 8013722:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8013726:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801372a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801372e:	460b      	mov	r3, r1
 8013730:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8013734:	fb02 f203 	mul.w	r2, r2, r3
 8013738:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801373c:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8013740:	4601      	mov	r1, r0
 8013742:	fb01 f303 	mul.w	r3, r1, r3
 8013746:	4413      	add	r3, r2
 8013748:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801374c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8013750:	fba2 1201 	umull	r1, r2, r2, r1
 8013754:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8013758:	460a      	mov	r2, r1
 801375a:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801375e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8013762:	4413      	add	r3, r2
 8013764:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8013768:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801376c:	2200      	movs	r2, #0
 801376e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8013772:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8013776:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801377a:	2200      	movs	r2, #0
 801377c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8013780:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8013784:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8013788:	460b      	mov	r3, r1
 801378a:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801378e:	fb02 f203 	mul.w	r2, r2, r3
 8013792:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8013796:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801379a:	4601      	mov	r1, r0
 801379c:	fb01 f303 	mul.w	r3, r1, r3
 80137a0:	4413      	add	r3, r2
 80137a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80137a6:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 80137aa:	fba2 1201 	umull	r1, r2, r2, r1
 80137ae:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80137b2:	460a      	mov	r2, r1
 80137b4:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 80137b8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80137bc:	4413      	add	r3, r2
 80137be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80137c2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80137c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80137ca:	4602      	mov	r2, r0
 80137cc:	189b      	adds	r3, r3, r2
 80137ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80137d2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80137d6:	460a      	mov	r2, r1
 80137d8:	4153      	adcs	r3, r2
 80137da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 80137de:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80137e2:	2200      	movs	r2, #0
 80137e4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80137e8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80137ec:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80137f0:	2200      	movs	r2, #0
 80137f2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80137f6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80137fa:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 80137fe:	460b      	mov	r3, r1
 8013800:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8013804:	fb02 f203 	mul.w	r2, r2, r3
 8013808:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801380c:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 8013810:	4601      	mov	r1, r0
 8013812:	fb01 f303 	mul.w	r3, r1, r3
 8013816:	4413      	add	r3, r2
 8013818:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801381c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8013820:	fba2 ab01 	umull	sl, fp, r2, r1
 8013824:	445b      	add	r3, fp
 8013826:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013828:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801382c:	2200      	movs	r2, #0
 801382e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8013832:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8013836:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801383a:	2200      	movs	r2, #0
 801383c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8013840:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8013844:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8013848:	460b      	mov	r3, r1
 801384a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801384e:	fb02 f203 	mul.w	r2, r2, r3
 8013852:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8013856:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801385a:	4601      	mov	r1, r0
 801385c:	fb01 f303 	mul.w	r3, r1, r3
 8013860:	4413      	add	r3, r2
 8013862:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8013866:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801386a:	fba2 1201 	umull	r1, r2, r2, r1
 801386e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8013872:	460a      	mov	r2, r1
 8013874:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8013878:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801387c:	4413      	add	r3, r2
 801387e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8013882:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8013886:	460b      	mov	r3, r1
 8013888:	eb1a 0303 	adds.w	r3, sl, r3
 801388c:	653b      	str	r3, [r7, #80]	@ 0x50
 801388e:	4613      	mov	r3, r2
 8013890:	eb4b 0303 	adc.w	r3, fp, r3
 8013894:	657b      	str	r3, [r7, #84]	@ 0x54
 8013896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801389a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801389e:	4602      	mov	r2, r0
 80138a0:	189b      	adds	r3, r3, r2
 80138a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80138a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80138aa:	460a      	mov	r2, r1
 80138ac:	4153      	adcs	r3, r2
 80138ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 80138b2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80138b6:	2200      	movs	r2, #0
 80138b8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80138bc:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80138c0:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80138c4:	2200      	movs	r2, #0
 80138c6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80138ca:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80138ce:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80138d2:	460b      	mov	r3, r1
 80138d4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80138d8:	fb02 f203 	mul.w	r2, r2, r3
 80138dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80138e0:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 80138e4:	4601      	mov	r1, r0
 80138e6:	fb01 f303 	mul.w	r3, r1, r3
 80138ea:	4413      	add	r3, r2
 80138ec:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80138f0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80138f4:	fba2 1201 	umull	r1, r2, r2, r1
 80138f8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80138fc:	460a      	mov	r2, r1
 80138fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8013902:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8013906:	4413      	add	r3, r2
 8013908:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801390c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013910:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8013914:	4602      	mov	r2, r0
 8013916:	189b      	adds	r3, r3, r2
 8013918:	62bb      	str	r3, [r7, #40]	@ 0x28
 801391a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801391e:	460a      	mov	r2, r1
 8013920:	4153      	adcs	r3, r2
 8013922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013928:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801392c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013930:	2200      	movs	r2, #0
 8013932:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8013936:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801393a:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801393e:	2200      	movs	r2, #0
 8013940:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8013944:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8013948:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801394c:	460b      	mov	r3, r1
 801394e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8013952:	fb02 f203 	mul.w	r2, r2, r3
 8013956:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801395a:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801395e:	4601      	mov	r1, r0
 8013960:	fb01 f303 	mul.w	r3, r1, r3
 8013964:	4413      	add	r3, r2
 8013966:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801396a:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801396e:	fba2 8901 	umull	r8, r9, r2, r1
 8013972:	444b      	add	r3, r9
 8013974:	4699      	mov	r9, r3
 8013976:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801397a:	2200      	movs	r2, #0
 801397c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013980:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8013984:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013988:	2200      	movs	r2, #0
 801398a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801398e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8013992:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8013996:	460b      	mov	r3, r1
 8013998:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801399c:	fb02 f203 	mul.w	r2, r2, r3
 80139a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80139a4:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 80139a8:	4601      	mov	r1, r0
 80139aa:	fb01 f303 	mul.w	r3, r1, r3
 80139ae:	4413      	add	r3, r2
 80139b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80139b4:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80139b8:	fba2 1201 	umull	r1, r2, r2, r1
 80139bc:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80139c0:	460a      	mov	r2, r1
 80139c2:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80139c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80139ca:	4413      	add	r3, r2
 80139cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80139d0:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80139d4:	460b      	mov	r3, r1
 80139d6:	eb18 0303 	adds.w	r3, r8, r3
 80139da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80139de:	4613      	mov	r3, r2
 80139e0:	eb49 0303 	adc.w	r3, r9, r3
 80139e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 80139e8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80139ec:	2200      	movs	r2, #0
 80139ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80139f2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80139f6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80139fa:	2200      	movs	r2, #0
 80139fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8013a00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8013a04:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8013a08:	460b      	mov	r3, r1
 8013a0a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8013a0e:	fb02 f203 	mul.w	r2, r2, r3
 8013a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013a16:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 8013a1a:	4601      	mov	r1, r0
 8013a1c:	fb01 f303 	mul.w	r3, r1, r3
 8013a20:	4413      	add	r3, r2
 8013a22:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8013a26:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8013a2a:	fba2 4501 	umull	r4, r5, r2, r1
 8013a2e:	442b      	add	r3, r5
 8013a30:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8013a32:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013a36:	2200      	movs	r2, #0
 8013a38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8013a3c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8013a40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8013a44:	2200      	movs	r2, #0
 8013a46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8013a4a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8013a4e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8013a52:	460b      	mov	r3, r1
 8013a54:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8013a58:	fb02 f203 	mul.w	r2, r2, r3
 8013a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013a60:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 8013a64:	4601      	mov	r1, r0
 8013a66:	fb01 f303 	mul.w	r3, r1, r3
 8013a6a:	4413      	add	r3, r2
 8013a6c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8013a70:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8013a74:	fba2 1201 	umull	r1, r2, r2, r1
 8013a78:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8013a7c:	460a      	mov	r2, r1
 8013a7e:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8013a82:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8013a86:	4413      	add	r3, r2
 8013a88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8013a8c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8013a90:	460b      	mov	r3, r1
 8013a92:	18e3      	adds	r3, r4, r3
 8013a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a96:	4613      	mov	r3, r2
 8013a98:	eb45 0303 	adc.w	r3, r5, r3
 8013a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013aa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	189b      	adds	r3, r3, r2
 8013aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013ab2:	460a      	mov	r2, r1
 8013ab4:	4153      	adcs	r3, r2
 8013ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 8013aba:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8013ac4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8013ac8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013acc:	2200      	movs	r2, #0
 8013ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8013ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8013ad6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8013ada:	460b      	mov	r3, r1
 8013adc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013ae0:	fb02 f203 	mul.w	r2, r2, r3
 8013ae4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013ae8:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 8013aec:	4601      	mov	r1, r0
 8013aee:	fb01 f303 	mul.w	r3, r1, r3
 8013af2:	4413      	add	r3, r2
 8013af4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013af8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8013afc:	fba2 1201 	umull	r1, r2, r2, r1
 8013b00:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8013b04:	460a      	mov	r2, r1
 8013b06:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8013b0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013b0e:	4413      	add	r3, r2
 8013b10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8013b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8013b1c:	4602      	mov	r2, r0
 8013b1e:	189b      	adds	r3, r3, r2
 8013b20:	623b      	str	r3, [r7, #32]
 8013b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b26:	460a      	mov	r2, r1
 8013b28:	4153      	adcs	r3, r2
 8013b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013b30:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 8013b34:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8013b38:	f04f 0000 	mov.w	r0, #0
 8013b3c:	f04f 0100 	mov.w	r1, #0
 8013b40:	0e90      	lsrs	r0, r2, #26
 8013b42:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013b46:	0e99      	lsrs	r1, r3, #26
 8013b48:	4603      	mov	r3, r0
 8013b4a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 8013b4e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8013b52:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013b56:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 8013b5a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013b64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013b68:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8013b6c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013b70:	1851      	adds	r1, r2, r1
 8013b72:	61b9      	str	r1, [r7, #24]
 8013b74:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013b78:	414b      	adcs	r3, r1
 8013b7a:	61fb      	str	r3, [r7, #28]
 8013b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013b80:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 8013b84:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8013b88:	f04f 0000 	mov.w	r0, #0
 8013b8c:	f04f 0100 	mov.w	r1, #0
 8013b90:	0e90      	lsrs	r0, r2, #26
 8013b92:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013b96:	0e99      	lsrs	r1, r3, #26
 8013b98:	4603      	mov	r3, r0
 8013b9a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 8013b9e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8013ba2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013ba6:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 8013baa:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013bb4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8013bb8:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8013bbc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8013bc0:	1851      	adds	r1, r2, r1
 8013bc2:	6139      	str	r1, [r7, #16]
 8013bc4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8013bc8:	414b      	adcs	r3, r1
 8013bca:	617b      	str	r3, [r7, #20]
 8013bcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013bd0:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 8013bd4:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8013bd8:	f04f 0000 	mov.w	r0, #0
 8013bdc:	f04f 0100 	mov.w	r1, #0
 8013be0:	0e90      	lsrs	r0, r2, #26
 8013be2:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013be6:	0e99      	lsrs	r1, r3, #26
 8013be8:	4603      	mov	r3, r0
 8013bea:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 8013bee:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8013bf2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013bf6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 8013bfa:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013bfe:	2200      	movs	r2, #0
 8013c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013c02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013c04:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8013c08:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013c0a:	1851      	adds	r1, r2, r1
 8013c0c:	60b9      	str	r1, [r7, #8]
 8013c0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013c10:	414b      	adcs	r3, r1
 8013c12:	60fb      	str	r3, [r7, #12]
 8013c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c18:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 8013c1c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8013c20:	f04f 0000 	mov.w	r0, #0
 8013c24:	f04f 0100 	mov.w	r1, #0
 8013c28:	0e90      	lsrs	r0, r2, #26
 8013c2a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013c2e:	0e99      	lsrs	r1, r3, #26
 8013c30:	4603      	mov	r3, r0
 8013c32:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 8013c36:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013c3a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013c3e:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 8013c42:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013c46:	2200      	movs	r2, #0
 8013c48:	673b      	str	r3, [r7, #112]	@ 0x70
 8013c4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8013c4c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8013c50:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8013c52:	1851      	adds	r1, r2, r1
 8013c54:	6039      	str	r1, [r7, #0]
 8013c56:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8013c58:	414b      	adcs	r3, r1
 8013c5a:	607b      	str	r3, [r7, #4]
 8013c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c60:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 8013c64:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8013c68:	f04f 0000 	mov.w	r0, #0
 8013c6c:	f04f 0100 	mov.w	r1, #0
 8013c70:	0e90      	lsrs	r0, r2, #26
 8013c72:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013c76:	0e99      	lsrs	r1, r3, #26
 8013c78:	4603      	mov	r3, r0
 8013c7a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 8013c7e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8013c82:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013c86:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 8013c8a:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8013c8e:	4613      	mov	r3, r2
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	441a      	add	r2, r3
 8013c94:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013c98:	4413      	add	r3, r2
 8013c9a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 8013c9e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013ca2:	0e9b      	lsrs	r3, r3, #26
 8013ca4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 8013ca8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013cac:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013cb0:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 8013cb4:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8013cb8:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 8013cc2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8013cc6:	3310      	adds	r3, #16
 8013cc8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 8013ccc:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8013cd0:	3b10      	subs	r3, #16
 8013cd2:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 8013cd6:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8013cda:	2b0f      	cmp	r3, #15
 8013cdc:	f63f a983 	bhi.w	8012fe6 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 8013ce0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013ce4:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8013ce8:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 8013cea:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013cee:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8013cf2:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 8013cf4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013cf8:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8013cfc:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 8013cfe:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013d02:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8013d06:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 8013d08:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013d0c:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8013d10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8013d12:	bf00      	nop
 8013d14:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013d1e <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 8013d1e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d22:	b0aa      	sub	sp, #168	@ 0xa8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6678      	str	r0, [r7, #100]	@ 0x64
 8013d28:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8013d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 8013d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d030      	beq.n	8013d9c <poly1305_finish+0x7e>
    size_t i = st->leftover;
 8013d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 8013d44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013d48:	1c53      	adds	r3, r2, #1
 8013d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d52:	441a      	add	r2, r3
 8013d54:	2301      	movs	r3, #1
 8013d56:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 8013d5a:	e00d      	b.n	8013d78 <poly1305_finish+0x5a>
 8013d5c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8013d60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013d64:	4413      	add	r3, r2
 8013d66:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	7013      	strb	r3, [r2, #0]
 8013d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013d72:	3301      	adds	r3, #1
 8013d74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013d78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013d7c:	2b0f      	cmp	r3, #15
 8013d7e:	d9ed      	bls.n	8013d5c <poly1305_finish+0x3e>
    st->final = 1;
 8013d80:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8013d84:	2301      	movs	r3, #1
 8013d86:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 8013d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d8e:	333c      	adds	r3, #60	@ 0x3c
 8013d90:	2210      	movs	r2, #16
 8013d92:	4619      	mov	r1, r3
 8013d94:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013d98:	f7ff f8be 	bl	8012f18 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 8013d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013da0:	695b      	ldr	r3, [r3, #20]
 8013da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 8013da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013daa:	699b      	ldr	r3, [r3, #24]
 8013dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 8013db0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013db4:	69db      	ldr	r3, [r3, #28]
 8013db6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 8013dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dbe:	6a1b      	ldr	r3, [r3, #32]
 8013dc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 8013dc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 8013dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013dd2:	0e9b      	lsrs	r3, r3, #26
 8013dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 8013dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013ddc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 8013de4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013dec:	4413      	add	r3, r2
 8013dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 8013df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013df6:	0e9b      	lsrs	r3, r3, #26
 8013df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 8013dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013e00:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013e04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 8013e08:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e10:	4413      	add	r3, r2
 8013e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 8013e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e1a:	0e9b      	lsrs	r3, r3, #26
 8013e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 8013e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e24:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 8013e2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e34:	4413      	add	r3, r2
 8013e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 8013e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013e3e:	0e9b      	lsrs	r3, r3, #26
 8013e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 8013e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013e48:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 8013e50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013e54:	4613      	mov	r3, r2
 8013e56:	009b      	lsls	r3, r3, #2
 8013e58:	441a      	add	r2, r3
 8013e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013e5e:	4413      	add	r3, r2
 8013e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 8013e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013e68:	0e9b      	lsrs	r3, r3, #26
 8013e6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 8013e6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013e72:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 8013e7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e82:	4413      	add	r3, r2
 8013e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 8013e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013e8c:	3305      	adds	r3, #5
 8013e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 8013e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013e96:	0e9b      	lsrs	r3, r3, #26
 8013e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 8013e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ea0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 8013ea8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013eb0:	4413      	add	r3, r2
 8013eb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 8013eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013eba:	0e9b      	lsrs	r3, r3, #26
 8013ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 8013ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013ec4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 8013ecc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ed4:	4413      	add	r3, r2
 8013ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 8013ed8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013eda:	0e9b      	lsrs	r3, r3, #26
 8013edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 8013ee0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ee2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 8013ee8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ef0:	4413      	add	r3, r2
 8013ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 8013ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ef6:	0e9b      	lsrs	r3, r3, #26
 8013ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 8013efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013efe:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013f02:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 8013f04:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 8013f12:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 8013f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013f16:	0fdb      	lsrs	r3, r3, #31
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 8013f1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013f20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f22:	4013      	ands	r3, r2
 8013f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 8013f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f2e:	4013      	ands	r3, r2
 8013f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 8013f34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f38:	4013      	ands	r3, r2
 8013f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 8013f3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f40:	4013      	ands	r3, r2
 8013f42:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 8013f44:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f48:	4013      	ands	r3, r2
 8013f4a:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 8013f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f4e:	43db      	mvns	r3, r3
 8013f50:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 8013f52:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f58:	401a      	ands	r2, r3
 8013f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 8013f64:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013f68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f6a:	401a      	ands	r2, r3
 8013f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013f70:	4313      	orrs	r3, r2
 8013f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 8013f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013f7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f7c:	401a      	ands	r2, r3
 8013f7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f80:	4313      	orrs	r3, r2
 8013f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 8013f86:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f8c:	401a      	ands	r2, r3
 8013f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f90:	4313      	orrs	r3, r2
 8013f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 8013f96:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f9c:	401a      	ands	r2, r3
 8013f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 8013fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013faa:	069a      	lsls	r2, r3, #26
 8013fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013fb0:	4313      	orrs	r3, r2
 8013fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 8013fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013fba:	099a      	lsrs	r2, r3, #6
 8013fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013fc0:	051b      	lsls	r3, r3, #20
 8013fc2:	4313      	orrs	r3, r2
 8013fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 8013fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013fcc:	0b1a      	lsrs	r2, r3, #12
 8013fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013fd2:	039b      	lsls	r3, r3, #14
 8013fd4:	4313      	orrs	r3, r2
 8013fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 8013fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013fde:	0c9a      	lsrs	r2, r3, #18
 8013fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013fe4:	021b      	lsls	r3, r3, #8
 8013fe6:	4313      	orrs	r3, r2
 8013fe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 8013fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013ff4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8013ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014000:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014004:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8014008:	4602      	mov	r2, r0
 801400a:	189b      	adds	r3, r3, r2
 801400c:	61bb      	str	r3, [r7, #24]
 801400e:	460b      	mov	r3, r1
 8014010:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014012:	eb42 0303 	adc.w	r3, r2, r3
 8014016:	61fb      	str	r3, [r7, #28]
 8014018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801401c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 8014020:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014022:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 8014026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801402a:	2200      	movs	r2, #0
 801402c:	653b      	str	r3, [r7, #80]	@ 0x50
 801402e:	657a      	str	r2, [r7, #84]	@ 0x54
 8014030:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014036:	2200      	movs	r2, #0
 8014038:	643b      	str	r3, [r7, #64]	@ 0x40
 801403a:	647a      	str	r2, [r7, #68]	@ 0x44
 801403c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801403e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8014042:	4602      	mov	r2, r0
 8014044:	189c      	adds	r4, r3, r2
 8014046:	460b      	mov	r3, r1
 8014048:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801404a:	eb42 0303 	adc.w	r3, r2, r3
 801404e:	461d      	mov	r5, r3
 8014050:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8014054:	f04f 0000 	mov.w	r0, #0
 8014058:	f04f 0100 	mov.w	r1, #0
 801405c:	0018      	movs	r0, r3
 801405e:	2100      	movs	r1, #0
 8014060:	1823      	adds	r3, r4, r0
 8014062:	613b      	str	r3, [r7, #16]
 8014064:	eb45 0301 	adc.w	r3, r5, r1
 8014068:	617b      	str	r3, [r7, #20]
 801406a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801406e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 8014072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 8014078:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801407c:	2200      	movs	r2, #0
 801407e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014080:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8014082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014088:	2200      	movs	r2, #0
 801408a:	633b      	str	r3, [r7, #48]	@ 0x30
 801408c:	637a      	str	r2, [r7, #52]	@ 0x34
 801408e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8014092:	4623      	mov	r3, r4
 8014094:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8014098:	4602      	mov	r2, r0
 801409a:	eb13 0a02 	adds.w	sl, r3, r2
 801409e:	462b      	mov	r3, r5
 80140a0:	460a      	mov	r2, r1
 80140a2:	eb43 0b02 	adc.w	fp, r3, r2
 80140a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80140aa:	f04f 0200 	mov.w	r2, #0
 80140ae:	f04f 0300 	mov.w	r3, #0
 80140b2:	000a      	movs	r2, r1
 80140b4:	2300      	movs	r3, #0
 80140b6:	eb1a 0102 	adds.w	r1, sl, r2
 80140ba:	60b9      	str	r1, [r7, #8]
 80140bc:	eb4b 0303 	adc.w	r3, fp, r3
 80140c0:	60fb      	str	r3, [r7, #12]
 80140c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80140c6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 80140ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80140cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 80140d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140d4:	2200      	movs	r2, #0
 80140d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80140d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80140da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140e0:	2200      	movs	r2, #0
 80140e2:	623b      	str	r3, [r7, #32]
 80140e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80140e6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80140ea:	4623      	mov	r3, r4
 80140ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80140f0:	4602      	mov	r2, r0
 80140f2:	eb13 0802 	adds.w	r8, r3, r2
 80140f6:	462b      	mov	r3, r5
 80140f8:	460a      	mov	r2, r1
 80140fa:	eb43 0902 	adc.w	r9, r3, r2
 80140fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8014102:	f04f 0200 	mov.w	r2, #0
 8014106:	f04f 0300 	mov.w	r3, #0
 801410a:	000a      	movs	r2, r1
 801410c:	2300      	movs	r3, #0
 801410e:	eb18 0102 	adds.w	r1, r8, r2
 8014112:	6039      	str	r1, [r7, #0]
 8014114:	eb49 0303 	adc.w	r3, r9, r3
 8014118:	607b      	str	r3, [r7, #4]
 801411a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801411e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 8014122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 8014128:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801412c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801412e:	f7fe fe56 	bl	8012dde <U32TO8>
  U32TO8(mac + 4, h1);
 8014132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014134:	3304      	adds	r3, #4
 8014136:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801413a:	4618      	mov	r0, r3
 801413c:	f7fe fe4f 	bl	8012dde <U32TO8>
  U32TO8(mac + 8, h2);
 8014140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014142:	3308      	adds	r3, #8
 8014144:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8014148:	4618      	mov	r0, r3
 801414a:	f7fe fe48 	bl	8012dde <U32TO8>
  U32TO8(mac + 12, h3);
 801414e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014150:	330c      	adds	r3, #12
 8014152:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe fe41 	bl	8012dde <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801415c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014160:	2200      	movs	r2, #0
 8014162:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8014164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014168:	2200      	movs	r2, #0
 801416a:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801416c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014170:	2200      	movs	r2, #0
 8014172:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8014174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014178:	2200      	movs	r2, #0
 801417a:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801417c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014180:	2200      	movs	r2, #0
 8014182:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 8014184:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014188:	2200      	movs	r2, #0
 801418a:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801418c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014190:	2200      	movs	r2, #0
 8014192:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 8014194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014198:	2200      	movs	r2, #0
 801419a:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801419c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141a0:	2200      	movs	r2, #0
 80141a2:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 80141a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141a8:	2200      	movs	r2, #0
 80141aa:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 80141ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141b0:	2200      	movs	r2, #0
 80141b2:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 80141b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141b8:	2200      	movs	r2, #0
 80141ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 80141bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141c0:	2200      	movs	r2, #0
 80141c2:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 80141c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141c8:	2200      	movs	r2, #0
 80141ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80141cc:	bf00      	nop
 80141ce:	37a8      	adds	r7, #168	@ 0xa8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080141d6 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 80141d6:	b580      	push	{r7, lr}
 80141d8:	b088      	sub	sp, #32
 80141da:	af00      	add	r7, sp, #0
 80141dc:	60f8      	str	r0, [r7, #12]
 80141de:	60b9      	str	r1, [r7, #8]
 80141e0:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d03d      	beq.n	801426a <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141f2:	f1c3 0310 	rsb	r3, r3, #16
 80141f6:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 80141f8:	69ba      	ldr	r2, [r7, #24]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d901      	bls.n	8014204 <poly1305_update+0x2e>
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 8014204:	2300      	movs	r3, #0
 8014206:	61fb      	str	r3, [r7, #28]
 8014208:	e00f      	b.n	801422a <poly1305_update+0x54>
 801420a:	68ba      	ldr	r2, [r7, #8]
 801420c:	69fb      	ldr	r3, [r7, #28]
 801420e:	441a      	add	r2, r3
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	440b      	add	r3, r1
 8014218:	7811      	ldrb	r1, [r2, #0]
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	4413      	add	r3, r2
 801421e:	460a      	mov	r2, r1
 8014220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	3301      	adds	r3, #1
 8014228:	61fb      	str	r3, [r7, #28]
 801422a:	69fa      	ldr	r2, [r7, #28]
 801422c:	69bb      	ldr	r3, [r7, #24]
 801422e:	429a      	cmp	r2, r3
 8014230:	d3eb      	bcc.n	801420a <poly1305_update+0x34>
    bytes -= want;
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	607b      	str	r3, [r7, #4]
    m += want;
 801423a:	68ba      	ldr	r2, [r7, #8]
 801423c:	69bb      	ldr	r3, [r7, #24]
 801423e:	4413      	add	r3, r2
 8014240:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	441a      	add	r2, r3
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014252:	2b0f      	cmp	r3, #15
 8014254:	d93e      	bls.n	80142d4 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	333c      	adds	r3, #60	@ 0x3c
 801425a:	2210      	movs	r2, #16
 801425c:	4619      	mov	r1, r3
 801425e:	6978      	ldr	r0, [r7, #20]
 8014260:	f7fe fe5a 	bl	8012f18 <poly1305_blocks>
    st->leftover = 0;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2200      	movs	r2, #0
 8014268:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b0f      	cmp	r3, #15
 801426e:	d910      	bls.n	8014292 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f023 030f 	bic.w	r3, r3, #15
 8014276:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 8014278:	693a      	ldr	r2, [r7, #16]
 801427a:	68b9      	ldr	r1, [r7, #8]
 801427c:	6978      	ldr	r0, [r7, #20]
 801427e:	f7fe fe4b 	bl	8012f18 <poly1305_blocks>
    m += want;
 8014282:	68ba      	ldr	r2, [r7, #8]
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	4413      	add	r3, r2
 8014288:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	1ad3      	subs	r3, r2, r3
 8014290:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d01e      	beq.n	80142d6 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 8014298:	2300      	movs	r3, #0
 801429a:	61fb      	str	r3, [r7, #28]
 801429c:	e00f      	b.n	80142be <poly1305_update+0xe8>
 801429e:	68ba      	ldr	r2, [r7, #8]
 80142a0:	69fb      	ldr	r3, [r7, #28]
 80142a2:	441a      	add	r2, r3
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80142a8:	69fb      	ldr	r3, [r7, #28]
 80142aa:	440b      	add	r3, r1
 80142ac:	7811      	ldrb	r1, [r2, #0]
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	4413      	add	r3, r2
 80142b2:	460a      	mov	r2, r1
 80142b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	3301      	adds	r3, #1
 80142bc:	61fb      	str	r3, [r7, #28]
 80142be:	69fa      	ldr	r2, [r7, #28]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d3eb      	bcc.n	801429e <poly1305_update+0xc8>
    st->leftover += bytes;
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	441a      	add	r2, r3
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80142d2:	e000      	b.n	80142d6 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 80142d4:	bf00      	nop
  }
}
 80142d6:	3720      	adds	r7, #32
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	f003 030f 	and.w	r3, r3, #15
 80142ec:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d007      	beq.n	8014304 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	f1c3 0310 	rsb	r3, r3, #16
 80142fa:	461a      	mov	r2, r3
 80142fc:	4903      	ldr	r1, [pc, #12]	@ (801430c <pad_if_needed+0x30>)
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f7ff ff69 	bl	80141d6 <poly1305_update>
  }
}
 8014304:	bf00      	nop
 8014306:	3710      	adds	r7, #16
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	24000dc8 	.word	0x24000dc8

08014310 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 8014310:	b580      	push	{r7, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801431c:	783b      	ldrb	r3, [r7, #0]
 801431e:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 8014320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014324:	f04f 0200 	mov.w	r2, #0
 8014328:	f04f 0300 	mov.w	r3, #0
 801432c:	0a02      	lsrs	r2, r0, #8
 801432e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014332:	0a0b      	lsrs	r3, r1, #8
 8014334:	b2d3      	uxtb	r3, r2
 8014336:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 8014338:	e9d7 0100 	ldrd	r0, r1, [r7]
 801433c:	f04f 0200 	mov.w	r2, #0
 8014340:	f04f 0300 	mov.w	r3, #0
 8014344:	0c02      	lsrs	r2, r0, #16
 8014346:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801434a:	0c0b      	lsrs	r3, r1, #16
 801434c:	b2d3      	uxtb	r3, r2
 801434e:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 8014350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014354:	f04f 0200 	mov.w	r2, #0
 8014358:	f04f 0300 	mov.w	r3, #0
 801435c:	0e02      	lsrs	r2, r0, #24
 801435e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014362:	0e0b      	lsrs	r3, r1, #24
 8014364:	b2d3      	uxtb	r3, r2
 8014366:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 8014368:	e9d7 0100 	ldrd	r0, r1, [r7]
 801436c:	f04f 0200 	mov.w	r2, #0
 8014370:	f04f 0300 	mov.w	r3, #0
 8014374:	000a      	movs	r2, r1
 8014376:	2300      	movs	r3, #0
 8014378:	b2d3      	uxtb	r3, r2
 801437a:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801437c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014380:	f04f 0200 	mov.w	r2, #0
 8014384:	f04f 0300 	mov.w	r3, #0
 8014388:	0a0a      	lsrs	r2, r1, #8
 801438a:	2300      	movs	r3, #0
 801438c:	b2d3      	uxtb	r3, r2
 801438e:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 8014390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014394:	f04f 0200 	mov.w	r2, #0
 8014398:	f04f 0300 	mov.w	r3, #0
 801439c:	0c0a      	lsrs	r2, r1, #16
 801439e:	2300      	movs	r3, #0
 80143a0:	b2d3      	uxtb	r3, r2
 80143a2:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 80143a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80143a8:	f04f 0200 	mov.w	r2, #0
 80143ac:	f04f 0300 	mov.w	r3, #0
 80143b0:	0e0a      	lsrs	r2, r1, #24
 80143b2:	2300      	movs	r3, #0
 80143b4:	b2d3      	uxtb	r3, r2
 80143b6:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 80143b8:	f107 0310 	add.w	r3, r7, #16
 80143bc:	2208      	movs	r2, #8
 80143be:	4619      	mov	r1, r3
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	f7ff ff08 	bl	80141d6 <poly1305_update>
}
 80143c6:	bf00      	nop
 80143c8:	3718      	adds	r7, #24
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 80143ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80143d2:	b0b0      	sub	sp, #192	@ 0xc0
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	607a      	str	r2, [r7, #4]
 80143dc:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 80143de:	2300      	movs	r3, #0
 80143e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80143e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80143e8:	2200      	movs	r2, #0
 80143ea:	601a      	str	r2, [r3, #0]
 80143ec:	605a      	str	r2, [r3, #4]
 80143ee:	609a      	str	r2, [r3, #8]
 80143f0:	60da      	str	r2, [r3, #12]
 80143f2:	611a      	str	r2, [r3, #16]
 80143f4:	615a      	str	r2, [r3, #20]
 80143f6:	619a      	str	r2, [r3, #24]
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 80143f8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80143fc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8014400:	6839      	ldr	r1, [r7, #0]
 8014402:	4618      	mov	r0, r3
 8014404:	f7fe fcaf 	bl	8012d66 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 8014408:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801440c:	f107 0314 	add.w	r3, r7, #20
 8014410:	4611      	mov	r1, r2
 8014412:	4618      	mov	r0, r3
 8014414:	f7fe fd04 	bl	8012e20 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 8014418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801441c:	2b00      	cmp	r3, #0
 801441e:	d013      	beq.n	8014448 <poly1305_calculate_mac+0x7a>
 8014420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d00f      	beq.n	8014448 <poly1305_calculate_mac+0x7a>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 8014428:	f107 0314 	add.w	r3, r7, #20
 801442c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8014430:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff fece 	bl	80141d6 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801443a:	f107 0314 	add.w	r3, r7, #20
 801443e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8014442:	4618      	mov	r0, r3
 8014444:	f7ff ff4a 	bl	80142dc <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 8014448:	f107 0314 	add.w	r3, r7, #20
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	68b9      	ldr	r1, [r7, #8]
 8014450:	4618      	mov	r0, r3
 8014452:	f7ff fec0 	bl	80141d6 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 8014456:	f107 0314 	add.w	r3, r7, #20
 801445a:	6879      	ldr	r1, [r7, #4]
 801445c:	4618      	mov	r0, r3
 801445e:	f7ff ff3d 	bl	80142dc <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 8014462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014466:	2200      	movs	r2, #0
 8014468:	4698      	mov	r8, r3
 801446a:	4691      	mov	r9, r2
 801446c:	f107 0114 	add.w	r1, r7, #20
 8014470:	4642      	mov	r2, r8
 8014472:	464b      	mov	r3, r9
 8014474:	4608      	mov	r0, r1
 8014476:	f7ff ff4b 	bl	8014310 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2200      	movs	r2, #0
 801447e:	461c      	mov	r4, r3
 8014480:	4615      	mov	r5, r2
 8014482:	f107 0114 	add.w	r1, r7, #20
 8014486:	4622      	mov	r2, r4
 8014488:	462b      	mov	r3, r5
 801448a:	4608      	mov	r0, r1
 801448c:	f7ff ff40 	bl	8014310 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 8014490:	f107 0314 	add.w	r3, r7, #20
 8014494:	68f9      	ldr	r1, [r7, #12]
 8014496:	4618      	mov	r0, r3
 8014498:	f7ff fc41 	bl	8013d1e <poly1305_finish>
}
 801449c:	bf00      	nop
 801449e:	37c0      	adds	r7, #192	@ 0xc0
 80144a0:	46bd      	mov	sp, r7
 80144a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080144a6 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b08a      	sub	sp, #40	@ 0x28
 80144aa:	af04      	add	r7, sp, #16
 80144ac:	60f8      	str	r0, [r7, #12]
 80144ae:	60b9      	str	r1, [r7, #8]
 80144b0:	607a      	str	r2, [r7, #4]
 80144b2:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 80144b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b6:	3310      	adds	r3, #16
 80144b8:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 80144ba:	68fa      	ldr	r2, [r7, #12]
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	4413      	add	r3, r2
 80144c0:	461a      	mov	r2, r3
 80144c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d909      	bls.n	80144dc <mg_chacha20_poly1305_encrypt+0x36>
 80144c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80144ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144cc:	4413      	add	r3, r2
 80144ce:	461a      	mov	r2, r3
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d902      	bls.n	80144dc <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 80144d6:	f04f 33ff 	mov.w	r3, #4294967295
 80144da:	e018      	b.n	801450e <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 80144dc:	2301      	movs	r3, #1
 80144de:	9301      	str	r3, [sp, #4]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f7fe fbc3 	bl	8012c76 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 80144f0:	68fa      	ldr	r2, [r7, #12]
 80144f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f4:	18d0      	adds	r0, r2, r3
 80144f6:	6a3b      	ldr	r3, [r7, #32]
 80144f8:	9302      	str	r3, [sp, #8]
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	9301      	str	r3, [sp, #4]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	9300      	str	r3, [sp, #0]
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014506:	68f9      	ldr	r1, [r7, #12]
 8014508:	f7ff ff61 	bl	80143ce <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801450c:	697b      	ldr	r3, [r7, #20]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 8014516:	b580      	push	{r7, lr}
 8014518:	b088      	sub	sp, #32
 801451a:	af02      	add	r7, sp, #8
 801451c:	60f8      	str	r0, [r7, #12]
 801451e:	60b9      	str	r1, [r7, #8]
 8014520:	607a      	str	r2, [r7, #4]
 8014522:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 8014524:	6a3b      	ldr	r3, [r7, #32]
 8014526:	3b10      	subs	r3, #16
 8014528:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801452a:	683a      	ldr	r2, [r7, #0]
 801452c:	6a3b      	ldr	r3, [r7, #32]
 801452e:	4413      	add	r3, r2
 8014530:	461a      	mov	r2, r3
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	429a      	cmp	r2, r3
 8014536:	d909      	bls.n	801454c <mg_chacha20_poly1305_decrypt+0x36>
 8014538:	68fa      	ldr	r2, [r7, #12]
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	4413      	add	r3, r2
 801453e:	461a      	mov	r2, r3
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	429a      	cmp	r2, r3
 8014544:	d902      	bls.n	801454c <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 8014546:	f04f 33ff 	mov.w	r3, #4294967295
 801454a:	e00a      	b.n	8014562 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801454c:	2301      	movs	r3, #1
 801454e:	9301      	str	r3, [sp, #4]
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	697a      	ldr	r2, [r7, #20]
 8014558:	6839      	ldr	r1, [r7, #0]
 801455a:	68f8      	ldr	r0, [r7, #12]
 801455c:	f7fe fb8b 	bl	8012c76 <chacha20_xor_stream>
  return actual_size;
 8014560:	697b      	ldr	r3, [r7, #20]
}
 8014562:	4618      	mov	r0, r3
 8014564:	3718      	adds	r7, #24
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}

0801456a <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801456a:	b480      	push	{r7}
 801456c:	b085      	sub	sp, #20
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
 8014572:	460b      	mov	r3, r1
 8014574:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8014576:	2300      	movs	r3, #0
 8014578:	73fb      	strb	r3, [r7, #15]
 801457a:	e00a      	b.n	8014592 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801457c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	4413      	add	r3, r2
 8014586:	2200      	movs	r2, #0
 8014588:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801458a:	7bfb      	ldrb	r3, [r7, #15]
 801458c:	3301      	adds	r3, #1
 801458e:	b2db      	uxtb	r3, r3
 8014590:	73fb      	strb	r3, [r7, #15]
 8014592:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801459a:	429a      	cmp	r2, r3
 801459c:	dbee      	blt.n	801457c <mg_uecc_vli_clear+0x12>
  }
}
 801459e:	bf00      	nop
 80145a0:	bf00      	nop
 80145a2:	3714      	adds	r7, #20
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr

080145ac <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 80145ac:	b480      	push	{r7}
 80145ae:	b085      	sub	sp, #20
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	460b      	mov	r3, r1
 80145b6:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 80145b8:	2300      	movs	r3, #0
 80145ba:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80145bc:	2300      	movs	r3, #0
 80145be:	72fb      	strb	r3, [r7, #11]
 80145c0:	e00c      	b.n	80145dc <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 80145c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80145c6:	009b      	lsls	r3, r3, #2
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	4413      	add	r3, r2
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	68fa      	ldr	r2, [r7, #12]
 80145d0:	4313      	orrs	r3, r2
 80145d2:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 80145d4:	7afb      	ldrb	r3, [r7, #11]
 80145d6:	3301      	adds	r3, #1
 80145d8:	b2db      	uxtb	r3, r3
 80145da:	72fb      	strb	r3, [r7, #11]
 80145dc:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80145e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	dbec      	blt.n	80145c2 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	bf0c      	ite	eq
 80145ee:	2301      	moveq	r3, #1
 80145f0:	2300      	movne	r3, #0
 80145f2:	b2db      	uxtb	r3, r3
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3714      	adds	r7, #20
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	460b      	mov	r3, r1
 801460a:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801460c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014610:	115b      	asrs	r3, r3, #5
 8014612:	b21b      	sxth	r3, r3
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	4413      	add	r3, r2
 801461a:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801461c:	887b      	ldrh	r3, [r7, #2]
 801461e:	f003 031f 	and.w	r3, r3, #31
 8014622:	2101      	movs	r1, #1
 8014624:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8014628:	4013      	ands	r3, r2
}
 801462a:	4618      	mov	r0, r3
 801462c:	370c      	adds	r7, #12
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	4770      	bx	lr

08014636 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 8014636:	b480      	push	{r7}
 8014638:	b085      	sub	sp, #20
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	460b      	mov	r3, r1
 8014640:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8014642:	78fb      	ldrb	r3, [r7, #3]
 8014644:	3b01      	subs	r3, #1
 8014646:	b2db      	uxtb	r3, r3
 8014648:	73fb      	strb	r3, [r7, #15]
 801464a:	e003      	b.n	8014654 <vli_numDigits+0x1e>
 801464c:	7bfb      	ldrb	r3, [r7, #15]
 801464e:	3b01      	subs	r3, #1
 8014650:	b2db      	uxtb	r3, r3
 8014652:	73fb      	strb	r3, [r7, #15]
 8014654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014658:	2b00      	cmp	r3, #0
 801465a:	db07      	blt.n	801466c <vli_numDigits+0x36>
 801465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	4413      	add	r3, r2
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d0ef      	beq.n	801464c <vli_numDigits+0x16>
  }

  return (i + 1);
 801466c:	7bfb      	ldrb	r3, [r7, #15]
 801466e:	3301      	adds	r3, #1
 8014670:	b2db      	uxtb	r3, r3
 8014672:	b25b      	sxtb	r3, r3
}
 8014674:	4618      	mov	r0, r3
 8014676:	3714      	adds	r7, #20
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 8014680:	b580      	push	{r7, lr}
 8014682:	b086      	sub	sp, #24
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	460b      	mov	r3, r1
 801468a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801468c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014690:	4619      	mov	r1, r3
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f7ff ffcf 	bl	8014636 <vli_numDigits>
 8014698:	4603      	mov	r3, r0
 801469a:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801469c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d101      	bne.n	80146a8 <mg_uecc_vli_numBits+0x28>
    return 0;
 80146a4:	2300      	movs	r3, #0
 80146a6:	e01f      	b.n	80146e8 <mg_uecc_vli_numBits+0x68>
  }

  digit = vli[num_digits - 1];
 80146a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80146ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80146b0:	4413      	add	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	4413      	add	r3, r2
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80146bc:	2300      	movs	r3, #0
 80146be:	617b      	str	r3, [r7, #20]
 80146c0:	e005      	b.n	80146ce <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	085b      	lsrs	r3, r3, #1
 80146c6:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	3301      	adds	r3, #1
 80146cc:	617b      	str	r3, [r7, #20]
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d1f6      	bne.n	80146c2 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 80146d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146d8:	3b01      	subs	r3, #1
 80146da:	015b      	lsls	r3, r3, #5
 80146dc:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 80146e2:	4413      	add	r3, r2
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	b21b      	sxth	r3, r3
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3718      	adds	r7, #24
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 80146f0:	b480      	push	{r7}
 80146f2:	b087      	sub	sp, #28
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	4613      	mov	r3, r2
 80146fc:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80146fe:	2300      	movs	r3, #0
 8014700:	75fb      	strb	r3, [r7, #23]
 8014702:	e00f      	b.n	8014724 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 8014704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	68ba      	ldr	r2, [r7, #8]
 801470c:	441a      	add	r2, r3
 801470e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	68f9      	ldr	r1, [r7, #12]
 8014716:	440b      	add	r3, r1
 8014718:	6812      	ldr	r2, [r2, #0]
 801471a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801471c:	7dfb      	ldrb	r3, [r7, #23]
 801471e:	3301      	adds	r3, #1
 8014720:	b2db      	uxtb	r3, r3
 8014722:	75fb      	strb	r3, [r7, #23]
 8014724:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801472c:	429a      	cmp	r2, r3
 801472e:	dbe9      	blt.n	8014704 <mg_uecc_vli_set+0x14>
  }
}
 8014730:	bf00      	nop
 8014732:	bf00      	nop
 8014734:	371c      	adds	r7, #28
 8014736:	46bd      	mov	sp, r7
 8014738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473c:	4770      	bx	lr

0801473e <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801473e:	b480      	push	{r7}
 8014740:	b087      	sub	sp, #28
 8014742:	af00      	add	r7, sp, #0
 8014744:	60f8      	str	r0, [r7, #12]
 8014746:	60b9      	str	r1, [r7, #8]
 8014748:	4613      	mov	r3, r2
 801474a:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801474c:	79fb      	ldrb	r3, [r7, #7]
 801474e:	3b01      	subs	r3, #1
 8014750:	b2db      	uxtb	r3, r3
 8014752:	75fb      	strb	r3, [r7, #23]
 8014754:	e024      	b.n	80147a0 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 8014756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	68fa      	ldr	r2, [r7, #12]
 801475e:	4413      	add	r3, r2
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	68b9      	ldr	r1, [r7, #8]
 801476a:	440b      	add	r3, r1
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	429a      	cmp	r2, r3
 8014770:	d901      	bls.n	8014776 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 8014772:	2301      	movs	r3, #1
 8014774:	e019      	b.n	80147aa <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 8014776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801477a:	009b      	lsls	r3, r3, #2
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	4413      	add	r3, r2
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014786:	009b      	lsls	r3, r3, #2
 8014788:	68b9      	ldr	r1, [r7, #8]
 801478a:	440b      	add	r3, r1
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	429a      	cmp	r2, r3
 8014790:	d202      	bcs.n	8014798 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 8014792:	f04f 33ff 	mov.w	r3, #4294967295
 8014796:	e008      	b.n	80147aa <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 8014798:	7dfb      	ldrb	r3, [r7, #23]
 801479a:	3b01      	subs	r3, #1
 801479c:	b2db      	uxtb	r3, r3
 801479e:	75fb      	strb	r3, [r7, #23]
 80147a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	dad6      	bge.n	8014756 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 80147a8:	2300      	movs	r3, #0
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	371c      	adds	r7, #28
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr

080147b6 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 80147b6:	b480      	push	{r7}
 80147b8:	b087      	sub	sp, #28
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	60f8      	str	r0, [r7, #12]
 80147be:	60b9      	str	r1, [r7, #8]
 80147c0:	4613      	mov	r3, r2
 80147c2:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 80147c4:	2300      	movs	r3, #0
 80147c6:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 80147c8:	79fb      	ldrb	r3, [r7, #7]
 80147ca:	3b01      	subs	r3, #1
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	74fb      	strb	r3, [r7, #19]
 80147d0:	e013      	b.n	80147fa <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 80147d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	68fa      	ldr	r2, [r7, #12]
 80147da:	4413      	add	r3, r2
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147e2:	009b      	lsls	r3, r3, #2
 80147e4:	68b9      	ldr	r1, [r7, #8]
 80147e6:	440b      	add	r3, r1
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	4053      	eors	r3, r2
 80147ec:	697a      	ldr	r2, [r7, #20]
 80147ee:	4313      	orrs	r3, r2
 80147f0:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 80147f2:	7cfb      	ldrb	r3, [r7, #19]
 80147f4:	3b01      	subs	r3, #1
 80147f6:	b2db      	uxtb	r3, r3
 80147f8:	74fb      	strb	r3, [r7, #19]
 80147fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	dae7      	bge.n	80147d2 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	2b00      	cmp	r3, #0
 8014806:	bf0c      	ite	eq
 8014808:	2301      	moveq	r3, #1
 801480a:	2300      	movne	r3, #0
 801480c:	b2db      	uxtb	r3, r3
}
 801480e:	4618      	mov	r0, r3
 8014810:	371c      	adds	r7, #28
 8014812:	46bd      	mov	sp, r7
 8014814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014818:	4770      	bx	lr

0801481a <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801481a:	b580      	push	{r7, lr}
 801481c:	b08e      	sub	sp, #56	@ 0x38
 801481e:	af00      	add	r7, sp, #0
 8014820:	60f8      	str	r0, [r7, #12]
 8014822:	60b9      	str	r1, [r7, #8]
 8014824:	4613      	mov	r3, r2
 8014826:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 8014828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801482c:	f107 0010 	add.w	r0, r7, #16
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	68f9      	ldr	r1, [r7, #12]
 8014834:	f000 f896 	bl	8014964 <mg_uecc_vli_sub>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	bf14      	ite	ne
 801483e:	2301      	movne	r3, #1
 8014840:	2300      	moveq	r3, #0
 8014842:	b2db      	uxtb	r3, r3
 8014844:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 8014846:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801484a:	f107 0310 	add.w	r3, r7, #16
 801484e:	4611      	mov	r1, r2
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff feab 	bl	80145ac <mg_uecc_vli_isZero>
 8014856:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 8014858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801485a:	2b00      	cmp	r3, #0
 801485c:	bf0c      	ite	eq
 801485e:	2301      	moveq	r3, #1
 8014860:	2300      	movne	r3, #0
 8014862:	b2db      	uxtb	r3, r3
 8014864:	461a      	mov	r2, r3
 8014866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014868:	b2db      	uxtb	r3, r3
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	b2db      	uxtb	r3, r3
 801486e:	1ad3      	subs	r3, r2, r3
 8014870:	b2db      	uxtb	r3, r3
 8014872:	b25b      	sxtb	r3, r3
}
 8014874:	4618      	mov	r0, r3
 8014876:	3738      	adds	r7, #56	@ 0x38
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801487c:	b480      	push	{r7}
 801487e:	b087      	sub	sp, #28
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	460b      	mov	r3, r1
 8014886:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	617b      	str	r3, [r7, #20]

  vli += num_words;
 8014890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014894:	009b      	lsls	r3, r3, #2
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	4413      	add	r3, r2
 801489a:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801489c:	e00b      	b.n	80148b6 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	085a      	lsrs	r2, r3, #1
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	431a      	orrs	r2, r3
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	07db      	lsls	r3, r3, #31
 80148b4:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	1f1a      	subs	r2, r3, #4
 80148ba:	607a      	str	r2, [r7, #4]
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d3ed      	bcc.n	801489e <mg_uecc_vli_rshift1+0x22>
  }
}
 80148c2:	bf00      	nop
 80148c4:	bf00      	nop
 80148c6:	371c      	adds	r7, #28
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 80148d0:	b480      	push	{r7}
 80148d2:	b089      	sub	sp, #36	@ 0x24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
 80148dc:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 80148de:	2300      	movs	r3, #0
 80148e0:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80148e2:	2300      	movs	r3, #0
 80148e4:	76fb      	strb	r3, [r7, #27]
 80148e6:	e030      	b.n	801494a <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 80148e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	68ba      	ldr	r2, [r7, #8]
 80148f0:	4413      	add	r3, r2
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	6879      	ldr	r1, [r7, #4]
 80148fc:	440b      	add	r3, r1
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4413      	add	r3, r2
 8014902:	69fa      	ldr	r2, [r7, #28]
 8014904:	4413      	add	r3, r2
 8014906:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 8014908:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	68ba      	ldr	r2, [r7, #8]
 8014910:	4413      	add	r3, r2
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	697a      	ldr	r2, [r7, #20]
 8014916:	429a      	cmp	r2, r3
 8014918:	d00c      	beq.n	8014934 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801491a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	4413      	add	r3, r2
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	697a      	ldr	r2, [r7, #20]
 8014928:	429a      	cmp	r2, r3
 801492a:	bf34      	ite	cc
 801492c:	2301      	movcc	r3, #1
 801492e:	2300      	movcs	r3, #0
 8014930:	b2db      	uxtb	r3, r3
 8014932:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 8014934:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	4413      	add	r3, r2
 801493e:	697a      	ldr	r2, [r7, #20]
 8014940:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8014942:	7efb      	ldrb	r3, [r7, #27]
 8014944:	3301      	adds	r3, #1
 8014946:	b2db      	uxtb	r3, r3
 8014948:	76fb      	strb	r3, [r7, #27]
 801494a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801494e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014952:	429a      	cmp	r2, r3
 8014954:	dbc8      	blt.n	80148e8 <mg_uecc_vli_add+0x18>
  }
  return carry;
 8014956:	69fb      	ldr	r3, [r7, #28]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3724      	adds	r7, #36	@ 0x24
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr

08014964 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 8014964:	b480      	push	{r7}
 8014966:	b089      	sub	sp, #36	@ 0x24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
 8014970:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 8014972:	2300      	movs	r3, #0
 8014974:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8014976:	2300      	movs	r3, #0
 8014978:	76fb      	strb	r3, [r7, #27]
 801497a:	e030      	b.n	80149de <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801497c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014980:	009b      	lsls	r3, r3, #2
 8014982:	68ba      	ldr	r2, [r7, #8]
 8014984:	4413      	add	r3, r2
 8014986:	681a      	ldr	r2, [r3, #0]
 8014988:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	6879      	ldr	r1, [r7, #4]
 8014990:	440b      	add	r3, r1
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	1ad2      	subs	r2, r2, r3
 8014996:	69fb      	ldr	r3, [r7, #28]
 8014998:	1ad3      	subs	r3, r2, r3
 801499a:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801499c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	68ba      	ldr	r2, [r7, #8]
 80149a4:	4413      	add	r3, r2
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	697a      	ldr	r2, [r7, #20]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d00c      	beq.n	80149c8 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 80149ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	68ba      	ldr	r2, [r7, #8]
 80149b6:	4413      	add	r3, r2
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	697a      	ldr	r2, [r7, #20]
 80149bc:	429a      	cmp	r2, r3
 80149be:	bf8c      	ite	hi
 80149c0:	2301      	movhi	r3, #1
 80149c2:	2300      	movls	r3, #0
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 80149c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	68fa      	ldr	r2, [r7, #12]
 80149d0:	4413      	add	r3, r2
 80149d2:	697a      	ldr	r2, [r7, #20]
 80149d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 80149d6:	7efb      	ldrb	r3, [r7, #27]
 80149d8:	3301      	adds	r3, #1
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	76fb      	strb	r3, [r7, #27]
 80149de:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80149e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	dbc8      	blt.n	801497c <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 80149ea:	69fb      	ldr	r3, [r7, #28]
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3724      	adds	r7, #36	@ 0x24
 80149f0:	46bd      	mov	sp, r7
 80149f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f6:	4770      	bx	lr

080149f8 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 80149f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80149fc:	b091      	sub	sp, #68	@ 0x44
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8014a02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8014a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8014a06:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 8014a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	4698      	mov	r8, r3
 8014a0e:	4691      	mov	r9, r2
 8014a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a12:	2200      	movs	r2, #0
 8014a14:	469a      	mov	sl, r3
 8014a16:	4693      	mov	fp, r2
 8014a18:	fb0a f209 	mul.w	r2, sl, r9
 8014a1c:	fb08 f30b 	mul.w	r3, r8, fp
 8014a20:	4413      	add	r3, r2
 8014a22:	fba8 450a 	umull	r4, r5, r8, sl
 8014a26:	442b      	add	r3, r5
 8014a28:	461d      	mov	r5, r3
 8014a2a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 8014a2e:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 8014a32:	6a3b      	ldr	r3, [r7, #32]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2200      	movs	r2, #0
 8014a38:	61bb      	str	r3, [r7, #24]
 8014a3a:	61fa      	str	r2, [r7, #28]
 8014a3c:	f04f 0200 	mov.w	r2, #0
 8014a40:	f04f 0300 	mov.w	r3, #0
 8014a44:	69b9      	ldr	r1, [r7, #24]
 8014a46:	000b      	movs	r3, r1
 8014a48:	2200      	movs	r2, #0
 8014a4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014a4c:	6809      	ldr	r1, [r1, #0]
 8014a4e:	2000      	movs	r0, #0
 8014a50:	6139      	str	r1, [r7, #16]
 8014a52:	6178      	str	r0, [r7, #20]
 8014a54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014a58:	4621      	mov	r1, r4
 8014a5a:	4311      	orrs	r1, r2
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	4629      	mov	r1, r5
 8014a60:	4319      	orrs	r1, r3
 8014a62:	60f9      	str	r1, [r7, #12]
 8014a64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014a68:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 8014a6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8014a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8014a74:	1884      	adds	r4, r0, r2
 8014a76:	603c      	str	r4, [r7, #0]
 8014a78:	eb41 0303 	adc.w	r3, r1, r3
 8014a7c:	607b      	str	r3, [r7, #4]
 8014a7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014a82:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 8014a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a88:	681c      	ldr	r4, [r3, #0]
 8014a8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8014a8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8014a92:	4290      	cmp	r0, r2
 8014a94:	eb71 0303 	sbcs.w	r3, r1, r3
 8014a98:	bf34      	ite	cc
 8014a9a:	2301      	movcc	r3, #1
 8014a9c:	2300      	movcs	r3, #0
 8014a9e:	b2db      	uxtb	r3, r3
 8014aa0:	18e2      	adds	r2, r4, r3
 8014aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014aa4:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 8014aa6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8014aaa:	f04f 0200 	mov.w	r2, #0
 8014aae:	f04f 0300 	mov.w	r3, #0
 8014ab2:	000a      	movs	r2, r1
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 8014aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014abe:	601a      	str	r2, [r3, #0]
#endif
}
 8014ac0:	bf00      	nop
 8014ac2:	3744      	adds	r7, #68	@ 0x44
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014aca:	4770      	bx	lr

08014acc <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 8014acc:	b590      	push	{r4, r7, lr}
 8014ace:	b08b      	sub	sp, #44	@ 0x2c
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
 8014ad8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 8014ada:	2300      	movs	r3, #0
 8014adc:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	77bb      	strb	r3, [r7, #30]
 8014aea:	e036      	b.n	8014b5a <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 8014aec:	2300      	movs	r3, #0
 8014aee:	77fb      	strb	r3, [r7, #31]
 8014af0:	e01c      	b.n	8014b2c <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 8014af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	68ba      	ldr	r2, [r7, #8]
 8014afa:	4413      	add	r3, r2
 8014afc:	6818      	ldr	r0, [r3, #0]
 8014afe:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b06:	1ad3      	subs	r3, r2, r3
 8014b08:	009b      	lsls	r3, r3, #2
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	6819      	ldr	r1, [r3, #0]
 8014b10:	f107 0414 	add.w	r4, r7, #20
 8014b14:	f107 0218 	add.w	r2, r7, #24
 8014b18:	f107 0310 	add.w	r3, r7, #16
 8014b1c:	9300      	str	r3, [sp, #0]
 8014b1e:	4623      	mov	r3, r4
 8014b20:	f7ff ff6a 	bl	80149f8 <muladd>
    for (i = 0; i <= k; ++i) {
 8014b24:	7ffb      	ldrb	r3, [r7, #31]
 8014b26:	3301      	adds	r3, #1
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	77fb      	strb	r3, [r7, #31]
 8014b2c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8014b30:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	dddc      	ble.n	8014af2 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 8014b38:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	68fa      	ldr	r2, [r7, #12]
 8014b40:	4413      	add	r3, r2
 8014b42:	69ba      	ldr	r2, [r7, #24]
 8014b44:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 8014b52:	7fbb      	ldrb	r3, [r7, #30]
 8014b54:	3301      	adds	r3, #1
 8014b56:	b2db      	uxtb	r3, r3
 8014b58:	77bb      	strb	r3, [r7, #30]
 8014b5a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	dbc2      	blt.n	8014aec <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8014b66:	78fb      	ldrb	r3, [r7, #3]
 8014b68:	77bb      	strb	r3, [r7, #30]
 8014b6a:	e03b      	b.n	8014be4 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 8014b6c:	7fba      	ldrb	r2, [r7, #30]
 8014b6e:	78fb      	ldrb	r3, [r7, #3]
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	b2db      	uxtb	r3, r3
 8014b74:	3301      	adds	r3, #1
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	77fb      	strb	r3, [r7, #31]
 8014b7a:	e01c      	b.n	8014bb6 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 8014b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	4413      	add	r3, r2
 8014b86:	6818      	ldr	r0, [r3, #0]
 8014b88:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014b8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	4413      	add	r3, r2
 8014b98:	6819      	ldr	r1, [r3, #0]
 8014b9a:	f107 0414 	add.w	r4, r7, #20
 8014b9e:	f107 0218 	add.w	r2, r7, #24
 8014ba2:	f107 0310 	add.w	r3, r7, #16
 8014ba6:	9300      	str	r3, [sp, #0]
 8014ba8:	4623      	mov	r3, r4
 8014baa:	f7ff ff25 	bl	80149f8 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 8014bae:	7ffb      	ldrb	r3, [r7, #31]
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	77fb      	strb	r3, [r7, #31]
 8014bb6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8014bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	dbdc      	blt.n	8014b7c <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 8014bc2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	68fa      	ldr	r2, [r7, #12]
 8014bca:	4413      	add	r3, r2
 8014bcc:	69ba      	ldr	r2, [r7, #24]
 8014bce:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8014bdc:	7fbb      	ldrb	r3, [r7, #30]
 8014bde:	3301      	adds	r3, #1
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	77bb      	strb	r3, [r7, #30]
 8014be4:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	3b01      	subs	r3, #1
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	dbbb      	blt.n	8014b6c <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 8014bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bf8:	00db      	lsls	r3, r3, #3
 8014bfa:	3b04      	subs	r3, #4
 8014bfc:	68fa      	ldr	r2, [r7, #12]
 8014bfe:	4413      	add	r3, r2
 8014c00:	69ba      	ldr	r2, [r7, #24]
 8014c02:	601a      	str	r2, [r3, #0]
}
 8014c04:	bf00      	nop
 8014c06:	3724      	adds	r7, #36	@ 0x24
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd90      	pop	{r4, r7, pc}

08014c0c <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
 8014c18:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 8014c1a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	68b9      	ldr	r1, [r7, #8]
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f7ff fe54 	bl	80148d0 <mg_uecc_vli_add>
 8014c28:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d109      	bne.n	8014c44 <mg_uecc_vli_modAdd+0x38>
 8014c30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014c34:	461a      	mov	r2, r3
 8014c36:	68f9      	ldr	r1, [r7, #12]
 8014c38:	6838      	ldr	r0, [r7, #0]
 8014c3a:	f7ff fd80 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d006      	beq.n	8014c52 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 8014c44:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014c48:	683a      	ldr	r2, [r7, #0]
 8014c4a:	68f9      	ldr	r1, [r7, #12]
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f7ff fe89 	bl	8014964 <mg_uecc_vli_sub>
  }
}
 8014c52:	bf00      	nop
 8014c54:	3718      	adds	r7, #24
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b086      	sub	sp, #24
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	60f8      	str	r0, [r7, #12]
 8014c62:	60b9      	str	r1, [r7, #8]
 8014c64:	607a      	str	r2, [r7, #4]
 8014c66:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 8014c68:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f7ff fe77 	bl	8014964 <mg_uecc_vli_sub>
 8014c76:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d006      	beq.n	8014c8c <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 8014c7e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	68f9      	ldr	r1, [r7, #12]
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f7ff fe22 	bl	80148d0 <mg_uecc_vli_add>
  }
}
 8014c8c:	bf00      	nop
 8014c8e:	3718      	adds	r7, #24
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 8014c94:	b590      	push	{r4, r7, lr}
 8014c96:	b0ad      	sub	sp, #180	@ 0xb4
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
 8014ca0:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 8014ca2:	f107 0318 	add.w	r3, r7, #24
 8014ca6:	613b      	str	r3, [r7, #16]
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8014cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	019b      	lsls	r3, r3, #6
 8014cb4:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 8014cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7ff fcdf 	bl	8014680 <mg_uecc_vli_numBits>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8014cc6:	1ae3      	subs	r3, r4, r3
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 8014cce:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	da00      	bge.n	8014cd8 <mg_uecc_vli_mmod+0x44>
 8014cd6:	331f      	adds	r3, #31
 8014cd8:	115b      	asrs	r3, r3, #5
 8014cda:	b21b      	sxth	r3, r3
 8014cdc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 8014ce0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014ce4:	425a      	negs	r2, r3
 8014ce6:	f003 031f 	and.w	r3, r3, #31
 8014cea:	f002 021f 	and.w	r2, r2, #31
 8014cee:	bf58      	it	pl
 8014cf0:	4253      	negpl	r3, r2
 8014cf2:	b21b      	sxth	r3, r3
 8014cf4:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 8014cfe:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 8014d02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014d06:	4611      	mov	r1, r2
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7ff fc2e 	bl	801456a <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 8014d0e:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	dd34      	ble.n	8014d80 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8014d16:	2300      	movs	r3, #0
 8014d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014d1c:	e029      	b.n	8014d72 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8014d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	4413      	add	r3, r2
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014d2e:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8014d32:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 8014d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014d3a:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8014d3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014d40:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	33b0      	adds	r3, #176	@ 0xb0
 8014d46:	443b      	add	r3, r7
 8014d48:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 8014d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	4413      	add	r3, r2
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014d5c:	f1c3 0320 	rsb	r3, r3, #32
 8014d60:	fa22 f303 	lsr.w	r3, r2, r3
 8014d64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8014d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d3cf      	bcc.n	8014d1e <mg_uecc_vli_mmod+0x8a>
 8014d7e:	e00b      	b.n	8014d98 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 8014d80:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8014d8a:	4413      	add	r3, r2
 8014d8c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014d90:	6879      	ldr	r1, [r7, #4]
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7ff fcac 	bl	80146f0 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 8014d98:	2301      	movs	r3, #1
 8014d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014d9e:	e09f      	b.n	8014ee0 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 8014da6:	2300      	movs	r3, #0
 8014da8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8014dac:	e053      	b.n	8014e56 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8014dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	33b0      	adds	r3, #176	@ 0xb0
 8014db6:	443b      	add	r3, r7
 8014db8:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014dbc:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	33b0      	adds	r3, #176	@ 0xb0
 8014dce:	443b      	add	r3, r7
 8014dd0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8014dd4:	1ad2      	subs	r2, r2, r3
 8014dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014dda:	1ad3      	subs	r3, r2, r3
 8014ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 8014de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	33b0      	adds	r3, #176	@ 0xb0
 8014de8:	443b      	add	r3, r7
 8014dea:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014dee:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014df2:	009b      	lsls	r3, r3, #2
 8014df4:	4413      	add	r3, r2
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d014      	beq.n	8014e2a <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 8014e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	33b0      	adds	r3, #176	@ 0xb0
 8014e08:	443b      	add	r3, r7
 8014e0a:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014e0e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014e12:	009b      	lsls	r3, r3, #2
 8014e14:	4413      	add	r3, r2
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	bf8c      	ite	hi
 8014e20:	2301      	movhi	r3, #1
 8014e22:	2300      	movls	r3, #0
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 8014e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014e2e:	f1c3 0301 	rsb	r3, r3, #1
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	33b0      	adds	r3, #176	@ 0xb0
 8014e36:	443b      	add	r3, r7
 8014e38:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014e3c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014e40:	009b      	lsls	r3, r3, #2
 8014e42:	4413      	add	r3, r2
 8014e44:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014e48:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 8014e4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014e4e:	3301      	adds	r3, #1
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8014e56:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 8014e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	429a      	cmp	r2, r3
 8014e62:	dba4      	blt.n	8014dae <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8014e64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	bf0c      	ite	eq
 8014e70:	2301      	moveq	r3, #1
 8014e72:	2300      	movne	r3, #0
 8014e74:	b2db      	uxtb	r3, r3
 8014e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 8014e7a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014e7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014e82:	4611      	mov	r1, r2
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7ff fcf9 	bl	801487c <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8014e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e8e:	3b01      	subs	r3, #1
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	33b0      	adds	r3, #176	@ 0xb0
 8014e94:	443b      	add	r3, r7
 8014e96:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8014e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e9e:	009b      	lsls	r3, r3, #2
 8014ea0:	33b0      	adds	r3, #176	@ 0xb0
 8014ea2:	443b      	add	r3, r7
 8014ea4:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 8014ea8:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8014eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	430a      	orrs	r2, r1
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	33b0      	adds	r3, #176	@ 0xb0
 8014eb6:	443b      	add	r3, r7
 8014eb8:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 8014ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8014ec6:	4413      	add	r3, r2
 8014ec8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ecc:	4611      	mov	r1, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff fcd4 	bl	801487c <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 8014ed4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8014ed8:	3b01      	subs	r3, #1
 8014eda:	b29b      	uxth	r3, r3
 8014edc:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 8014ee0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f6bf af5b 	bge.w	8014da0 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 8014eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	33b0      	adds	r3, #176	@ 0xb0
 8014ef2:	443b      	add	r3, r7
 8014ef4:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8014ef8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014efc:	4619      	mov	r1, r3
 8014efe:	68f8      	ldr	r0, [r7, #12]
 8014f00:	f7ff fbf6 	bl	80146f0 <mg_uecc_vli_set>
}
 8014f04:	bf00      	nop
 8014f06:	37b4      	adds	r7, #180	@ 0xb4
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd90      	pop	{r4, r7, pc}

08014f0c <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b094      	sub	sp, #80	@ 0x50
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
 8014f18:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 8014f1a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8014f1e:	f107 0010 	add.w	r0, r7, #16
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	68b9      	ldr	r1, [r7, #8]
 8014f26:	f7ff fdd1 	bl	8014acc <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 8014f2a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8014f2e:	f107 0110 	add.w	r1, r7, #16
 8014f32:	683a      	ldr	r2, [r7, #0]
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	f7ff fead 	bl	8014c94 <mg_uecc_vli_mmod>
}
 8014f3a:	bf00      	nop
 8014f3c:	3750      	adds	r7, #80	@ 0x50
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}

08014f42 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 8014f42:	b580      	push	{r7, lr}
 8014f44:	b094      	sub	sp, #80	@ 0x50
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	60f8      	str	r0, [r7, #12]
 8014f4a:	60b9      	str	r1, [r7, #8]
 8014f4c:	607a      	str	r2, [r7, #4]
 8014f4e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	f993 3000 	ldrsb.w	r3, [r3]
 8014f56:	f107 0010 	add.w	r0, r7, #16
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	68b9      	ldr	r1, [r7, #8]
 8014f5e:	f7ff fdb5 	bl	8014acc <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014f68:	f107 0210 	add.w	r2, r7, #16
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	68f8      	ldr	r0, [r7, #12]
 8014f70:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8014f72:	bf00      	nop
 8014f74:	3750      	adds	r7, #80	@ 0x50
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b084      	sub	sp, #16
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	60f8      	str	r0, [r7, #12]
 8014f82:	60b9      	str	r1, [r7, #8]
 8014f84:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	68ba      	ldr	r2, [r7, #8]
 8014f8a:	68b9      	ldr	r1, [r7, #8]
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f7ff ffd8 	bl	8014f42 <mg_uecc_vli_modMult_fast>
}
 8014f92:	bf00      	nop
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b086      	sub	sp, #24
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	60f8      	str	r0, [r7, #12]
 8014fa2:	60b9      	str	r1, [r7, #8]
 8014fa4:	4613      	mov	r3, r2
 8014fa6:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f003 0301 	and.w	r3, r3, #1
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d007      	beq.n	8014fc8 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 8014fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fbc:	68ba      	ldr	r2, [r7, #8]
 8014fbe:	68f9      	ldr	r1, [r7, #12]
 8014fc0:	68f8      	ldr	r0, [r7, #12]
 8014fc2:	f7ff fc85 	bl	80148d0 <mg_uecc_vli_add>
 8014fc6:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 8014fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fcc:	4619      	mov	r1, r3
 8014fce:	68f8      	ldr	r0, [r7, #12]
 8014fd0:	f7ff fc54 	bl	801487c <mg_uecc_vli_rshift1>
  if (carry) {
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d013      	beq.n	8015002 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 8014fda:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014fde:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014fe2:	4413      	add	r3, r2
 8014fe4:	009b      	lsls	r3, r3, #2
 8014fe6:	68fa      	ldr	r2, [r7, #12]
 8014fe8:	4413      	add	r3, r2
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014ff0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014ff4:	440b      	add	r3, r1
 8014ff6:	009b      	lsls	r3, r3, #2
 8014ff8:	68f9      	ldr	r1, [r7, #12]
 8014ffa:	440b      	add	r3, r1
 8014ffc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8015000:	601a      	str	r2, [r3, #0]
  }
}
 8015002:	bf00      	nop
 8015004:	3718      	adds	r7, #24
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801500a:	b580      	push	{r7, lr}
 801500c:	b0a6      	sub	sp, #152	@ 0x98
 801500e:	af00      	add	r7, sp, #0
 8015010:	60f8      	str	r0, [r7, #12]
 8015012:	60b9      	str	r1, [r7, #8]
 8015014:	607a      	str	r2, [r7, #4]
 8015016:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 8015018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801501c:	4619      	mov	r1, r3
 801501e:	68b8      	ldr	r0, [r7, #8]
 8015020:	f7ff fac4 	bl	80145ac <mg_uecc_vli_isZero>
 8015024:	4603      	mov	r3, r0
 8015026:	2b00      	cmp	r3, #0
 8015028:	d006      	beq.n	8015038 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801502a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801502e:	4619      	mov	r1, r3
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f7ff fa9a 	bl	801456a <mg_uecc_vli_clear>
 8015036:	e0de      	b.n	80151f6 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 8015038:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801503c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8015040:	68b9      	ldr	r1, [r7, #8]
 8015042:	4618      	mov	r0, r3
 8015044:	f7ff fb54 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 8015048:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801504c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015050:	6879      	ldr	r1, [r7, #4]
 8015052:	4618      	mov	r0, r3
 8015054:	f7ff fb4c 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 8015058:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801505c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015060:	4611      	mov	r1, r2
 8015062:	4618      	mov	r0, r3
 8015064:	f7ff fa81 	bl	801456a <mg_uecc_vli_clear>
  u[0] = 1;
 8015068:	2301      	movs	r3, #1
 801506a:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801506c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015070:	f107 0314 	add.w	r3, r7, #20
 8015074:	4611      	mov	r1, r2
 8015076:	4618      	mov	r0, r3
 8015078:	f7ff fa77 	bl	801456a <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801507c:	e0a2      	b.n	80151c4 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801507e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015080:	f003 0301 	and.w	r3, r3, #1
 8015084:	2b00      	cmp	r3, #0
 8015086:	d110      	bne.n	80150aa <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 8015088:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801508c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8015090:	4611      	mov	r1, r2
 8015092:	4618      	mov	r0, r3
 8015094:	f7ff fbf2 	bl	801487c <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 8015098:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801509c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80150a0:	6879      	ldr	r1, [r7, #4]
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7ff ff79 	bl	8014f9a <vli_modInv_update>
 80150a8:	e08c      	b.n	80151c4 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 80150aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150ac:	f003 0301 	and.w	r3, r3, #1
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d110      	bne.n	80150d6 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 80150b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80150b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80150bc:	4611      	mov	r1, r2
 80150be:	4618      	mov	r0, r3
 80150c0:	f7ff fbdc 	bl	801487c <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 80150c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80150c8:	f107 0314 	add.w	r3, r7, #20
 80150cc:	6879      	ldr	r1, [r7, #4]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7ff ff63 	bl	8014f9a <vli_modInv_update>
 80150d4:	e076      	b.n	80151c4 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 80150d6:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80150da:	2b00      	cmp	r3, #0
 80150dc:	dd39      	ble.n	8015152 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 80150de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80150e2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80150e6:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80150ea:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80150ee:	f7ff fc39 	bl	8014964 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 80150f2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80150f6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80150fa:	4611      	mov	r1, r2
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7ff fbbd 	bl	801487c <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 8015102:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015106:	f107 0114 	add.w	r1, r7, #20
 801510a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801510e:	4618      	mov	r0, r3
 8015110:	f7ff fb15 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 8015114:	4603      	mov	r3, r0
 8015116:	2b00      	cmp	r3, #0
 8015118:	da08      	bge.n	801512c <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801511a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801511e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015122:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	f7ff fbd2 	bl	80148d0 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801512c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015130:	f107 0214 	add.w	r2, r7, #20
 8015134:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015138:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801513c:	f7ff fc12 	bl	8014964 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 8015140:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015144:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015148:	6879      	ldr	r1, [r7, #4]
 801514a:	4618      	mov	r0, r3
 801514c:	f7ff ff25 	bl	8014f9a <vli_modInv_update>
 8015150:	e038      	b.n	80151c4 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 8015152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015156:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801515a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801515e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8015162:	f7ff fbff 	bl	8014964 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 8015166:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801516a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801516e:	4611      	mov	r1, r2
 8015170:	4618      	mov	r0, r3
 8015172:	f7ff fb83 	bl	801487c <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 8015176:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801517a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801517e:	f107 0314 	add.w	r3, r7, #20
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff fadb 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 8015188:	4603      	mov	r3, r0
 801518a:	2b00      	cmp	r3, #0
 801518c:	da08      	bge.n	80151a0 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801518e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015192:	f107 0114 	add.w	r1, r7, #20
 8015196:	f107 0014 	add.w	r0, r7, #20
 801519a:	687a      	ldr	r2, [r7, #4]
 801519c:	f7ff fb98 	bl	80148d0 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 80151a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80151a4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80151a8:	f107 0114 	add.w	r1, r7, #20
 80151ac:	f107 0014 	add.w	r0, r7, #20
 80151b0:	f7ff fbd8 	bl	8014964 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 80151b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80151b8:	f107 0314 	add.w	r3, r7, #20
 80151bc:	6879      	ldr	r1, [r7, #4]
 80151be:	4618      	mov	r0, r3
 80151c0:	f7ff feeb 	bl	8014f9a <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 80151c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80151c8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80151cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff fab4 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 80151d6:	4603      	mov	r3, r0
 80151d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80151dc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	f47f af4c 	bne.w	801507e <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 80151e6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80151ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80151ee:	4619      	mov	r1, r3
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f7ff fa7d 	bl	80146f0 <mg_uecc_vli_set>
}
 80151f6:	3798      	adds	r7, #152	@ 0x98
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}

080151fc <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b098      	sub	sp, #96	@ 0x60
 8015200:	af02      	add	r7, sp, #8
 8015202:	60f8      	str	r0, [r7, #12]
 8015204:	60b9      	str	r1, [r7, #8]
 8015206:	607a      	str	r2, [r7, #4]
 8015208:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 8015212:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015216:	4619      	mov	r1, r3
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7ff f9c7 	bl	80145ac <mg_uecc_vli_isZero>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	f040 80e6 	bne.w	80153f2 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8015226:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801522a:	683a      	ldr	r2, [r7, #0]
 801522c:	68b9      	ldr	r1, [r7, #8]
 801522e:	4618      	mov	r0, r3
 8015230:	f7ff fea3 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8015234:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015238:	f107 0010 	add.w	r0, r7, #16
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	68f9      	ldr	r1, [r7, #12]
 8015240:	f7ff fe7f 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8015244:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015248:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801524c:	683a      	ldr	r2, [r7, #0]
 801524e:	4618      	mov	r0, r3
 8015250:	f7ff fe93 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	68b9      	ldr	r1, [r7, #8]
 801525a:	68b8      	ldr	r0, [r7, #8]
 801525c:	f7ff fe71 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8015260:	683a      	ldr	r2, [r7, #0]
 8015262:	6879      	ldr	r1, [r7, #4]
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f7ff fe88 	bl	8014f7a <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	1d1a      	adds	r2, r3, #4
 801526e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015272:	9300      	str	r3, [sp, #0]
 8015274:	4613      	mov	r3, r2
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	68f9      	ldr	r1, [r7, #12]
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	f7ff fcc6 	bl	8014c0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	1d1a      	adds	r2, r3, #4
 8015284:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015288:	9300      	str	r3, [sp, #0]
 801528a:	4613      	mov	r3, r2
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	6879      	ldr	r1, [r7, #4]
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7ff fcbb 	bl	8014c0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	1d1a      	adds	r2, r3, #4
 801529a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801529e:	9300      	str	r3, [sp, #0]
 80152a0:	4613      	mov	r3, r2
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	68f9      	ldr	r1, [r7, #12]
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f7ff fcd7 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	68f9      	ldr	r1, [r7, #12]
 80152b2:	68f8      	ldr	r0, [r7, #12]
 80152b4:	f7ff fe45 	bl	8014f42 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	1d1a      	adds	r2, r3, #4
 80152bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80152c0:	9300      	str	r3, [sp, #0]
 80152c2:	4613      	mov	r3, r2
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	68f9      	ldr	r1, [r7, #12]
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f7ff fc9f 	bl	8014c0c <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	1d1a      	adds	r2, r3, #4
 80152d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80152d6:	9300      	str	r3, [sp, #0]
 80152d8:	4613      	mov	r3, r2
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	68f9      	ldr	r1, [r7, #12]
 80152de:	68f8      	ldr	r0, [r7, #12]
 80152e0:	f7ff fc94 	bl	8014c0c <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 80152e4:	2100      	movs	r1, #0
 80152e6:	68f8      	ldr	r0, [r7, #12]
 80152e8:	f7ff f98a 	bl	8014600 <mg_uecc_vli_testBit>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d024      	beq.n	801533c <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	1d1a      	adds	r2, r3, #4
 80152f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80152fa:	68f9      	ldr	r1, [r7, #12]
 80152fc:	68f8      	ldr	r0, [r7, #12]
 80152fe:	f7ff fae7 	bl	80148d0 <mg_uecc_vli_add>
 8015302:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 8015304:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015308:	4619      	mov	r1, r3
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	f7ff fab6 	bl	801487c <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 8015310:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8015314:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015318:	4413      	add	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	68fa      	ldr	r2, [r7, #12]
 801531e:	4413      	add	r3, r2
 8015320:	6819      	ldr	r1, [r3, #0]
 8015322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015324:	07da      	lsls	r2, r3, #31
 8015326:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801532a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801532e:	4403      	add	r3, r0
 8015330:	009b      	lsls	r3, r3, #2
 8015332:	68f8      	ldr	r0, [r7, #12]
 8015334:	4403      	add	r3, r0
 8015336:	430a      	orrs	r2, r1
 8015338:	601a      	str	r2, [r3, #0]
 801533a:	e005      	b.n	8015348 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801533c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015340:	4619      	mov	r1, r3
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f7ff fa9a 	bl	801487c <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 8015348:	683a      	ldr	r2, [r7, #0]
 801534a:	68f9      	ldr	r1, [r7, #12]
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f7ff fe14 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	1d19      	adds	r1, r3, #4
 8015356:	f107 0210 	add.w	r2, r7, #16
 801535a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	460b      	mov	r3, r1
 8015362:	6879      	ldr	r1, [r7, #4]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7ff fc78 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	1d19      	adds	r1, r3, #4
 801536e:	f107 0210 	add.w	r2, r7, #16
 8015372:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015376:	9300      	str	r3, [sp, #0]
 8015378:	460b      	mov	r3, r1
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7ff fc6c 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	1d1a      	adds	r2, r3, #4
 8015386:	f107 0110 	add.w	r1, r7, #16
 801538a:	f107 0010 	add.w	r0, r7, #16
 801538e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	4613      	mov	r3, r2
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	f7ff fc5f 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801539c:	f107 0210 	add.w	r2, r7, #16
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	68f9      	ldr	r1, [r7, #12]
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f7ff fdcc 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	1d19      	adds	r1, r3, #4
 80153ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80153b2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80153b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80153ba:	9300      	str	r3, [sp, #0]
 80153bc:	460b      	mov	r3, r1
 80153be:	68f9      	ldr	r1, [r7, #12]
 80153c0:	f7ff fc4b 	bl	8014c5a <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 80153c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80153c8:	461a      	mov	r2, r3
 80153ca:	6879      	ldr	r1, [r7, #4]
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7ff f98f 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 80153d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80153d6:	461a      	mov	r2, r3
 80153d8:	68b9      	ldr	r1, [r7, #8]
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f7ff f988 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 80153e0:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80153e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80153e8:	4619      	mov	r1, r3
 80153ea:	68b8      	ldr	r0, [r7, #8]
 80153ec:	f7ff f980 	bl	80146f0 <mg_uecc_vli_set>
 80153f0:	e000      	b.n	80153f4 <double_jacobian_default+0x1f8>
    return;
 80153f2:	bf00      	nop
}
 80153f4:	3758      	adds	r7, #88	@ 0x58
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}

080153fa <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 80153fa:	b580      	push	{r7, lr}
 80153fc:	b090      	sub	sp, #64	@ 0x40
 80153fe:	af02      	add	r7, sp, #8
 8015400:	60f8      	str	r0, [r7, #12]
 8015402:	60b9      	str	r1, [r7, #8]
 8015404:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 8015406:	f107 0314 	add.w	r3, r7, #20
 801540a:	2220      	movs	r2, #32
 801540c:	2100      	movs	r1, #0
 801540e:	4618      	mov	r0, r3
 8015410:	f00f fd24 	bl	8024e5c <memset>
 8015414:	2303      	movs	r3, #3
 8015416:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	68b9      	ldr	r1, [r7, #8]
 8015424:	68f8      	ldr	r0, [r7, #12]
 8015426:	f7ff fda8 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	1d19      	adds	r1, r3, #4
 801542e:	f107 0214 	add.w	r2, r7, #20
 8015432:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	460b      	mov	r3, r1
 801543a:	68f9      	ldr	r1, [r7, #12]
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f7ff fc0c 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	68ba      	ldr	r2, [r7, #8]
 8015446:	68f9      	ldr	r1, [r7, #12]
 8015448:	68f8      	ldr	r0, [r7, #12]
 801544a:	f7ff fd7a 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	1d19      	adds	r1, r3, #4
 8015458:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801545c:	9300      	str	r3, [sp, #0]
 801545e:	460b      	mov	r3, r1
 8015460:	68f9      	ldr	r1, [r7, #12]
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	f7ff fbd2 	bl	8014c0c <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 8015468:	bf00      	nop
 801546a:	3738      	adds	r7, #56	@ 0x38
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 8015470:	b580      	push	{r7, lr}
 8015472:	b094      	sub	sp, #80	@ 0x50
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801547a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801547e:	2220      	movs	r2, #32
 8015480:	2100      	movs	r1, #0
 8015482:	4618      	mov	r0, r3
 8015484:	f00f fcea 	bl	8024e5c <memset>
 8015488:	2301      	movs	r3, #1
 801548a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801548c:	f107 030c 	add.w	r3, r7, #12
 8015490:	2220      	movs	r2, #32
 8015492:	2100      	movs	r1, #0
 8015494:	4618      	mov	r0, r3
 8015496:	f00f fce1 	bl	8024e5c <memset>
 801549a:	2301      	movs	r3, #1
 801549c:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	1d19      	adds	r1, r3, #4
 80154aa:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80154ae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80154b2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80154b6:	f7ff fa0b 	bl	80148d0 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 80154ba:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80154be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80154c2:	4611      	mov	r1, r2
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff f8db 	bl	8014680 <mg_uecc_vli_numBits>
 80154ca:	4603      	mov	r3, r0
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	3b01      	subs	r3, #1
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80154d6:	e020      	b.n	801551a <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 80154d8:	f107 010c 	add.w	r1, r7, #12
 80154dc:	f107 030c 	add.w	r3, r7, #12
 80154e0:	683a      	ldr	r2, [r7, #0]
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7ff fd49 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 80154e8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 80154ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80154f0:	4611      	mov	r1, r2
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ff f884 	bl	8014600 <mg_uecc_vli_testBit>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d007      	beq.n	801550e <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 80154fe:	f107 010c 	add.w	r1, r7, #12
 8015502:	f107 000c 	add.w	r0, r7, #12
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	f7ff fd1a 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801550e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015512:	3b01      	subs	r3, #1
 8015514:	b29b      	uxth	r3, r3
 8015516:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801551a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801551e:	2b01      	cmp	r3, #1
 8015520:	dcda      	bgt.n	80154d8 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 8015522:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8015526:	f107 030c 	add.w	r3, r7, #12
 801552a:	4619      	mov	r1, r3
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7ff f8df 	bl	80146f0 <mg_uecc_vli_set>
}
 8015532:	bf00      	nop
 8015534:	3750      	adds	r7, #80	@ 0x50
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
	...

0801553c <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801553c:	b480      	push	{r7}
 801553e:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 8015540:	4b02      	ldr	r3, [pc, #8]	@ (801554c <mg_uecc_secp256r1+0x10>)
}
 8015542:	4618      	mov	r0, r3
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr
 801554c:	0802bf54 	.word	0x0802bf54

08015550 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8015550:	b580      	push	{r7, lr}
 8015552:	b08c      	sub	sp, #48	@ 0x30
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801555a:	2208      	movs	r2, #8
 801555c:	6839      	ldr	r1, [r7, #0]
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7ff f8c6 	bl	80146f0 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 8015564:	2300      	movs	r3, #0
 8015566:	617b      	str	r3, [r7, #20]
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	613b      	str	r3, [r7, #16]
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015574:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801557a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015580:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015586:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801558c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801558e:	f107 020c 	add.w	r2, r7, #12
 8015592:	f107 010c 	add.w	r1, r7, #12
 8015596:	f107 000c 	add.w	r0, r7, #12
 801559a:	2308      	movs	r3, #8
 801559c:	f7ff f998 	bl	80148d0 <mg_uecc_vli_add>
 80155a0:	4603      	mov	r3, r0
 80155a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80155a4:	f107 020c 	add.w	r2, r7, #12
 80155a8:	2308      	movs	r3, #8
 80155aa:	6879      	ldr	r1, [r7, #4]
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f7ff f98f 	bl	80148d0 <mg_uecc_vli_add>
 80155b2:	4603      	mov	r3, r0
 80155b4:	461a      	mov	r2, r3
 80155b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155b8:	4413      	add	r3, r2
 80155ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155c0:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155c6:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155cc:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155d2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 80155d4:	2300      	movs	r3, #0
 80155d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80155d8:	f107 020c 	add.w	r2, r7, #12
 80155dc:	f107 010c 	add.w	r1, r7, #12
 80155e0:	f107 000c 	add.w	r0, r7, #12
 80155e4:	2308      	movs	r3, #8
 80155e6:	f7ff f973 	bl	80148d0 <mg_uecc_vli_add>
 80155ea:	4603      	mov	r3, r0
 80155ec:	461a      	mov	r2, r3
 80155ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f0:	4413      	add	r3, r2
 80155f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80155f4:	f107 020c 	add.w	r2, r7, #12
 80155f8:	2308      	movs	r3, #8
 80155fa:	6879      	ldr	r1, [r7, #4]
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f7ff f967 	bl	80148d0 <mg_uecc_vli_add>
 8015602:	4603      	mov	r3, r0
 8015604:	461a      	mov	r2, r3
 8015606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015608:	4413      	add	r3, r2
 801560a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	6a1b      	ldr	r3, [r3, #32]
 8015610:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015616:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801561c:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801561e:	2300      	movs	r3, #0
 8015620:	623b      	str	r3, [r7, #32]
 8015622:	6a3b      	ldr	r3, [r7, #32]
 8015624:	61fb      	str	r3, [r7, #28]
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801562e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015634:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8015636:	f107 020c 	add.w	r2, r7, #12
 801563a:	2308      	movs	r3, #8
 801563c:	6879      	ldr	r1, [r7, #4]
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f7ff f946 	bl	80148d0 <mg_uecc_vli_add>
 8015644:	4603      	mov	r3, r0
 8015646:	461a      	mov	r2, r3
 8015648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801564a:	4413      	add	r3, r2
 801564c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015652:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015658:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801565e:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015664:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801566a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015670:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015676:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	6a1b      	ldr	r3, [r3, #32]
 801567c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801567e:	f107 020c 	add.w	r2, r7, #12
 8015682:	2308      	movs	r3, #8
 8015684:	6879      	ldr	r1, [r7, #4]
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f7ff f922 	bl	80148d0 <mg_uecc_vli_add>
 801568c:	4603      	mov	r3, r0
 801568e:	461a      	mov	r2, r3
 8015690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015692:	4413      	add	r3, r2
 8015694:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801569a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80156a0:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156a6:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 80156a8:	2300      	movs	r3, #0
 80156aa:	623b      	str	r3, [r7, #32]
 80156ac:	6a3b      	ldr	r3, [r7, #32]
 80156ae:	61fb      	str	r3, [r7, #28]
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	6a1b      	ldr	r3, [r3, #32]
 80156b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156be:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 80156c0:	f107 020c 	add.w	r2, r7, #12
 80156c4:	2308      	movs	r3, #8
 80156c6:	6879      	ldr	r1, [r7, #4]
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7ff f94b 	bl	8014964 <mg_uecc_vli_sub>
 80156ce:	4603      	mov	r3, r0
 80156d0:	461a      	mov	r2, r3
 80156d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d4:	1a9b      	subs	r3, r3, r2
 80156d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80156dc:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156e2:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156e8:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156ee:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 80156f0:	2300      	movs	r3, #0
 80156f2:	623b      	str	r3, [r7, #32]
 80156f4:	6a3b      	ldr	r3, [r7, #32]
 80156f6:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015702:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8015704:	f107 020c 	add.w	r2, r7, #12
 8015708:	2308      	movs	r3, #8
 801570a:	6879      	ldr	r1, [r7, #4]
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f7ff f929 	bl	8014964 <mg_uecc_vli_sub>
 8015712:	4603      	mov	r3, r0
 8015714:	461a      	mov	r2, r3
 8015716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015718:	1a9b      	subs	r3, r3, r2
 801571a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015720:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015726:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801572c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	6a1b      	ldr	r3, [r3, #32]
 8015732:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015738:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801573e:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8015740:	2300      	movs	r3, #0
 8015742:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015748:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801574a:	f107 020c 	add.w	r2, r7, #12
 801574e:	2308      	movs	r3, #8
 8015750:	6879      	ldr	r1, [r7, #4]
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f7ff f906 	bl	8014964 <mg_uecc_vli_sub>
 8015758:	4603      	mov	r3, r0
 801575a:	461a      	mov	r2, r3
 801575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801575e:	1a9b      	subs	r3, r3, r2
 8015760:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015766:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801576c:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801576e:	2300      	movs	r3, #0
 8015770:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015776:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801577c:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015782:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8015784:	2300      	movs	r3, #0
 8015786:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801578c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801578e:	f107 020c 	add.w	r2, r7, #12
 8015792:	2308      	movs	r3, #8
 8015794:	6879      	ldr	r1, [r7, #4]
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f7ff f8e4 	bl	8014964 <mg_uecc_vli_sub>
 801579c:	4603      	mov	r3, r0
 801579e:	461a      	mov	r2, r3
 80157a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a2:	1a9b      	subs	r3, r3, r2
 80157a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 80157a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	da19      	bge.n	80157e0 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 80157ac:	2308      	movs	r3, #8
 80157ae:	4a14      	ldr	r2, [pc, #80]	@ (8015800 <vli_mmod_fast_secp256r1+0x2b0>)
 80157b0:	6879      	ldr	r1, [r7, #4]
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7ff f88c 	bl	80148d0 <mg_uecc_vli_add>
 80157b8:	4603      	mov	r3, r0
 80157ba:	461a      	mov	r2, r3
 80157bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157be:	4413      	add	r3, r2
 80157c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 80157c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	dbf1      	blt.n	80157ac <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 80157c8:	e015      	b.n	80157f6 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 80157ca:	2308      	movs	r3, #8
 80157cc:	4a0c      	ldr	r2, [pc, #48]	@ (8015800 <vli_mmod_fast_secp256r1+0x2b0>)
 80157ce:	6879      	ldr	r1, [r7, #4]
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f7ff f8c7 	bl	8014964 <mg_uecc_vli_sub>
 80157d6:	4603      	mov	r3, r0
 80157d8:	461a      	mov	r2, r3
 80157da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157dc:	1a9b      	subs	r3, r3, r2
 80157de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 80157e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d1f1      	bne.n	80157ca <vli_mmod_fast_secp256r1+0x27a>
 80157e6:	2208      	movs	r2, #8
 80157e8:	6879      	ldr	r1, [r7, #4]
 80157ea:	4805      	ldr	r0, [pc, #20]	@ (8015800 <vli_mmod_fast_secp256r1+0x2b0>)
 80157ec:	f7fe ffa7 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 80157f0:	4603      	mov	r3, r0
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d1e9      	bne.n	80157ca <vli_mmod_fast_secp256r1+0x27a>
}
 80157f6:	bf00      	nop
 80157f8:	3730      	adds	r7, #48	@ 0x30
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}
 80157fe:	bf00      	nop
 8015800:	0802bf58 	.word	0x0802bf58

08015804 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 8015804:	b580      	push	{r7, lr}
 8015806:	b08c      	sub	sp, #48	@ 0x30
 8015808:	af00      	add	r7, sp, #0
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	607a      	str	r2, [r7, #4]
 8015810:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8015812:	f107 0310 	add.w	r3, r7, #16
 8015816:	683a      	ldr	r2, [r7, #0]
 8015818:	6879      	ldr	r1, [r7, #4]
 801581a:	4618      	mov	r0, r3
 801581c:	f7ff fbad 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8015820:	f107 0210 	add.w	r2, r7, #16
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	68f9      	ldr	r1, [r7, #12]
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f7ff fb8a 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801582e:	f107 0110 	add.w	r1, r7, #16
 8015832:	f107 0010 	add.w	r0, r7, #16
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	687a      	ldr	r2, [r7, #4]
 801583a:	f7ff fb82 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801583e:	f107 0210 	add.w	r2, r7, #16
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	68b9      	ldr	r1, [r7, #8]
 8015846:	68b8      	ldr	r0, [r7, #8]
 8015848:	f7ff fb7b 	bl	8014f42 <mg_uecc_vli_modMult_fast>
}
 801584c:	bf00      	nop
 801584e:	3730      	adds	r7, #48	@ 0x30
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 8015854:	b590      	push	{r4, r7, lr}
 8015856:	b08f      	sub	sp, #60	@ 0x3c
 8015858:	af00      	add	r7, sp, #0
 801585a:	60f8      	str	r0, [r7, #12]
 801585c:	60b9      	str	r1, [r7, #8]
 801585e:	607a      	str	r2, [r7, #4]
 8015860:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8015862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801586a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801586c:	2b00      	cmp	r3, #0
 801586e:	d008      	beq.n	8015882 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 8015870:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8015874:	f107 0314 	add.w	r3, r7, #20
 8015878:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801587a:	4618      	mov	r0, r3
 801587c:	f7fe ff38 	bl	80146f0 <mg_uecc_vli_set>
 8015880:	e009      	b.n	8015896 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 8015882:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8015886:	f107 0314 	add.w	r3, r7, #20
 801588a:	4611      	mov	r1, r2
 801588c:	4618      	mov	r0, r3
 801588e:	f7fe fe6c 	bl	801456a <mg_uecc_vli_clear>
    z[0] = 1;
 8015892:	2301      	movs	r3, #1
 8015894:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 8015896:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801589a:	461a      	mov	r2, r3
 801589c:	68f9      	ldr	r1, [r7, #12]
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f7fe ff26 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 80158a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80158a8:	461a      	mov	r2, r3
 80158aa:	68b9      	ldr	r1, [r7, #8]
 80158ac:	6838      	ldr	r0, [r7, #0]
 80158ae:	f7fe ff1f 	bl	80146f0 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 80158b2:	f107 0214 	add.w	r2, r7, #20
 80158b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158b8:	68b9      	ldr	r1, [r7, #8]
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f7ff ffa2 	bl	8015804 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 80158c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158c2:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80158c6:	f107 0214 	add.w	r2, r7, #20
 80158ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158cc:	68b9      	ldr	r1, [r7, #8]
 80158ce:	68f8      	ldr	r0, [r7, #12]
 80158d0:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 80158d2:	f107 0214 	add.w	r2, r7, #20
 80158d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158d8:	6839      	ldr	r1, [r7, #0]
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f7ff ff92 	bl	8015804 <apply_z>
}
 80158e0:	bf00      	nop
 80158e2:	373c      	adds	r7, #60	@ 0x3c
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd90      	pop	{r4, r7, pc}

080158e8 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b090      	sub	sp, #64	@ 0x40
 80158ec:	af02      	add	r7, sp, #8
 80158ee:	60f8      	str	r0, [r7, #12]
 80158f0:	60b9      	str	r1, [r7, #8]
 80158f2:	607a      	str	r2, [r7, #4]
 80158f4:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 80158f6:	f107 0314 	add.w	r3, r7, #20
 80158fa:	2220      	movs	r2, #32
 80158fc:	2100      	movs	r1, #0
 80158fe:	4618      	mov	r0, r3
 8015900:	f00f faac 	bl	8024e5c <memset>
  wordcount_t num_words = curve->num_words;
 8015904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801590c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801590e:	1d1a      	adds	r2, r3, #4
 8015910:	f107 0014 	add.w	r0, r7, #20
 8015914:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015918:	9300      	str	r3, [sp, #0]
 801591a:	4613      	mov	r3, r2
 801591c:	68fa      	ldr	r2, [r7, #12]
 801591e:	6879      	ldr	r1, [r7, #4]
 8015920:	f7ff f99b 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8015924:	f107 0114 	add.w	r1, r7, #20
 8015928:	f107 0314 	add.w	r3, r7, #20
 801592c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801592e:	4618      	mov	r0, r3
 8015930:	f7ff fb23 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8015934:	f107 0214 	add.w	r2, r7, #20
 8015938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801593a:	68f9      	ldr	r1, [r7, #12]
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f7ff fb00 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8015942:	f107 0214 	add.w	r2, r7, #20
 8015946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015948:	6879      	ldr	r1, [r7, #4]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f7ff faf9 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8015950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015952:	1d1a      	adds	r2, r3, #4
 8015954:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015958:	9300      	str	r3, [sp, #0]
 801595a:	4613      	mov	r3, r2
 801595c:	68ba      	ldr	r2, [r7, #8]
 801595e:	6839      	ldr	r1, [r7, #0]
 8015960:	6838      	ldr	r0, [r7, #0]
 8015962:	f7ff f97a 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 8015966:	f107 0314 	add.w	r3, r7, #20
 801596a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801596c:	6839      	ldr	r1, [r7, #0]
 801596e:	4618      	mov	r0, r3
 8015970:	f7ff fb03 	bl	8014f7a <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8015974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015976:	1d1a      	adds	r2, r3, #4
 8015978:	f107 0114 	add.w	r1, r7, #20
 801597c:	f107 0014 	add.w	r0, r7, #20
 8015980:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	4613      	mov	r3, r2
 8015988:	68fa      	ldr	r2, [r7, #12]
 801598a:	f7ff f966 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801598e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015990:	1d1a      	adds	r2, r3, #4
 8015992:	f107 0114 	add.w	r1, r7, #20
 8015996:	f107 0014 	add.w	r0, r7, #20
 801599a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801599e:	9300      	str	r3, [sp, #0]
 80159a0:	4613      	mov	r3, r2
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	f7ff f959 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80159a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159aa:	1d1a      	adds	r2, r3, #4
 80159ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80159b0:	9300      	str	r3, [sp, #0]
 80159b2:	4613      	mov	r3, r2
 80159b4:	68fa      	ldr	r2, [r7, #12]
 80159b6:	6879      	ldr	r1, [r7, #4]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f7ff f94e 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 80159be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	68b9      	ldr	r1, [r7, #8]
 80159c4:	68b8      	ldr	r0, [r7, #8]
 80159c6:	f7ff fabc 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 80159ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159cc:	1d19      	adds	r1, r3, #4
 80159ce:	f107 0214 	add.w	r2, r7, #20
 80159d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80159d6:	9300      	str	r3, [sp, #0]
 80159d8:	460b      	mov	r3, r1
 80159da:	68f9      	ldr	r1, [r7, #12]
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f7ff f93c 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 80159e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	6839      	ldr	r1, [r7, #0]
 80159e8:	6838      	ldr	r0, [r7, #0]
 80159ea:	f7ff faaa 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 80159ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159f0:	1d1a      	adds	r2, r3, #4
 80159f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80159f6:	9300      	str	r3, [sp, #0]
 80159f8:	4613      	mov	r3, r2
 80159fa:	68ba      	ldr	r2, [r7, #8]
 80159fc:	6839      	ldr	r1, [r7, #0]
 80159fe:	6838      	ldr	r0, [r7, #0]
 8015a00:	f7ff f92b 	bl	8014c5a <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 8015a04:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8015a08:	f107 0314 	add.w	r3, r7, #20
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f7fe fe6e 	bl	80146f0 <mg_uecc_vli_set>
}
 8015a14:	bf00      	nop
 8015a16:	3738      	adds	r7, #56	@ 0x38
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 8015a1c:	b590      	push	{r4, r7, lr}
 8015a1e:	b0a1      	sub	sp, #132	@ 0x84
 8015a20:	af02      	add	r7, sp, #8
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
 8015a28:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8015a2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015a2e:	2220      	movs	r2, #32
 8015a30:	2100      	movs	r1, #0
 8015a32:	4618      	mov	r0, r3
 8015a34:	f00f fa12 	bl	8024e5c <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8015a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8015a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a46:	1d1a      	adds	r2, r3, #4
 8015a48:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8015a4c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	4613      	mov	r3, r2
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	6879      	ldr	r1, [r7, #4]
 8015a58:	f7ff f8ff 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8015a5c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8015a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015a64:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7ff fa86 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8015a6e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8015a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a76:	68f9      	ldr	r1, [r7, #12]
 8015a78:	68f8      	ldr	r0, [r7, #12]
 8015a7a:	f7ff fa62 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8015a7e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8015a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a86:	6879      	ldr	r1, [r7, #4]
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7ff fa5a 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8015a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a92:	1d1a      	adds	r2, r3, #4
 8015a94:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8015a98:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a9c:	9300      	str	r3, [sp, #0]
 8015a9e:	4613      	mov	r3, r2
 8015aa0:	68ba      	ldr	r2, [r7, #8]
 8015aa2:	6839      	ldr	r1, [r7, #0]
 8015aa4:	f7ff f8b2 	bl	8014c0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8015aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015aac:	1d1a      	adds	r2, r3, #4
 8015aae:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	4613      	mov	r3, r2
 8015ab6:	68ba      	ldr	r2, [r7, #8]
 8015ab8:	6839      	ldr	r1, [r7, #0]
 8015aba:	6838      	ldr	r0, [r7, #0]
 8015abc:	f7ff f8cd 	bl	8014c5a <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8015ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015ac4:	1d1a      	adds	r2, r3, #4
 8015ac6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015aca:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015ace:	9300      	str	r3, [sp, #0]
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	68fa      	ldr	r2, [r7, #12]
 8015ad4:	6879      	ldr	r1, [r7, #4]
 8015ad6:	f7ff f8c0 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 8015ada:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015ae2:	68b9      	ldr	r1, [r7, #8]
 8015ae4:	68b8      	ldr	r0, [r7, #8]
 8015ae6:	f7ff fa2c 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8015aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015aee:	1d1a      	adds	r2, r3, #4
 8015af0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015af4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015af8:	9300      	str	r3, [sp, #0]
 8015afa:	4613      	mov	r3, r2
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	68f9      	ldr	r1, [r7, #12]
 8015b00:	f7ff f884 	bl	8014c0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 8015b04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015b08:	6839      	ldr	r1, [r7, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f7ff fa35 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 8015b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015b14:	1d19      	adds	r1, r3, #4
 8015b16:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015b1a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015b1e:	9300      	str	r3, [sp, #0]
 8015b20:	460b      	mov	r3, r1
 8015b22:	6879      	ldr	r1, [r7, #4]
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7ff f898 	bl	8014c5a <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8015b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015b2e:	1d1a      	adds	r2, r3, #4
 8015b30:	f107 0014 	add.w	r0, r7, #20
 8015b34:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	4613      	mov	r3, r2
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	68f9      	ldr	r1, [r7, #12]
 8015b40:	f7ff f88b 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8015b44:	f107 0214 	add.w	r2, r7, #20
 8015b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015b4c:	6839      	ldr	r1, [r7, #0]
 8015b4e:	6838      	ldr	r0, [r7, #0]
 8015b50:	f7ff f9f7 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 8015b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015b58:	1d1a      	adds	r2, r3, #4
 8015b5a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015b5e:	9300      	str	r3, [sp, #0]
 8015b60:	4613      	mov	r3, r2
 8015b62:	68ba      	ldr	r2, [r7, #8]
 8015b64:	6839      	ldr	r1, [r7, #0]
 8015b66:	6838      	ldr	r0, [r7, #0]
 8015b68:	f7ff f877 	bl	8014c5a <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 8015b6c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8015b70:	f107 0314 	add.w	r3, r7, #20
 8015b74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7ff f9fe 	bl	8014f7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 8015b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015b82:	1d1c      	adds	r4, r3, #4
 8015b84:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015b88:	f107 0114 	add.w	r1, r7, #20
 8015b8c:	f107 0014 	add.w	r0, r7, #20
 8015b90:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	4623      	mov	r3, r4
 8015b98:	f7ff f85f 	bl	8014c5a <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 8015b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015ba0:	1d1a      	adds	r2, r3, #4
 8015ba2:	f107 0114 	add.w	r1, r7, #20
 8015ba6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015baa:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015bae:	9300      	str	r3, [sp, #0]
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	68fa      	ldr	r2, [r7, #12]
 8015bb4:	f7ff f851 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 8015bb8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8015bbc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015bc0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015bc8:	f7ff f9bb 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 8015bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015bd0:	1d1a      	adds	r2, r3, #4
 8015bd2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015bd6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015bda:	9300      	str	r3, [sp, #0]
 8015bdc:	4613      	mov	r3, r2
 8015bde:	68ba      	ldr	r2, [r7, #8]
 8015be0:	68b8      	ldr	r0, [r7, #8]
 8015be2:	f7ff f83a 	bl	8014c5a <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 8015be6:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 8015bea:	f107 0314 	add.w	r3, r7, #20
 8015bee:	4619      	mov	r1, r3
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f7fe fd7d 	bl	80146f0 <mg_uecc_vli_set>
}
 8015bf6:	bf00      	nop
 8015bf8:	377c      	adds	r7, #124	@ 0x7c
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd90      	pop	{r4, r7, pc}

08015bfe <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 8015bfe:	b590      	push	{r4, r7, lr}
 8015c00:	b0b1      	sub	sp, #196	@ 0xc4
 8015c02:	af02      	add	r7, sp, #8
 8015c04:	60f8      	str	r0, [r7, #12]
 8015c06:	60b9      	str	r1, [r7, #8]
 8015c08:	607a      	str	r2, [r7, #4]
 8015c0a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 8015c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 8015c16:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015c1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015c1e:	3320      	adds	r3, #32
 8015c20:	68b9      	ldr	r1, [r7, #8]
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fe fd64 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 8015c28:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	68ba      	ldr	r2, [r7, #8]
 8015c30:	18d1      	adds	r1, r2, r3
 8015c32:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015c36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015c3a:	3320      	adds	r3, #32
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7fe fd57 	bl	80146f0 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 8015c42:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8015c46:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015c4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015c4e:	f103 0120 	add.w	r1, r3, #32
 8015c52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015c56:	f103 0020 	add.w	r0, r3, #32
 8015c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c5e:	9301      	str	r3, [sp, #4]
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	9300      	str	r3, [sp, #0]
 8015c64:	4623      	mov	r3, r4
 8015c66:	f7ff fdf5 	bl	8015854 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 8015c6a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8015c6e:	3b02      	subs	r3, #2
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8015c76:	e059      	b.n	8015d2c <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 8015c78:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7fe fcbe 	bl	8014600 <mg_uecc_vli_testBit>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	bf0c      	ite	eq
 8015c8a:	2301      	moveq	r3, #1
 8015c8c:	2300      	movne	r3, #0
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8015c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015c98:	f1c3 0301 	rsb	r3, r3, #1
 8015c9c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015ca0:	015b      	lsls	r3, r3, #5
 8015ca2:	18d0      	adds	r0, r2, r3
 8015ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015ca8:	f1c3 0301 	rsb	r3, r3, #1
 8015cac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015cb0:	015b      	lsls	r3, r3, #5
 8015cb2:	18d1      	adds	r1, r2, r3
 8015cb4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015cb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015cbc:	015b      	lsls	r3, r3, #5
 8015cbe:	18d4      	adds	r4, r2, r3
 8015cc0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015cc8:	015b      	lsls	r3, r3, #5
 8015cca:	441a      	add	r2, r3
 8015ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015cd0:	9300      	str	r3, [sp, #0]
 8015cd2:	4613      	mov	r3, r2
 8015cd4:	4622      	mov	r2, r4
 8015cd6:	f7ff fea1 	bl	8015a1c <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8015cda:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015cde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015ce2:	015b      	lsls	r3, r3, #5
 8015ce4:	18d0      	adds	r0, r2, r3
 8015ce6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015cee:	015b      	lsls	r3, r3, #5
 8015cf0:	18d1      	adds	r1, r2, r3
 8015cf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015cf6:	f1c3 0301 	rsb	r3, r3, #1
 8015cfa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015cfe:	015b      	lsls	r3, r3, #5
 8015d00:	18d4      	adds	r4, r2, r3
 8015d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d06:	f1c3 0301 	rsb	r3, r3, #1
 8015d0a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015d0e:	015b      	lsls	r3, r3, #5
 8015d10:	441a      	add	r2, r3
 8015d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	4613      	mov	r3, r2
 8015d1a:	4622      	mov	r2, r4
 8015d1c:	f7ff fde4 	bl	80158e8 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 8015d20:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8015d24:	3b01      	subs	r3, #1
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8015d2c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	dca1      	bgt.n	8015c78 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 8015d34:	2100      	movs	r1, #0
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f7fe fc62 	bl	8014600 <mg_uecc_vli_testBit>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	bf0c      	ite	eq
 8015d42:	2301      	moveq	r3, #1
 8015d44:	2300      	movne	r3, #0
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8015d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d50:	f1c3 0301 	rsb	r3, r3, #1
 8015d54:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015d58:	015b      	lsls	r3, r3, #5
 8015d5a:	18d0      	adds	r0, r2, r3
 8015d5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d60:	f1c3 0301 	rsb	r3, r3, #1
 8015d64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015d68:	015b      	lsls	r3, r3, #5
 8015d6a:	18d1      	adds	r1, r2, r3
 8015d6c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d74:	015b      	lsls	r3, r3, #5
 8015d76:	18d4      	adds	r4, r2, r3
 8015d78:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d80:	015b      	lsls	r3, r3, #5
 8015d82:	441a      	add	r2, r3
 8015d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d88:	9300      	str	r3, [sp, #0]
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	4622      	mov	r2, r4
 8015d8e:	f7ff fe45 	bl	8015a1c <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8015d92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d96:	1d1c      	adds	r4, r3, #4
 8015d98:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015d9c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015da0:	f103 0120 	add.w	r1, r3, #32
 8015da4:	f107 0010 	add.w	r0, r7, #16
 8015da8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015dac:	9300      	str	r3, [sp, #0]
 8015dae:	4623      	mov	r3, r4
 8015db0:	f7fe ff53 	bl	8014c5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 8015db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015db8:	f1c3 0301 	rsb	r3, r3, #1
 8015dbc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015dc0:	015b      	lsls	r3, r3, #5
 8015dc2:	441a      	add	r2, r3
 8015dc4:	f107 0110 	add.w	r1, r7, #16
 8015dc8:	f107 0010 	add.w	r0, r7, #16
 8015dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015dd0:	f7ff f8b7 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8015dd4:	f107 0110 	add.w	r1, r7, #16
 8015dd8:	f107 0010 	add.w	r0, r7, #16
 8015ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015de0:	68ba      	ldr	r2, [r7, #8]
 8015de2:	f7ff f8ae 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 8015de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015dea:	1d1a      	adds	r2, r3, #4
 8015dec:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015df0:	f107 0110 	add.w	r1, r7, #16
 8015df4:	f107 0010 	add.w	r0, r7, #16
 8015df8:	f7ff f907 	bl	801500a <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 8015dfc:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015e00:	009b      	lsls	r3, r3, #2
 8015e02:	68ba      	ldr	r2, [r7, #8]
 8015e04:	441a      	add	r2, r3
 8015e06:	f107 0110 	add.w	r1, r7, #16
 8015e0a:	f107 0010 	add.w	r0, r7, #16
 8015e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e12:	f7ff f896 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 8015e16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015e1a:	f1c3 0301 	rsb	r3, r3, #1
 8015e1e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015e22:	015b      	lsls	r3, r3, #5
 8015e24:	441a      	add	r2, r3
 8015e26:	f107 0110 	add.w	r1, r7, #16
 8015e2a:	f107 0010 	add.w	r0, r7, #16
 8015e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e32:	f7ff f886 	bl	8014f42 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8015e36:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015e3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015e3e:	015b      	lsls	r3, r3, #5
 8015e40:	18d0      	adds	r0, r2, r3
 8015e42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015e4a:	015b      	lsls	r3, r3, #5
 8015e4c:	18d1      	adds	r1, r2, r3
 8015e4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015e52:	f1c3 0301 	rsb	r3, r3, #1
 8015e56:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015e5a:	015b      	lsls	r3, r3, #5
 8015e5c:	18d4      	adds	r4, r2, r3
 8015e5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015e62:	f1c3 0301 	rsb	r3, r3, #1
 8015e66:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015e6a:	015b      	lsls	r3, r3, #5
 8015e6c:	441a      	add	r2, r3
 8015e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e72:	9300      	str	r3, [sp, #0]
 8015e74:	4613      	mov	r3, r2
 8015e76:	4622      	mov	r2, r4
 8015e78:	f7ff fd36 	bl	80158e8 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8015e7c:	f107 0210 	add.w	r2, r7, #16
 8015e80:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015e84:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8015e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e8c:	f7ff fcba 	bl	8015804 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8015e90:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015e94:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015e98:	4619      	mov	r1, r3
 8015e9a:	68f8      	ldr	r0, [r7, #12]
 8015e9c:	f7fe fc28 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8015ea0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015ea4:	009b      	lsls	r3, r3, #2
 8015ea6:	68fa      	ldr	r2, [r7, #12]
 8015ea8:	4413      	add	r3, r2
 8015eaa:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015eae:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f7fe fc1c 	bl	80146f0 <mg_uecc_vli_set>
}
 8015eb8:	bf00      	nop
 8015eba:	37bc      	adds	r7, #188	@ 0xbc
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd90      	pop	{r4, r7, pc}

08015ec0 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ed4:	331f      	adds	r3, #31
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	da00      	bge.n	8015edc <regularize_k+0x1c>
 8015eda:	331f      	adds	r3, #31
 8015edc:	115b      	asrs	r3, r3, #5
 8015ede:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	885b      	ldrh	r3, [r3, #2]
 8015ee4:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ef0:	68f9      	ldr	r1, [r7, #12]
 8015ef2:	68b8      	ldr	r0, [r7, #8]
 8015ef4:	f7fe fcec 	bl	80148d0 <mg_uecc_vli_add>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d10f      	bne.n	8015f1e <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8015efe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f06:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	da0a      	bge.n	8015f22 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 8015f0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015f10:	4619      	mov	r1, r3
 8015f12:	68b8      	ldr	r0, [r7, #8]
 8015f14:	f7fe fb74 	bl	8014600 <mg_uecc_vli_testBit>
 8015f18:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d001      	beq.n	8015f22 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015f1e:	2301      	movs	r3, #1
 8015f20:	e000      	b.n	8015f24 <regularize_k+0x64>
 8015f22:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 8015f24:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f30:	68b9      	ldr	r1, [r7, #8]
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7fe fccc 	bl	80148d0 <mg_uecc_vli_add>
  return carry;
 8015f38:	693b      	ldr	r3, [r7, #16]
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
	...

08015f44 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b088      	sub	sp, #32
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	4613      	mov	r3, r2
 8015f50:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8015f52:	f04f 33ff 	mov.w	r3, #4294967295
 8015f56:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8015f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	68b8      	ldr	r0, [r7, #8]
 8015f60:	f7fe fb8e 	bl	8014680 <mg_uecc_vli_numBits>
 8015f64:	4603      	mov	r3, r0
 8015f66:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8015f68:	4b2a      	ldr	r3, [pc, #168]	@ (8016014 <mg_uecc_generate_random_int+0xd0>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d101      	bne.n	8015f74 <mg_uecc_generate_random_int+0x30>
    return 0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	e04b      	b.n	801600c <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8015f74:	2300      	movs	r3, #0
 8015f76:	61fb      	str	r3, [r7, #28]
 8015f78:	e044      	b.n	8016004 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 8015f7a:	4b26      	ldr	r3, [pc, #152]	@ (8016014 <mg_uecc_generate_random_int+0xd0>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 8015f7e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015f82:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8015f84:	4611      	mov	r1, r2
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	4798      	blx	r3
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d101      	bne.n	8015f94 <mg_uecc_generate_random_int+0x50>
      return 0;
 8015f90:	2300      	movs	r3, #0
 8015f92:	e03b      	b.n	801600c <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8015f94:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015f98:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015f9c:	4413      	add	r3, r2
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	68fa      	ldr	r2, [r7, #12]
 8015fa2:	4413      	add	r3, r2
 8015fa4:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8015fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015faa:	b29b      	uxth	r3, r3
 8015fac:	015b      	lsls	r3, r3, #5
 8015fae:	b29a      	uxth	r2, r3
 8015fb0:	8afb      	ldrh	r3, [r7, #22]
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	b29b      	uxth	r3, r3
 8015fb6:	b21b      	sxth	r3, r3
 8015fb8:	461a      	mov	r2, r3
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 8015fc0:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8015fc4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015fc8:	4403      	add	r3, r0
 8015fca:	009b      	lsls	r3, r3, #2
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	4403      	add	r3, r0
 8015fd0:	400a      	ands	r2, r1
 8015fd2:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8015fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fd8:	4619      	mov	r1, r3
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f7fe fae6 	bl	80145ac <mg_uecc_vli_isZero>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d10b      	bne.n	8015ffe <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 8015fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fea:	461a      	mov	r2, r3
 8015fec:	68f9      	ldr	r1, [r7, #12]
 8015fee:	68b8      	ldr	r0, [r7, #8]
 8015ff0:	f7fe fc13 	bl	801481a <mg_uecc_vli_cmp>
 8015ff4:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8015ff6:	2b01      	cmp	r3, #1
 8015ff8:	d101      	bne.n	8015ffe <mg_uecc_generate_random_int+0xba>
      return 1;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	e006      	b.n	801600c <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	3301      	adds	r3, #1
 8016002:	61fb      	str	r3, [r7, #28]
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	2b3f      	cmp	r3, #63	@ 0x3f
 8016008:	d9b7      	bls.n	8015f7a <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 801600a:	2300      	movs	r3, #0
}
 801600c:	4618      	mov	r0, r3
 801600e:	3720      	adds	r7, #32
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}
 8016014:	24000dd8 	.word	0x24000dd8

08016018 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 8016018:	b480      	push	{r7}
 801601a:	b087      	sub	sp, #28
 801601c:	af00      	add	r7, sp, #0
 801601e:	60f8      	str	r0, [r7, #12]
 8016020:	60b9      	str	r1, [r7, #8]
 8016022:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 8016024:	2300      	movs	r3, #0
 8016026:	617b      	str	r3, [r7, #20]
 8016028:	e018      	b.n	801605c <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	1e5a      	subs	r2, r3, #1
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	1ad3      	subs	r3, r2, r3
 8016032:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	f023 0303 	bic.w	r3, r3, #3
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	4413      	add	r3, r2
 801603e:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	f003 0303 	and.w	r3, r3, #3
 8016046:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8016048:	fa22 f103 	lsr.w	r1, r2, r3
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	68fa      	ldr	r2, [r7, #12]
 8016050:	4413      	add	r3, r2
 8016052:	b2ca      	uxtb	r2, r1
 8016054:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	3301      	adds	r3, #1
 801605a:	617b      	str	r3, [r7, #20]
 801605c:	697a      	ldr	r2, [r7, #20]
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	429a      	cmp	r2, r3
 8016062:	dbe2      	blt.n	801602a <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8016064:	bf00      	nop
 8016066:	bf00      	nop
 8016068:	371c      	adds	r7, #28
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr

08016072 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 8016072:	b580      	push	{r7, lr}
 8016074:	b086      	sub	sp, #24
 8016076:	af00      	add	r7, sp, #0
 8016078:	60f8      	str	r0, [r7, #12]
 801607a:	60b9      	str	r1, [r7, #8]
 801607c:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	3303      	adds	r3, #3
 8016082:	2b00      	cmp	r3, #0
 8016084:	da00      	bge.n	8016088 <mg_uecc_vli_bytesToNative+0x16>
 8016086:	3303      	adds	r3, #3
 8016088:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 801608a:	b25b      	sxtb	r3, r3
 801608c:	4619      	mov	r1, r3
 801608e:	68f8      	ldr	r0, [r7, #12]
 8016090:	f7fe fa6b 	bl	801456a <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8016094:	2300      	movs	r3, #0
 8016096:	617b      	str	r3, [r7, #20]
 8016098:	e01e      	b.n	80160d8 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	1e5a      	subs	r2, r3, #1
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	f023 0303 	bic.w	r3, r3, #3
 80160aa:	68fa      	ldr	r2, [r7, #12]
 80160ac:	4413      	add	r3, r2
 80160ae:	6819      	ldr	r1, [r3, #0]
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	68ba      	ldr	r2, [r7, #8]
 80160b4:	4413      	add	r3, r2
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	f003 0303 	and.w	r3, r3, #3
 80160c0:	00db      	lsls	r3, r3, #3
 80160c2:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	f023 0303 	bic.w	r3, r3, #3
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	4403      	add	r3, r0
 80160ce:	430a      	orrs	r2, r1
 80160d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	3301      	adds	r3, #1
 80160d6:	617b      	str	r3, [r7, #20]
 80160d8:	697a      	ldr	r2, [r7, #20]
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	429a      	cmp	r2, r3
 80160de:	dbdc      	blt.n	801609a <mg_uecc_vli_bytesToNative+0x28>
  }
}
 80160e0:	bf00      	nop
 80160e2:	bf00      	nop
 80160e4:	3718      	adds	r7, #24
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}

080160ea <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 80160ea:	b580      	push	{r7, lr}
 80160ec:	b08a      	sub	sp, #40	@ 0x28
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	60f8      	str	r0, [r7, #12]
 80160f2:	60b9      	str	r1, [r7, #8]
 80160f4:	607a      	str	r2, [r7, #4]
 80160f6:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80160fe:	3307      	adds	r3, #7
 8016100:	2b00      	cmp	r3, #0
 8016102:	da00      	bge.n	8016106 <bits2int+0x1c>
 8016104:	3307      	adds	r3, #7
 8016106:	10db      	asrs	r3, r3, #3
 8016108:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016110:	331f      	adds	r3, #31
 8016112:	2b00      	cmp	r3, #0
 8016114:	da00      	bge.n	8016118 <bits2int+0x2e>
 8016116:	331f      	adds	r3, #31
 8016118:	115b      	asrs	r3, r3, #5
 801611a:	b25b      	sxtb	r3, r3
 801611c:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	69fb      	ldr	r3, [r7, #28]
 8016122:	429a      	cmp	r2, r3
 8016124:	d901      	bls.n	801612a <bits2int+0x40>
    bits_size = num_n_bytes;
 8016126:	69fb      	ldr	r3, [r7, #28]
 8016128:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	b25b      	sxtb	r3, r3
 801612e:	4619      	mov	r1, r3
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	f7fe fa1a 	bl	801456a <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	461a      	mov	r2, r3
 801613a:	68b9      	ldr	r1, [r7, #8]
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f7ff ff98 	bl	8016072 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	00db      	lsls	r3, r3, #3
 8016146:	683a      	ldr	r2, [r7, #0]
 8016148:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801614c:	4293      	cmp	r3, r2
 801614e:	d93a      	bls.n	80161c6 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	00db      	lsls	r3, r3, #3
 8016154:	683a      	ldr	r2, [r7, #0]
 8016156:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801615a:	1a9b      	subs	r3, r3, r2
 801615c:	617b      	str	r3, [r7, #20]
  carry = 0;
 801615e:	2300      	movs	r3, #0
 8016160:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	009b      	lsls	r3, r3, #2
 8016166:	68fa      	ldr	r2, [r7, #12]
 8016168:	4413      	add	r3, r2
 801616a:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 801616c:	e010      	b.n	8016190 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 8016174:	693a      	ldr	r2, [r7, #16]
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	40da      	lsrs	r2, r3
 801617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801617c:	431a      	orrs	r2, r3
 801617e:	6a3b      	ldr	r3, [r7, #32]
 8016180:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	f1c3 0320 	rsb	r3, r3, #32
 8016188:	693a      	ldr	r2, [r7, #16]
 801618a:	fa02 f303 	lsl.w	r3, r2, r3
 801618e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 8016190:	6a3b      	ldr	r3, [r7, #32]
 8016192:	1f1a      	subs	r2, r3, #4
 8016194:	623a      	str	r2, [r7, #32]
 8016196:	68fa      	ldr	r2, [r7, #12]
 8016198:	429a      	cmp	r2, r3
 801619a:	d3e8      	bcc.n	801616e <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	3324      	adds	r3, #36	@ 0x24
 80161a0:	69ba      	ldr	r2, [r7, #24]
 80161a2:	b252      	sxtb	r2, r2
 80161a4:	68f9      	ldr	r1, [r7, #12]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7fe fac9 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 80161ac:	4603      	mov	r3, r0
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	d00a      	beq.n	80161c8 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80161b8:	69bb      	ldr	r3, [r7, #24]
 80161ba:	b25b      	sxtb	r3, r3
 80161bc:	68f9      	ldr	r1, [r7, #12]
 80161be:	68f8      	ldr	r0, [r7, #12]
 80161c0:	f7fe fbd0 	bl	8014964 <mg_uecc_vli_sub>
 80161c4:	e000      	b.n	80161c8 <bits2int+0xde>
    return;
 80161c6:	bf00      	nop
  }
}
 80161c8:	3728      	adds	r7, #40	@ 0x28
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
	...

080161d0 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 80161d0:	b590      	push	{r4, r7, lr}
 80161d2:	b0ad      	sub	sp, #180	@ 0xb4
 80161d4:	af02      	add	r7, sp, #8
 80161d6:	60f8      	str	r0, [r7, #12]
 80161d8:	60b9      	str	r1, [r7, #8]
 80161da:	607a      	str	r2, [r7, #4]
 80161dc:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 80161de:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80161e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80161e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80161e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 80161ea:	2300      	movs	r3, #0
 80161ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 80161f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80161fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80161fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016202:	331f      	adds	r3, #31
 8016204:	2b00      	cmp	r3, #0
 8016206:	da00      	bge.n	801620a <mg_uecc_sign_with_k_internal+0x3a>
 8016208:	331f      	adds	r3, #31
 801620a:	115b      	asrs	r3, r3, #5
 801620c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 8016210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016214:	885b      	ldrh	r3, [r3, #2]
 8016216:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 801621a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 801621e:	4619      	mov	r1, r3
 8016220:	6838      	ldr	r0, [r7, #0]
 8016222:	f7fe f9c3 	bl	80145ac <mg_uecc_vli_isZero>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d10b      	bne.n	8016244 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 801622c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016230:	3324      	adds	r3, #36	@ 0x24
 8016232:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	4618      	mov	r0, r3
 801623a:	f7fe faee 	bl	801481a <mg_uecc_vli_cmp>
 801623e:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 8016240:	2b01      	cmp	r3, #1
 8016242:	d001      	beq.n	8016248 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 8016244:	2300      	movs	r3, #0
 8016246:	e128      	b.n	801649a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 8016248:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801624c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8016250:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016254:	6838      	ldr	r0, [r7, #0]
 8016256:	f7ff fe33 	bl	8015ec0 <regularize_k>
 801625a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801625e:	4b91      	ldr	r3, [pc, #580]	@ (80164a4 <mg_uecc_sign_with_k_internal+0x2d4>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d01c      	beq.n	80162a0 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 8016266:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801626a:	009b      	lsls	r3, r3, #2
 801626c:	33a8      	adds	r3, #168	@ 0xa8
 801626e:	443b      	add	r3, r7
 8016270:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8016274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016278:	3304      	adds	r3, #4
 801627a:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801627e:	4619      	mov	r1, r3
 8016280:	f7ff fe60 	bl	8015f44 <mg_uecc_generate_random_int>
 8016284:	4603      	mov	r3, r0
 8016286:	2b00      	cmp	r3, #0
 8016288:	d101      	bne.n	801628e <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801628a:	2300      	movs	r3, #0
 801628c:	e105      	b.n	801649a <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801628e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	33a8      	adds	r3, #168	@ 0xa8
 8016296:	443b      	add	r3, r7
 8016298:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801629c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 80162a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80162a4:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80162a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	bf0c      	ite	eq
 80162b0:	2301      	moveq	r3, #1
 80162b2:	2300      	movne	r3, #0
 80162b4:	b2db      	uxtb	r3, r3
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	33a8      	adds	r3, #168	@ 0xa8
 80162ba:	443b      	add	r3, r7
 80162bc:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 80162c0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80162c4:	3301      	adds	r3, #1
 80162c6:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 80162c8:	b21b      	sxth	r3, r3
 80162ca:	f107 0014 	add.w	r0, r7, #20
 80162ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80162d2:	9201      	str	r2, [sp, #4]
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80162da:	4622      	mov	r2, r4
 80162dc:	f7ff fc8f 	bl	8015bfe <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 80162e0:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80162e4:	f107 0314 	add.w	r3, r7, #20
 80162e8:	4611      	mov	r1, r2
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7fe f95e 	bl	80145ac <mg_uecc_vli_isZero>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 80162f6:	2300      	movs	r3, #0
 80162f8:	e0cf      	b.n	801649a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 80162fa:	4b6a      	ldr	r3, [pc, #424]	@ (80164a4 <mg_uecc_sign_with_k_internal+0x2d4>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d10a      	bne.n	8016318 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 8016302:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8016306:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801630a:	4611      	mov	r1, r2
 801630c:	4618      	mov	r0, r3
 801630e:	f7fe f92c 	bl	801456a <mg_uecc_vli_clear>
    tmp[0] = 1;
 8016312:	2301      	movs	r3, #1
 8016314:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016316:	e00f      	b.n	8016338 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 8016318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801631c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8016320:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8016324:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8016328:	4618      	mov	r0, r3
 801632a:	f7ff fe0b 	bl	8015f44 <mg_uecc_generate_random_int>
 801632e:	4603      	mov	r3, r0
 8016330:	2b00      	cmp	r3, #0
 8016332:	d101      	bne.n	8016338 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 8016334:	2300      	movs	r3, #0
 8016336:	e0b0      	b.n	801649a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 8016338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801633c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8016340:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8016344:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	460b      	mov	r3, r1
 801634c:	6839      	ldr	r1, [r7, #0]
 801634e:	6838      	ldr	r0, [r7, #0]
 8016350:	f7fe fddc 	bl	8014f0c <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 8016354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016358:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801635c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016360:	6839      	ldr	r1, [r7, #0]
 8016362:	6838      	ldr	r0, [r7, #0]
 8016364:	f7fe fe51 	bl	801500a <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8016368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801636c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8016370:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8016374:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	460b      	mov	r3, r1
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	6838      	ldr	r0, [r7, #0]
 8016380:	f7fe fdc4 	bl	8014f0c <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8016384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016388:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801638c:	4619      	mov	r1, r3
 801638e:	f107 0314 	add.w	r3, r7, #20
 8016392:	461a      	mov	r2, r3
 8016394:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8016398:	f7ff fe3e 	bl	8016018 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801639c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80163a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163a4:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	da00      	bge.n	80163ac <mg_uecc_sign_with_k_internal+0x1dc>
 80163aa:	3307      	adds	r3, #7
 80163ac:	10db      	asrs	r3, r3, #3
 80163ae:	461a      	mov	r2, r3
 80163b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80163b4:	68f9      	ldr	r1, [r7, #12]
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7ff fe5b 	bl	8016072 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 80163bc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80163c0:	3b01      	subs	r3, #1
 80163c2:	009b      	lsls	r3, r3, #2
 80163c4:	33a8      	adds	r3, #168	@ 0xa8
 80163c6:	443b      	add	r3, r7
 80163c8:	2200      	movs	r2, #0
 80163ca:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 80163ce:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80163d2:	f107 0114 	add.w	r1, r7, #20
 80163d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fe f988 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 80163e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80163e4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80163e8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80163ec:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80163f0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80163f4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	4623      	mov	r3, r4
 80163fc:	f7fe fd86 	bl	8014f0c <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 8016400:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8016404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	68b9      	ldr	r1, [r7, #8]
 801640c:	f7ff fe6d 	bl	80160ea <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 8016410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016414:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016418:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801641c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8016420:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8016424:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016428:	9300      	str	r3, [sp, #0]
 801642a:	4623      	mov	r3, r4
 801642c:	f7fe fbee 	bl	8014c0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 8016430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016434:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016438:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801643c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8016440:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016444:	9300      	str	r3, [sp, #0]
 8016446:	4613      	mov	r3, r2
 8016448:	683a      	ldr	r2, [r7, #0]
 801644a:	f7fe fd5f 	bl	8014f0c <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801644e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8016452:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8016456:	4611      	mov	r1, r2
 8016458:	4618      	mov	r0, r3
 801645a:	f7fe f911 	bl	8014680 <mg_uecc_vli_numBits>
 801645e:	4603      	mov	r3, r0
 8016460:	461a      	mov	r2, r3
 8016462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016466:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801646a:	00db      	lsls	r3, r3, #3
 801646c:	429a      	cmp	r2, r3
 801646e:	dd01      	ble.n	8016474 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 8016470:	2300      	movs	r3, #0
 8016472:	e012      	b.n	801649a <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 8016474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016478:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801647c:	461a      	mov	r2, r3
 801647e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016482:	1898      	adds	r0, r3, r2
 8016484:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016488:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801648c:	4619      	mov	r1, r3
 801648e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8016492:	461a      	mov	r2, r3
 8016494:	f7ff fdc0 	bl	8016018 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 8016498:	2301      	movs	r3, #1
}
 801649a:	4618      	mov	r0, r3
 801649c:	37ac      	adds	r7, #172	@ 0xac
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd90      	pop	{r4, r7, pc}
 80164a2:	bf00      	nop
 80164a4:	24000dd8 	.word	0x24000dd8

080164a8 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b084      	sub	sp, #16
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	695a      	ldr	r2, [r3, #20]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	691b      	ldr	r3, [r3, #16]
 80164ba:	005b      	lsls	r3, r3, #1
 80164bc:	4413      	add	r3, r2
 80164be:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 80164c0:	2300      	movs	r3, #0
 80164c2:	60fb      	str	r3, [r7, #12]
 80164c4:	e00d      	b.n	80164e2 <HMAC_init+0x3a>
 80164c6:	683a      	ldr	r2, [r7, #0]
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	4413      	add	r3, r2
 80164cc:	781a      	ldrb	r2, [r3, #0]
 80164ce:	68b9      	ldr	r1, [r7, #8]
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	440b      	add	r3, r1
 80164d4:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 80164d8:	b2d2      	uxtb	r2, r2
 80164da:	701a      	strb	r2, [r3, #0]
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	3301      	adds	r3, #1
 80164e0:	60fb      	str	r3, [r7, #12]
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	691b      	ldr	r3, [r3, #16]
 80164e6:	68fa      	ldr	r2, [r7, #12]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d3ec      	bcc.n	80164c6 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 80164ec:	e007      	b.n	80164fe <HMAC_init+0x56>
 80164ee:	68ba      	ldr	r2, [r7, #8]
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	4413      	add	r3, r2
 80164f4:	2236      	movs	r2, #54	@ 0x36
 80164f6:	701a      	strb	r2, [r3, #0]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	3301      	adds	r3, #1
 80164fc:	60fb      	str	r3, [r7, #12]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	68db      	ldr	r3, [r3, #12]
 8016502:	68fa      	ldr	r2, [r7, #12]
 8016504:	429a      	cmp	r2, r3
 8016506:	d3f2      	bcc.n	80164ee <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	685b      	ldr	r3, [r3, #4]
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	68d2      	ldr	r2, [r2, #12]
 8016518:	68b9      	ldr	r1, [r7, #8]
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	4798      	blx	r3
}
 801651e:	bf00      	nop
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 8016526:	b580      	push	{r7, lr}
 8016528:	b084      	sub	sp, #16
 801652a:	af00      	add	r7, sp, #0
 801652c:	60f8      	str	r0, [r7, #12]
 801652e:	60b9      	str	r1, [r7, #8]
 8016530:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	68b9      	ldr	r1, [r7, #8]
 801653a:	68f8      	ldr	r0, [r7, #12]
 801653c:	4798      	blx	r3
}
 801653e:	bf00      	nop
 8016540:	3710      	adds	r7, #16
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}

08016546 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 8016546:	b580      	push	{r7, lr}
 8016548:	b086      	sub	sp, #24
 801654a:	af00      	add	r7, sp, #0
 801654c:	60f8      	str	r0, [r7, #12]
 801654e:	60b9      	str	r1, [r7, #8]
 8016550:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	695a      	ldr	r2, [r3, #20]
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	691b      	ldr	r3, [r3, #16]
 801655a:	005b      	lsls	r3, r3, #1
 801655c:	4413      	add	r3, r2
 801655e:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 8016560:	2300      	movs	r3, #0
 8016562:	617b      	str	r3, [r7, #20]
 8016564:	e00d      	b.n	8016582 <HMAC_finish+0x3c>
 8016566:	68ba      	ldr	r2, [r7, #8]
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	4413      	add	r3, r2
 801656c:	781a      	ldrb	r2, [r3, #0]
 801656e:	6939      	ldr	r1, [r7, #16]
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	440b      	add	r3, r1
 8016574:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 8016578:	b2d2      	uxtb	r2, r2
 801657a:	701a      	strb	r2, [r3, #0]
 801657c:	697b      	ldr	r3, [r7, #20]
 801657e:	3301      	adds	r3, #1
 8016580:	617b      	str	r3, [r7, #20]
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	691b      	ldr	r3, [r3, #16]
 8016586:	697a      	ldr	r2, [r7, #20]
 8016588:	429a      	cmp	r2, r3
 801658a:	d3ec      	bcc.n	8016566 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 801658c:	e007      	b.n	801659e <HMAC_finish+0x58>
 801658e:	693a      	ldr	r2, [r7, #16]
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	4413      	add	r3, r2
 8016594:	225c      	movs	r2, #92	@ 0x5c
 8016596:	701a      	strb	r2, [r3, #0]
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	3301      	adds	r3, #1
 801659c:	617b      	str	r3, [r7, #20]
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	697a      	ldr	r2, [r7, #20]
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d3f2      	bcc.n	801658e <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	689b      	ldr	r3, [r3, #8]
 80165ac:	6879      	ldr	r1, [r7, #4]
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	68f8      	ldr	r0, [r7, #12]
 80165b8:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	68fa      	ldr	r2, [r7, #12]
 80165c0:	68d2      	ldr	r2, [r2, #12]
 80165c2:	6939      	ldr	r1, [r7, #16]
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	685b      	ldr	r3, [r3, #4]
 80165cc:	68fa      	ldr	r2, [r7, #12]
 80165ce:	6912      	ldr	r2, [r2, #16]
 80165d0:	6879      	ldr	r1, [r7, #4]
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	689b      	ldr	r3, [r3, #8]
 80165da:	6879      	ldr	r1, [r7, #4]
 80165dc:	68f8      	ldr	r0, [r7, #12]
 80165de:	4798      	blx	r3
}
 80165e0:	bf00      	nop
 80165e2:	3718      	adds	r7, #24
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b084      	sub	sp, #16
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 80165f4:	68b9      	ldr	r1, [r7, #8]
 80165f6:	68f8      	ldr	r0, [r7, #12]
 80165f8:	f7ff ff56 	bl	80164a8 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	691b      	ldr	r3, [r3, #16]
 8016600:	461a      	mov	r2, r3
 8016602:	6879      	ldr	r1, [r7, #4]
 8016604:	68f8      	ldr	r0, [r7, #12]
 8016606:	f7ff ff8e 	bl	8016526 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 801660a:	687a      	ldr	r2, [r7, #4]
 801660c:	68b9      	ldr	r1, [r7, #8]
 801660e:	68f8      	ldr	r0, [r7, #12]
 8016610:	f7ff ff99 	bl	8016546 <HMAC_finish>
}
 8016614:	bf00      	nop
 8016616:	3710      	adds	r7, #16
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}

0801661c <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 801661c:	b580      	push	{r7, lr}
 801661e:	b096      	sub	sp, #88	@ 0x58
 8016620:	af02      	add	r7, sp, #8
 8016622:	60f8      	str	r0, [r7, #12]
 8016624:	60b9      	str	r1, [r7, #8]
 8016626:	607a      	str	r2, [r7, #4]
 8016628:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 801662a:	683b      	ldr	r3, [r7, #0]
 801662c:	695b      	ldr	r3, [r3, #20]
 801662e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	691b      	ldr	r3, [r3, #16]
 8016634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016636:	4413      	add	r3, r2
 8016638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 801663a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801663c:	785b      	ldrb	r3, [r3, #1]
 801663e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8016642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016648:	331f      	adds	r3, #31
 801664a:	2b00      	cmp	r3, #0
 801664c:	da00      	bge.n	8016650 <mg_uecc_sign_deterministic+0x34>
 801664e:	331f      	adds	r3, #31
 8016650:	115b      	asrs	r3, r3, #5
 8016652:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 8016656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016658:	885b      	ldrh	r3, [r3, #2]
 801665a:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 801665c:	2300      	movs	r3, #0
 801665e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016660:	e00c      	b.n	801667c <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 8016662:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016666:	4413      	add	r3, r2
 8016668:	2201      	movs	r2, #1
 801666a:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 801666c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801666e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016670:	4413      	add	r3, r2
 8016672:	2200      	movs	r2, #0
 8016674:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 8016676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016678:	3301      	adds	r3, #1
 801667a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	691b      	ldr	r3, [r3, #16]
 8016680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016682:	429a      	cmp	r2, r3
 8016684:	d3ed      	bcc.n	8016662 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 8016686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016688:	6838      	ldr	r0, [r7, #0]
 801668a:	f7ff ff0d 	bl	80164a8 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	691b      	ldr	r3, [r3, #16]
 8016692:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016694:	4413      	add	r3, r2
 8016696:	2200      	movs	r2, #0
 8016698:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	691b      	ldr	r3, [r3, #16]
 801669e:	3301      	adds	r3, #1
 80166a0:	461a      	mov	r2, r3
 80166a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80166a4:	6838      	ldr	r0, [r7, #0]
 80166a6:	f7ff ff3e 	bl	8016526 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 80166aa:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80166ae:	461a      	mov	r2, r3
 80166b0:	68f9      	ldr	r1, [r7, #12]
 80166b2:	6838      	ldr	r0, [r7, #0]
 80166b4:	f7ff ff37 	bl	8016526 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 80166b8:	687a      	ldr	r2, [r7, #4]
 80166ba:	68b9      	ldr	r1, [r7, #8]
 80166bc:	6838      	ldr	r0, [r7, #0]
 80166be:	f7ff ff32 	bl	8016526 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 80166c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80166c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80166c6:	6838      	ldr	r0, [r7, #0]
 80166c8:	f7ff ff3d 	bl	8016546 <HMAC_finish>

  update_V(hash_context, K, V);
 80166cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80166ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80166d0:	6838      	ldr	r0, [r7, #0]
 80166d2:	f7ff ff89 	bl	80165e8 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 80166d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80166d8:	6838      	ldr	r0, [r7, #0]
 80166da:	f7ff fee5 	bl	80164a8 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	691b      	ldr	r3, [r3, #16]
 80166e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80166e4:	4413      	add	r3, r2
 80166e6:	2201      	movs	r2, #1
 80166e8:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	691b      	ldr	r3, [r3, #16]
 80166ee:	3301      	adds	r3, #1
 80166f0:	461a      	mov	r2, r3
 80166f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80166f4:	6838      	ldr	r0, [r7, #0]
 80166f6:	f7ff ff16 	bl	8016526 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 80166fa:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80166fe:	461a      	mov	r2, r3
 8016700:	68f9      	ldr	r1, [r7, #12]
 8016702:	6838      	ldr	r0, [r7, #0]
 8016704:	f7ff ff0f 	bl	8016526 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	68b9      	ldr	r1, [r7, #8]
 801670c:	6838      	ldr	r0, [r7, #0]
 801670e:	f7ff ff0a 	bl	8016526 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 8016712:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016716:	6838      	ldr	r0, [r7, #0]
 8016718:	f7ff ff15 	bl	8016546 <HMAC_finish>

  update_V(hash_context, K, V);
 801671c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801671e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016720:	6838      	ldr	r0, [r7, #0]
 8016722:	f7ff ff61 	bl	80165e8 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8016726:	2300      	movs	r3, #0
 8016728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801672a:	e084      	b.n	8016836 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 801672c:	f107 0310 	add.w	r3, r7, #16
 8016730:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 8016732:	2300      	movs	r3, #0
 8016734:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 8016738:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801673a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801673c:	6838      	ldr	r0, [r7, #0]
 801673e:	f7ff ff53 	bl	80165e8 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 8016742:	2300      	movs	r3, #0
 8016744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016746:	e017      	b.n	8016778 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 8016748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801674a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801674c:	441a      	add	r2, r3
 801674e:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 8016752:	b2cb      	uxtb	r3, r1
 8016754:	3301      	adds	r3, #1
 8016756:	b2db      	uxtb	r3, r3
 8016758:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801675c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801675e:	440b      	add	r3, r1
 8016760:	7812      	ldrb	r2, [r2, #0]
 8016762:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 8016764:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 8016768:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801676c:	009b      	lsls	r3, r3, #2
 801676e:	429a      	cmp	r2, r3
 8016770:	da08      	bge.n	8016784 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 8016772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016774:	3301      	adds	r3, #1
 8016776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	691b      	ldr	r3, [r3, #16]
 801677c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801677e:	429a      	cmp	r2, r3
 8016780:	d3e2      	bcc.n	8016748 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 8016782:	e7d9      	b.n	8016738 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 8016784:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 8016786:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801678a:	015a      	lsls	r2, r3, #5
 801678c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8016790:	429a      	cmp	r2, r3
 8016792:	dd20      	ble.n	80167d6 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8016794:	f04f 33ff 	mov.w	r3, #4294967295
 8016798:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 801679a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801679e:	3b01      	subs	r3, #1
 80167a0:	009b      	lsls	r3, r3, #2
 80167a2:	3350      	adds	r3, #80	@ 0x50
 80167a4:	443b      	add	r3, r7
 80167a6:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 80167aa:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	015b      	lsls	r3, r3, #5
 80167b2:	b29a      	uxth	r2, r3
 80167b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80167b6:	1ad3      	subs	r3, r2, r3
 80167b8:	b29b      	uxth	r3, r3
 80167ba:	b21b      	sxth	r3, r3
 80167bc:	461a      	mov	r2, r3
          mask >>
 80167be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167c0:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 80167c4:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80167c8:	3b01      	subs	r3, #1
 80167ca:	400a      	ands	r2, r1
 80167cc:	009b      	lsls	r3, r3, #2
 80167ce:	3350      	adds	r3, #80	@ 0x50
 80167d0:	443b      	add	r3, r7
 80167d2:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 80167d6:	f107 0210 	add.w	r2, r7, #16
 80167da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80167dc:	9301      	str	r3, [sp, #4]
 80167de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167e0:	9300      	str	r3, [sp, #0]
 80167e2:	4613      	mov	r3, r2
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	68b9      	ldr	r1, [r7, #8]
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f7ff fcf1 	bl	80161d0 <mg_uecc_sign_with_k_internal>
 80167ee:	4603      	mov	r3, r0
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d001      	beq.n	80167f8 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 80167f4:	2301      	movs	r3, #1
 80167f6:	e023      	b.n	8016840 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 80167f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80167fa:	6838      	ldr	r0, [r7, #0]
 80167fc:	f7ff fe54 	bl	80164a8 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	691b      	ldr	r3, [r3, #16]
 8016804:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016806:	4413      	add	r3, r2
 8016808:	2200      	movs	r2, #0
 801680a:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	691b      	ldr	r3, [r3, #16]
 8016810:	3301      	adds	r3, #1
 8016812:	461a      	mov	r2, r3
 8016814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016816:	6838      	ldr	r0, [r7, #0]
 8016818:	f7ff fe85 	bl	8016526 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 801681c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801681e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016820:	6838      	ldr	r0, [r7, #0]
 8016822:	f7ff fe90 	bl	8016546 <HMAC_finish>

    update_V(hash_context, K, V);
 8016826:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801682a:	6838      	ldr	r0, [r7, #0]
 801682c:	f7ff fedc 	bl	80165e8 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8016830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016832:	3301      	adds	r3, #1
 8016834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016838:	2b3f      	cmp	r3, #63	@ 0x3f
 801683a:	f67f af77 	bls.w	801672c <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 801683e:	2300      	movs	r3, #0
}
 8016840:	4618      	mov	r0, r3
 8016842:	3750      	adds	r7, #80	@ 0x50
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}

08016848 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	460a      	mov	r2, r1
 8016852:	80fb      	strh	r3, [r7, #6]
 8016854:	4613      	mov	r3, r2
 8016856:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 8016858:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801685c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016860:	4293      	cmp	r3, r2
 8016862:	bfb8      	it	lt
 8016864:	4613      	movlt	r3, r2
 8016866:	b21b      	sxth	r3, r3
}
 8016868:	4618      	mov	r0, r3
 801686a:	370c      	adds	r7, #12
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 8016874:	b590      	push	{r4, r7, lr}
 8016876:	b0ff      	sub	sp, #508	@ 0x1fc
 8016878:	af02      	add	r7, sp, #8
 801687a:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 801687e:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 8016882:	6020      	str	r0, [r4, #0]
 8016884:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8016888:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 801688c:	6001      	str	r1, [r0, #0]
 801688e:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8016892:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 8016896:	600a      	str	r2, [r1, #0]
 8016898:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801689c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80168a0:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 80168a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80168ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80168b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80168b4:	331f      	adds	r3, #31
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	da00      	bge.n	80168bc <mg_uecc_verify+0x48>
 80168ba:	331f      	adds	r3, #31
 80168bc:	115b      	asrs	r3, r3, #5
 80168be:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 80168c2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80168c6:	3b01      	subs	r3, #1
 80168c8:	009b      	lsls	r3, r3, #2
 80168ca:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80168ce:	443b      	add	r3, r7
 80168d0:	2200      	movs	r2, #0
 80168d2:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 80168d6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80168da:	1e5a      	subs	r2, r3, #1
 80168dc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80168e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80168e4:	2100      	movs	r1, #0
 80168e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 80168ea:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80168ee:	1e5a      	subs	r2, r3, #1
 80168f0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80168f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80168f8:	2100      	movs	r1, #0
 80168fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 80168fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016902:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016906:	461a      	mov	r2, r3
 8016908:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801690c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016910:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8016914:	6819      	ldr	r1, [r3, #0]
 8016916:	f7ff fbac 	bl	8016072 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801691a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016924:	18d0      	adds	r0, r2, r3
 8016926:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801692a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801692e:	461a      	mov	r2, r3
 8016930:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016934:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 801693c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016940:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8016944:	461a      	mov	r2, r3
 8016946:	f7ff fb94 	bl	8016072 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 801694a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801694e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016952:	461a      	mov	r2, r3
 8016954:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016958:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801695c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8016960:	6819      	ldr	r1, [r3, #0]
 8016962:	f7ff fb86 	bl	8016072 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 8016966:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801696a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801696e:	461a      	mov	r2, r3
 8016970:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016974:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	1899      	adds	r1, r3, r2
 801697c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016980:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016984:	461a      	mov	r2, r3
 8016986:	f107 0310 	add.w	r3, r7, #16
 801698a:	4618      	mov	r0, r3
 801698c:	f7ff fb71 	bl	8016072 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8016990:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016994:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016998:	4611      	mov	r1, r2
 801699a:	4618      	mov	r0, r3
 801699c:	f7fd fe06 	bl	80145ac <mg_uecc_vli_isZero>
 80169a0:	4603      	mov	r3, r0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d10a      	bne.n	80169bc <mg_uecc_verify+0x148>
 80169a6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80169aa:	f107 0310 	add.w	r3, r7, #16
 80169ae:	4611      	mov	r1, r2
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7fd fdfb 	bl	80145ac <mg_uecc_vli_isZero>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d001      	beq.n	80169c0 <mg_uecc_verify+0x14c>
    return 0;
 80169bc:	2300      	movs	r3, #0
 80169be:	e220      	b.n	8016e02 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80169c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169c4:	3324      	adds	r3, #36	@ 0x24
 80169c6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80169ca:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7fd feb5 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 80169d4:	4603      	mov	r3, r0
 80169d6:	2b01      	cmp	r3, #1
 80169d8:	d10c      	bne.n	80169f4 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 80169da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169de:	3324      	adds	r3, #36	@ 0x24
 80169e0:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80169e4:	f107 0110 	add.w	r1, r7, #16
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7fd fea8 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 80169ee:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80169f0:	2b01      	cmp	r3, #1
 80169f2:	d001      	beq.n	80169f8 <mg_uecc_verify+0x184>
    return 0;
 80169f4:	2300      	movs	r3, #0
 80169f6:	e204      	b.n	8016e02 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 80169f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169fc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016a00:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016a04:	f107 0110 	add.w	r1, r7, #16
 8016a08:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016a0c:	f7fe fafd 	bl	801500a <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8016a10:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016a14:	3b01      	subs	r3, #1
 8016a16:	009b      	lsls	r3, r3, #2
 8016a18:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8016a1c:	443b      	add	r3, r7
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 8016a24:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016a28:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8016a2c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016a30:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 8016a34:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a3c:	6812      	ldr	r2, [r2, #0]
 8016a3e:	6809      	ldr	r1, [r1, #0]
 8016a40:	f7ff fb53 	bl	80160ea <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8016a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a48:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016a4c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016a50:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 8016a54:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016a58:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016a5c:	9300      	str	r3, [sp, #0]
 8016a5e:	4623      	mov	r3, r4
 8016a60:	f7fe fa54 	bl	8014f0c <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 8016a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a68:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016a6c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016a70:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8016a74:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8016a78:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016a7c:	9300      	str	r3, [sp, #0]
 8016a7e:	4623      	mov	r3, r4
 8016a80:	f7fe fa44 	bl	8014f0c <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 8016a84:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016a88:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8016a8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016a90:	4618      	mov	r0, r3
 8016a92:	f7fd fe2d 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 8016a96:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016aa0:	18d0      	adds	r0, r2, r3
 8016aa2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016aa6:	009b      	lsls	r3, r3, #2
 8016aa8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016aac:	4413      	add	r3, r2
 8016aae:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	f7fd fe1c 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8016ab8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016abc:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8016ac0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016ac4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7fd fe11 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8016ace:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016ad2:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8016ad6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016ada:	009b      	lsls	r3, r3, #2
 8016adc:	18d1      	adds	r1, r2, r3
 8016ade:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016ae2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7fd fe02 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8016aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016af0:	1d1c      	adds	r4, r3, #4
 8016af2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8016af6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8016afa:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016afe:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	4623      	mov	r3, r4
 8016b06:	f7fe f8a8 	bl	8014c5a <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8016b0a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016b0e:	009b      	lsls	r3, r3, #2
 8016b10:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016b14:	18d4      	adds	r4, r2, r3
 8016b16:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016b1a:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016b1e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016b26:	9300      	str	r3, [sp, #0]
 8016b28:	4623      	mov	r3, r4
 8016b2a:	f7fe fedd 	bl	80158e8 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8016b2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016b32:	1d1a      	adds	r2, r3, #4
 8016b34:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016b38:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016b3c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016b40:	f7fe fa63 	bl	801500a <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 8016b44:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016b48:	009b      	lsls	r3, r3, #2
 8016b4a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016b4e:	18d1      	adds	r1, r2, r3
 8016b50:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016b54:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8016b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016b5c:	f7fe fe52 	bl	8015804 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8016b60:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016b64:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016b68:	2200      	movs	r2, #0
 8016b6a:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 8016b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016b70:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8016b74:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016b78:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016b7c:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8016b7e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016b82:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016b86:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016b8a:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8016b8c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016b90:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016b94:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016b98:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 8016b9a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016b9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016ba2:	4611      	mov	r1, r2
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7fd fd6b 	bl	8014680 <mg_uecc_vli_numBits>
 8016baa:	4603      	mov	r3, r0
 8016bac:	461c      	mov	r4, r3
 8016bae:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016bb2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fd fd61 	bl	8014680 <mg_uecc_vli_numBits>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	4619      	mov	r1, r3
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	f7ff fe40 	bl	8016848 <smax>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8016bce:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8016bd2:	3b01      	subs	r3, #1
 8016bd4:	b29b      	uxth	r3, r3
 8016bd6:	b21a      	sxth	r2, r3
 8016bd8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016bdc:	4611      	mov	r1, r2
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7fd fd0e 	bl	8014600 <mg_uecc_vli_testBit>
 8016be4:	4603      	mov	r3, r0
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	bf14      	ite	ne
 8016bea:	2301      	movne	r3, #1
 8016bec:	2300      	moveq	r3, #0
 8016bee:	b2db      	uxtb	r3, r3
 8016bf0:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8016bf2:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8016bf6:	3b01      	subs	r3, #1
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	b21a      	sxth	r2, r3
 8016bfc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016c00:	4611      	mov	r1, r2
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fd fcfc 	bl	8014600 <mg_uecc_vli_testBit>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d001      	beq.n	8016c12 <mg_uecc_verify+0x39e>
 8016c0e:	2302      	movs	r3, #2
 8016c10:	e000      	b.n	8016c14 <mg_uecc_verify+0x3a0>
 8016c12:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8016c14:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8016c18:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016c1c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c24:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8016c28:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016c2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016c30:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7fd fd5b 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 8016c3a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016c3e:	009b      	lsls	r3, r3, #2
 8016c40:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8016c44:	18d1      	adds	r1, r2, r3
 8016c46:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016c4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7fd fd4e 	bl	80146f0 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 8016c54:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016c58:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8016c5c:	4611      	mov	r1, r2
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7fd fc83 	bl	801456a <mg_uecc_vli_clear>
  z[0] = 1;
 8016c64:	2301      	movs	r3, #1
 8016c66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 8016c6a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8016c6e:	3b02      	subs	r3, #2
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8016c76:	e087      	b.n	8016d88 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8016c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c7c:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8016c80:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016c84:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8016c88:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016c8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c90:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8016c92:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8016c96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016c9a:	4611      	mov	r1, r2
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7fd fcaf 	bl	8014600 <mg_uecc_vli_testBit>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	bf14      	ite	ne
 8016ca8:	2301      	movne	r3, #1
 8016caa:	2300      	moveq	r3, #0
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8016cb0:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8016cb4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016cb8:	4611      	mov	r1, r2
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7fd fca0 	bl	8014600 <mg_uecc_vli_testBit>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d001      	beq.n	8016cca <mg_uecc_verify+0x456>
 8016cc6:	2302      	movs	r3, #2
 8016cc8:	e000      	b.n	8016ccc <mg_uecc_verify+0x458>
 8016cca:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8016ccc:	4323      	orrs	r3, r4
 8016cce:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8016cd2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016cd6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016cda:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ce2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 8016ce6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d046      	beq.n	8016d7c <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8016cee:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016cf2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8016cf6:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7fd fcf8 	bl	80146f0 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8016d00:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016d04:	009b      	lsls	r3, r3, #2
 8016d06:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8016d0a:	18d1      	adds	r1, r2, r3
 8016d0c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016d10:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7fd fceb 	bl	80146f0 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 8016d1a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016d1e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016d22:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016d26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016d2a:	f7fe fd6b 	bl	8015804 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8016d2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016d32:	1d1c      	adds	r4, r3, #4
 8016d34:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8016d38:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016d3c:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8016d40:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016d44:	9300      	str	r3, [sp, #0]
 8016d46:	4623      	mov	r3, r4
 8016d48:	f7fd ff87 	bl	8014c5a <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 8016d4c:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8016d50:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8016d54:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016d58:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	4623      	mov	r3, r4
 8016d64:	f7fe fdc0 	bl	80158e8 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 8016d68:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8016d6c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016d70:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016d74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016d78:	f7fe f8e3 	bl	8014f42 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8016d7c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8016d80:	3b01      	subs	r3, #1
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8016d88:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	f6bf af73 	bge.w	8016c78 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8016d92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016d96:	1d1a      	adds	r2, r3, #4
 8016d98:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016d9c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016da0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016da4:	f7fe f931 	bl	801500a <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8016da8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016dac:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8016db0:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016db8:	f7fe fd24 	bl	8015804 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8016dbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016dc0:	3324      	adds	r3, #36	@ 0x24
 8016dc2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016dc6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7fd fcb7 	bl	801473e <mg_uecc_vli_cmp_unsafe>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b01      	cmp	r3, #1
 8016dd4:	d00b      	beq.n	8016dee <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8016dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016dda:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016dde:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016de2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016de6:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016dea:	f7fd fdbb 	bl	8014964 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8016dee:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016df2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8016df6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f7fd fcdb 	bl	80147b6 <mg_uecc_vli_equal>
 8016e00:	4603      	mov	r3, r0
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd90      	pop	{r4, r7, pc}

08016e0c <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 8016e0c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016e10:	b08f      	sub	sp, #60	@ 0x3c
 8016e12:	af00      	add	r7, sp, #0
 8016e14:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016e16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016e18:	627a      	str	r2, [r7, #36]	@ 0x24
 8016e1a:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 8016e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e1e:	2200      	movs	r2, #0
 8016e20:	469a      	mov	sl, r3
 8016e22:	4693      	mov	fp, r2
 8016e24:	6a3b      	ldr	r3, [r7, #32]
 8016e26:	2200      	movs	r2, #0
 8016e28:	61bb      	str	r3, [r7, #24]
 8016e2a:	61fa      	str	r2, [r7, #28]
 8016e2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016e30:	4603      	mov	r3, r0
 8016e32:	fb03 f20b 	mul.w	r2, r3, fp
 8016e36:	460b      	mov	r3, r1
 8016e38:	fb0a f303 	mul.w	r3, sl, r3
 8016e3c:	4413      	add	r3, r2
 8016e3e:	4602      	mov	r2, r0
 8016e40:	fbaa 4502 	umull	r4, r5, sl, r2
 8016e44:	442b      	add	r3, r5
 8016e46:	461d      	mov	r5, r3
 8016e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	613b      	str	r3, [r7, #16]
 8016e4e:	617a      	str	r2, [r7, #20]
 8016e50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016e54:	460b      	mov	r3, r1
 8016e56:	eb14 0803 	adds.w	r8, r4, r3
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	eb45 0903 	adc.w	r9, r5, r3
 8016e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2200      	movs	r2, #0
 8016e66:	60bb      	str	r3, [r7, #8]
 8016e68:	60fa      	str	r2, [r7, #12]
 8016e6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016e6e:	460b      	mov	r3, r1
 8016e70:	eb18 0303 	adds.w	r3, r8, r3
 8016e74:	603b      	str	r3, [r7, #0]
 8016e76:	4613      	mov	r3, r2
 8016e78:	eb49 0303 	adc.w	r3, r9, r3
 8016e7c:	607b      	str	r3, [r7, #4]
 8016e7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016e82:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 8016e86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8016e8a:	f04f 0200 	mov.w	r2, #0
 8016e8e:	f04f 0300 	mov.w	r3, #0
 8016e92:	000a      	movs	r2, r1
 8016e94:	2300      	movs	r3, #0
 8016e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e98:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 8016e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	373c      	adds	r7, #60	@ 0x3c
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016ea6:	4770      	bx	lr

08016ea8 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8016ea8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016eac:	b08b      	sub	sp, #44	@ 0x2c
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	61f8      	str	r0, [r7, #28]
 8016eb2:	61b9      	str	r1, [r7, #24]
 8016eb4:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8016eb6:	69fb      	ldr	r3, [r7, #28]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	60bb      	str	r3, [r7, #8]
 8016ebe:	60fa      	str	r2, [r7, #12]
 8016ec0:	69bb      	ldr	r3, [r7, #24]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	469a      	mov	sl, r3
 8016ec6:	4693      	mov	fp, r2
 8016ec8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016ecc:	460b      	mov	r3, r1
 8016ece:	eb13 040a 	adds.w	r4, r3, sl
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	eb43 050b 	adc.w	r5, r3, fp
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	2200      	movs	r2, #0
 8016edc:	4698      	mov	r8, r3
 8016ede:	4691      	mov	r9, r2
 8016ee0:	eb14 0308 	adds.w	r3, r4, r8
 8016ee4:	603b      	str	r3, [r7, #0]
 8016ee6:	eb45 0309 	adc.w	r3, r5, r9
 8016eea:	607b      	str	r3, [r7, #4]
 8016eec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016ef0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8016ef4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016ef8:	f04f 0200 	mov.w	r2, #0
 8016efc:	f04f 0300 	mov.w	r3, #0
 8016f00:	000a      	movs	r2, r1
 8016f02:	2300      	movs	r3, #0
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8016f08:	6a3b      	ldr	r3, [r7, #32]
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	372c      	adds	r7, #44	@ 0x2c
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016f14:	4770      	bx	lr

08016f16 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 8016f16:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 8016f22:	6879      	ldr	r1, [r7, #4]
 8016f24:	6809      	ldr	r1, [r1, #0]
 8016f26:	2000      	movs	r0, #0
 8016f28:	460c      	mov	r4, r1
 8016f2a:	4605      	mov	r5, r0
 8016f2c:	6839      	ldr	r1, [r7, #0]
 8016f2e:	2000      	movs	r0, #0
 8016f30:	460a      	mov	r2, r1
 8016f32:	4603      	mov	r3, r0
 8016f34:	eb14 0802 	adds.w	r8, r4, r2
 8016f38:	eb45 0903 	adc.w	r9, r5, r3
 8016f3c:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 8016f40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016f44:	f04f 0200 	mov.w	r2, #0
 8016f48:	f04f 0300 	mov.w	r3, #0
 8016f4c:	000a      	movs	r2, r1
 8016f4e:	2300      	movs	r3, #0
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8016f54:	68bb      	ldr	r3, [r7, #8]
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	3714      	adds	r7, #20
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8016f60:	4770      	bx	lr

08016f62 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 8016f62:	b590      	push	{r4, r7, lr}
 8016f64:	b085      	sub	sp, #20
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	6078      	str	r0, [r7, #4]
 8016f6a:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	331c      	adds	r3, #28
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	0fda      	lsrs	r2, r3, #31
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	005b      	lsls	r3, r3, #1
 8016f78:	4313      	orrs	r3, r2
 8016f7a:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	331c      	adds	r3, #28
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	331c      	adds	r3, #28
 8016f86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8016f8a:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8016f8c:	683a      	ldr	r2, [r7, #0]
 8016f8e:	4613      	mov	r3, r2
 8016f90:	00db      	lsls	r3, r3, #3
 8016f92:	4413      	add	r3, r2
 8016f94:	005b      	lsls	r3, r3, #1
 8016f96:	4413      	add	r3, r2
 8016f98:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	60fb      	str	r3, [r7, #12]
 8016f9e:	e012      	b.n	8016fc6 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	009b      	lsls	r3, r3, #2
 8016fa4:	687a      	ldr	r2, [r7, #4]
 8016fa6:	4413      	add	r3, r2
 8016fa8:	6819      	ldr	r1, [r3, #0]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	009b      	lsls	r3, r3, #2
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	18d4      	adds	r4, r2, r3
 8016fb2:	f107 0308 	add.w	r3, r7, #8
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7ff ffad 	bl	8016f16 <adc0>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	60fb      	str	r3, [r7, #12]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	2b07      	cmp	r3, #7
 8016fca:	d9e9      	bls.n	8016fa0 <propagate+0x3e>
  }
}
 8016fcc:	bf00      	nop
 8016fce:	bf00      	nop
 8016fd0:	3714      	adds	r7, #20
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bd90      	pop	{r4, r7, pc}

08016fd6 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 8016fd6:	b590      	push	{r4, r7, lr}
 8016fd8:	b087      	sub	sp, #28
 8016fda:	af00      	add	r7, sp, #0
 8016fdc:	60f8      	str	r0, [r7, #12]
 8016fde:	60b9      	str	r1, [r7, #8]
 8016fe0:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	617b      	str	r3, [r7, #20]
 8016fea:	e018      	b.n	801701e <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8016fec:	697b      	ldr	r3, [r7, #20]
 8016fee:	009b      	lsls	r3, r3, #2
 8016ff0:	68ba      	ldr	r2, [r7, #8]
 8016ff2:	4413      	add	r3, r2
 8016ff4:	6819      	ldr	r1, [r3, #0]
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	009b      	lsls	r3, r3, #2
 8016ffa:	687a      	ldr	r2, [r7, #4]
 8016ffc:	4413      	add	r3, r2
 8016ffe:	6818      	ldr	r0, [r3, #0]
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	009b      	lsls	r3, r3, #2
 8017004:	68fa      	ldr	r2, [r7, #12]
 8017006:	18d4      	adds	r4, r2, r3
 8017008:	f107 0310 	add.w	r3, r7, #16
 801700c:	4602      	mov	r2, r0
 801700e:	4618      	mov	r0, r3
 8017010:	f7ff ff4a 	bl	8016ea8 <adc>
 8017014:	4603      	mov	r3, r0
 8017016:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	3301      	adds	r3, #1
 801701c:	617b      	str	r3, [r7, #20]
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	2b07      	cmp	r3, #7
 8017022:	d9e3      	bls.n	8016fec <add+0x16>
  }
  propagate(out, carry);
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	4619      	mov	r1, r3
 8017028:	68f8      	ldr	r0, [r7, #12]
 801702a:	f7ff ff9a 	bl	8016f62 <propagate>
}
 801702e:	bf00      	nop
 8017030:	371c      	adds	r7, #28
 8017032:	46bd      	mov	sp, r7
 8017034:	bd90      	pop	{r4, r7, pc}

08017036 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 8017036:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801703a:	b08a      	sub	sp, #40	@ 0x28
 801703c:	af00      	add	r7, sp, #0
 801703e:	6178      	str	r0, [r7, #20]
 8017040:	6139      	str	r1, [r7, #16]
 8017042:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 8017044:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 8017048:	f04f 33ff 	mov.w	r3, #4294967295
 801704c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8017050:	2300      	movs	r3, #0
 8017052:	627b      	str	r3, [r7, #36]	@ 0x24
 8017054:	e032      	b.n	80170bc <sub+0x86>
    carry = carry + a[i] - b[i];
 8017056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017058:	009b      	lsls	r3, r3, #2
 801705a:	693a      	ldr	r2, [r7, #16]
 801705c:	4413      	add	r3, r2
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	2200      	movs	r2, #0
 8017062:	4698      	mov	r8, r3
 8017064:	4691      	mov	r9, r2
 8017066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801706a:	eb18 0402 	adds.w	r4, r8, r2
 801706e:	eb49 0503 	adc.w	r5, r9, r3
 8017072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017074:	009b      	lsls	r3, r3, #2
 8017076:	68fa      	ldr	r2, [r7, #12]
 8017078:	4413      	add	r3, r2
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	2200      	movs	r2, #0
 801707e:	469a      	mov	sl, r3
 8017080:	4693      	mov	fp, r2
 8017082:	ebb4 030a 	subs.w	r3, r4, sl
 8017086:	603b      	str	r3, [r7, #0]
 8017088:	eb65 030b 	sbc.w	r3, r5, fp
 801708c:	607b      	str	r3, [r7, #4]
 801708e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017092:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8017096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017098:	009b      	lsls	r3, r3, #2
 801709a:	697a      	ldr	r2, [r7, #20]
 801709c:	4413      	add	r3, r2
 801709e:	69ba      	ldr	r2, [r7, #24]
 80170a0:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 80170a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80170a6:	f04f 0200 	mov.w	r2, #0
 80170aa:	f04f 0300 	mov.w	r3, #0
 80170ae:	000a      	movs	r2, r1
 80170b0:	17cb      	asrs	r3, r1, #31
 80170b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80170b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b8:	3301      	adds	r3, #1
 80170ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80170bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170be:	2b07      	cmp	r3, #7
 80170c0:	d9c9      	bls.n	8017056 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	3301      	adds	r3, #1
 80170c6:	4619      	mov	r1, r3
 80170c8:	6978      	ldr	r0, [r7, #20]
 80170ca:	f7ff ff4a 	bl	8016f62 <propagate>
}
 80170ce:	bf00      	nop
 80170d0:	3728      	adds	r7, #40	@ 0x28
 80170d2:	46bd      	mov	sp, r7
 80170d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080170d8 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 80170d8:	b5b0      	push	{r4, r5, r7, lr}
 80170da:	b09a      	sub	sp, #104	@ 0x68
 80170dc:	af00      	add	r7, sp, #0
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	60b9      	str	r1, [r7, #8]
 80170e2:	607a      	str	r2, [r7, #4]
 80170e4:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 80170e6:	f107 031c 	add.w	r3, r7, #28
 80170ea:	2240      	movs	r2, #64	@ 0x40
 80170ec:	2100      	movs	r1, #0
 80170ee:	4618      	mov	r0, r3
 80170f0:	f00d feb4 	bl	8024e5c <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 80170f4:	2300      	movs	r3, #0
 80170f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80170f8:	e03a      	b.n	8017170 <mul+0x98>
    limb_t mand = b[i];
 80170fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80170fc:	009b      	lsls	r3, r3, #2
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	4413      	add	r3, r2
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 8017106:	2300      	movs	r3, #0
 8017108:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 801710a:	2300      	movs	r3, #0
 801710c:	663b      	str	r3, [r7, #96]	@ 0x60
 801710e:	e020      	b.n	8017152 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 8017110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017112:	009b      	lsls	r3, r3, #2
 8017114:	68ba      	ldr	r2, [r7, #8]
 8017116:	4413      	add	r3, r2
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 801711c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801711e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017120:	4413      	add	r3, r2
 8017122:	009b      	lsls	r3, r3, #2
 8017124:	3368      	adds	r3, #104	@ 0x68
 8017126:	443b      	add	r3, r7
 8017128:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801712c:	697d      	ldr	r5, [r7, #20]
 801712e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017132:	18d4      	adds	r4, r2, r3
 8017134:	f107 0018 	add.w	r0, r7, #24
 8017138:	462b      	mov	r3, r5
 801713a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801713c:	f7ff fe66 	bl	8016e0c <umaal>
 8017140:	4602      	mov	r2, r0
 8017142:	00a3      	lsls	r3, r4, #2
 8017144:	3368      	adds	r3, #104	@ 0x68
 8017146:	443b      	add	r3, r7
 8017148:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 801714c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801714e:	3301      	adds	r3, #1
 8017150:	663b      	str	r3, [r7, #96]	@ 0x60
 8017152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017154:	2b07      	cmp	r3, #7
 8017156:	d9db      	bls.n	8017110 <mul+0x38>
    }
    accum[i + j] = carry2;
 8017158:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801715a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801715c:	4413      	add	r3, r2
 801715e:	69ba      	ldr	r2, [r7, #24]
 8017160:	009b      	lsls	r3, r3, #2
 8017162:	3368      	adds	r3, #104	@ 0x68
 8017164:	443b      	add	r3, r7
 8017166:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 801716a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801716c:	3301      	adds	r3, #1
 801716e:	667b      	str	r3, [r7, #100]	@ 0x64
 8017170:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	429a      	cmp	r2, r3
 8017176:	d3c0      	bcc.n	80170fa <mul+0x22>
  }

  carry2 = 0;
 8017178:	2300      	movs	r3, #0
 801717a:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 801717c:	2300      	movs	r3, #0
 801717e:	663b      	str	r3, [r7, #96]	@ 0x60
 8017180:	e01b      	b.n	80171ba <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 8017182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017184:	009b      	lsls	r3, r3, #2
 8017186:	3368      	adds	r3, #104	@ 0x68
 8017188:	443b      	add	r3, r7
 801718a:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801718e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017190:	3308      	adds	r3, #8
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	3368      	adds	r3, #104	@ 0x68
 8017196:	443b      	add	r3, r7
 8017198:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 801719c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801719e:	009b      	lsls	r3, r3, #2
 80171a0:	68fa      	ldr	r2, [r7, #12]
 80171a2:	18d4      	adds	r4, r2, r3
 80171a4:	f107 0018 	add.w	r0, r7, #24
 80171a8:	462b      	mov	r3, r5
 80171aa:	2226      	movs	r2, #38	@ 0x26
 80171ac:	f7ff fe2e 	bl	8016e0c <umaal>
 80171b0:	4603      	mov	r3, r0
 80171b2:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 80171b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80171b6:	3301      	adds	r3, #1
 80171b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80171ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80171bc:	2b07      	cmp	r3, #7
 80171be:	d9e0      	bls.n	8017182 <mul+0xaa>
  }
  propagate(out, carry2);
 80171c0:	69bb      	ldr	r3, [r7, #24]
 80171c2:	4619      	mov	r1, r3
 80171c4:	68f8      	ldr	r0, [r7, #12]
 80171c6:	f7ff fecc 	bl	8016f62 <propagate>
}
 80171ca:	bf00      	nop
 80171cc:	3768      	adds	r7, #104	@ 0x68
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bdb0      	pop	{r4, r5, r7, pc}

080171d2 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 80171d2:	b580      	push	{r7, lr}
 80171d4:	b082      	sub	sp, #8
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
 80171da:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 80171dc:	2308      	movs	r3, #8
 80171de:	683a      	ldr	r2, [r7, #0]
 80171e0:	6839      	ldr	r1, [r7, #0]
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f7ff ff78 	bl	80170d8 <mul>
}
 80171e8:	bf00      	nop
 80171ea:	3708      	adds	r7, #8
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}

080171f0 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 80171fa:	2308      	movs	r3, #8
 80171fc:	687a      	ldr	r2, [r7, #4]
 80171fe:	6839      	ldr	r1, [r7, #0]
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f7ff ff69 	bl	80170d8 <mul>
}
 8017206:	bf00      	nop
 8017208:	3708      	adds	r7, #8
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}

0801720e <sqr1>:
static void sqr1(mg_fe a) {
 801720e:	b580      	push	{r7, lr}
 8017210:	b082      	sub	sp, #8
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 8017216:	6879      	ldr	r1, [r7, #4]
 8017218:	6878      	ldr	r0, [r7, #4]
 801721a:	f7ff ffe9 	bl	80171f0 <mul1>
}
 801721e:	bf00      	nop
 8017220:	3708      	adds	r7, #8
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}

08017226 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 8017226:	b480      	push	{r7}
 8017228:	b087      	sub	sp, #28
 801722a:	af00      	add	r7, sp, #0
 801722c:	60f8      	str	r0, [r7, #12]
 801722e:	60b9      	str	r1, [r7, #8]
 8017230:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 8017232:	2300      	movs	r3, #0
 8017234:	617b      	str	r3, [r7, #20]
 8017236:	e028      	b.n	801728a <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	009b      	lsls	r3, r3, #2
 801723c:	68fa      	ldr	r2, [r7, #12]
 801723e:	4413      	add	r3, r2
 8017240:	681a      	ldr	r2, [r3, #0]
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	009b      	lsls	r3, r3, #2
 8017246:	68b9      	ldr	r1, [r7, #8]
 8017248:	440b      	add	r3, r1
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	4053      	eors	r3, r2
 801724e:	687a      	ldr	r2, [r7, #4]
 8017250:	4013      	ands	r3, r2
 8017252:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	009b      	lsls	r3, r3, #2
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	4413      	add	r3, r2
 801725c:	6819      	ldr	r1, [r3, #0]
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	009b      	lsls	r3, r3, #2
 8017262:	68fa      	ldr	r2, [r7, #12]
 8017264:	4413      	add	r3, r2
 8017266:	693a      	ldr	r2, [r7, #16]
 8017268:	404a      	eors	r2, r1
 801726a:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	68ba      	ldr	r2, [r7, #8]
 8017272:	4413      	add	r3, r2
 8017274:	6819      	ldr	r1, [r3, #0]
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	009b      	lsls	r3, r3, #2
 801727a:	68ba      	ldr	r2, [r7, #8]
 801727c:	4413      	add	r3, r2
 801727e:	693a      	ldr	r2, [r7, #16]
 8017280:	404a      	eors	r2, r1
 8017282:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	3301      	adds	r3, #1
 8017288:	617b      	str	r3, [r7, #20]
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	2b0f      	cmp	r3, #15
 801728e:	d9d3      	bls.n	8017238 <condswap+0x12>
  }
}
 8017290:	bf00      	nop
 8017292:	bf00      	nop
 8017294:	371c      	adds	r7, #28
 8017296:	46bd      	mov	sp, r7
 8017298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729c:	4770      	bx	lr

0801729e <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 801729e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a2:	b08b      	sub	sp, #44	@ 0x2c
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 80172a8:	2313      	movs	r3, #19
 80172aa:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 80172ac:	2300      	movs	r3, #0
 80172ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80172b0:	e012      	b.n	80172d8 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 80172b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172b4:	009b      	lsls	r3, r3, #2
 80172b6:	68fa      	ldr	r2, [r7, #12]
 80172b8:	4413      	add	r3, r2
 80172ba:	6819      	ldr	r1, [r3, #0]
 80172bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172be:	009b      	lsls	r3, r3, #2
 80172c0:	68fa      	ldr	r2, [r7, #12]
 80172c2:	18d6      	adds	r6, r2, r3
 80172c4:	f107 0314 	add.w	r3, r7, #20
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7ff fe24 	bl	8016f16 <adc0>
 80172ce:	4603      	mov	r3, r0
 80172d0:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 80172d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d4:	3301      	adds	r3, #1
 80172d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80172d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172da:	2b07      	cmp	r3, #7
 80172dc:	d9e9      	bls.n	80172b2 <canon+0x14>
  }
  propagate(x, carry0);
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	4619      	mov	r1, r3
 80172e2:	68f8      	ldr	r0, [r7, #12]
 80172e4:	f7ff fe3d 	bl	8016f62 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 80172e8:	f06f 0212 	mvn.w	r2, #18
 80172ec:	f04f 33ff 	mov.w	r3, #4294967295
 80172f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 80172f4:	2300      	movs	r3, #0
 80172f6:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 80172f8:	2300      	movs	r3, #0
 80172fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80172fc:	e02a      	b.n	8017354 <canon+0xb6>
    carry += x[i];
 80172fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017300:	009b      	lsls	r3, r3, #2
 8017302:	68fa      	ldr	r2, [r7, #12]
 8017304:	4413      	add	r3, r2
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	2200      	movs	r2, #0
 801730a:	4698      	mov	r8, r3
 801730c:	4691      	mov	r9, r2
 801730e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017312:	eb12 0108 	adds.w	r1, r2, r8
 8017316:	6039      	str	r1, [r7, #0]
 8017318:	eb43 0309 	adc.w	r3, r3, r9
 801731c:	607b      	str	r3, [r7, #4]
 801731e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017322:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 8017326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017328:	009b      	lsls	r3, r3, #2
 801732a:	68fa      	ldr	r2, [r7, #12]
 801732c:	4413      	add	r3, r2
 801732e:	69ba      	ldr	r2, [r7, #24]
 8017330:	601a      	str	r2, [r3, #0]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	6a3a      	ldr	r2, [r7, #32]
 8017336:	4313      	orrs	r3, r2
 8017338:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 801733a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801733e:	f04f 0200 	mov.w	r2, #0
 8017342:	f04f 0300 	mov.w	r3, #0
 8017346:	000a      	movs	r2, r1
 8017348:	17cb      	asrs	r3, r1, #31
 801734a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017350:	3301      	adds	r3, #1
 8017352:	627b      	str	r3, [r7, #36]	@ 0x24
 8017354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017356:	2b07      	cmp	r3, #7
 8017358:	d9d1      	bls.n	80172fe <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 801735a:	6a3b      	ldr	r3, [r7, #32]
 801735c:	2200      	movs	r2, #0
 801735e:	461c      	mov	r4, r3
 8017360:	4615      	mov	r5, r2
 8017362:	f114 3aff 	adds.w	sl, r4, #4294967295
 8017366:	f145 3bff 	adc.w	fp, r5, #4294967295
 801736a:	f04f 0200 	mov.w	r2, #0
 801736e:	f04f 0300 	mov.w	r3, #0
 8017372:	465a      	mov	r2, fp
 8017374:	2300      	movs	r3, #0
 8017376:	4613      	mov	r3, r2
}
 8017378:	4618      	mov	r0, r3
 801737a:	372c      	adds	r7, #44	@ 0x2c
 801737c:	46bd      	mov	sp, r7
 801737e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017384 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8017384:	b580      	push	{r7, lr}
 8017386:	b088      	sub	sp, #32
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	61fb      	str	r3, [r7, #28]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	3320      	adds	r3, #32
 8017394:	61bb      	str	r3, [r7, #24]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	3340      	adds	r3, #64	@ 0x40
 801739a:	617b      	str	r3, [r7, #20]
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	3360      	adds	r3, #96	@ 0x60
 80173a0:	613b      	str	r3, [r7, #16]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	3380      	adds	r3, #128	@ 0x80
 80173a6:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 80173a8:	69ba      	ldr	r2, [r7, #24]
 80173aa:	69f9      	ldr	r1, [r7, #28]
 80173ac:	68f8      	ldr	r0, [r7, #12]
 80173ae:	f7ff fe12 	bl	8016fd6 <add>
  sub(z2, x2, z2);                                 // z2 = B
 80173b2:	69ba      	ldr	r2, [r7, #24]
 80173b4:	69f9      	ldr	r1, [r7, #28]
 80173b6:	69b8      	ldr	r0, [r7, #24]
 80173b8:	f7ff fe3d 	bl	8017036 <sub>
  add(x2, x3, z3);                                 // x2 = C
 80173bc:	693a      	ldr	r2, [r7, #16]
 80173be:	6979      	ldr	r1, [r7, #20]
 80173c0:	69f8      	ldr	r0, [r7, #28]
 80173c2:	f7ff fe08 	bl	8016fd6 <add>
  sub(z3, x3, z3);                                 // z3 = D
 80173c6:	693a      	ldr	r2, [r7, #16]
 80173c8:	6979      	ldr	r1, [r7, #20]
 80173ca:	6938      	ldr	r0, [r7, #16]
 80173cc:	f7ff fe33 	bl	8017036 <sub>
  mul1(z3, t1);                                    // z3 = DA
 80173d0:	68f9      	ldr	r1, [r7, #12]
 80173d2:	6938      	ldr	r0, [r7, #16]
 80173d4:	f7ff ff0c 	bl	80171f0 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 80173d8:	69b9      	ldr	r1, [r7, #24]
 80173da:	69f8      	ldr	r0, [r7, #28]
 80173dc:	f7ff ff08 	bl	80171f0 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 80173e0:	69fa      	ldr	r2, [r7, #28]
 80173e2:	6939      	ldr	r1, [r7, #16]
 80173e4:	6978      	ldr	r0, [r7, #20]
 80173e6:	f7ff fdf6 	bl	8016fd6 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 80173ea:	69fa      	ldr	r2, [r7, #28]
 80173ec:	6939      	ldr	r1, [r7, #16]
 80173ee:	6938      	ldr	r0, [r7, #16]
 80173f0:	f7ff fe21 	bl	8017036 <sub>
  sqr1(t1);                                        // t1 = AA
 80173f4:	68f8      	ldr	r0, [r7, #12]
 80173f6:	f7ff ff0a 	bl	801720e <sqr1>
  sqr1(z2);                                        // z2 = BB
 80173fa:	69b8      	ldr	r0, [r7, #24]
 80173fc:	f7ff ff07 	bl	801720e <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 8017400:	69ba      	ldr	r2, [r7, #24]
 8017402:	68f9      	ldr	r1, [r7, #12]
 8017404:	69f8      	ldr	r0, [r7, #28]
 8017406:	f7ff fe16 	bl	8017036 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 801740a:	2301      	movs	r3, #1
 801740c:	4a06      	ldr	r2, [pc, #24]	@ (8017428 <ladder_part1+0xa4>)
 801740e:	69f9      	ldr	r1, [r7, #28]
 8017410:	69b8      	ldr	r0, [r7, #24]
 8017412:	f7ff fe61 	bl	80170d8 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 8017416:	68fa      	ldr	r2, [r7, #12]
 8017418:	69b9      	ldr	r1, [r7, #24]
 801741a:	69b8      	ldr	r0, [r7, #24]
 801741c:	f7ff fddb 	bl	8016fd6 <add>
}
 8017420:	bf00      	nop
 8017422:	3720      	adds	r7, #32
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	0802c028 	.word	0x0802c028

0801742c <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 801742c:	b580      	push	{r7, lr}
 801742e:	b088      	sub	sp, #32
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	61fb      	str	r3, [r7, #28]
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	3320      	adds	r3, #32
 801743e:	61bb      	str	r3, [r7, #24]
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	3340      	adds	r3, #64	@ 0x40
 8017444:	617b      	str	r3, [r7, #20]
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	3360      	adds	r3, #96	@ 0x60
 801744a:	613b      	str	r3, [r7, #16]
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	3380      	adds	r3, #128	@ 0x80
 8017450:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 8017452:	6938      	ldr	r0, [r7, #16]
 8017454:	f7ff fedb 	bl	801720e <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8017458:	6839      	ldr	r1, [r7, #0]
 801745a:	6938      	ldr	r0, [r7, #16]
 801745c:	f7ff fec8 	bl	80171f0 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8017460:	6978      	ldr	r0, [r7, #20]
 8017462:	f7ff fed4 	bl	801720e <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 8017466:	69f9      	ldr	r1, [r7, #28]
 8017468:	69b8      	ldr	r0, [r7, #24]
 801746a:	f7ff fec1 	bl	80171f0 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 801746e:	69fa      	ldr	r2, [r7, #28]
 8017470:	68f9      	ldr	r1, [r7, #12]
 8017472:	69f8      	ldr	r0, [r7, #28]
 8017474:	f7ff fddf 	bl	8017036 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8017478:	68f9      	ldr	r1, [r7, #12]
 801747a:	69f8      	ldr	r0, [r7, #28]
 801747c:	f7ff feb8 	bl	80171f0 <mul1>
}
 8017480:	bf00      	nop
 8017482:	3720      	adds	r7, #32
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8017488:	b580      	push	{r7, lr}
 801748a:	b094      	sub	sp, #80	@ 0x50
 801748c:	af00      	add	r7, sp, #0
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	60b9      	str	r1, [r7, #8]
 8017492:	607a      	str	r2, [r7, #4]
 8017494:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8017496:	2300      	movs	r3, #0
 8017498:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	643b      	str	r3, [r7, #64]	@ 0x40
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	3340      	adds	r3, #64	@ 0x40
 80174a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	3360      	adds	r3, #96	@ 0x60
 80174a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 80174aa:	2280      	movs	r2, #128	@ 0x80
 80174ac:	2100      	movs	r1, #0
 80174ae:	68f8      	ldr	r0, [r7, #12]
 80174b0:	f00d fcd4 	bl	8024e5c <memset>
  x2[0] = z3[0] = 1;
 80174b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174b6:	2201      	movs	r2, #1
 80174b8:	601a      	str	r2, [r3, #0]
 80174ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174bc:	681a      	ldr	r2, [r3, #0]
 80174be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80174c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 80174c2:	2300      	movs	r3, #0
 80174c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80174c6:	e031      	b.n	801752c <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 80174c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174ca:	009b      	lsls	r3, r3, #2
 80174cc:	3303      	adds	r3, #3
 80174ce:	687a      	ldr	r2, [r7, #4]
 80174d0:	4413      	add	r3, r2
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	061a      	lsls	r2, r3, #24
 80174d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174d8:	009b      	lsls	r3, r3, #2
 80174da:	3302      	adds	r3, #2
 80174dc:	6879      	ldr	r1, [r7, #4]
 80174de:	440b      	add	r3, r1
 80174e0:	781b      	ldrb	r3, [r3, #0]
 80174e2:	041b      	lsls	r3, r3, #16
 80174e4:	431a      	orrs	r2, r3
 80174e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	3301      	adds	r3, #1
 80174ec:	6879      	ldr	r1, [r7, #4]
 80174ee:	440b      	add	r3, r1
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	021b      	lsls	r3, r3, #8
 80174f4:	4313      	orrs	r3, r2
 80174f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80174f8:	0092      	lsls	r2, r2, #2
 80174fa:	4611      	mov	r1, r2
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	440a      	add	r2, r1
 8017500:	7812      	ldrb	r2, [r2, #0]
 8017502:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 8017504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017506:	009b      	lsls	r3, r3, #2
 8017508:	3350      	adds	r3, #80	@ 0x50
 801750a:	443b      	add	r3, r7
 801750c:	f843 2c3c 	str.w	r2, [r3, #-60]
 8017510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017512:	009b      	lsls	r3, r3, #2
 8017514:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017516:	441a      	add	r2, r3
 8017518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801751a:	009b      	lsls	r3, r3, #2
 801751c:	3350      	adds	r3, #80	@ 0x50
 801751e:	443b      	add	r3, r7
 8017520:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017524:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 8017526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017528:	3301      	adds	r3, #1
 801752a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801752c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801752e:	2b07      	cmp	r3, #7
 8017530:	ddca      	ble.n	80174c8 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 8017532:	23ff      	movs	r3, #255	@ 0xff
 8017534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017536:	e049      	b.n	80175cc <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8017538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801753a:	2b00      	cmp	r3, #0
 801753c:	da00      	bge.n	8017540 <x25519_core+0xb8>
 801753e:	3307      	adds	r3, #7
 8017540:	10db      	asrs	r3, r3, #3
 8017542:	461a      	mov	r2, r3
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	4413      	add	r3, r2
 8017548:	781b      	ldrb	r3, [r3, #0]
 801754a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d01a      	beq.n	801758a <x25519_core+0x102>
      if (i / 8 == 0) {
 8017554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017556:	3307      	adds	r3, #7
 8017558:	2b0e      	cmp	r3, #14
 801755a:	d806      	bhi.n	801756a <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 801755c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017560:	f023 0307 	bic.w	r3, r3, #7
 8017564:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017568:	e00f      	b.n	801758a <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 801756a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801756c:	3bf8      	subs	r3, #248	@ 0xf8
 801756e:	2b07      	cmp	r3, #7
 8017570:	d80b      	bhi.n	801758a <x25519_core+0x102>
        bytei &= 0x7F;
 8017572:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801757a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 801757e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017586:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 801758a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801758e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017590:	f003 0307 	and.w	r3, r3, #7
 8017594:	fa42 f303 	asr.w	r3, r2, r3
 8017598:	f003 0301 	and.w	r3, r3, #1
 801759c:	425b      	negs	r3, r3
 801759e:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 80175a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80175a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175a4:	4053      	eors	r3, r2
 80175a6:	461a      	mov	r2, r3
 80175a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80175aa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80175ac:	f7ff fe3b 	bl	8017226 <condswap>
    swap = doswap;
 80175b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175b2:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f7ff fee5 	bl	8017384 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 80175ba:	f107 0314 	add.w	r3, r7, #20
 80175be:	4619      	mov	r1, r3
 80175c0:	68f8      	ldr	r0, [r7, #12]
 80175c2:	f7ff ff33 	bl	801742c <ladder_part2>
  for (i = 255; i >= 0; i--) {
 80175c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80175c8:	3b01      	subs	r3, #1
 80175ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80175cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	dab2      	bge.n	8017538 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 80175d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80175d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80175d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80175d8:	f7ff fe25 	bl	8017226 <condswap>
}
 80175dc:	bf00      	nop
 80175de:	3750      	adds	r7, #80	@ 0x50
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b0be      	sub	sp, #248	@ 0xf8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	60f8      	str	r0, [r7, #12]
 80175ec:	60b9      	str	r1, [r7, #8]
 80175ee:	607a      	str	r2, [r7, #4]
 80175f0:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 80175f2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	68b9      	ldr	r1, [r7, #8]
 80175fc:	f7ff ff44 	bl	8017488 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8017600:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017604:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8017608:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801760c:	3320      	adds	r3, #32
 801760e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 8017612:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017616:	3360      	adds	r3, #96	@ 0x60
 8017618:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 801761c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017620:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 8017624:	2300      	movs	r3, #0
 8017626:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801762a:	e043      	b.n	80176b4 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 801762c:	4952      	ldr	r1, [pc, #328]	@ (8017778 <mg_tls_x25519+0x194>)
 801762e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8017632:	4613      	mov	r3, r2
 8017634:	005b      	lsls	r3, r3, #1
 8017636:	4413      	add	r3, r2
 8017638:	440b      	add	r3, r1
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8017640:	015b      	lsls	r3, r3, #5
 8017642:	4413      	add	r3, r2
 8017644:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8017648:	494b      	ldr	r1, [pc, #300]	@ (8017778 <mg_tls_x25519+0x194>)
 801764a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801764e:	4613      	mov	r3, r2
 8017650:	005b      	lsls	r3, r3, #1
 8017652:	4413      	add	r3, r2
 8017654:	440b      	add	r3, r1
 8017656:	3302      	adds	r3, #2
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801765e:	e00e      	b.n	801767e <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8017660:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8017664:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8017668:	f7ff fdb3 	bl	80171d2 <sqr>
      prev = a;
 801766c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017670:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8017674:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017678:	3b01      	subs	r3, #1
 801767a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801767e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017682:	2b00      	cmp	r3, #0
 8017684:	dcec      	bgt.n	8017660 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8017686:	493c      	ldr	r1, [pc, #240]	@ (8017778 <mg_tls_x25519+0x194>)
 8017688:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801768c:	4613      	mov	r3, r2
 801768e:	005b      	lsls	r3, r3, #1
 8017690:	4413      	add	r3, r2
 8017692:	440b      	add	r3, r1
 8017694:	3301      	adds	r3, #1
 8017696:	781b      	ldrb	r3, [r3, #0]
 8017698:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801769c:	015b      	lsls	r3, r3, #5
 801769e:	4413      	add	r3, r2
 80176a0:	4619      	mov	r1, r3
 80176a2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80176a6:	f7ff fda3 	bl	80171f0 <mul1>
  for (i = 0; i < 13; i++) {
 80176aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80176ae:	3301      	adds	r3, #1
 80176b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80176b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80176b8:	2b0c      	cmp	r3, #12
 80176ba:	ddb7      	ble.n	801762c <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 80176bc:	f107 0014 	add.w	r0, r7, #20
 80176c0:	2308      	movs	r3, #8
 80176c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80176c6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80176ca:	f7ff fd05 	bl	80170d8 <mul>
  ret = (int) canon(out_limbs);
 80176ce:	f107 0314 	add.w	r3, r7, #20
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7ff fde3 	bl	801729e <canon>
 80176d8:	4603      	mov	r3, r0
 80176da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d102      	bne.n	80176ea <mg_tls_x25519+0x106>
 80176e4:	2300      	movs	r3, #0
 80176e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 80176ea:	2300      	movs	r3, #0
 80176ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80176f0:	e038      	b.n	8017764 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 80176f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	33f8      	adds	r3, #248	@ 0xf8
 80176fa:	443b      	add	r3, r7
 80176fc:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8017700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 8017704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017708:	009b      	lsls	r3, r3, #2
 801770a:	461a      	mov	r2, r3
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	4413      	add	r3, r2
 8017710:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8017714:	b2d2      	uxtb	r2, r2
 8017716:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8017718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801771c:	0a19      	lsrs	r1, r3, #8
 801771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017722:	009b      	lsls	r3, r3, #2
 8017724:	3301      	adds	r3, #1
 8017726:	68fa      	ldr	r2, [r7, #12]
 8017728:	4413      	add	r3, r2
 801772a:	b2ca      	uxtb	r2, r1
 801772c:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 801772e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017732:	0c19      	lsrs	r1, r3, #16
 8017734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017738:	009b      	lsls	r3, r3, #2
 801773a:	3302      	adds	r3, #2
 801773c:	68fa      	ldr	r2, [r7, #12]
 801773e:	4413      	add	r3, r2
 8017740:	b2ca      	uxtb	r2, r1
 8017742:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 8017744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017748:	0e19      	lsrs	r1, r3, #24
 801774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	3303      	adds	r3, #3
 8017752:	68fa      	ldr	r2, [r7, #12]
 8017754:	4413      	add	r3, r2
 8017756:	b2ca      	uxtb	r2, r1
 8017758:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801775e:	3301      	adds	r3, #1
 8017760:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8017764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017768:	2b07      	cmp	r3, #7
 801776a:	ddc2      	ble.n	80176f2 <mg_tls_x25519+0x10e>
  }
  return ret;
 801776c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8017770:	4618      	mov	r0, r3
 8017772:	37f8      	adds	r7, #248	@ 0xf8
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}
 8017778:	0802c360 	.word	0x0802c360

0801777c <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 801777c:	b580      	push	{r7, lr}
 801777e:	b082      	sub	sp, #8
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8017784:	2204      	movs	r2, #4
 8017786:	491b      	ldr	r1, [pc, #108]	@ (80177f4 <mg_url_is_ssl+0x78>)
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f00d fb7c 	bl	8024e86 <strncmp>
 801778e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8017790:	2b00      	cmp	r3, #0
 8017792:	d027      	beq.n	80177e4 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8017794:	2206      	movs	r2, #6
 8017796:	4918      	ldr	r1, [pc, #96]	@ (80177f8 <mg_url_is_ssl+0x7c>)
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f00d fb74 	bl	8024e86 <strncmp>
 801779e:	4603      	mov	r3, r0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d01f      	beq.n	80177e4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80177a4:	2206      	movs	r2, #6
 80177a6:	4915      	ldr	r1, [pc, #84]	@ (80177fc <mg_url_is_ssl+0x80>)
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f00d fb6c 	bl	8024e86 <strncmp>
 80177ae:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d017      	beq.n	80177e4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80177b4:	2204      	movs	r2, #4
 80177b6:	4912      	ldr	r1, [pc, #72]	@ (8017800 <mg_url_is_ssl+0x84>)
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f00d fb64 	bl	8024e86 <strncmp>
 80177be:	4603      	mov	r3, r0
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d00f      	beq.n	80177e4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80177c4:	2204      	movs	r2, #4
 80177c6:	490f      	ldr	r1, [pc, #60]	@ (8017804 <mg_url_is_ssl+0x88>)
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f00d fb5c 	bl	8024e86 <strncmp>
 80177ce:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d007      	beq.n	80177e4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80177d4:	2205      	movs	r2, #5
 80177d6:	490c      	ldr	r1, [pc, #48]	@ (8017808 <mg_url_is_ssl+0x8c>)
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f00d fb54 	bl	8024e86 <strncmp>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d101      	bne.n	80177e8 <mg_url_is_ssl+0x6c>
 80177e4:	2301      	movs	r3, #1
 80177e6:	e000      	b.n	80177ea <mg_url_is_ssl+0x6e>
 80177e8:	2300      	movs	r3, #0
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3708      	adds	r7, #8
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	bf00      	nop
 80177f4:	0802aecc 	.word	0x0802aecc
 80177f8:	0802aed4 	.word	0x0802aed4
 80177fc:	0802aedc 	.word	0x0802aedc
 8017800:	0802aee4 	.word	0x0802aee4
 8017804:	0802aeec 	.word	0x0802aeec
 8017808:	0802aef4 	.word	0x0802aef4

0801780c <urlparse>:

static struct url urlparse(const char *url) {
 801780c:	b5b0      	push	{r4, r5, r7, lr}
 801780e:	b08a      	sub	sp, #40	@ 0x28
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8017816:	f107 0308 	add.w	r3, r7, #8
 801781a:	221c      	movs	r2, #28
 801781c:	2100      	movs	r1, #0
 801781e:	4618      	mov	r0, r3
 8017820:	f00d fb1c 	bl	8024e5c <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8017824:	2300      	movs	r3, #0
 8017826:	627b      	str	r3, [r7, #36]	@ 0x24
 8017828:	e05b      	b.n	80178e2 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801782a:	683a      	ldr	r2, [r7, #0]
 801782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801782e:	4413      	add	r3, r2
 8017830:	781b      	ldrb	r3, [r3, #0]
 8017832:	2b2f      	cmp	r3, #47	@ 0x2f
 8017834:	d112      	bne.n	801785c <urlparse+0x50>
 8017836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017838:	2b00      	cmp	r3, #0
 801783a:	d00f      	beq.n	801785c <urlparse+0x50>
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d10c      	bne.n	801785c <urlparse+0x50>
 8017842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017844:	3b01      	subs	r3, #1
 8017846:	683a      	ldr	r2, [r7, #0]
 8017848:	4413      	add	r3, r2
 801784a:	781b      	ldrb	r3, [r3, #0]
 801784c:	2b2f      	cmp	r3, #47	@ 0x2f
 801784e:	d105      	bne.n	801785c <urlparse+0x50>
      u.host = i + 1;
 8017850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017852:	3301      	adds	r3, #1
 8017854:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8017856:	2300      	movs	r3, #0
 8017858:	61bb      	str	r3, [r7, #24]
 801785a:	e03f      	b.n	80178dc <urlparse+0xd0>
    } else if (url[i] == ']') {
 801785c:	683a      	ldr	r2, [r7, #0]
 801785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017860:	4413      	add	r3, r2
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	2b5d      	cmp	r3, #93	@ 0x5d
 8017866:	d102      	bne.n	801786e <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8017868:	2300      	movs	r3, #0
 801786a:	61bb      	str	r3, [r7, #24]
 801786c:	e036      	b.n	80178dc <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801786e:	683a      	ldr	r2, [r7, #0]
 8017870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017872:	4413      	add	r3, r2
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	2b3a      	cmp	r3, #58	@ 0x3a
 8017878:	d109      	bne.n	801788e <urlparse+0x82>
 801787a:	69bb      	ldr	r3, [r7, #24]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d106      	bne.n	801788e <urlparse+0x82>
 8017880:	69fb      	ldr	r3, [r7, #28]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d103      	bne.n	801788e <urlparse+0x82>
      u.port = i + 1;
 8017886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017888:	3301      	adds	r3, #1
 801788a:	61bb      	str	r3, [r7, #24]
 801788c:	e026      	b.n	80178dc <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801788e:	683a      	ldr	r2, [r7, #0]
 8017890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017892:	4413      	add	r3, r2
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	2b40      	cmp	r3, #64	@ 0x40
 8017898:	d112      	bne.n	80178c0 <urlparse+0xb4>
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d10f      	bne.n	80178c0 <urlparse+0xb4>
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d10c      	bne.n	80178c0 <urlparse+0xb4>
 80178a6:	69fb      	ldr	r3, [r7, #28]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d109      	bne.n	80178c0 <urlparse+0xb4>
      u.user = u.host;
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80178b0:	69bb      	ldr	r3, [r7, #24]
 80178b2:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80178b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178b6:	3301      	adds	r3, #1
 80178b8:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80178ba:	2300      	movs	r3, #0
 80178bc:	61bb      	str	r3, [r7, #24]
 80178be:	e00d      	b.n	80178dc <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80178c0:	683a      	ldr	r2, [r7, #0]
 80178c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c4:	4413      	add	r3, r2
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80178ca:	d107      	bne.n	80178dc <urlparse+0xd0>
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d004      	beq.n	80178dc <urlparse+0xd0>
 80178d2:	69fb      	ldr	r3, [r7, #28]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d101      	bne.n	80178dc <urlparse+0xd0>
      u.uri = i;
 80178d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178da:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80178dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178de:	3301      	adds	r3, #1
 80178e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80178e2:	683a      	ldr	r2, [r7, #0]
 80178e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178e6:	4413      	add	r3, r2
 80178e8:	781b      	ldrb	r3, [r3, #0]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d19d      	bne.n	801782a <urlparse+0x1e>
    }
  }
  u.end = i;
 80178ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178f0:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	461d      	mov	r5, r3
 80178f6:	f107 0408 	add.w	r4, r7, #8
 80178fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017902:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8017906:	6878      	ldr	r0, [r7, #4]
 8017908:	3728      	adds	r7, #40	@ 0x28
 801790a:	46bd      	mov	sp, r7
 801790c:	bdb0      	pop	{r4, r5, r7, pc}

0801790e <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 801790e:	b580      	push	{r7, lr}
 8017910:	b08c      	sub	sp, #48	@ 0x30
 8017912:	af00      	add	r7, sp, #0
 8017914:	6078      	str	r0, [r7, #4]
 8017916:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8017918:	f107 0310 	add.w	r3, r7, #16
 801791c:	6839      	ldr	r1, [r7, #0]
 801791e:	4618      	mov	r0, r3
 8017920:	f7ff ff74 	bl	801780c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8017924:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8017926:	2b00      	cmp	r3, #0
 8017928:	d004      	beq.n	8017934 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 801792a:	6a3a      	ldr	r2, [r7, #32]
 801792c:	69fb      	ldr	r3, [r7, #28]
 801792e:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8017930:	3b01      	subs	r3, #1
 8017932:	e009      	b.n	8017948 <mg_url_host+0x3a>
 8017934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8017936:	2b00      	cmp	r3, #0
 8017938:	d003      	beq.n	8017942 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 801793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801793c:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	e002      	b.n	8017948 <mg_url_host+0x3a>
 8017942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8017948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 801794a:	69fb      	ldr	r3, [r7, #28]
 801794c:	683a      	ldr	r2, [r7, #0]
 801794e:	18d1      	adds	r1, r2, r3
 8017950:	f107 0308 	add.w	r3, r7, #8
 8017954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017956:	4618      	mov	r0, r3
 8017958:	f7f7 fa4b 	bl	800edf2 <mg_str_n>
  return s;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	461a      	mov	r2, r3
 8017960:	f107 0308 	add.w	r3, r7, #8
 8017964:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017968:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	3730      	adds	r7, #48	@ 0x30
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}

08017974 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8017974:	b580      	push	{r7, lr}
 8017976:	b08a      	sub	sp, #40	@ 0x28
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 801797c:	f107 0308 	add.w	r3, r7, #8
 8017980:	6879      	ldr	r1, [r7, #4]
 8017982:	4618      	mov	r0, r3
 8017984:	f7ff ff42 	bl	801780c <urlparse>
  unsigned short port = 0;
 8017988:	2300      	movs	r3, #0
 801798a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 801798c:	2205      	movs	r2, #5
 801798e:	4925      	ldr	r1, [pc, #148]	@ (8017a24 <mg_url_port+0xb0>)
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f00d fa78 	bl	8024e86 <strncmp>
 8017996:	4603      	mov	r3, r0
 8017998:	2b00      	cmp	r3, #0
 801799a:	d007      	beq.n	80179ac <mg_url_port+0x38>
 801799c:	2203      	movs	r2, #3
 801799e:	4922      	ldr	r1, [pc, #136]	@ (8017a28 <mg_url_port+0xb4>)
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f00d fa70 	bl	8024e86 <strncmp>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d101      	bne.n	80179b0 <mg_url_port+0x3c>
 80179ac:	2350      	movs	r3, #80	@ 0x50
 80179ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80179b0:	2204      	movs	r2, #4
 80179b2:	491e      	ldr	r1, [pc, #120]	@ (8017a2c <mg_url_port+0xb8>)
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f00d fa66 	bl	8024e86 <strncmp>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d007      	beq.n	80179d0 <mg_url_port+0x5c>
 80179c0:	2206      	movs	r2, #6
 80179c2:	491b      	ldr	r1, [pc, #108]	@ (8017a30 <mg_url_port+0xbc>)
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	f00d fa5e 	bl	8024e86 <strncmp>
 80179ca:	4603      	mov	r3, r0
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d102      	bne.n	80179d6 <mg_url_port+0x62>
    port = 443;
 80179d0:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80179d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80179d6:	2205      	movs	r2, #5
 80179d8:	4916      	ldr	r1, [pc, #88]	@ (8017a34 <mg_url_port+0xc0>)
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f00d fa53 	bl	8024e86 <strncmp>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d102      	bne.n	80179ec <mg_url_port+0x78>
 80179e6:	f240 735b 	movw	r3, #1883	@ 0x75b
 80179ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80179ec:	2206      	movs	r2, #6
 80179ee:	4912      	ldr	r1, [pc, #72]	@ (8017a38 <mg_url_port+0xc4>)
 80179f0:	6878      	ldr	r0, [r7, #4]
 80179f2:	f00d fa48 	bl	8024e86 <strncmp>
 80179f6:	4603      	mov	r3, r0
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d102      	bne.n	8017a02 <mg_url_port+0x8e>
 80179fc:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8017a00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8017a02:	69bb      	ldr	r3, [r7, #24]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d007      	beq.n	8017a18 <mg_url_port+0xa4>
 8017a08:	69bb      	ldr	r3, [r7, #24]
 8017a0a:	687a      	ldr	r2, [r7, #4]
 8017a0c:	4413      	add	r3, r2
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f00b ff70 	bl	80238f4 <atoi>
 8017a14:	4603      	mov	r3, r0
 8017a16:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8017a18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3728      	adds	r7, #40	@ 0x28
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	0802aefc 	.word	0x0802aefc
 8017a28:	0802af04 	.word	0x0802af04
 8017a2c:	0802aecc 	.word	0x0802aecc
 8017a30:	0802aed4 	.word	0x0802aed4
 8017a34:	0802af08 	.word	0x0802af08
 8017a38:	0802aedc 	.word	0x0802aedc

08017a3c <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8017a3c:	b480      	push	{r7}
 8017a3e:	b083      	sub	sp, #12
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d00a      	beq.n	8017a62 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8017a4c:	e004      	b.n	8017a58 <mg_bzero+0x1c>
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	1c5a      	adds	r2, r3, #1
 8017a52:	607a      	str	r2, [r7, #4]
 8017a54:	2200      	movs	r2, #0
 8017a56:	701a      	strb	r2, [r3, #0]
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	1e5a      	subs	r2, r3, #1
 8017a5c:	603a      	str	r2, [r7, #0]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d1f5      	bne.n	8017a4e <mg_bzero+0x12>
  }
}
 8017a62:	bf00      	nop
 8017a64:	370c      	adds	r7, #12
 8017a66:	46bd      	mov	sp, r7
 8017a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6c:	4770      	bx	lr
	...

08017a70 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b084      	sub	sp, #16
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
 8017a78:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8017a7a:	6839      	ldr	r1, [r7, #0]
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7e9 fa51 	bl	8000f24 <mg_random>
  for (i = 0; i < len; i++) {
 8017a82:	2300      	movs	r3, #0
 8017a84:	60fb      	str	r3, [r7, #12]
 8017a86:	e02d      	b.n	8017ae4 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8017a88:	687a      	ldr	r2, [r7, #4]
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	4413      	add	r3, r2
 8017a8e:	781a      	ldrb	r2, [r3, #0]
 8017a90:	0853      	lsrs	r3, r2, #1
 8017a92:	4919      	ldr	r1, [pc, #100]	@ (8017af8 <mg_random_str+0x88>)
 8017a94:	fba1 1303 	umull	r1, r3, r1, r3
 8017a98:	0919      	lsrs	r1, r3, #4
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	015b      	lsls	r3, r3, #5
 8017a9e:	1a5b      	subs	r3, r3, r1
 8017aa0:	005b      	lsls	r3, r3, #1
 8017aa2:	1ad3      	subs	r3, r2, r3
 8017aa4:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8017aa6:	683b      	ldr	r3, [r7, #0]
 8017aa8:	3b01      	subs	r3, #1
 8017aaa:	68fa      	ldr	r2, [r7, #12]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d011      	beq.n	8017ad4 <mg_random_str+0x64>
 8017ab0:	7afb      	ldrb	r3, [r7, #11]
 8017ab2:	2b19      	cmp	r3, #25
 8017ab4:	d803      	bhi.n	8017abe <mg_random_str+0x4e>
 8017ab6:	7afb      	ldrb	r3, [r7, #11]
 8017ab8:	3361      	adds	r3, #97	@ 0x61
 8017aba:	b2db      	uxtb	r3, r3
 8017abc:	e00b      	b.n	8017ad6 <mg_random_str+0x66>
 8017abe:	7afb      	ldrb	r3, [r7, #11]
 8017ac0:	2b33      	cmp	r3, #51	@ 0x33
 8017ac2:	d803      	bhi.n	8017acc <mg_random_str+0x5c>
 8017ac4:	7afb      	ldrb	r3, [r7, #11]
 8017ac6:	3327      	adds	r3, #39	@ 0x27
 8017ac8:	b2db      	uxtb	r3, r3
 8017aca:	e004      	b.n	8017ad6 <mg_random_str+0x66>
 8017acc:	7afb      	ldrb	r3, [r7, #11]
 8017ace:	3b04      	subs	r3, #4
 8017ad0:	b2db      	uxtb	r3, r3
 8017ad2:	e000      	b.n	8017ad6 <mg_random_str+0x66>
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	6879      	ldr	r1, [r7, #4]
 8017ad8:	68fa      	ldr	r2, [r7, #12]
 8017ada:	440a      	add	r2, r1
 8017adc:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	60fb      	str	r3, [r7, #12]
 8017ae4:	68fa      	ldr	r2, [r7, #12]
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d3cd      	bcc.n	8017a88 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8017aec:	687b      	ldr	r3, [r7, #4]
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3710      	adds	r7, #16
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	84210843 	.word	0x84210843

08017afc <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8017afc:	b480      	push	{r7}
 8017afe:	b085      	sub	sp, #20
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8017b04:	2300      	movs	r3, #0
 8017b06:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8017b0c:	7bfb      	ldrb	r3, [r7, #15]
 8017b0e:	461a      	mov	r2, r3
 8017b10:	7bbb      	ldrb	r3, [r7, #14]
 8017b12:	021b      	lsls	r3, r3, #8
 8017b14:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8017b16:	7b7b      	ldrb	r3, [r7, #13]
 8017b18:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8017b1a:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8017b1c:	7b3b      	ldrb	r3, [r7, #12]
 8017b1e:	061b      	lsls	r3, r3, #24
 8017b20:	4313      	orrs	r3, r2
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	3714      	adds	r7, #20
 8017b26:	46bd      	mov	sp, r7
 8017b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2c:	4770      	bx	lr

08017b2e <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8017b2e:	b480      	push	{r7}
 8017b30:	b085      	sub	sp, #20
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	4603      	mov	r3, r0
 8017b36:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8017b38:	2300      	movs	r3, #0
 8017b3a:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8017b3c:	88fb      	ldrh	r3, [r7, #6]
 8017b3e:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8017b40:	7b7b      	ldrb	r3, [r7, #13]
 8017b42:	b21a      	sxth	r2, r3
 8017b44:	7b3b      	ldrb	r3, [r7, #12]
 8017b46:	021b      	lsls	r3, r3, #8
 8017b48:	b21b      	sxth	r3, r3
 8017b4a:	4313      	orrs	r3, r2
 8017b4c:	b21b      	sxth	r3, r3
 8017b4e:	b29b      	uxth	r3, r3
}
 8017b50:	4618      	mov	r0, r3
 8017b52:	3714      	adds	r7, #20
 8017b54:	46bd      	mov	sp, r7
 8017b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5a:	4770      	bx	lr

08017b5c <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8017b5c:	b480      	push	{r7}
 8017b5e:	b087      	sub	sp, #28
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	60f8      	str	r0, [r7, #12]
 8017b64:	60b9      	str	r1, [r7, #8]
 8017b66:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	43db      	mvns	r3, r3
 8017b6c:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8017b6e:	e01f      	b.n	8017bb0 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	1c5a      	adds	r2, r3, #1
 8017b74:	60ba      	str	r2, [r7, #8]
 8017b76:	781b      	ldrb	r3, [r3, #0]
 8017b78:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8017b7a:	7dfa      	ldrb	r2, [r7, #23]
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	4053      	eors	r3, r2
 8017b80:	f003 030f 	and.w	r3, r3, #15
 8017b84:	4a11      	ldr	r2, [pc, #68]	@ (8017bcc <mg_crc32+0x70>)
 8017b86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	091b      	lsrs	r3, r3, #4
 8017b8e:	4053      	eors	r3, r2
 8017b90:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8017b92:	7dfb      	ldrb	r3, [r7, #23]
 8017b94:	091b      	lsrs	r3, r3, #4
 8017b96:	b2db      	uxtb	r3, r3
 8017b98:	461a      	mov	r2, r3
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	4053      	eors	r3, r2
 8017b9e:	f003 030f 	and.w	r3, r3, #15
 8017ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8017bcc <mg_crc32+0x70>)
 8017ba4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	091b      	lsrs	r3, r3, #4
 8017bac:	4053      	eors	r3, r2
 8017bae:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	1e5a      	subs	r2, r3, #1
 8017bb4:	607a      	str	r2, [r7, #4]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d1da      	bne.n	8017b70 <mg_crc32+0x14>
  }
  return ~crc;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	43db      	mvns	r3, r3
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	371c      	adds	r7, #28
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop
 8017bcc:	0802c388 	.word	0x0802c388

08017bd0 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8017bd0:	b480      	push	{r7}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	463b      	mov	r3, r7
 8017bd8:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	781b      	ldrb	r3, [r3, #0]
 8017be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bea:	d123      	bne.n	8017c34 <mg_path_is_sane+0x64>
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	3301      	adds	r3, #1
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bf4:	d11e      	bne.n	8017c34 <mg_path_is_sane+0x64>
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	e024      	b.n	8017c44 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	781b      	ldrb	r3, [r3, #0]
 8017bfe:	2b2f      	cmp	r3, #47	@ 0x2f
 8017c00:	d003      	beq.n	8017c0a <mg_path_is_sane+0x3a>
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	781b      	ldrb	r3, [r3, #0]
 8017c06:	2b5c      	cmp	r3, #92	@ 0x5c
 8017c08:	d10e      	bne.n	8017c28 <mg_path_is_sane+0x58>
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	2b01      	cmp	r3, #1
 8017c0e:	d90b      	bls.n	8017c28 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	3301      	adds	r3, #1
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c18:	d106      	bne.n	8017c28 <mg_path_is_sane+0x58>
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	3302      	adds	r3, #2
 8017c1e:	781b      	ldrb	r3, [r3, #0]
 8017c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c22:	d101      	bne.n	8017c28 <mg_path_is_sane+0x58>
 8017c24:	2300      	movs	r3, #0
 8017c26:	e00d      	b.n	8017c44 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	3301      	adds	r3, #1
 8017c2c:	60fb      	str	r3, [r7, #12]
 8017c2e:	68bb      	ldr	r3, [r7, #8]
 8017c30:	3b01      	subs	r3, #1
 8017c32:	60bb      	str	r3, [r7, #8]
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d002      	beq.n	8017c42 <mg_path_is_sane+0x72>
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1db      	bne.n	8017bfa <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8017c42:	2301      	movs	r3, #1
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3714      	adds	r7, #20
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4e:	4770      	bx	lr

08017c50 <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8017c50:	b480      	push	{r7}
 8017c52:	b083      	sub	sp, #12
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	4603      	mov	r3, r0
 8017c58:	460a      	mov	r2, r1
 8017c5a:	80fb      	strh	r3, [r7, #6]
 8017c5c:	4613      	mov	r3, r2
 8017c5e:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8017c60:	88fb      	ldrh	r3, [r7, #6]
 8017c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c66:	d00b      	beq.n	8017c80 <mg_phy_id_to_str+0x30>
 8017c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c6c:	dc28      	bgt.n	8017cc0 <mg_phy_id_to_str+0x70>
 8017c6e:	2b22      	cmp	r3, #34	@ 0x22
 8017c70:	d020      	beq.n	8017cb4 <mg_phy_id_to_str+0x64>
 8017c72:	2b22      	cmp	r3, #34	@ 0x22
 8017c74:	dc24      	bgt.n	8017cc0 <mg_phy_id_to_str+0x70>
 8017c76:	2b07      	cmp	r3, #7
 8017c78:	d01e      	beq.n	8017cb8 <mg_phy_id_to_str+0x68>
 8017c7a:	2b1c      	cmp	r3, #28
 8017c7c:	d01e      	beq.n	8017cbc <mg_phy_id_to_str+0x6c>
 8017c7e:	e01f      	b.n	8017cc0 <mg_phy_id_to_str+0x70>
    case MG_PHY_DP83x:
      switch (id2) {
 8017c80:	88bb      	ldrh	r3, [r7, #4]
 8017c82:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017c86:	4293      	cmp	r3, r2
 8017c88:	d00c      	beq.n	8017ca4 <mg_phy_id_to_str+0x54>
 8017c8a:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017c8e:	4293      	cmp	r3, r2
 8017c90:	dc0e      	bgt.n	8017cb0 <mg_phy_id_to_str+0x60>
 8017c92:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d006      	beq.n	8017ca8 <mg_phy_id_to_str+0x58>
 8017c9a:	f24a 1240 	movw	r2, #41280	@ 0xa140
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	d004      	beq.n	8017cac <mg_phy_id_to_str+0x5c>
 8017ca2:	e005      	b.n	8017cb0 <mg_phy_id_to_str+0x60>
        case MG_PHY_DP83867:
          return "DP83867";
 8017ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8017cd0 <mg_phy_id_to_str+0x80>)
 8017ca6:	e00c      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83848:
          return "DP83848";
 8017ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8017cd4 <mg_phy_id_to_str+0x84>)
 8017caa:	e00a      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83825:
          return "DP83825";
 8017cac:	4b0a      	ldr	r3, [pc, #40]	@ (8017cd8 <mg_phy_id_to_str+0x88>)
 8017cae:	e008      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
        default:
          return "DP83x";
 8017cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8017cdc <mg_phy_id_to_str+0x8c>)
 8017cb2:	e006      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8017cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8017ce0 <mg_phy_id_to_str+0x90>)
 8017cb6:	e004      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8017cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8017ce4 <mg_phy_id_to_str+0x94>)
 8017cba:	e002      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8017cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8017ce8 <mg_phy_id_to_str+0x98>)
 8017cbe:	e000      	b.n	8017cc2 <mg_phy_id_to_str+0x72>
    default:
      return "unknown";
 8017cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8017cec <mg_phy_id_to_str+0x9c>)
  }
  (void) id2;
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	370c      	adds	r7, #12
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ccc:	4770      	bx	lr
 8017cce:	bf00      	nop
 8017cd0:	0802b108 	.word	0x0802b108
 8017cd4:	0802b110 	.word	0x0802b110
 8017cd8:	0802b118 	.word	0x0802b118
 8017cdc:	0802b120 	.word	0x0802b120
 8017ce0:	0802b128 	.word	0x0802b128
 8017ce4:	0802b130 	.word	0x0802b130
 8017ce8:	0802b138 	.word	0x0802b138
 8017cec:	0802b140 	.word	0x0802b140

08017cf0 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8017cf0:	b5b0      	push	{r4, r5, r7, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	460b      	mov	r3, r1
 8017cfa:	70fb      	strb	r3, [r7, #3]
 8017cfc:	4613      	mov	r3, r2
 8017cfe:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	685b      	ldr	r3, [r3, #4]
 8017d04:	78f8      	ldrb	r0, [r7, #3]
 8017d06:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8017d0a:	2100      	movs	r1, #0
 8017d0c:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8017d0e:	bf00      	nop
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	78fa      	ldrb	r2, [r7, #3]
 8017d16:	2100      	movs	r1, #0
 8017d18:	4610      	mov	r0, r2
 8017d1a:	4798      	blx	r3
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	b21b      	sxth	r3, r3
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	dbf5      	blt.n	8017d10 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	78fa      	ldrb	r2, [r7, #3]
 8017d2a:	2102      	movs	r1, #2
 8017d2c:	4610      	mov	r0, r2
 8017d2e:	4798      	blx	r3
 8017d30:	4603      	mov	r3, r0
 8017d32:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	78fa      	ldrb	r2, [r7, #3]
 8017d3a:	2103      	movs	r1, #3
 8017d3c:	4610      	mov	r0, r2
 8017d3e:	4798      	blx	r3
 8017d40:	4603      	mov	r3, r0
 8017d42:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8017d44:	4b42      	ldr	r3, [pc, #264]	@ (8017e50 <mg_phy_init+0x160>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	2b01      	cmp	r3, #1
 8017d4a:	dd14      	ble.n	8017d76 <mg_phy_init+0x86>
 8017d4c:	4b41      	ldr	r3, [pc, #260]	@ (8017e54 <mg_phy_init+0x164>)
 8017d4e:	f244 4232 	movw	r2, #17458	@ 0x4432
 8017d52:	4941      	ldr	r1, [pc, #260]	@ (8017e58 <mg_phy_init+0x168>)
 8017d54:	2002      	movs	r0, #2
 8017d56:	f7f0 f967 	bl	8008028 <mg_log_prefix>
 8017d5a:	89fc      	ldrh	r4, [r7, #14]
 8017d5c:	89bd      	ldrh	r5, [r7, #12]
 8017d5e:	89ba      	ldrh	r2, [r7, #12]
 8017d60:	89fb      	ldrh	r3, [r7, #14]
 8017d62:	4611      	mov	r1, r2
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7ff ff73 	bl	8017c50 <mg_phy_id_to_str>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	462a      	mov	r2, r5
 8017d6e:	4621      	mov	r1, r4
 8017d70:	483a      	ldr	r0, [pc, #232]	@ (8017e5c <mg_phy_init+0x16c>)
 8017d72:	f7f0 f9a9 	bl	80080c8 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8017d76:	89fb      	ldrh	r3, [r7, #14]
 8017d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017d7c:	d11f      	bne.n	8017dbe <mg_phy_init+0xce>
 8017d7e:	89bb      	ldrh	r3, [r7, #12]
 8017d80:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017d84:	4293      	cmp	r3, r2
 8017d86:	d11a      	bne.n	8017dbe <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	78f8      	ldrb	r0, [r7, #3]
 8017d8e:	221f      	movs	r2, #31
 8017d90:	210d      	movs	r1, #13
 8017d92:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	78f8      	ldrb	r0, [r7, #3]
 8017d9a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017d9e:	210e      	movs	r1, #14
 8017da0:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	685b      	ldr	r3, [r3, #4]
 8017da6:	78f8      	ldrb	r0, [r7, #3]
 8017da8:	f244 021f 	movw	r2, #16415	@ 0x401f
 8017dac:	210d      	movs	r1, #13
 8017dae:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	685b      	ldr	r3, [r3, #4]
 8017db4:	78f8      	ldrb	r0, [r7, #3]
 8017db6:	f240 120d 	movw	r2, #269	@ 0x10d
 8017dba:	210e      	movs	r1, #14
 8017dbc:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8017dbe:	78bb      	ldrb	r3, [r7, #2]
 8017dc0:	f003 0302 	and.w	r3, r3, #2
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d12e      	bne.n	8017e26 <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8017dc8:	89fb      	ldrh	r3, [r7, #14]
 8017dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017dce:	d110      	bne.n	8017df2 <mg_phy_init+0x102>
 8017dd0:	89bb      	ldrh	r3, [r7, #12]
 8017dd2:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	d00b      	beq.n	8017df2 <mg_phy_init+0x102>
 8017dda:	89bb      	ldrh	r3, [r7, #12]
 8017ddc:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8017de0:	4293      	cmp	r3, r2
 8017de2:	d006      	beq.n	8017df2 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	685b      	ldr	r3, [r3, #4]
 8017de8:	78f8      	ldrb	r0, [r7, #3]
 8017dea:	2281      	movs	r2, #129	@ 0x81
 8017dec:	2117      	movs	r1, #23
 8017dee:	4798      	blx	r3
 8017df0:	e019      	b.n	8017e26 <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8017df2:	89fb      	ldrh	r3, [r7, #14]
 8017df4:	2b22      	cmp	r3, #34	@ 0x22
 8017df6:	d116      	bne.n	8017e26 <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	78fa      	ldrb	r2, [r7, #3]
 8017e02:	2100      	movs	r1, #0
 8017e04:	4610      	mov	r0, r2
 8017e06:	4798      	blx	r3
 8017e08:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8017e0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017e0e:	b29a      	uxth	r2, r3
 8017e10:	78fb      	ldrb	r3, [r7, #3]
 8017e12:	2100      	movs	r1, #0
 8017e14:	4618      	mov	r0, r3
 8017e16:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	685b      	ldr	r3, [r3, #4]
 8017e1c:	78f8      	ldrb	r0, [r7, #3]
 8017e1e:	f248 1280 	movw	r2, #33152	@ 0x8180
 8017e22:	211f      	movs	r1, #31
 8017e24:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8017e26:	78bb      	ldrb	r3, [r7, #2]
 8017e28:	f003 0301 	and.w	r3, r3, #1
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d00a      	beq.n	8017e46 <mg_phy_init+0x156>
 8017e30:	89fb      	ldrh	r3, [r7, #14]
 8017e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017e36:	d106      	bne.n	8017e46 <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	685b      	ldr	r3, [r3, #4]
 8017e3c:	78f8      	ldrb	r0, [r7, #3]
 8017e3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017e42:	2118      	movs	r1, #24
 8017e44:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8017e46:	bf00      	nop
 8017e48:	3710      	adds	r7, #16
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	24000240 	.word	0x24000240
 8017e54:	0802c3c8 	.word	0x0802c3c8
 8017e58:	08028ac4 	.word	0x08028ac4
 8017e5c:	0802b148 	.word	0x0802b148

08017e60 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	@ 0x28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	60f8      	str	r0, [r7, #12]
 8017e68:	607a      	str	r2, [r7, #4]
 8017e6a:	603b      	str	r3, [r7, #0]
 8017e6c:	460b      	mov	r3, r1
 8017e6e:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8017e70:	2300      	movs	r3, #0
 8017e72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	7afa      	ldrb	r2, [r7, #11]
 8017e7c:	2101      	movs	r1, #1
 8017e7e:	4610      	mov	r0, r2
 8017e80:	4798      	blx	r3
 8017e82:	4603      	mov	r3, r0
 8017e84:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8017e86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e88:	f003 0320 	and.w	r3, r3, #32
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d00c      	beq.n	8017eaa <mg_phy_up+0x4a>
 8017e90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e92:	f003 0304 	and.w	r3, r3, #4
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d107      	bne.n	8017eaa <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	7afa      	ldrb	r2, [r7, #11]
 8017ea0:	2101      	movs	r1, #1
 8017ea2:	4610      	mov	r0, r2
 8017ea4:	4798      	blx	r3
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8017eaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017eac:	f003 0304 	and.w	r3, r3, #4
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	bf14      	ite	ne
 8017eb4:	2301      	movne	r3, #1
 8017eb6:	2300      	moveq	r3, #0
 8017eb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8017ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f000 80bc 	beq.w	801803e <mg_phy_up+0x1de>
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f000 80b8 	beq.w	801803e <mg_phy_up+0x1de>
 8017ece:	683b      	ldr	r3, [r7, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	f000 80b4 	beq.w	801803e <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	7afa      	ldrb	r2, [r7, #11]
 8017edc:	2102      	movs	r1, #2
 8017ede:	4610      	mov	r0, r2
 8017ee0:	4798      	blx	r3
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8017ee6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017eec:	d14b      	bne.n	8017f86 <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	7afa      	ldrb	r2, [r7, #11]
 8017ef4:	2103      	movs	r1, #3
 8017ef6:	4610      	mov	r0, r2
 8017ef8:	4798      	blx	r3
 8017efa:	4603      	mov	r3, r0
 8017efc:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 8017efe:	8b7b      	ldrh	r3, [r7, #26]
 8017f00:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017f04:	4293      	cmp	r3, r2
 8017f06:	d120      	bne.n	8017f4a <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	7afa      	ldrb	r2, [r7, #11]
 8017f0e:	2111      	movs	r1, #17
 8017f10:	4610      	mov	r0, r2
 8017f12:	4798      	blx	r3
 8017f14:	4603      	mov	r3, r0
 8017f16:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 8017f18:	8afb      	ldrh	r3, [r7, #22]
 8017f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	bf14      	ite	ne
 8017f22:	2301      	movne	r3, #1
 8017f24:	2300      	moveq	r3, #0
 8017f26:	b2da      	uxtb	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8017f2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	db06      	blt.n	8017f42 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8017f34:	8afb      	ldrh	r3, [r7, #22]
 8017f36:	0b9b      	lsrs	r3, r3, #14
 8017f38:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8017f3a:	f003 0301 	and.w	r3, r3, #1
 8017f3e:	b2da      	uxtb	r2, r3
 8017f40:	e000      	b.n	8017f44 <mg_phy_up+0xe4>
 8017f42:	2202      	movs	r2, #2
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	701a      	strb	r2, [r3, #0]
 8017f48:	e079      	b.n	801803e <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	7afa      	ldrb	r2, [r7, #11]
 8017f50:	2110      	movs	r1, #16
 8017f52:	4610      	mov	r0, r2
 8017f54:	4798      	blx	r3
 8017f56:	4603      	mov	r3, r0
 8017f58:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 8017f5a:	8b3b      	ldrh	r3, [r7, #24]
 8017f5c:	f003 0304 	and.w	r3, r3, #4
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	bf14      	ite	ne
 8017f64:	2301      	movne	r3, #1
 8017f66:	2300      	moveq	r3, #0
 8017f68:	b2da      	uxtb	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8017f6e:	8b3b      	ldrh	r3, [r7, #24]
 8017f70:	f003 0302 	and.w	r3, r3, #2
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	bf0c      	ite	eq
 8017f78:	2301      	moveq	r3, #1
 8017f7a:	2300      	movne	r3, #0
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	461a      	mov	r2, r3
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	701a      	strb	r2, [r3, #0]
 8017f84:	e05b      	b.n	801803e <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8017f86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017f88:	2b22      	cmp	r3, #34	@ 0x22
 8017f8a:	d11d      	bne.n	8017fc8 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	7afa      	ldrb	r2, [r7, #11]
 8017f92:	211e      	movs	r1, #30
 8017f94:	4610      	mov	r0, r2
 8017f96:	4798      	blx	r3
 8017f98:	4603      	mov	r3, r0
 8017f9a:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 8017f9c:	8bbb      	ldrh	r3, [r7, #28]
 8017f9e:	f003 0304 	and.w	r3, r3, #4
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	bf14      	ite	ne
 8017fa6:	2301      	movne	r3, #1
 8017fa8:	2300      	moveq	r3, #0
 8017faa:	b2da      	uxtb	r2, r3
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8017fb0:	8bbb      	ldrh	r3, [r7, #28]
 8017fb2:	f003 0303 	and.w	r3, r3, #3
 8017fb6:	2b01      	cmp	r3, #1
 8017fb8:	bf14      	ite	ne
 8017fba:	2301      	movne	r3, #1
 8017fbc:	2300      	moveq	r3, #0
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	461a      	mov	r2, r3
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	701a      	strb	r2, [r3, #0]
 8017fc6:	e03a      	b.n	801803e <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 8017fc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017fca:	2b07      	cmp	r3, #7
 8017fcc:	d11a      	bne.n	8018004 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	7afa      	ldrb	r2, [r7, #11]
 8017fd4:	211f      	movs	r1, #31
 8017fd6:	4610      	mov	r0, r2
 8017fd8:	4798      	blx	r3
 8017fda:	4603      	mov	r3, r0
 8017fdc:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 8017fde:	8bfb      	ldrh	r3, [r7, #30]
 8017fe0:	f003 0310 	and.w	r3, r3, #16
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	bf14      	ite	ne
 8017fe8:	2301      	movne	r3, #1
 8017fea:	2300      	moveq	r3, #0
 8017fec:	b2da      	uxtb	r2, r3
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8017ff2:	8bfb      	ldrh	r3, [r7, #30]
 8017ff4:	08db      	lsrs	r3, r3, #3
 8017ff6:	b2db      	uxtb	r3, r3
 8017ff8:	f003 0301 	and.w	r3, r3, #1
 8017ffc:	b2da      	uxtb	r2, r3
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	701a      	strb	r2, [r3, #0]
 8018002:	e01c      	b.n	801803e <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 8018004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018006:	2b1c      	cmp	r3, #28
 8018008:	d119      	bne.n	801803e <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	7afa      	ldrb	r2, [r7, #11]
 8018010:	2100      	movs	r1, #0
 8018012:	4610      	mov	r0, r2
 8018014:	4798      	blx	r3
 8018016:	4603      	mov	r3, r0
 8018018:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 801801a:	8c3b      	ldrh	r3, [r7, #32]
 801801c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018020:	2b00      	cmp	r3, #0
 8018022:	bf14      	ite	ne
 8018024:	2301      	movne	r3, #1
 8018026:	2300      	moveq	r3, #0
 8018028:	b2da      	uxtb	r2, r3
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 801802e:	8c3b      	ldrh	r3, [r7, #32]
 8018030:	0b5b      	lsrs	r3, r3, #13
 8018032:	b2db      	uxtb	r3, r3
 8018034:	f003 0301 	and.w	r3, r3, #1
 8018038:	b2da      	uxtb	r2, r3
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 801803e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8018042:	4618      	mov	r0, r3
 8018044:	3728      	adds	r7, #40	@ 0x28
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}
	...

0801804c <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 801804c:	b480      	push	{r7}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
 8018052:	4603      	mov	r3, r0
 8018054:	460a      	mov	r2, r1
 8018056:	71fb      	strb	r3, [r7, #7]
 8018058:	4613      	mov	r3, r2
 801805a:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 801805c:	4b17      	ldr	r3, [pc, #92]	@ (80180bc <eth_read_phy+0x70>)
 801805e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018062:	4a16      	ldr	r2, [pc, #88]	@ (80180bc <eth_read_phy+0x70>)
 8018064:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8018068:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 801806c:	4b13      	ldr	r3, [pc, #76]	@ (80180bc <eth_read_phy+0x70>)
 801806e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8018072:	79fb      	ldrb	r3, [r7, #7]
 8018074:	0559      	lsls	r1, r3, #21
 8018076:	79bb      	ldrb	r3, [r7, #6]
 8018078:	041b      	lsls	r3, r3, #16
 801807a:	430b      	orrs	r3, r1
 801807c:	4313      	orrs	r3, r2
 801807e:	4a0f      	ldr	r2, [pc, #60]	@ (80180bc <eth_read_phy+0x70>)
 8018080:	f043 030c 	orr.w	r3, r3, #12
 8018084:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8018088:	4b0c      	ldr	r3, [pc, #48]	@ (80180bc <eth_read_phy+0x70>)
 801808a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801808e:	4a0b      	ldr	r2, [pc, #44]	@ (80180bc <eth_read_phy+0x70>)
 8018090:	f043 0301 	orr.w	r3, r3, #1
 8018094:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8018098:	bf00      	nop
 801809a:	4b08      	ldr	r3, [pc, #32]	@ (80180bc <eth_read_phy+0x70>)
 801809c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80180a0:	f003 0301 	and.w	r3, r3, #1
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d1f8      	bne.n	801809a <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 80180a8:	4b04      	ldr	r3, [pc, #16]	@ (80180bc <eth_read_phy+0x70>)
 80180aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80180ae:	b29b      	uxth	r3, r3
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	370c      	adds	r7, #12
 80180b4:	46bd      	mov	sp, r7
 80180b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ba:	4770      	bx	lr
 80180bc:	40028000 	.word	0x40028000

080180c0 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 80180c0:	b480      	push	{r7}
 80180c2:	b083      	sub	sp, #12
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	4603      	mov	r3, r0
 80180c8:	71fb      	strb	r3, [r7, #7]
 80180ca:	460b      	mov	r3, r1
 80180cc:	71bb      	strb	r3, [r7, #6]
 80180ce:	4613      	mov	r3, r2
 80180d0:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 80180d2:	4a18      	ldr	r2, [pc, #96]	@ (8018134 <eth_write_phy+0x74>)
 80180d4:	88bb      	ldrh	r3, [r7, #4]
 80180d6:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 80180da:	4b16      	ldr	r3, [pc, #88]	@ (8018134 <eth_write_phy+0x74>)
 80180dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80180e0:	4a14      	ldr	r2, [pc, #80]	@ (8018134 <eth_write_phy+0x74>)
 80180e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80180e6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 80180ea:	4b12      	ldr	r3, [pc, #72]	@ (8018134 <eth_write_phy+0x74>)
 80180ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80180f0:	79fb      	ldrb	r3, [r7, #7]
 80180f2:	0559      	lsls	r1, r3, #21
 80180f4:	79bb      	ldrb	r3, [r7, #6]
 80180f6:	041b      	lsls	r3, r3, #16
 80180f8:	430b      	orrs	r3, r1
 80180fa:	4313      	orrs	r3, r2
 80180fc:	4a0d      	ldr	r2, [pc, #52]	@ (8018134 <eth_write_phy+0x74>)
 80180fe:	f043 0304 	orr.w	r3, r3, #4
 8018102:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8018106:	4b0b      	ldr	r3, [pc, #44]	@ (8018134 <eth_write_phy+0x74>)
 8018108:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801810c:	4a09      	ldr	r2, [pc, #36]	@ (8018134 <eth_write_phy+0x74>)
 801810e:	f043 0301 	orr.w	r3, r3, #1
 8018112:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8018116:	bf00      	nop
 8018118:	4b06      	ldr	r3, [pc, #24]	@ (8018134 <eth_write_phy+0x74>)
 801811a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801811e:	f003 0301 	and.w	r3, r3, #1
 8018122:	2b00      	cmp	r3, #0
 8018124:	d1f8      	bne.n	8018118 <eth_write_phy+0x58>
}
 8018126:	bf00      	nop
 8018128:	bf00      	nop
 801812a:	370c      	adds	r7, #12
 801812c:	46bd      	mov	sp, r7
 801812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018132:	4770      	bx	lr
 8018134:	40028000 	.word	0x40028000

08018138 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8018138:	b580      	push	{r7, lr}
 801813a:	b08a      	sub	sp, #40	@ 0x28
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018144:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8018146:	4a8e      	ldr	r2, [pc, #568]	@ (8018380 <mg_tcpip_driver_stm32h_init+0x248>)
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801814c:	69bb      	ldr	r3, [r7, #24]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d002      	beq.n	8018158 <mg_tcpip_driver_stm32h_init+0x20>
 8018152:	69bb      	ldr	r3, [r7, #24]
 8018154:	791b      	ldrb	r3, [r3, #4]
 8018156:	e000      	b.n	801815a <mg_tcpip_driver_stm32h_init+0x22>
 8018158:	2300      	movs	r3, #0
 801815a:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 801815c:	69bb      	ldr	r3, [r7, #24]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d002      	beq.n	8018168 <mg_tcpip_driver_stm32h_init+0x30>
 8018162:	69bb      	ldr	r3, [r7, #24]
 8018164:	795b      	ldrb	r3, [r3, #5]
 8018166:	e000      	b.n	801816a <mg_tcpip_driver_stm32h_init+0x32>
 8018168:	2302      	movs	r3, #2
 801816a:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801816c:	2300      	movs	r3, #0
 801816e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018170:	e017      	b.n	80181a2 <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8018172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018174:	f240 6204 	movw	r2, #1540	@ 0x604
 8018178:	fb02 f303 	mul.w	r3, r2, r3
 801817c:	4a81      	ldr	r2, [pc, #516]	@ (8018384 <mg_tcpip_driver_stm32h_init+0x24c>)
 801817e:	4413      	add	r3, r2
 8018180:	4619      	mov	r1, r3
 8018182:	4a81      	ldr	r2, [pc, #516]	@ (8018388 <mg_tcpip_driver_stm32h_init+0x250>)
 8018184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018186:	011b      	lsls	r3, r3, #4
 8018188:	4413      	add	r3, r2
 801818a:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 801818c:	4a7e      	ldr	r2, [pc, #504]	@ (8018388 <mg_tcpip_driver_stm32h_init+0x250>)
 801818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018190:	011b      	lsls	r3, r3, #4
 8018192:	4413      	add	r3, r2
 8018194:	330c      	adds	r3, #12
 8018196:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 801819a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801819e:	3301      	adds	r3, #1
 80181a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80181a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a4:	2b03      	cmp	r3, #3
 80181a6:	dde4      	ble.n	8018172 <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80181a8:	2300      	movs	r3, #0
 80181aa:	623b      	str	r3, [r7, #32]
 80181ac:	e00f      	b.n	80181ce <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 80181ae:	6a3b      	ldr	r3, [r7, #32]
 80181b0:	f240 6204 	movw	r2, #1540	@ 0x604
 80181b4:	fb02 f303 	mul.w	r3, r2, r3
 80181b8:	4a74      	ldr	r2, [pc, #464]	@ (801838c <mg_tcpip_driver_stm32h_init+0x254>)
 80181ba:	4413      	add	r3, r2
 80181bc:	4619      	mov	r1, r3
 80181be:	4a74      	ldr	r2, [pc, #464]	@ (8018390 <mg_tcpip_driver_stm32h_init+0x258>)
 80181c0:	6a3b      	ldr	r3, [r7, #32]
 80181c2:	011b      	lsls	r3, r3, #4
 80181c4:	4413      	add	r3, r2
 80181c6:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80181c8:	6a3b      	ldr	r3, [r7, #32]
 80181ca:	3301      	adds	r3, #1
 80181cc:	623b      	str	r3, [r7, #32]
 80181ce:	6a3b      	ldr	r3, [r7, #32]
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	ddec      	ble.n	80181ae <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 80181d4:	4b6f      	ldr	r3, [pc, #444]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80181d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	4a6d      	ldr	r2, [pc, #436]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80181de:	f043 0301 	orr.w	r3, r3, #1
 80181e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181e6:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 80181e8:	2300      	movs	r3, #0
 80181ea:	61fb      	str	r3, [r7, #28]
 80181ec:	e002      	b.n	80181f4 <mg_tcpip_driver_stm32h_init+0xbc>
 80181ee:	69fb      	ldr	r3, [r7, #28]
 80181f0:	3301      	adds	r3, #1
 80181f2:	61fb      	str	r3, [r7, #28]
 80181f4:	69fb      	ldr	r3, [r7, #28]
 80181f6:	2b03      	cmp	r3, #3
 80181f8:	ddf9      	ble.n	80181ee <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 80181fa:	bf00      	nop
 80181fc:	4b65      	ldr	r3, [pc, #404]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80181fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	f003 0301 	and.w	r3, r3, #1
 8018208:	2b00      	cmp	r3, #0
 801820a:	d1f7      	bne.n	80181fc <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 801820c:	69bb      	ldr	r3, [r7, #24]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d006      	beq.n	8018220 <mg_tcpip_driver_stm32h_init+0xe8>
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	2b00      	cmp	r3, #0
 8018218:	db02      	blt.n	8018220 <mg_tcpip_driver_stm32h_init+0xe8>
 801821a:	69bb      	ldr	r3, [r7, #24]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	e000      	b.n	8018222 <mg_tcpip_driver_stm32h_init+0xea>
 8018220:	2307      	movs	r3, #7
 8018222:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	021b      	lsls	r3, r3, #8
 8018228:	4a5a      	ldr	r2, [pc, #360]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 801822a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801822e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 8018232:	4b58      	ldr	r3, [pc, #352]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018238:	461a      	mov	r2, r3
 801823a:	2300      	movs	r3, #0
 801823c:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 801823e:	4b55      	ldr	r3, [pc, #340]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	4a53      	ldr	r2, [pc, #332]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018248:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801824c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018250:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 8018252:	4b50      	ldr	r3, [pc, #320]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018254:	2200      	movs	r2, #0
 8018256:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 801825a:	4b4e      	ldr	r3, [pc, #312]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 801825c:	2280      	movs	r2, #128	@ 0x80
 801825e:	671a      	str	r2, [r3, #112]	@ 0x70
  // ETH->MACPFR = MG_BIT(31);  // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8018260:	4a4d      	ldr	r2, [pc, #308]	@ (8018398 <mg_tcpip_driver_stm32h_init+0x260>)
 8018262:	f107 0308 	add.w	r3, r7, #8
 8018266:	e892 0003 	ldmia.w	r2, {r0, r1}
 801826a:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 801826e:	7dba      	ldrb	r2, [r7, #22]
 8018270:	7df9      	ldrb	r1, [r7, #23]
 8018272:	f107 0308 	add.w	r3, r7, #8
 8018276:	4618      	mov	r0, r3
 8018278:	f7ff fd3a 	bl	8017cf0 <mg_phy_init>
  ETH->DMACRDLAR =
 801827c:	4a45      	ldr	r2, [pc, #276]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 801827e:	4b42      	ldr	r3, [pc, #264]	@ (8018388 <mg_tcpip_driver_stm32h_init+0x250>)
  ETH->DMACRDLAR =
 8018280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018284:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8018288:	4b42      	ldr	r3, [pc, #264]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 801828a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801828e:	461a      	mov	r2, r3
 8018290:	2303      	movs	r3, #3
 8018292:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8018296:	4a3f      	ldr	r2, [pc, #252]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8018298:	4b40      	ldr	r3, [pc, #256]	@ (801839c <mg_tcpip_driver_stm32h_init+0x264>)
  ETH->DMACRDTPR =
 801829a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801829e:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 80182a2:	4a3c      	ldr	r2, [pc, #240]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 80182a4:	4b3a      	ldr	r3, [pc, #232]	@ (8018390 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDLAR =
 80182a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80182aa:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 80182ae:	4b39      	ldr	r3, [pc, #228]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80182b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80182b4:	461a      	mov	r2, r3
 80182b6:	2303      	movs	r3, #3
 80182b8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 80182bc:	4a35      	ldr	r2, [pc, #212]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 80182be:	4b34      	ldr	r3, [pc, #208]	@ (8018390 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDTPR =
 80182c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80182c4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 80182c8:	4b32      	ldr	r3, [pc, #200]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80182ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80182ce:	461a      	mov	r2, r3
 80182d0:	2300      	movs	r3, #0
 80182d2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 80182d6:	4b2f      	ldr	r3, [pc, #188]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80182d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80182dc:	461a      	mov	r2, r3
 80182de:	f248 0340 	movw	r3, #32832	@ 0x8040
 80182e2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 80182e6:	4b2b      	ldr	r3, [pc, #172]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80182e8:	f24e 0203 	movw	r2, #57347	@ 0xe003
 80182ec:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 80182ee:	4b29      	ldr	r3, [pc, #164]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80182f0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80182f4:	4a27      	ldr	r2, [pc, #156]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 80182f6:	f043 0302 	orr.w	r3, r3, #2
 80182fa:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 80182fe:	4b25      	ldr	r3, [pc, #148]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018300:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018304:	4a23      	ldr	r2, [pc, #140]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018306:	f043 0320 	orr.w	r3, r3, #32
 801830a:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 801830e:	4b21      	ldr	r3, [pc, #132]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018314:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018318:	4a1e      	ldr	r2, [pc, #120]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 801831a:	f043 0301 	orr.w	r3, r3, #1
 801831e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018322:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8018326:	4b1b      	ldr	r3, [pc, #108]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801832c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018330:	4a18      	ldr	r2, [pc, #96]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 8018332:	f043 0301 	orr.w	r3, r3, #1
 8018336:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801833a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	795b      	ldrb	r3, [r3, #5]
 8018342:	021b      	lsls	r3, r3, #8
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	7912      	ldrb	r2, [r2, #4]
 8018348:	4611      	mov	r1, r2
 801834a:	4a12      	ldr	r2, [pc, #72]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
 801834c:	430b      	orrs	r3, r1
 801834e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	78db      	ldrb	r3, [r3, #3]
 8018356:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	789b      	ldrb	r3, [r3, #2]
 801835c:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801835e:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	785b      	ldrb	r3, [r3, #1]
 8018364:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8018366:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8018368:	687a      	ldr	r2, [r7, #4]
 801836a:	7812      	ldrb	r2, [r2, #0]
 801836c:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801836e:	4a09      	ldr	r2, [pc, #36]	@ (8018394 <mg_tcpip_driver_stm32h_init+0x25c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8018370:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8018372:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8018376:	2301      	movs	r3, #1
}
 8018378:	4618      	mov	r0, r3
 801837a:	3728      	adds	r7, #40	@ 0x28
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	24003e7c 	.word	0x24003e7c
 8018384:	24000e5c 	.word	0x24000e5c
 8018388:	24000ddc 	.word	0x24000ddc
 801838c:	2400266c 	.word	0x2400266c
 8018390:	24000e1c 	.word	0x24000e1c
 8018394:	40028000 	.word	0x40028000
 8018398:	0802b164 	.word	0x0802b164
 801839c:	24000e0c 	.word	0x24000e0c

080183a0 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b088      	sub	sp, #32
 80183a4:	af02      	add	r7, sp, #8
 80183a6:	60f8      	str	r0, [r7, #12]
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 80183ac:	68bb      	ldr	r3, [r7, #8]
 80183ae:	f240 6204 	movw	r2, #1540	@ 0x604
 80183b2:	4293      	cmp	r3, r2
 80183b4:	d912      	bls.n	80183dc <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 80183b6:	4b5d      	ldr	r3, [pc, #372]	@ (801852c <mg_tcpip_driver_stm32h_tx+0x18c>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	dd0b      	ble.n	80183d6 <mg_tcpip_driver_stm32h_tx+0x36>
 80183be:	4b5c      	ldr	r3, [pc, #368]	@ (8018530 <mg_tcpip_driver_stm32h_tx+0x190>)
 80183c0:	f244 72e0 	movw	r2, #18400	@ 0x47e0
 80183c4:	495b      	ldr	r1, [pc, #364]	@ (8018534 <mg_tcpip_driver_stm32h_tx+0x194>)
 80183c6:	2001      	movs	r0, #1
 80183c8:	f7ef fe2e 	bl	8008028 <mg_log_prefix>
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	4619      	mov	r1, r3
 80183d0:	4859      	ldr	r0, [pc, #356]	@ (8018538 <mg_tcpip_driver_stm32h_tx+0x198>)
 80183d2:	f7ef fe79 	bl	80080c8 <mg_log>
    len = 0;  // Frame is too big
 80183d6:	2300      	movs	r3, #0
 80183d8:	60bb      	str	r3, [r7, #8]
 80183da:	e08b      	b.n	80184f4 <mg_tcpip_driver_stm32h_tx+0x154>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 80183dc:	4b57      	ldr	r3, [pc, #348]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	4a57      	ldr	r2, [pc, #348]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80183e2:	011b      	lsls	r3, r3, #4
 80183e4:	4413      	add	r3, r2
 80183e6:	330c      	adds	r3, #12
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	da48      	bge.n	8018480 <mg_tcpip_driver_stm32h_tx+0xe0>
    ifp->nerr++;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80183f2:	1c5a      	adds	r2, r3, #1
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	679a      	str	r2, [r3, #120]	@ 0x78
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 80183f8:	4b4c      	ldr	r3, [pc, #304]	@ (801852c <mg_tcpip_driver_stm32h_tx+0x18c>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	dd1e      	ble.n	801843e <mg_tcpip_driver_stm32h_tx+0x9e>
 8018400:	4b4b      	ldr	r3, [pc, #300]	@ (8018530 <mg_tcpip_driver_stm32h_tx+0x190>)
 8018402:	f244 72e4 	movw	r2, #18404	@ 0x47e4
 8018406:	494b      	ldr	r1, [pc, #300]	@ (8018534 <mg_tcpip_driver_stm32h_tx+0x194>)
 8018408:	2001      	movs	r0, #1
 801840a:	f7ef fe0d 	bl	8008028 <mg_log_prefix>
 801840e:	4b4b      	ldr	r3, [pc, #300]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018410:	6819      	ldr	r1, [r3, #0]
 8018412:	4b4a      	ldr	r3, [pc, #296]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	4a4a      	ldr	r2, [pc, #296]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8018418:	011b      	lsls	r3, r3, #4
 801841a:	4413      	add	r3, r2
 801841c:	330c      	adds	r3, #12
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	4b48      	ldr	r3, [pc, #288]	@ (8018544 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018426:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 801842a:	4b46      	ldr	r3, [pc, #280]	@ (8018544 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 801842c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018430:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018434:	9300      	str	r3, [sp, #0]
 8018436:	4603      	mov	r3, r0
 8018438:	4843      	ldr	r0, [pc, #268]	@ (8018548 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 801843a:	f7ef fe45 	bl	80080c8 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 801843e:	2300      	movs	r3, #0
 8018440:	617b      	str	r3, [r7, #20]
 8018442:	e017      	b.n	8018474 <mg_tcpip_driver_stm32h_tx+0xd4>
 8018444:	4b39      	ldr	r3, [pc, #228]	@ (801852c <mg_tcpip_driver_stm32h_tx+0x18c>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2b00      	cmp	r3, #0
 801844a:	dd10      	ble.n	801846e <mg_tcpip_driver_stm32h_tx+0xce>
 801844c:	4b38      	ldr	r3, [pc, #224]	@ (8018530 <mg_tcpip_driver_stm32h_tx+0x190>)
 801844e:	f244 72e6 	movw	r2, #18406	@ 0x47e6
 8018452:	4938      	ldr	r1, [pc, #224]	@ (8018534 <mg_tcpip_driver_stm32h_tx+0x194>)
 8018454:	2001      	movs	r0, #1
 8018456:	f7ef fde7 	bl	8008028 <mg_log_prefix>
 801845a:	4a39      	ldr	r2, [pc, #228]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	011b      	lsls	r3, r3, #4
 8018460:	4413      	add	r3, r2
 8018462:	330c      	adds	r3, #12
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4619      	mov	r1, r3
 8018468:	4838      	ldr	r0, [pc, #224]	@ (801854c <mg_tcpip_driver_stm32h_tx+0x1ac>)
 801846a:	f7ef fe2d 	bl	80080c8 <mg_log>
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	3301      	adds	r3, #1
 8018472:	617b      	str	r3, [r7, #20]
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	2b03      	cmp	r3, #3
 8018478:	dde4      	ble.n	8018444 <mg_tcpip_driver_stm32h_tx+0xa4>
    len = 0;  // All descriptors are busy, fail
 801847a:	2300      	movs	r3, #0
 801847c:	60bb      	str	r3, [r7, #8]
 801847e:	e039      	b.n	80184f4 <mg_tcpip_driver_stm32h_tx+0x154>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 8018480:	4b2e      	ldr	r3, [pc, #184]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f240 6204 	movw	r2, #1540	@ 0x604
 8018488:	fb02 f303 	mul.w	r3, r2, r3
 801848c:	4a30      	ldr	r2, [pc, #192]	@ (8018550 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 801848e:	4413      	add	r3, r2
 8018490:	68ba      	ldr	r2, [r7, #8]
 8018492:	68f9      	ldr	r1, [r7, #12]
 8018494:	4618      	mov	r0, r3
 8018496:	f00c fe2c 	bl	80250f2 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 801849a:	4b28      	ldr	r3, [pc, #160]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	4a28      	ldr	r2, [pc, #160]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80184a0:	011b      	lsls	r3, r3, #4
 80184a2:	4413      	add	r3, r2
 80184a4:	3308      	adds	r3, #8
 80184a6:	68ba      	ldr	r2, [r7, #8]
 80184a8:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 80184aa:	4b24      	ldr	r3, [pc, #144]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	4a24      	ldr	r2, [pc, #144]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80184b0:	011b      	lsls	r3, r3, #4
 80184b2:	4413      	add	r3, r2
 80184b4:	330c      	adds	r3, #12
 80184b6:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80184ba:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 80184bc:	4b1f      	ldr	r3, [pc, #124]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	4a1f      	ldr	r2, [pc, #124]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80184c2:	011b      	lsls	r3, r3, #4
 80184c4:	4413      	add	r3, r2
 80184c6:	330c      	adds	r3, #12
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	4b1c      	ldr	r3, [pc, #112]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80184d2:	491b      	ldr	r1, [pc, #108]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80184d4:	011b      	lsls	r3, r3, #4
 80184d6:	440b      	add	r3, r1
 80184d8:	330c      	adds	r3, #12
 80184da:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80184dc:	4b17      	ldr	r3, [pc, #92]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	3301      	adds	r3, #1
 80184e2:	4a16      	ldr	r2, [pc, #88]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184e4:	6013      	str	r3, [r2, #0]
 80184e6:	4b15      	ldr	r3, [pc, #84]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	2b03      	cmp	r3, #3
 80184ec:	d902      	bls.n	80184f4 <mg_tcpip_driver_stm32h_tx+0x154>
 80184ee:	4b13      	ldr	r3, [pc, #76]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80184f0:	2200      	movs	r2, #0
 80184f2:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 80184f4:	4b13      	ldr	r3, [pc, #76]	@ (8018544 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80184f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80184fe:	4a11      	ldr	r2, [pc, #68]	@ (8018544 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018500:	f043 0306 	orr.w	r3, r3, #6
 8018504:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018508:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 801850c:	4b0b      	ldr	r3, [pc, #44]	@ (801853c <mg_tcpip_driver_stm32h_tx+0x19c>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	011b      	lsls	r3, r3, #4
 8018512:	4a0b      	ldr	r2, [pc, #44]	@ (8018540 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8018514:	441a      	add	r2, r3
 8018516:	4b0b      	ldr	r3, [pc, #44]	@ (8018544 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801851c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 8018520:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 8018522:	4618      	mov	r0, r3
 8018524:	3718      	adds	r7, #24
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop
 801852c:	24000240 	.word	0x24000240
 8018530:	0802c3d4 	.word	0x0802c3d4
 8018534:	08028ac4 	.word	0x08028ac4
 8018538:	0802b16c 	.word	0x0802b16c
 801853c:	24003e80 	.word	0x24003e80
 8018540:	24000e1c 	.word	0x24000e1c
 8018544:	40028000 	.word	0x40028000
 8018548:	0802b180 	.word	0x0802b180
 801854c:	0802b1a8 	.word	0x0802b1a8
 8018550:	2400266c 	.word	0x2400266c

08018554 <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 8018554:	b580      	push	{r7, lr}
 8018556:	b088      	sub	sp, #32
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018560:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8018562:	69bb      	ldr	r3, [r7, #24]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d002      	beq.n	801856e <mg_tcpip_driver_stm32h_up+0x1a>
 8018568:	69bb      	ldr	r3, [r7, #24]
 801856a:	791b      	ldrb	r3, [r3, #4]
 801856c:	e000      	b.n	8018570 <mg_tcpip_driver_stm32h_up+0x1c>
 801856e:	2300      	movs	r3, #0
 8018570:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 8018572:	2300      	movs	r3, #0
 8018574:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 8018576:	2300      	movs	r3, #0
 8018578:	75bb      	strb	r3, [r7, #22]
 801857a:	2300      	movs	r3, #0
 801857c:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 801857e:	4a2b      	ldr	r2, [pc, #172]	@ (801862c <mg_tcpip_driver_stm32h_up+0xd8>)
 8018580:	f107 030c 	add.w	r3, r7, #12
 8018584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018588:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 801858c:	f107 0315 	add.w	r3, r7, #21
 8018590:	f107 0214 	add.w	r2, r7, #20
 8018594:	7df9      	ldrb	r1, [r7, #23]
 8018596:	f107 000c 	add.w	r0, r7, #12
 801859a:	f7ff fc61 	bl	8017e60 <mg_phy_up>
 801859e:	4603      	mov	r3, r0
 80185a0:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d13a      	bne.n	8018622 <mg_tcpip_driver_stm32h_up+0xce>
 80185ac:	7dbb      	ldrb	r3, [r7, #22]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d037      	beq.n	8018622 <mg_tcpip_driver_stm32h_up+0xce>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80185b2:	4b1f      	ldr	r3, [pc, #124]	@ (8018630 <mg_tcpip_driver_stm32h_up+0xdc>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80185ba:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80185bc:	7d7b      	ldrb	r3, [r7, #21]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d103      	bne.n	80185ca <mg_tcpip_driver_stm32h_up+0x76>
 80185c2:	69fb      	ldr	r3, [r7, #28]
 80185c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80185c8:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 80185ca:	7d3b      	ldrb	r3, [r7, #20]
 80185cc:	f083 0301 	eor.w	r3, r3, #1
 80185d0:	b2db      	uxtb	r3, r3
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d003      	beq.n	80185de <mg_tcpip_driver_stm32h_up+0x8a>
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80185dc:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80185de:	4a14      	ldr	r2, [pc, #80]	@ (8018630 <mg_tcpip_driver_stm32h_up+0xdc>)
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80185e4:	4b13      	ldr	r3, [pc, #76]	@ (8018634 <mg_tcpip_driver_stm32h_up+0xe0>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2b02      	cmp	r3, #2
 80185ea:	dd1a      	ble.n	8018622 <mg_tcpip_driver_stm32h_up+0xce>
 80185ec:	4b12      	ldr	r3, [pc, #72]	@ (8018638 <mg_tcpip_driver_stm32h_up+0xe4>)
 80185ee:	f644 0205 	movw	r2, #18437	@ 0x4805
 80185f2:	4912      	ldr	r1, [pc, #72]	@ (801863c <mg_tcpip_driver_stm32h_up+0xe8>)
 80185f4:	2003      	movs	r0, #3
 80185f6:	f7ef fd17 	bl	8008028 <mg_log_prefix>
 80185fa:	69fb      	ldr	r3, [r7, #28]
 80185fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018600:	2b00      	cmp	r3, #0
 8018602:	d001      	beq.n	8018608 <mg_tcpip_driver_stm32h_up+0xb4>
 8018604:	2164      	movs	r1, #100	@ 0x64
 8018606:	e000      	b.n	801860a <mg_tcpip_driver_stm32h_up+0xb6>
 8018608:	210a      	movs	r1, #10
 801860a:	69fb      	ldr	r3, [r7, #28]
 801860c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018610:	2b00      	cmp	r3, #0
 8018612:	d001      	beq.n	8018618 <mg_tcpip_driver_stm32h_up+0xc4>
 8018614:	4b0a      	ldr	r3, [pc, #40]	@ (8018640 <mg_tcpip_driver_stm32h_up+0xec>)
 8018616:	e000      	b.n	801861a <mg_tcpip_driver_stm32h_up+0xc6>
 8018618:	4b0a      	ldr	r3, [pc, #40]	@ (8018644 <mg_tcpip_driver_stm32h_up+0xf0>)
 801861a:	461a      	mov	r2, r3
 801861c:	480a      	ldr	r0, [pc, #40]	@ (8018648 <mg_tcpip_driver_stm32h_up+0xf4>)
 801861e:	f7ef fd53 	bl	80080c8 <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 8018622:	7dbb      	ldrb	r3, [r7, #22]
}
 8018624:	4618      	mov	r0, r3
 8018626:	3720      	adds	r7, #32
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}
 801862c:	0802b164 	.word	0x0802b164
 8018630:	40028000 	.word	0x40028000
 8018634:	24000240 	.word	0x24000240
 8018638:	0802c3f0 	.word	0x0802c3f0
 801863c:	08028ac4 	.word	0x08028ac4
 8018640:	0802b1b0 	.word	0x0802b1b0
 8018644:	0802b1b8 	.word	0x0802b1b8
 8018648:	0802b1c0 	.word	0x0802b1c0

0801864c <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 801864c:	b580      	push	{r7, lr}
 801864e:	b082      	sub	sp, #8
 8018650:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8018652:	4b40      	ldr	r3, [pc, #256]	@ (8018754 <ETH_IRQHandler+0x108>)
 8018654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018658:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801865c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018660:	2b00      	cmp	r3, #0
 8018662:	d065      	beq.n	8018730 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8018664:	4b3b      	ldr	r3, [pc, #236]	@ (8018754 <ETH_IRQHandler+0x108>)
 8018666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801866a:	461a      	mov	r2, r3
 801866c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018670:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8018674:	2300      	movs	r3, #0
 8018676:	607b      	str	r3, [r7, #4]
 8018678:	e055      	b.n	8018726 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 801867a:	4b37      	ldr	r3, [pc, #220]	@ (8018758 <ETH_IRQHandler+0x10c>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	4a37      	ldr	r2, [pc, #220]	@ (801875c <ETH_IRQHandler+0x110>)
 8018680:	011b      	lsls	r3, r3, #4
 8018682:	4413      	add	r3, r2
 8018684:	330c      	adds	r3, #12
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	2b00      	cmp	r3, #0
 801868a:	db50      	blt.n	801872e <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 801868c:	4b32      	ldr	r3, [pc, #200]	@ (8018758 <ETH_IRQHandler+0x10c>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	4a32      	ldr	r2, [pc, #200]	@ (801875c <ETH_IRQHandler+0x110>)
 8018692:	011b      	lsls	r3, r3, #4
 8018694:	4413      	add	r3, r2
 8018696:	330c      	adds	r3, #12
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801869e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80186a2:	d128      	bne.n	80186f6 <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 80186a4:	4b2c      	ldr	r3, [pc, #176]	@ (8018758 <ETH_IRQHandler+0x10c>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	4a2c      	ldr	r2, [pc, #176]	@ (801875c <ETH_IRQHandler+0x110>)
 80186aa:	011b      	lsls	r3, r3, #4
 80186ac:	4413      	add	r3, r2
 80186ae:	330c      	adds	r3, #12
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d11d      	bne.n	80186f6 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80186ba:	4b27      	ldr	r3, [pc, #156]	@ (8018758 <ETH_IRQHandler+0x10c>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4a27      	ldr	r2, [pc, #156]	@ (801875c <ETH_IRQHandler+0x110>)
 80186c0:	011b      	lsls	r3, r3, #4
 80186c2:	4413      	add	r3, r2
 80186c4:	330c      	adds	r3, #12
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80186cc:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80186ce:	4b22      	ldr	r3, [pc, #136]	@ (8018758 <ETH_IRQHandler+0x10c>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	f240 6204 	movw	r2, #1540	@ 0x604
 80186d6:	fb02 f303 	mul.w	r3, r2, r3
 80186da:	4a21      	ldr	r2, [pc, #132]	@ (8018760 <ETH_IRQHandler+0x114>)
 80186dc:	1898      	adds	r0, r3, r2
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	2b04      	cmp	r3, #4
 80186e2:	d902      	bls.n	80186ea <ETH_IRQHandler+0x9e>
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	3b04      	subs	r3, #4
 80186e8:	e000      	b.n	80186ec <ETH_IRQHandler+0xa0>
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	4a1d      	ldr	r2, [pc, #116]	@ (8018764 <ETH_IRQHandler+0x118>)
 80186ee:	6812      	ldr	r2, [r2, #0]
 80186f0:	4619      	mov	r1, r3
 80186f2:	f7f4 f8fd 	bl	800c8f0 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80186f6:	4b18      	ldr	r3, [pc, #96]	@ (8018758 <ETH_IRQHandler+0x10c>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	4a18      	ldr	r2, [pc, #96]	@ (801875c <ETH_IRQHandler+0x110>)
 80186fc:	011b      	lsls	r3, r3, #4
 80186fe:	4413      	add	r3, r2
 8018700:	330c      	adds	r3, #12
 8018702:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8018706:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8018708:	4b13      	ldr	r3, [pc, #76]	@ (8018758 <ETH_IRQHandler+0x10c>)
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	3301      	adds	r3, #1
 801870e:	4a12      	ldr	r2, [pc, #72]	@ (8018758 <ETH_IRQHandler+0x10c>)
 8018710:	6013      	str	r3, [r2, #0]
 8018712:	4b11      	ldr	r3, [pc, #68]	@ (8018758 <ETH_IRQHandler+0x10c>)
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2b03      	cmp	r3, #3
 8018718:	d902      	bls.n	8018720 <ETH_IRQHandler+0xd4>
 801871a:	4b0f      	ldr	r3, [pc, #60]	@ (8018758 <ETH_IRQHandler+0x10c>)
 801871c:	2200      	movs	r2, #0
 801871e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	3301      	adds	r3, #1
 8018724:	607b      	str	r3, [r7, #4]
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	2b09      	cmp	r3, #9
 801872a:	d9a6      	bls.n	801867a <ETH_IRQHandler+0x2e>
 801872c:	e000      	b.n	8018730 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 801872e:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8018730:	4b08      	ldr	r3, [pc, #32]	@ (8018754 <ETH_IRQHandler+0x108>)
 8018732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018736:	461a      	mov	r2, r3
 8018738:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801873c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8018740:	4a04      	ldr	r2, [pc, #16]	@ (8018754 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8018742:	4b09      	ldr	r3, [pc, #36]	@ (8018768 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8018744:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018748:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 801874c:	bf00      	nop
 801874e:	3708      	adds	r7, #8
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}
 8018754:	40028000 	.word	0x40028000
 8018758:	24003e84 	.word	0x24003e84
 801875c:	24000ddc 	.word	0x24000ddc
 8018760:	24000e5c 	.word	0x24000e5c
 8018764:	24003e7c 	.word	0x24003e7c
 8018768:	24000e0c 	.word	0x24000e0c

0801876c <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1729663508},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 801876c:	b480      	push	{r7}
 801876e:	b083      	sub	sp, #12
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
 8018774:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 8018776:	e005      	b.n	8018784 <scmp+0x18>
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	3301      	adds	r3, #1
 801877c:	607b      	str	r3, [r7, #4]
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	3301      	adds	r3, #1
 8018782:	603b      	str	r3, [r7, #0]
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d005      	beq.n	8018798 <scmp+0x2c>
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	781a      	ldrb	r2, [r3, #0]
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	429a      	cmp	r2, r3
 8018796:	d0ef      	beq.n	8018778 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	461a      	mov	r2, r3
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	1ad3      	subs	r3, r2, r3
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	370c      	adds	r7, #12
 80187a8:	46bd      	mov	sp, r7
 80187aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ae:	4770      	bx	lr

080187b0 <mg_unlist>:
const char *mg_unlist(size_t no) {
 80187b0:	b480      	push	{r7}
 80187b2:	b083      	sub	sp, #12
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 80187b8:	4906      	ldr	r1, [pc, #24]	@ (80187d4 <mg_unlist+0x24>)
 80187ba:	687a      	ldr	r2, [r7, #4]
 80187bc:	4613      	mov	r3, r2
 80187be:	005b      	lsls	r3, r3, #1
 80187c0:	4413      	add	r3, r2
 80187c2:	00db      	lsls	r3, r3, #3
 80187c4:	440b      	add	r3, r1
 80187c6:	681b      	ldr	r3, [r3, #0]
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	370c      	adds	r7, #12
 80187cc:	46bd      	mov	sp, r7
 80187ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d2:	4770      	bx	lr
 80187d4:	080381d8 	.word	0x080381d8

080187d8 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 80187d8:	b580      	push	{r7, lr}
 80187da:	b086      	sub	sp, #24
 80187dc:	af00      	add	r7, sp, #0
 80187de:	60f8      	str	r0, [r7, #12]
 80187e0:	60b9      	str	r1, [r7, #8]
 80187e2:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 80187e4:	4b16      	ldr	r3, [pc, #88]	@ (8018840 <mg_unpack+0x68>)
 80187e6:	617b      	str	r3, [r7, #20]
 80187e8:	e020      	b.n	801882c <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 80187ea:	697b      	ldr	r3, [r7, #20]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	68f9      	ldr	r1, [r7, #12]
 80187f0:	4618      	mov	r0, r3
 80187f2:	f7ff ffbb 	bl	801876c <scmp>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d113      	bne.n	8018824 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 80187fc:	68bb      	ldr	r3, [r7, #8]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d004      	beq.n	801880c <mg_unpack+0x34>
 8018802:	697b      	ldr	r3, [r7, #20]
 8018804:	689b      	ldr	r3, [r3, #8]
 8018806:	1e5a      	subs	r2, r3, #1
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d005      	beq.n	801881e <mg_unpack+0x46>
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018818:	6879      	ldr	r1, [r7, #4]
 801881a:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	685b      	ldr	r3, [r3, #4]
 8018822:	e008      	b.n	8018836 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8018824:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8018826:	697b      	ldr	r3, [r7, #20]
 8018828:	3318      	adds	r3, #24
 801882a:	617b      	str	r3, [r7, #20]
 801882c:	697b      	ldr	r3, [r7, #20]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d1da      	bne.n	80187ea <mg_unpack+0x12>
  }
  return NULL;
 8018834:	2300      	movs	r3, #0
}
 8018836:	4618      	mov	r0, r3
 8018838:	3718      	adds	r7, #24
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	080381d8 	.word	0x080381d8

08018844 <timer_fn_3>:
}
void glue_init_2(void) {
	  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, timer_fn_2, NULL);
  MG_DEBUG(("Custom init done"));
}
static void timer_fn_3(void *arg) {
 8018844:	b580      	push	{r7, lr}
 8018846:	b09c      	sub	sp, #112	@ 0x70
 8018848:	af02      	add	r7, sp, #8
 801884a:	60f8      	str	r0, [r7, #12]
	 int random_value = rand() % 101;
 801884c:	f00b f95e 	bl	8023b0c <rand>
 8018850:	4603      	mov	r3, r0
 8018852:	4a25      	ldr	r2, [pc, #148]	@ (80188e8 <timer_fn_3+0xa4>)
 8018854:	fb82 1203 	smull	r1, r2, r2, r3
 8018858:	1111      	asrs	r1, r2, #4
 801885a:	17da      	asrs	r2, r3, #31
 801885c:	1a8a      	subs	r2, r1, r2
 801885e:	2165      	movs	r1, #101	@ 0x65
 8018860:	fb01 f202 	mul.w	r2, r1, r2
 8018864:	1a9b      	subs	r3, r3, r2
 8018866:	667b      	str	r3, [r7, #100]	@ 0x64
	 if (g_mqtt_conn != NULL) {
 8018868:	4b20      	ldr	r3, [pc, #128]	@ (80188ec <timer_fn_3+0xa8>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d036      	beq.n	80188de <timer_fn_3+0x9a>
	    struct mg_mqtt_opts opts;
	    char msg[16];
	    snprintf(msg, sizeof(msg), "%.2f", scaledValue);  // Format float as string
 8018870:	4b1f      	ldr	r3, [pc, #124]	@ (80188f0 <timer_fn_3+0xac>)
 8018872:	edd3 7a00 	vldr	s15, [r3]
 8018876:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801887a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801887e:	ed8d 7b00 	vstr	d7, [sp]
 8018882:	4a1c      	ldr	r2, [pc, #112]	@ (80188f4 <timer_fn_3+0xb0>)
 8018884:	2110      	movs	r1, #16
 8018886:	4618      	mov	r0, r3
 8018888:	f00c f992 	bl	8024bb0 <sniprintf>
	    memset(&opts, 0, sizeof(opts));
 801888c:	f107 0314 	add.w	r3, r7, #20
 8018890:	2240      	movs	r2, #64	@ 0x40
 8018892:	2100      	movs	r1, #0
 8018894:	4618      	mov	r0, r3
 8018896:	f00c fae1 	bl	8024e5c <memset>
	    opts.topic = mg_str("nodered/d2/s3");
 801889a:	463b      	mov	r3, r7
 801889c:	4916      	ldr	r1, [pc, #88]	@ (80188f8 <timer_fn_3+0xb4>)
 801889e:	4618      	mov	r0, r3
 80188a0:	f7f6 fa8a 	bl	800edb8 <mg_str_s>
 80188a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80188a8:	463a      	mov	r2, r7
 80188aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80188ae:	e883 0003 	stmia.w	r3, {r0, r1}
	    opts.message = mg_str(msg);
 80188b2:	463b      	mov	r3, r7
 80188b4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80188b8:	4611      	mov	r1, r2
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7f6 fa7c 	bl	800edb8 <mg_str_s>
 80188c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80188c4:	463a      	mov	r2, r7
 80188c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80188ca:	e883 0003 	stmia.w	r3, {r0, r1}
	    mg_mqtt_pub(g_mqtt_conn, &opts);
 80188ce:	4b07      	ldr	r3, [pc, #28]	@ (80188ec <timer_fn_3+0xa8>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	f107 0214 	add.w	r2, r7, #20
 80188d6:	4611      	mov	r1, r2
 80188d8:	4618      	mov	r0, r3
 80188da:	f7f0 f935 	bl	8008b48 <mg_mqtt_pub>
}
}
 80188de:	bf00      	nop
 80188e0:	3768      	adds	r7, #104	@ 0x68
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	bf00      	nop
 80188e8:	288df0cb 	.word	0x288df0cb
 80188ec:	24003f7c 	.word	0x24003f7c
 80188f0:	24000b54 	.word	0x24000b54
 80188f4:	0802b244 	.word	0x0802b244
 80188f8:	0802b24c 	.word	0x0802b24c

080188fc <glue_init_3>:

void glue_init_3(void) {
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af04      	add	r7, sp, #16
	  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, timer_fn_3, NULL);
 8018902:	2300      	movs	r3, #0
 8018904:	9302      	str	r3, [sp, #8]
 8018906:	4b0d      	ldr	r3, [pc, #52]	@ (801893c <glue_init_3+0x40>)
 8018908:	9301      	str	r3, [sp, #4]
 801890a:	2301      	movs	r3, #1
 801890c:	9300      	str	r3, [sp, #0]
 801890e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018912:	f04f 0300 	mov.w	r3, #0
 8018916:	480a      	ldr	r0, [pc, #40]	@ (8018940 <glue_init_3+0x44>)
 8018918:	f7f1 f95a 	bl	8009bd0 <mg_timer_add>
  MG_DEBUG(("Custom init done"));
 801891c:	4b09      	ldr	r3, [pc, #36]	@ (8018944 <glue_init_3+0x48>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	2b02      	cmp	r3, #2
 8018922:	dd08      	ble.n	8018936 <glue_init_3+0x3a>
 8018924:	4b08      	ldr	r3, [pc, #32]	@ (8018948 <glue_init_3+0x4c>)
 8018926:	229c      	movs	r2, #156	@ 0x9c
 8018928:	4908      	ldr	r1, [pc, #32]	@ (801894c <glue_init_3+0x50>)
 801892a:	2003      	movs	r0, #3
 801892c:	f7ef fb7c 	bl	8008028 <mg_log_prefix>
 8018930:	4807      	ldr	r0, [pc, #28]	@ (8018950 <glue_init_3+0x54>)
 8018932:	f7ef fbc9 	bl	80080c8 <mg_log>
}
 8018936:	bf00      	nop
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}
 801893c:	08018845 	.word	0x08018845
 8018940:	24003f20 	.word	0x24003f20
 8018944:	24000240 	.word	0x24000240
 8018948:	08038208 	.word	0x08038208
 801894c:	0802b204 	.word	0x0802b204
 8018950:	0802b220 	.word	0x0802b220

08018954 <glue_mqtt_tls_init>:
}

void glue_unlock(void) {  // Unlock mutex. Implement only if you use MQTT publish
}

void glue_mqtt_tls_init(struct mg_connection *c) {
 8018954:	b580      	push	{r7, lr}
 8018956:	b08c      	sub	sp, #48	@ 0x30
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
  bool is_tls = mg_url_is_ssl(WIZARD_MQTT_URL);
 801895c:	481a      	ldr	r0, [pc, #104]	@ (80189c8 <glue_mqtt_tls_init+0x74>)
 801895e:	f7fe ff0d 	bl	801777c <mg_url_is_ssl>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	bf14      	ite	ne
 8018968:	2301      	movne	r3, #1
 801896a:	2300      	moveq	r3, #0
 801896c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  MG_DEBUG(("%lu TLS enabled: %s", c->id, is_tls ? "yes" : "no"));
 8018970:	4b16      	ldr	r3, [pc, #88]	@ (80189cc <glue_mqtt_tls_init+0x78>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	2b02      	cmp	r3, #2
 8018976:	dd12      	ble.n	801899e <glue_mqtt_tls_init+0x4a>
 8018978:	4b15      	ldr	r3, [pc, #84]	@ (80189d0 <glue_mqtt_tls_init+0x7c>)
 801897a:	22af      	movs	r2, #175	@ 0xaf
 801897c:	4915      	ldr	r1, [pc, #84]	@ (80189d4 <glue_mqtt_tls_init+0x80>)
 801897e:	2003      	movs	r0, #3
 8018980:	f7ef fb52 	bl	8008028 <mg_log_prefix>
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801898c:	2b00      	cmp	r3, #0
 801898e:	d001      	beq.n	8018994 <glue_mqtt_tls_init+0x40>
 8018990:	4b11      	ldr	r3, [pc, #68]	@ (80189d8 <glue_mqtt_tls_init+0x84>)
 8018992:	e000      	b.n	8018996 <glue_mqtt_tls_init+0x42>
 8018994:	4b11      	ldr	r3, [pc, #68]	@ (80189dc <glue_mqtt_tls_init+0x88>)
 8018996:	461a      	mov	r2, r3
 8018998:	4811      	ldr	r0, [pc, #68]	@ (80189e0 <glue_mqtt_tls_init+0x8c>)
 801899a:	f7ef fb95 	bl	80080c8 <mg_log>
  if (is_tls) {
 801899e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d00c      	beq.n	80189c0 <glue_mqtt_tls_init+0x6c>
    struct mg_tls_opts opts;
    memset(&opts, 0, sizeof(opts));
 80189a6:	f107 0308 	add.w	r3, r7, #8
 80189aa:	2224      	movs	r2, #36	@ 0x24
 80189ac:	2100      	movs	r1, #0
 80189ae:	4618      	mov	r0, r3
 80189b0:	f00c fa54 	bl	8024e5c <memset>
    // opts.ca = mg_str(ca_certificate);
    mg_tls_init(c, &opts);
 80189b4:	f107 0308 	add.w	r3, r7, #8
 80189b8:	4619      	mov	r1, r3
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f7f9 fbf6 	bl	80121ac <mg_tls_init>
  }
}
 80189c0:	bf00      	nop
 80189c2:	3730      	adds	r7, #48	@ 0x30
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}
 80189c8:	0802b25c 	.word	0x0802b25c
 80189cc:	24000240 	.word	0x24000240
 80189d0:	08038214 	.word	0x08038214
 80189d4:	0802b204 	.word	0x0802b204
 80189d8:	0802b278 	.word	0x0802b278
 80189dc:	0802b27c 	.word	0x0802b27c
 80189e0:	0802b280 	.word	0x0802b280

080189e4 <glue_mqtt_on_connect>:

// Called when we connected to the MQTT server
void glue_mqtt_on_connect(struct mg_connection *c, int code) {
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b096      	sub	sp, #88	@ 0x58
 80189e8:	af02      	add	r7, sp, #8
 80189ea:	60f8      	str	r0, [r7, #12]
 80189ec:	60b9      	str	r1, [r7, #8]
  struct mg_mqtt_opts opts;
  memset(&opts, 0, sizeof(opts));
 80189ee:	f107 0310 	add.w	r3, r7, #16
 80189f2:	2240      	movs	r2, #64	@ 0x40
 80189f4:	2100      	movs	r1, #0
 80189f6:	4618      	mov	r0, r3
 80189f8:	f00c fa30 	bl	8024e5c <memset>
  opts.qos = 1;
 80189fc:	2301      	movs	r3, #1
 80189fe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

  opts.topic = mg_str("device1/rx");
 8018a02:	463b      	mov	r3, r7
 8018a04:	4914      	ldr	r1, [pc, #80]	@ (8018a58 <glue_mqtt_on_connect+0x74>)
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7f6 f9d6 	bl	800edb8 <mg_str_s>
 8018a0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018a10:	463a      	mov	r2, r7
 8018a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a16:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_mqtt_sub(c, &opts);
 8018a1a:	f107 0310 	add.w	r3, r7, #16
 8018a1e:	4619      	mov	r1, r3
 8018a20:	68f8      	ldr	r0, [r7, #12]
 8018a22:	f7f0 f95f 	bl	8008ce4 <mg_mqtt_sub>
  MG_DEBUG(("%lu code %d. Subscribing to [%.*s]", c->id, code, opts.topic.len,
 8018a26:	4b0d      	ldr	r3, [pc, #52]	@ (8018a5c <glue_mqtt_on_connect+0x78>)
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	2b02      	cmp	r3, #2
 8018a2c:	dd0f      	ble.n	8018a4e <glue_mqtt_on_connect+0x6a>
 8018a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8018a60 <glue_mqtt_on_connect+0x7c>)
 8018a30:	22c0      	movs	r2, #192	@ 0xc0
 8018a32:	490c      	ldr	r1, [pc, #48]	@ (8018a64 <glue_mqtt_on_connect+0x80>)
 8018a34:	2003      	movs	r0, #3
 8018a36:	f7ef faf7 	bl	8008028 <mg_log_prefix>
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a42:	9300      	str	r3, [sp, #0]
 8018a44:	4613      	mov	r3, r2
 8018a46:	68ba      	ldr	r2, [r7, #8]
 8018a48:	4807      	ldr	r0, [pc, #28]	@ (8018a68 <glue_mqtt_on_connect+0x84>)
 8018a4a:	f7ef fb3d 	bl	80080c8 <mg_log>
            opts.topic.buf));
}
 8018a4e:	bf00      	nop
 8018a50:	3750      	adds	r7, #80	@ 0x50
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd80      	pop	{r7, pc}
 8018a56:	bf00      	nop
 8018a58:	0802b294 	.word	0x0802b294
 8018a5c:	24000240 	.word	0x24000240
 8018a60:	08038228 	.word	0x08038228
 8018a64:	0802b204 	.word	0x0802b204
 8018a68:	0802b2a0 	.word	0x0802b2a0

08018a6c <glue_mqtt_on_message>:

// This function gets called for every received MQTT message
void glue_mqtt_on_message(struct mg_connection *c, struct mg_str topic,
                          struct mg_str data) {
 8018a6c:	b082      	sub	sp, #8
 8018a6e:	b590      	push	{r4, r7, lr}
 8018a70:	b0b5      	sub	sp, #212	@ 0xd4
 8018a72:	af04      	add	r7, sp, #16
 8018a74:	6178      	str	r0, [r7, #20]
 8018a76:	f107 000c 	add.w	r0, r7, #12
 8018a7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8018a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  char tmp[100];
  struct mg_mqtt_opts opts;

  mg_snprintf(tmp, sizeof(tmp), "Got [%.*s] -> [%.*s] !", topic.len, topic.buf,
 8018a82:	693c      	ldr	r4, [r7, #16]
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8018a8a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8018a8e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8018a92:	9102      	str	r1, [sp, #8]
 8018a94:	9201      	str	r2, [sp, #4]
 8018a96:	9300      	str	r3, [sp, #0]
 8018a98:	4623      	mov	r3, r4
 8018a9a:	4a25      	ldr	r2, [pc, #148]	@ (8018b30 <glue_mqtt_on_message+0xc4>)
 8018a9c:	2164      	movs	r1, #100	@ 0x64
 8018a9e:	f7f4 fe79 	bl	800d794 <mg_snprintf>
              data.len, data.buf);
  MG_DEBUG(("%lu %s", c->id, tmp));
 8018aa2:	4b24      	ldr	r3, [pc, #144]	@ (8018b34 <glue_mqtt_on_message+0xc8>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	2b02      	cmp	r3, #2
 8018aa8:	dd0d      	ble.n	8018ac6 <glue_mqtt_on_message+0x5a>
 8018aaa:	4b23      	ldr	r3, [pc, #140]	@ (8018b38 <glue_mqtt_on_message+0xcc>)
 8018aac:	22cc      	movs	r2, #204	@ 0xcc
 8018aae:	4923      	ldr	r1, [pc, #140]	@ (8018b3c <glue_mqtt_on_message+0xd0>)
 8018ab0:	2003      	movs	r0, #3
 8018ab2:	f7ef fab9 	bl	8008028 <mg_log_prefix>
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018aba:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8018abe:	4619      	mov	r1, r3
 8018ac0:	481f      	ldr	r0, [pc, #124]	@ (8018b40 <glue_mqtt_on_message+0xd4>)
 8018ac2:	f7ef fb01 	bl	80080c8 <mg_log>

  // Send response to the TX topic
  if (g_mqtt_conn != NULL) {
 8018ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8018b44 <glue_mqtt_on_message+0xd8>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d028      	beq.n	8018b20 <glue_mqtt_on_message+0xb4>
    memset(&opts, 0, sizeof(opts));
 8018ace:	f107 031c 	add.w	r3, r7, #28
 8018ad2:	2240      	movs	r2, #64	@ 0x40
 8018ad4:	2100      	movs	r1, #0
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f00c f9c0 	bl	8024e5c <memset>
    opts.topic = mg_str("device1/tx");
 8018adc:	463b      	mov	r3, r7
 8018ade:	491a      	ldr	r1, [pc, #104]	@ (8018b48 <glue_mqtt_on_message+0xdc>)
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f7f6 f969 	bl	800edb8 <mg_str_s>
 8018ae6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018aea:	463a      	mov	r2, r7
 8018aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018af0:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.message = mg_str(tmp);
 8018af4:	463b      	mov	r3, r7
 8018af6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8018afa:	4611      	mov	r1, r2
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7f6 f95b 	bl	800edb8 <mg_str_s>
 8018b02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018b06:	463a      	mov	r2, r7
 8018b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b0c:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_mqtt_pub(g_mqtt_conn, &opts);
 8018b10:	4b0c      	ldr	r3, [pc, #48]	@ (8018b44 <glue_mqtt_on_message+0xd8>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f107 021c 	add.w	r2, r7, #28
 8018b18:	4611      	mov	r1, r2
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7f0 f814 	bl	8008b48 <mg_mqtt_pub>
  }
}
 8018b20:	bf00      	nop
 8018b22:	37c4      	adds	r7, #196	@ 0xc4
 8018b24:	46bd      	mov	sp, r7
 8018b26:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018b2a:	b002      	add	sp, #8
 8018b2c:	4770      	bx	lr
 8018b2e:	bf00      	nop
 8018b30:	0802b2c4 	.word	0x0802b2c4
 8018b34:	24000240 	.word	0x24000240
 8018b38:	08038240 	.word	0x08038240
 8018b3c:	0802b204 	.word	0x0802b204
 8018b40:	0802b2dc 	.word	0x0802b2dc
 8018b44:	24003f7c 	.word	0x24003f7c
 8018b48:	0802b2e4 	.word	0x0802b2e4

08018b4c <glue_mqtt_on_cmd>:

void glue_mqtt_on_cmd(struct mg_connection *c, struct mg_mqtt_message *mm) {
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
 8018b54:	6039      	str	r1, [r7, #0]
  MG_DEBUG(("%lu cmd %d qos %d", c->id, mm->cmd, mm->qos));
 8018b56:	4b0c      	ldr	r3, [pc, #48]	@ (8018b88 <glue_mqtt_on_cmd+0x3c>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	2b02      	cmp	r3, #2
 8018b5c:	dd0f      	ble.n	8018b7e <glue_mqtt_on_cmd+0x32>
 8018b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8018b8c <glue_mqtt_on_cmd+0x40>)
 8018b60:	22d8      	movs	r2, #216	@ 0xd8
 8018b62:	490b      	ldr	r1, [pc, #44]	@ (8018b90 <glue_mqtt_on_cmd+0x44>)
 8018b64:	2003      	movs	r0, #3
 8018b66:	f7ef fa5f 	bl	8008028 <mg_log_prefix>
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018b6e:	683b      	ldr	r3, [r7, #0]
 8018b70:	7e9b      	ldrb	r3, [r3, #26]
 8018b72:	461a      	mov	r2, r3
 8018b74:	683b      	ldr	r3, [r7, #0]
 8018b76:	7edb      	ldrb	r3, [r3, #27]
 8018b78:	4806      	ldr	r0, [pc, #24]	@ (8018b94 <glue_mqtt_on_cmd+0x48>)
 8018b7a:	f7ef faa5 	bl	80080c8 <mg_log>
}
 8018b7e:	bf00      	nop
 8018b80:	3708      	adds	r7, #8
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	24000240 	.word	0x24000240
 8018b8c:	08038258 	.word	0x08038258
 8018b90:	0802b204 	.word	0x0802b204
 8018b94:	0802b2f0 	.word	0x0802b2f0

08018b98 <glue_mqtt_connect>:

struct mg_connection *glue_mqtt_connect(struct mg_mgr *mgr,
                                        mg_event_handler_t fn) {
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b098      	sub	sp, #96	@ 0x60
 8018b9c:	af02      	add	r7, sp, #8
 8018b9e:	60f8      	str	r0, [r7, #12]
 8018ba0:	60b9      	str	r1, [r7, #8]
  const char *url = WIZARD_MQTT_URL;
 8018ba2:	4b19      	ldr	r3, [pc, #100]	@ (8018c08 <glue_mqtt_connect+0x70>)
 8018ba4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_mqtt_opts opts;
  memset(&opts, 0, sizeof(opts));
 8018ba6:	f107 0314 	add.w	r3, r7, #20
 8018baa:	2240      	movs	r2, #64	@ 0x40
 8018bac:	2100      	movs	r1, #0
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f00c f954 	bl	8024e5c <memset>
  opts.clean = true;
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  opts.user=mg_str("Sarayu");
 8018bba:	463b      	mov	r3, r7
 8018bbc:	4913      	ldr	r1, [pc, #76]	@ (8018c0c <glue_mqtt_connect+0x74>)
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	f7f6 f8fa 	bl	800edb8 <mg_str_s>
 8018bc4:	f107 0314 	add.w	r3, r7, #20
 8018bc8:	463a      	mov	r2, r7
 8018bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bce:	e883 0003 	stmia.w	r3, {r0, r1}
   opts.pass=mg_str("IOTteam@123");
 8018bd2:	463b      	mov	r3, r7
 8018bd4:	490e      	ldr	r1, [pc, #56]	@ (8018c10 <glue_mqtt_connect+0x78>)
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7f6 f8ee 	bl	800edb8 <mg_str_s>
 8018bdc:	f107 031c 	add.w	r3, r7, #28
 8018be0:	463a      	mov	r2, r7
 8018be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018be6:	e883 0003 	stmia.w	r3, {r0, r1}
  return mg_mqtt_connect(mgr, url, &opts, fn, NULL);
 8018bea:	f107 0214 	add.w	r2, r7, #20
 8018bee:	2300      	movs	r3, #0
 8018bf0:	9300      	str	r3, [sp, #0]
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018bf6:	68f8      	ldr	r0, [r7, #12]
 8018bf8:	f7f0 fb4e 	bl	8009298 <mg_mqtt_connect>
 8018bfc:	4603      	mov	r3, r0
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3758      	adds	r7, #88	@ 0x58
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	0802b25c 	.word	0x0802b25c
 8018c0c:	0802b304 	.word	0x0802b304
 8018c10:	0802b30c 	.word	0x0802b30c

08018c14 <glue_sntp_on_time>:


void glue_sntp_on_time(uint64_t utc_time_in_milliseconds) {
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b084      	sub	sp, #16
 8018c18:	af02      	add	r7, sp, #8
 8018c1a:	e9c7 0100 	strd	r0, r1, [r7]
  MG_INFO(("UTC time in milliseconds from SNTP: %llu, current time: %llu",
 8018c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8018c50 <glue_sntp_on_time+0x3c>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	dd10      	ble.n	8018c48 <glue_sntp_on_time+0x34>
 8018c26:	4b0b      	ldr	r3, [pc, #44]	@ (8018c54 <glue_sntp_on_time+0x40>)
 8018c28:	22e8      	movs	r2, #232	@ 0xe8
 8018c2a:	490b      	ldr	r1, [pc, #44]	@ (8018c58 <glue_sntp_on_time+0x44>)
 8018c2c:	2002      	movs	r0, #2
 8018c2e:	f7ef f9fb 	bl	8008028 <mg_log_prefix>
 8018c32:	f7f5 fdfb 	bl	800e82c <mg_now>
 8018c36:	4602      	mov	r2, r0
 8018c38:	460b      	mov	r3, r1
 8018c3a:	e9cd 2300 	strd	r2, r3, [sp]
 8018c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c42:	4806      	ldr	r0, [pc, #24]	@ (8018c5c <glue_sntp_on_time+0x48>)
 8018c44:	f7ef fa40 	bl	80080c8 <mg_log>
           utc_time_in_milliseconds, mg_now()));
}
 8018c48:	bf00      	nop
 8018c4a:	3708      	adds	r7, #8
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}
 8018c50:	24000240 	.word	0x24000240
 8018c54:	0803826c 	.word	0x0803826c
 8018c58:	0802b204 	.word	0x0802b204
 8018c5c:	0802b318 	.word	0x0802b318

08018c60 <glue_modbus_read_reg>:

// Mock a device that has 5 read/write registers at address 1000
static uint16_t s_modbus_regs[] = {11, 22, 33, 44, 55};
static uint16_t s_modbus_base = 1000;  // Base address of our registers

bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b084      	sub	sp, #16
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	4603      	mov	r3, r0
 8018c68:	6039      	str	r1, [r7, #0]
 8018c6a:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8018c70:	2305      	movs	r3, #5
 8018c72:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8018c74:	4b19      	ldr	r3, [pc, #100]	@ (8018cdc <glue_modbus_read_reg+0x7c>)
 8018c76:	881b      	ldrh	r3, [r3, #0]
 8018c78:	88fa      	ldrh	r2, [r7, #6]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d312      	bcc.n	8018ca4 <glue_modbus_read_reg+0x44>
 8018c7e:	88fa      	ldrh	r2, [r7, #6]
 8018c80:	4b16      	ldr	r3, [pc, #88]	@ (8018cdc <glue_modbus_read_reg+0x7c>)
 8018c82:	881b      	ldrh	r3, [r3, #0]
 8018c84:	4619      	mov	r1, r3
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	440b      	add	r3, r1
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d20a      	bcs.n	8018ca4 <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8018c8e:	88fb      	ldrh	r3, [r7, #6]
 8018c90:	4a12      	ldr	r2, [pc, #72]	@ (8018cdc <glue_modbus_read_reg+0x7c>)
 8018c92:	8812      	ldrh	r2, [r2, #0]
 8018c94:	1a9b      	subs	r3, r3, r2
 8018c96:	4a12      	ldr	r2, [pc, #72]	@ (8018ce0 <glue_modbus_read_reg+0x80>)
 8018c98:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	801a      	strh	r2, [r3, #0]
    success = true;
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, *value));
 8018ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8018ce4 <glue_modbus_read_reg+0x84>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2b01      	cmp	r3, #1
 8018caa:	dd11      	ble.n	8018cd0 <glue_modbus_read_reg+0x70>
 8018cac:	4b0e      	ldr	r3, [pc, #56]	@ (8018ce8 <glue_modbus_read_reg+0x88>)
 8018cae:	22f8      	movs	r2, #248	@ 0xf8
 8018cb0:	490e      	ldr	r1, [pc, #56]	@ (8018cec <glue_modbus_read_reg+0x8c>)
 8018cb2:	2002      	movs	r0, #2
 8018cb4:	f7ef f9b8 	bl	8008028 <mg_log_prefix>
 8018cb8:	7bfb      	ldrb	r3, [r7, #15]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d001      	beq.n	8018cc2 <glue_modbus_read_reg+0x62>
 8018cbe:	490c      	ldr	r1, [pc, #48]	@ (8018cf0 <glue_modbus_read_reg+0x90>)
 8018cc0:	e000      	b.n	8018cc4 <glue_modbus_read_reg+0x64>
 8018cc2:	490c      	ldr	r1, [pc, #48]	@ (8018cf4 <glue_modbus_read_reg+0x94>)
 8018cc4:	88fa      	ldrh	r2, [r7, #6]
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	881b      	ldrh	r3, [r3, #0]
 8018cca:	480b      	ldr	r0, [pc, #44]	@ (8018cf8 <glue_modbus_read_reg+0x98>)
 8018ccc:	f7ef f9fc 	bl	80080c8 <mg_log>
  return success;
 8018cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3710      	adds	r7, #16
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	24000282 	.word	0x24000282
 8018ce0:	24000278 	.word	0x24000278
 8018ce4:	24000240 	.word	0x24000240
 8018ce8:	08038280 	.word	0x08038280
 8018cec:	0802b204 	.word	0x0802b204
 8018cf0:	0802b358 	.word	0x0802b358
 8018cf4:	0802b35c 	.word	0x0802b35c
 8018cf8:	0802b364 	.word	0x0802b364

08018cfc <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b084      	sub	sp, #16
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	4603      	mov	r3, r0
 8018d04:	460a      	mov	r2, r1
 8018d06:	80fb      	strh	r3, [r7, #6]
 8018d08:	4613      	mov	r3, r2
 8018d0a:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8018d10:	2305      	movs	r3, #5
 8018d12:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8018d14:	4b18      	ldr	r3, [pc, #96]	@ (8018d78 <glue_modbus_write_reg+0x7c>)
 8018d16:	881b      	ldrh	r3, [r3, #0]
 8018d18:	88fa      	ldrh	r2, [r7, #6]
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	d311      	bcc.n	8018d42 <glue_modbus_write_reg+0x46>
 8018d1e:	88fa      	ldrh	r2, [r7, #6]
 8018d20:	4b15      	ldr	r3, [pc, #84]	@ (8018d78 <glue_modbus_write_reg+0x7c>)
 8018d22:	881b      	ldrh	r3, [r3, #0]
 8018d24:	4619      	mov	r1, r3
 8018d26:	68bb      	ldr	r3, [r7, #8]
 8018d28:	440b      	add	r3, r1
 8018d2a:	429a      	cmp	r2, r3
 8018d2c:	d209      	bcs.n	8018d42 <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8018d2e:	88fb      	ldrh	r3, [r7, #6]
 8018d30:	4a11      	ldr	r2, [pc, #68]	@ (8018d78 <glue_modbus_write_reg+0x7c>)
 8018d32:	8812      	ldrh	r2, [r2, #0]
 8018d34:	1a9b      	subs	r3, r3, r2
 8018d36:	4911      	ldr	r1, [pc, #68]	@ (8018d7c <glue_modbus_write_reg+0x80>)
 8018d38:	88ba      	ldrh	r2, [r7, #4]
 8018d3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8018d3e:	2301      	movs	r3, #1
 8018d40:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, value));
 8018d42:	4b0f      	ldr	r3, [pc, #60]	@ (8018d80 <glue_modbus_write_reg+0x84>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	2b01      	cmp	r3, #1
 8018d48:	dd11      	ble.n	8018d6e <glue_modbus_write_reg+0x72>
 8018d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8018d84 <glue_modbus_write_reg+0x88>)
 8018d4c:	f240 1203 	movw	r2, #259	@ 0x103
 8018d50:	490d      	ldr	r1, [pc, #52]	@ (8018d88 <glue_modbus_write_reg+0x8c>)
 8018d52:	2002      	movs	r0, #2
 8018d54:	f7ef f968 	bl	8008028 <mg_log_prefix>
 8018d58:	7bfb      	ldrb	r3, [r7, #15]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d001      	beq.n	8018d62 <glue_modbus_write_reg+0x66>
 8018d5e:	490b      	ldr	r1, [pc, #44]	@ (8018d8c <glue_modbus_write_reg+0x90>)
 8018d60:	e000      	b.n	8018d64 <glue_modbus_write_reg+0x68>
 8018d62:	490b      	ldr	r1, [pc, #44]	@ (8018d90 <glue_modbus_write_reg+0x94>)
 8018d64:	88fa      	ldrh	r2, [r7, #6]
 8018d66:	88bb      	ldrh	r3, [r7, #4]
 8018d68:	480a      	ldr	r0, [pc, #40]	@ (8018d94 <glue_modbus_write_reg+0x98>)
 8018d6a:	f7ef f9ad 	bl	80080c8 <mg_log>
  return success;
 8018d6e:	7bfb      	ldrb	r3, [r7, #15]

}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3710      	adds	r7, #16
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}
 8018d78:	24000282 	.word	0x24000282
 8018d7c:	24000278 	.word	0x24000278
 8018d80:	24000240 	.word	0x24000240
 8018d84:	08038298 	.word	0x08038298
 8018d88:	0802b204 	.word	0x0802b204
 8018d8c:	0802b358 	.word	0x0802b358
 8018d90:	0802b35c 	.word	0x0802b35c
 8018d94:	0802b364 	.word	0x0802b364

08018d98 <glue_authenticate>:


// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b084      	sub	sp, #16
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
 8018da0:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 8018da2:	2300      	movs	r3, #0
 8018da4:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "Sarayu") == 0 && strcmp(pass, "Sarayu@123") == 0) {
 8018da6:	4913      	ldr	r1, [pc, #76]	@ (8018df4 <glue_authenticate+0x5c>)
 8018da8:	6878      	ldr	r0, [r7, #4]
 8018daa:	f7e7 fa99 	bl	80002e0 <strcmp>
 8018dae:	4603      	mov	r3, r0
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d109      	bne.n	8018dc8 <glue_authenticate+0x30>
 8018db4:	4910      	ldr	r1, [pc, #64]	@ (8018df8 <glue_authenticate+0x60>)
 8018db6:	6838      	ldr	r0, [r7, #0]
 8018db8:	f7e7 fa92 	bl	80002e0 <strcmp>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d102      	bne.n	8018dc8 <glue_authenticate+0x30>
    level = 7;  // Administrator
 8018dc2:	2307      	movs	r3, #7
 8018dc4:	60fb      	str	r3, [r7, #12]
 8018dc6:	e00f      	b.n	8018de8 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8018dc8:	490c      	ldr	r1, [pc, #48]	@ (8018dfc <glue_authenticate+0x64>)
 8018dca:	6878      	ldr	r0, [r7, #4]
 8018dcc:	f7e7 fa88 	bl	80002e0 <strcmp>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d108      	bne.n	8018de8 <glue_authenticate+0x50>
 8018dd6:	4909      	ldr	r1, [pc, #36]	@ (8018dfc <glue_authenticate+0x64>)
 8018dd8:	6838      	ldr	r0, [r7, #0]
 8018dda:	f7e7 fa81 	bl	80002e0 <strcmp>
 8018dde:	4603      	mov	r3, r0
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d101      	bne.n	8018de8 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8018de4:	2303      	movs	r3, #3
 8018de6:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8018de8:	68fb      	ldr	r3, [r7, #12]
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
 8018df2:	bf00      	nop
 8018df4:	0802b304 	.word	0x0802b304
 8018df8:	0802b374 	.word	0x0802b374
 8018dfc:	0802b380 	.word	0x0802b380

08018e00 <glue_check_reboot>:


// reboot
static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8018e00:	b580      	push	{r7, lr}
 8018e02:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8018e04:	f7f5 fd12 	bl	800e82c <mg_now>
 8018e08:	4b05      	ldr	r3, [pc, #20]	@ (8018e20 <glue_check_reboot+0x20>)
 8018e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e0e:	4290      	cmp	r0, r2
 8018e10:	eb71 0303 	sbcs.w	r3, r1, r3
 8018e14:	bf34      	ite	cc
 8018e16:	2301      	movcc	r3, #1
 8018e18:	2300      	movcs	r3, #0
 8018e1a:	b2db      	uxtb	r3, r3
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	24003f18 	.word	0x24003f18

08018e24 <glue_start_reboot>:
void glue_start_reboot(void) {
 8018e24:	b5b0      	push	{r4, r5, r7, lr}
 8018e26:	af00      	add	r7, sp, #0
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8018e28:	f7f5 fd00 	bl	800e82c <mg_now>
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	460b      	mov	r3, r1
 8018e30:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8018e34:	f143 0500 	adc.w	r5, r3, #0
 8018e38:	4b02      	ldr	r3, [pc, #8]	@ (8018e44 <glue_start_reboot+0x20>)
 8018e3a:	e9c3 4500 	strd	r4, r5, [r3]
}
 8018e3e:	bf00      	nop
 8018e40:	bdb0      	pop	{r4, r5, r7, pc}
 8018e42:	bf00      	nop
 8018e44:	24003f18 	.word	0x24003f18

08018e48 <glue_ota_begin_firmware_update>:

// firmware_update
void  *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b084      	sub	sp, #16
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8018e52:	6838      	ldr	r0, [r7, #0]
 8018e54:	f7f4 f9fe 	bl	800d254 <mg_ota_begin>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8018e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8018e94 <glue_ota_begin_firmware_update+0x4c>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	2b02      	cmp	r3, #2
 8018e62:	dd0c      	ble.n	8018e7e <glue_ota_begin_firmware_update+0x36>
 8018e64:	4b0c      	ldr	r3, [pc, #48]	@ (8018e98 <glue_ota_begin_firmware_update+0x50>)
 8018e66:	f240 1223 	movw	r2, #291	@ 0x123
 8018e6a:	490c      	ldr	r1, [pc, #48]	@ (8018e9c <glue_ota_begin_firmware_update+0x54>)
 8018e6c:	2003      	movs	r0, #3
 8018e6e:	f7ef f8db 	bl	8008028 <mg_log_prefix>
 8018e72:	7bfb      	ldrb	r3, [r7, #15]
 8018e74:	683a      	ldr	r2, [r7, #0]
 8018e76:	6879      	ldr	r1, [r7, #4]
 8018e78:	4809      	ldr	r0, [pc, #36]	@ (8018ea0 <glue_ota_begin_firmware_update+0x58>)
 8018e7a:	f7ef f925 	bl	80080c8 <mg_log>
  return ok ? (void *) 1 : NULL;
 8018e7e:	7bfb      	ldrb	r3, [r7, #15]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d001      	beq.n	8018e88 <glue_ota_begin_firmware_update+0x40>
 8018e84:	2301      	movs	r3, #1
 8018e86:	e000      	b.n	8018e8a <glue_ota_begin_firmware_update+0x42>
 8018e88:	2300      	movs	r3, #0
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	3710      	adds	r7, #16
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}
 8018e92:	bf00      	nop
 8018e94:	24000240 	.word	0x24000240
 8018e98:	080382b0 	.word	0x080382b0
 8018e9c:	0802b204 	.word	0x0802b204
 8018ea0:	0802b388 	.word	0x0802b388

08018ea4 <glue_ota_end_firmware_update>:
bool  glue_ota_end_firmware_update(void *context) {
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b088      	sub	sp, #32
 8018ea8:	af04      	add	r7, sp, #16
 8018eaa:	6078      	str	r0, [r7, #4]
  bool ok = mg_ota_end();
 8018eac:	f7f4 fb10 	bl	800d4d0 <mg_ota_end>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("ctx: %p, success: %d", context, ok));
 8018eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8018f20 <glue_ota_end_firmware_update+0x7c>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	2b02      	cmp	r3, #2
 8018eba:	dd0c      	ble.n	8018ed6 <glue_ota_end_firmware_update+0x32>
 8018ebc:	4b19      	ldr	r3, [pc, #100]	@ (8018f24 <glue_ota_end_firmware_update+0x80>)
 8018ebe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8018ec2:	4919      	ldr	r1, [pc, #100]	@ (8018f28 <glue_ota_end_firmware_update+0x84>)
 8018ec4:	2003      	movs	r0, #3
 8018ec6:	f7ef f8af 	bl	8008028 <mg_log_prefix>
 8018eca:	7bfb      	ldrb	r3, [r7, #15]
 8018ecc:	461a      	mov	r2, r3
 8018ece:	6879      	ldr	r1, [r7, #4]
 8018ed0:	4816      	ldr	r0, [pc, #88]	@ (8018f2c <glue_ota_end_firmware_update+0x88>)
 8018ed2:	f7ef f8f9 	bl	80080c8 <mg_log>
  if (ok) {
 8018ed6:	7bfb      	ldrb	r3, [r7, #15]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d01c      	beq.n	8018f16 <glue_ota_end_firmware_update+0x72>
    MG_INFO(("Rebooting in %lu ms", WIZARD_REBOOT_TIMEOUT_MS));
 8018edc:	4b10      	ldr	r3, [pc, #64]	@ (8018f20 <glue_ota_end_firmware_update+0x7c>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	2b01      	cmp	r3, #1
 8018ee2:	dd0b      	ble.n	8018efc <glue_ota_end_firmware_update+0x58>
 8018ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8018f24 <glue_ota_end_firmware_update+0x80>)
 8018ee6:	f44f 7295 	mov.w	r2, #298	@ 0x12a
 8018eea:	490f      	ldr	r1, [pc, #60]	@ (8018f28 <glue_ota_end_firmware_update+0x84>)
 8018eec:	2002      	movs	r0, #2
 8018eee:	f7ef f89b 	bl	8008028 <mg_log_prefix>
 8018ef2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8018ef6:	480e      	ldr	r0, [pc, #56]	@ (8018f30 <glue_ota_end_firmware_update+0x8c>)
 8018ef8:	f7ef f8e6 	bl	80080c8 <mg_log>
    mg_timer_add(&g_mgr, WIZARD_REBOOT_TIMEOUT_MS, 0,
 8018efc:	2300      	movs	r3, #0
 8018efe:	9302      	str	r3, [sp, #8]
 8018f00:	4b0c      	ldr	r3, [pc, #48]	@ (8018f34 <glue_ota_end_firmware_update+0x90>)
 8018f02:	9301      	str	r3, [sp, #4]
 8018f04:	2300      	movs	r3, #0
 8018f06:	9300      	str	r3, [sp, #0]
 8018f08:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8018f0c:	f04f 0300 	mov.w	r3, #0
 8018f10:	4809      	ldr	r0, [pc, #36]	@ (8018f38 <glue_ota_end_firmware_update+0x94>)
 8018f12:	f7f0 fe5d 	bl	8009bd0 <mg_timer_add>
      (void(*)(void *)) mg_device_reset, NULL);
  }
  return ok;
 8018f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	3710      	adds	r7, #16
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bd80      	pop	{r7, pc}
 8018f20:	24000240 	.word	0x24000240
 8018f24:	080382d0 	.word	0x080382d0
 8018f28:	0802b204 	.word	0x0802b204
 8018f2c:	0802b39c 	.word	0x0802b39c
 8018f30:	0802b3b4 	.word	0x0802b3b4
 8018f34:	08028871 	.word	0x08028871
 8018f38:	24003f20 	.word	0x24003f20

08018f3c <glue_ota_write_firmware_update>:
bool  glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b084      	sub	sp, #16
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	60b9      	str	r1, [r7, #8]
 8018f46:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8018f48:	4b0c      	ldr	r3, [pc, #48]	@ (8018f7c <glue_ota_write_firmware_update+0x40>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2b02      	cmp	r3, #2
 8018f4e:	dd0c      	ble.n	8018f6a <glue_ota_write_firmware_update+0x2e>
 8018f50:	4b0b      	ldr	r3, [pc, #44]	@ (8018f80 <glue_ota_write_firmware_update+0x44>)
 8018f52:	f240 1231 	movw	r2, #305	@ 0x131
 8018f56:	490b      	ldr	r1, [pc, #44]	@ (8018f84 <glue_ota_write_firmware_update+0x48>)
 8018f58:	2003      	movs	r0, #3
 8018f5a:	f7ef f865 	bl	8008028 <mg_log_prefix>
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	68ba      	ldr	r2, [r7, #8]
 8018f62:	68f9      	ldr	r1, [r7, #12]
 8018f64:	4808      	ldr	r0, [pc, #32]	@ (8018f88 <glue_ota_write_firmware_update+0x4c>)
 8018f66:	f7ef f8af 	bl	80080c8 <mg_log>
  return mg_ota_write(buf, len);
 8018f6a:	6879      	ldr	r1, [r7, #4]
 8018f6c:	68b8      	ldr	r0, [r7, #8]
 8018f6e:	f7f4 f9f3 	bl	800d358 <mg_ota_write>
 8018f72:	4603      	mov	r3, r0
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3710      	adds	r7, #16
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	24000240 	.word	0x24000240
 8018f80:	080382f0 	.word	0x080382f0
 8018f84:	0802b204 	.word	0x0802b204
 8018f88:	0802b3c8 	.word	0x0802b3c8

08018f8c <glue_file_open_file_upload>:

// file_upload
void  *glue_file_open_file_upload(char *file_name, size_t total_size) {
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b0a4      	sub	sp, #144	@ 0x90
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
 8018f94:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 8018f96:	2300      	movs	r3, #0
 8018f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 8018fa2:	212f      	movs	r1, #47	@ 0x2f
 8018fa4:	6878      	ldr	r0, [r7, #4]
 8018fa6:	f00b ff93 	bl	8024ed0 <strrchr>
 8018faa:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8018fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d102      	bne.n	8018fbc <glue_file_open_file_upload+0x30>
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8018fbc:	f107 0008 	add.w	r0, r7, #8
 8018fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8019000 <glue_file_open_file_upload+0x74>)
 8018fc6:	2180      	movs	r1, #128	@ 0x80
 8018fc8:	f7f4 fbe4 	bl	800d794 <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8018fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8019004 <glue_file_open_file_upload+0x78>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2b02      	cmp	r3, #2
 8018fd2:	dd0e      	ble.n	8018ff2 <glue_file_open_file_upload+0x66>
 8018fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8019008 <glue_file_open_file_upload+0x7c>)
 8018fd6:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 8018fda:	490c      	ldr	r1, [pc, #48]	@ (801900c <glue_file_open_file_upload+0x80>)
 8018fdc:	2003      	movs	r0, #3
 8018fde:	f7ef f823 	bl	8008028 <mg_log_prefix>
 8018fe2:	f107 0108 	add.w	r1, r7, #8
 8018fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018fea:	683a      	ldr	r2, [r7, #0]
 8018fec:	4808      	ldr	r0, [pc, #32]	@ (8019010 <glue_file_open_file_upload+0x84>)
 8018fee:	f7ef f86b 	bl	80080c8 <mg_log>
  return fp;
 8018ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3790      	adds	r7, #144	@ 0x90
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}
 8018ffe:	bf00      	nop
 8019000:	0802b3d8 	.word	0x0802b3d8
 8019004:	24000240 	.word	0x24000240
 8019008:	08038310 	.word	0x08038310
 801900c:	0802b204 	.word	0x0802b204
 8019010:	0802b3e0 	.word	0x0802b3e0

08019014 <glue_file_close_file_upload>:
bool  glue_file_close_file_upload(void *fp) {
 8019014:	b580      	push	{r7, lr}
 8019016:	b082      	sub	sp, #8
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 801901c:	4b09      	ldr	r3, [pc, #36]	@ (8019044 <glue_file_close_file_upload+0x30>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	2b02      	cmp	r3, #2
 8019022:	dd0a      	ble.n	801903a <glue_file_close_file_upload+0x26>
 8019024:	4b08      	ldr	r3, [pc, #32]	@ (8019048 <glue_file_close_file_upload+0x34>)
 8019026:	f44f 72a1 	mov.w	r2, #322	@ 0x142
 801902a:	4908      	ldr	r1, [pc, #32]	@ (801904c <glue_file_close_file_upload+0x38>)
 801902c:	2003      	movs	r0, #3
 801902e:	f7ee fffb 	bl	8008028 <mg_log_prefix>
 8019032:	6879      	ldr	r1, [r7, #4]
 8019034:	4806      	ldr	r0, [pc, #24]	@ (8019050 <glue_file_close_file_upload+0x3c>)
 8019036:	f7ef f847 	bl	80080c8 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 801903a:	2300      	movs	r3, #0
#endif
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	24000240 	.word	0x24000240
 8019048:	0803832c 	.word	0x0803832c
 801904c:	0802b204 	.word	0x0802b204
 8019050:	0802b400 	.word	0x0802b400

08019054 <glue_file_write_file_upload>:
bool  glue_file_write_file_upload(void *fp, void *buf, size_t len) {
 8019054:	b580      	push	{r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	60f8      	str	r0, [r7, #12]
 801905c:	60b9      	str	r1, [r7, #8]
 801905e:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 8019060:	4b0a      	ldr	r3, [pc, #40]	@ (801908c <glue_file_write_file_upload+0x38>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	2b02      	cmp	r3, #2
 8019066:	dd0c      	ble.n	8019082 <glue_file_write_file_upload+0x2e>
 8019068:	4b09      	ldr	r3, [pc, #36]	@ (8019090 <glue_file_write_file_upload+0x3c>)
 801906a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801906e:	4909      	ldr	r1, [pc, #36]	@ (8019094 <glue_file_write_file_upload+0x40>)
 8019070:	2003      	movs	r0, #3
 8019072:	f7ee ffd9 	bl	8008028 <mg_log_prefix>
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	68ba      	ldr	r2, [r7, #8]
 801907a:	68f9      	ldr	r1, [r7, #12]
 801907c:	4806      	ldr	r0, [pc, #24]	@ (8019098 <glue_file_write_file_upload+0x44>)
 801907e:	f7ef f823 	bl	80080c8 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8019082:	2300      	movs	r3, #0
#endif
}
 8019084:	4618      	mov	r0, r3
 8019086:	3710      	adds	r7, #16
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	24000240 	.word	0x24000240
 8019090:	08038348 	.word	0x08038348
 8019094:	0802b204 	.word	0x0802b204
 8019098:	0802b40c 	.word	0x0802b40c

0801909c <glue_graph_get_graph1>:

// graph1
size_t glue_graph_get_graph1(uint32_t from, uint32_t to,
                              uint32_t *x_values, double *y_values, size_t len) {
 801909c:	b5b0      	push	{r4, r5, r7, lr}
 801909e:	b0a4      	sub	sp, #144	@ 0x90
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	60f8      	str	r0, [r7, #12]
 80190a4:	60b9      	str	r1, [r7, #8]
 80190a6:	607a      	str	r2, [r7, #4]
 80190a8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80190aa:	2300      	movs	r3, #0
 80190ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t timestamps[] = {1724576787,1724576847,1724576907,1724576967,1724577027,1724577087,1724577147,1724577207,1724577267,1724577327};  // Those are example values
 80190b0:	4b25      	ldr	r3, [pc, #148]	@ (8019148 <glue_graph_get_graph1+0xac>)
 80190b2:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80190b6:	461d      	mov	r5, r3
 80190b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80190c4:	e884 0003 	stmia.w	r4, {r0, r1}
  double values[] = {20.3,27.2,29.7,27.9,25.1,23.8,22.5,22.2,23.3,23.9};  // Use real device data
 80190c8:	4a20      	ldr	r2, [pc, #128]	@ (801914c <glue_graph_get_graph1+0xb0>)
 80190ca:	f107 0310 	add.w	r3, r7, #16
 80190ce:	4611      	mov	r1, r2
 80190d0:	2250      	movs	r2, #80	@ 0x50
 80190d2:	4618      	mov	r0, r3
 80190d4:	f00c f80d 	bl	80250f2 <memcpy>
  for (i = 0; i < len; i++) {
 80190d8:	2300      	movs	r3, #0
 80190da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80190de:	e024      	b.n	801912a <glue_graph_get_graph1+0x8e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 80190e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80190e4:	2b09      	cmp	r3, #9
 80190e6:	d827      	bhi.n	8019138 <glue_graph_get_graph1+0x9c>
    x_values[i] = timestamps[i];
 80190e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	687a      	ldr	r2, [r7, #4]
 80190f0:	441a      	add	r2, r3
 80190f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80190f6:	009b      	lsls	r3, r3, #2
 80190f8:	3390      	adds	r3, #144	@ 0x90
 80190fa:	443b      	add	r3, r7
 80190fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8019100:	6013      	str	r3, [r2, #0]
    y_values[i] = values[i];
 8019102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019106:	00db      	lsls	r3, r3, #3
 8019108:	683a      	ldr	r2, [r7, #0]
 801910a:	18d1      	adds	r1, r2, r3
 801910c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019110:	00db      	lsls	r3, r3, #3
 8019112:	3390      	adds	r3, #144	@ 0x90
 8019114:	443b      	add	r3, r7
 8019116:	3b80      	subs	r3, #128	@ 0x80
 8019118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801911c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < len; i++) {
 8019120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019124:	3301      	adds	r3, #1
 8019126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801912a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801912e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019132:	429a      	cmp	r2, r3
 8019134:	d3d4      	bcc.n	80190e0 <glue_graph_get_graph1+0x44>
 8019136:	e000      	b.n	801913a <glue_graph_get_graph1+0x9e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 8019138:	bf00      	nop
  }
  (void) from, (void) to;
  return i;
 801913a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 801913e:	4618      	mov	r0, r3
 8019140:	3790      	adds	r7, #144	@ 0x90
 8019142:	46bd      	mov	sp, r7
 8019144:	bdb0      	pop	{r4, r5, r7, pc}
 8019146:	bf00      	nop
 8019148:	0802b428 	.word	0x0802b428
 801914c:	0802b450 	.word	0x0802b450

08019150 <glue_get_state>:

static struct state s_state = {42, 27, 70, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 8019150:	b4b0      	push	{r4, r5, r7}
 8019152:	b083      	sub	sp, #12
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	4a08      	ldr	r2, [pc, #32]	@ (801917c <glue_get_state+0x2c>)
 801915c:	461c      	mov	r4, r3
 801915e:	4615      	mov	r5, r2
 8019160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801916c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019170:	bf00      	nop
 8019172:	370c      	adds	r7, #12
 8019174:	46bd      	mov	sp, r7
 8019176:	bcb0      	pop	{r4, r5, r7}
 8019178:	4770      	bx	lr
 801917a:	bf00      	nop
 801917c:	24000284 	.word	0x24000284

08019180 <glue_set_state>:
void glue_set_state(struct state *data) {
 8019180:	b4b0      	push	{r4, r5, r7}
 8019182:	b083      	sub	sp, #12
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
  s_state = *data; // Sync with your device
 8019188:	4a08      	ldr	r2, [pc, #32]	@ (80191ac <glue_set_state+0x2c>)
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	4614      	mov	r4, r2
 801918e:	461d      	mov	r5, r3
 8019190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801919c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80191a0:	bf00      	nop
 80191a2:	370c      	adds	r7, #12
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bcb0      	pop	{r4, r5, r7}
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	24000284 	.word	0x24000284

080191b0 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 80191b0:	b480      	push	{r7}
 80191b2:	b083      	sub	sp, #12
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	4a05      	ldr	r2, [pc, #20]	@ (80191d0 <glue_get_leds+0x20>)
 80191bc:	8811      	ldrh	r1, [r2, #0]
 80191be:	7892      	ldrb	r2, [r2, #2]
 80191c0:	8019      	strh	r1, [r3, #0]
 80191c2:	709a      	strb	r2, [r3, #2]
}
 80191c4:	bf00      	nop
 80191c6:	370c      	adds	r7, #12
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr
 80191d0:	240002b0 	.word	0x240002b0

080191d4 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 80191d4:	b480      	push	{r7}
 80191d6:	b083      	sub	sp, #12
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 80191dc:	4b05      	ldr	r3, [pc, #20]	@ (80191f4 <glue_set_leds+0x20>)
 80191de:	687a      	ldr	r2, [r7, #4]
 80191e0:	8811      	ldrh	r1, [r2, #0]
 80191e2:	7892      	ldrb	r2, [r2, #2]
 80191e4:	8019      	strh	r1, [r3, #0]
 80191e6:	709a      	strb	r2, [r3, #2]
}
 80191e8:	bf00      	nop
 80191ea:	370c      	adds	r7, #12
 80191ec:	46bd      	mov	sp, r7
 80191ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f2:	4770      	bx	lr
 80191f4:	240002b0 	.word	0x240002b0

080191f8 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", 2, 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 80191f8:	b4b0      	push	{r4, r5, r7}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	4a09      	ldr	r2, [pc, #36]	@ (8019228 <glue_get_settings+0x30>)
 8019204:	461c      	mov	r4, r3
 8019206:	4615      	mov	r5, r2
 8019208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801920a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801920c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801920e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019214:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801921c:	bf00      	nop
 801921e:	370c      	adds	r7, #12
 8019220:	46bd      	mov	sp, r7
 8019222:	bcb0      	pop	{r4, r5, r7}
 8019224:	4770      	bx	lr
 8019226:	bf00      	nop
 8019228:	240002b8 	.word	0x240002b8

0801922c <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 801922c:	b4b0      	push	{r4, r5, r7}
 801922e:	b083      	sub	sp, #12
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8019234:	4a09      	ldr	r2, [pc, #36]	@ (801925c <glue_set_settings+0x30>)
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	4614      	mov	r4, r2
 801923a:	461d      	mov	r5, r3
 801923c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801923e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019248:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801924c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8019250:	bf00      	nop
 8019252:	370c      	adds	r7, #12
 8019254:	46bd      	mov	sp, r7
 8019256:	bcb0      	pop	{r4, r5, r7}
 8019258:	4770      	bx	lr
 801925a:	bf00      	nop
 801925c:	240002b8 	.word	0x240002b8

08019260 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8019260:	b580      	push	{r7, lr}
 8019262:	b082      	sub	sp, #8
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	4a05      	ldr	r2, [pc, #20]	@ (8019280 <glue_get_security+0x20>)
 801926c:	4618      	mov	r0, r3
 801926e:	4611      	mov	r1, r2
 8019270:	2350      	movs	r3, #80	@ 0x50
 8019272:	461a      	mov	r2, r3
 8019274:	f00b ff3d 	bl	80250f2 <memcpy>
}
 8019278:	bf00      	nop
 801927a:	3708      	adds	r7, #8
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}
 8019280:	240002f8 	.word	0x240002f8

08019284 <glue_set_security>:
void glue_set_security(struct security *data) {
 8019284:	b580      	push	{r7, lr}
 8019286:	b082      	sub	sp, #8
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 801928c:	4a05      	ldr	r2, [pc, #20]	@ (80192a4 <glue_set_security+0x20>)
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	4610      	mov	r0, r2
 8019292:	4619      	mov	r1, r3
 8019294:	2350      	movs	r3, #80	@ 0x50
 8019296:	461a      	mov	r2, r3
 8019298:	f00b ff2b 	bl	80250f2 <memcpy>
}
 801929c:	bf00      	nop
 801929e:	3708      	adds	r7, #8
 80192a0:	46bd      	mov	sp, r7
 80192a2:	bd80      	pop	{r7, pc}
 80192a4:	240002f8 	.word	0x240002f8

080192a8 <find_handler>:
  {"settings", "object", false, 3, 7, 0UL, s_settings_attributes, (void (*)(void *)) glue_get_settings, (void (*)(void *)) glue_set_settings, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct settings)},
  {"security", "object", false, 7, 7, 0UL, s_security_attributes, (void (*)(void *)) glue_get_security, (void (*)(void *)) glue_set_security, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct security)},
  {"events", "array", false, 0, 0, 0UL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0}
};

static struct apihandler *find_handler(struct mg_http_message *hm) {
 80192a8:	b590      	push	{r4, r7, lr}
 80192aa:	b089      	sub	sp, #36	@ 0x24
 80192ac:	af02      	add	r7, sp, #8
 80192ae:	6078      	str	r0, [r7, #4]
  size_t i;
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	68db      	ldr	r3, [r3, #12]
 80192b4:	2b05      	cmp	r3, #5
 80192b6:	d909      	bls.n	80192cc <find_handler+0x24>
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	689b      	ldr	r3, [r3, #8]
 80192bc:	2205      	movs	r2, #5
 80192be:	4932      	ldr	r1, [pc, #200]	@ (8019388 <find_handler+0xe0>)
 80192c0:	4618      	mov	r0, r3
 80192c2:	f00b fde0 	bl	8024e86 <strncmp>
 80192c6:	4603      	mov	r3, r0
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d001      	beq.n	80192d0 <find_handler+0x28>
 80192cc:	2300      	movs	r3, #0
 80192ce:	e056      	b.n	801937e <find_handler+0xd6>
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 80192d0:	2300      	movs	r3, #0
 80192d2:	617b      	str	r3, [r7, #20]
 80192d4:	e04f      	b.n	8019376 <find_handler+0xce>
    struct apihandler *h = &s_apihandlers[i];
 80192d6:	697b      	ldr	r3, [r7, #20]
 80192d8:	019b      	lsls	r3, r3, #6
 80192da:	4a2c      	ldr	r2, [pc, #176]	@ (801938c <find_handler+0xe4>)
 80192dc:	4413      	add	r3, r2
 80192de:	613b      	str	r3, [r7, #16]
    size_t n = strlen(h->name);
 80192e0:	693b      	ldr	r3, [r7, #16]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	4618      	mov	r0, r3
 80192e6:	f7e7 f85b 	bl	80003a0 <strlen>
 80192ea:	60f8      	str	r0, [r7, #12]
    if (n + 5 > hm->uri.len) continue;
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	1d5a      	adds	r2, r3, #5
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	68db      	ldr	r3, [r3, #12]
 80192f4:	429a      	cmp	r2, r3
 80192f6:	d836      	bhi.n	8019366 <find_handler+0xbe>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	689b      	ldr	r3, [r3, #8]
 80192fc:	1d58      	adds	r0, r3, #5
 80192fe:	693b      	ldr	r3, [r7, #16]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	68fa      	ldr	r2, [r7, #12]
 8019304:	4619      	mov	r1, r3
 8019306:	f00b fdbe 	bl	8024e86 <strncmp>
 801930a:	4603      	mov	r3, r0
 801930c:	2b00      	cmp	r3, #0
 801930e:	d12c      	bne.n	801936a <find_handler+0xc2>
    MG_INFO(("%.*s %s %lu %lu", hm->uri.len, hm->uri.buf, h->name, n + 5,
 8019310:	4b1f      	ldr	r3, [pc, #124]	@ (8019390 <find_handler+0xe8>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	2b01      	cmp	r3, #1
 8019316:	dd16      	ble.n	8019346 <find_handler+0x9e>
 8019318:	4b1e      	ldr	r3, [pc, #120]	@ (8019394 <find_handler+0xec>)
 801931a:	2282      	movs	r2, #130	@ 0x82
 801931c:	491e      	ldr	r1, [pc, #120]	@ (8019398 <find_handler+0xf0>)
 801931e:	2002      	movs	r0, #2
 8019320:	f7ee fe82 	bl	8008028 <mg_log_prefix>
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	68d9      	ldr	r1, [r3, #12]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	6898      	ldr	r0, [r3, #8]
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	681c      	ldr	r4, [r3, #0]
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	3305      	adds	r3, #5
 8019334:	687a      	ldr	r2, [r7, #4]
 8019336:	68d2      	ldr	r2, [r2, #12]
 8019338:	9201      	str	r2, [sp, #4]
 801933a:	9300      	str	r3, [sp, #0]
 801933c:	4623      	mov	r3, r4
 801933e:	4602      	mov	r2, r0
 8019340:	4816      	ldr	r0, [pc, #88]	@ (801939c <find_handler+0xf4>)
 8019342:	f7ee fec1 	bl	80080c8 <mg_log>
             hm->uri.len));
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	1d5a      	adds	r2, r3, #5
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	68db      	ldr	r3, [r3, #12]
 801934e:	429a      	cmp	r2, r3
 8019350:	d207      	bcs.n	8019362 <find_handler+0xba>
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	689a      	ldr	r2, [r3, #8]
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	3305      	adds	r3, #5
 801935a:	4413      	add	r3, r2
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019360:	d105      	bne.n	801936e <find_handler+0xc6>
    return h;
 8019362:	693b      	ldr	r3, [r7, #16]
 8019364:	e00b      	b.n	801937e <find_handler+0xd6>
    if (n + 5 > hm->uri.len) continue;
 8019366:	bf00      	nop
 8019368:	e002      	b.n	8019370 <find_handler+0xc8>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 801936a:	bf00      	nop
 801936c:	e000      	b.n	8019370 <find_handler+0xc8>
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 801936e:	bf00      	nop
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 8019370:	697b      	ldr	r3, [r7, #20]
 8019372:	3301      	adds	r3, #1
 8019374:	617b      	str	r3, [r7, #20]
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	2b08      	cmp	r3, #8
 801937a:	d9ac      	bls.n	80192d6 <find_handler+0x2e>
  }
  return NULL;
 801937c:	2300      	movs	r3, #0
}
 801937e:	4618      	mov	r0, r3
 8019380:	371c      	adds	r7, #28
 8019382:	46bd      	mov	sp, r7
 8019384:	bd90      	pop	{r4, r7, pc}
 8019386:	bf00      	nop
 8019388:	0802b604 	.word	0x0802b604
 801938c:	24000558 	.word	0x24000558
 8019390:	24000240 	.word	0x24000240
 8019394:	08038364 	.word	0x08038364
 8019398:	0802b60c 	.word	0x0802b60c
 801939c:	0802b628 	.word	0x0802b628

080193a0 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 80193a0:	b590      	push	{r4, r7, lr}
 80193a2:	b089      	sub	sp, #36	@ 0x24
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	f107 0408 	add.w	r4, r7, #8
 80193aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80193ae:	607a      	str	r2, [r7, #4]
 80193b0:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 80193b2:	f107 0010 	add.w	r0, r7, #16
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f107 0208 	add.w	r2, r7, #8
 80193bc:	ca06      	ldmia	r2, {r1, r2}
 80193be:	f7ee fcad 	bl	8007d1c <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	2b01      	cmp	r3, #1
 80193c6:	d913      	bls.n	80193f0 <mg_json_get_str2+0x50>
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	2b22      	cmp	r3, #34	@ 0x22
 80193ce:	d10f      	bne.n	80193f0 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	1c59      	adds	r1, r3, #1
 80193d4:	697b      	ldr	r3, [r7, #20]
 80193d6:	1e9a      	subs	r2, r3, #2
 80193d8:	f107 0318 	add.w	r3, r7, #24
 80193dc:	4618      	mov	r0, r3
 80193de:	f7f5 fd08 	bl	800edf2 <mg_str_n>
 80193e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193e4:	683a      	ldr	r2, [r7, #0]
 80193e6:	f107 0118 	add.w	r1, r7, #24
 80193ea:	c903      	ldmia	r1, {r0, r1}
 80193ec:	f7ee fd3c 	bl	8007e68 <mg_json_unescape>
  }
}
 80193f0:	bf00      	nop
 80193f2:	3724      	adds	r7, #36	@ 0x24
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd90      	pop	{r4, r7, pc}

080193f8 <authenticate>:
};

static struct user *s_users;  // List of authenticated users

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b0ba      	sub	sp, #232	@ 0xe8
 80193fc:	af02      	add	r7, sp, #8
 80193fe:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8019400:	2300      	movs	r3, #0
 8019402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8019406:	f107 030c 	add.w	r3, r7, #12
 801940a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801940e:	2264      	movs	r2, #100	@ 0x64
 8019410:	9200      	str	r2, [sp, #0]
 8019412:	2264      	movs	r2, #100	@ 0x64
 8019414:	6878      	ldr	r0, [r7, #4]
 8019416:	f7ec ffdf 	bl	80063d8 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 801941a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 801941e:	2b00      	cmp	r3, #0
 8019420:	d06e      	beq.n	8019500 <authenticate+0x108>
 8019422:	7b3b      	ldrb	r3, [r7, #12]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d06b      	beq.n	8019500 <authenticate+0x108>
    // Both user and password is set, auth by user/password via glue API
    int level = glue_authenticate(user, pass);
 8019428:	f107 020c 	add.w	r2, r7, #12
 801942c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019430:	4611      	mov	r1, r2
 8019432:	4618      	mov	r0, r3
 8019434:	f7ff fcb0 	bl	8018d98 <glue_authenticate>
 8019438:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 801943c:	4b55      	ldr	r3, [pc, #340]	@ (8019594 <authenticate+0x19c>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	2b02      	cmp	r3, #2
 8019442:	dd0d      	ble.n	8019460 <authenticate+0x68>
 8019444:	4b54      	ldr	r3, [pc, #336]	@ (8019598 <authenticate+0x1a0>)
 8019446:	22a6      	movs	r2, #166	@ 0xa6
 8019448:	4954      	ldr	r1, [pc, #336]	@ (801959c <authenticate+0x1a4>)
 801944a:	2003      	movs	r0, #3
 801944c:	f7ee fdec 	bl	8008028 <mg_log_prefix>
 8019450:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019454:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8019458:	4619      	mov	r1, r3
 801945a:	4851      	ldr	r0, [pc, #324]	@ (80195a0 <authenticate+0x1a8>)
 801945c:	f7ee fe34 	bl	80080c8 <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 8019460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8019464:	2b00      	cmp	r3, #0
 8019466:	dd75      	ble.n	8019554 <authenticate+0x15c>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8019468:	4b4e      	ldr	r3, [pc, #312]	@ (80195a4 <authenticate+0x1ac>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8019470:	e014      	b.n	801949c <authenticate+0xa4>
        if (strcmp(user, u->name) == 0) result = u;
 8019472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019476:	1d1a      	adds	r2, r3, #4
 8019478:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801947c:	4611      	mov	r1, r2
 801947e:	4618      	mov	r0, r3
 8019480:	f7e6 ff2e 	bl	80002e0 <strcmp>
 8019484:	4603      	mov	r3, r0
 8019486:	2b00      	cmp	r3, #0
 8019488:	d103      	bne.n	8019492 <authenticate+0x9a>
 801948a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801948e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8019492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801949c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d003      	beq.n	80194ac <authenticate+0xb4>
 80194a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d0e2      	beq.n	8019472 <authenticate+0x7a>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 80194ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d14f      	bne.n	8019554 <authenticate+0x15c>
        result = (struct user *) calloc(1, sizeof(*result));
 80194b4:	2140      	movs	r1, #64	@ 0x40
 80194b6:	2001      	movs	r0, #1
 80194b8:	f00a fa20 	bl	80238fc <calloc>
 80194bc:	4603      	mov	r3, r0
 80194be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 80194c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194c6:	1d18      	adds	r0, r3, #4
 80194c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80194cc:	4a36      	ldr	r2, [pc, #216]	@ (80195a8 <authenticate+0x1b0>)
 80194ce:	2120      	movs	r1, #32
 80194d0:	f7f4 f960 	bl	800d794 <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 80194d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194d8:	3324      	adds	r3, #36	@ 0x24
 80194da:	2114      	movs	r1, #20
 80194dc:	4618      	mov	r0, r3
 80194de:	f7fe fac7 	bl	8017a70 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 80194e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80194ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80194ec:	4b2d      	ldr	r3, [pc, #180]	@ (80195a4 <authenticate+0x1ac>)
 80194ee:	681a      	ldr	r2, [r3, #0]
 80194f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194f4:	601a      	str	r2, [r3, #0]
 80194f6:	4a2b      	ldr	r2, [pc, #172]	@ (80195a4 <authenticate+0x1ac>)
 80194f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80194fc:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 80194fe:	e029      	b.n	8019554 <authenticate+0x15c>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8019500:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8019504:	2b00      	cmp	r3, #0
 8019506:	d126      	bne.n	8019556 <authenticate+0x15e>
 8019508:	7b3b      	ldrb	r3, [r7, #12]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d023      	beq.n	8019556 <authenticate+0x15e>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 801950e:	4b25      	ldr	r3, [pc, #148]	@ (80195a4 <authenticate+0x1ac>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8019516:	e014      	b.n	8019542 <authenticate+0x14a>
      if (strcmp(u->token, pass) == 0) result = u;
 8019518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801951c:	3324      	adds	r3, #36	@ 0x24
 801951e:	f107 020c 	add.w	r2, r7, #12
 8019522:	4611      	mov	r1, r2
 8019524:	4618      	mov	r0, r3
 8019526:	f7e6 fedb 	bl	80002e0 <strcmp>
 801952a:	4603      	mov	r3, r0
 801952c:	2b00      	cmp	r3, #0
 801952e:	d103      	bne.n	8019538 <authenticate+0x140>
 8019530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8019538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8019542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019546:	2b00      	cmp	r3, #0
 8019548:	d005      	beq.n	8019556 <authenticate+0x15e>
 801954a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801954e:	2b00      	cmp	r3, #0
 8019550:	d0e2      	beq.n	8019518 <authenticate+0x120>
 8019552:	e000      	b.n	8019556 <authenticate+0x15e>
  if (user[0] != '\0' && pass[0] != '\0') {
 8019554:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 8019556:	4b0f      	ldr	r3, [pc, #60]	@ (8019594 <authenticate+0x19c>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	2b03      	cmp	r3, #3
 801955c:	dd13      	ble.n	8019586 <authenticate+0x18e>
 801955e:	4b0e      	ldr	r3, [pc, #56]	@ (8019598 <authenticate+0x1a0>)
 8019560:	22b9      	movs	r2, #185	@ 0xb9
 8019562:	490e      	ldr	r1, [pc, #56]	@ (801959c <authenticate+0x1a4>)
 8019564:	2004      	movs	r0, #4
 8019566:	f7ee fd5f 	bl	8008028 <mg_log_prefix>
 801956a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801956e:	2b00      	cmp	r3, #0
 8019570:	d001      	beq.n	8019576 <authenticate+0x17e>
 8019572:	4b0e      	ldr	r3, [pc, #56]	@ (80195ac <authenticate+0x1b4>)
 8019574:	e000      	b.n	8019578 <authenticate+0x180>
 8019576:	4b0e      	ldr	r3, [pc, #56]	@ (80195b0 <authenticate+0x1b8>)
 8019578:	f107 020c 	add.w	r2, r7, #12
 801957c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8019580:	480c      	ldr	r0, [pc, #48]	@ (80195b4 <authenticate+0x1bc>)
 8019582:	f7ee fda1 	bl	80080c8 <mg_log>
  return result;
 8019586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 801958a:	4618      	mov	r0, r3
 801958c:	37e0      	adds	r7, #224	@ 0xe0
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}
 8019592:	bf00      	nop
 8019594:	24000240 	.word	0x24000240
 8019598:	08038374 	.word	0x08038374
 801959c:	0802b60c 	.word	0x0802b60c
 80195a0:	0802b638 	.word	0x0802b638
 80195a4:	24003f6c 	.word	0x24003f6c
 80195a8:	0802b64c 	.word	0x0802b64c
 80195ac:	0802b650 	.word	0x0802b650
 80195b0:	0802b654 	.word	0x0802b654
 80195b4:	0802b65c 	.word	0x0802b65c

080195b8 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b0cc      	sub	sp, #304	@ 0x130
 80195bc:	af0a      	add	r7, sp, #40	@ 0x28
 80195be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80195c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80195c6:	6018      	str	r0, [r3, #0]
 80195c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80195cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80195d0:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 80195d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80195d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80195e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80195e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80195ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80195f2:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d001      	beq.n	80195fc <handle_login+0x44>
 80195f8:	4b1e      	ldr	r3, [pc, #120]	@ (8019674 <handle_login+0xbc>)
 80195fa:	e000      	b.n	80195fe <handle_login+0x46>
 80195fc:	4b1e      	ldr	r3, [pc, #120]	@ (8019678 <handle_login+0xc0>)
 80195fe:	f107 0008 	add.w	r0, r7, #8
 8019602:	491e      	ldr	r1, [pc, #120]	@ (801967c <handle_login+0xc4>)
 8019604:	9101      	str	r1, [sp, #4]
 8019606:	9300      	str	r3, [sp, #0]
 8019608:	4613      	mov	r3, r2
 801960a:	4a1d      	ldr	r2, [pc, #116]	@ (8019680 <handle_login+0xc8>)
 801960c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019610:	f7f4 f8c0 	bl	800d794 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
                MG_ESC("user"), MG_ESC(u->name),  //
 8019614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
 8019620:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8019624:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8019628:	6812      	ldr	r2, [r2, #0]
 801962a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801962c:	f107 0108 	add.w	r1, r7, #8
 8019630:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8019634:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8019638:	9209      	str	r2, [sp, #36]	@ 0x24
 801963a:	4a12      	ldr	r2, [pc, #72]	@ (8019684 <handle_login+0xcc>)
 801963c:	9208      	str	r2, [sp, #32]
 801963e:	2200      	movs	r2, #0
 8019640:	9207      	str	r2, [sp, #28]
 8019642:	4a11      	ldr	r2, [pc, #68]	@ (8019688 <handle_login+0xd0>)
 8019644:	9206      	str	r2, [sp, #24]
 8019646:	9305      	str	r3, [sp, #20]
 8019648:	2300      	movs	r3, #0
 801964a:	9304      	str	r3, [sp, #16]
 801964c:	4b0e      	ldr	r3, [pc, #56]	@ (8019688 <handle_login+0xd0>)
 801964e:	9303      	str	r3, [sp, #12]
 8019650:	4b0e      	ldr	r3, [pc, #56]	@ (801968c <handle_login+0xd4>)
 8019652:	9302      	str	r3, [sp, #8]
 8019654:	2300      	movs	r3, #0
 8019656:	9301      	str	r3, [sp, #4]
 8019658:	4b0b      	ldr	r3, [pc, #44]	@ (8019688 <handle_login+0xd0>)
 801965a:	9300      	str	r3, [sp, #0]
 801965c:	4b0c      	ldr	r3, [pc, #48]	@ (8019690 <handle_login+0xd8>)
 801965e:	460a      	mov	r2, r1
 8019660:	21c8      	movs	r1, #200	@ 0xc8
 8019662:	6800      	ldr	r0, [r0, #0]
 8019664:	f7eb ff42 	bl	80054ec <mg_http_reply>
                MG_ESC("level"), u->level);
}
 8019668:	bf00      	nop
 801966a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 801966e:	46bd      	mov	sp, r7
 8019670:	bd80      	pop	{r7, pc}
 8019672:	bf00      	nop
 8019674:	0802b66c 	.word	0x0802b66c
 8019678:	0802b678 	.word	0x0802b678
 801967c:	00015180 	.word	0x00015180
 8019680:	0802b67c 	.word	0x0802b67c
 8019684:	0802b4f4 	.word	0x0802b4f4
 8019688:	0800dc21 	.word	0x0800dc21
 801968c:	0802b6d8 	.word	0x0802b6d8
 8019690:	0802b6c8 	.word	0x0802b6c8

08019694 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8019694:	b580      	push	{r7, lr}
 8019696:	b0c2      	sub	sp, #264	@ 0x108
 8019698:	af00      	add	r7, sp, #0
 801969a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801969e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80196a2:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 80196a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80196a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80196b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80196b6:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d001      	beq.n	80196c0 <handle_logout+0x2c>
 80196bc:	4b0d      	ldr	r3, [pc, #52]	@ (80196f4 <handle_logout+0x60>)
 80196be:	e000      	b.n	80196c2 <handle_logout+0x2e>
 80196c0:	4b0d      	ldr	r3, [pc, #52]	@ (80196f8 <handle_logout+0x64>)
 80196c2:	f107 0008 	add.w	r0, r7, #8
 80196c6:	4a0d      	ldr	r2, [pc, #52]	@ (80196fc <handle_logout+0x68>)
 80196c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80196cc:	f7f4 f862 	bl	800d794 <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 80196d0:	f107 0208 	add.w	r2, r7, #8
 80196d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80196d8:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 80196dc:	4b08      	ldr	r3, [pc, #32]	@ (8019700 <handle_logout+0x6c>)
 80196de:	f240 1191 	movw	r1, #401	@ 0x191
 80196e2:	6800      	ldr	r0, [r0, #0]
 80196e4:	f7eb ff02 	bl	80054ec <mg_http_reply>
}
 80196e8:	bf00      	nop
 80196ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80196ee:	46bd      	mov	sp, r7
 80196f0:	bd80      	pop	{r7, pc}
 80196f2:	bf00      	nop
 80196f4:	0802b66c 	.word	0x0802b66c
 80196f8:	0802b678 	.word	0x0802b678
 80196fc:	0802b6e0 	.word	0x0802b6e0
 8019700:	0802b744 	.word	0x0802b744

08019704 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 8019704:	b580      	push	{r7, lr}
 8019706:	b082      	sub	sp, #8
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	2200      	movs	r2, #0
 8019710:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	691b      	ldr	r3, [r3, #16]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d00c      	beq.n	8019734 <close_uploaded_file+0x30>
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	68db      	ldr	r3, [r3, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d008      	beq.n	8019734 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	691b      	ldr	r3, [r3, #16]
 8019726:	687a      	ldr	r2, [r7, #4]
 8019728:	68d2      	ldr	r2, [r2, #12]
 801972a:	4610      	mov	r0, r2
 801972c:	4798      	blx	r3
    us->fp = NULL;
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	2200      	movs	r2, #0
 8019732:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 8019734:	2218      	movs	r2, #24
 8019736:	2100      	movs	r1, #0
 8019738:	6878      	ldr	r0, [r7, #4]
 801973a:	f00b fb8f 	bl	8024e5c <memset>
}
 801973e:	bf00      	nop
 8019740:	3708      	adds	r7, #8
 8019742:	46bd      	mov	sp, r7
 8019744:	bd80      	pop	{r7, pc}
	...

08019748 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 8019748:	b590      	push	{r4, r7, lr}
 801974a:	b08d      	sub	sp, #52	@ 0x34
 801974c:	af04      	add	r7, sp, #16
 801974e:	60f8      	str	r0, [r7, #12]
 8019750:	60b9      	str	r1, [r7, #8]
 8019752:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	3388      	adds	r3, #136	@ 0x88
 8019758:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 801975a:	69fb      	ldr	r3, [r7, #28]
 801975c:	781b      	ldrb	r3, [r3, #0]
 801975e:	2b55      	cmp	r3, #85	@ 0x55
 8019760:	f040 80ac 	bne.w	80198bc <upload_handler+0x174>
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	2b07      	cmp	r3, #7
 8019768:	f040 80a8 	bne.w	80198bc <upload_handler+0x174>
 801976c:	69fb      	ldr	r3, [r7, #28]
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	2b00      	cmp	r3, #0
 8019772:	f000 80a3 	beq.w	80198bc <upload_handler+0x174>
      c->recv.len > 0) {
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 801977a:	2b00      	cmp	r3, #0
 801977c:	f000 809e 	beq.w	80198bc <upload_handler+0x174>
    size_t alignment = 128;  // Maximum flash write granularity (MCXN947 ROM)
 8019780:	2380      	movs	r3, #128	@ 0x80
 8019782:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 8019784:	69fb      	ldr	r3, [r7, #28]
 8019786:	689a      	ldr	r2, [r3, #8]
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801978c:	441a      	add	r2, r3
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 8019792:	429a      	cmp	r2, r3
 8019794:	d210      	bcs.n	80197b8 <upload_handler+0x70>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 8019796:	69bb      	ldr	r3, [r7, #24]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d102      	bne.n	80197a2 <upload_handler+0x5a>
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80197a0:	e007      	b.n	80197b2 <upload_handler+0x6a>
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197a6:	69bb      	ldr	r3, [r7, #24]
 80197a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80197ac:	69ba      	ldr	r2, [r7, #24]
 80197ae:	fb02 f303 	mul.w	r3, r2, r3
 80197b2:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	e001      	b.n	80197bc <upload_handler+0x74>
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 80197bc:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 80197be:	697b      	ldr	r3, [r7, #20]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d00a      	beq.n	80197da <upload_handler+0x92>
 80197c4:	69fb      	ldr	r3, [r7, #28]
 80197c6:	695b      	ldr	r3, [r3, #20]
 80197c8:	69fa      	ldr	r2, [r7, #28]
 80197ca:	68d0      	ldr	r0, [r2, #12]
 80197cc:	68fa      	ldr	r2, [r7, #12]
 80197ce:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80197d0:	697a      	ldr	r2, [r7, #20]
 80197d2:	4798      	blx	r3
 80197d4:	4603      	mov	r3, r0
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d001      	beq.n	80197de <upload_handler+0x96>
 80197da:	2301      	movs	r3, #1
 80197dc:	e000      	b.n	80197e0 <upload_handler+0x98>
 80197de:	2300      	movs	r3, #0
 80197e0:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 80197e2:	69fb      	ldr	r3, [r7, #28]
 80197e4:	689a      	ldr	r2, [r3, #8]
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	441a      	add	r2, r3
 80197ea:	69fb      	ldr	r3, [r7, #28]
 80197ec:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 80197ee:	4b3a      	ldr	r3, [pc, #232]	@ (80198d8 <upload_handler+0x190>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	2b02      	cmp	r3, #2
 80197f4:	dd17      	ble.n	8019826 <upload_handler+0xde>
 80197f6:	4b39      	ldr	r3, [pc, #228]	@ (80198dc <upload_handler+0x194>)
 80197f8:	22fb      	movs	r2, #251	@ 0xfb
 80197fa:	4939      	ldr	r1, [pc, #228]	@ (80198e0 <upload_handler+0x198>)
 80197fc:	2003      	movs	r0, #3
 80197fe:	f7ee fc13 	bl	8008028 <mg_log_prefix>
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 801980a:	69fb      	ldr	r3, [r7, #28]
 801980c:	689b      	ldr	r3, [r3, #8]
 801980e:	69fa      	ldr	r2, [r7, #28]
 8019810:	6852      	ldr	r2, [r2, #4]
 8019812:	7cf9      	ldrb	r1, [r7, #19]
 8019814:	9102      	str	r1, [sp, #8]
 8019816:	9201      	str	r2, [sp, #4]
 8019818:	9300      	str	r3, [sp, #0]
 801981a:	4623      	mov	r3, r4
 801981c:	697a      	ldr	r2, [r7, #20]
 801981e:	4601      	mov	r1, r0
 8019820:	4830      	ldr	r0, [pc, #192]	@ (80198e4 <upload_handler+0x19c>)
 8019822:	f7ee fc51 	bl	80080c8 <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	3338      	adds	r3, #56	@ 0x38
 801982a:	697a      	ldr	r2, [r7, #20]
 801982c:	2100      	movs	r1, #0
 801982e:	4618      	mov	r0, r3
 8019830:	f7ed fd0a 	bl	8007248 <mg_iobuf_del>
    if (ok == false) {
 8019834:	7cfb      	ldrb	r3, [r7, #19]
 8019836:	f083 0301 	eor.w	r3, r3, #1
 801983a:	b2db      	uxtb	r3, r3
 801983c:	2b00      	cmp	r3, #0
 801983e:	d011      	beq.n	8019864 <upload_handler+0x11c>
      mg_http_reply(c, 400, "", "Upload error\n");
 8019840:	4b29      	ldr	r3, [pc, #164]	@ (80198e8 <upload_handler+0x1a0>)
 8019842:	4a2a      	ldr	r2, [pc, #168]	@ (80198ec <upload_handler+0x1a4>)
 8019844:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019848:	68f8      	ldr	r0, [r7, #12]
 801984a:	f7eb fe4f 	bl	80054ec <mg_http_reply>
      close_uploaded_file(us);
 801984e:	69f8      	ldr	r0, [r7, #28]
 8019850:	f7ff ff58 	bl	8019704 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8019854:	68fa      	ldr	r2, [r7, #12]
 8019856:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801985a:	f043 0310 	orr.w	r3, r3, #16
 801985e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 8019862:	e02b      	b.n	80198bc <upload_handler+0x174>
    } else if (us->received >= us->expected) {
 8019864:	69fb      	ldr	r3, [r7, #28]
 8019866:	689a      	ldr	r2, [r3, #8]
 8019868:	69fb      	ldr	r3, [r7, #28]
 801986a:	685b      	ldr	r3, [r3, #4]
 801986c:	429a      	cmp	r2, r3
 801986e:	d325      	bcc.n	80198bc <upload_handler+0x174>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 8019870:	4b19      	ldr	r3, [pc, #100]	@ (80198d8 <upload_handler+0x190>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	2b01      	cmp	r3, #1
 8019876:	dd0e      	ble.n	8019896 <upload_handler+0x14e>
 8019878:	4b18      	ldr	r3, [pc, #96]	@ (80198dc <upload_handler+0x194>)
 801987a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 801987e:	4918      	ldr	r1, [pc, #96]	@ (80198e0 <upload_handler+0x198>)
 8019880:	2002      	movs	r0, #2
 8019882:	f7ee fbd1 	bl	8008028 <mg_log_prefix>
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801988a:	69fb      	ldr	r3, [r7, #28]
 801988c:	689b      	ldr	r3, [r3, #8]
 801988e:	461a      	mov	r2, r3
 8019890:	4817      	ldr	r0, [pc, #92]	@ (80198f0 <upload_handler+0x1a8>)
 8019892:	f7ee fc19 	bl	80080c8 <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 8019896:	69fb      	ldr	r3, [r7, #28]
 8019898:	689b      	ldr	r3, [r3, #8]
 801989a:	9300      	str	r3, [sp, #0]
 801989c:	4b15      	ldr	r3, [pc, #84]	@ (80198f4 <upload_handler+0x1ac>)
 801989e:	2200      	movs	r2, #0
 80198a0:	21c8      	movs	r1, #200	@ 0xc8
 80198a2:	68f8      	ldr	r0, [r7, #12]
 80198a4:	f7eb fe22 	bl	80054ec <mg_http_reply>
      close_uploaded_file(us);
 80198a8:	69f8      	ldr	r0, [r7, #28]
 80198aa:	f7ff ff2b 	bl	8019704 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80198ae:	68fa      	ldr	r2, [r7, #12]
 80198b0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80198b4:	f043 0310 	orr.w	r3, r3, #16
 80198b8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 80198bc:	69fb      	ldr	r3, [r7, #28]
 80198be:	781b      	ldrb	r3, [r3, #0]
 80198c0:	2b55      	cmp	r3, #85	@ 0x55
 80198c2:	d105      	bne.n	80198d0 <upload_handler+0x188>
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	2b09      	cmp	r3, #9
 80198c8:	d102      	bne.n	80198d0 <upload_handler+0x188>
 80198ca:	69f8      	ldr	r0, [r7, #28]
 80198cc:	f7ff ff1a 	bl	8019704 <close_uploaded_file>
  (void) ev_data;
}
 80198d0:	3724      	adds	r7, #36	@ 0x24
 80198d2:	46bd      	mov	sp, r7
 80198d4:	bd90      	pop	{r4, r7, pc}
 80198d6:	bf00      	nop
 80198d8:	24000240 	.word	0x24000240
 80198dc:	08038384 	.word	0x08038384
 80198e0:	0802b60c 	.word	0x0802b60c
 80198e4:	0802b754 	.word	0x0802b754
 80198e8:	0802b778 	.word	0x0802b778
 80198ec:	0802b678 	.word	0x0802b678
 80198f0:	0802b788 	.word	0x0802b788
 80198f4:	0802b79c 	.word	0x0802b79c

080198f8 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b0a8      	sub	sp, #160	@ 0xa0
 80198fc:	af02      	add	r7, sp, #8
 80198fe:	60f8      	str	r0, [r7, #12]
 8019900:	60b9      	str	r1, [r7, #8]
 8019902:	607a      	str	r2, [r7, #4]
 8019904:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	3388      	adds	r3, #136	@ 0x88
 801990a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  struct mg_str parts[3];
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));                    // Cleanup upload state
 801990e:	2218      	movs	r2, #24
 8019910:	2100      	movs	r1, #0
 8019912:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8019916:	f00b faa1 	bl	8024e5c <memset>
  memset(parts, 0, sizeof(parts));               // Init match parts
 801991a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801991e:	2218      	movs	r2, #24
 8019920:	2100      	movs	r1, #0
 8019922:	4618      	mov	r0, r3
 8019924:	f00b fa9a 	bl	8024e5c <memset>
  mg_match(hm->uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8019928:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801992c:	493e      	ldr	r1, [pc, #248]	@ (8019a28 <prep_upload+0x130>)
 801992e:	4618      	mov	r0, r3
 8019930:	f7f5 fa42 	bl	800edb8 <mg_str_s>
 8019934:	68b9      	ldr	r1, [r7, #8]
 8019936:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801993a:	9300      	str	r3, [sp, #0]
 801993c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8019940:	cb0c      	ldmia	r3, {r2, r3}
 8019942:	3108      	adds	r1, #8
 8019944:	c903      	ldmia	r1, {r0, r1}
 8019946:	f7f5 fb41 	bl	800efcc <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, path, sizeof(path), 0);
 801994a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801994c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8019950:	f107 0210 	add.w	r2, r7, #16
 8019954:	2300      	movs	r3, #0
 8019956:	9300      	str	r3, [sp, #0]
 8019958:	2364      	movs	r3, #100	@ 0x64
 801995a:	f7ea fcae 	bl	80042ba <mg_url_decode>
  us->fp = fn_open(path, hm->body.len);
 801995e:	68bb      	ldr	r3, [r7, #8]
 8019960:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8019964:	f107 0210 	add.w	r2, r7, #16
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	4610      	mov	r0, r2
 801996c:	4798      	blx	r3
 801996e:	4602      	mov	r2, r0
 8019970:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019974:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 8019976:	4b2d      	ldr	r3, [pc, #180]	@ (8019a2c <prep_upload+0x134>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	2b02      	cmp	r3, #2
 801997c:	dd11      	ble.n	80199a2 <prep_upload+0xaa>
 801997e:	4b2c      	ldr	r3, [pc, #176]	@ (8019a30 <prep_upload+0x138>)
 8019980:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8019984:	492b      	ldr	r1, [pc, #172]	@ (8019a34 <prep_upload+0x13c>)
 8019986:	2003      	movs	r0, #3
 8019988:	f7ee fb4e 	bl	8008028 <mg_log_prefix>
 801998c:	68bb      	ldr	r3, [r7, #8]
 801998e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019992:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019996:	68db      	ldr	r3, [r3, #12]
 8019998:	f107 0110 	add.w	r1, r7, #16
 801999c:	4826      	ldr	r0, [pc, #152]	@ (8019a38 <prep_upload+0x140>)
 801999e:	f7ee fb93 	bl	80080c8 <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 80199a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80199a6:	2255      	movs	r2, #85	@ 0x55
 80199a8:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 80199aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80199ae:	68db      	ldr	r3, [r3, #12]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d10e      	bne.n	80199d2 <prep_upload+0xda>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 80199b4:	4b21      	ldr	r3, [pc, #132]	@ (8019a3c <prep_upload+0x144>)
 80199b6:	4a22      	ldr	r2, [pc, #136]	@ (8019a40 <prep_upload+0x148>)
 80199b8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80199bc:	68f8      	ldr	r0, [r7, #12]
 80199be:	f7eb fd95 	bl	80054ec <mg_http_reply>
    c->is_draining = 1;
 80199c2:	68fa      	ldr	r2, [r7, #12]
 80199c4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80199c8:	f043 0310 	orr.w	r3, r3, #16
 80199cc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 80199d0:	e026      	b.n	8019a20 <prep_upload+0x128>
    us->expected = hm->body.len;              // Store number of bytes we expect
 80199d2:	68bb      	ldr	r3, [r7, #8]
 80199d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80199d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80199dc:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 80199de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80199e2:	683a      	ldr	r2, [r7, #0]
 80199e4:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 80199e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80199ea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80199ee:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80199fc:	461a      	mov	r2, r3
 80199fe:	2100      	movs	r1, #0
 8019a00:	f7ed fc22 	bl	8007248 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	4a0f      	ldr	r2, [pc, #60]	@ (8019a44 <prep_upload+0x14c>)
 8019a08:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	3340      	adds	r3, #64	@ 0x40
 8019a16:	461a      	mov	r2, r3
 8019a18:	2107      	movs	r1, #7
 8019a1a:	68f8      	ldr	r0, [r7, #12]
 8019a1c:	f7e8 fff8 	bl	8002a10 <mg_call>
}
 8019a20:	bf00      	nop
 8019a22:	3798      	adds	r7, #152	@ 0x98
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bd80      	pop	{r7, pc}
 8019a28:	0802b7a4 	.word	0x0802b7a4
 8019a2c:	24000240 	.word	0x24000240
 8019a30:	08038394 	.word	0x08038394
 8019a34:	0802b60c 	.word	0x0802b60c
 8019a38:	0802b7b0 	.word	0x0802b7b0
 8019a3c:	0802b7cc 	.word	0x0802b7cc
 8019a40:	0802b7e0 	.word	0x0802b7e0
 8019a44:	08019749 	.word	0x08019749

08019a48 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b08c      	sub	sp, #48	@ 0x30
 8019a4c:	af02      	add	r7, sp, #8
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	3388      	adds	r3, #136	@ 0x88
 8019a58:	627b      	str	r3, [r7, #36]	@ 0x24

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0) {
 8019a5a:	68bb      	ldr	r3, [r7, #8]
 8019a5c:	2b0a      	cmp	r3, #10
 8019a5e:	d160      	bne.n	8019b22 <handle_uploads+0xda>
 8019a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d15c      	bne.n	8019b22 <handle_uploads+0xda>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	623b      	str	r3, [r7, #32]
    struct apihandler *h = find_handler(hm);
 8019a6c:	6a38      	ldr	r0, [r7, #32]
 8019a6e:	f7ff fc1b 	bl	80192a8 <find_handler>
 8019a72:	61f8      	str	r0, [r7, #28]
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8019a74:	6a38      	ldr	r0, [r7, #32]
 8019a76:	f7ff fcbf 	bl	80193f8 <authenticate>
 8019a7a:	61b8      	str	r0, [r7, #24]
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 8019a7c:	f107 0310 	add.w	r3, r7, #16
 8019a80:	492a      	ldr	r1, [pc, #168]	@ (8019b2c <handle_uploads+0xe4>)
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7f5 f998 	bl	800edb8 <mg_str_s>
 8019a88:	6a39      	ldr	r1, [r7, #32]
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	9300      	str	r3, [sp, #0]
 8019a8e:	f107 0310 	add.w	r3, r7, #16
 8019a92:	cb0c      	ldmia	r3, {r2, r3}
 8019a94:	3108      	adds	r1, #8
 8019a96:	c903      	ldmia	r1, {r0, r1}
 8019a98:	f7f5 fa98 	bl	800efcc <mg_match>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d01e      	beq.n	8019ae0 <handle_uploads+0x98>
 8019aa2:	69bb      	ldr	r3, [r7, #24]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d013      	beq.n	8019ad0 <handle_uploads+0x88>
        (u == NULL ||
 8019aa8:	69fb      	ldr	r3, [r7, #28]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d018      	beq.n	8019ae0 <handle_uploads+0x98>
         (h != NULL && (u->level < h->read_level ||
 8019aae:	69bb      	ldr	r3, [r7, #24]
 8019ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019ab2:	69fb      	ldr	r3, [r7, #28]
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	db0a      	blt.n	8019ad0 <handle_uploads+0x88>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019aba:	6a3b      	ldr	r3, [r7, #32]
 8019abc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d00d      	beq.n	8019ae0 <handle_uploads+0x98>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019ac4:	69bb      	ldr	r3, [r7, #24]
 8019ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019ac8:	69fb      	ldr	r3, [r7, #28]
 8019aca:	691b      	ldr	r3, [r3, #16]
 8019acc:	429a      	cmp	r2, r3
 8019ace:	da07      	bge.n	8019ae0 <handle_uploads+0x98>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8019ad0:	4b17      	ldr	r3, [pc, #92]	@ (8019b30 <handle_uploads+0xe8>)
 8019ad2:	4a18      	ldr	r2, [pc, #96]	@ (8019b34 <handle_uploads+0xec>)
 8019ad4:	f240 1193 	movw	r1, #403	@ 0x193
 8019ad8:	68f8      	ldr	r0, [r7, #12]
 8019ada:	f7eb fd07 	bl	80054ec <mg_http_reply>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
      // OTA/upload endpoints
      prep_upload(c, hm, h->opener, h->closer, h->writer);
    }
  }
}
 8019ade:	e020      	b.n	8019b22 <handle_uploads+0xda>
        if (h != NULL &&
 8019ae0:	69fb      	ldr	r3, [r7, #28]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d01d      	beq.n	8019b22 <handle_uploads+0xda>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	685b      	ldr	r3, [r3, #4]
 8019aea:	4913      	ldr	r1, [pc, #76]	@ (8019b38 <handle_uploads+0xf0>)
 8019aec:	4618      	mov	r0, r3
 8019aee:	f7e6 fbf7 	bl	80002e0 <strcmp>
 8019af2:	4603      	mov	r3, r0
        if (h != NULL &&
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d008      	beq.n	8019b0a <handle_uploads+0xc2>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	685b      	ldr	r3, [r3, #4]
 8019afc:	490f      	ldr	r1, [pc, #60]	@ (8019b3c <handle_uploads+0xf4>)
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7e6 fbee 	bl	80002e0 <strcmp>
 8019b04:	4603      	mov	r3, r0
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d10b      	bne.n	8019b22 <handle_uploads+0xda>
      prep_upload(c, hm, h->opener, h->closer, h->writer);
 8019b0a:	69fb      	ldr	r3, [r7, #28]
 8019b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b0e:	69fb      	ldr	r3, [r7, #28]
 8019b10:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8019b12:	69fb      	ldr	r3, [r7, #28]
 8019b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b16:	9300      	str	r3, [sp, #0]
 8019b18:	460b      	mov	r3, r1
 8019b1a:	6a39      	ldr	r1, [r7, #32]
 8019b1c:	68f8      	ldr	r0, [r7, #12]
 8019b1e:	f7ff feeb 	bl	80198f8 <prep_upload>
}
 8019b22:	bf00      	nop
 8019b24:	3728      	adds	r7, #40	@ 0x28
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}
 8019b2a:	bf00      	nop
 8019b2c:	0802b81c 	.word	0x0802b81c
 8019b30:	0802b824 	.word	0x0802b824
 8019b34:	0802b7e0 	.word	0x0802b7e0
 8019b38:	0802b5ac 	.word	0x0802b5ac
 8019b3c:	0802b59c 	.word	0x0802b59c

08019b40 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void), void (*start_fn)(void)) {
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b088      	sub	sp, #32
 8019b44:	af02      	add	r7, sp, #8
 8019b46:	60f8      	str	r0, [r7, #12]
 8019b48:	60b9      	str	r1, [r7, #8]
 8019b4a:	607a      	str	r2, [r7, #4]
 8019b4c:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d017      	beq.n	8019b88 <handle_action+0x48>
    start_fn();
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	4798      	blx	r3
    if (check_fn()) {
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	4798      	blx	r3
 8019b60:	4603      	mov	r3, r0
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d009      	beq.n	8019b7a <handle_action+0x3a>
      struct action_state *as = (struct action_state *) c->data;
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	3388      	adds	r3, #136	@ 0x88
 8019b6a:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 8019b6c:	697b      	ldr	r3, [r7, #20]
 8019b6e:	2241      	movs	r2, #65	@ 0x41
 8019b70:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8019b72:	697b      	ldr	r3, [r7, #20]
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8019b78:	e015      	b.n	8019ba6 <handle_action+0x66>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8019b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019bb0 <handle_action+0x70>)
 8019b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8019bb4 <handle_action+0x74>)
 8019b7e:	21c8      	movs	r1, #200	@ 0xc8
 8019b80:	68f8      	ldr	r0, [r7, #12]
 8019b82:	f7eb fcb3 	bl	80054ec <mg_http_reply>
}
 8019b86:	e00e      	b.n	8019ba6 <handle_action+0x66>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	4798      	blx	r3
 8019b8c:	4603      	mov	r3, r0
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d001      	beq.n	8019b96 <handle_action+0x56>
 8019b92:	4b09      	ldr	r3, [pc, #36]	@ (8019bb8 <handle_action+0x78>)
 8019b94:	e000      	b.n	8019b98 <handle_action+0x58>
 8019b96:	4b06      	ldr	r3, [pc, #24]	@ (8019bb0 <handle_action+0x70>)
 8019b98:	9300      	str	r3, [sp, #0]
 8019b9a:	4b08      	ldr	r3, [pc, #32]	@ (8019bbc <handle_action+0x7c>)
 8019b9c:	4a05      	ldr	r2, [pc, #20]	@ (8019bb4 <handle_action+0x74>)
 8019b9e:	21c8      	movs	r1, #200	@ 0xc8
 8019ba0:	68f8      	ldr	r0, [r7, #12]
 8019ba2:	f7eb fca3 	bl	80054ec <mg_http_reply>
}
 8019ba6:	bf00      	nop
 8019ba8:	3718      	adds	r7, #24
 8019baa:	46bd      	mov	sp, r7
 8019bac:	bd80      	pop	{r7, pc}
 8019bae:	bf00      	nop
 8019bb0:	0802b834 	.word	0x0802b834
 8019bb4:	0802b7e0 	.word	0x0802b7e0
 8019bb8:	0802b83c 	.word	0x0802b83c
 8019bbc:	0802b64c 	.word	0x0802b64c

08019bc0 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b08e      	sub	sp, #56	@ 0x38
 8019bc4:	af04      	add	r7, sp, #16
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	607a      	str	r2, [r7, #4]
  struct apihandler *h = va_arg(*ap, struct apihandler *);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	1d19      	adds	r1, r3, #4
 8019bd2:	687a      	ldr	r2, [r7, #4]
 8019bd4:	6011      	str	r1, [r2, #0]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	1d19      	adds	r1, r3, #4
 8019be0:	687a      	ldr	r2, [r7, #4]
 8019be2:	6011      	str	r1, [r2, #0]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8019be8:	2300      	movs	r3, #0
 8019bea:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 8019bec:	2300      	movs	r3, #0
 8019bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8019bf0:	e0bf      	b.n	8019d72 <print_struct+0x1b2>
    char *attrptr = data + h->attributes[i].offset;
 8019bf2:	69bb      	ldr	r3, [r7, #24]
 8019bf4:	6999      	ldr	r1, [r3, #24]
 8019bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019bf8:	4613      	mov	r3, r2
 8019bfa:	005b      	lsls	r3, r3, #1
 8019bfc:	4413      	add	r3, r2
 8019bfe:	00db      	lsls	r3, r3, #3
 8019c00:	440b      	add	r3, r1
 8019c02:	68db      	ldr	r3, [r3, #12]
 8019c04:	697a      	ldr	r2, [r7, #20]
 8019c06:	4413      	add	r3, r2
 8019c08:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d101      	bne.n	8019c14 <print_struct+0x54>
 8019c10:	4860      	ldr	r0, [pc, #384]	@ (8019d94 <print_struct+0x1d4>)
 8019c12:	e000      	b.n	8019c16 <print_struct+0x56>
 8019c14:	4860      	ldr	r0, [pc, #384]	@ (8019d98 <print_struct+0x1d8>)
                      MG_ESC(h->attributes[i].name));
 8019c16:	69bb      	ldr	r3, [r7, #24]
 8019c18:	6999      	ldr	r1, [r3, #24]
 8019c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019c1c:	4613      	mov	r3, r2
 8019c1e:	005b      	lsls	r3, r3, #1
 8019c20:	4413      	add	r3, r2
 8019c22:	00db      	lsls	r3, r3, #3
 8019c24:	440b      	add	r3, r1
 8019c26:	681b      	ldr	r3, [r3, #0]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 8019c28:	9302      	str	r3, [sp, #8]
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	9301      	str	r3, [sp, #4]
 8019c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8019d9c <print_struct+0x1dc>)
 8019c30:	9300      	str	r3, [sp, #0]
 8019c32:	4603      	mov	r3, r0
 8019c34:	4a5a      	ldr	r2, [pc, #360]	@ (8019da0 <print_struct+0x1e0>)
 8019c36:	68b9      	ldr	r1, [r7, #8]
 8019c38:	68f8      	ldr	r0, [r7, #12]
 8019c3a:	f7e9 fb9e 	bl	800337a <mg_xprintf>
 8019c3e:	4602      	mov	r2, r0
 8019c40:	6a3b      	ldr	r3, [r7, #32]
 8019c42:	4413      	add	r3, r2
 8019c44:	623b      	str	r3, [r7, #32]
    if (strcmp(h->attributes[i].type, "int") == 0) {
 8019c46:	69bb      	ldr	r3, [r7, #24]
 8019c48:	6999      	ldr	r1, [r3, #24]
 8019c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019c4c:	4613      	mov	r3, r2
 8019c4e:	005b      	lsls	r3, r3, #1
 8019c50:	4413      	add	r3, r2
 8019c52:	00db      	lsls	r3, r3, #3
 8019c54:	440b      	add	r3, r1
 8019c56:	685b      	ldr	r3, [r3, #4]
 8019c58:	4952      	ldr	r1, [pc, #328]	@ (8019da4 <print_struct+0x1e4>)
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f7e6 fb40 	bl	80002e0 <strcmp>
 8019c60:	4603      	mov	r3, r0
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d10b      	bne.n	8019c7e <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8019c66:	693b      	ldr	r3, [r7, #16]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	4a4f      	ldr	r2, [pc, #316]	@ (8019da8 <print_struct+0x1e8>)
 8019c6c:	68b9      	ldr	r1, [r7, #8]
 8019c6e:	68f8      	ldr	r0, [r7, #12]
 8019c70:	f7e9 fb83 	bl	800337a <mg_xprintf>
 8019c74:	4602      	mov	r2, r0
 8019c76:	6a3b      	ldr	r3, [r7, #32]
 8019c78:	4413      	add	r3, r2
 8019c7a:	623b      	str	r3, [r7, #32]
 8019c7c:	e076      	b.n	8019d6c <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "double") == 0) {
 8019c7e:	69bb      	ldr	r3, [r7, #24]
 8019c80:	6999      	ldr	r1, [r3, #24]
 8019c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019c84:	4613      	mov	r3, r2
 8019c86:	005b      	lsls	r3, r3, #1
 8019c88:	4413      	add	r3, r2
 8019c8a:	00db      	lsls	r3, r3, #3
 8019c8c:	440b      	add	r3, r1
 8019c8e:	685b      	ldr	r3, [r3, #4]
 8019c90:	4946      	ldr	r1, [pc, #280]	@ (8019dac <print_struct+0x1ec>)
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7e6 fb24 	bl	80002e0 <strcmp>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d11d      	bne.n	8019cda <print_struct+0x11a>
      const char *fmt = h->attributes[i].format;
 8019c9e:	69bb      	ldr	r3, [r7, #24]
 8019ca0:	6999      	ldr	r1, [r3, #24]
 8019ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	005b      	lsls	r3, r3, #1
 8019ca8:	4413      	add	r3, r2
 8019caa:	00db      	lsls	r3, r3, #3
 8019cac:	440b      	add	r3, r1
 8019cae:	689b      	ldr	r3, [r3, #8]
 8019cb0:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 8019cb2:	69fb      	ldr	r3, [r7, #28]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d101      	bne.n	8019cbc <print_struct+0xfc>
 8019cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8019db0 <print_struct+0x1f0>)
 8019cba:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc2:	e9cd 2300 	strd	r2, r3, [sp]
 8019cc6:	69fa      	ldr	r2, [r7, #28]
 8019cc8:	68b9      	ldr	r1, [r7, #8]
 8019cca:	68f8      	ldr	r0, [r7, #12]
 8019ccc:	f7e9 fb55 	bl	800337a <mg_xprintf>
 8019cd0:	4602      	mov	r2, r0
 8019cd2:	6a3b      	ldr	r3, [r7, #32]
 8019cd4:	4413      	add	r3, r2
 8019cd6:	623b      	str	r3, [r7, #32]
 8019cd8:	e048      	b.n	8019d6c <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "bool") == 0) {
 8019cda:	69bb      	ldr	r3, [r7, #24]
 8019cdc:	6999      	ldr	r1, [r3, #24]
 8019cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ce0:	4613      	mov	r3, r2
 8019ce2:	005b      	lsls	r3, r3, #1
 8019ce4:	4413      	add	r3, r2
 8019ce6:	00db      	lsls	r3, r3, #3
 8019ce8:	440b      	add	r3, r1
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	4931      	ldr	r1, [pc, #196]	@ (8019db4 <print_struct+0x1f4>)
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f7e6 faf6 	bl	80002e0 <strcmp>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d110      	bne.n	8019d1c <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8019cfa:	693b      	ldr	r3, [r7, #16]
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d001      	beq.n	8019d06 <print_struct+0x146>
 8019d02:	4b2d      	ldr	r3, [pc, #180]	@ (8019db8 <print_struct+0x1f8>)
 8019d04:	e000      	b.n	8019d08 <print_struct+0x148>
 8019d06:	4b2d      	ldr	r3, [pc, #180]	@ (8019dbc <print_struct+0x1fc>)
 8019d08:	4a2d      	ldr	r2, [pc, #180]	@ (8019dc0 <print_struct+0x200>)
 8019d0a:	68b9      	ldr	r1, [r7, #8]
 8019d0c:	68f8      	ldr	r0, [r7, #12]
 8019d0e:	f7e9 fb34 	bl	800337a <mg_xprintf>
 8019d12:	4602      	mov	r2, r0
 8019d14:	6a3b      	ldr	r3, [r7, #32]
 8019d16:	4413      	add	r3, r2
 8019d18:	623b      	str	r3, [r7, #32]
 8019d1a:	e027      	b.n	8019d6c <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "string") == 0) {
 8019d1c:	69bb      	ldr	r3, [r7, #24]
 8019d1e:	6999      	ldr	r1, [r3, #24]
 8019d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d22:	4613      	mov	r3, r2
 8019d24:	005b      	lsls	r3, r3, #1
 8019d26:	4413      	add	r3, r2
 8019d28:	00db      	lsls	r3, r3, #3
 8019d2a:	440b      	add	r3, r1
 8019d2c:	685b      	ldr	r3, [r3, #4]
 8019d2e:	4925      	ldr	r1, [pc, #148]	@ (8019dc4 <print_struct+0x204>)
 8019d30:	4618      	mov	r0, r3
 8019d32:	f7e6 fad5 	bl	80002e0 <strcmp>
 8019d36:	4603      	mov	r3, r0
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d10e      	bne.n	8019d5a <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8019d3c:	693b      	ldr	r3, [r7, #16]
 8019d3e:	9301      	str	r3, [sp, #4]
 8019d40:	2300      	movs	r3, #0
 8019d42:	9300      	str	r3, [sp, #0]
 8019d44:	4b15      	ldr	r3, [pc, #84]	@ (8019d9c <print_struct+0x1dc>)
 8019d46:	4a20      	ldr	r2, [pc, #128]	@ (8019dc8 <print_struct+0x208>)
 8019d48:	68b9      	ldr	r1, [r7, #8]
 8019d4a:	68f8      	ldr	r0, [r7, #12]
 8019d4c:	f7e9 fb15 	bl	800337a <mg_xprintf>
 8019d50:	4602      	mov	r2, r0
 8019d52:	6a3b      	ldr	r3, [r7, #32]
 8019d54:	4413      	add	r3, r2
 8019d56:	623b      	str	r3, [r7, #32]
 8019d58:	e008      	b.n	8019d6c <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8019d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8019dcc <print_struct+0x20c>)
 8019d5c:	68b9      	ldr	r1, [r7, #8]
 8019d5e:	68f8      	ldr	r0, [r7, #12]
 8019d60:	f7e9 fb0b 	bl	800337a <mg_xprintf>
 8019d64:	4602      	mov	r2, r0
 8019d66:	6a3b      	ldr	r3, [r7, #32]
 8019d68:	4413      	add	r3, r2
 8019d6a:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 8019d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d6e:	3301      	adds	r3, #1
 8019d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d72:	69bb      	ldr	r3, [r7, #24]
 8019d74:	6999      	ldr	r1, [r3, #24]
 8019d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d78:	4613      	mov	r3, r2
 8019d7a:	005b      	lsls	r3, r3, #1
 8019d7c:	4413      	add	r3, r2
 8019d7e:	00db      	lsls	r3, r3, #3
 8019d80:	440b      	add	r3, r1
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	f47f af34 	bne.w	8019bf2 <print_struct+0x32>
    }
  }
  return len;
 8019d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	3728      	adds	r7, #40	@ 0x28
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}
 8019d94:	0802b678 	.word	0x0802b678
 8019d98:	0802b844 	.word	0x0802b844
 8019d9c:	0800dc21 	.word	0x0800dc21
 8019da0:	0802b848 	.word	0x0802b848
 8019da4:	0802b4a8 	.word	0x0802b4a8
 8019da8:	0802b850 	.word	0x0802b850
 8019dac:	0802b538 	.word	0x0802b538
 8019db0:	0802b854 	.word	0x0802b854
 8019db4:	0802b4e4 	.word	0x0802b4e4
 8019db8:	0802b83c 	.word	0x0802b83c
 8019dbc:	0802b834 	.word	0x0802b834
 8019dc0:	0802b64c 	.word	0x0802b64c
 8019dc4:	0802b4d4 	.word	0x0802b4d4
 8019dc8:	0802b858 	.word	0x0802b858
 8019dcc:	0802b85c 	.word	0x0802b85c

08019dd0 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler *h) {
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b0a8      	sub	sp, #160	@ 0xa0
 8019dd4:	af04      	add	r7, sp, #16
 8019dd6:	60f8      	str	r0, [r7, #12]
 8019dd8:	60b9      	str	r1, [r7, #8]
 8019dda:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019de0:	4619      	mov	r1, r3
 8019de2:	2001      	movs	r0, #1
 8019de4:	f009 fd8a 	bl	80238fc <calloc>
 8019de8:	4603      	mov	r3, r0
 8019dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	69db      	ldr	r3, [r3, #28]
 8019df2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019df6:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8019df8:	68bb      	ldr	r3, [r7, #8]
 8019dfa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	f000 80d6 	beq.w	8019fb0 <handle_object+0x1e0>
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	f000 80d1 	beq.w	8019fb0 <handle_object+0x1e0>
    char *tmp = calloc(1, h->data_size);
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e12:	4619      	mov	r1, r3
 8019e14:	2001      	movs	r0, #1
 8019e16:	f009 fd71 	bl	80238fc <calloc>
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e24:	461a      	mov	r2, r3
 8019e26:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8019e2a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019e2e:	f00b f960 	bl	80250f2 <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8019e32:	2300      	movs	r3, #0
 8019e34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019e38:	e08e      	b.n	8019f58 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	6999      	ldr	r1, [r3, #24]
 8019e3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019e42:	4613      	mov	r3, r2
 8019e44:	005b      	lsls	r3, r3, #1
 8019e46:	4413      	add	r3, r2
 8019e48:	00db      	lsls	r3, r3, #3
 8019e4a:	440b      	add	r3, r1
 8019e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8019e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	f107 0010 	add.w	r0, r7, #16
 8019e5a:	4a60      	ldr	r2, [pc, #384]	@ (8019fdc <handle_object+0x20c>)
 8019e5c:	2164      	movs	r1, #100	@ 0x64
 8019e5e:	f7f3 fc99 	bl	800d794 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 8019e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019e66:	685b      	ldr	r3, [r3, #4]
 8019e68:	495d      	ldr	r1, [pc, #372]	@ (8019fe0 <handle_object+0x210>)
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7e6 fa38 	bl	80002e0 <strcmp>
 8019e70:	4603      	mov	r3, r0
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d11c      	bne.n	8019eb0 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8019e76:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019e7a:	f107 0210 	add.w	r2, r7, #16
 8019e7e:	68b9      	ldr	r1, [r7, #8]
 8019e80:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019e84:	c903      	ldmia	r1, {r0, r1}
 8019e86:	f7ed ff6e 	bl	8007d66 <mg_json_get_num>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d05e      	beq.n	8019f4e <handle_object+0x17e>
          int v = (int) d;
 8019e90:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8019e94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019e98:	ee17 3a90 	vmov	r3, s15
 8019e9c:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 8019e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019ea8:	4413      	add	r3, r2
 8019eaa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8019eac:	601a      	str	r2, [r3, #0]
 8019eae:	e04e      	b.n	8019f4e <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 8019eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019eb4:	685b      	ldr	r3, [r3, #4]
 8019eb6:	494b      	ldr	r1, [pc, #300]	@ (8019fe4 <handle_object+0x214>)
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f7e6 fa11 	bl	80002e0 <strcmp>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d10e      	bne.n	8019ee2 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8019ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ec8:	68db      	ldr	r3, [r3, #12]
 8019eca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019ece:	4413      	add	r3, r2
 8019ed0:	f107 0210 	add.w	r2, r7, #16
 8019ed4:	68b9      	ldr	r1, [r7, #8]
 8019ed6:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019eda:	c903      	ldmia	r1, {r0, r1}
 8019edc:	f7ed ff88 	bl	8007df0 <mg_json_get_bool>
 8019ee0:	e035      	b.n	8019f4e <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 8019ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ee6:	685b      	ldr	r3, [r3, #4]
 8019ee8:	493f      	ldr	r1, [pc, #252]	@ (8019fe8 <handle_object+0x218>)
 8019eea:	4618      	mov	r0, r3
 8019eec:	f7e6 f9f8 	bl	80002e0 <strcmp>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d10e      	bne.n	8019f14 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8019ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019efa:	68db      	ldr	r3, [r3, #12]
 8019efc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019f00:	4413      	add	r3, r2
 8019f02:	f107 0210 	add.w	r2, r7, #16
 8019f06:	68b9      	ldr	r1, [r7, #8]
 8019f08:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019f0c:	c903      	ldmia	r1, {r0, r1}
 8019f0e:	f7ed ff2a 	bl	8007d66 <mg_json_get_num>
 8019f12:	e01c      	b.n	8019f4e <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8019f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019f18:	685b      	ldr	r3, [r3, #4]
 8019f1a:	4934      	ldr	r1, [pc, #208]	@ (8019fec <handle_object+0x21c>)
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7e6 f9df 	bl	80002e0 <strcmp>
 8019f22:	4603      	mov	r3, r0
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d112      	bne.n	8019f4e <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8019f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019f2c:	68db      	ldr	r3, [r3, #12]
 8019f2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019f32:	18d0      	adds	r0, r2, r3
 8019f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019f38:	691b      	ldr	r3, [r3, #16]
 8019f3a:	f107 0210 	add.w	r2, r7, #16
 8019f3e:	68b9      	ldr	r1, [r7, #8]
 8019f40:	9300      	str	r3, [sp, #0]
 8019f42:	4603      	mov	r3, r0
 8019f44:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019f48:	c903      	ldmia	r1, {r0, r1}
 8019f4a:	f7ff fa29 	bl	80193a0 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8019f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019f52:	3301      	adds	r3, #1
 8019f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	6999      	ldr	r1, [r3, #24]
 8019f5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019f60:	4613      	mov	r3, r2
 8019f62:	005b      	lsls	r3, r3, #1
 8019f64:	4413      	add	r3, r2
 8019f66:	00db      	lsls	r3, r3, #3
 8019f68:	440b      	add	r3, r1
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	f47f af64 	bne.w	8019e3a <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f76:	461a      	mov	r2, r3
 8019f78:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8019f7c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019f80:	f00a ff42 	bl	8024e08 <memcmp>
 8019f84:	4603      	mov	r3, r0
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d004      	beq.n	8019f94 <handle_object+0x1c4>
 8019f8a:	4b19      	ldr	r3, [pc, #100]	@ (8019ff0 <handle_object+0x220>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	3301      	adds	r3, #1
 8019f90:	4a17      	ldr	r2, [pc, #92]	@ (8019ff0 <handle_object+0x220>)
 8019f92:	6013      	str	r3, [r2, #0]
    h->setter(tmp);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6a1b      	ldr	r3, [r3, #32]
 8019f98:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019f9c:	4798      	blx	r3
    free(tmp);
 8019f9e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019fa2:	f009 fccf 	bl	8023944 <free>
    h->getter(data);  // Re-sync again after setting
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	69db      	ldr	r3, [r3, #28]
 8019faa:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019fae:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h, data);
 8019fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019fb4:	9302      	str	r3, [sp, #8]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	9301      	str	r3, [sp, #4]
 8019fba:	4b0e      	ldr	r3, [pc, #56]	@ (8019ff4 <handle_object+0x224>)
 8019fbc:	9300      	str	r3, [sp, #0]
 8019fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8019ff8 <handle_object+0x228>)
 8019fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8019ffc <handle_object+0x22c>)
 8019fc2:	21c8      	movs	r1, #200	@ 0xc8
 8019fc4:	68f8      	ldr	r0, [r7, #12]
 8019fc6:	f7eb fa91 	bl	80054ec <mg_http_reply>
  free(data);
 8019fca:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019fce:	f009 fcb9 	bl	8023944 <free>
}
 8019fd2:	bf00      	nop
 8019fd4:	3790      	adds	r7, #144	@ 0x90
 8019fd6:	46bd      	mov	sp, r7
 8019fd8:	bd80      	pop	{r7, pc}
 8019fda:	bf00      	nop
 8019fdc:	0802b864 	.word	0x0802b864
 8019fe0:	0802b4a8 	.word	0x0802b4a8
 8019fe4:	0802b4e4 	.word	0x0802b4e4
 8019fe8:	0802b538 	.word	0x0802b538
 8019fec:	0802b4d4 	.word	0x0802b4d4
 8019ff0:	24003f68 	.word	0x24003f68
 8019ff4:	08019bc1 	.word	0x08019bc1
 8019ff8:	0802b86c 	.word	0x0802b86c
 8019ffc:	0802b7e0 	.word	0x0802b7e0

0801a000 <print_timeseries>:

size_t print_timeseries(void (*out)(char, void *), void *ptr, va_list *ap) {
 801a000:	b580      	push	{r7, lr}
 801a002:	b08e      	sub	sp, #56	@ 0x38
 801a004:	af04      	add	r7, sp, #16
 801a006:	60f8      	str	r0, [r7, #12]
 801a008:	60b9      	str	r1, [r7, #8]
 801a00a:	607a      	str	r2, [r7, #4]
  uint32_t *timestamps = va_arg(*ap, uint32_t *);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	1d19      	adds	r1, r3, #4
 801a012:	687a      	ldr	r2, [r7, #4]
 801a014:	6011      	str	r1, [r2, #0]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	61fb      	str	r3, [r7, #28]
  double *values = va_arg(*ap, double *);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	1d19      	adds	r1, r3, #4
 801a020:	687a      	ldr	r2, [r7, #4]
 801a022:	6011      	str	r1, [r2, #0]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	61bb      	str	r3, [r7, #24]
  size_t count = va_arg(*ap, size_t);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	1d19      	adds	r1, r3, #4
 801a02e:	687a      	ldr	r2, [r7, #4]
 801a030:	6011      	str	r1, [r2, #0]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 801a036:	2300      	movs	r3, #0
 801a038:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 801a03a:	2300      	movs	r3, #0
 801a03c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a03e:	e021      	b.n	801a084 <print_timeseries+0x84>
    const char *comma = i == 0 ? "" : ",";
 801a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a042:	2b00      	cmp	r3, #0
 801a044:	d101      	bne.n	801a04a <print_timeseries+0x4a>
 801a046:	4b14      	ldr	r3, [pc, #80]	@ (801a098 <print_timeseries+0x98>)
 801a048:	e000      	b.n	801a04c <print_timeseries+0x4c>
 801a04a:	4b14      	ldr	r3, [pc, #80]	@ (801a09c <print_timeseries+0x9c>)
 801a04c:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s[%lu,%g]", comma, timestamps[i], values[i]);
 801a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a050:	009b      	lsls	r3, r3, #2
 801a052:	69fa      	ldr	r2, [r7, #28]
 801a054:	4413      	add	r3, r2
 801a056:	6819      	ldr	r1, [r3, #0]
 801a058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a05a:	00db      	lsls	r3, r3, #3
 801a05c:	69ba      	ldr	r2, [r7, #24]
 801a05e:	4413      	add	r3, r2
 801a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a068:	9100      	str	r1, [sp, #0]
 801a06a:	693b      	ldr	r3, [r7, #16]
 801a06c:	4a0c      	ldr	r2, [pc, #48]	@ (801a0a0 <print_timeseries+0xa0>)
 801a06e:	68b9      	ldr	r1, [r7, #8]
 801a070:	68f8      	ldr	r0, [r7, #12]
 801a072:	f7e9 f982 	bl	800337a <mg_xprintf>
 801a076:	4602      	mov	r2, r0
 801a078:	6a3b      	ldr	r3, [r7, #32]
 801a07a:	4413      	add	r3, r2
 801a07c:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 801a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a080:	3301      	adds	r3, #1
 801a082:	627b      	str	r3, [r7, #36]	@ 0x24
 801a084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	429a      	cmp	r2, r3
 801a08a:	d3d9      	bcc.n	801a040 <print_timeseries+0x40>
  }
  return len;
 801a08c:	6a3b      	ldr	r3, [r7, #32]
}
 801a08e:	4618      	mov	r0, r3
 801a090:	3728      	adds	r7, #40	@ 0x28
 801a092:	46bd      	mov	sp, r7
 801a094:	bd80      	pop	{r7, pc}
 801a096:	bf00      	nop
 801a098:	0802b678 	.word	0x0802b678
 801a09c:	0802b844 	.word	0x0802b844
 801a0a0:	0802b874 	.word	0x0802b874

0801a0a4 <handle_graph>:

static void handle_graph(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler *h) {
 801a0a4:	b5b0      	push	{r4, r5, r7, lr}
 801a0a6:	b0c8      	sub	sp, #288	@ 0x120
 801a0a8:	af04      	add	r7, sp, #16
 801a0aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a0ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801a0b2:	6018      	str	r0, [r3, #0]
 801a0b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a0bc:	6019      	str	r1, [r3, #0]
 801a0be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a0c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a0c6:	601a      	str	r2, [r3, #0]
  long from = mg_json_get_long(hm->body, "$.from", 0);
 801a0c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a0d0:	6819      	ldr	r1, [r3, #0]
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	4a21      	ldr	r2, [pc, #132]	@ (801a15c <handle_graph+0xb8>)
 801a0d6:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a0da:	c903      	ldmia	r1, {r0, r1}
 801a0dc:	f7ed ff52 	bl	8007f84 <mg_json_get_long>
 801a0e0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  long to = mg_json_get_long(hm->body, "$.to", 0);
 801a0e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a0e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a0ec:	6819      	ldr	r1, [r3, #0]
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	4a1b      	ldr	r2, [pc, #108]	@ (801a160 <handle_graph+0xbc>)
 801a0f2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a0f6:	c903      	ldmia	r1, {r0, r1}
 801a0f8:	f7ed ff44 	bl	8007f84 <mg_json_get_long>
 801a0fc:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  uint32_t timestamps[20];
  double values[sizeof(timestamps) / sizeof(timestamps[0])];
  size_t count = h->grapher(from, to, timestamps, values,
 801a100:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a104:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 801a10c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 801a110:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 801a114:	f107 0310 	add.w	r3, r7, #16
 801a118:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 801a11c:	2514      	movs	r5, #20
 801a11e:	9500      	str	r5, [sp, #0]
 801a120:	47a0      	blx	r4
 801a122:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
                            sizeof(timestamps) / sizeof(timestamps[0]));
  mg_http_reply(c, 200, JSON_HEADERS, "[%M]\n", print_timeseries, timestamps,
 801a126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a12a:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 801a12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a132:	9303      	str	r3, [sp, #12]
 801a134:	f107 0310 	add.w	r3, r7, #16
 801a138:	9302      	str	r3, [sp, #8]
 801a13a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801a13e:	9301      	str	r3, [sp, #4]
 801a140:	4b08      	ldr	r3, [pc, #32]	@ (801a164 <handle_graph+0xc0>)
 801a142:	9300      	str	r3, [sp, #0]
 801a144:	4b08      	ldr	r3, [pc, #32]	@ (801a168 <handle_graph+0xc4>)
 801a146:	4a09      	ldr	r2, [pc, #36]	@ (801a16c <handle_graph+0xc8>)
 801a148:	21c8      	movs	r1, #200	@ 0xc8
 801a14a:	6800      	ldr	r0, [r0, #0]
 801a14c:	f7eb f9ce 	bl	80054ec <mg_http_reply>
                values, count);
}
 801a150:	bf00      	nop
 801a152:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 801a156:	46bd      	mov	sp, r7
 801a158:	bdb0      	pop	{r4, r5, r7, pc}
 801a15a:	bf00      	nop
 801a15c:	0802b880 	.word	0x0802b880
 801a160:	0802b888 	.word	0x0802b888
 801a164:	0801a001 	.word	0x0801a001
 801a168:	0802b890 	.word	0x0802b890
 801a16c:	0802b7e0 	.word	0x0802b7e0

0801a170 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 801a170:	b580      	push	{r7, lr}
 801a172:	b086      	sub	sp, #24
 801a174:	af02      	add	r7, sp, #8
 801a176:	60f8      	str	r0, [r7, #12]
 801a178:	60b9      	str	r1, [r7, #8]
 801a17a:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0) {
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	685b      	ldr	r3, [r3, #4]
 801a180:	491d      	ldr	r1, [pc, #116]	@ (801a1f8 <handle_api_call+0x88>)
 801a182:	4618      	mov	r0, r3
 801a184:	f7e6 f8ac 	bl	80002e0 <strcmp>
 801a188:	4603      	mov	r3, r0
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d105      	bne.n	801a19a <handle_api_call+0x2a>
    handle_object(c, hm, h);
 801a18e:	687a      	ldr	r2, [r7, #4]
 801a190:	68b9      	ldr	r1, [r7, #8]
 801a192:	68f8      	ldr	r0, [r7, #12]
 801a194:	f7ff fe1c 	bl	8019dd0 <handle_object>
  } else if (strcmp(h->type, "graph") == 0) {
    handle_graph(c, hm, h);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 801a198:	e02a      	b.n	801a1f0 <handle_api_call+0x80>
  } else if (strcmp(h->type, "action") == 0) {
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	685b      	ldr	r3, [r3, #4]
 801a19e:	4917      	ldr	r1, [pc, #92]	@ (801a1fc <handle_api_call+0x8c>)
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f7e6 f89d 	bl	80002e0 <strcmp>
 801a1a6:	4603      	mov	r3, r0
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d108      	bne.n	801a1be <handle_api_call+0x4e>
    handle_action(c, hm, h->checker, h->starter);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a1b4:	68b9      	ldr	r1, [r7, #8]
 801a1b6:	68f8      	ldr	r0, [r7, #12]
 801a1b8:	f7ff fcc2 	bl	8019b40 <handle_action>
}
 801a1bc:	e018      	b.n	801a1f0 <handle_api_call+0x80>
  } else if (strcmp(h->type, "graph") == 0) {
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	685b      	ldr	r3, [r3, #4]
 801a1c2:	490f      	ldr	r1, [pc, #60]	@ (801a200 <handle_api_call+0x90>)
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f7e6 f88b 	bl	80002e0 <strcmp>
 801a1ca:	4603      	mov	r3, r0
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d105      	bne.n	801a1dc <handle_api_call+0x6c>
    handle_graph(c, hm, h);
 801a1d0:	687a      	ldr	r2, [r7, #4]
 801a1d2:	68b9      	ldr	r1, [r7, #8]
 801a1d4:	68f8      	ldr	r0, [r7, #12]
 801a1d6:	f7ff ff65 	bl	801a0a4 <handle_graph>
}
 801a1da:	e009      	b.n	801a1f0 <handle_api_call+0x80>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	9300      	str	r3, [sp, #0]
 801a1e2:	4b08      	ldr	r3, [pc, #32]	@ (801a204 <handle_api_call+0x94>)
 801a1e4:	4a08      	ldr	r2, [pc, #32]	@ (801a208 <handle_api_call+0x98>)
 801a1e6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801a1ea:	68f8      	ldr	r0, [r7, #12]
 801a1ec:	f7eb f97e 	bl	80054ec <mg_http_reply>
}
 801a1f0:	bf00      	nop
 801a1f2:	3710      	adds	r7, #16
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}
 801a1f8:	0802b5cc 	.word	0x0802b5cc
 801a1fc:	0802b584 	.word	0x0802b584
 801a200:	0802b5bc 	.word	0x0802b5bc
 801a204:	0802b898 	.word	0x0802b898
 801a208:	0802b7e0 	.word	0x0802b7e0

0801a20c <http_ev_handler>:
  s_device_change_version++;
}
#endif  // WIZARD_ENABLE_HTTP_UI

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a20e:	b0ad      	sub	sp, #180	@ 0xb4
 801a210:	af06      	add	r7, sp, #24
 801a212:	61f8      	str	r0, [r7, #28]
 801a214:	61b9      	str	r1, [r7, #24]
 801a216:	617a      	str	r2, [r7, #20]
#if WIZARD_ENABLE_HTTP_UI
  handle_uploads(c, ev, ev_data);
 801a218:	697a      	ldr	r2, [r7, #20]
 801a21a:	69b9      	ldr	r1, [r7, #24]
 801a21c:	69f8      	ldr	r0, [r7, #28]
 801a21e:	f7ff fc13 	bl	8019a48 <handle_uploads>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a222:	69bb      	ldr	r3, [r7, #24]
 801a224:	2b02      	cmp	r3, #2
 801a226:	d120      	bne.n	801a26a <http_ev_handler+0x5e>
 801a228:	69fb      	ldr	r3, [r7, #28]
 801a22a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801a22e:	2b41      	cmp	r3, #65	@ 0x41
 801a230:	d11b      	bne.n	801a26a <http_ev_handler+0x5e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 801a232:	69fb      	ldr	r3, [r7, #28]
 801a234:	3388      	adds	r3, #136	@ 0x88
 801a236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (as->fn() == false) {
 801a23a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a23e:	685b      	ldr	r3, [r3, #4]
 801a240:	4798      	blx	r3
 801a242:	4603      	mov	r3, r0
 801a244:	f083 0301 	eor.w	r3, r3, #1
 801a248:	b2db      	uxtb	r3, r3
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	f000 8157 	beq.w	801a4fe <http_ev_handler+0x2f2>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 801a250:	4bae      	ldr	r3, [pc, #696]	@ (801a50c <http_ev_handler+0x300>)
 801a252:	4aaf      	ldr	r2, [pc, #700]	@ (801a510 <http_ev_handler+0x304>)
 801a254:	21c8      	movs	r1, #200	@ 0xc8
 801a256:	69f8      	ldr	r0, [r7, #28]
 801a258:	f7eb f948 	bl	80054ec <mg_http_reply>
      memset(as, 0, sizeof(*as));
 801a25c:	2208      	movs	r2, #8
 801a25e:	2100      	movs	r1, #0
 801a260:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 801a264:	f00a fdfa 	bl	8024e5c <memset>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a268:	e149      	b.n	801a4fe <http_ev_handler+0x2f2>
    }
  } else
#endif
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a26a:	69bb      	ldr	r3, [r7, #24]
 801a26c:	2b0b      	cmp	r3, #11
 801a26e:	f040 8115 	bne.w	801a49c <http_ev_handler+0x290>
 801a272:	69fb      	ldr	r3, [r7, #28]
 801a274:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801a278:	2b55      	cmp	r3, #85	@ 0x55
 801a27a:	f000 810f 	beq.w	801a49c <http_ev_handler+0x290>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 801a27e:	697b      	ldr	r3, [r7, #20]
 801a280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
#if WIZARD_ENABLE_HTTP_UI
    struct apihandler *h = find_handler(hm);
 801a284:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801a288:	f7ff f80e 	bl	80192a8 <find_handler>
 801a28c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 801a290:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801a294:	f7ff f8b0 	bl	80193f8 <authenticate>
 801a298:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 801a29c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a2a0:	499c      	ldr	r1, [pc, #624]	@ (801a514 <http_ev_handler+0x308>)
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	f7f4 fd88 	bl	800edb8 <mg_str_s>
 801a2a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	9300      	str	r3, [sp, #0]
 801a2b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a2b4:	cb0c      	ldmia	r3, {r2, r3}
 801a2b6:	3108      	adds	r1, #8
 801a2b8:	c903      	ldmia	r1, {r0, r1}
 801a2ba:	f7f4 fe87 	bl	800efcc <mg_match>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d025      	beq.n	801a310 <http_ev_handler+0x104>
 801a2c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d019      	beq.n	801a300 <http_ev_handler+0xf4>
        (u == NULL ||
 801a2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d01d      	beq.n	801a310 <http_ev_handler+0x104>
         (h != NULL && (u->level < h->read_level ||
 801a2d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a2d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	429a      	cmp	r2, r3
 801a2e2:	db0d      	blt.n	801a300 <http_ev_handler+0xf4>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 801a2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a2e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d00f      	beq.n	801a310 <http_ev_handler+0x104>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 801a2f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a2f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a2fa:	691b      	ldr	r3, [r3, #16]
 801a2fc:	429a      	cmp	r2, r3
 801a2fe:	da07      	bge.n	801a310 <http_ev_handler+0x104>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 801a300:	4b85      	ldr	r3, [pc, #532]	@ (801a518 <http_ev_handler+0x30c>)
 801a302:	4a83      	ldr	r2, [pc, #524]	@ (801a510 <http_ev_handler+0x304>)
 801a304:	f240 1193 	movw	r1, #403	@ 0x193
 801a308:	69f8      	ldr	r0, [r7, #28]
 801a30a:	f7eb f8ef 	bl	80054ec <mg_http_reply>
 801a30e:	e091      	b.n	801a434 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 801a310:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801a314:	4981      	ldr	r1, [pc, #516]	@ (801a51c <http_ev_handler+0x310>)
 801a316:	4618      	mov	r0, r3
 801a318:	f7f4 fd4e 	bl	800edb8 <mg_str_s>
 801a31c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a320:	2300      	movs	r3, #0
 801a322:	9300      	str	r3, [sp, #0]
 801a324:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801a328:	cb0c      	ldmia	r3, {r2, r3}
 801a32a:	3108      	adds	r1, #8
 801a32c:	c903      	ldmia	r1, {r0, r1}
 801a32e:	f7f4 fe4d 	bl	800efcc <mg_match>
 801a332:	4603      	mov	r3, r0
 801a334:	2b00      	cmp	r3, #0
 801a336:	d005      	beq.n	801a344 <http_ev_handler+0x138>
      handle_login(c, u);
 801a338:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801a33c:	69f8      	ldr	r0, [r7, #28]
 801a33e:	f7ff f93b 	bl	80195b8 <handle_login>
 801a342:	e077      	b.n	801a434 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 801a344:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801a348:	4975      	ldr	r1, [pc, #468]	@ (801a520 <http_ev_handler+0x314>)
 801a34a:	4618      	mov	r0, r3
 801a34c:	f7f4 fd34 	bl	800edb8 <mg_str_s>
 801a350:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a354:	2300      	movs	r3, #0
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801a35c:	cb0c      	ldmia	r3, {r2, r3}
 801a35e:	3108      	adds	r1, #8
 801a360:	c903      	ldmia	r1, {r0, r1}
 801a362:	f7f4 fe33 	bl	800efcc <mg_match>
 801a366:	4603      	mov	r3, r0
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d003      	beq.n	801a374 <http_ev_handler+0x168>
      handle_logout(c);
 801a36c:	69f8      	ldr	r0, [r7, #28]
 801a36e:	f7ff f991 	bl	8019694 <handle_logout>
 801a372:	e05f      	b.n	801a434 <http_ev_handler+0x228>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 801a374:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a378:	496a      	ldr	r1, [pc, #424]	@ (801a524 <http_ev_handler+0x318>)
 801a37a:	4618      	mov	r0, r3
 801a37c:	f7f4 fd1c 	bl	800edb8 <mg_str_s>
 801a380:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a384:	2300      	movs	r3, #0
 801a386:	9300      	str	r3, [sp, #0]
 801a388:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a38c:	cb0c      	ldmia	r3, {r2, r3}
 801a38e:	3108      	adds	r1, #8
 801a390:	c903      	ldmia	r1, {r0, r1}
 801a392:	f7f4 fe1b 	bl	800efcc <mg_match>
 801a396:	4603      	mov	r3, r0
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d006      	beq.n	801a3aa <http_ev_handler+0x19e>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 801a39c:	4b62      	ldr	r3, [pc, #392]	@ (801a528 <http_ev_handler+0x31c>)
 801a39e:	4a5c      	ldr	r2, [pc, #368]	@ (801a510 <http_ev_handler+0x304>)
 801a3a0:	21c8      	movs	r1, #200	@ 0xc8
 801a3a2:	69f8      	ldr	r0, [r7, #28]
 801a3a4:	f7eb f8a2 	bl	80054ec <mg_http_reply>
 801a3a8:	e044      	b.n	801a434 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 801a3aa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801a3ae:	495f      	ldr	r1, [pc, #380]	@ (801a52c <http_ev_handler+0x320>)
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f7f4 fd01 	bl	800edb8 <mg_str_s>
 801a3b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	9300      	str	r3, [sp, #0]
 801a3be:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801a3c2:	cb0c      	ldmia	r3, {r2, r3}
 801a3c4:	3108      	adds	r1, #8
 801a3c6:	c903      	ldmia	r1, {r0, r1}
 801a3c8:	f7f4 fe00 	bl	800efcc <mg_match>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d00f      	beq.n	801a3f2 <http_ev_handler+0x1e6>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 801a3d2:	4b57      	ldr	r3, [pc, #348]	@ (801a530 <http_ev_handler+0x324>)
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	9303      	str	r3, [sp, #12]
 801a3d8:	4b56      	ldr	r3, [pc, #344]	@ (801a534 <http_ev_handler+0x328>)
 801a3da:	9302      	str	r3, [sp, #8]
 801a3dc:	2300      	movs	r3, #0
 801a3de:	9301      	str	r3, [sp, #4]
 801a3e0:	4b55      	ldr	r3, [pc, #340]	@ (801a538 <http_ev_handler+0x32c>)
 801a3e2:	9300      	str	r3, [sp, #0]
 801a3e4:	4b55      	ldr	r3, [pc, #340]	@ (801a53c <http_ev_handler+0x330>)
 801a3e6:	4a4a      	ldr	r2, [pc, #296]	@ (801a510 <http_ev_handler+0x304>)
 801a3e8:	21c8      	movs	r1, #200	@ 0xc8
 801a3ea:	69f8      	ldr	r0, [r7, #28]
 801a3ec:	f7eb f87e 	bl	80054ec <mg_http_reply>
 801a3f0:	e020      	b.n	801a434 <http_ev_handler+0x228>
                    s_device_change_version);
    } else if (h != NULL) {
 801a3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d007      	beq.n	801a40a <http_ev_handler+0x1fe>
      handle_api_call(c, hm, h);
 801a3fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a3fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a402:	69f8      	ldr	r0, [r7, #28]
 801a404:	f7ff feb4 	bl	801a170 <handle_api_call>
 801a408:	e014      	b.n	801a434 <http_ev_handler+0x228>
    } else
#endif  // WIZARD_ENABLE_HTTP_UI
    {
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 801a40a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a40e:	2218      	movs	r2, #24
 801a410:	2100      	movs	r1, #0
 801a412:	4618      	mov	r0, r3
 801a414:	f00a fd22 	bl	8024e5c <memset>
      opts.root_dir = "/web_root/";
 801a418:	4b49      	ldr	r3, [pc, #292]	@ (801a540 <http_ev_handler+0x334>)
 801a41a:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 801a41c:	4b49      	ldr	r3, [pc, #292]	@ (801a544 <http_ev_handler+0x338>)
 801a41e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 801a420:	4b49      	ldr	r3, [pc, #292]	@ (801a548 <http_ev_handler+0x33c>)
 801a422:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 801a424:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a428:	461a      	mov	r2, r3
 801a42a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a42e:	69f8      	ldr	r0, [r7, #28]
 801a430:	f7eb ff6e 	bl	8006310 <mg_http_serve_dir>
    }
    // Show this request
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s", c->id, hm->method.len,
 801a434:	4b45      	ldr	r3, [pc, #276]	@ (801a54c <http_ev_handler+0x340>)
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	2b02      	cmp	r3, #2
 801a43a:	dd62      	ble.n	801a502 <http_ev_handler+0x2f6>
 801a43c:	4b44      	ldr	r3, [pc, #272]	@ (801a550 <http_ev_handler+0x344>)
 801a43e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801a442:	4944      	ldr	r1, [pc, #272]	@ (801a554 <http_ev_handler+0x348>)
 801a444:	2003      	movs	r0, #3
 801a446:	f7ed fdef 	bl	8008028 <mg_log_prefix>
 801a44a:	69fb      	ldr	r3, [r7, #28]
 801a44c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 801a44e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a452:	685e      	ldr	r6, [r3, #4]
 801a454:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	607b      	str	r3, [r7, #4]
 801a45c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a460:	68db      	ldr	r3, [r3, #12]
 801a462:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a466:	6892      	ldr	r2, [r2, #8]
 801a468:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a46c:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 801a470:	69f8      	ldr	r0, [r7, #28]
 801a472:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801a474:	280f      	cmp	r0, #15
 801a476:	d901      	bls.n	801a47c <http_ev_handler+0x270>
 801a478:	2003      	movs	r0, #3
 801a47a:	e000      	b.n	801a47e <http_ev_handler+0x272>
 801a47c:	2000      	movs	r0, #0
 801a47e:	69fc      	ldr	r4, [r7, #28]
 801a480:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 801a482:	3409      	adds	r4, #9
 801a484:	9404      	str	r4, [sp, #16]
 801a486:	9003      	str	r0, [sp, #12]
 801a488:	9102      	str	r1, [sp, #8]
 801a48a:	9201      	str	r2, [sp, #4]
 801a48c:	9300      	str	r3, [sp, #0]
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	4632      	mov	r2, r6
 801a492:	4629      	mov	r1, r5
 801a494:	4830      	ldr	r0, [pc, #192]	@ (801a558 <http_ev_handler+0x34c>)
 801a496:	f7ed fe17 	bl	80080c8 <mg_log>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a49a:	e032      	b.n	801a502 <http_ev_handler+0x2f6>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9]));
  } else if (ev == MG_EV_ACCEPT) {
 801a49c:	69bb      	ldr	r3, [r7, #24]
 801a49e:	2b05      	cmp	r3, #5
 801a4a0:	d130      	bne.n	801a504 <http_ev_handler+0x2f8>
    if (c->fn_data != NULL) {  // TLS listener
 801a4a2:	69fb      	ldr	r3, [r7, #28]
 801a4a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d02c      	beq.n	801a504 <http_ev_handler+0x2f8>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 801a4aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a4ae:	2224      	movs	r2, #36	@ 0x24
 801a4b0:	2100      	movs	r1, #0
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f00a fcd2 	bl	8024e5c <memset>
      opts.cert = mg_str(TLS_CERT);
 801a4b8:	f107 0308 	add.w	r3, r7, #8
 801a4bc:	4927      	ldr	r1, [pc, #156]	@ (801a55c <http_ev_handler+0x350>)
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f7f4 fc7a 	bl	800edb8 <mg_str_s>
 801a4c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a4c8:	f107 0208 	add.w	r2, r7, #8
 801a4cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a4d0:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 801a4d4:	f107 0308 	add.w	r3, r7, #8
 801a4d8:	4921      	ldr	r1, [pc, #132]	@ (801a560 <http_ev_handler+0x354>)
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7f4 fc6c 	bl	800edb8 <mg_str_s>
 801a4e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a4e4:	f107 0208 	add.w	r2, r7, #8
 801a4e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a4ec:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 801a4f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	69f8      	ldr	r0, [r7, #28]
 801a4f8:	f7f7 fe58 	bl	80121ac <mg_tls_init>
    }
  }
}
 801a4fc:	e002      	b.n	801a504 <http_ev_handler+0x2f8>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a4fe:	bf00      	nop
 801a500:	e000      	b.n	801a504 <http_ev_handler+0x2f8>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a502:	bf00      	nop
}
 801a504:	bf00      	nop
 801a506:	379c      	adds	r7, #156	@ 0x9c
 801a508:	46bd      	mov	sp, r7
 801a50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a50c:	0802b83c 	.word	0x0802b83c
 801a510:	0802b7e0 	.word	0x0802b7e0
 801a514:	0802b81c 	.word	0x0802b81c
 801a518:	0802b824 	.word	0x0802b824
 801a51c:	0802b8b0 	.word	0x0802b8b0
 801a520:	0802b8bc 	.word	0x0802b8bc
 801a524:	0802b8c8 	.word	0x0802b8c8
 801a528:	0802b8d0 	.word	0x0802b8d0
 801a52c:	0802b8d8 	.word	0x0802b8d8
 801a530:	24003f68 	.word	0x24003f68
 801a534:	0802b4cc 	.word	0x0802b4cc
 801a538:	0800dc21 	.word	0x0800dc21
 801a53c:	0802b8e8 	.word	0x0802b8e8
 801a540:	0802b8f4 	.word	0x0802b8f4
 801a544:	24000008 	.word	0x24000008
 801a548:	0802b900 	.word	0x0802b900
 801a54c:	24000240 	.word	0x24000240
 801a550:	080383a0 	.word	0x080383a0
 801a554:	0802b60c 	.word	0x0802b60c
 801a558:	0802b91c 	.word	0x0802b91c
 801a55c:	0802b938 	.word	0x0802b938
 801a560:	0802bb14 	.word	0x0802bb14

0801a564 <sntp_ev_handler>:
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS

#if WIZARD_ENABLE_SNTP
static uint64_t s_sntp_timer = 0;
bool s_sntp_response_received = false;
static void sntp_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a564:	b5b0      	push	{r4, r5, r7, lr}
 801a566:	b086      	sub	sp, #24
 801a568:	af00      	add	r7, sp, #0
 801a56a:	60f8      	str	r0, [r7, #12]
 801a56c:	60b9      	str	r1, [r7, #8]
 801a56e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	2b12      	cmp	r3, #18
 801a574:	d115      	bne.n	801a5a2 <sntp_ev_handler+0x3e>
    uint64_t t = *(uint64_t *) ev_data;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a57c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    glue_sntp_on_time(t);
 801a580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a584:	f7fe fb46 	bl	8018c14 <glue_sntp_on_time>
    s_sntp_response_received = true;
 801a588:	4b08      	ldr	r3, [pc, #32]	@ (801a5ac <sntp_ev_handler+0x48>)
 801a58a:	2201      	movs	r2, #1
 801a58c:	701a      	strb	r2, [r3, #0]
    s_sntp_timer += (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 801a58e:	4b08      	ldr	r3, [pc, #32]	@ (801a5b0 <sntp_ev_handler+0x4c>)
 801a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a594:	4907      	ldr	r1, [pc, #28]	@ (801a5b4 <sntp_ev_handler+0x50>)
 801a596:	1854      	adds	r4, r2, r1
 801a598:	f143 0500 	adc.w	r5, r3, #0
 801a59c:	4b04      	ldr	r3, [pc, #16]	@ (801a5b0 <sntp_ev_handler+0x4c>)
 801a59e:	e9c3 4500 	strd	r4, r5, [r3]
  }
  (void) c;
}
 801a5a2:	bf00      	nop
 801a5a4:	3718      	adds	r7, #24
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bdb0      	pop	{r4, r5, r7, pc}
 801a5aa:	bf00      	nop
 801a5ac:	24003f78 	.word	0x24003f78
 801a5b0:	24003f70 	.word	0x24003f70
 801a5b4:	0036ee80 	.word	0x0036ee80

0801a5b8 <sntp_timer>:

static void sntp_timer(void *param) {
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b086      	sub	sp, #24
 801a5bc:	af02      	add	r7, sp, #8
 801a5be:	6078      	str	r0, [r7, #4]
  // uint64_t t1 = mg_now(), t2 = mg_millis();
  uint64_t timeout = (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 801a5c0:	4a14      	ldr	r2, [pc, #80]	@ (801a614 <sntp_timer+0x5c>)
 801a5c2:	f04f 0300 	mov.w	r3, #0
 801a5c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (s_sntp_response_received == false) timeout = 1000;
 801a5ca:	4b13      	ldr	r3, [pc, #76]	@ (801a618 <sntp_timer+0x60>)
 801a5cc:	781b      	ldrb	r3, [r3, #0]
 801a5ce:	f083 0301 	eor.w	r3, r3, #1
 801a5d2:	b2db      	uxtb	r3, r3
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d005      	beq.n	801a5e4 <sntp_timer+0x2c>
 801a5d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a5dc:	f04f 0300 	mov.w	r3, #0
 801a5e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // This function is called every second. Once we received a response,
  // trigger SNTP sync less frequently, as set by the define
  if (mg_timer_expired(&s_sntp_timer, timeout, mg_millis())) {
 801a5e4:	f7e6 fccc 	bl	8000f80 <mg_millis>
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	e9cd 2300 	strd	r2, r3, [sp]
 801a5f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a5f4:	4809      	ldr	r0, [pc, #36]	@ (801a61c <sntp_timer+0x64>)
 801a5f6:	f7f5 f899 	bl	800f72c <mg_timer_expired>
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d005      	beq.n	801a60c <sntp_timer+0x54>
    mg_sntp_connect(param, WIZARD_SNTP_URL, sntp_ev_handler, NULL);
 801a600:	2300      	movs	r3, #0
 801a602:	4a07      	ldr	r2, [pc, #28]	@ (801a620 <sntp_timer+0x68>)
 801a604:	4907      	ldr	r1, [pc, #28]	@ (801a624 <sntp_timer+0x6c>)
 801a606:	6878      	ldr	r0, [r7, #4]
 801a608:	f7f4 fb98 	bl	800ed3c <mg_sntp_connect>
  }
}
 801a60c:	bf00      	nop
 801a60e:	3710      	adds	r7, #16
 801a610:	46bd      	mov	sp, r7
 801a612:	bd80      	pop	{r7, pc}
 801a614:	0036ee80 	.word	0x0036ee80
 801a618:	24003f78 	.word	0x24003f78
 801a61c:	24003f70 	.word	0x24003f70
 801a620:	0801a565 	.word	0x0801a565
 801a624:	0802bbf8 	.word	0x0802bbf8

0801a628 <mqtt_event_handler>:
#endif  // WIZARD_ENABLE_SNTP

#if WIZARD_ENABLE_MQTT
struct mg_connection *g_mqtt_conn;  // MQTT client connection

static void mqtt_event_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a628:	b580      	push	{r7, lr}
 801a62a:	b088      	sub	sp, #32
 801a62c:	af02      	add	r7, sp, #8
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	60b9      	str	r1, [r7, #8]
 801a632:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_CONNECT) {
 801a634:	68bb      	ldr	r3, [r7, #8]
 801a636:	2b04      	cmp	r3, #4
 801a638:	d103      	bne.n	801a642 <mqtt_event_handler+0x1a>
    glue_mqtt_tls_init(c);
 801a63a:	68f8      	ldr	r0, [r7, #12]
 801a63c:	f7fe f98a 	bl	8018954 <glue_mqtt_tls_init>
    glue_mqtt_on_message(c, mm->topic, mm->data);
  } else if (ev == MG_EV_CLOSE) {
    MG_DEBUG(("%lu Closing", c->id));
    g_mqtt_conn = NULL;
  }
}
 801a640:	e037      	b.n	801a6b2 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_OPEN) {
 801a642:	68bb      	ldr	r3, [r7, #8]
 801a644:	2b11      	cmp	r3, #17
 801a646:	d106      	bne.n	801a656 <mqtt_event_handler+0x2e>
    glue_mqtt_on_connect(c, *(int *) ev_data);
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	4619      	mov	r1, r3
 801a64e:	68f8      	ldr	r0, [r7, #12]
 801a650:	f7fe f9c8 	bl	80189e4 <glue_mqtt_on_connect>
}
 801a654:	e02d      	b.n	801a6b2 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_CMD) {
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	2b0f      	cmp	r3, #15
 801a65a:	d104      	bne.n	801a666 <mqtt_event_handler+0x3e>
    glue_mqtt_on_cmd(c, ev_data);
 801a65c:	6879      	ldr	r1, [r7, #4]
 801a65e:	68f8      	ldr	r0, [r7, #12]
 801a660:	f7fe fa74 	bl	8018b4c <glue_mqtt_on_cmd>
}
 801a664:	e025      	b.n	801a6b2 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_MSG) {
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	2b10      	cmp	r3, #16
 801a66a:	d10b      	bne.n	801a684 <mqtt_event_handler+0x5c>
    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	617b      	str	r3, [r7, #20]
    glue_mqtt_on_message(c, mm->topic, mm->data);
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	697a      	ldr	r2, [r7, #20]
 801a674:	68d9      	ldr	r1, [r3, #12]
 801a676:	9100      	str	r1, [sp, #0]
 801a678:	689b      	ldr	r3, [r3, #8]
 801a67a:	ca06      	ldmia	r2, {r1, r2}
 801a67c:	68f8      	ldr	r0, [r7, #12]
 801a67e:	f7fe f9f5 	bl	8018a6c <glue_mqtt_on_message>
}
 801a682:	e016      	b.n	801a6b2 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_CLOSE) {
 801a684:	68bb      	ldr	r3, [r7, #8]
 801a686:	2b09      	cmp	r3, #9
 801a688:	d113      	bne.n	801a6b2 <mqtt_event_handler+0x8a>
    MG_DEBUG(("%lu Closing", c->id));
 801a68a:	4b0c      	ldr	r3, [pc, #48]	@ (801a6bc <mqtt_event_handler+0x94>)
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	2b02      	cmp	r3, #2
 801a690:	dd0c      	ble.n	801a6ac <mqtt_event_handler+0x84>
 801a692:	4b0b      	ldr	r3, [pc, #44]	@ (801a6c0 <mqtt_event_handler+0x98>)
 801a694:	f240 2225 	movw	r2, #549	@ 0x225
 801a698:	490a      	ldr	r1, [pc, #40]	@ (801a6c4 <mqtt_event_handler+0x9c>)
 801a69a:	2003      	movs	r0, #3
 801a69c:	f7ed fcc4 	bl	8008028 <mg_log_prefix>
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a6a4:	4619      	mov	r1, r3
 801a6a6:	4808      	ldr	r0, [pc, #32]	@ (801a6c8 <mqtt_event_handler+0xa0>)
 801a6a8:	f7ed fd0e 	bl	80080c8 <mg_log>
    g_mqtt_conn = NULL;
 801a6ac:	4b07      	ldr	r3, [pc, #28]	@ (801a6cc <mqtt_event_handler+0xa4>)
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	601a      	str	r2, [r3, #0]
}
 801a6b2:	bf00      	nop
 801a6b4:	3718      	adds	r7, #24
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	bd80      	pop	{r7, pc}
 801a6ba:	bf00      	nop
 801a6bc:	24000240 	.word	0x24000240
 801a6c0:	080383b0 	.word	0x080383b0
 801a6c4:	0802b60c 	.word	0x0802b60c
 801a6c8:	0802bc14 	.word	0x0802bc14
 801a6cc:	24003f7c 	.word	0x24003f7c

0801a6d0 <mqtt_timer>:

static void mqtt_timer(void *arg) {
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b084      	sub	sp, #16
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	60fb      	str	r3, [r7, #12]
  if (g_mqtt_conn == NULL) {
 801a6dc:	4b07      	ldr	r3, [pc, #28]	@ (801a6fc <mqtt_timer+0x2c>)
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d106      	bne.n	801a6f2 <mqtt_timer+0x22>
    g_mqtt_conn = glue_mqtt_connect(mgr, mqtt_event_handler);
 801a6e4:	4906      	ldr	r1, [pc, #24]	@ (801a700 <mqtt_timer+0x30>)
 801a6e6:	68f8      	ldr	r0, [r7, #12]
 801a6e8:	f7fe fa56 	bl	8018b98 <glue_mqtt_connect>
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	4a03      	ldr	r2, [pc, #12]	@ (801a6fc <mqtt_timer+0x2c>)
 801a6f0:	6013      	str	r3, [r2, #0]
  }
}
 801a6f2:	bf00      	nop
 801a6f4:	3710      	adds	r7, #16
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	bd80      	pop	{r7, pc}
 801a6fa:	bf00      	nop
 801a6fc:	24003f7c 	.word	0x24003f7c
 801a700:	0801a629 	.word	0x0801a629

0801a704 <handle_modbus_pdu>:
#endif  // WIZARD_ENABLE_MQTT

#if WIZARD_ENABLE_MODBUS
static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 801a704:	b590      	push	{r4, r7, lr}
 801a706:	b0d1      	sub	sp, #324	@ 0x144
 801a708:	af00      	add	r7, sp, #0
 801a70a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a70e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801a712:	6018      	str	r0, [r3, #0]
 801a714:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a718:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a71c:	6019      	str	r1, [r3, #0]
 801a71e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a722:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801a726:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 801a728:	4bcf      	ldr	r3, [pc, #828]	@ (801aa68 <handle_modbus_pdu+0x364>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	2b02      	cmp	r3, #2
 801a72e:	dd13      	ble.n	801a758 <handle_modbus_pdu+0x54>
 801a730:	4bce      	ldr	r3, [pc, #824]	@ (801aa6c <handle_modbus_pdu+0x368>)
 801a732:	f240 2235 	movw	r2, #565	@ 0x235
 801a736:	49ce      	ldr	r1, [pc, #824]	@ (801aa70 <handle_modbus_pdu+0x36c>)
 801a738:	2003      	movs	r0, #3
 801a73a:	f7ed fc75 	bl	8008028 <mg_log_prefix>
 801a73e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a742:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 801a746:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a74a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a74e:	6812      	ldr	r2, [r2, #0]
 801a750:	6819      	ldr	r1, [r3, #0]
 801a752:	48c8      	ldr	r0, [pc, #800]	@ (801aa74 <handle_modbus_pdu+0x370>)
 801a754:	f7ed fcb8 	bl	80080c8 <mg_log>
  mg_hexdump(buf, len);
 801a758:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a75c:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 801a760:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a764:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a768:	6811      	ldr	r1, [r2, #0]
 801a76a:	6818      	ldr	r0, [r3, #0]
 801a76c:	f7ed fce2 	bl	8008134 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 801a770:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a774:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	2b0b      	cmp	r3, #11
 801a77c:	d80f      	bhi.n	801a79e <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 801a77e:	4bba      	ldr	r3, [pc, #744]	@ (801aa68 <handle_modbus_pdu+0x364>)
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	2b00      	cmp	r3, #0
 801a784:	f340 81f5 	ble.w	801ab72 <handle_modbus_pdu+0x46e>
 801a788:	4bb8      	ldr	r3, [pc, #736]	@ (801aa6c <handle_modbus_pdu+0x368>)
 801a78a:	f240 2239 	movw	r2, #569	@ 0x239
 801a78e:	49b8      	ldr	r1, [pc, #736]	@ (801aa70 <handle_modbus_pdu+0x36c>)
 801a790:	2001      	movs	r0, #1
 801a792:	f7ed fc49 	bl	8008028 <mg_log_prefix>
 801a796:	48b8      	ldr	r0, [pc, #736]	@ (801aa78 <handle_modbus_pdu+0x374>)
 801a798:	f7ed fc96 	bl	80080c8 <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 801a79c:	e1e9      	b.n	801ab72 <handle_modbus_pdu+0x46e>
    uint8_t func = buf[7];  // Function
 801a79e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a7a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	79db      	ldrb	r3, [r3, #7]
 801a7aa:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 801a7ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a7be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a7c2:	f107 0014 	add.w	r0, r7, #20
 801a7c6:	2208      	movs	r2, #8
 801a7c8:	6819      	ldr	r1, [r3, #0]
 801a7ca:	f00a fc92 	bl	80250f2 <memcpy>
    if (func == 6) {  // write single holding register
 801a7ce:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a7d2:	2b06      	cmp	r3, #6
 801a7d4:	d155      	bne.n	801a882 <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a7d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a7da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	3308      	adds	r3, #8
 801a7e2:	881b      	ldrh	r3, [r3, #0]
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f7fd f9a2 	bl	8017b2e <mg_ntohs>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 801a7f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a7f4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	330a      	adds	r3, #10
 801a7fc:	881b      	ldrh	r3, [r3, #0]
 801a7fe:	4618      	mov	r0, r3
 801a800:	f7fd f995 	bl	8017b2e <mg_ntohs>
 801a804:	4603      	mov	r3, r0
 801a806:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = glue_modbus_write_reg(start, value);
 801a80a:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 801a80e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 801a812:	4611      	mov	r1, r2
 801a814:	4618      	mov	r0, r3
 801a816:	f7fe fa71 	bl	8018cfc <glue_modbus_write_reg>
 801a81a:	4603      	mov	r3, r0
 801a81c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 801a820:	f107 0314 	add.w	r3, r7, #20
 801a824:	f103 0408 	add.w	r4, r3, #8
 801a828:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 801a82c:	4618      	mov	r0, r3
 801a82e:	f7fd f97e 	bl	8017b2e <mg_ntohs>
 801a832:	4603      	mov	r3, r0
 801a834:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 801a836:	f107 0314 	add.w	r3, r7, #20
 801a83a:	f103 040a 	add.w	r4, r3, #10
 801a83e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 801a842:	4618      	mov	r0, r3
 801a844:	f7fd f973 	bl	8017b2e <mg_ntohs>
 801a848:	4603      	mov	r3, r0
 801a84a:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 801a84c:	230c      	movs	r3, #12
 801a84e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801a852:	4b85      	ldr	r3, [pc, #532]	@ (801aa68 <handle_modbus_pdu+0x364>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	2b02      	cmp	r3, #2
 801a858:	f340 813f 	ble.w	801aada <handle_modbus_pdu+0x3d6>
 801a85c:	4b83      	ldr	r3, [pc, #524]	@ (801aa6c <handle_modbus_pdu+0x368>)
 801a85e:	f240 224b 	movw	r2, #587	@ 0x24b
 801a862:	4983      	ldr	r1, [pc, #524]	@ (801aa70 <handle_modbus_pdu+0x36c>)
 801a864:	2003      	movs	r0, #3
 801a866:	f7ed fbdf 	bl	8008028 <mg_log_prefix>
 801a86a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d001      	beq.n	801a876 <handle_modbus_pdu+0x172>
 801a872:	4b82      	ldr	r3, [pc, #520]	@ (801aa7c <handle_modbus_pdu+0x378>)
 801a874:	e000      	b.n	801a878 <handle_modbus_pdu+0x174>
 801a876:	4b82      	ldr	r3, [pc, #520]	@ (801aa80 <handle_modbus_pdu+0x37c>)
 801a878:	4619      	mov	r1, r3
 801a87a:	4882      	ldr	r0, [pc, #520]	@ (801aa84 <handle_modbus_pdu+0x380>)
 801a87c:	f7ed fc24 	bl	80080c8 <mg_log>
 801a880:	e12b      	b.n	801aada <handle_modbus_pdu+0x3d6>
    } else if (func == 16) {  // Write multiple
 801a882:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a886:	2b10      	cmp	r3, #16
 801a888:	f040 808b 	bne.w	801a9a2 <handle_modbus_pdu+0x29e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a88c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a890:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	3308      	adds	r3, #8
 801a898:	881b      	ldrh	r3, [r3, #0]
 801a89a:	4618      	mov	r0, r3
 801a89c:	f7fd f947 	bl	8017b2e <mg_ntohs>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 801a8a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a8aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	330a      	adds	r3, #10
 801a8b2:	881b      	ldrh	r3, [r3, #0]
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	f7fd f93a 	bl	8017b2e <mg_ntohs>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 801a8c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a8c4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	330d      	adds	r3, #13
 801a8cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 801a8d0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801a8d4:	3305      	adds	r3, #5
 801a8d6:	005b      	lsls	r3, r3, #1
 801a8d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a8dc:	f080 80fd 	bcs.w	801aada <handle_modbus_pdu+0x3d6>
        for (i = 0; i < num; i++) {
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801a8e6:	e023      	b.n	801a930 <handle_modbus_pdu+0x22c>
              glue_modbus_write_reg((uint16_t) (start + i), mg_htons(data[i]));
 801a8e8:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 801a8ec:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801a8f0:	4413      	add	r3, r2
 801a8f2:	b29c      	uxth	r4, r3
 801a8f4:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801a8f8:	005b      	lsls	r3, r3, #1
 801a8fa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801a8fe:	4413      	add	r3, r2
 801a900:	881b      	ldrh	r3, [r3, #0]
 801a902:	4618      	mov	r0, r3
 801a904:	f7fd f913 	bl	8017b2e <mg_ntohs>
 801a908:	4603      	mov	r3, r0
 801a90a:	4619      	mov	r1, r3
 801a90c:	4620      	mov	r0, r4
 801a90e:	f7fe f9f5 	bl	8018cfc <glue_modbus_write_reg>
 801a912:	4603      	mov	r3, r0
 801a914:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 801a918:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a91c:	f083 0301 	eor.w	r3, r3, #1
 801a920:	b2db      	uxtb	r3, r3
 801a922:	2b00      	cmp	r3, #0
 801a924:	d10b      	bne.n	801a93e <handle_modbus_pdu+0x23a>
        for (i = 0; i < num; i++) {
 801a926:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801a92a:	3301      	adds	r3, #1
 801a92c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801a930:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 801a934:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801a938:	429a      	cmp	r2, r3
 801a93a:	d3d5      	bcc.n	801a8e8 <handle_modbus_pdu+0x1e4>
 801a93c:	e000      	b.n	801a940 <handle_modbus_pdu+0x23c>
          if (success == false) break;
 801a93e:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 801a940:	f107 0314 	add.w	r3, r7, #20
 801a944:	f103 0408 	add.w	r4, r3, #8
 801a948:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801a94c:	4618      	mov	r0, r3
 801a94e:	f7fd f8ee 	bl	8017b2e <mg_ntohs>
 801a952:	4603      	mov	r3, r0
 801a954:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 801a956:	f107 0314 	add.w	r3, r7, #20
 801a95a:	f103 040a 	add.w	r4, r3, #10
 801a95e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801a962:	4618      	mov	r0, r3
 801a964:	f7fd f8e3 	bl	8017b2e <mg_ntohs>
 801a968:	4603      	mov	r3, r0
 801a96a:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 801a96c:	230c      	movs	r3, #12
 801a96e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801a972:	4b3d      	ldr	r3, [pc, #244]	@ (801aa68 <handle_modbus_pdu+0x364>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	2b02      	cmp	r3, #2
 801a978:	f340 80af 	ble.w	801aada <handle_modbus_pdu+0x3d6>
 801a97c:	4b3b      	ldr	r3, [pc, #236]	@ (801aa6c <handle_modbus_pdu+0x368>)
 801a97e:	f240 2259 	movw	r2, #601	@ 0x259
 801a982:	493b      	ldr	r1, [pc, #236]	@ (801aa70 <handle_modbus_pdu+0x36c>)
 801a984:	2003      	movs	r0, #3
 801a986:	f7ed fb4f 	bl	8008028 <mg_log_prefix>
 801a98a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d001      	beq.n	801a996 <handle_modbus_pdu+0x292>
 801a992:	4b3a      	ldr	r3, [pc, #232]	@ (801aa7c <handle_modbus_pdu+0x378>)
 801a994:	e000      	b.n	801a998 <handle_modbus_pdu+0x294>
 801a996:	4b3a      	ldr	r3, [pc, #232]	@ (801aa80 <handle_modbus_pdu+0x37c>)
 801a998:	4619      	mov	r1, r3
 801a99a:	483a      	ldr	r0, [pc, #232]	@ (801aa84 <handle_modbus_pdu+0x380>)
 801a99c:	f7ed fb94 	bl	80080c8 <mg_log>
 801a9a0:	e09b      	b.n	801aada <handle_modbus_pdu+0x3d6>
    } else if (func == 3 || func == 4) {  // Read multiple
 801a9a2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a9a6:	2b03      	cmp	r3, #3
 801a9a8:	d004      	beq.n	801a9b4 <handle_modbus_pdu+0x2b0>
 801a9aa:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a9ae:	2b04      	cmp	r3, #4
 801a9b0:	f040 8093 	bne.w	801aada <handle_modbus_pdu+0x3d6>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a9b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a9b8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	3308      	adds	r3, #8
 801a9c0:	881b      	ldrh	r3, [r3, #0]
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7fd f8b3 	bl	8017b2e <mg_ntohs>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 801a9ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a9d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	330a      	adds	r3, #10
 801a9da:	881b      	ldrh	r3, [r3, #0]
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7fd f8a6 	bl	8017b2e <mg_ntohs>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 801a9e8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801a9ec:	005b      	lsls	r3, r3, #1
 801a9ee:	3309      	adds	r3, #9
 801a9f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a9f4:	d271      	bcs.n	801aada <handle_modbus_pdu+0x3d6>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 801a9f6:	f107 0314 	add.w	r3, r7, #20
 801a9fa:	3309      	adds	r3, #9
 801a9fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 801aa00:	2300      	movs	r3, #0
 801aa02:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 801aa06:	e027      	b.n	801aa58 <handle_modbus_pdu+0x354>
          success = glue_modbus_read_reg((uint16_t) (start + i), &val);
 801aa08:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 801aa0c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801aa10:	4413      	add	r3, r2
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	f507 728d 	add.w	r2, r7, #282	@ 0x11a
 801aa18:	4611      	mov	r1, r2
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f7fe f920 	bl	8018c60 <glue_modbus_read_reg>
 801aa20:	4603      	mov	r3, r0
 801aa22:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 801aa26:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801aa2a:	f083 0301 	eor.w	r3, r3, #1
 801aa2e:	b2db      	uxtb	r3, r3
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d129      	bne.n	801aa88 <handle_modbus_pdu+0x384>
          data[i] = mg_htons(val);
 801aa34:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 801aa38:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801aa3c:	005b      	lsls	r3, r3, #1
 801aa3e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801aa42:	18d4      	adds	r4, r2, r3
 801aa44:	4608      	mov	r0, r1
 801aa46:	f7fd f872 	bl	8017b2e <mg_ntohs>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 801aa4e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801aa52:	3301      	adds	r3, #1
 801aa54:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 801aa58:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 801aa5c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d3d1      	bcc.n	801aa08 <handle_modbus_pdu+0x304>
 801aa64:	e011      	b.n	801aa8a <handle_modbus_pdu+0x386>
 801aa66:	bf00      	nop
 801aa68:	24000240 	.word	0x24000240
 801aa6c:	080383c4 	.word	0x080383c4
 801aa70:	0802b60c 	.word	0x0802b60c
 801aa74:	0802bc20 	.word	0x0802bc20
 801aa78:	0802bc44 	.word	0x0802bc44
 801aa7c:	0802bc54 	.word	0x0802bc54
 801aa80:	0802bc5c 	.word	0x0802bc5c
 801aa84:	0802bc64 	.word	0x0802bc64
          if (success == false) break;
 801aa88:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 801aa8a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801aa8e:	b2db      	uxtb	r3, r3
 801aa90:	005b      	lsls	r3, r3, #1
 801aa92:	b2da      	uxtb	r2, r3
 801aa94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801aa98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801aa9c:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 801aa9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801aaa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801aaa6:	7a1b      	ldrb	r3, [r3, #8]
 801aaa8:	3309      	adds	r3, #9
 801aaaa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801aaae:	4b33      	ldr	r3, [pc, #204]	@ (801ab7c <handle_modbus_pdu+0x478>)
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	2b02      	cmp	r3, #2
 801aab4:	dd11      	ble.n	801aada <handle_modbus_pdu+0x3d6>
 801aab6:	4b32      	ldr	r3, [pc, #200]	@ (801ab80 <handle_modbus_pdu+0x47c>)
 801aab8:	f240 2267 	movw	r2, #615	@ 0x267
 801aabc:	4931      	ldr	r1, [pc, #196]	@ (801ab84 <handle_modbus_pdu+0x480>)
 801aabe:	2003      	movs	r0, #3
 801aac0:	f7ed fab2 	bl	8008028 <mg_log_prefix>
 801aac4:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d001      	beq.n	801aad0 <handle_modbus_pdu+0x3cc>
 801aacc:	4b2e      	ldr	r3, [pc, #184]	@ (801ab88 <handle_modbus_pdu+0x484>)
 801aace:	e000      	b.n	801aad2 <handle_modbus_pdu+0x3ce>
 801aad0:	4b2e      	ldr	r3, [pc, #184]	@ (801ab8c <handle_modbus_pdu+0x488>)
 801aad2:	4619      	mov	r1, r3
 801aad4:	482e      	ldr	r0, [pc, #184]	@ (801ab90 <handle_modbus_pdu+0x48c>)
 801aad6:	f7ed faf7 	bl	80080c8 <mg_log>
    if (success == false) {
 801aada:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801aade:	f083 0301 	eor.w	r3, r3, #1
 801aae2:	b2db      	uxtb	r3, r3
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d015      	beq.n	801ab14 <handle_modbus_pdu+0x410>
      response_len = 9;
 801aae8:	2309      	movs	r3, #9
 801aaea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 801aaee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801aaf2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801aaf6:	79db      	ldrb	r3, [r3, #7]
 801aaf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801aafc:	b2da      	uxtb	r2, r3
 801aafe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ab02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801ab06:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 801ab08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ab0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801ab10:	2204      	movs	r2, #4
 801ab12:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 801ab14:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801ab18:	b29b      	uxth	r3, r3
 801ab1a:	3b06      	subs	r3, #6
 801ab1c:	b29a      	uxth	r2, r3
 801ab1e:	f107 0314 	add.w	r3, r7, #20
 801ab22:	1d1c      	adds	r4, r3, #4
 801ab24:	4610      	mov	r0, r2
 801ab26:	f7fd f802 	bl	8017b2e <mg_ntohs>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 801ab2e:	4b13      	ldr	r3, [pc, #76]	@ (801ab7c <handle_modbus_pdu+0x478>)
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	2b02      	cmp	r3, #2
 801ab34:	dd0b      	ble.n	801ab4e <handle_modbus_pdu+0x44a>
 801ab36:	4b12      	ldr	r3, [pc, #72]	@ (801ab80 <handle_modbus_pdu+0x47c>)
 801ab38:	f44f 721c 	mov.w	r2, #624	@ 0x270
 801ab3c:	4911      	ldr	r1, [pc, #68]	@ (801ab84 <handle_modbus_pdu+0x480>)
 801ab3e:	2003      	movs	r0, #3
 801ab40:	f7ed fa72 	bl	8008028 <mg_log_prefix>
 801ab44:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801ab48:	4812      	ldr	r0, [pc, #72]	@ (801ab94 <handle_modbus_pdu+0x490>)
 801ab4a:	f7ed fabd 	bl	80080c8 <mg_log>
    mg_hexdump(response, response_len);
 801ab4e:	f107 0314 	add.w	r3, r7, #20
 801ab52:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801ab56:	4618      	mov	r0, r3
 801ab58:	f7ed faec 	bl	8008134 <mg_hexdump>
    mg_send(c, response, response_len);
 801ab5c:	f107 0114 	add.w	r1, r7, #20
 801ab60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ab64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801ab68:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801ab6c:	6818      	ldr	r0, [r3, #0]
 801ab6e:	f7f2 fae5 	bl	800d13c <mg_send>
}
 801ab72:	bf00      	nop
 801ab74:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	bd90      	pop	{r4, r7, pc}
 801ab7c:	24000240 	.word	0x24000240
 801ab80:	080383c4 	.word	0x080383c4
 801ab84:	0802b60c 	.word	0x0802b60c
 801ab88:	0802bc54 	.word	0x0802bc54
 801ab8c:	0802bc5c 	.word	0x0802bc5c
 801ab90:	0802bc64 	.word	0x0802bc64
 801ab94:	0802bc78 	.word	0x0802bc78

0801ab98 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b086      	sub	sp, #24
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	60f8      	str	r0, [r7, #12]
 801aba0:	60b9      	str	r1, [r7, #8]
 801aba2:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	2b07      	cmp	r3, #7
 801aba8:	d13a      	bne.n	801ac20 <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801abae:	2b06      	cmp	r3, #6
 801abb0:	d933      	bls.n	801ac1a <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801abb6:	3304      	adds	r3, #4
 801abb8:	881b      	ldrh	r3, [r3, #0]
 801abba:	4618      	mov	r0, r3
 801abbc:	f7fc ffb7 	bl	8017b2e <mg_ntohs>
 801abc0:	4603      	mov	r3, r0
 801abc2:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 801abc4:	4b18      	ldr	r3, [pc, #96]	@ (801ac28 <modbus_ev_handler+0x90>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	2b01      	cmp	r3, #1
 801abca:	dd0e      	ble.n	801abea <modbus_ev_handler+0x52>
 801abcc:	4b17      	ldr	r3, [pc, #92]	@ (801ac2c <modbus_ev_handler+0x94>)
 801abce:	f44f 721f 	mov.w	r2, #636	@ 0x27c
 801abd2:	4917      	ldr	r1, [pc, #92]	@ (801ac30 <modbus_ev_handler+0x98>)
 801abd4:	2002      	movs	r0, #2
 801abd6:	f7ed fa27 	bl	8008028 <mg_log_prefix>
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801abde:	8afb      	ldrh	r3, [r7, #22]
 801abe0:	3306      	adds	r3, #6
 801abe2:	461a      	mov	r2, r3
 801abe4:	4813      	ldr	r0, [pc, #76]	@ (801ac34 <modbus_ev_handler+0x9c>)
 801abe6:	f7ed fa6f 	bl	80080c8 <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801abee:	8afb      	ldrh	r3, [r7, #22]
 801abf0:	3306      	adds	r3, #6
 801abf2:	429a      	cmp	r2, r3
 801abf4:	d313      	bcc.n	801ac1e <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801abfa:	8afb      	ldrh	r3, [r7, #22]
 801abfc:	3306      	adds	r3, #6
 801abfe:	461a      	mov	r2, r3
 801ac00:	68f8      	ldr	r0, [r7, #12]
 801ac02:	f7ff fd7f 	bl	801a704 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ac0c:	8afb      	ldrh	r3, [r7, #22]
 801ac0e:	3306      	adds	r3, #6
 801ac10:	461a      	mov	r2, r3
 801ac12:	2100      	movs	r1, #0
 801ac14:	f7ec fb18 	bl	8007248 <mg_iobuf_del>
 801ac18:	e002      	b.n	801ac20 <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 801ac1a:	bf00      	nop
 801ac1c:	e000      	b.n	801ac20 <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 801ac1e:	bf00      	nop
  }
  (void) ev_data;
}
 801ac20:	3718      	adds	r7, #24
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	bf00      	nop
 801ac28:	24000240 	.word	0x24000240
 801ac2c:	080383d8 	.word	0x080383d8
 801ac30:	0802b60c 	.word	0x0802b60c
 801ac34:	0802bc94 	.word	0x0802bc94

0801ac38 <mongoose_init>:
#endif  // WIZARD_ENABLE_MODBUS

void mongoose_init(void) {
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b09e      	sub	sp, #120	@ 0x78
 801ac3c:	af04      	add	r7, sp, #16
  mg_mgr_init(&g_mgr);      // Initialise event manager
 801ac3e:	484a      	ldr	r0, [pc, #296]	@ (801ad68 <mongoose_init+0x130>)
 801ac40:	f7ee fff0 	bl	8009c24 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 801ac44:	4b49      	ldr	r3, [pc, #292]	@ (801ad6c <mongoose_init+0x134>)
 801ac46:	2203      	movs	r2, #3
 801ac48:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 801ac4a:	4b48      	ldr	r3, [pc, #288]	@ (801ad6c <mongoose_init+0x134>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	2b01      	cmp	r3, #1
 801ac50:	dd09      	ble.n	801ac66 <mongoose_init+0x2e>
 801ac52:	4b47      	ldr	r3, [pc, #284]	@ (801ad70 <mongoose_init+0x138>)
 801ac54:	f240 228a 	movw	r2, #650	@ 0x28a
 801ac58:	4946      	ldr	r1, [pc, #280]	@ (801ad74 <mongoose_init+0x13c>)
 801ac5a:	2002      	movs	r0, #2
 801ac5c:	f7ed f9e4 	bl	8008028 <mg_log_prefix>
 801ac60:	4845      	ldr	r0, [pc, #276]	@ (801ad78 <mongoose_init+0x140>)
 801ac62:	f7ed fa31 	bl	80080c8 <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 801ac66:	2300      	movs	r3, #0
 801ac68:	4a44      	ldr	r2, [pc, #272]	@ (801ad7c <mongoose_init+0x144>)
 801ac6a:	4945      	ldr	r1, [pc, #276]	@ (801ad80 <mongoose_init+0x148>)
 801ac6c:	483e      	ldr	r0, [pc, #248]	@ (801ad68 <mongoose_init+0x130>)
 801ac6e:	f7ec f9d7 	bl	8007020 <mg_http_listen>
#endif
#if WIZARD_ENABLE_HTTPS
  MG_INFO(("Starting HTTPS listener"));
 801ac72:	4b3e      	ldr	r3, [pc, #248]	@ (801ad6c <mongoose_init+0x134>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	2b01      	cmp	r3, #1
 801ac78:	dd09      	ble.n	801ac8e <mongoose_init+0x56>
 801ac7a:	4b3d      	ldr	r3, [pc, #244]	@ (801ad70 <mongoose_init+0x138>)
 801ac7c:	f240 228e 	movw	r2, #654	@ 0x28e
 801ac80:	493c      	ldr	r1, [pc, #240]	@ (801ad74 <mongoose_init+0x13c>)
 801ac82:	2002      	movs	r0, #2
 801ac84:	f7ed f9d0 	bl	8008028 <mg_log_prefix>
 801ac88:	483e      	ldr	r0, [pc, #248]	@ (801ad84 <mongoose_init+0x14c>)
 801ac8a:	f7ed fa1d 	bl	80080c8 <mg_log>
  mg_http_listen(&g_mgr, HTTPS_URL, http_ev_handler, "");
 801ac8e:	4b3e      	ldr	r3, [pc, #248]	@ (801ad88 <mongoose_init+0x150>)
 801ac90:	4a3a      	ldr	r2, [pc, #232]	@ (801ad7c <mongoose_init+0x144>)
 801ac92:	493e      	ldr	r1, [pc, #248]	@ (801ad8c <mongoose_init+0x154>)
 801ac94:	4834      	ldr	r0, [pc, #208]	@ (801ad68 <mongoose_init+0x130>)
 801ac96:	f7ec f9c3 	bl	8007020 <mg_http_listen>
#endif

#if WIZARD_ENABLE_SNTP
  MG_INFO(("Starting SNTP timer"));
 801ac9a:	4b34      	ldr	r3, [pc, #208]	@ (801ad6c <mongoose_init+0x134>)
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	2b01      	cmp	r3, #1
 801aca0:	dd09      	ble.n	801acb6 <mongoose_init+0x7e>
 801aca2:	4b33      	ldr	r3, [pc, #204]	@ (801ad70 <mongoose_init+0x138>)
 801aca4:	f240 2293 	movw	r2, #659	@ 0x293
 801aca8:	4932      	ldr	r1, [pc, #200]	@ (801ad74 <mongoose_init+0x13c>)
 801acaa:	2002      	movs	r0, #2
 801acac:	f7ed f9bc 	bl	8008028 <mg_log_prefix>
 801acb0:	4837      	ldr	r0, [pc, #220]	@ (801ad90 <mongoose_init+0x158>)
 801acb2:	f7ed fa09 	bl	80080c8 <mg_log>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, sntp_timer, &g_mgr);
 801acb6:	4b2c      	ldr	r3, [pc, #176]	@ (801ad68 <mongoose_init+0x130>)
 801acb8:	9302      	str	r3, [sp, #8]
 801acba:	4b36      	ldr	r3, [pc, #216]	@ (801ad94 <mongoose_init+0x15c>)
 801acbc:	9301      	str	r3, [sp, #4]
 801acbe:	2301      	movs	r3, #1
 801acc0:	9300      	str	r3, [sp, #0]
 801acc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801acc6:	f04f 0300 	mov.w	r3, #0
 801acca:	4827      	ldr	r0, [pc, #156]	@ (801ad68 <mongoose_init+0x130>)
 801accc:	f7ee ff80 	bl	8009bd0 <mg_timer_add>
#if WIZARD_DNS_TYPE == 2
  g_mgr.dns4.url = WIZARD_DNS_URL;
#endif

#if WIZARD_ENABLE_MQTT
  MG_INFO(("Starting MQTT reconnection timer"));
 801acd0:	4b26      	ldr	r3, [pc, #152]	@ (801ad6c <mongoose_init+0x134>)
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	2b01      	cmp	r3, #1
 801acd6:	dd09      	ble.n	801acec <mongoose_init+0xb4>
 801acd8:	4b25      	ldr	r3, [pc, #148]	@ (801ad70 <mongoose_init+0x138>)
 801acda:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 801acde:	4925      	ldr	r1, [pc, #148]	@ (801ad74 <mongoose_init+0x13c>)
 801ace0:	2002      	movs	r0, #2
 801ace2:	f7ed f9a1 	bl	8008028 <mg_log_prefix>
 801ace6:	482c      	ldr	r0, [pc, #176]	@ (801ad98 <mongoose_init+0x160>)
 801ace8:	f7ed f9ee 	bl	80080c8 <mg_log>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, mqtt_timer, &g_mgr);
 801acec:	4b1e      	ldr	r3, [pc, #120]	@ (801ad68 <mongoose_init+0x130>)
 801acee:	9302      	str	r3, [sp, #8]
 801acf0:	4b2a      	ldr	r3, [pc, #168]	@ (801ad9c <mongoose_init+0x164>)
 801acf2:	9301      	str	r3, [sp, #4]
 801acf4:	2301      	movs	r3, #1
 801acf6:	9300      	str	r3, [sp, #0]
 801acf8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801acfc:	f04f 0300 	mov.w	r3, #0
 801ad00:	4819      	ldr	r0, [pc, #100]	@ (801ad68 <mongoose_init+0x130>)
 801ad02:	f7ee ff65 	bl	8009bd0 <mg_timer_add>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 801ad06:	1d38      	adds	r0, r7, #4
 801ad08:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 801ad0c:	4a24      	ldr	r2, [pc, #144]	@ (801ada0 <mongoose_init+0x168>)
 801ad0e:	2164      	movs	r1, #100	@ 0x64
 801ad10:	f7f2 fd40 	bl	800d794 <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 801ad14:	4b15      	ldr	r3, [pc, #84]	@ (801ad6c <mongoose_init+0x134>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	2b01      	cmp	r3, #1
 801ad1a:	dd0b      	ble.n	801ad34 <mongoose_init+0xfc>
 801ad1c:	4b14      	ldr	r3, [pc, #80]	@ (801ad70 <mongoose_init+0x138>)
 801ad1e:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 801ad22:	4914      	ldr	r1, [pc, #80]	@ (801ad74 <mongoose_init+0x13c>)
 801ad24:	2002      	movs	r0, #2
 801ad26:	f7ed f97f 	bl	8008028 <mg_log_prefix>
 801ad2a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 801ad2e:	481d      	ldr	r0, [pc, #116]	@ (801ada4 <mongoose_init+0x16c>)
 801ad30:	f7ed f9ca 	bl	80080c8 <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 801ad34:	1d39      	adds	r1, r7, #4
 801ad36:	2300      	movs	r3, #0
 801ad38:	4a1b      	ldr	r2, [pc, #108]	@ (801ada8 <mongoose_init+0x170>)
 801ad3a:	480b      	ldr	r0, [pc, #44]	@ (801ad68 <mongoose_init+0x130>)
 801ad3c:	f7ee fea6 	bl	8009a8c <mg_listen>
  }
#endif

  MG_INFO(("Mongoose init complete, calling user init"));
 801ad40:	4b0a      	ldr	r3, [pc, #40]	@ (801ad6c <mongoose_init+0x134>)
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	2b01      	cmp	r3, #1
 801ad46:	dd09      	ble.n	801ad5c <mongoose_init+0x124>
 801ad48:	4b09      	ldr	r3, [pc, #36]	@ (801ad70 <mongoose_init+0x138>)
 801ad4a:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801ad4e:	4909      	ldr	r1, [pc, #36]	@ (801ad74 <mongoose_init+0x13c>)
 801ad50:	2002      	movs	r0, #2
 801ad52:	f7ed f969 	bl	8008028 <mg_log_prefix>
 801ad56:	4815      	ldr	r0, [pc, #84]	@ (801adac <mongoose_init+0x174>)
 801ad58:	f7ed f9b6 	bl	80080c8 <mg_log>
  glue_init_3();
 801ad5c:	f7fd fdce 	bl	80188fc <glue_init_3>
}
 801ad60:	bf00      	nop
 801ad62:	3768      	adds	r7, #104	@ 0x68
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}
 801ad68:	24003f20 	.word	0x24003f20
 801ad6c:	24000240 	.word	0x24000240
 801ad70:	080383ec 	.word	0x080383ec
 801ad74:	0802b60c 	.word	0x0802b60c
 801ad78:	0802bcac 	.word	0x0802bcac
 801ad7c:	0801a20d 	.word	0x0801a20d
 801ad80:	0802bcc4 	.word	0x0802bcc4
 801ad84:	0802bcd8 	.word	0x0802bcd8
 801ad88:	0802b678 	.word	0x0802b678
 801ad8c:	0802bcf0 	.word	0x0802bcf0
 801ad90:	0802bd04 	.word	0x0802bd04
 801ad94:	0801a5b9 	.word	0x0801a5b9
 801ad98:	0802bd18 	.word	0x0802bd18
 801ad9c:	0801a6d1 	.word	0x0801a6d1
 801ada0:	0802bd3c 	.word	0x0802bd3c
 801ada4:	0802bd50 	.word	0x0802bd50
 801ada8:	0801ab99 	.word	0x0801ab99
 801adac:	0802bd78 	.word	0x0802bd78

0801adb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b082      	sub	sp, #8
 801adb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801adb6:	4b0c      	ldr	r3, [pc, #48]	@ (801ade8 <HAL_MspInit+0x38>)
 801adb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801adbc:	4a0a      	ldr	r2, [pc, #40]	@ (801ade8 <HAL_MspInit+0x38>)
 801adbe:	f043 0302 	orr.w	r3, r3, #2
 801adc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801adc6:	4b08      	ldr	r3, [pc, #32]	@ (801ade8 <HAL_MspInit+0x38>)
 801adc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801adcc:	f003 0302 	and.w	r3, r3, #2
 801add0:	607b      	str	r3, [r7, #4]
 801add2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801add4:	2200      	movs	r2, #0
 801add6:	210f      	movs	r1, #15
 801add8:	f06f 0001 	mvn.w	r0, #1
 801addc:	f000 fc86 	bl	801b6ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ade0:	bf00      	nop
 801ade2:	3708      	adds	r7, #8
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bd80      	pop	{r7, pc}
 801ade8:	58024400 	.word	0x58024400

0801adec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b08e      	sub	sp, #56	@ 0x38
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801adf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801adf8:	2200      	movs	r2, #0
 801adfa:	601a      	str	r2, [r3, #0]
 801adfc:	605a      	str	r2, [r3, #4]
 801adfe:	609a      	str	r2, [r3, #8]
 801ae00:	60da      	str	r2, [r3, #12]
 801ae02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	4a59      	ldr	r2, [pc, #356]	@ (801af70 <HAL_ETH_MspInit+0x184>)
 801ae0a:	4293      	cmp	r3, r2
 801ae0c:	f040 80ab 	bne.w	801af66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801ae10:	4b58      	ldr	r3, [pc, #352]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ae16:	4a57      	ldr	r2, [pc, #348]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ae1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801ae20:	4b54      	ldr	r3, [pc, #336]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ae26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ae2a:	623b      	str	r3, [r7, #32]
 801ae2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801ae2e:	4b51      	ldr	r3, [pc, #324]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ae34:	4a4f      	ldr	r2, [pc, #316]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ae3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801ae3e:	4b4d      	ldr	r3, [pc, #308]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ae44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ae48:	61fb      	str	r3, [r7, #28]
 801ae4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 801ae4c:	4b49      	ldr	r3, [pc, #292]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ae52:	4a48      	ldr	r2, [pc, #288]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ae58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801ae5c:	4b45      	ldr	r3, [pc, #276]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ae62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ae66:	61bb      	str	r3, [r7, #24]
 801ae68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801ae6a:	4b42      	ldr	r3, [pc, #264]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ae70:	4a40      	ldr	r2, [pc, #256]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae72:	f043 0304 	orr.w	r3, r3, #4
 801ae76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ae7a:	4b3e      	ldr	r3, [pc, #248]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ae80:	f003 0304 	and.w	r3, r3, #4
 801ae84:	617b      	str	r3, [r7, #20]
 801ae86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ae88:	4b3a      	ldr	r3, [pc, #232]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ae8e:	4a39      	ldr	r2, [pc, #228]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae90:	f043 0301 	orr.w	r3, r3, #1
 801ae94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ae98:	4b36      	ldr	r3, [pc, #216]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801ae9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ae9e:	f003 0301 	and.w	r3, r3, #1
 801aea2:	613b      	str	r3, [r7, #16]
 801aea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801aea6:	4b33      	ldr	r3, [pc, #204]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801aea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801aeac:	4a31      	ldr	r2, [pc, #196]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801aeae:	f043 0302 	orr.w	r3, r3, #2
 801aeb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801aeb6:	4b2f      	ldr	r3, [pc, #188]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801aeb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801aebc:	f003 0302 	and.w	r3, r3, #2
 801aec0:	60fb      	str	r3, [r7, #12]
 801aec2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801aec4:	4b2b      	ldr	r3, [pc, #172]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801aec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801aeca:	4a2a      	ldr	r2, [pc, #168]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801aecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801aed4:	4b27      	ldr	r3, [pc, #156]	@ (801af74 <HAL_ETH_MspInit+0x188>)
 801aed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801aeda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aede:	60bb      	str	r3, [r7, #8]
 801aee0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801aee2:	2332      	movs	r3, #50	@ 0x32
 801aee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801aee6:	2302      	movs	r3, #2
 801aee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aeea:	2300      	movs	r3, #0
 801aeec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801aeee:	2300      	movs	r3, #0
 801aef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801aef2:	230b      	movs	r3, #11
 801aef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801aef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801aefa:	4619      	mov	r1, r3
 801aefc:	481e      	ldr	r0, [pc, #120]	@ (801af78 <HAL_ETH_MspInit+0x18c>)
 801aefe:	f001 f851 	bl	801bfa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801af02:	2386      	movs	r3, #134	@ 0x86
 801af04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801af06:	2302      	movs	r3, #2
 801af08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af0a:	2300      	movs	r3, #0
 801af0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af0e:	2300      	movs	r3, #0
 801af10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801af12:	230b      	movs	r3, #11
 801af14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801af16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801af1a:	4619      	mov	r1, r3
 801af1c:	4817      	ldr	r0, [pc, #92]	@ (801af7c <HAL_ETH_MspInit+0x190>)
 801af1e:	f001 f841 	bl	801bfa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 801af22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801af26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801af28:	2302      	movs	r3, #2
 801af2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af2c:	2300      	movs	r3, #0
 801af2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af30:	2300      	movs	r3, #0
 801af32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801af34:	230b      	movs	r3, #11
 801af36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801af38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801af3c:	4619      	mov	r1, r3
 801af3e:	4810      	ldr	r0, [pc, #64]	@ (801af80 <HAL_ETH_MspInit+0x194>)
 801af40:	f001 f830 	bl	801bfa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 801af44:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801af48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801af4a:	2302      	movs	r3, #2
 801af4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af4e:	2300      	movs	r3, #0
 801af50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af52:	2300      	movs	r3, #0
 801af54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801af56:	230b      	movs	r3, #11
 801af58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801af5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801af5e:	4619      	mov	r1, r3
 801af60:	4808      	ldr	r0, [pc, #32]	@ (801af84 <HAL_ETH_MspInit+0x198>)
 801af62:	f001 f81f 	bl	801bfa4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 801af66:	bf00      	nop
 801af68:	3738      	adds	r7, #56	@ 0x38
 801af6a:	46bd      	mov	sp, r7
 801af6c:	bd80      	pop	{r7, pc}
 801af6e:	bf00      	nop
 801af70:	40028000 	.word	0x40028000
 801af74:	58024400 	.word	0x58024400
 801af78:	58020800 	.word	0x58020800
 801af7c:	58020000 	.word	0x58020000
 801af80:	58020400 	.word	0x58020400
 801af84:	58021800 	.word	0x58021800

0801af88 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b0b4      	sub	sp, #208	@ 0xd0
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801af90:	f107 0310 	add.w	r3, r7, #16
 801af94:	22c0      	movs	r2, #192	@ 0xc0
 801af96:	2100      	movs	r1, #0
 801af98:	4618      	mov	r0, r3
 801af9a:	f009 ff5f 	bl	8024e5c <memset>
  if(hrng->Instance==RNG)
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	4a14      	ldr	r2, [pc, #80]	@ (801aff4 <HAL_RNG_MspInit+0x6c>)
 801afa4:	4293      	cmp	r3, r2
 801afa6:	d121      	bne.n	801afec <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 801afa8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801afac:	f04f 0300 	mov.w	r3, #0
 801afb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 801afb4:	2300      	movs	r3, #0
 801afb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801afba:	f107 0310 	add.w	r3, r7, #16
 801afbe:	4618      	mov	r0, r3
 801afc0:	f002 fa3c 	bl	801d43c <HAL_RCCEx_PeriphCLKConfig>
 801afc4:	4603      	mov	r3, r0
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d001      	beq.n	801afce <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 801afca:	f7e6 facf 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 801afce:	4b0a      	ldr	r3, [pc, #40]	@ (801aff8 <HAL_RNG_MspInit+0x70>)
 801afd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801afd4:	4a08      	ldr	r2, [pc, #32]	@ (801aff8 <HAL_RNG_MspInit+0x70>)
 801afd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801afda:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 801afde:	4b06      	ldr	r3, [pc, #24]	@ (801aff8 <HAL_RNG_MspInit+0x70>)
 801afe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801afe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801afe8:	60fb      	str	r3, [r7, #12]
 801afea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 801afec:	bf00      	nop
 801afee:	37d0      	adds	r7, #208	@ 0xd0
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}
 801aff4:	48021800 	.word	0x48021800
 801aff8:	58024400 	.word	0x58024400

0801affc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b0be      	sub	sp, #248	@ 0xf8
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b004:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b008:	2200      	movs	r2, #0
 801b00a:	601a      	str	r2, [r3, #0]
 801b00c:	605a      	str	r2, [r3, #4]
 801b00e:	609a      	str	r2, [r3, #8]
 801b010:	60da      	str	r2, [r3, #12]
 801b012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b014:	f107 0320 	add.w	r3, r7, #32
 801b018:	22c0      	movs	r2, #192	@ 0xc0
 801b01a:	2100      	movs	r1, #0
 801b01c:	4618      	mov	r0, r3
 801b01e:	f009 ff1d 	bl	8024e5c <memset>
  if(huart->Instance==USART2)
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	4a5f      	ldr	r2, [pc, #380]	@ (801b1a4 <HAL_UART_MspInit+0x1a8>)
 801b028:	4293      	cmp	r3, r2
 801b02a:	d16a      	bne.n	801b102 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 801b02c:	f04f 0202 	mov.w	r2, #2
 801b030:	f04f 0300 	mov.w	r3, #0
 801b034:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801b038:	2300      	movs	r3, #0
 801b03a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b03e:	f107 0320 	add.w	r3, r7, #32
 801b042:	4618      	mov	r0, r3
 801b044:	f002 f9fa 	bl	801d43c <HAL_RCCEx_PeriphCLKConfig>
 801b048:	4603      	mov	r3, r0
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d001      	beq.n	801b052 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 801b04e:	f7e6 fa8d 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801b052:	4b55      	ldr	r3, [pc, #340]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b058:	4a53      	ldr	r2, [pc, #332]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b05a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b05e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b062:	4b51      	ldr	r3, [pc, #324]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b06c:	61fb      	str	r3, [r7, #28]
 801b06e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b070:	4b4d      	ldr	r3, [pc, #308]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b076:	4a4c      	ldr	r2, [pc, #304]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b078:	f043 0301 	orr.w	r3, r3, #1
 801b07c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b080:	4b49      	ldr	r3, [pc, #292]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b086:	f003 0301 	and.w	r3, r3, #1
 801b08a:	61bb      	str	r3, [r7, #24]
 801b08c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801b08e:	4b46      	ldr	r3, [pc, #280]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b094:	4a44      	ldr	r2, [pc, #272]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b096:	f043 0308 	orr.w	r3, r3, #8
 801b09a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b09e:	4b42      	ldr	r3, [pc, #264]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b0a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b0a4:	f003 0308 	and.w	r3, r3, #8
 801b0a8:	617b      	str	r3, [r7, #20]
 801b0aa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD4     ------> USART2_DE
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801b0ac:	2308      	movs	r3, #8
 801b0ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b0b2:	2302      	movs	r3, #2
 801b0b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801b0c4:	2307      	movs	r3, #7
 801b0c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b0ca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b0ce:	4619      	mov	r1, r3
 801b0d0:	4836      	ldr	r0, [pc, #216]	@ (801b1ac <HAL_UART_MspInit+0x1b0>)
 801b0d2:	f000 ff67 	bl	801bfa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 801b0d6:	2330      	movs	r3, #48	@ 0x30
 801b0d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b0dc:	2302      	movs	r3, #2
 801b0de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801b0ee:	2307      	movs	r3, #7
 801b0f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801b0f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b0f8:	4619      	mov	r1, r3
 801b0fa:	482d      	ldr	r0, [pc, #180]	@ (801b1b0 <HAL_UART_MspInit+0x1b4>)
 801b0fc:	f000 ff52 	bl	801bfa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801b100:	e04b      	b.n	801b19a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	4a2b      	ldr	r2, [pc, #172]	@ (801b1b4 <HAL_UART_MspInit+0x1b8>)
 801b108:	4293      	cmp	r3, r2
 801b10a:	d146      	bne.n	801b19a <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 801b10c:	f04f 0202 	mov.w	r2, #2
 801b110:	f04f 0300 	mov.w	r3, #0
 801b114:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801b118:	2300      	movs	r3, #0
 801b11a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b11e:	f107 0320 	add.w	r3, r7, #32
 801b122:	4618      	mov	r0, r3
 801b124:	f002 f98a 	bl	801d43c <HAL_RCCEx_PeriphCLKConfig>
 801b128:	4603      	mov	r3, r0
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d001      	beq.n	801b132 <HAL_UART_MspInit+0x136>
      Error_Handler();
 801b12e:	f7e6 fa1d 	bl	800156c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 801b132:	4b1d      	ldr	r3, [pc, #116]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b138:	4a1b      	ldr	r2, [pc, #108]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b13a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b13e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b142:	4b19      	ldr	r3, [pc, #100]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b14c:	613b      	str	r3, [r7, #16]
 801b14e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801b150:	4b15      	ldr	r3, [pc, #84]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b156:	4a14      	ldr	r2, [pc, #80]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b158:	f043 0308 	orr.w	r3, r3, #8
 801b15c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b160:	4b11      	ldr	r3, [pc, #68]	@ (801b1a8 <HAL_UART_MspInit+0x1ac>)
 801b162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b166:	f003 0308 	and.w	r3, r3, #8
 801b16a:	60fb      	str	r3, [r7, #12]
 801b16c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801b16e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801b172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b176:	2302      	movs	r3, #2
 801b178:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b17c:	2300      	movs	r3, #0
 801b17e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b182:	2300      	movs	r3, #0
 801b184:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801b188:	2307      	movs	r3, #7
 801b18a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801b18e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b192:	4619      	mov	r1, r3
 801b194:	4806      	ldr	r0, [pc, #24]	@ (801b1b0 <HAL_UART_MspInit+0x1b4>)
 801b196:	f000 ff05 	bl	801bfa4 <HAL_GPIO_Init>
}
 801b19a:	bf00      	nop
 801b19c:	37f8      	adds	r7, #248	@ 0xf8
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd80      	pop	{r7, pc}
 801b1a2:	bf00      	nop
 801b1a4:	40004400 	.word	0x40004400
 801b1a8:	58024400 	.word	0x58024400
 801b1ac:	58020000 	.word	0x58020000
 801b1b0:	58020c00 	.word	0x58020c00
 801b1b4:	40004800 	.word	0x40004800

0801b1b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b090      	sub	sp, #64	@ 0x40
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b0f      	cmp	r3, #15
 801b1c4:	d827      	bhi.n	801b216 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	6879      	ldr	r1, [r7, #4]
 801b1ca:	2036      	movs	r0, #54	@ 0x36
 801b1cc:	f000 fa8e 	bl	801b6ec <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801b1d0:	2036      	movs	r0, #54	@ 0x36
 801b1d2:	f000 faa5 	bl	801b720 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 801b1d6:	4a29      	ldr	r2, [pc, #164]	@ (801b27c <HAL_InitTick+0xc4>)
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801b1dc:	4b28      	ldr	r3, [pc, #160]	@ (801b280 <HAL_InitTick+0xc8>)
 801b1de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b1e2:	4a27      	ldr	r2, [pc, #156]	@ (801b280 <HAL_InitTick+0xc8>)
 801b1e4:	f043 0310 	orr.w	r3, r3, #16
 801b1e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b1ec:	4b24      	ldr	r3, [pc, #144]	@ (801b280 <HAL_InitTick+0xc8>)
 801b1ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b1f2:	f003 0310 	and.w	r3, r3, #16
 801b1f6:	60fb      	str	r3, [r7, #12]
 801b1f8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801b1fa:	f107 0210 	add.w	r2, r7, #16
 801b1fe:	f107 0314 	add.w	r3, r7, #20
 801b202:	4611      	mov	r1, r2
 801b204:	4618      	mov	r0, r3
 801b206:	f002 f8d7 	bl	801d3b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801b20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b20c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801b20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b210:	2b00      	cmp	r3, #0
 801b212:	d106      	bne.n	801b222 <HAL_InitTick+0x6a>
 801b214:	e001      	b.n	801b21a <HAL_InitTick+0x62>
    return HAL_ERROR;
 801b216:	2301      	movs	r3, #1
 801b218:	e02b      	b.n	801b272 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 801b21a:	f002 f8a1 	bl	801d360 <HAL_RCC_GetPCLK1Freq>
 801b21e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801b220:	e004      	b.n	801b22c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801b222:	f002 f89d 	bl	801d360 <HAL_RCC_GetPCLK1Freq>
 801b226:	4603      	mov	r3, r0
 801b228:	005b      	lsls	r3, r3, #1
 801b22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801b22c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b22e:	4a15      	ldr	r2, [pc, #84]	@ (801b284 <HAL_InitTick+0xcc>)
 801b230:	fba2 2303 	umull	r2, r3, r2, r3
 801b234:	0c9b      	lsrs	r3, r3, #18
 801b236:	3b01      	subs	r3, #1
 801b238:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801b23a:	4b13      	ldr	r3, [pc, #76]	@ (801b288 <HAL_InitTick+0xd0>)
 801b23c:	4a13      	ldr	r2, [pc, #76]	@ (801b28c <HAL_InitTick+0xd4>)
 801b23e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 801b240:	4b11      	ldr	r3, [pc, #68]	@ (801b288 <HAL_InitTick+0xd0>)
 801b242:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801b246:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801b248:	4a0f      	ldr	r2, [pc, #60]	@ (801b288 <HAL_InitTick+0xd0>)
 801b24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b24c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801b24e:	4b0e      	ldr	r3, [pc, #56]	@ (801b288 <HAL_InitTick+0xd0>)
 801b250:	2200      	movs	r2, #0
 801b252:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b254:	4b0c      	ldr	r3, [pc, #48]	@ (801b288 <HAL_InitTick+0xd0>)
 801b256:	2200      	movs	r2, #0
 801b258:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801b25a:	480b      	ldr	r0, [pc, #44]	@ (801b288 <HAL_InitTick+0xd0>)
 801b25c:	f003 ffd2 	bl	801f204 <HAL_TIM_Base_Init>
 801b260:	4603      	mov	r3, r0
 801b262:	2b00      	cmp	r3, #0
 801b264:	d104      	bne.n	801b270 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801b266:	4808      	ldr	r0, [pc, #32]	@ (801b288 <HAL_InitTick+0xd0>)
 801b268:	f004 f82e 	bl	801f2c8 <HAL_TIM_Base_Start_IT>
 801b26c:	4603      	mov	r3, r0
 801b26e:	e000      	b.n	801b272 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 801b270:	2301      	movs	r3, #1
}
 801b272:	4618      	mov	r0, r3
 801b274:	3740      	adds	r7, #64	@ 0x40
 801b276:	46bd      	mov	sp, r7
 801b278:	bd80      	pop	{r7, pc}
 801b27a:	bf00      	nop
 801b27c:	24000798 	.word	0x24000798
 801b280:	58024400 	.word	0x58024400
 801b284:	431bde83 	.word	0x431bde83
 801b288:	24003f80 	.word	0x24003f80
 801b28c:	40001000 	.word	0x40001000

0801b290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801b290:	b480      	push	{r7}
 801b292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801b294:	bf00      	nop
 801b296:	e7fd      	b.n	801b294 <NMI_Handler+0x4>

0801b298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801b298:	b480      	push	{r7}
 801b29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801b29c:	bf00      	nop
 801b29e:	e7fd      	b.n	801b29c <HardFault_Handler+0x4>

0801b2a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801b2a0:	b480      	push	{r7}
 801b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801b2a4:	bf00      	nop
 801b2a6:	e7fd      	b.n	801b2a4 <MemManage_Handler+0x4>

0801b2a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801b2a8:	b480      	push	{r7}
 801b2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801b2ac:	bf00      	nop
 801b2ae:	e7fd      	b.n	801b2ac <BusFault_Handler+0x4>

0801b2b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801b2b0:	b480      	push	{r7}
 801b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801b2b4:	bf00      	nop
 801b2b6:	e7fd      	b.n	801b2b4 <UsageFault_Handler+0x4>

0801b2b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801b2b8:	b480      	push	{r7}
 801b2ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801b2bc:	bf00      	nop
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c4:	4770      	bx	lr
	...

0801b2c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801b2cc:	4802      	ldr	r0, [pc, #8]	@ (801b2d8 <TIM6_DAC_IRQHandler+0x10>)
 801b2ce:	f004 f873 	bl	801f3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801b2d2:	bf00      	nop
 801b2d4:	bd80      	pop	{r7, pc}
 801b2d6:	bf00      	nop
 801b2d8:	24003f80 	.word	0x24003f80

0801b2dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801b2dc:	b480      	push	{r7}
 801b2de:	af00      	add	r7, sp, #0
  return 1;
 801b2e0:	2301      	movs	r3, #1
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ea:	4770      	bx	lr

0801b2ec <_kill>:

int _kill(int pid, int sig)
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	b082      	sub	sp, #8
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	6078      	str	r0, [r7, #4]
 801b2f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801b2f6:	f009 fec7 	bl	8025088 <__errno>
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	2216      	movs	r2, #22
 801b2fe:	601a      	str	r2, [r3, #0]
  return -1;
 801b300:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b304:	4618      	mov	r0, r3
 801b306:	3708      	adds	r7, #8
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}

0801b30c <_exit>:

void _exit (int status)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b082      	sub	sp, #8
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801b314:	f04f 31ff 	mov.w	r1, #4294967295
 801b318:	6878      	ldr	r0, [r7, #4]
 801b31a:	f7ff ffe7 	bl	801b2ec <_kill>
  while (1) {}    /* Make sure we hang here */
 801b31e:	bf00      	nop
 801b320:	e7fd      	b.n	801b31e <_exit+0x12>

0801b322 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801b322:	b580      	push	{r7, lr}
 801b324:	b086      	sub	sp, #24
 801b326:	af00      	add	r7, sp, #0
 801b328:	60f8      	str	r0, [r7, #12]
 801b32a:	60b9      	str	r1, [r7, #8]
 801b32c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801b32e:	2300      	movs	r3, #0
 801b330:	617b      	str	r3, [r7, #20]
 801b332:	e00a      	b.n	801b34a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801b334:	f3af 8000 	nop.w
 801b338:	4601      	mov	r1, r0
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	1c5a      	adds	r2, r3, #1
 801b33e:	60ba      	str	r2, [r7, #8]
 801b340:	b2ca      	uxtb	r2, r1
 801b342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	3301      	adds	r3, #1
 801b348:	617b      	str	r3, [r7, #20]
 801b34a:	697a      	ldr	r2, [r7, #20]
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	429a      	cmp	r2, r3
 801b350:	dbf0      	blt.n	801b334 <_read+0x12>
  }

  return len;
 801b352:	687b      	ldr	r3, [r7, #4]
}
 801b354:	4618      	mov	r0, r3
 801b356:	3718      	adds	r7, #24
 801b358:	46bd      	mov	sp, r7
 801b35a:	bd80      	pop	{r7, pc}

0801b35c <_close>:
//	}
  return len;
}

int _close(int file)
{
 801b35c:	b480      	push	{r7}
 801b35e:	b083      	sub	sp, #12
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801b364:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b368:	4618      	mov	r0, r3
 801b36a:	370c      	adds	r7, #12
 801b36c:	46bd      	mov	sp, r7
 801b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b372:	4770      	bx	lr

0801b374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 801b374:	b480      	push	{r7}
 801b376:	b083      	sub	sp, #12
 801b378:	af00      	add	r7, sp, #0
 801b37a:	6078      	str	r0, [r7, #4]
 801b37c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801b384:	605a      	str	r2, [r3, #4]
  return 0;
 801b386:	2300      	movs	r3, #0
}
 801b388:	4618      	mov	r0, r3
 801b38a:	370c      	adds	r7, #12
 801b38c:	46bd      	mov	sp, r7
 801b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b392:	4770      	bx	lr

0801b394 <_isatty>:

int _isatty(int file)
{
 801b394:	b480      	push	{r7}
 801b396:	b083      	sub	sp, #12
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801b39c:	2301      	movs	r3, #1
}
 801b39e:	4618      	mov	r0, r3
 801b3a0:	370c      	adds	r7, #12
 801b3a2:	46bd      	mov	sp, r7
 801b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a8:	4770      	bx	lr

0801b3aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801b3aa:	b480      	push	{r7}
 801b3ac:	b085      	sub	sp, #20
 801b3ae:	af00      	add	r7, sp, #0
 801b3b0:	60f8      	str	r0, [r7, #12]
 801b3b2:	60b9      	str	r1, [r7, #8]
 801b3b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801b3b6:	2300      	movs	r3, #0
}
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	3714      	adds	r7, #20
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c2:	4770      	bx	lr

0801b3c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	b086      	sub	sp, #24
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801b3cc:	4a14      	ldr	r2, [pc, #80]	@ (801b420 <_sbrk+0x5c>)
 801b3ce:	4b15      	ldr	r3, [pc, #84]	@ (801b424 <_sbrk+0x60>)
 801b3d0:	1ad3      	subs	r3, r2, r3
 801b3d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801b3d4:	697b      	ldr	r3, [r7, #20]
 801b3d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801b3d8:	4b13      	ldr	r3, [pc, #76]	@ (801b428 <_sbrk+0x64>)
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d102      	bne.n	801b3e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801b3e0:	4b11      	ldr	r3, [pc, #68]	@ (801b428 <_sbrk+0x64>)
 801b3e2:	4a12      	ldr	r2, [pc, #72]	@ (801b42c <_sbrk+0x68>)
 801b3e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801b3e6:	4b10      	ldr	r3, [pc, #64]	@ (801b428 <_sbrk+0x64>)
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	693a      	ldr	r2, [r7, #16]
 801b3f0:	429a      	cmp	r2, r3
 801b3f2:	d207      	bcs.n	801b404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801b3f4:	f009 fe48 	bl	8025088 <__errno>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	220c      	movs	r2, #12
 801b3fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801b3fe:	f04f 33ff 	mov.w	r3, #4294967295
 801b402:	e009      	b.n	801b418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801b404:	4b08      	ldr	r3, [pc, #32]	@ (801b428 <_sbrk+0x64>)
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801b40a:	4b07      	ldr	r3, [pc, #28]	@ (801b428 <_sbrk+0x64>)
 801b40c:	681a      	ldr	r2, [r3, #0]
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	4413      	add	r3, r2
 801b412:	4a05      	ldr	r2, [pc, #20]	@ (801b428 <_sbrk+0x64>)
 801b414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801b416:	68fb      	ldr	r3, [r7, #12]
}
 801b418:	4618      	mov	r0, r3
 801b41a:	3718      	adds	r7, #24
 801b41c:	46bd      	mov	sp, r7
 801b41e:	bd80      	pop	{r7, pc}
 801b420:	24080000 	.word	0x24080000
 801b424:	00000400 	.word	0x00000400
 801b428:	24003fcc 	.word	0x24003fcc
 801b42c:	24008b08 	.word	0x24008b08

0801b430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801b430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801b468 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801b434:	f7e5 fb78 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801b438:	480c      	ldr	r0, [pc, #48]	@ (801b46c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801b43a:	490d      	ldr	r1, [pc, #52]	@ (801b470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801b43c:	4a0d      	ldr	r2, [pc, #52]	@ (801b474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801b43e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801b440:	e002      	b.n	801b448 <LoopCopyDataInit>

0801b442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801b442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801b444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801b446:	3304      	adds	r3, #4

0801b448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801b448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801b44a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801b44c:	d3f9      	bcc.n	801b442 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801b44e:	4a0a      	ldr	r2, [pc, #40]	@ (801b478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801b450:	4c0a      	ldr	r4, [pc, #40]	@ (801b47c <LoopFillZerobss+0x22>)
  movs r3, #0
 801b452:	2300      	movs	r3, #0
  b LoopFillZerobss
 801b454:	e001      	b.n	801b45a <LoopFillZerobss>

0801b456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801b456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801b458:	3204      	adds	r2, #4

0801b45a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801b45a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801b45c:	d3fb      	bcc.n	801b456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801b45e:	f009 fe19 	bl	8025094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801b462:	f7e5 fdb7 	bl	8000fd4 <main>
  bx  lr
 801b466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801b468:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801b46c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801b470:	2400096c 	.word	0x2400096c
  ldr r2, =_sidata
 801b474:	080388bc 	.word	0x080388bc
  ldr r2, =_sbss
 801b478:	24000a30 	.word	0x24000a30
  ldr r4, =_ebss
 801b47c:	24008b08 	.word	0x24008b08

0801b480 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801b480:	e7fe      	b.n	801b480 <ADC3_IRQHandler>
	...

0801b484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b48a:	2003      	movs	r0, #3
 801b48c:	f000 f923 	bl	801b6d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b490:	f001 fdbc 	bl	801d00c <HAL_RCC_GetSysClockFreq>
 801b494:	4602      	mov	r2, r0
 801b496:	4b15      	ldr	r3, [pc, #84]	@ (801b4ec <HAL_Init+0x68>)
 801b498:	699b      	ldr	r3, [r3, #24]
 801b49a:	0a1b      	lsrs	r3, r3, #8
 801b49c:	f003 030f 	and.w	r3, r3, #15
 801b4a0:	4913      	ldr	r1, [pc, #76]	@ (801b4f0 <HAL_Init+0x6c>)
 801b4a2:	5ccb      	ldrb	r3, [r1, r3]
 801b4a4:	f003 031f 	and.w	r3, r3, #31
 801b4a8:	fa22 f303 	lsr.w	r3, r2, r3
 801b4ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b4ae:	4b0f      	ldr	r3, [pc, #60]	@ (801b4ec <HAL_Init+0x68>)
 801b4b0:	699b      	ldr	r3, [r3, #24]
 801b4b2:	f003 030f 	and.w	r3, r3, #15
 801b4b6:	4a0e      	ldr	r2, [pc, #56]	@ (801b4f0 <HAL_Init+0x6c>)
 801b4b8:	5cd3      	ldrb	r3, [r2, r3]
 801b4ba:	f003 031f 	and.w	r3, r3, #31
 801b4be:	687a      	ldr	r2, [r7, #4]
 801b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 801b4c4:	4a0b      	ldr	r2, [pc, #44]	@ (801b4f4 <HAL_Init+0x70>)
 801b4c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b4c8:	4a0b      	ldr	r2, [pc, #44]	@ (801b4f8 <HAL_Init+0x74>)
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801b4ce:	200f      	movs	r0, #15
 801b4d0:	f7ff fe72 	bl	801b1b8 <HAL_InitTick>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d001      	beq.n	801b4de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801b4da:	2301      	movs	r3, #1
 801b4dc:	e002      	b.n	801b4e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801b4de:	f7ff fc67 	bl	801adb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801b4e2:	2300      	movs	r3, #0
}
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3708      	adds	r7, #8
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bd80      	pop	{r7, pc}
 801b4ec:	58024400 	.word	0x58024400
 801b4f0:	0802bdbc 	.word	0x0802bdbc
 801b4f4:	24000004 	.word	0x24000004
 801b4f8:	24000000 	.word	0x24000000

0801b4fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b4fc:	b480      	push	{r7}
 801b4fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801b500:	4b06      	ldr	r3, [pc, #24]	@ (801b51c <HAL_IncTick+0x20>)
 801b502:	781b      	ldrb	r3, [r3, #0]
 801b504:	461a      	mov	r2, r3
 801b506:	4b06      	ldr	r3, [pc, #24]	@ (801b520 <HAL_IncTick+0x24>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	4413      	add	r3, r2
 801b50c:	4a04      	ldr	r2, [pc, #16]	@ (801b520 <HAL_IncTick+0x24>)
 801b50e:	6013      	str	r3, [r2, #0]
}
 801b510:	bf00      	nop
 801b512:	46bd      	mov	sp, r7
 801b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b518:	4770      	bx	lr
 801b51a:	bf00      	nop
 801b51c:	2400079c 	.word	0x2400079c
 801b520:	24003fd0 	.word	0x24003fd0

0801b524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b524:	b480      	push	{r7}
 801b526:	af00      	add	r7, sp, #0
  return uwTick;
 801b528:	4b03      	ldr	r3, [pc, #12]	@ (801b538 <HAL_GetTick+0x14>)
 801b52a:	681b      	ldr	r3, [r3, #0]
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	46bd      	mov	sp, r7
 801b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b534:	4770      	bx	lr
 801b536:	bf00      	nop
 801b538:	24003fd0 	.word	0x24003fd0

0801b53c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801b53c:	b480      	push	{r7}
 801b53e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801b540:	4b03      	ldr	r3, [pc, #12]	@ (801b550 <HAL_GetREVID+0x14>)
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	0c1b      	lsrs	r3, r3, #16
}
 801b546:	4618      	mov	r0, r3
 801b548:	46bd      	mov	sp, r7
 801b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b54e:	4770      	bx	lr
 801b550:	5c001000 	.word	0x5c001000

0801b554 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801b554:	b480      	push	{r7}
 801b556:	b083      	sub	sp, #12
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801b55c:	4b06      	ldr	r3, [pc, #24]	@ (801b578 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801b55e:	685b      	ldr	r3, [r3, #4]
 801b560:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801b564:	4904      	ldr	r1, [pc, #16]	@ (801b578 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	4313      	orrs	r3, r2
 801b56a:	604b      	str	r3, [r1, #4]
}
 801b56c:	bf00      	nop
 801b56e:	370c      	adds	r7, #12
 801b570:	46bd      	mov	sp, r7
 801b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b576:	4770      	bx	lr
 801b578:	58000400 	.word	0x58000400

0801b57c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b57c:	b480      	push	{r7}
 801b57e:	b085      	sub	sp, #20
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	f003 0307 	and.w	r3, r3, #7
 801b58a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b58c:	4b0b      	ldr	r3, [pc, #44]	@ (801b5bc <__NVIC_SetPriorityGrouping+0x40>)
 801b58e:	68db      	ldr	r3, [r3, #12]
 801b590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b592:	68ba      	ldr	r2, [r7, #8]
 801b594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801b598:	4013      	ands	r3, r2
 801b59a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b5a0:	68bb      	ldr	r3, [r7, #8]
 801b5a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801b5a4:	4b06      	ldr	r3, [pc, #24]	@ (801b5c0 <__NVIC_SetPriorityGrouping+0x44>)
 801b5a6:	4313      	orrs	r3, r2
 801b5a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b5aa:	4a04      	ldr	r2, [pc, #16]	@ (801b5bc <__NVIC_SetPriorityGrouping+0x40>)
 801b5ac:	68bb      	ldr	r3, [r7, #8]
 801b5ae:	60d3      	str	r3, [r2, #12]
}
 801b5b0:	bf00      	nop
 801b5b2:	3714      	adds	r7, #20
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ba:	4770      	bx	lr
 801b5bc:	e000ed00 	.word	0xe000ed00
 801b5c0:	05fa0000 	.word	0x05fa0000

0801b5c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b5c4:	b480      	push	{r7}
 801b5c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b5c8:	4b04      	ldr	r3, [pc, #16]	@ (801b5dc <__NVIC_GetPriorityGrouping+0x18>)
 801b5ca:	68db      	ldr	r3, [r3, #12]
 801b5cc:	0a1b      	lsrs	r3, r3, #8
 801b5ce:	f003 0307 	and.w	r3, r3, #7
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5da:	4770      	bx	lr
 801b5dc:	e000ed00 	.word	0xe000ed00

0801b5e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b5e0:	b480      	push	{r7}
 801b5e2:	b083      	sub	sp, #12
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b5ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	db0b      	blt.n	801b60a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b5f2:	88fb      	ldrh	r3, [r7, #6]
 801b5f4:	f003 021f 	and.w	r2, r3, #31
 801b5f8:	4907      	ldr	r1, [pc, #28]	@ (801b618 <__NVIC_EnableIRQ+0x38>)
 801b5fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b5fe:	095b      	lsrs	r3, r3, #5
 801b600:	2001      	movs	r0, #1
 801b602:	fa00 f202 	lsl.w	r2, r0, r2
 801b606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b60a:	bf00      	nop
 801b60c:	370c      	adds	r7, #12
 801b60e:	46bd      	mov	sp, r7
 801b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b614:	4770      	bx	lr
 801b616:	bf00      	nop
 801b618:	e000e100 	.word	0xe000e100

0801b61c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b61c:	b480      	push	{r7}
 801b61e:	b083      	sub	sp, #12
 801b620:	af00      	add	r7, sp, #0
 801b622:	4603      	mov	r3, r0
 801b624:	6039      	str	r1, [r7, #0]
 801b626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	db0a      	blt.n	801b646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	b2da      	uxtb	r2, r3
 801b634:	490c      	ldr	r1, [pc, #48]	@ (801b668 <__NVIC_SetPriority+0x4c>)
 801b636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b63a:	0112      	lsls	r2, r2, #4
 801b63c:	b2d2      	uxtb	r2, r2
 801b63e:	440b      	add	r3, r1
 801b640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b644:	e00a      	b.n	801b65c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	b2da      	uxtb	r2, r3
 801b64a:	4908      	ldr	r1, [pc, #32]	@ (801b66c <__NVIC_SetPriority+0x50>)
 801b64c:	88fb      	ldrh	r3, [r7, #6]
 801b64e:	f003 030f 	and.w	r3, r3, #15
 801b652:	3b04      	subs	r3, #4
 801b654:	0112      	lsls	r2, r2, #4
 801b656:	b2d2      	uxtb	r2, r2
 801b658:	440b      	add	r3, r1
 801b65a:	761a      	strb	r2, [r3, #24]
}
 801b65c:	bf00      	nop
 801b65e:	370c      	adds	r7, #12
 801b660:	46bd      	mov	sp, r7
 801b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b666:	4770      	bx	lr
 801b668:	e000e100 	.word	0xe000e100
 801b66c:	e000ed00 	.word	0xe000ed00

0801b670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b670:	b480      	push	{r7}
 801b672:	b089      	sub	sp, #36	@ 0x24
 801b674:	af00      	add	r7, sp, #0
 801b676:	60f8      	str	r0, [r7, #12]
 801b678:	60b9      	str	r1, [r7, #8]
 801b67a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	f003 0307 	and.w	r3, r3, #7
 801b682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b684:	69fb      	ldr	r3, [r7, #28]
 801b686:	f1c3 0307 	rsb	r3, r3, #7
 801b68a:	2b04      	cmp	r3, #4
 801b68c:	bf28      	it	cs
 801b68e:	2304      	movcs	r3, #4
 801b690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b692:	69fb      	ldr	r3, [r7, #28]
 801b694:	3304      	adds	r3, #4
 801b696:	2b06      	cmp	r3, #6
 801b698:	d902      	bls.n	801b6a0 <NVIC_EncodePriority+0x30>
 801b69a:	69fb      	ldr	r3, [r7, #28]
 801b69c:	3b03      	subs	r3, #3
 801b69e:	e000      	b.n	801b6a2 <NVIC_EncodePriority+0x32>
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 801b6a8:	69bb      	ldr	r3, [r7, #24]
 801b6aa:	fa02 f303 	lsl.w	r3, r2, r3
 801b6ae:	43da      	mvns	r2, r3
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	401a      	ands	r2, r3
 801b6b4:	697b      	ldr	r3, [r7, #20]
 801b6b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b6b8:	f04f 31ff 	mov.w	r1, #4294967295
 801b6bc:	697b      	ldr	r3, [r7, #20]
 801b6be:	fa01 f303 	lsl.w	r3, r1, r3
 801b6c2:	43d9      	mvns	r1, r3
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b6c8:	4313      	orrs	r3, r2
         );
}
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	3724      	adds	r7, #36	@ 0x24
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d4:	4770      	bx	lr

0801b6d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b6d6:	b580      	push	{r7, lr}
 801b6d8:	b082      	sub	sp, #8
 801b6da:	af00      	add	r7, sp, #0
 801b6dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b6de:	6878      	ldr	r0, [r7, #4]
 801b6e0:	f7ff ff4c 	bl	801b57c <__NVIC_SetPriorityGrouping>
}
 801b6e4:	bf00      	nop
 801b6e6:	3708      	adds	r7, #8
 801b6e8:	46bd      	mov	sp, r7
 801b6ea:	bd80      	pop	{r7, pc}

0801b6ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b6ec:	b580      	push	{r7, lr}
 801b6ee:	b086      	sub	sp, #24
 801b6f0:	af00      	add	r7, sp, #0
 801b6f2:	4603      	mov	r3, r0
 801b6f4:	60b9      	str	r1, [r7, #8]
 801b6f6:	607a      	str	r2, [r7, #4]
 801b6f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b6fa:	f7ff ff63 	bl	801b5c4 <__NVIC_GetPriorityGrouping>
 801b6fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b700:	687a      	ldr	r2, [r7, #4]
 801b702:	68b9      	ldr	r1, [r7, #8]
 801b704:	6978      	ldr	r0, [r7, #20]
 801b706:	f7ff ffb3 	bl	801b670 <NVIC_EncodePriority>
 801b70a:	4602      	mov	r2, r0
 801b70c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b710:	4611      	mov	r1, r2
 801b712:	4618      	mov	r0, r3
 801b714:	f7ff ff82 	bl	801b61c <__NVIC_SetPriority>
}
 801b718:	bf00      	nop
 801b71a:	3718      	adds	r7, #24
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd80      	pop	{r7, pc}

0801b720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	b082      	sub	sp, #8
 801b724:	af00      	add	r7, sp, #0
 801b726:	4603      	mov	r3, r0
 801b728:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b72a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b72e:	4618      	mov	r0, r3
 801b730:	f7ff ff56 	bl	801b5e0 <__NVIC_EnableIRQ>
}
 801b734:	bf00      	nop
 801b736:	3708      	adds	r7, #8
 801b738:	46bd      	mov	sp, r7
 801b73a:	bd80      	pop	{r7, pc}

0801b73c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801b73c:	b580      	push	{r7, lr}
 801b73e:	b084      	sub	sp, #16
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d101      	bne.n	801b74e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801b74a:	2301      	movs	r3, #1
 801b74c:	e0e3      	b.n	801b916 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b754:	2b00      	cmp	r3, #0
 801b756:	d106      	bne.n	801b766 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	2223      	movs	r2, #35	@ 0x23
 801b75c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801b760:	6878      	ldr	r0, [r7, #4]
 801b762:	f7ff fb43 	bl	801adec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b766:	4b6e      	ldr	r3, [pc, #440]	@ (801b920 <HAL_ETH_Init+0x1e4>)
 801b768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b76c:	4a6c      	ldr	r2, [pc, #432]	@ (801b920 <HAL_ETH_Init+0x1e4>)
 801b76e:	f043 0302 	orr.w	r3, r3, #2
 801b772:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801b776:	4b6a      	ldr	r3, [pc, #424]	@ (801b920 <HAL_ETH_Init+0x1e4>)
 801b778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b77c:	f003 0302 	and.w	r3, r3, #2
 801b780:	60bb      	str	r3, [r7, #8]
 801b782:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	7a1b      	ldrb	r3, [r3, #8]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d103      	bne.n	801b794 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 801b78c:	2000      	movs	r0, #0
 801b78e:	f7ff fee1 	bl	801b554 <HAL_SYSCFG_ETHInterfaceSelect>
 801b792:	e003      	b.n	801b79c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 801b794:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801b798:	f7ff fedc 	bl	801b554 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 801b79c:	4b61      	ldr	r3, [pc, #388]	@ (801b924 <HAL_ETH_Init+0x1e8>)
 801b79e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	687a      	ldr	r2, [r7, #4]
 801b7ac:	6812      	ldr	r2, [r2, #0]
 801b7ae:	f043 0301 	orr.w	r3, r3, #1
 801b7b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b7b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b7b8:	f7ff feb4 	bl	801b524 <HAL_GetTick>
 801b7bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801b7be:	e011      	b.n	801b7e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801b7c0:	f7ff feb0 	bl	801b524 <HAL_GetTick>
 801b7c4:	4602      	mov	r2, r0
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	1ad3      	subs	r3, r2, r3
 801b7ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801b7ce:	d909      	bls.n	801b7e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	2204      	movs	r2, #4
 801b7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	22e0      	movs	r2, #224	@ 0xe0
 801b7dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	e098      	b.n	801b916 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	f003 0301 	and.w	r3, r3, #1
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d1e4      	bne.n	801b7c0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 801b7f6:	6878      	ldr	r0, [r7, #4]
 801b7f8:	f000 f89e 	bl	801b938 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 801b7fc:	f001 fd80 	bl	801d300 <HAL_RCC_GetHCLKFreq>
 801b800:	4603      	mov	r3, r0
 801b802:	4a49      	ldr	r2, [pc, #292]	@ (801b928 <HAL_ETH_Init+0x1ec>)
 801b804:	fba2 2303 	umull	r2, r3, r2, r3
 801b808:	0c9a      	lsrs	r2, r3, #18
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	3a01      	subs	r2, #1
 801b810:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801b814:	6878      	ldr	r0, [r7, #4]
 801b816:	f000 fa81 	bl	801bd1c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b822:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801b826:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 801b82a:	687a      	ldr	r2, [r7, #4]
 801b82c:	6812      	ldr	r2, [r2, #0]
 801b82e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b832:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b836:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	695b      	ldr	r3, [r3, #20]
 801b83e:	f003 0303 	and.w	r3, r3, #3
 801b842:	2b00      	cmp	r3, #0
 801b844:	d009      	beq.n	801b85a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	2201      	movs	r2, #1
 801b84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	22e0      	movs	r2, #224	@ 0xe0
 801b852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 801b856:	2301      	movs	r3, #1
 801b858:	e05d      	b.n	801b916 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b862:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801b866:	4b31      	ldr	r3, [pc, #196]	@ (801b92c <HAL_ETH_Init+0x1f0>)
 801b868:	4013      	ands	r3, r2
 801b86a:	687a      	ldr	r2, [r7, #4]
 801b86c:	6952      	ldr	r2, [r2, #20]
 801b86e:	0051      	lsls	r1, r2, #1
 801b870:	687a      	ldr	r2, [r7, #4]
 801b872:	6812      	ldr	r2, [r2, #0]
 801b874:	430b      	orrs	r3, r1
 801b876:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b87a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801b87e:	6878      	ldr	r0, [r7, #4]
 801b880:	f000 fae9 	bl	801be56 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801b884:	6878      	ldr	r0, [r7, #4]
 801b886:	f000 fb2f 	bl	801bee8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	685b      	ldr	r3, [r3, #4]
 801b88e:	3305      	adds	r3, #5
 801b890:	781b      	ldrb	r3, [r3, #0]
 801b892:	021a      	lsls	r2, r3, #8
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	685b      	ldr	r3, [r3, #4]
 801b898:	3304      	adds	r3, #4
 801b89a:	781b      	ldrb	r3, [r3, #0]
 801b89c:	4619      	mov	r1, r3
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	430a      	orrs	r2, r1
 801b8a4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	685b      	ldr	r3, [r3, #4]
 801b8ac:	3303      	adds	r3, #3
 801b8ae:	781b      	ldrb	r3, [r3, #0]
 801b8b0:	061a      	lsls	r2, r3, #24
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	685b      	ldr	r3, [r3, #4]
 801b8b6:	3302      	adds	r3, #2
 801b8b8:	781b      	ldrb	r3, [r3, #0]
 801b8ba:	041b      	lsls	r3, r3, #16
 801b8bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	685b      	ldr	r3, [r3, #4]
 801b8c2:	3301      	adds	r3, #1
 801b8c4:	781b      	ldrb	r3, [r3, #0]
 801b8c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801b8c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	781b      	ldrb	r3, [r3, #0]
 801b8d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801b8d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801b8d8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	4b11      	ldr	r3, [pc, #68]	@ (801b930 <HAL_ETH_Init+0x1f4>)
 801b8ea:	430b      	orrs	r3, r1
 801b8ec:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	681a      	ldr	r2, [r3, #0]
 801b8fc:	4b0d      	ldr	r3, [pc, #52]	@ (801b934 <HAL_ETH_Init+0x1f8>)
 801b8fe:	430b      	orrs	r3, r1
 801b900:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	2200      	movs	r2, #0
 801b908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	2210      	movs	r2, #16
 801b910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b914:	2300      	movs	r3, #0
}
 801b916:	4618      	mov	r0, r3
 801b918:	3710      	adds	r7, #16
 801b91a:	46bd      	mov	sp, r7
 801b91c:	bd80      	pop	{r7, pc}
 801b91e:	bf00      	nop
 801b920:	58024400 	.word	0x58024400
 801b924:	58000400 	.word	0x58000400
 801b928:	431bde83 	.word	0x431bde83
 801b92c:	ffff8001 	.word	0xffff8001
 801b930:	0c020060 	.word	0x0c020060
 801b934:	0c20c000 	.word	0x0c20c000

0801b938 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801b938:	b580      	push	{r7, lr}
 801b93a:	b084      	sub	sp, #16
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801b948:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801b950:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801b952:	f001 fcd5 	bl	801d300 <HAL_RCC_GetHCLKFreq>
 801b956:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	4a1a      	ldr	r2, [pc, #104]	@ (801b9c4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 801b95c:	4293      	cmp	r3, r2
 801b95e:	d804      	bhi.n	801b96a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801b966:	60fb      	str	r3, [r7, #12]
 801b968:	e022      	b.n	801b9b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	4a16      	ldr	r2, [pc, #88]	@ (801b9c8 <HAL_ETH_SetMDIOClockRange+0x90>)
 801b96e:	4293      	cmp	r3, r2
 801b970:	d204      	bcs.n	801b97c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801b978:	60fb      	str	r3, [r7, #12]
 801b97a:	e019      	b.n	801b9b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 801b97c:	68bb      	ldr	r3, [r7, #8]
 801b97e:	4a13      	ldr	r2, [pc, #76]	@ (801b9cc <HAL_ETH_SetMDIOClockRange+0x94>)
 801b980:	4293      	cmp	r3, r2
 801b982:	d915      	bls.n	801b9b0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	4a12      	ldr	r2, [pc, #72]	@ (801b9d0 <HAL_ETH_SetMDIOClockRange+0x98>)
 801b988:	4293      	cmp	r3, r2
 801b98a:	d804      	bhi.n	801b996 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b992:	60fb      	str	r3, [r7, #12]
 801b994:	e00c      	b.n	801b9b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 801b996:	68bb      	ldr	r3, [r7, #8]
 801b998:	4a0e      	ldr	r2, [pc, #56]	@ (801b9d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d804      	bhi.n	801b9a8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801b9a4:	60fb      	str	r3, [r7, #12]
 801b9a6:	e003      	b.n	801b9b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801b9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	68fa      	ldr	r2, [r7, #12]
 801b9b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 801b9ba:	bf00      	nop
 801b9bc:	3710      	adds	r7, #16
 801b9be:	46bd      	mov	sp, r7
 801b9c0:	bd80      	pop	{r7, pc}
 801b9c2:	bf00      	nop
 801b9c4:	02160ebf 	.word	0x02160ebf
 801b9c8:	03938700 	.word	0x03938700
 801b9cc:	05f5e0ff 	.word	0x05f5e0ff
 801b9d0:	08f0d17f 	.word	0x08f0d17f
 801b9d4:	0ee6b27f 	.word	0x0ee6b27f

0801b9d8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 801b9d8:	b480      	push	{r7}
 801b9da:	b085      	sub	sp, #20
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
 801b9e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 801b9e2:	683b      	ldr	r3, [r7, #0]
 801b9e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 801b9e6:	683b      	ldr	r3, [r7, #0]
 801b9e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 801b9ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	791b      	ldrb	r3, [r3, #4]
 801b9f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 801b9f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801b9f4:	683b      	ldr	r3, [r7, #0]
 801b9f6:	7b1b      	ldrb	r3, [r3, #12]
 801b9f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801b9fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801b9fc:	683b      	ldr	r3, [r7, #0]
 801b9fe:	7b5b      	ldrb	r3, [r3, #13]
 801ba00:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801ba02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801ba04:	683b      	ldr	r3, [r7, #0]
 801ba06:	7b9b      	ldrb	r3, [r3, #14]
 801ba08:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801ba0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801ba0c:	683b      	ldr	r3, [r7, #0]
 801ba0e:	7bdb      	ldrb	r3, [r3, #15]
 801ba10:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801ba12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801ba14:	683a      	ldr	r2, [r7, #0]
 801ba16:	7c12      	ldrb	r2, [r2, #16]
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	d102      	bne.n	801ba22 <ETH_SetMACConfig+0x4a>
 801ba1c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801ba20:	e000      	b.n	801ba24 <ETH_SetMACConfig+0x4c>
 801ba22:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801ba24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801ba26:	683a      	ldr	r2, [r7, #0]
 801ba28:	7c52      	ldrb	r2, [r2, #17]
 801ba2a:	2a00      	cmp	r2, #0
 801ba2c:	d102      	bne.n	801ba34 <ETH_SetMACConfig+0x5c>
 801ba2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801ba32:	e000      	b.n	801ba36 <ETH_SetMACConfig+0x5e>
 801ba34:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801ba36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 801ba38:	683b      	ldr	r3, [r7, #0]
 801ba3a:	7c9b      	ldrb	r3, [r3, #18]
 801ba3c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801ba3e:	431a      	orrs	r2, r3
               macconf->Speed |
 801ba40:	683b      	ldr	r3, [r7, #0]
 801ba42:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 801ba44:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 801ba46:	683b      	ldr	r3, [r7, #0]
 801ba48:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 801ba4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 801ba4c:	683b      	ldr	r3, [r7, #0]
 801ba4e:	7f1b      	ldrb	r3, [r3, #28]
 801ba50:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 801ba52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801ba54:	683b      	ldr	r3, [r7, #0]
 801ba56:	7f5b      	ldrb	r3, [r3, #29]
 801ba58:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 801ba5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801ba5c:	683a      	ldr	r2, [r7, #0]
 801ba5e:	7f92      	ldrb	r2, [r2, #30]
 801ba60:	2a00      	cmp	r2, #0
 801ba62:	d102      	bne.n	801ba6a <ETH_SetMACConfig+0x92>
 801ba64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ba68:	e000      	b.n	801ba6c <ETH_SetMACConfig+0x94>
 801ba6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801ba6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801ba6e:	683b      	ldr	r3, [r7, #0]
 801ba70:	7fdb      	ldrb	r3, [r3, #31]
 801ba72:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801ba74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801ba76:	683a      	ldr	r2, [r7, #0]
 801ba78:	f892 2020 	ldrb.w	r2, [r2, #32]
 801ba7c:	2a00      	cmp	r2, #0
 801ba7e:	d102      	bne.n	801ba86 <ETH_SetMACConfig+0xae>
 801ba80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ba84:	e000      	b.n	801ba88 <ETH_SetMACConfig+0xb0>
 801ba86:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801ba88:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 801ba8a:	683b      	ldr	r3, [r7, #0]
 801ba8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801ba8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 801ba90:	683b      	ldr	r3, [r7, #0]
 801ba92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ba96:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 801ba98:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 801ba9e:	4313      	orrs	r3, r2
 801baa0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	681a      	ldr	r2, [r3, #0]
 801baa8:	4b56      	ldr	r3, [pc, #344]	@ (801bc04 <ETH_SetMACConfig+0x22c>)
 801baaa:	4013      	ands	r3, r2
 801baac:	687a      	ldr	r2, [r7, #4]
 801baae:	6812      	ldr	r2, [r2, #0]
 801bab0:	68f9      	ldr	r1, [r7, #12]
 801bab2:	430b      	orrs	r3, r1
 801bab4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801bab6:	683b      	ldr	r3, [r7, #0]
 801bab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801baba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801babc:	683b      	ldr	r3, [r7, #0]
 801babe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801bac2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801bac4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801bac6:	683b      	ldr	r3, [r7, #0]
 801bac8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bacc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801bace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bad6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801bad8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801bada:	683a      	ldr	r2, [r7, #0]
 801badc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 801bae0:	2a00      	cmp	r2, #0
 801bae2:	d102      	bne.n	801baea <ETH_SetMACConfig+0x112>
 801bae4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801bae8:	e000      	b.n	801baec <ETH_SetMACConfig+0x114>
 801baea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801baec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 801baee:	683b      	ldr	r3, [r7, #0]
 801baf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801baf2:	4313      	orrs	r3, r2
 801baf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	685a      	ldr	r2, [r3, #4]
 801bafc:	4b42      	ldr	r3, [pc, #264]	@ (801bc08 <ETH_SetMACConfig+0x230>)
 801bafe:	4013      	ands	r3, r2
 801bb00:	687a      	ldr	r2, [r7, #4]
 801bb02:	6812      	ldr	r2, [r2, #0]
 801bb04:	68f9      	ldr	r1, [r7, #12]
 801bb06:	430b      	orrs	r3, r1
 801bb08:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bb10:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 801bb12:	683b      	ldr	r3, [r7, #0]
 801bb14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801bb16:	4313      	orrs	r3, r2
 801bb18:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	68da      	ldr	r2, [r3, #12]
 801bb20:	4b3a      	ldr	r3, [pc, #232]	@ (801bc0c <ETH_SetMACConfig+0x234>)
 801bb22:	4013      	ands	r3, r2
 801bb24:	687a      	ldr	r2, [r7, #4]
 801bb26:	6812      	ldr	r2, [r2, #0]
 801bb28:	68f9      	ldr	r1, [r7, #12]
 801bb2a:	430b      	orrs	r3, r1
 801bb2c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801bb2e:	683b      	ldr	r3, [r7, #0]
 801bb30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801bb34:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 801bb36:	683b      	ldr	r3, [r7, #0]
 801bb38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801bb3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801bb3c:	683a      	ldr	r2, [r7, #0]
 801bb3e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 801bb42:	2a00      	cmp	r2, #0
 801bb44:	d101      	bne.n	801bb4a <ETH_SetMACConfig+0x172>
 801bb46:	2280      	movs	r2, #128	@ 0x80
 801bb48:	e000      	b.n	801bb4c <ETH_SetMACConfig+0x174>
 801bb4a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 801bb4c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 801bb4e:	683b      	ldr	r3, [r7, #0]
 801bb50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bb52:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801bb54:	4313      	orrs	r3, r2
 801bb56:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801bb5e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 801bb62:	4013      	ands	r3, r2
 801bb64:	687a      	ldr	r2, [r7, #4]
 801bb66:	6812      	ldr	r2, [r2, #0]
 801bb68:	68f9      	ldr	r1, [r7, #12]
 801bb6a:	430b      	orrs	r3, r1
 801bb6c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801bb6e:	683b      	ldr	r3, [r7, #0]
 801bb70:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801bb74:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801bb7c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801bb7e:	4313      	orrs	r3, r2
 801bb80:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801bb8a:	f023 0103 	bic.w	r1, r3, #3
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	68fa      	ldr	r2, [r7, #12]
 801bb94:	430a      	orrs	r2, r1
 801bb96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 801bba2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801bba6:	683b      	ldr	r3, [r7, #0]
 801bba8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	430a      	orrs	r2, r1
 801bbb0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 801bbb4:	683b      	ldr	r3, [r7, #0]
 801bbb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801bbb8:	683a      	ldr	r2, [r7, #0]
 801bbba:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801bbbe:	2a00      	cmp	r2, #0
 801bbc0:	d101      	bne.n	801bbc6 <ETH_SetMACConfig+0x1ee>
 801bbc2:	2240      	movs	r2, #64	@ 0x40
 801bbc4:	e000      	b.n	801bbc8 <ETH_SetMACConfig+0x1f0>
 801bbc6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 801bbc8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 801bbd0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801bbd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 801bbd4:	683b      	ldr	r3, [r7, #0]
 801bbd6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801bbda:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 801bbdc:	4313      	orrs	r3, r2
 801bbde:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801bbe8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	68fa      	ldr	r2, [r7, #12]
 801bbf2:	430a      	orrs	r2, r1
 801bbf4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 801bbf8:	bf00      	nop
 801bbfa:	3714      	adds	r7, #20
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc02:	4770      	bx	lr
 801bc04:	00048083 	.word	0x00048083
 801bc08:	c0f88000 	.word	0xc0f88000
 801bc0c:	fffffef0 	.word	0xfffffef0

0801bc10 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 801bc10:	b480      	push	{r7}
 801bc12:	b085      	sub	sp, #20
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
 801bc18:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bc22:	681a      	ldr	r2, [r3, #0]
 801bc24:	4b38      	ldr	r3, [pc, #224]	@ (801bd08 <ETH_SetDMAConfig+0xf8>)
 801bc26:	4013      	ands	r3, r2
 801bc28:	683a      	ldr	r2, [r7, #0]
 801bc2a:	6811      	ldr	r1, [r2, #0]
 801bc2c:	687a      	ldr	r2, [r7, #4]
 801bc2e:	6812      	ldr	r2, [r2, #0]
 801bc30:	430b      	orrs	r3, r1
 801bc32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bc36:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801bc38:	683b      	ldr	r3, [r7, #0]
 801bc3a:	791b      	ldrb	r3, [r3, #4]
 801bc3c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801bc42:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 801bc44:	683b      	ldr	r3, [r7, #0]
 801bc46:	7b1b      	ldrb	r3, [r3, #12]
 801bc48:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801bc4a:	4313      	orrs	r3, r2
 801bc4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bc56:	685a      	ldr	r2, [r3, #4]
 801bc58:	4b2c      	ldr	r3, [pc, #176]	@ (801bd0c <ETH_SetDMAConfig+0xfc>)
 801bc5a:	4013      	ands	r3, r2
 801bc5c:	687a      	ldr	r2, [r7, #4]
 801bc5e:	6812      	ldr	r2, [r2, #0]
 801bc60:	68f9      	ldr	r1, [r7, #12]
 801bc62:	430b      	orrs	r3, r1
 801bc64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bc68:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801bc6a:	683b      	ldr	r3, [r7, #0]
 801bc6c:	7b5b      	ldrb	r3, [r3, #13]
 801bc6e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 801bc70:	683b      	ldr	r3, [r7, #0]
 801bc72:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801bc74:	4313      	orrs	r3, r2
 801bc76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bc80:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801bc84:	4b22      	ldr	r3, [pc, #136]	@ (801bd10 <ETH_SetDMAConfig+0x100>)
 801bc86:	4013      	ands	r3, r2
 801bc88:	687a      	ldr	r2, [r7, #4]
 801bc8a:	6812      	ldr	r2, [r2, #0]
 801bc8c:	68f9      	ldr	r1, [r7, #12]
 801bc8e:	430b      	orrs	r3, r1
 801bc90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bc94:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 801bc9c:	683b      	ldr	r3, [r7, #0]
 801bc9e:	7d1b      	ldrb	r3, [r3, #20]
 801bca0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 801bca2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 801bca4:	683b      	ldr	r3, [r7, #0]
 801bca6:	7f5b      	ldrb	r3, [r3, #29]
 801bca8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 801bcaa:	4313      	orrs	r3, r2
 801bcac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bcb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801bcba:	4b16      	ldr	r3, [pc, #88]	@ (801bd14 <ETH_SetDMAConfig+0x104>)
 801bcbc:	4013      	ands	r3, r2
 801bcbe:	687a      	ldr	r2, [r7, #4]
 801bcc0:	6812      	ldr	r2, [r2, #0]
 801bcc2:	68f9      	ldr	r1, [r7, #12]
 801bcc4:	430b      	orrs	r3, r1
 801bcc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bcca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	7f1b      	ldrb	r3, [r3, #28]
 801bcd2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 801bcd4:	683b      	ldr	r3, [r7, #0]
 801bcd6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801bcd8:	4313      	orrs	r3, r2
 801bcda:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bce4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801bce8:	4b0b      	ldr	r3, [pc, #44]	@ (801bd18 <ETH_SetDMAConfig+0x108>)
 801bcea:	4013      	ands	r3, r2
 801bcec:	687a      	ldr	r2, [r7, #4]
 801bcee:	6812      	ldr	r2, [r2, #0]
 801bcf0:	68f9      	ldr	r1, [r7, #12]
 801bcf2:	430b      	orrs	r3, r1
 801bcf4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bcf8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 801bcfc:	bf00      	nop
 801bcfe:	3714      	adds	r7, #20
 801bd00:	46bd      	mov	sp, r7
 801bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd06:	4770      	bx	lr
 801bd08:	ffff87fd 	.word	0xffff87fd
 801bd0c:	ffff2ffe 	.word	0xffff2ffe
 801bd10:	fffec000 	.word	0xfffec000
 801bd14:	ffc0efef 	.word	0xffc0efef
 801bd18:	7fc0ffff 	.word	0x7fc0ffff

0801bd1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b0a4      	sub	sp, #144	@ 0x90
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801bd24:	2301      	movs	r3, #1
 801bd26:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801bd2e:	2300      	movs	r3, #0
 801bd30:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801bd34:	2300      	movs	r3, #0
 801bd36:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 801bd3a:	2301      	movs	r3, #1
 801bd3c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801bd40:	2301      	movs	r3, #1
 801bd42:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 801bd46:	2301      	movs	r3, #1
 801bd48:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801bd52:	2301      	movs	r3, #1
 801bd54:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801bd58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801bd5c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801bd5e:	2300      	movs	r3, #0
 801bd60:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 801bd64:	2300      	movs	r3, #0
 801bd66:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801bd68:	2300      	movs	r3, #0
 801bd6a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 801bd74:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801bd78:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801bd80:	2300      	movs	r3, #0
 801bd82:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 801bd84:	2301      	movs	r3, #1
 801bd86:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 801bd90:	2300      	movs	r3, #0
 801bd92:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801bd96:	2300      	movs	r3, #0
 801bd98:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801bd9e:	2300      	movs	r3, #0
 801bda0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 801bda2:	2300      	movs	r3, #0
 801bda4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801bda8:	2300      	movs	r3, #0
 801bdaa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 801bdae:	2301      	movs	r3, #1
 801bdb0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801bdb4:	2320      	movs	r3, #32
 801bdb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 801bdba:	2301      	movs	r3, #1
 801bdbc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801bdc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801bdca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 801bdcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801bdd0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801bdd8:	2302      	movs	r3, #2
 801bdda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 801bdde:	2300      	movs	r3, #0
 801bde0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801bde4:	2300      	movs	r3, #0
 801bde6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801bdea:	2300      	movs	r3, #0
 801bdec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 801bdf0:	2301      	movs	r3, #1
 801bdf2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 801bdfa:	2301      	movs	r3, #1
 801bdfc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801be00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801be04:	4619      	mov	r1, r3
 801be06:	6878      	ldr	r0, [r7, #4]
 801be08:	f7ff fde6 	bl	801b9d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801be0c:	2301      	movs	r3, #1
 801be0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801be10:	2301      	movs	r3, #1
 801be12:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801be14:	2300      	movs	r3, #0
 801be16:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 801be18:	2300      	movs	r3, #0
 801be1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 801be1e:	2300      	movs	r3, #0
 801be20:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801be22:	2300      	movs	r3, #0
 801be24:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801be26:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801be2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 801be2c:	2300      	movs	r3, #0
 801be2e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801be30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801be34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 801be36:	2300      	movs	r3, #0
 801be38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 801be3c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801be40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801be42:	f107 0308 	add.w	r3, r7, #8
 801be46:	4619      	mov	r1, r3
 801be48:	6878      	ldr	r0, [r7, #4]
 801be4a:	f7ff fee1 	bl	801bc10 <ETH_SetDMAConfig>
}
 801be4e:	bf00      	nop
 801be50:	3790      	adds	r7, #144	@ 0x90
 801be52:	46bd      	mov	sp, r7
 801be54:	bd80      	pop	{r7, pc}

0801be56 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801be56:	b480      	push	{r7}
 801be58:	b085      	sub	sp, #20
 801be5a:	af00      	add	r7, sp, #0
 801be5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801be5e:	2300      	movs	r3, #0
 801be60:	60fb      	str	r3, [r7, #12]
 801be62:	e01d      	b.n	801bea0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	68d9      	ldr	r1, [r3, #12]
 801be68:	68fa      	ldr	r2, [r7, #12]
 801be6a:	4613      	mov	r3, r2
 801be6c:	005b      	lsls	r3, r3, #1
 801be6e:	4413      	add	r3, r2
 801be70:	00db      	lsls	r3, r3, #3
 801be72:	440b      	add	r3, r1
 801be74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 801be76:	68bb      	ldr	r3, [r7, #8]
 801be78:	2200      	movs	r2, #0
 801be7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 801be7c:	68bb      	ldr	r3, [r7, #8]
 801be7e:	2200      	movs	r2, #0
 801be80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 801be82:	68bb      	ldr	r3, [r7, #8]
 801be84:	2200      	movs	r2, #0
 801be86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	2200      	movs	r2, #0
 801be8c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801be8e:	68b9      	ldr	r1, [r7, #8]
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	68fa      	ldr	r2, [r7, #12]
 801be94:	3206      	adds	r2, #6
 801be96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	3301      	adds	r3, #1
 801be9e:	60fb      	str	r3, [r7, #12]
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	2b03      	cmp	r3, #3
 801bea4:	d9de      	bls.n	801be64 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	2200      	movs	r2, #0
 801beaa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801beb4:	461a      	mov	r2, r3
 801beb6:	2303      	movs	r3, #3
 801beb8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	68da      	ldr	r2, [r3, #12]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bec8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	68da      	ldr	r2, [r3, #12]
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bed8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 801bedc:	bf00      	nop
 801bede:	3714      	adds	r7, #20
 801bee0:	46bd      	mov	sp, r7
 801bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee6:	4770      	bx	lr

0801bee8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801bee8:	b480      	push	{r7}
 801beea:	b085      	sub	sp, #20
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801bef0:	2300      	movs	r3, #0
 801bef2:	60fb      	str	r3, [r7, #12]
 801bef4:	e023      	b.n	801bf3e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	6919      	ldr	r1, [r3, #16]
 801befa:	68fa      	ldr	r2, [r7, #12]
 801befc:	4613      	mov	r3, r2
 801befe:	005b      	lsls	r3, r3, #1
 801bf00:	4413      	add	r3, r2
 801bf02:	00db      	lsls	r3, r3, #3
 801bf04:	440b      	add	r3, r1
 801bf06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 801bf08:	68bb      	ldr	r3, [r7, #8]
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 801bf0e:	68bb      	ldr	r3, [r7, #8]
 801bf10:	2200      	movs	r2, #0
 801bf12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 801bf14:	68bb      	ldr	r3, [r7, #8]
 801bf16:	2200      	movs	r2, #0
 801bf18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 801bf1a:	68bb      	ldr	r3, [r7, #8]
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 801bf20:	68bb      	ldr	r3, [r7, #8]
 801bf22:	2200      	movs	r2, #0
 801bf24:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 801bf26:	68bb      	ldr	r3, [r7, #8]
 801bf28:	2200      	movs	r2, #0
 801bf2a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801bf2c:	68b9      	ldr	r1, [r7, #8]
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	68fa      	ldr	r2, [r7, #12]
 801bf32:	3212      	adds	r2, #18
 801bf34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	3301      	adds	r3, #1
 801bf3c:	60fb      	str	r3, [r7, #12]
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	2b03      	cmp	r3, #3
 801bf42:	d9d8      	bls.n	801bef6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	2200      	movs	r2, #0
 801bf48:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2200      	movs	r2, #0
 801bf54:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2200      	movs	r2, #0
 801bf5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	2200      	movs	r2, #0
 801bf60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf6a:	461a      	mov	r2, r3
 801bf6c:	2303      	movs	r3, #3
 801bf6e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	691a      	ldr	r2, [r3, #16]
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf7e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	691b      	ldr	r3, [r3, #16]
 801bf86:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf92:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 801bf96:	bf00      	nop
 801bf98:	3714      	adds	r7, #20
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfa0:	4770      	bx	lr
	...

0801bfa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bfa4:	b480      	push	{r7}
 801bfa6:	b089      	sub	sp, #36	@ 0x24
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
 801bfac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bfae:	2300      	movs	r3, #0
 801bfb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801bfb2:	4b89      	ldr	r3, [pc, #548]	@ (801c1d8 <HAL_GPIO_Init+0x234>)
 801bfb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801bfb6:	e194      	b.n	801c2e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	681a      	ldr	r2, [r3, #0]
 801bfbc:	2101      	movs	r1, #1
 801bfbe:	69fb      	ldr	r3, [r7, #28]
 801bfc0:	fa01 f303 	lsl.w	r3, r1, r3
 801bfc4:	4013      	ands	r3, r2
 801bfc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801bfc8:	693b      	ldr	r3, [r7, #16]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	f000 8186 	beq.w	801c2dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bfd0:	683b      	ldr	r3, [r7, #0]
 801bfd2:	685b      	ldr	r3, [r3, #4]
 801bfd4:	f003 0303 	and.w	r3, r3, #3
 801bfd8:	2b01      	cmp	r3, #1
 801bfda:	d005      	beq.n	801bfe8 <HAL_GPIO_Init+0x44>
 801bfdc:	683b      	ldr	r3, [r7, #0]
 801bfde:	685b      	ldr	r3, [r3, #4]
 801bfe0:	f003 0303 	and.w	r3, r3, #3
 801bfe4:	2b02      	cmp	r3, #2
 801bfe6:	d130      	bne.n	801c04a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	689b      	ldr	r3, [r3, #8]
 801bfec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bfee:	69fb      	ldr	r3, [r7, #28]
 801bff0:	005b      	lsls	r3, r3, #1
 801bff2:	2203      	movs	r2, #3
 801bff4:	fa02 f303 	lsl.w	r3, r2, r3
 801bff8:	43db      	mvns	r3, r3
 801bffa:	69ba      	ldr	r2, [r7, #24]
 801bffc:	4013      	ands	r3, r2
 801bffe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c000:	683b      	ldr	r3, [r7, #0]
 801c002:	68da      	ldr	r2, [r3, #12]
 801c004:	69fb      	ldr	r3, [r7, #28]
 801c006:	005b      	lsls	r3, r3, #1
 801c008:	fa02 f303 	lsl.w	r3, r2, r3
 801c00c:	69ba      	ldr	r2, [r7, #24]
 801c00e:	4313      	orrs	r3, r2
 801c010:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	69ba      	ldr	r2, [r7, #24]
 801c016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	685b      	ldr	r3, [r3, #4]
 801c01c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c01e:	2201      	movs	r2, #1
 801c020:	69fb      	ldr	r3, [r7, #28]
 801c022:	fa02 f303 	lsl.w	r3, r2, r3
 801c026:	43db      	mvns	r3, r3
 801c028:	69ba      	ldr	r2, [r7, #24]
 801c02a:	4013      	ands	r3, r2
 801c02c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c02e:	683b      	ldr	r3, [r7, #0]
 801c030:	685b      	ldr	r3, [r3, #4]
 801c032:	091b      	lsrs	r3, r3, #4
 801c034:	f003 0201 	and.w	r2, r3, #1
 801c038:	69fb      	ldr	r3, [r7, #28]
 801c03a:	fa02 f303 	lsl.w	r3, r2, r3
 801c03e:	69ba      	ldr	r2, [r7, #24]
 801c040:	4313      	orrs	r3, r2
 801c042:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	69ba      	ldr	r2, [r7, #24]
 801c048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c04a:	683b      	ldr	r3, [r7, #0]
 801c04c:	685b      	ldr	r3, [r3, #4]
 801c04e:	f003 0303 	and.w	r3, r3, #3
 801c052:	2b03      	cmp	r3, #3
 801c054:	d017      	beq.n	801c086 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	68db      	ldr	r3, [r3, #12]
 801c05a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c05c:	69fb      	ldr	r3, [r7, #28]
 801c05e:	005b      	lsls	r3, r3, #1
 801c060:	2203      	movs	r2, #3
 801c062:	fa02 f303 	lsl.w	r3, r2, r3
 801c066:	43db      	mvns	r3, r3
 801c068:	69ba      	ldr	r2, [r7, #24]
 801c06a:	4013      	ands	r3, r2
 801c06c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c06e:	683b      	ldr	r3, [r7, #0]
 801c070:	689a      	ldr	r2, [r3, #8]
 801c072:	69fb      	ldr	r3, [r7, #28]
 801c074:	005b      	lsls	r3, r3, #1
 801c076:	fa02 f303 	lsl.w	r3, r2, r3
 801c07a:	69ba      	ldr	r2, [r7, #24]
 801c07c:	4313      	orrs	r3, r2
 801c07e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	69ba      	ldr	r2, [r7, #24]
 801c084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	f003 0303 	and.w	r3, r3, #3
 801c08e:	2b02      	cmp	r3, #2
 801c090:	d123      	bne.n	801c0da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c092:	69fb      	ldr	r3, [r7, #28]
 801c094:	08da      	lsrs	r2, r3, #3
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	3208      	adds	r2, #8
 801c09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c09e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c0a0:	69fb      	ldr	r3, [r7, #28]
 801c0a2:	f003 0307 	and.w	r3, r3, #7
 801c0a6:	009b      	lsls	r3, r3, #2
 801c0a8:	220f      	movs	r2, #15
 801c0aa:	fa02 f303 	lsl.w	r3, r2, r3
 801c0ae:	43db      	mvns	r3, r3
 801c0b0:	69ba      	ldr	r2, [r7, #24]
 801c0b2:	4013      	ands	r3, r2
 801c0b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	691a      	ldr	r2, [r3, #16]
 801c0ba:	69fb      	ldr	r3, [r7, #28]
 801c0bc:	f003 0307 	and.w	r3, r3, #7
 801c0c0:	009b      	lsls	r3, r3, #2
 801c0c2:	fa02 f303 	lsl.w	r3, r2, r3
 801c0c6:	69ba      	ldr	r2, [r7, #24]
 801c0c8:	4313      	orrs	r3, r2
 801c0ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c0cc:	69fb      	ldr	r3, [r7, #28]
 801c0ce:	08da      	lsrs	r2, r3, #3
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	3208      	adds	r2, #8
 801c0d4:	69b9      	ldr	r1, [r7, #24]
 801c0d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c0e0:	69fb      	ldr	r3, [r7, #28]
 801c0e2:	005b      	lsls	r3, r3, #1
 801c0e4:	2203      	movs	r2, #3
 801c0e6:	fa02 f303 	lsl.w	r3, r2, r3
 801c0ea:	43db      	mvns	r3, r3
 801c0ec:	69ba      	ldr	r2, [r7, #24]
 801c0ee:	4013      	ands	r3, r2
 801c0f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c0f2:	683b      	ldr	r3, [r7, #0]
 801c0f4:	685b      	ldr	r3, [r3, #4]
 801c0f6:	f003 0203 	and.w	r2, r3, #3
 801c0fa:	69fb      	ldr	r3, [r7, #28]
 801c0fc:	005b      	lsls	r3, r3, #1
 801c0fe:	fa02 f303 	lsl.w	r3, r2, r3
 801c102:	69ba      	ldr	r2, [r7, #24]
 801c104:	4313      	orrs	r3, r2
 801c106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	69ba      	ldr	r2, [r7, #24]
 801c10c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c116:	2b00      	cmp	r3, #0
 801c118:	f000 80e0 	beq.w	801c2dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c11c:	4b2f      	ldr	r3, [pc, #188]	@ (801c1dc <HAL_GPIO_Init+0x238>)
 801c11e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c122:	4a2e      	ldr	r2, [pc, #184]	@ (801c1dc <HAL_GPIO_Init+0x238>)
 801c124:	f043 0302 	orr.w	r3, r3, #2
 801c128:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c12c:	4b2b      	ldr	r3, [pc, #172]	@ (801c1dc <HAL_GPIO_Init+0x238>)
 801c12e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c132:	f003 0302 	and.w	r3, r3, #2
 801c136:	60fb      	str	r3, [r7, #12]
 801c138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c13a:	4a29      	ldr	r2, [pc, #164]	@ (801c1e0 <HAL_GPIO_Init+0x23c>)
 801c13c:	69fb      	ldr	r3, [r7, #28]
 801c13e:	089b      	lsrs	r3, r3, #2
 801c140:	3302      	adds	r3, #2
 801c142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c148:	69fb      	ldr	r3, [r7, #28]
 801c14a:	f003 0303 	and.w	r3, r3, #3
 801c14e:	009b      	lsls	r3, r3, #2
 801c150:	220f      	movs	r2, #15
 801c152:	fa02 f303 	lsl.w	r3, r2, r3
 801c156:	43db      	mvns	r3, r3
 801c158:	69ba      	ldr	r2, [r7, #24]
 801c15a:	4013      	ands	r3, r2
 801c15c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	4a20      	ldr	r2, [pc, #128]	@ (801c1e4 <HAL_GPIO_Init+0x240>)
 801c162:	4293      	cmp	r3, r2
 801c164:	d052      	beq.n	801c20c <HAL_GPIO_Init+0x268>
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	4a1f      	ldr	r2, [pc, #124]	@ (801c1e8 <HAL_GPIO_Init+0x244>)
 801c16a:	4293      	cmp	r3, r2
 801c16c:	d031      	beq.n	801c1d2 <HAL_GPIO_Init+0x22e>
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	4a1e      	ldr	r2, [pc, #120]	@ (801c1ec <HAL_GPIO_Init+0x248>)
 801c172:	4293      	cmp	r3, r2
 801c174:	d02b      	beq.n	801c1ce <HAL_GPIO_Init+0x22a>
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	4a1d      	ldr	r2, [pc, #116]	@ (801c1f0 <HAL_GPIO_Init+0x24c>)
 801c17a:	4293      	cmp	r3, r2
 801c17c:	d025      	beq.n	801c1ca <HAL_GPIO_Init+0x226>
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	4a1c      	ldr	r2, [pc, #112]	@ (801c1f4 <HAL_GPIO_Init+0x250>)
 801c182:	4293      	cmp	r3, r2
 801c184:	d01f      	beq.n	801c1c6 <HAL_GPIO_Init+0x222>
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	4a1b      	ldr	r2, [pc, #108]	@ (801c1f8 <HAL_GPIO_Init+0x254>)
 801c18a:	4293      	cmp	r3, r2
 801c18c:	d019      	beq.n	801c1c2 <HAL_GPIO_Init+0x21e>
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	4a1a      	ldr	r2, [pc, #104]	@ (801c1fc <HAL_GPIO_Init+0x258>)
 801c192:	4293      	cmp	r3, r2
 801c194:	d013      	beq.n	801c1be <HAL_GPIO_Init+0x21a>
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	4a19      	ldr	r2, [pc, #100]	@ (801c200 <HAL_GPIO_Init+0x25c>)
 801c19a:	4293      	cmp	r3, r2
 801c19c:	d00d      	beq.n	801c1ba <HAL_GPIO_Init+0x216>
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	4a18      	ldr	r2, [pc, #96]	@ (801c204 <HAL_GPIO_Init+0x260>)
 801c1a2:	4293      	cmp	r3, r2
 801c1a4:	d007      	beq.n	801c1b6 <HAL_GPIO_Init+0x212>
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	4a17      	ldr	r2, [pc, #92]	@ (801c208 <HAL_GPIO_Init+0x264>)
 801c1aa:	4293      	cmp	r3, r2
 801c1ac:	d101      	bne.n	801c1b2 <HAL_GPIO_Init+0x20e>
 801c1ae:	2309      	movs	r3, #9
 801c1b0:	e02d      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1b2:	230a      	movs	r3, #10
 801c1b4:	e02b      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1b6:	2308      	movs	r3, #8
 801c1b8:	e029      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1ba:	2307      	movs	r3, #7
 801c1bc:	e027      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1be:	2306      	movs	r3, #6
 801c1c0:	e025      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1c2:	2305      	movs	r3, #5
 801c1c4:	e023      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1c6:	2304      	movs	r3, #4
 801c1c8:	e021      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1ca:	2303      	movs	r3, #3
 801c1cc:	e01f      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1ce:	2302      	movs	r3, #2
 801c1d0:	e01d      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1d2:	2301      	movs	r3, #1
 801c1d4:	e01b      	b.n	801c20e <HAL_GPIO_Init+0x26a>
 801c1d6:	bf00      	nop
 801c1d8:	58000080 	.word	0x58000080
 801c1dc:	58024400 	.word	0x58024400
 801c1e0:	58000400 	.word	0x58000400
 801c1e4:	58020000 	.word	0x58020000
 801c1e8:	58020400 	.word	0x58020400
 801c1ec:	58020800 	.word	0x58020800
 801c1f0:	58020c00 	.word	0x58020c00
 801c1f4:	58021000 	.word	0x58021000
 801c1f8:	58021400 	.word	0x58021400
 801c1fc:	58021800 	.word	0x58021800
 801c200:	58021c00 	.word	0x58021c00
 801c204:	58022000 	.word	0x58022000
 801c208:	58022400 	.word	0x58022400
 801c20c:	2300      	movs	r3, #0
 801c20e:	69fa      	ldr	r2, [r7, #28]
 801c210:	f002 0203 	and.w	r2, r2, #3
 801c214:	0092      	lsls	r2, r2, #2
 801c216:	4093      	lsls	r3, r2
 801c218:	69ba      	ldr	r2, [r7, #24]
 801c21a:	4313      	orrs	r3, r2
 801c21c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c21e:	4938      	ldr	r1, [pc, #224]	@ (801c300 <HAL_GPIO_Init+0x35c>)
 801c220:	69fb      	ldr	r3, [r7, #28]
 801c222:	089b      	lsrs	r3, r3, #2
 801c224:	3302      	adds	r3, #2
 801c226:	69ba      	ldr	r2, [r7, #24]
 801c228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c22c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c234:	693b      	ldr	r3, [r7, #16]
 801c236:	43db      	mvns	r3, r3
 801c238:	69ba      	ldr	r2, [r7, #24]
 801c23a:	4013      	ands	r3, r2
 801c23c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	685b      	ldr	r3, [r3, #4]
 801c242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c246:	2b00      	cmp	r3, #0
 801c248:	d003      	beq.n	801c252 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c24a:	69ba      	ldr	r2, [r7, #24]
 801c24c:	693b      	ldr	r3, [r7, #16]
 801c24e:	4313      	orrs	r3, r2
 801c250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c256:	69bb      	ldr	r3, [r7, #24]
 801c258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c25a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c25e:	685b      	ldr	r3, [r3, #4]
 801c260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c262:	693b      	ldr	r3, [r7, #16]
 801c264:	43db      	mvns	r3, r3
 801c266:	69ba      	ldr	r2, [r7, #24]
 801c268:	4013      	ands	r3, r2
 801c26a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c26c:	683b      	ldr	r3, [r7, #0]
 801c26e:	685b      	ldr	r3, [r3, #4]
 801c270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c274:	2b00      	cmp	r3, #0
 801c276:	d003      	beq.n	801c280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801c278:	69ba      	ldr	r2, [r7, #24]
 801c27a:	693b      	ldr	r3, [r7, #16]
 801c27c:	4313      	orrs	r3, r2
 801c27e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801c280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c284:	69bb      	ldr	r3, [r7, #24]
 801c286:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801c288:	697b      	ldr	r3, [r7, #20]
 801c28a:	685b      	ldr	r3, [r3, #4]
 801c28c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c28e:	693b      	ldr	r3, [r7, #16]
 801c290:	43db      	mvns	r3, r3
 801c292:	69ba      	ldr	r2, [r7, #24]
 801c294:	4013      	ands	r3, r2
 801c296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c298:	683b      	ldr	r3, [r7, #0]
 801c29a:	685b      	ldr	r3, [r3, #4]
 801c29c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d003      	beq.n	801c2ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801c2a4:	69ba      	ldr	r2, [r7, #24]
 801c2a6:	693b      	ldr	r3, [r7, #16]
 801c2a8:	4313      	orrs	r3, r2
 801c2aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	69ba      	ldr	r2, [r7, #24]
 801c2b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801c2b2:	697b      	ldr	r3, [r7, #20]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c2b8:	693b      	ldr	r3, [r7, #16]
 801c2ba:	43db      	mvns	r3, r3
 801c2bc:	69ba      	ldr	r2, [r7, #24]
 801c2be:	4013      	ands	r3, r2
 801c2c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c2c2:	683b      	ldr	r3, [r7, #0]
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d003      	beq.n	801c2d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801c2ce:	69ba      	ldr	r2, [r7, #24]
 801c2d0:	693b      	ldr	r3, [r7, #16]
 801c2d2:	4313      	orrs	r3, r2
 801c2d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801c2d6:	697b      	ldr	r3, [r7, #20]
 801c2d8:	69ba      	ldr	r2, [r7, #24]
 801c2da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801c2dc:	69fb      	ldr	r3, [r7, #28]
 801c2de:	3301      	adds	r3, #1
 801c2e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	681a      	ldr	r2, [r3, #0]
 801c2e6:	69fb      	ldr	r3, [r7, #28]
 801c2e8:	fa22 f303 	lsr.w	r3, r2, r3
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	f47f ae63 	bne.w	801bfb8 <HAL_GPIO_Init+0x14>
  }
}
 801c2f2:	bf00      	nop
 801c2f4:	bf00      	nop
 801c2f6:	3724      	adds	r7, #36	@ 0x24
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2fe:	4770      	bx	lr
 801c300:	58000400 	.word	0x58000400

0801c304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c304:	b480      	push	{r7}
 801c306:	b083      	sub	sp, #12
 801c308:	af00      	add	r7, sp, #0
 801c30a:	6078      	str	r0, [r7, #4]
 801c30c:	460b      	mov	r3, r1
 801c30e:	807b      	strh	r3, [r7, #2]
 801c310:	4613      	mov	r3, r2
 801c312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c314:	787b      	ldrb	r3, [r7, #1]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d003      	beq.n	801c322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c31a:	887a      	ldrh	r2, [r7, #2]
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801c320:	e003      	b.n	801c32a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801c322:	887b      	ldrh	r3, [r7, #2]
 801c324:	041a      	lsls	r2, r3, #16
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	619a      	str	r2, [r3, #24]
}
 801c32a:	bf00      	nop
 801c32c:	370c      	adds	r7, #12
 801c32e:	46bd      	mov	sp, r7
 801c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c334:	4770      	bx	lr
	...

0801c338 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b084      	sub	sp, #16
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801c340:	4b29      	ldr	r3, [pc, #164]	@ (801c3e8 <HAL_PWREx_ConfigSupply+0xb0>)
 801c342:	68db      	ldr	r3, [r3, #12]
 801c344:	f003 0307 	and.w	r3, r3, #7
 801c348:	2b06      	cmp	r3, #6
 801c34a:	d00a      	beq.n	801c362 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c34c:	4b26      	ldr	r3, [pc, #152]	@ (801c3e8 <HAL_PWREx_ConfigSupply+0xb0>)
 801c34e:	68db      	ldr	r3, [r3, #12]
 801c350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c354:	687a      	ldr	r2, [r7, #4]
 801c356:	429a      	cmp	r2, r3
 801c358:	d001      	beq.n	801c35e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c35a:	2301      	movs	r3, #1
 801c35c:	e040      	b.n	801c3e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c35e:	2300      	movs	r3, #0
 801c360:	e03e      	b.n	801c3e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c362:	4b21      	ldr	r3, [pc, #132]	@ (801c3e8 <HAL_PWREx_ConfigSupply+0xb0>)
 801c364:	68db      	ldr	r3, [r3, #12]
 801c366:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801c36a:	491f      	ldr	r1, [pc, #124]	@ (801c3e8 <HAL_PWREx_ConfigSupply+0xb0>)
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	4313      	orrs	r3, r2
 801c370:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c372:	f7ff f8d7 	bl	801b524 <HAL_GetTick>
 801c376:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c378:	e009      	b.n	801c38e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c37a:	f7ff f8d3 	bl	801b524 <HAL_GetTick>
 801c37e:	4602      	mov	r2, r0
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	1ad3      	subs	r3, r2, r3
 801c384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c388:	d901      	bls.n	801c38e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c38a:	2301      	movs	r3, #1
 801c38c:	e028      	b.n	801c3e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c38e:	4b16      	ldr	r3, [pc, #88]	@ (801c3e8 <HAL_PWREx_ConfigSupply+0xb0>)
 801c390:	685b      	ldr	r3, [r3, #4]
 801c392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c39a:	d1ee      	bne.n	801c37a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	2b1e      	cmp	r3, #30
 801c3a0:	d008      	beq.n	801c3b4 <HAL_PWREx_ConfigSupply+0x7c>
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	2b2e      	cmp	r3, #46	@ 0x2e
 801c3a6:	d005      	beq.n	801c3b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	2b1d      	cmp	r3, #29
 801c3ac:	d002      	beq.n	801c3b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	2b2d      	cmp	r3, #45	@ 0x2d
 801c3b2:	d114      	bne.n	801c3de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 801c3b4:	f7ff f8b6 	bl	801b524 <HAL_GetTick>
 801c3b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801c3ba:	e009      	b.n	801c3d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c3bc:	f7ff f8b2 	bl	801b524 <HAL_GetTick>
 801c3c0:	4602      	mov	r2, r0
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	1ad3      	subs	r3, r2, r3
 801c3c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c3ca:	d901      	bls.n	801c3d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801c3cc:	2301      	movs	r3, #1
 801c3ce:	e007      	b.n	801c3e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801c3d0:	4b05      	ldr	r3, [pc, #20]	@ (801c3e8 <HAL_PWREx_ConfigSupply+0xb0>)
 801c3d2:	68db      	ldr	r3, [r3, #12]
 801c3d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c3d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c3dc:	d1ee      	bne.n	801c3bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c3de:	2300      	movs	r3, #0
}
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	3710      	adds	r7, #16
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bd80      	pop	{r7, pc}
 801c3e8:	58024800 	.word	0x58024800

0801c3ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b08c      	sub	sp, #48	@ 0x30
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d102      	bne.n	801c400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	f000 bc48 	b.w	801cc90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f003 0301 	and.w	r3, r3, #1
 801c408:	2b00      	cmp	r3, #0
 801c40a:	f000 8088 	beq.w	801c51e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c40e:	4b99      	ldr	r3, [pc, #612]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c410:	691b      	ldr	r3, [r3, #16]
 801c412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c418:	4b96      	ldr	r3, [pc, #600]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c41c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c420:	2b10      	cmp	r3, #16
 801c422:	d007      	beq.n	801c434 <HAL_RCC_OscConfig+0x48>
 801c424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c426:	2b18      	cmp	r3, #24
 801c428:	d111      	bne.n	801c44e <HAL_RCC_OscConfig+0x62>
 801c42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42c:	f003 0303 	and.w	r3, r3, #3
 801c430:	2b02      	cmp	r3, #2
 801c432:	d10c      	bne.n	801c44e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c434:	4b8f      	ldr	r3, [pc, #572]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d06d      	beq.n	801c51c <HAL_RCC_OscConfig+0x130>
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d169      	bne.n	801c51c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c448:	2301      	movs	r3, #1
 801c44a:	f000 bc21 	b.w	801cc90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	685b      	ldr	r3, [r3, #4]
 801c452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c456:	d106      	bne.n	801c466 <HAL_RCC_OscConfig+0x7a>
 801c458:	4b86      	ldr	r3, [pc, #536]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	4a85      	ldr	r2, [pc, #532]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c45e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c462:	6013      	str	r3, [r2, #0]
 801c464:	e02e      	b.n	801c4c4 <HAL_RCC_OscConfig+0xd8>
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	685b      	ldr	r3, [r3, #4]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d10c      	bne.n	801c488 <HAL_RCC_OscConfig+0x9c>
 801c46e:	4b81      	ldr	r3, [pc, #516]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	4a80      	ldr	r2, [pc, #512]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c478:	6013      	str	r3, [r2, #0]
 801c47a:	4b7e      	ldr	r3, [pc, #504]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	4a7d      	ldr	r2, [pc, #500]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c484:	6013      	str	r3, [r2, #0]
 801c486:	e01d      	b.n	801c4c4 <HAL_RCC_OscConfig+0xd8>
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	685b      	ldr	r3, [r3, #4]
 801c48c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c490:	d10c      	bne.n	801c4ac <HAL_RCC_OscConfig+0xc0>
 801c492:	4b78      	ldr	r3, [pc, #480]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	4a77      	ldr	r2, [pc, #476]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c49c:	6013      	str	r3, [r2, #0]
 801c49e:	4b75      	ldr	r3, [pc, #468]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	4a74      	ldr	r2, [pc, #464]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c4a8:	6013      	str	r3, [r2, #0]
 801c4aa:	e00b      	b.n	801c4c4 <HAL_RCC_OscConfig+0xd8>
 801c4ac:	4b71      	ldr	r3, [pc, #452]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4a70      	ldr	r2, [pc, #448]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c4b6:	6013      	str	r3, [r2, #0]
 801c4b8:	4b6e      	ldr	r3, [pc, #440]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	4a6d      	ldr	r2, [pc, #436]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c4c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	685b      	ldr	r3, [r3, #4]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d013      	beq.n	801c4f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4cc:	f7ff f82a 	bl	801b524 <HAL_GetTick>
 801c4d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c4d2:	e008      	b.n	801c4e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c4d4:	f7ff f826 	bl	801b524 <HAL_GetTick>
 801c4d8:	4602      	mov	r2, r0
 801c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4dc:	1ad3      	subs	r3, r2, r3
 801c4de:	2b64      	cmp	r3, #100	@ 0x64
 801c4e0:	d901      	bls.n	801c4e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c4e2:	2303      	movs	r3, #3
 801c4e4:	e3d4      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c4e6:	4b63      	ldr	r3, [pc, #396]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d0f0      	beq.n	801c4d4 <HAL_RCC_OscConfig+0xe8>
 801c4f2:	e014      	b.n	801c51e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4f4:	f7ff f816 	bl	801b524 <HAL_GetTick>
 801c4f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c4fa:	e008      	b.n	801c50e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c4fc:	f7ff f812 	bl	801b524 <HAL_GetTick>
 801c500:	4602      	mov	r2, r0
 801c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c504:	1ad3      	subs	r3, r2, r3
 801c506:	2b64      	cmp	r3, #100	@ 0x64
 801c508:	d901      	bls.n	801c50e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c50a:	2303      	movs	r3, #3
 801c50c:	e3c0      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c50e:	4b59      	ldr	r3, [pc, #356]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c516:	2b00      	cmp	r3, #0
 801c518:	d1f0      	bne.n	801c4fc <HAL_RCC_OscConfig+0x110>
 801c51a:	e000      	b.n	801c51e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c51c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	f003 0302 	and.w	r3, r3, #2
 801c526:	2b00      	cmp	r3, #0
 801c528:	f000 80ca 	beq.w	801c6c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c52c:	4b51      	ldr	r3, [pc, #324]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c52e:	691b      	ldr	r3, [r3, #16]
 801c530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c536:	4b4f      	ldr	r3, [pc, #316]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c53a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c53c:	6a3b      	ldr	r3, [r7, #32]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d007      	beq.n	801c552 <HAL_RCC_OscConfig+0x166>
 801c542:	6a3b      	ldr	r3, [r7, #32]
 801c544:	2b18      	cmp	r3, #24
 801c546:	d156      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x20a>
 801c548:	69fb      	ldr	r3, [r7, #28]
 801c54a:	f003 0303 	and.w	r3, r3, #3
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d151      	bne.n	801c5f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c552:	4b48      	ldr	r3, [pc, #288]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	f003 0304 	and.w	r3, r3, #4
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d005      	beq.n	801c56a <HAL_RCC_OscConfig+0x17e>
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	68db      	ldr	r3, [r3, #12]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d101      	bne.n	801c56a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c566:	2301      	movs	r3, #1
 801c568:	e392      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c56a:	4b42      	ldr	r3, [pc, #264]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	f023 0219 	bic.w	r2, r3, #25
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	68db      	ldr	r3, [r3, #12]
 801c576:	493f      	ldr	r1, [pc, #252]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c578:	4313      	orrs	r3, r2
 801c57a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c57c:	f7fe ffd2 	bl	801b524 <HAL_GetTick>
 801c580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c582:	e008      	b.n	801c596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c584:	f7fe ffce 	bl	801b524 <HAL_GetTick>
 801c588:	4602      	mov	r2, r0
 801c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c58c:	1ad3      	subs	r3, r2, r3
 801c58e:	2b02      	cmp	r3, #2
 801c590:	d901      	bls.n	801c596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c592:	2303      	movs	r3, #3
 801c594:	e37c      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c596:	4b37      	ldr	r3, [pc, #220]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	f003 0304 	and.w	r3, r3, #4
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d0f0      	beq.n	801c584 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5a2:	f7fe ffcb 	bl	801b53c <HAL_GetREVID>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c5ac:	4293      	cmp	r3, r2
 801c5ae:	d817      	bhi.n	801c5e0 <HAL_RCC_OscConfig+0x1f4>
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	691b      	ldr	r3, [r3, #16]
 801c5b4:	2b40      	cmp	r3, #64	@ 0x40
 801c5b6:	d108      	bne.n	801c5ca <HAL_RCC_OscConfig+0x1de>
 801c5b8:	4b2e      	ldr	r3, [pc, #184]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c5ba:	685b      	ldr	r3, [r3, #4]
 801c5bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c5c0:	4a2c      	ldr	r2, [pc, #176]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c5c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c5c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c5c8:	e07a      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5ca:	4b2a      	ldr	r3, [pc, #168]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	691b      	ldr	r3, [r3, #16]
 801c5d6:	031b      	lsls	r3, r3, #12
 801c5d8:	4926      	ldr	r1, [pc, #152]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c5da:	4313      	orrs	r3, r2
 801c5dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c5de:	e06f      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5e0:	4b24      	ldr	r3, [pc, #144]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c5e2:	685b      	ldr	r3, [r3, #4]
 801c5e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	691b      	ldr	r3, [r3, #16]
 801c5ec:	061b      	lsls	r3, r3, #24
 801c5ee:	4921      	ldr	r1, [pc, #132]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c5f0:	4313      	orrs	r3, r2
 801c5f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c5f4:	e064      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	68db      	ldr	r3, [r3, #12]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d047      	beq.n	801c68e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c5fe:	4b1d      	ldr	r3, [pc, #116]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	f023 0219 	bic.w	r2, r3, #25
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	68db      	ldr	r3, [r3, #12]
 801c60a:	491a      	ldr	r1, [pc, #104]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c60c:	4313      	orrs	r3, r2
 801c60e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c610:	f7fe ff88 	bl	801b524 <HAL_GetTick>
 801c614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c616:	e008      	b.n	801c62a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c618:	f7fe ff84 	bl	801b524 <HAL_GetTick>
 801c61c:	4602      	mov	r2, r0
 801c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c620:	1ad3      	subs	r3, r2, r3
 801c622:	2b02      	cmp	r3, #2
 801c624:	d901      	bls.n	801c62a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c626:	2303      	movs	r3, #3
 801c628:	e332      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c62a:	4b12      	ldr	r3, [pc, #72]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	f003 0304 	and.w	r3, r3, #4
 801c632:	2b00      	cmp	r3, #0
 801c634:	d0f0      	beq.n	801c618 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c636:	f7fe ff81 	bl	801b53c <HAL_GetREVID>
 801c63a:	4603      	mov	r3, r0
 801c63c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c640:	4293      	cmp	r3, r2
 801c642:	d819      	bhi.n	801c678 <HAL_RCC_OscConfig+0x28c>
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	691b      	ldr	r3, [r3, #16]
 801c648:	2b40      	cmp	r3, #64	@ 0x40
 801c64a:	d108      	bne.n	801c65e <HAL_RCC_OscConfig+0x272>
 801c64c:	4b09      	ldr	r3, [pc, #36]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c64e:	685b      	ldr	r3, [r3, #4]
 801c650:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c654:	4a07      	ldr	r2, [pc, #28]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c65a:	6053      	str	r3, [r2, #4]
 801c65c:	e030      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2d4>
 801c65e:	4b05      	ldr	r3, [pc, #20]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c660:	685b      	ldr	r3, [r3, #4]
 801c662:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	691b      	ldr	r3, [r3, #16]
 801c66a:	031b      	lsls	r3, r3, #12
 801c66c:	4901      	ldr	r1, [pc, #4]	@ (801c674 <HAL_RCC_OscConfig+0x288>)
 801c66e:	4313      	orrs	r3, r2
 801c670:	604b      	str	r3, [r1, #4]
 801c672:	e025      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2d4>
 801c674:	58024400 	.word	0x58024400
 801c678:	4b9a      	ldr	r3, [pc, #616]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c67a:	685b      	ldr	r3, [r3, #4]
 801c67c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	691b      	ldr	r3, [r3, #16]
 801c684:	061b      	lsls	r3, r3, #24
 801c686:	4997      	ldr	r1, [pc, #604]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c688:	4313      	orrs	r3, r2
 801c68a:	604b      	str	r3, [r1, #4]
 801c68c:	e018      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c68e:	4b95      	ldr	r3, [pc, #596]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	4a94      	ldr	r2, [pc, #592]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c694:	f023 0301 	bic.w	r3, r3, #1
 801c698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c69a:	f7fe ff43 	bl	801b524 <HAL_GetTick>
 801c69e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c6a0:	e008      	b.n	801c6b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c6a2:	f7fe ff3f 	bl	801b524 <HAL_GetTick>
 801c6a6:	4602      	mov	r2, r0
 801c6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6aa:	1ad3      	subs	r3, r2, r3
 801c6ac:	2b02      	cmp	r3, #2
 801c6ae:	d901      	bls.n	801c6b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c6b0:	2303      	movs	r3, #3
 801c6b2:	e2ed      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c6b4:	4b8b      	ldr	r3, [pc, #556]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	f003 0304 	and.w	r3, r3, #4
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d1f0      	bne.n	801c6a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	f003 0310 	and.w	r3, r3, #16
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	f000 80a9 	beq.w	801c820 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c6ce:	4b85      	ldr	r3, [pc, #532]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c6d0:	691b      	ldr	r3, [r3, #16]
 801c6d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c6d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c6d8:	4b82      	ldr	r3, [pc, #520]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c6de:	69bb      	ldr	r3, [r7, #24]
 801c6e0:	2b08      	cmp	r3, #8
 801c6e2:	d007      	beq.n	801c6f4 <HAL_RCC_OscConfig+0x308>
 801c6e4:	69bb      	ldr	r3, [r7, #24]
 801c6e6:	2b18      	cmp	r3, #24
 801c6e8:	d13a      	bne.n	801c760 <HAL_RCC_OscConfig+0x374>
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	f003 0303 	and.w	r3, r3, #3
 801c6f0:	2b01      	cmp	r3, #1
 801c6f2:	d135      	bne.n	801c760 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c6f4:	4b7b      	ldr	r3, [pc, #492]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d005      	beq.n	801c70c <HAL_RCC_OscConfig+0x320>
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	69db      	ldr	r3, [r3, #28]
 801c704:	2b80      	cmp	r3, #128	@ 0x80
 801c706:	d001      	beq.n	801c70c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c708:	2301      	movs	r3, #1
 801c70a:	e2c1      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c70c:	f7fe ff16 	bl	801b53c <HAL_GetREVID>
 801c710:	4603      	mov	r3, r0
 801c712:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c716:	4293      	cmp	r3, r2
 801c718:	d817      	bhi.n	801c74a <HAL_RCC_OscConfig+0x35e>
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	6a1b      	ldr	r3, [r3, #32]
 801c71e:	2b20      	cmp	r3, #32
 801c720:	d108      	bne.n	801c734 <HAL_RCC_OscConfig+0x348>
 801c722:	4b70      	ldr	r3, [pc, #448]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c724:	685b      	ldr	r3, [r3, #4]
 801c726:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c72a:	4a6e      	ldr	r2, [pc, #440]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c72c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c730:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c732:	e075      	b.n	801c820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c734:	4b6b      	ldr	r3, [pc, #428]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c736:	685b      	ldr	r3, [r3, #4]
 801c738:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	6a1b      	ldr	r3, [r3, #32]
 801c740:	069b      	lsls	r3, r3, #26
 801c742:	4968      	ldr	r1, [pc, #416]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c744:	4313      	orrs	r3, r2
 801c746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c748:	e06a      	b.n	801c820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c74a:	4b66      	ldr	r3, [pc, #408]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c74c:	68db      	ldr	r3, [r3, #12]
 801c74e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	6a1b      	ldr	r3, [r3, #32]
 801c756:	061b      	lsls	r3, r3, #24
 801c758:	4962      	ldr	r1, [pc, #392]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c75a:	4313      	orrs	r3, r2
 801c75c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c75e:	e05f      	b.n	801c820 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	69db      	ldr	r3, [r3, #28]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d042      	beq.n	801c7ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c768:	4b5e      	ldr	r3, [pc, #376]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	4a5d      	ldr	r2, [pc, #372]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c774:	f7fe fed6 	bl	801b524 <HAL_GetTick>
 801c778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c77a:	e008      	b.n	801c78e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c77c:	f7fe fed2 	bl	801b524 <HAL_GetTick>
 801c780:	4602      	mov	r2, r0
 801c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c784:	1ad3      	subs	r3, r2, r3
 801c786:	2b02      	cmp	r3, #2
 801c788:	d901      	bls.n	801c78e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c78a:	2303      	movs	r3, #3
 801c78c:	e280      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c78e:	4b55      	ldr	r3, [pc, #340]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c796:	2b00      	cmp	r3, #0
 801c798:	d0f0      	beq.n	801c77c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c79a:	f7fe fecf 	bl	801b53c <HAL_GetREVID>
 801c79e:	4603      	mov	r3, r0
 801c7a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c7a4:	4293      	cmp	r3, r2
 801c7a6:	d817      	bhi.n	801c7d8 <HAL_RCC_OscConfig+0x3ec>
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	6a1b      	ldr	r3, [r3, #32]
 801c7ac:	2b20      	cmp	r3, #32
 801c7ae:	d108      	bne.n	801c7c2 <HAL_RCC_OscConfig+0x3d6>
 801c7b0:	4b4c      	ldr	r3, [pc, #304]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7b2:	685b      	ldr	r3, [r3, #4]
 801c7b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c7b8:	4a4a      	ldr	r2, [pc, #296]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c7be:	6053      	str	r3, [r2, #4]
 801c7c0:	e02e      	b.n	801c820 <HAL_RCC_OscConfig+0x434>
 801c7c2:	4b48      	ldr	r3, [pc, #288]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7c4:	685b      	ldr	r3, [r3, #4]
 801c7c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	6a1b      	ldr	r3, [r3, #32]
 801c7ce:	069b      	lsls	r3, r3, #26
 801c7d0:	4944      	ldr	r1, [pc, #272]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7d2:	4313      	orrs	r3, r2
 801c7d4:	604b      	str	r3, [r1, #4]
 801c7d6:	e023      	b.n	801c820 <HAL_RCC_OscConfig+0x434>
 801c7d8:	4b42      	ldr	r3, [pc, #264]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7da:	68db      	ldr	r3, [r3, #12]
 801c7dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	6a1b      	ldr	r3, [r3, #32]
 801c7e4:	061b      	lsls	r3, r3, #24
 801c7e6:	493f      	ldr	r1, [pc, #252]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7e8:	4313      	orrs	r3, r2
 801c7ea:	60cb      	str	r3, [r1, #12]
 801c7ec:	e018      	b.n	801c820 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c7ee:	4b3d      	ldr	r3, [pc, #244]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	4a3c      	ldr	r2, [pc, #240]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c7f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c7f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7fa:	f7fe fe93 	bl	801b524 <HAL_GetTick>
 801c7fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c800:	e008      	b.n	801c814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c802:	f7fe fe8f 	bl	801b524 <HAL_GetTick>
 801c806:	4602      	mov	r2, r0
 801c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c80a:	1ad3      	subs	r3, r2, r3
 801c80c:	2b02      	cmp	r3, #2
 801c80e:	d901      	bls.n	801c814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c810:	2303      	movs	r3, #3
 801c812:	e23d      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c814:	4b33      	ldr	r3, [pc, #204]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d1f0      	bne.n	801c802 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	f003 0308 	and.w	r3, r3, #8
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d036      	beq.n	801c89a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	695b      	ldr	r3, [r3, #20]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d019      	beq.n	801c868 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c834:	4b2b      	ldr	r3, [pc, #172]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c838:	4a2a      	ldr	r2, [pc, #168]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c83a:	f043 0301 	orr.w	r3, r3, #1
 801c83e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c840:	f7fe fe70 	bl	801b524 <HAL_GetTick>
 801c844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c846:	e008      	b.n	801c85a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c848:	f7fe fe6c 	bl	801b524 <HAL_GetTick>
 801c84c:	4602      	mov	r2, r0
 801c84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c850:	1ad3      	subs	r3, r2, r3
 801c852:	2b02      	cmp	r3, #2
 801c854:	d901      	bls.n	801c85a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c856:	2303      	movs	r3, #3
 801c858:	e21a      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c85a:	4b22      	ldr	r3, [pc, #136]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c85c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c85e:	f003 0302 	and.w	r3, r3, #2
 801c862:	2b00      	cmp	r3, #0
 801c864:	d0f0      	beq.n	801c848 <HAL_RCC_OscConfig+0x45c>
 801c866:	e018      	b.n	801c89a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c868:	4b1e      	ldr	r3, [pc, #120]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c86a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c86c:	4a1d      	ldr	r2, [pc, #116]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c86e:	f023 0301 	bic.w	r3, r3, #1
 801c872:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c874:	f7fe fe56 	bl	801b524 <HAL_GetTick>
 801c878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c87a:	e008      	b.n	801c88e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c87c:	f7fe fe52 	bl	801b524 <HAL_GetTick>
 801c880:	4602      	mov	r2, r0
 801c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c884:	1ad3      	subs	r3, r2, r3
 801c886:	2b02      	cmp	r3, #2
 801c888:	d901      	bls.n	801c88e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c88a:	2303      	movs	r3, #3
 801c88c:	e200      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c88e:	4b15      	ldr	r3, [pc, #84]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c892:	f003 0302 	and.w	r3, r3, #2
 801c896:	2b00      	cmp	r3, #0
 801c898:	d1f0      	bne.n	801c87c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	f003 0320 	and.w	r3, r3, #32
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d039      	beq.n	801c91a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	699b      	ldr	r3, [r3, #24]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d01c      	beq.n	801c8e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c8ae:	4b0d      	ldr	r3, [pc, #52]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	4a0c      	ldr	r2, [pc, #48]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c8b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c8b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c8ba:	f7fe fe33 	bl	801b524 <HAL_GetTick>
 801c8be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c8c0:	e008      	b.n	801c8d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c8c2:	f7fe fe2f 	bl	801b524 <HAL_GetTick>
 801c8c6:	4602      	mov	r2, r0
 801c8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8ca:	1ad3      	subs	r3, r2, r3
 801c8cc:	2b02      	cmp	r3, #2
 801c8ce:	d901      	bls.n	801c8d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c8d0:	2303      	movs	r3, #3
 801c8d2:	e1dd      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c8d4:	4b03      	ldr	r3, [pc, #12]	@ (801c8e4 <HAL_RCC_OscConfig+0x4f8>)
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	d0f0      	beq.n	801c8c2 <HAL_RCC_OscConfig+0x4d6>
 801c8e0:	e01b      	b.n	801c91a <HAL_RCC_OscConfig+0x52e>
 801c8e2:	bf00      	nop
 801c8e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c8e8:	4b9b      	ldr	r3, [pc, #620]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	4a9a      	ldr	r2, [pc, #616]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c8ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c8f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c8f4:	f7fe fe16 	bl	801b524 <HAL_GetTick>
 801c8f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c8fa:	e008      	b.n	801c90e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c8fc:	f7fe fe12 	bl	801b524 <HAL_GetTick>
 801c900:	4602      	mov	r2, r0
 801c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c904:	1ad3      	subs	r3, r2, r3
 801c906:	2b02      	cmp	r3, #2
 801c908:	d901      	bls.n	801c90e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c90a:	2303      	movs	r3, #3
 801c90c:	e1c0      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c90e:	4b92      	ldr	r3, [pc, #584]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c916:	2b00      	cmp	r3, #0
 801c918:	d1f0      	bne.n	801c8fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	f003 0304 	and.w	r3, r3, #4
 801c922:	2b00      	cmp	r3, #0
 801c924:	f000 8081 	beq.w	801ca2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c928:	4b8c      	ldr	r3, [pc, #560]	@ (801cb5c <HAL_RCC_OscConfig+0x770>)
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	4a8b      	ldr	r2, [pc, #556]	@ (801cb5c <HAL_RCC_OscConfig+0x770>)
 801c92e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c934:	f7fe fdf6 	bl	801b524 <HAL_GetTick>
 801c938:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c93a:	e008      	b.n	801c94e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c93c:	f7fe fdf2 	bl	801b524 <HAL_GetTick>
 801c940:	4602      	mov	r2, r0
 801c942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c944:	1ad3      	subs	r3, r2, r3
 801c946:	2b64      	cmp	r3, #100	@ 0x64
 801c948:	d901      	bls.n	801c94e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c94a:	2303      	movs	r3, #3
 801c94c:	e1a0      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c94e:	4b83      	ldr	r3, [pc, #524]	@ (801cb5c <HAL_RCC_OscConfig+0x770>)
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c956:	2b00      	cmp	r3, #0
 801c958:	d0f0      	beq.n	801c93c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	689b      	ldr	r3, [r3, #8]
 801c95e:	2b01      	cmp	r3, #1
 801c960:	d106      	bne.n	801c970 <HAL_RCC_OscConfig+0x584>
 801c962:	4b7d      	ldr	r3, [pc, #500]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c966:	4a7c      	ldr	r2, [pc, #496]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c968:	f043 0301 	orr.w	r3, r3, #1
 801c96c:	6713      	str	r3, [r2, #112]	@ 0x70
 801c96e:	e02d      	b.n	801c9cc <HAL_RCC_OscConfig+0x5e0>
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	689b      	ldr	r3, [r3, #8]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d10c      	bne.n	801c992 <HAL_RCC_OscConfig+0x5a6>
 801c978:	4b77      	ldr	r3, [pc, #476]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c97a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c97c:	4a76      	ldr	r2, [pc, #472]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c97e:	f023 0301 	bic.w	r3, r3, #1
 801c982:	6713      	str	r3, [r2, #112]	@ 0x70
 801c984:	4b74      	ldr	r3, [pc, #464]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c988:	4a73      	ldr	r2, [pc, #460]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c98a:	f023 0304 	bic.w	r3, r3, #4
 801c98e:	6713      	str	r3, [r2, #112]	@ 0x70
 801c990:	e01c      	b.n	801c9cc <HAL_RCC_OscConfig+0x5e0>
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	689b      	ldr	r3, [r3, #8]
 801c996:	2b05      	cmp	r3, #5
 801c998:	d10c      	bne.n	801c9b4 <HAL_RCC_OscConfig+0x5c8>
 801c99a:	4b6f      	ldr	r3, [pc, #444]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c99e:	4a6e      	ldr	r2, [pc, #440]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9a0:	f043 0304 	orr.w	r3, r3, #4
 801c9a4:	6713      	str	r3, [r2, #112]	@ 0x70
 801c9a6:	4b6c      	ldr	r3, [pc, #432]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9aa:	4a6b      	ldr	r2, [pc, #428]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9ac:	f043 0301 	orr.w	r3, r3, #1
 801c9b0:	6713      	str	r3, [r2, #112]	@ 0x70
 801c9b2:	e00b      	b.n	801c9cc <HAL_RCC_OscConfig+0x5e0>
 801c9b4:	4b68      	ldr	r3, [pc, #416]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9b8:	4a67      	ldr	r2, [pc, #412]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9ba:	f023 0301 	bic.w	r3, r3, #1
 801c9be:	6713      	str	r3, [r2, #112]	@ 0x70
 801c9c0:	4b65      	ldr	r3, [pc, #404]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9c4:	4a64      	ldr	r2, [pc, #400]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9c6:	f023 0304 	bic.w	r3, r3, #4
 801c9ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	689b      	ldr	r3, [r3, #8]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d015      	beq.n	801ca00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c9d4:	f7fe fda6 	bl	801b524 <HAL_GetTick>
 801c9d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c9da:	e00a      	b.n	801c9f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c9dc:	f7fe fda2 	bl	801b524 <HAL_GetTick>
 801c9e0:	4602      	mov	r2, r0
 801c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9e4:	1ad3      	subs	r3, r2, r3
 801c9e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c9ea:	4293      	cmp	r3, r2
 801c9ec:	d901      	bls.n	801c9f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c9ee:	2303      	movs	r3, #3
 801c9f0:	e14e      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c9f2:	4b59      	ldr	r3, [pc, #356]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801c9f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9f6:	f003 0302 	and.w	r3, r3, #2
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d0ee      	beq.n	801c9dc <HAL_RCC_OscConfig+0x5f0>
 801c9fe:	e014      	b.n	801ca2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ca00:	f7fe fd90 	bl	801b524 <HAL_GetTick>
 801ca04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ca06:	e00a      	b.n	801ca1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ca08:	f7fe fd8c 	bl	801b524 <HAL_GetTick>
 801ca0c:	4602      	mov	r2, r0
 801ca0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca10:	1ad3      	subs	r3, r2, r3
 801ca12:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ca16:	4293      	cmp	r3, r2
 801ca18:	d901      	bls.n	801ca1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801ca1a:	2303      	movs	r3, #3
 801ca1c:	e138      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ca1e:	4b4e      	ldr	r3, [pc, #312]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ca22:	f003 0302 	and.w	r3, r3, #2
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d1ee      	bne.n	801ca08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	f000 812d 	beq.w	801cc8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801ca34:	4b48      	ldr	r3, [pc, #288]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca36:	691b      	ldr	r3, [r3, #16]
 801ca38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ca3c:	2b18      	cmp	r3, #24
 801ca3e:	f000 80bd 	beq.w	801cbbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca46:	2b02      	cmp	r3, #2
 801ca48:	f040 809e 	bne.w	801cb88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ca4c:	4b42      	ldr	r3, [pc, #264]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	4a41      	ldr	r2, [pc, #260]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801ca56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca58:	f7fe fd64 	bl	801b524 <HAL_GetTick>
 801ca5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ca5e:	e008      	b.n	801ca72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ca60:	f7fe fd60 	bl	801b524 <HAL_GetTick>
 801ca64:	4602      	mov	r2, r0
 801ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca68:	1ad3      	subs	r3, r2, r3
 801ca6a:	2b02      	cmp	r3, #2
 801ca6c:	d901      	bls.n	801ca72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801ca6e:	2303      	movs	r3, #3
 801ca70:	e10e      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ca72:	4b39      	ldr	r3, [pc, #228]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d1f0      	bne.n	801ca60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ca7e:	4b36      	ldr	r3, [pc, #216]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ca82:	4b37      	ldr	r3, [pc, #220]	@ (801cb60 <HAL_RCC_OscConfig+0x774>)
 801ca84:	4013      	ands	r3, r2
 801ca86:	687a      	ldr	r2, [r7, #4]
 801ca88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801ca8a:	687a      	ldr	r2, [r7, #4]
 801ca8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801ca8e:	0112      	lsls	r2, r2, #4
 801ca90:	430a      	orrs	r2, r1
 801ca92:	4931      	ldr	r1, [pc, #196]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801ca94:	4313      	orrs	r3, r2
 801ca96:	628b      	str	r3, [r1, #40]	@ 0x28
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ca9c:	3b01      	subs	r3, #1
 801ca9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801caa6:	3b01      	subs	r3, #1
 801caa8:	025b      	lsls	r3, r3, #9
 801caaa:	b29b      	uxth	r3, r3
 801caac:	431a      	orrs	r2, r3
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cab2:	3b01      	subs	r3, #1
 801cab4:	041b      	lsls	r3, r3, #16
 801cab6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801caba:	431a      	orrs	r2, r3
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cac0:	3b01      	subs	r3, #1
 801cac2:	061b      	lsls	r3, r3, #24
 801cac4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801cac8:	4923      	ldr	r1, [pc, #140]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801caca:	4313      	orrs	r3, r2
 801cacc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801cace:	4b22      	ldr	r3, [pc, #136]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cad2:	4a21      	ldr	r2, [pc, #132]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cad4:	f023 0301 	bic.w	r3, r3, #1
 801cad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cada:	4b1f      	ldr	r3, [pc, #124]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cadc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cade:	4b21      	ldr	r3, [pc, #132]	@ (801cb64 <HAL_RCC_OscConfig+0x778>)
 801cae0:	4013      	ands	r3, r2
 801cae2:	687a      	ldr	r2, [r7, #4]
 801cae4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cae6:	00d2      	lsls	r2, r2, #3
 801cae8:	491b      	ldr	r1, [pc, #108]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801caea:	4313      	orrs	r3, r2
 801caec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801caee:	4b1a      	ldr	r3, [pc, #104]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801caf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801caf2:	f023 020c 	bic.w	r2, r3, #12
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cafa:	4917      	ldr	r1, [pc, #92]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cafc:	4313      	orrs	r3, r2
 801cafe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801cb00:	4b15      	ldr	r3, [pc, #84]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb04:	f023 0202 	bic.w	r2, r3, #2
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cb0c:	4912      	ldr	r1, [pc, #72]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb0e:	4313      	orrs	r3, r2
 801cb10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801cb12:	4b11      	ldr	r3, [pc, #68]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb16:	4a10      	ldr	r2, [pc, #64]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cb1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb1e:	4b0e      	ldr	r3, [pc, #56]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb22:	4a0d      	ldr	r2, [pc, #52]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cb28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801cb2a:	4b0b      	ldr	r3, [pc, #44]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb2e:	4a0a      	ldr	r2, [pc, #40]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cb34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801cb36:	4b08      	ldr	r3, [pc, #32]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb3a:	4a07      	ldr	r2, [pc, #28]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb3c:	f043 0301 	orr.w	r3, r3, #1
 801cb40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801cb42:	4b05      	ldr	r3, [pc, #20]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	4a04      	ldr	r2, [pc, #16]	@ (801cb58 <HAL_RCC_OscConfig+0x76c>)
 801cb48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cb4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb4e:	f7fe fce9 	bl	801b524 <HAL_GetTick>
 801cb52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cb54:	e011      	b.n	801cb7a <HAL_RCC_OscConfig+0x78e>
 801cb56:	bf00      	nop
 801cb58:	58024400 	.word	0x58024400
 801cb5c:	58024800 	.word	0x58024800
 801cb60:	fffffc0c 	.word	0xfffffc0c
 801cb64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cb68:	f7fe fcdc 	bl	801b524 <HAL_GetTick>
 801cb6c:	4602      	mov	r2, r0
 801cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb70:	1ad3      	subs	r3, r2, r3
 801cb72:	2b02      	cmp	r3, #2
 801cb74:	d901      	bls.n	801cb7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801cb76:	2303      	movs	r3, #3
 801cb78:	e08a      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cb7a:	4b47      	ldr	r3, [pc, #284]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d0f0      	beq.n	801cb68 <HAL_RCC_OscConfig+0x77c>
 801cb86:	e082      	b.n	801cc8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cb88:	4b43      	ldr	r3, [pc, #268]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	4a42      	ldr	r2, [pc, #264]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cb8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cb92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb94:	f7fe fcc6 	bl	801b524 <HAL_GetTick>
 801cb98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cb9a:	e008      	b.n	801cbae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cb9c:	f7fe fcc2 	bl	801b524 <HAL_GetTick>
 801cba0:	4602      	mov	r2, r0
 801cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba4:	1ad3      	subs	r3, r2, r3
 801cba6:	2b02      	cmp	r3, #2
 801cba8:	d901      	bls.n	801cbae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801cbaa:	2303      	movs	r3, #3
 801cbac:	e070      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cbae:	4b3a      	ldr	r3, [pc, #232]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d1f0      	bne.n	801cb9c <HAL_RCC_OscConfig+0x7b0>
 801cbba:	e068      	b.n	801cc8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801cbbc:	4b36      	ldr	r3, [pc, #216]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cbc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801cbc2:	4b35      	ldr	r3, [pc, #212]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbcc:	2b01      	cmp	r3, #1
 801cbce:	d031      	beq.n	801cc34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cbd0:	693b      	ldr	r3, [r7, #16]
 801cbd2:	f003 0203 	and.w	r2, r3, #3
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d12a      	bne.n	801cc34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cbde:	693b      	ldr	r3, [r7, #16]
 801cbe0:	091b      	lsrs	r3, r3, #4
 801cbe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cbea:	429a      	cmp	r2, r3
 801cbec:	d122      	bne.n	801cc34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cbfa:	429a      	cmp	r2, r3
 801cbfc:	d11a      	bne.n	801cc34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cbfe:	68fb      	ldr	r3, [r7, #12]
 801cc00:	0a5b      	lsrs	r3, r3, #9
 801cc02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	d111      	bne.n	801cc34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	0c1b      	lsrs	r3, r3, #16
 801cc14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cc1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cc1e:	429a      	cmp	r2, r3
 801cc20:	d108      	bne.n	801cc34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	0e1b      	lsrs	r3, r3, #24
 801cc26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cc2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cc30:	429a      	cmp	r2, r3
 801cc32:	d001      	beq.n	801cc38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801cc34:	2301      	movs	r3, #1
 801cc36:	e02b      	b.n	801cc90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801cc38:	4b17      	ldr	r3, [pc, #92]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc3c:	08db      	lsrs	r3, r3, #3
 801cc3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cc48:	693a      	ldr	r2, [r7, #16]
 801cc4a:	429a      	cmp	r2, r3
 801cc4c:	d01f      	beq.n	801cc8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801cc4e:	4b12      	ldr	r3, [pc, #72]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc52:	4a11      	ldr	r2, [pc, #68]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc54:	f023 0301 	bic.w	r3, r3, #1
 801cc58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801cc5a:	f7fe fc63 	bl	801b524 <HAL_GetTick>
 801cc5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801cc60:	bf00      	nop
 801cc62:	f7fe fc5f 	bl	801b524 <HAL_GetTick>
 801cc66:	4602      	mov	r2, r0
 801cc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc6a:	4293      	cmp	r3, r2
 801cc6c:	d0f9      	beq.n	801cc62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cc6e:	4b0a      	ldr	r3, [pc, #40]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cc72:	4b0a      	ldr	r3, [pc, #40]	@ (801cc9c <HAL_RCC_OscConfig+0x8b0>)
 801cc74:	4013      	ands	r3, r2
 801cc76:	687a      	ldr	r2, [r7, #4]
 801cc78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cc7a:	00d2      	lsls	r2, r2, #3
 801cc7c:	4906      	ldr	r1, [pc, #24]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc7e:	4313      	orrs	r3, r2
 801cc80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801cc82:	4b05      	ldr	r3, [pc, #20]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc86:	4a04      	ldr	r2, [pc, #16]	@ (801cc98 <HAL_RCC_OscConfig+0x8ac>)
 801cc88:	f043 0301 	orr.w	r3, r3, #1
 801cc8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801cc8e:	2300      	movs	r3, #0
}
 801cc90:	4618      	mov	r0, r3
 801cc92:	3730      	adds	r7, #48	@ 0x30
 801cc94:	46bd      	mov	sp, r7
 801cc96:	bd80      	pop	{r7, pc}
 801cc98:	58024400 	.word	0x58024400
 801cc9c:	ffff0007 	.word	0xffff0007

0801cca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801cca0:	b580      	push	{r7, lr}
 801cca2:	b086      	sub	sp, #24
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	6078      	str	r0, [r7, #4]
 801cca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d101      	bne.n	801ccb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ccb0:	2301      	movs	r3, #1
 801ccb2:	e19c      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ccb4:	4b8a      	ldr	r3, [pc, #552]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	f003 030f 	and.w	r3, r3, #15
 801ccbc:	683a      	ldr	r2, [r7, #0]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	d910      	bls.n	801cce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ccc2:	4b87      	ldr	r3, [pc, #540]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	f023 020f 	bic.w	r2, r3, #15
 801ccca:	4985      	ldr	r1, [pc, #532]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	4313      	orrs	r3, r2
 801ccd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ccd2:	4b83      	ldr	r3, [pc, #524]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	f003 030f 	and.w	r3, r3, #15
 801ccda:	683a      	ldr	r2, [r7, #0]
 801ccdc:	429a      	cmp	r2, r3
 801ccde:	d001      	beq.n	801cce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801cce0:	2301      	movs	r3, #1
 801cce2:	e184      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	f003 0304 	and.w	r3, r3, #4
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d010      	beq.n	801cd12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	691a      	ldr	r2, [r3, #16]
 801ccf4:	4b7b      	ldr	r3, [pc, #492]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ccf6:	699b      	ldr	r3, [r3, #24]
 801ccf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ccfc:	429a      	cmp	r2, r3
 801ccfe:	d908      	bls.n	801cd12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cd00:	4b78      	ldr	r3, [pc, #480]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd02:	699b      	ldr	r3, [r3, #24]
 801cd04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	691b      	ldr	r3, [r3, #16]
 801cd0c:	4975      	ldr	r1, [pc, #468]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd0e:	4313      	orrs	r3, r2
 801cd10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	f003 0308 	and.w	r3, r3, #8
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d010      	beq.n	801cd40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	695a      	ldr	r2, [r3, #20]
 801cd22:	4b70      	ldr	r3, [pc, #448]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd24:	69db      	ldr	r3, [r3, #28]
 801cd26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cd2a:	429a      	cmp	r2, r3
 801cd2c:	d908      	bls.n	801cd40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cd2e:	4b6d      	ldr	r3, [pc, #436]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd30:	69db      	ldr	r3, [r3, #28]
 801cd32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	695b      	ldr	r3, [r3, #20]
 801cd3a:	496a      	ldr	r1, [pc, #424]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd3c:	4313      	orrs	r3, r2
 801cd3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	f003 0310 	and.w	r3, r3, #16
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d010      	beq.n	801cd6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	699a      	ldr	r2, [r3, #24]
 801cd50:	4b64      	ldr	r3, [pc, #400]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd52:	69db      	ldr	r3, [r3, #28]
 801cd54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cd58:	429a      	cmp	r2, r3
 801cd5a:	d908      	bls.n	801cd6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cd5c:	4b61      	ldr	r3, [pc, #388]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd5e:	69db      	ldr	r3, [r3, #28]
 801cd60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	699b      	ldr	r3, [r3, #24]
 801cd68:	495e      	ldr	r1, [pc, #376]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd6a:	4313      	orrs	r3, r2
 801cd6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	f003 0320 	and.w	r3, r3, #32
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d010      	beq.n	801cd9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	69da      	ldr	r2, [r3, #28]
 801cd7e:	4b59      	ldr	r3, [pc, #356]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd80:	6a1b      	ldr	r3, [r3, #32]
 801cd82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cd86:	429a      	cmp	r2, r3
 801cd88:	d908      	bls.n	801cd9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cd8a:	4b56      	ldr	r3, [pc, #344]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd8c:	6a1b      	ldr	r3, [r3, #32]
 801cd8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	69db      	ldr	r3, [r3, #28]
 801cd96:	4953      	ldr	r1, [pc, #332]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cd98:	4313      	orrs	r3, r2
 801cd9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	681b      	ldr	r3, [r3, #0]
 801cda0:	f003 0302 	and.w	r3, r3, #2
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d010      	beq.n	801cdca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	68da      	ldr	r2, [r3, #12]
 801cdac:	4b4d      	ldr	r3, [pc, #308]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cdae:	699b      	ldr	r3, [r3, #24]
 801cdb0:	f003 030f 	and.w	r3, r3, #15
 801cdb4:	429a      	cmp	r2, r3
 801cdb6:	d908      	bls.n	801cdca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cdb8:	4b4a      	ldr	r3, [pc, #296]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cdba:	699b      	ldr	r3, [r3, #24]
 801cdbc:	f023 020f 	bic.w	r2, r3, #15
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	68db      	ldr	r3, [r3, #12]
 801cdc4:	4947      	ldr	r1, [pc, #284]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cdc6:	4313      	orrs	r3, r2
 801cdc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	f003 0301 	and.w	r3, r3, #1
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d055      	beq.n	801ce82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801cdd6:	4b43      	ldr	r3, [pc, #268]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cdd8:	699b      	ldr	r3, [r3, #24]
 801cdda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	689b      	ldr	r3, [r3, #8]
 801cde2:	4940      	ldr	r1, [pc, #256]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cde4:	4313      	orrs	r3, r2
 801cde6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	685b      	ldr	r3, [r3, #4]
 801cdec:	2b02      	cmp	r3, #2
 801cdee:	d107      	bne.n	801ce00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cdf0:	4b3c      	ldr	r3, [pc, #240]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d121      	bne.n	801ce40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cdfc:	2301      	movs	r3, #1
 801cdfe:	e0f6      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	685b      	ldr	r3, [r3, #4]
 801ce04:	2b03      	cmp	r3, #3
 801ce06:	d107      	bne.n	801ce18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ce08:	4b36      	ldr	r3, [pc, #216]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d115      	bne.n	801ce40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce14:	2301      	movs	r3, #1
 801ce16:	e0ea      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	685b      	ldr	r3, [r3, #4]
 801ce1c:	2b01      	cmp	r3, #1
 801ce1e:	d107      	bne.n	801ce30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ce20:	4b30      	ldr	r3, [pc, #192]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d109      	bne.n	801ce40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce2c:	2301      	movs	r3, #1
 801ce2e:	e0de      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ce30:	4b2c      	ldr	r3, [pc, #176]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	f003 0304 	and.w	r3, r3, #4
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d101      	bne.n	801ce40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce3c:	2301      	movs	r3, #1
 801ce3e:	e0d6      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801ce40:	4b28      	ldr	r3, [pc, #160]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce42:	691b      	ldr	r3, [r3, #16]
 801ce44:	f023 0207 	bic.w	r2, r3, #7
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	685b      	ldr	r3, [r3, #4]
 801ce4c:	4925      	ldr	r1, [pc, #148]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce4e:	4313      	orrs	r3, r2
 801ce50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ce52:	f7fe fb67 	bl	801b524 <HAL_GetTick>
 801ce56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ce58:	e00a      	b.n	801ce70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ce5a:	f7fe fb63 	bl	801b524 <HAL_GetTick>
 801ce5e:	4602      	mov	r2, r0
 801ce60:	697b      	ldr	r3, [r7, #20]
 801ce62:	1ad3      	subs	r3, r2, r3
 801ce64:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ce68:	4293      	cmp	r3, r2
 801ce6a:	d901      	bls.n	801ce70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801ce6c:	2303      	movs	r3, #3
 801ce6e:	e0be      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ce70:	4b1c      	ldr	r3, [pc, #112]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce72:	691b      	ldr	r3, [r3, #16]
 801ce74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	685b      	ldr	r3, [r3, #4]
 801ce7c:	00db      	lsls	r3, r3, #3
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	d1eb      	bne.n	801ce5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	f003 0302 	and.w	r3, r3, #2
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d010      	beq.n	801ceb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	68da      	ldr	r2, [r3, #12]
 801ce92:	4b14      	ldr	r3, [pc, #80]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ce94:	699b      	ldr	r3, [r3, #24]
 801ce96:	f003 030f 	and.w	r3, r3, #15
 801ce9a:	429a      	cmp	r2, r3
 801ce9c:	d208      	bcs.n	801ceb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ce9e:	4b11      	ldr	r3, [pc, #68]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801cea0:	699b      	ldr	r3, [r3, #24]
 801cea2:	f023 020f 	bic.w	r2, r3, #15
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	68db      	ldr	r3, [r3, #12]
 801ceaa:	490e      	ldr	r1, [pc, #56]	@ (801cee4 <HAL_RCC_ClockConfig+0x244>)
 801ceac:	4313      	orrs	r3, r2
 801ceae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801ceb0:	4b0b      	ldr	r3, [pc, #44]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	f003 030f 	and.w	r3, r3, #15
 801ceb8:	683a      	ldr	r2, [r7, #0]
 801ceba:	429a      	cmp	r2, r3
 801cebc:	d214      	bcs.n	801cee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cebe:	4b08      	ldr	r3, [pc, #32]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	f023 020f 	bic.w	r2, r3, #15
 801cec6:	4906      	ldr	r1, [pc, #24]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	4313      	orrs	r3, r2
 801cecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cece:	4b04      	ldr	r3, [pc, #16]	@ (801cee0 <HAL_RCC_ClockConfig+0x240>)
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	f003 030f 	and.w	r3, r3, #15
 801ced6:	683a      	ldr	r2, [r7, #0]
 801ced8:	429a      	cmp	r2, r3
 801ceda:	d005      	beq.n	801cee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801cedc:	2301      	movs	r3, #1
 801cede:	e086      	b.n	801cfee <HAL_RCC_ClockConfig+0x34e>
 801cee0:	52002000 	.word	0x52002000
 801cee4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	f003 0304 	and.w	r3, r3, #4
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d010      	beq.n	801cf16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	691a      	ldr	r2, [r3, #16]
 801cef8:	4b3f      	ldr	r3, [pc, #252]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cefa:	699b      	ldr	r3, [r3, #24]
 801cefc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf00:	429a      	cmp	r2, r3
 801cf02:	d208      	bcs.n	801cf16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cf04:	4b3c      	ldr	r3, [pc, #240]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf06:	699b      	ldr	r3, [r3, #24]
 801cf08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	691b      	ldr	r3, [r3, #16]
 801cf10:	4939      	ldr	r1, [pc, #228]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf12:	4313      	orrs	r3, r2
 801cf14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	f003 0308 	and.w	r3, r3, #8
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d010      	beq.n	801cf44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	695a      	ldr	r2, [r3, #20]
 801cf26:	4b34      	ldr	r3, [pc, #208]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf28:	69db      	ldr	r3, [r3, #28]
 801cf2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf2e:	429a      	cmp	r2, r3
 801cf30:	d208      	bcs.n	801cf44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cf32:	4b31      	ldr	r3, [pc, #196]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf34:	69db      	ldr	r3, [r3, #28]
 801cf36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	695b      	ldr	r3, [r3, #20]
 801cf3e:	492e      	ldr	r1, [pc, #184]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf40:	4313      	orrs	r3, r2
 801cf42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	f003 0310 	and.w	r3, r3, #16
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d010      	beq.n	801cf72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	699a      	ldr	r2, [r3, #24]
 801cf54:	4b28      	ldr	r3, [pc, #160]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf56:	69db      	ldr	r3, [r3, #28]
 801cf58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	d208      	bcs.n	801cf72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cf60:	4b25      	ldr	r3, [pc, #148]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf62:	69db      	ldr	r3, [r3, #28]
 801cf64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	699b      	ldr	r3, [r3, #24]
 801cf6c:	4922      	ldr	r1, [pc, #136]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf6e:	4313      	orrs	r3, r2
 801cf70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	f003 0320 	and.w	r3, r3, #32
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d010      	beq.n	801cfa0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	69da      	ldr	r2, [r3, #28]
 801cf82:	4b1d      	ldr	r3, [pc, #116]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf84:	6a1b      	ldr	r3, [r3, #32]
 801cf86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf8a:	429a      	cmp	r2, r3
 801cf8c:	d208      	bcs.n	801cfa0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cf8e:	4b1a      	ldr	r3, [pc, #104]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf90:	6a1b      	ldr	r3, [r3, #32]
 801cf92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	69db      	ldr	r3, [r3, #28]
 801cf9a:	4917      	ldr	r1, [pc, #92]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cf9c:	4313      	orrs	r3, r2
 801cf9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801cfa0:	f000 f834 	bl	801d00c <HAL_RCC_GetSysClockFreq>
 801cfa4:	4602      	mov	r2, r0
 801cfa6:	4b14      	ldr	r3, [pc, #80]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cfa8:	699b      	ldr	r3, [r3, #24]
 801cfaa:	0a1b      	lsrs	r3, r3, #8
 801cfac:	f003 030f 	and.w	r3, r3, #15
 801cfb0:	4912      	ldr	r1, [pc, #72]	@ (801cffc <HAL_RCC_ClockConfig+0x35c>)
 801cfb2:	5ccb      	ldrb	r3, [r1, r3]
 801cfb4:	f003 031f 	and.w	r3, r3, #31
 801cfb8:	fa22 f303 	lsr.w	r3, r2, r3
 801cfbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cfbe:	4b0e      	ldr	r3, [pc, #56]	@ (801cff8 <HAL_RCC_ClockConfig+0x358>)
 801cfc0:	699b      	ldr	r3, [r3, #24]
 801cfc2:	f003 030f 	and.w	r3, r3, #15
 801cfc6:	4a0d      	ldr	r2, [pc, #52]	@ (801cffc <HAL_RCC_ClockConfig+0x35c>)
 801cfc8:	5cd3      	ldrb	r3, [r2, r3]
 801cfca:	f003 031f 	and.w	r3, r3, #31
 801cfce:	693a      	ldr	r2, [r7, #16]
 801cfd0:	fa22 f303 	lsr.w	r3, r2, r3
 801cfd4:	4a0a      	ldr	r2, [pc, #40]	@ (801d000 <HAL_RCC_ClockConfig+0x360>)
 801cfd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cfd8:	4a0a      	ldr	r2, [pc, #40]	@ (801d004 <HAL_RCC_ClockConfig+0x364>)
 801cfda:	693b      	ldr	r3, [r7, #16]
 801cfdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801cfde:	4b0a      	ldr	r3, [pc, #40]	@ (801d008 <HAL_RCC_ClockConfig+0x368>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f7fe f8e8 	bl	801b1b8 <HAL_InitTick>
 801cfe8:	4603      	mov	r3, r0
 801cfea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801cfec:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfee:	4618      	mov	r0, r3
 801cff0:	3718      	adds	r7, #24
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	58024400 	.word	0x58024400
 801cffc:	0802bdbc 	.word	0x0802bdbc
 801d000:	24000004 	.word	0x24000004
 801d004:	24000000 	.word	0x24000000
 801d008:	24000798 	.word	0x24000798

0801d00c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d00c:	b480      	push	{r7}
 801d00e:	b089      	sub	sp, #36	@ 0x24
 801d010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d012:	4bb3      	ldr	r3, [pc, #716]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d014:	691b      	ldr	r3, [r3, #16]
 801d016:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d01a:	2b18      	cmp	r3, #24
 801d01c:	f200 8155 	bhi.w	801d2ca <HAL_RCC_GetSysClockFreq+0x2be>
 801d020:	a201      	add	r2, pc, #4	@ (adr r2, 801d028 <HAL_RCC_GetSysClockFreq+0x1c>)
 801d022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d026:	bf00      	nop
 801d028:	0801d08d 	.word	0x0801d08d
 801d02c:	0801d2cb 	.word	0x0801d2cb
 801d030:	0801d2cb 	.word	0x0801d2cb
 801d034:	0801d2cb 	.word	0x0801d2cb
 801d038:	0801d2cb 	.word	0x0801d2cb
 801d03c:	0801d2cb 	.word	0x0801d2cb
 801d040:	0801d2cb 	.word	0x0801d2cb
 801d044:	0801d2cb 	.word	0x0801d2cb
 801d048:	0801d0b3 	.word	0x0801d0b3
 801d04c:	0801d2cb 	.word	0x0801d2cb
 801d050:	0801d2cb 	.word	0x0801d2cb
 801d054:	0801d2cb 	.word	0x0801d2cb
 801d058:	0801d2cb 	.word	0x0801d2cb
 801d05c:	0801d2cb 	.word	0x0801d2cb
 801d060:	0801d2cb 	.word	0x0801d2cb
 801d064:	0801d2cb 	.word	0x0801d2cb
 801d068:	0801d0b9 	.word	0x0801d0b9
 801d06c:	0801d2cb 	.word	0x0801d2cb
 801d070:	0801d2cb 	.word	0x0801d2cb
 801d074:	0801d2cb 	.word	0x0801d2cb
 801d078:	0801d2cb 	.word	0x0801d2cb
 801d07c:	0801d2cb 	.word	0x0801d2cb
 801d080:	0801d2cb 	.word	0x0801d2cb
 801d084:	0801d2cb 	.word	0x0801d2cb
 801d088:	0801d0bf 	.word	0x0801d0bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d08c:	4b94      	ldr	r3, [pc, #592]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	f003 0320 	and.w	r3, r3, #32
 801d094:	2b00      	cmp	r3, #0
 801d096:	d009      	beq.n	801d0ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d098:	4b91      	ldr	r3, [pc, #580]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	08db      	lsrs	r3, r3, #3
 801d09e:	f003 0303 	and.w	r3, r3, #3
 801d0a2:	4a90      	ldr	r2, [pc, #576]	@ (801d2e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d0a4:	fa22 f303 	lsr.w	r3, r2, r3
 801d0a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801d0aa:	e111      	b.n	801d2d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801d0ac:	4b8d      	ldr	r3, [pc, #564]	@ (801d2e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d0ae:	61bb      	str	r3, [r7, #24]
      break;
 801d0b0:	e10e      	b.n	801d2d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801d0b2:	4b8d      	ldr	r3, [pc, #564]	@ (801d2e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d0b4:	61bb      	str	r3, [r7, #24]
      break;
 801d0b6:	e10b      	b.n	801d2d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801d0b8:	4b8c      	ldr	r3, [pc, #560]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 801d0ba:	61bb      	str	r3, [r7, #24]
      break;
 801d0bc:	e108      	b.n	801d2d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d0be:	4b88      	ldr	r3, [pc, #544]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0c2:	f003 0303 	and.w	r3, r3, #3
 801d0c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801d0c8:	4b85      	ldr	r3, [pc, #532]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0cc:	091b      	lsrs	r3, r3, #4
 801d0ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d0d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801d0d4:	4b82      	ldr	r3, [pc, #520]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0d8:	f003 0301 	and.w	r3, r3, #1
 801d0dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d0de:	4b80      	ldr	r3, [pc, #512]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d0e2:	08db      	lsrs	r3, r3, #3
 801d0e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d0e8:	68fa      	ldr	r2, [r7, #12]
 801d0ea:	fb02 f303 	mul.w	r3, r2, r3
 801d0ee:	ee07 3a90 	vmov	s15, r3
 801d0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d0fa:	693b      	ldr	r3, [r7, #16]
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	f000 80e1 	beq.w	801d2c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 801d102:	697b      	ldr	r3, [r7, #20]
 801d104:	2b02      	cmp	r3, #2
 801d106:	f000 8083 	beq.w	801d210 <HAL_RCC_GetSysClockFreq+0x204>
 801d10a:	697b      	ldr	r3, [r7, #20]
 801d10c:	2b02      	cmp	r3, #2
 801d10e:	f200 80a1 	bhi.w	801d254 <HAL_RCC_GetSysClockFreq+0x248>
 801d112:	697b      	ldr	r3, [r7, #20]
 801d114:	2b00      	cmp	r3, #0
 801d116:	d003      	beq.n	801d120 <HAL_RCC_GetSysClockFreq+0x114>
 801d118:	697b      	ldr	r3, [r7, #20]
 801d11a:	2b01      	cmp	r3, #1
 801d11c:	d056      	beq.n	801d1cc <HAL_RCC_GetSysClockFreq+0x1c0>
 801d11e:	e099      	b.n	801d254 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d120:	4b6f      	ldr	r3, [pc, #444]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	f003 0320 	and.w	r3, r3, #32
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d02d      	beq.n	801d188 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d12c:	4b6c      	ldr	r3, [pc, #432]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	08db      	lsrs	r3, r3, #3
 801d132:	f003 0303 	and.w	r3, r3, #3
 801d136:	4a6b      	ldr	r2, [pc, #428]	@ (801d2e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d138:	fa22 f303 	lsr.w	r3, r2, r3
 801d13c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	ee07 3a90 	vmov	s15, r3
 801d144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d148:	693b      	ldr	r3, [r7, #16]
 801d14a:	ee07 3a90 	vmov	s15, r3
 801d14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d156:	4b62      	ldr	r3, [pc, #392]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d15e:	ee07 3a90 	vmov	s15, r3
 801d162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d166:	ed97 6a02 	vldr	s12, [r7, #8]
 801d16a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d2f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d182:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d186:	e087      	b.n	801d298 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d188:	693b      	ldr	r3, [r7, #16]
 801d18a:	ee07 3a90 	vmov	s15, r3
 801d18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d192:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d2f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 801d196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d19a:	4b51      	ldr	r3, [pc, #324]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1a2:	ee07 3a90 	vmov	s15, r3
 801d1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1aa:	ed97 6a02 	vldr	s12, [r7, #8]
 801d1ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d2f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d1ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d1c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d1ca:	e065      	b.n	801d298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d1cc:	693b      	ldr	r3, [r7, #16]
 801d1ce:	ee07 3a90 	vmov	s15, r3
 801d1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d2f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1de:	4b40      	ldr	r3, [pc, #256]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1e6:	ee07 3a90 	vmov	s15, r3
 801d1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1ee:	ed97 6a02 	vldr	s12, [r7, #8]
 801d1f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d2f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d1fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d206:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d20a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d20e:	e043      	b.n	801d298 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d210:	693b      	ldr	r3, [r7, #16]
 801d212:	ee07 3a90 	vmov	s15, r3
 801d216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d21a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d2fc <HAL_RCC_GetSysClockFreq+0x2f0>
 801d21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d222:	4b2f      	ldr	r3, [pc, #188]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d22a:	ee07 3a90 	vmov	s15, r3
 801d22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d232:	ed97 6a02 	vldr	s12, [r7, #8]
 801d236:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d2f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d24e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d252:	e021      	b.n	801d298 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d254:	693b      	ldr	r3, [r7, #16]
 801d256:	ee07 3a90 	vmov	s15, r3
 801d25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d25e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d2f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d266:	4b1e      	ldr	r3, [pc, #120]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d26e:	ee07 3a90 	vmov	s15, r3
 801d272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d276:	ed97 6a02 	vldr	s12, [r7, #8]
 801d27a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d2f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d296:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d298:	4b11      	ldr	r3, [pc, #68]	@ (801d2e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d29c:	0a5b      	lsrs	r3, r3, #9
 801d29e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d2a2:	3301      	adds	r3, #1
 801d2a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	ee07 3a90 	vmov	s15, r3
 801d2ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d2b0:	edd7 6a07 	vldr	s13, [r7, #28]
 801d2b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d2bc:	ee17 3a90 	vmov	r3, s15
 801d2c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d2c2:	e005      	b.n	801d2d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	61bb      	str	r3, [r7, #24]
      break;
 801d2c8:	e002      	b.n	801d2d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d2ca:	4b07      	ldr	r3, [pc, #28]	@ (801d2e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d2cc:	61bb      	str	r3, [r7, #24]
      break;
 801d2ce:	bf00      	nop
  }

  return sysclockfreq;
 801d2d0:	69bb      	ldr	r3, [r7, #24]
}
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	3724      	adds	r7, #36	@ 0x24
 801d2d6:	46bd      	mov	sp, r7
 801d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2dc:	4770      	bx	lr
 801d2de:	bf00      	nop
 801d2e0:	58024400 	.word	0x58024400
 801d2e4:	03d09000 	.word	0x03d09000
 801d2e8:	003d0900 	.word	0x003d0900
 801d2ec:	007a1200 	.word	0x007a1200
 801d2f0:	46000000 	.word	0x46000000
 801d2f4:	4c742400 	.word	0x4c742400
 801d2f8:	4a742400 	.word	0x4a742400
 801d2fc:	4af42400 	.word	0x4af42400

0801d300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d300:	b580      	push	{r7, lr}
 801d302:	b082      	sub	sp, #8
 801d304:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d306:	f7ff fe81 	bl	801d00c <HAL_RCC_GetSysClockFreq>
 801d30a:	4602      	mov	r2, r0
 801d30c:	4b10      	ldr	r3, [pc, #64]	@ (801d350 <HAL_RCC_GetHCLKFreq+0x50>)
 801d30e:	699b      	ldr	r3, [r3, #24]
 801d310:	0a1b      	lsrs	r3, r3, #8
 801d312:	f003 030f 	and.w	r3, r3, #15
 801d316:	490f      	ldr	r1, [pc, #60]	@ (801d354 <HAL_RCC_GetHCLKFreq+0x54>)
 801d318:	5ccb      	ldrb	r3, [r1, r3]
 801d31a:	f003 031f 	and.w	r3, r3, #31
 801d31e:	fa22 f303 	lsr.w	r3, r2, r3
 801d322:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d324:	4b0a      	ldr	r3, [pc, #40]	@ (801d350 <HAL_RCC_GetHCLKFreq+0x50>)
 801d326:	699b      	ldr	r3, [r3, #24]
 801d328:	f003 030f 	and.w	r3, r3, #15
 801d32c:	4a09      	ldr	r2, [pc, #36]	@ (801d354 <HAL_RCC_GetHCLKFreq+0x54>)
 801d32e:	5cd3      	ldrb	r3, [r2, r3]
 801d330:	f003 031f 	and.w	r3, r3, #31
 801d334:	687a      	ldr	r2, [r7, #4]
 801d336:	fa22 f303 	lsr.w	r3, r2, r3
 801d33a:	4a07      	ldr	r2, [pc, #28]	@ (801d358 <HAL_RCC_GetHCLKFreq+0x58>)
 801d33c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d33e:	4a07      	ldr	r2, [pc, #28]	@ (801d35c <HAL_RCC_GetHCLKFreq+0x5c>)
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d344:	4b04      	ldr	r3, [pc, #16]	@ (801d358 <HAL_RCC_GetHCLKFreq+0x58>)
 801d346:	681b      	ldr	r3, [r3, #0]
}
 801d348:	4618      	mov	r0, r3
 801d34a:	3708      	adds	r7, #8
 801d34c:	46bd      	mov	sp, r7
 801d34e:	bd80      	pop	{r7, pc}
 801d350:	58024400 	.word	0x58024400
 801d354:	0802bdbc 	.word	0x0802bdbc
 801d358:	24000004 	.word	0x24000004
 801d35c:	24000000 	.word	0x24000000

0801d360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d364:	f7ff ffcc 	bl	801d300 <HAL_RCC_GetHCLKFreq>
 801d368:	4602      	mov	r2, r0
 801d36a:	4b06      	ldr	r3, [pc, #24]	@ (801d384 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d36c:	69db      	ldr	r3, [r3, #28]
 801d36e:	091b      	lsrs	r3, r3, #4
 801d370:	f003 0307 	and.w	r3, r3, #7
 801d374:	4904      	ldr	r1, [pc, #16]	@ (801d388 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d376:	5ccb      	ldrb	r3, [r1, r3]
 801d378:	f003 031f 	and.w	r3, r3, #31
 801d37c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d380:	4618      	mov	r0, r3
 801d382:	bd80      	pop	{r7, pc}
 801d384:	58024400 	.word	0x58024400
 801d388:	0802bdbc 	.word	0x0802bdbc

0801d38c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d38c:	b580      	push	{r7, lr}
 801d38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d390:	f7ff ffb6 	bl	801d300 <HAL_RCC_GetHCLKFreq>
 801d394:	4602      	mov	r2, r0
 801d396:	4b06      	ldr	r3, [pc, #24]	@ (801d3b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d398:	69db      	ldr	r3, [r3, #28]
 801d39a:	0a1b      	lsrs	r3, r3, #8
 801d39c:	f003 0307 	and.w	r3, r3, #7
 801d3a0:	4904      	ldr	r1, [pc, #16]	@ (801d3b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d3a2:	5ccb      	ldrb	r3, [r1, r3]
 801d3a4:	f003 031f 	and.w	r3, r3, #31
 801d3a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	bd80      	pop	{r7, pc}
 801d3b0:	58024400 	.word	0x58024400
 801d3b4:	0802bdbc 	.word	0x0802bdbc

0801d3b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801d3b8:	b480      	push	{r7}
 801d3ba:	b083      	sub	sp, #12
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
 801d3c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	223f      	movs	r2, #63	@ 0x3f
 801d3c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801d3c8:	4b1a      	ldr	r3, [pc, #104]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d3ca:	691b      	ldr	r3, [r3, #16]
 801d3cc:	f003 0207 	and.w	r2, r3, #7
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801d3d4:	4b17      	ldr	r3, [pc, #92]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d3d6:	699b      	ldr	r3, [r3, #24]
 801d3d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801d3e0:	4b14      	ldr	r3, [pc, #80]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d3e2:	699b      	ldr	r3, [r3, #24]
 801d3e4:	f003 020f 	and.w	r2, r3, #15
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801d3ec:	4b11      	ldr	r3, [pc, #68]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d3ee:	699b      	ldr	r3, [r3, #24]
 801d3f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801d3f8:	4b0e      	ldr	r3, [pc, #56]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d3fa:	69db      	ldr	r3, [r3, #28]
 801d3fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801d404:	4b0b      	ldr	r3, [pc, #44]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d406:	69db      	ldr	r3, [r3, #28]
 801d408:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801d410:	4b08      	ldr	r3, [pc, #32]	@ (801d434 <HAL_RCC_GetClockConfig+0x7c>)
 801d412:	6a1b      	ldr	r3, [r3, #32]
 801d414:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801d41c:	4b06      	ldr	r3, [pc, #24]	@ (801d438 <HAL_RCC_GetClockConfig+0x80>)
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	f003 020f 	and.w	r2, r3, #15
 801d424:	683b      	ldr	r3, [r7, #0]
 801d426:	601a      	str	r2, [r3, #0]
}
 801d428:	bf00      	nop
 801d42a:	370c      	adds	r7, #12
 801d42c:	46bd      	mov	sp, r7
 801d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d432:	4770      	bx	lr
 801d434:	58024400 	.word	0x58024400
 801d438:	52002000 	.word	0x52002000

0801d43c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d43c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d440:	b0ca      	sub	sp, #296	@ 0x128
 801d442:	af00      	add	r7, sp, #0
 801d444:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d448:	2300      	movs	r3, #0
 801d44a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d44e:	2300      	movs	r3, #0
 801d450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d45c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d460:	2500      	movs	r5, #0
 801d462:	ea54 0305 	orrs.w	r3, r4, r5
 801d466:	d049      	beq.n	801d4fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d46c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d46e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d472:	d02f      	beq.n	801d4d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d474:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d478:	d828      	bhi.n	801d4cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d47a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d47e:	d01a      	beq.n	801d4b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d484:	d822      	bhi.n	801d4cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d486:	2b00      	cmp	r3, #0
 801d488:	d003      	beq.n	801d492 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d48a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d48e:	d007      	beq.n	801d4a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d490:	e01c      	b.n	801d4cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d492:	4bb8      	ldr	r3, [pc, #736]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d496:	4ab7      	ldr	r2, [pc, #732]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d49c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d49e:	e01a      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4a4:	3308      	adds	r3, #8
 801d4a6:	2102      	movs	r1, #2
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f001 fc8f 	bl	801edcc <RCCEx_PLL2_Config>
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d4b4:	e00f      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4ba:	3328      	adds	r3, #40	@ 0x28
 801d4bc:	2102      	movs	r1, #2
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f001 fd36 	bl	801ef30 <RCCEx_PLL3_Config>
 801d4c4:	4603      	mov	r3, r0
 801d4c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d4ca:	e004      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d4cc:	2301      	movs	r3, #1
 801d4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d4d2:	e000      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d10a      	bne.n	801d4f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d4de:	4ba5      	ldr	r3, [pc, #660]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d4e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d4ec:	4aa1      	ldr	r2, [pc, #644]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d4ee:	430b      	orrs	r3, r1
 801d4f0:	6513      	str	r3, [r2, #80]	@ 0x50
 801d4f2:	e003      	b.n	801d4fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d4f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d504:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d508:	f04f 0900 	mov.w	r9, #0
 801d50c:	ea58 0309 	orrs.w	r3, r8, r9
 801d510:	d047      	beq.n	801d5a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d518:	2b04      	cmp	r3, #4
 801d51a:	d82a      	bhi.n	801d572 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d51c:	a201      	add	r2, pc, #4	@ (adr r2, 801d524 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d522:	bf00      	nop
 801d524:	0801d539 	.word	0x0801d539
 801d528:	0801d547 	.word	0x0801d547
 801d52c:	0801d55d 	.word	0x0801d55d
 801d530:	0801d57b 	.word	0x0801d57b
 801d534:	0801d57b 	.word	0x0801d57b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d538:	4b8e      	ldr	r3, [pc, #568]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d53c:	4a8d      	ldr	r2, [pc, #564]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d53e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d544:	e01a      	b.n	801d57c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d54a:	3308      	adds	r3, #8
 801d54c:	2100      	movs	r1, #0
 801d54e:	4618      	mov	r0, r3
 801d550:	f001 fc3c 	bl	801edcc <RCCEx_PLL2_Config>
 801d554:	4603      	mov	r3, r0
 801d556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d55a:	e00f      	b.n	801d57c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d560:	3328      	adds	r3, #40	@ 0x28
 801d562:	2100      	movs	r1, #0
 801d564:	4618      	mov	r0, r3
 801d566:	f001 fce3 	bl	801ef30 <RCCEx_PLL3_Config>
 801d56a:	4603      	mov	r3, r0
 801d56c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d570:	e004      	b.n	801d57c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d572:	2301      	movs	r3, #1
 801d574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d578:	e000      	b.n	801d57c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d57a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d57c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d580:	2b00      	cmp	r3, #0
 801d582:	d10a      	bne.n	801d59a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d584:	4b7b      	ldr	r3, [pc, #492]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d588:	f023 0107 	bic.w	r1, r3, #7
 801d58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d592:	4a78      	ldr	r2, [pc, #480]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d594:	430b      	orrs	r3, r1
 801d596:	6513      	str	r3, [r2, #80]	@ 0x50
 801d598:	e003      	b.n	801d5a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d59a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d59e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d5ae:	f04f 0b00 	mov.w	fp, #0
 801d5b2:	ea5a 030b 	orrs.w	r3, sl, fp
 801d5b6:	d04c      	beq.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d5be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d5c2:	d030      	beq.n	801d626 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d5c8:	d829      	bhi.n	801d61e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d5ca:	2bc0      	cmp	r3, #192	@ 0xc0
 801d5cc:	d02d      	beq.n	801d62a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d5ce:	2bc0      	cmp	r3, #192	@ 0xc0
 801d5d0:	d825      	bhi.n	801d61e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d5d2:	2b80      	cmp	r3, #128	@ 0x80
 801d5d4:	d018      	beq.n	801d608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d5d6:	2b80      	cmp	r3, #128	@ 0x80
 801d5d8:	d821      	bhi.n	801d61e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d002      	beq.n	801d5e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d5de:	2b40      	cmp	r3, #64	@ 0x40
 801d5e0:	d007      	beq.n	801d5f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d5e2:	e01c      	b.n	801d61e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d5e4:	4b63      	ldr	r3, [pc, #396]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5e8:	4a62      	ldr	r2, [pc, #392]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d5ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d5ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d5f0:	e01c      	b.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5f6:	3308      	adds	r3, #8
 801d5f8:	2100      	movs	r1, #0
 801d5fa:	4618      	mov	r0, r3
 801d5fc:	f001 fbe6 	bl	801edcc <RCCEx_PLL2_Config>
 801d600:	4603      	mov	r3, r0
 801d602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d606:	e011      	b.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d60c:	3328      	adds	r3, #40	@ 0x28
 801d60e:	2100      	movs	r1, #0
 801d610:	4618      	mov	r0, r3
 801d612:	f001 fc8d 	bl	801ef30 <RCCEx_PLL3_Config>
 801d616:	4603      	mov	r3, r0
 801d618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d61c:	e006      	b.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d61e:	2301      	movs	r3, #1
 801d620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d624:	e002      	b.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d626:	bf00      	nop
 801d628:	e000      	b.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d62a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d62c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d630:	2b00      	cmp	r3, #0
 801d632:	d10a      	bne.n	801d64a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d634:	4b4f      	ldr	r3, [pc, #316]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d638:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d642:	4a4c      	ldr	r2, [pc, #304]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d644:	430b      	orrs	r3, r1
 801d646:	6513      	str	r3, [r2, #80]	@ 0x50
 801d648:	e003      	b.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d64a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d64e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d65e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d662:	2300      	movs	r3, #0
 801d664:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d668:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d66c:	460b      	mov	r3, r1
 801d66e:	4313      	orrs	r3, r2
 801d670:	d053      	beq.n	801d71a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d67a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d67e:	d035      	beq.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d680:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d684:	d82e      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d686:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d68a:	d031      	beq.n	801d6f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d68c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d690:	d828      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d696:	d01a      	beq.n	801d6ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d69c:	d822      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d003      	beq.n	801d6aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d6a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d6a6:	d007      	beq.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d6a8:	e01c      	b.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d6aa:	4b32      	ldr	r3, [pc, #200]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ae:	4a31      	ldr	r2, [pc, #196]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d6b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d6b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d6b6:	e01c      	b.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6bc:	3308      	adds	r3, #8
 801d6be:	2100      	movs	r1, #0
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f001 fb83 	bl	801edcc <RCCEx_PLL2_Config>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d6cc:	e011      	b.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6d2:	3328      	adds	r3, #40	@ 0x28
 801d6d4:	2100      	movs	r1, #0
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f001 fc2a 	bl	801ef30 <RCCEx_PLL3_Config>
 801d6dc:	4603      	mov	r3, r0
 801d6de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d6e2:	e006      	b.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d6e4:	2301      	movs	r3, #1
 801d6e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d6ea:	e002      	b.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d6ec:	bf00      	nop
 801d6ee:	e000      	b.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d10b      	bne.n	801d712 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d6fa:	4b1e      	ldr	r3, [pc, #120]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d6fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d70a:	4a1a      	ldr	r2, [pc, #104]	@ (801d774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d70c:	430b      	orrs	r3, r1
 801d70e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d710:	e003      	b.n	801d71a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d722:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d726:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d72a:	2300      	movs	r3, #0
 801d72c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d730:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d734:	460b      	mov	r3, r1
 801d736:	4313      	orrs	r3, r2
 801d738:	d056      	beq.n	801d7e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d73e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d746:	d038      	beq.n	801d7ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d74c:	d831      	bhi.n	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d74e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d752:	d034      	beq.n	801d7be <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d754:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d758:	d82b      	bhi.n	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d75a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d75e:	d01d      	beq.n	801d79c <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d764:	d825      	bhi.n	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d766:	2b00      	cmp	r3, #0
 801d768:	d006      	beq.n	801d778 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d76a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d76e:	d00a      	beq.n	801d786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d770:	e01f      	b.n	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d772:	bf00      	nop
 801d774:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d778:	4ba2      	ldr	r3, [pc, #648]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d77c:	4aa1      	ldr	r2, [pc, #644]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d77e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d784:	e01c      	b.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d78a:	3308      	adds	r3, #8
 801d78c:	2100      	movs	r1, #0
 801d78e:	4618      	mov	r0, r3
 801d790:	f001 fb1c 	bl	801edcc <RCCEx_PLL2_Config>
 801d794:	4603      	mov	r3, r0
 801d796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d79a:	e011      	b.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7a0:	3328      	adds	r3, #40	@ 0x28
 801d7a2:	2100      	movs	r1, #0
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	f001 fbc3 	bl	801ef30 <RCCEx_PLL3_Config>
 801d7aa:	4603      	mov	r3, r0
 801d7ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d7b0:	e006      	b.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7b8:	e002      	b.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d7ba:	bf00      	nop
 801d7bc:	e000      	b.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d10b      	bne.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d7c8:	4b8e      	ldr	r3, [pc, #568]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d7cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d7d8:	4a8a      	ldr	r2, [pc, #552]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7da:	430b      	orrs	r3, r1
 801d7dc:	6593      	str	r3, [r2, #88]	@ 0x58
 801d7de:	e003      	b.n	801d7e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d7e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d7f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d7fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d802:	460b      	mov	r3, r1
 801d804:	4313      	orrs	r3, r2
 801d806:	d03a      	beq.n	801d87e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d80c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d80e:	2b30      	cmp	r3, #48	@ 0x30
 801d810:	d01f      	beq.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d812:	2b30      	cmp	r3, #48	@ 0x30
 801d814:	d819      	bhi.n	801d84a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d816:	2b20      	cmp	r3, #32
 801d818:	d00c      	beq.n	801d834 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d81a:	2b20      	cmp	r3, #32
 801d81c:	d815      	bhi.n	801d84a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d81e:	2b00      	cmp	r3, #0
 801d820:	d019      	beq.n	801d856 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d822:	2b10      	cmp	r3, #16
 801d824:	d111      	bne.n	801d84a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d826:	4b77      	ldr	r3, [pc, #476]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d82a:	4a76      	ldr	r2, [pc, #472]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d82c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d832:	e011      	b.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d838:	3308      	adds	r3, #8
 801d83a:	2102      	movs	r1, #2
 801d83c:	4618      	mov	r0, r3
 801d83e:	f001 fac5 	bl	801edcc <RCCEx_PLL2_Config>
 801d842:	4603      	mov	r3, r0
 801d844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d848:	e006      	b.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d84a:	2301      	movs	r3, #1
 801d84c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d850:	e002      	b.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d852:	bf00      	nop
 801d854:	e000      	b.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d856:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d10a      	bne.n	801d876 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d860:	4b68      	ldr	r3, [pc, #416]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d864:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d86c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d86e:	4a65      	ldr	r2, [pc, #404]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d870:	430b      	orrs	r3, r1
 801d872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d874:	e003      	b.n	801d87e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d87a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d886:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d88a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d88e:	2300      	movs	r3, #0
 801d890:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d894:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d898:	460b      	mov	r3, r1
 801d89a:	4313      	orrs	r3, r2
 801d89c:	d051      	beq.n	801d942 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d8a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d8a8:	d035      	beq.n	801d916 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d8aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d8ae:	d82e      	bhi.n	801d90e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d8b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d8b4:	d031      	beq.n	801d91a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d8b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d8ba:	d828      	bhi.n	801d90e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d8bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d8c0:	d01a      	beq.n	801d8f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d8c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d8c6:	d822      	bhi.n	801d90e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d003      	beq.n	801d8d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d8cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d8d0:	d007      	beq.n	801d8e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d8d2:	e01c      	b.n	801d90e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d8d4:	4b4b      	ldr	r3, [pc, #300]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8d8:	4a4a      	ldr	r2, [pc, #296]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d8da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d8de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d8e0:	e01c      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8e6:	3308      	adds	r3, #8
 801d8e8:	2100      	movs	r1, #0
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	f001 fa6e 	bl	801edcc <RCCEx_PLL2_Config>
 801d8f0:	4603      	mov	r3, r0
 801d8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d8f6:	e011      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8fc:	3328      	adds	r3, #40	@ 0x28
 801d8fe:	2100      	movs	r1, #0
 801d900:	4618      	mov	r0, r3
 801d902:	f001 fb15 	bl	801ef30 <RCCEx_PLL3_Config>
 801d906:	4603      	mov	r3, r0
 801d908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d90c:	e006      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d90e:	2301      	movs	r3, #1
 801d910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d914:	e002      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d916:	bf00      	nop
 801d918:	e000      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d91a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d91c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d920:	2b00      	cmp	r3, #0
 801d922:	d10a      	bne.n	801d93a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d924:	4b37      	ldr	r3, [pc, #220]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d928:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d932:	4a34      	ldr	r2, [pc, #208]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d934:	430b      	orrs	r3, r1
 801d936:	6513      	str	r3, [r2, #80]	@ 0x50
 801d938:	e003      	b.n	801d942 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d93a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d93e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d94a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d94e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d952:	2300      	movs	r3, #0
 801d954:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d958:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d95c:	460b      	mov	r3, r1
 801d95e:	4313      	orrs	r3, r2
 801d960:	d056      	beq.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d96c:	d033      	beq.n	801d9d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d96e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d972:	d82c      	bhi.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d974:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d978:	d02f      	beq.n	801d9da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d97a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d97e:	d826      	bhi.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d980:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d984:	d02b      	beq.n	801d9de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d986:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d98a:	d820      	bhi.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d98c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d990:	d012      	beq.n	801d9b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d996:	d81a      	bhi.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d022      	beq.n	801d9e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d9a0:	d115      	bne.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9a6:	3308      	adds	r3, #8
 801d9a8:	2101      	movs	r1, #1
 801d9aa:	4618      	mov	r0, r3
 801d9ac:	f001 fa0e 	bl	801edcc <RCCEx_PLL2_Config>
 801d9b0:	4603      	mov	r3, r0
 801d9b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d9b6:	e015      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9bc:	3328      	adds	r3, #40	@ 0x28
 801d9be:	2101      	movs	r1, #1
 801d9c0:	4618      	mov	r0, r3
 801d9c2:	f001 fab5 	bl	801ef30 <RCCEx_PLL3_Config>
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d9cc:	e00a      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d9ce:	2301      	movs	r3, #1
 801d9d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d9d4:	e006      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d9d6:	bf00      	nop
 801d9d8:	e004      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d9da:	bf00      	nop
 801d9dc:	e002      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d9de:	bf00      	nop
 801d9e0:	e000      	b.n	801d9e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d9e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d9e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d10d      	bne.n	801da08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d9ec:	4b05      	ldr	r3, [pc, #20]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d9f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d9fa:	4a02      	ldr	r2, [pc, #8]	@ (801da04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d9fc:	430b      	orrs	r3, r1
 801d9fe:	6513      	str	r3, [r2, #80]	@ 0x50
 801da00:	e006      	b.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801da02:	bf00      	nop
 801da04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801da10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801da1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801da20:	2300      	movs	r3, #0
 801da22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801da26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801da2a:	460b      	mov	r3, r1
 801da2c:	4313      	orrs	r3, r2
 801da2e:	d055      	beq.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801da30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801da38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801da3c:	d033      	beq.n	801daa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801da3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801da42:	d82c      	bhi.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801da44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801da48:	d02f      	beq.n	801daaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801da4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801da4e:	d826      	bhi.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801da50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801da54:	d02b      	beq.n	801daae <HAL_RCCEx_PeriphCLKConfig+0x672>
 801da56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801da5a:	d820      	bhi.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801da5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801da60:	d012      	beq.n	801da88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801da62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801da66:	d81a      	bhi.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d022      	beq.n	801dab2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801da6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801da70:	d115      	bne.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801da72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da76:	3308      	adds	r3, #8
 801da78:	2101      	movs	r1, #1
 801da7a:	4618      	mov	r0, r3
 801da7c:	f001 f9a6 	bl	801edcc <RCCEx_PLL2_Config>
 801da80:	4603      	mov	r3, r0
 801da82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801da86:	e015      	b.n	801dab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801da88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da8c:	3328      	adds	r3, #40	@ 0x28
 801da8e:	2101      	movs	r1, #1
 801da90:	4618      	mov	r0, r3
 801da92:	f001 fa4d 	bl	801ef30 <RCCEx_PLL3_Config>
 801da96:	4603      	mov	r3, r0
 801da98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801da9c:	e00a      	b.n	801dab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801da9e:	2301      	movs	r3, #1
 801daa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801daa4:	e006      	b.n	801dab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801daa6:	bf00      	nop
 801daa8:	e004      	b.n	801dab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801daaa:	bf00      	nop
 801daac:	e002      	b.n	801dab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801daae:	bf00      	nop
 801dab0:	e000      	b.n	801dab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d10b      	bne.n	801dad4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801dabc:	4ba3      	ldr	r3, [pc, #652]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dac0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801dac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801dacc:	4a9f      	ldr	r2, [pc, #636]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dace:	430b      	orrs	r3, r1
 801dad0:	6593      	str	r3, [r2, #88]	@ 0x58
 801dad2:	e003      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801dadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dae4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801dae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801daec:	2300      	movs	r3, #0
 801daee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801daf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801daf6:	460b      	mov	r3, r1
 801daf8:	4313      	orrs	r3, r2
 801dafa:	d037      	beq.n	801db6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801dafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801db02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801db06:	d00e      	beq.n	801db26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801db08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801db0c:	d816      	bhi.n	801db3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d018      	beq.n	801db44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801db12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801db16:	d111      	bne.n	801db3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801db18:	4b8c      	ldr	r3, [pc, #560]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db1c:	4a8b      	ldr	r2, [pc, #556]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801db22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801db24:	e00f      	b.n	801db46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801db26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db2a:	3308      	adds	r3, #8
 801db2c:	2101      	movs	r1, #1
 801db2e:	4618      	mov	r0, r3
 801db30:	f001 f94c 	bl	801edcc <RCCEx_PLL2_Config>
 801db34:	4603      	mov	r3, r0
 801db36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801db3a:	e004      	b.n	801db46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801db3c:	2301      	movs	r3, #1
 801db3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801db42:	e000      	b.n	801db46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801db44:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d10a      	bne.n	801db64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801db4e:	4b7f      	ldr	r3, [pc, #508]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801db52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801db56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801db5c:	4a7b      	ldr	r2, [pc, #492]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db5e:	430b      	orrs	r3, r1
 801db60:	6513      	str	r3, [r2, #80]	@ 0x50
 801db62:	e003      	b.n	801db6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801db6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801db78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801db7c:	2300      	movs	r3, #0
 801db7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801db82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801db86:	460b      	mov	r3, r1
 801db88:	4313      	orrs	r3, r2
 801db8a:	d039      	beq.n	801dc00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801db8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801db92:	2b03      	cmp	r3, #3
 801db94:	d81c      	bhi.n	801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801db96:	a201      	add	r2, pc, #4	@ (adr r2, 801db9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801db98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db9c:	0801dbd9 	.word	0x0801dbd9
 801dba0:	0801dbad 	.word	0x0801dbad
 801dba4:	0801dbbb 	.word	0x0801dbbb
 801dba8:	0801dbd9 	.word	0x0801dbd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dbac:	4b67      	ldr	r3, [pc, #412]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbb0:	4a66      	ldr	r2, [pc, #408]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dbb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801dbb8:	e00f      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbbe:	3308      	adds	r3, #8
 801dbc0:	2102      	movs	r1, #2
 801dbc2:	4618      	mov	r0, r3
 801dbc4:	f001 f902 	bl	801edcc <RCCEx_PLL2_Config>
 801dbc8:	4603      	mov	r3, r0
 801dbca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801dbce:	e004      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801dbd0:	2301      	movs	r3, #1
 801dbd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbd6:	e000      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801dbd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d10a      	bne.n	801dbf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801dbe2:	4b5a      	ldr	r3, [pc, #360]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dbe6:	f023 0103 	bic.w	r1, r3, #3
 801dbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dbf0:	4a56      	ldr	r2, [pc, #344]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbf2:	430b      	orrs	r3, r1
 801dbf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801dbf6:	e003      	b.n	801dc00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801dc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801dc0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801dc10:	2300      	movs	r3, #0
 801dc12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801dc16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801dc1a:	460b      	mov	r3, r1
 801dc1c:	4313      	orrs	r3, r2
 801dc1e:	f000 809f 	beq.w	801dd60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801dc22:	4b4b      	ldr	r3, [pc, #300]	@ (801dd50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	4a4a      	ldr	r2, [pc, #296]	@ (801dd50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dc28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dc2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801dc2e:	f7fd fc79 	bl	801b524 <HAL_GetTick>
 801dc32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dc36:	e00b      	b.n	801dc50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801dc38:	f7fd fc74 	bl	801b524 <HAL_GetTick>
 801dc3c:	4602      	mov	r2, r0
 801dc3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dc42:	1ad3      	subs	r3, r2, r3
 801dc44:	2b64      	cmp	r3, #100	@ 0x64
 801dc46:	d903      	bls.n	801dc50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801dc48:	2303      	movs	r3, #3
 801dc4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc4e:	e005      	b.n	801dc5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dc50:	4b3f      	ldr	r3, [pc, #252]	@ (801dd50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d0ed      	beq.n	801dc38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801dc5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d179      	bne.n	801dd58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801dc64:	4b39      	ldr	r3, [pc, #228]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801dc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dc70:	4053      	eors	r3, r2
 801dc72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d015      	beq.n	801dca6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801dc7a:	4b34      	ldr	r3, [pc, #208]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801dc82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801dc86:	4b31      	ldr	r3, [pc, #196]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc8a:	4a30      	ldr	r2, [pc, #192]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801dc90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801dc92:	4b2e      	ldr	r3, [pc, #184]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc96:	4a2d      	ldr	r2, [pc, #180]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dc9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801dc9e:	4a2b      	ldr	r2, [pc, #172]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801dca4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801dca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dcae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dcb2:	d118      	bne.n	801dce6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dcb4:	f7fd fc36 	bl	801b524 <HAL_GetTick>
 801dcb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801dcbc:	e00d      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801dcbe:	f7fd fc31 	bl	801b524 <HAL_GetTick>
 801dcc2:	4602      	mov	r2, r0
 801dcc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dcc8:	1ad2      	subs	r2, r2, r3
 801dcca:	f241 3388 	movw	r3, #5000	@ 0x1388
 801dcce:	429a      	cmp	r2, r3
 801dcd0:	d903      	bls.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801dcd2:	2303      	movs	r3, #3
 801dcd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801dcd8:	e005      	b.n	801dce6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801dcda:	4b1c      	ldr	r3, [pc, #112]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dcde:	f003 0302 	and.w	r3, r3, #2
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d0eb      	beq.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801dce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d129      	bne.n	801dd42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801dcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dcf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dcfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dcfe:	d10e      	bne.n	801dd1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801dd00:	4b12      	ldr	r3, [pc, #72]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd02:	691b      	ldr	r3, [r3, #16]
 801dd04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801dd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dd10:	091a      	lsrs	r2, r3, #4
 801dd12:	4b10      	ldr	r3, [pc, #64]	@ (801dd54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801dd14:	4013      	ands	r3, r2
 801dd16:	4a0d      	ldr	r2, [pc, #52]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd18:	430b      	orrs	r3, r1
 801dd1a:	6113      	str	r3, [r2, #16]
 801dd1c:	e005      	b.n	801dd2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801dd1e:	4b0b      	ldr	r3, [pc, #44]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd20:	691b      	ldr	r3, [r3, #16]
 801dd22:	4a0a      	ldr	r2, [pc, #40]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801dd28:	6113      	str	r3, [r2, #16]
 801dd2a:	4b08      	ldr	r3, [pc, #32]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801dd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dd36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dd3a:	4a04      	ldr	r2, [pc, #16]	@ (801dd4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd3c:	430b      	orrs	r3, r1
 801dd3e:	6713      	str	r3, [r2, #112]	@ 0x70
 801dd40:	e00e      	b.n	801dd60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801dd42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801dd4a:	e009      	b.n	801dd60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801dd4c:	58024400 	.word	0x58024400
 801dd50:	58024800 	.word	0x58024800
 801dd54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801dd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd68:	f002 0301 	and.w	r3, r2, #1
 801dd6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801dd70:	2300      	movs	r3, #0
 801dd72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801dd76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801dd7a:	460b      	mov	r3, r1
 801dd7c:	4313      	orrs	r3, r2
 801dd7e:	f000 8089 	beq.w	801de94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801dd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dd88:	2b28      	cmp	r3, #40	@ 0x28
 801dd8a:	d86b      	bhi.n	801de64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801dd8c:	a201      	add	r2, pc, #4	@ (adr r2, 801dd94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801dd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd92:	bf00      	nop
 801dd94:	0801de6d 	.word	0x0801de6d
 801dd98:	0801de65 	.word	0x0801de65
 801dd9c:	0801de65 	.word	0x0801de65
 801dda0:	0801de65 	.word	0x0801de65
 801dda4:	0801de65 	.word	0x0801de65
 801dda8:	0801de65 	.word	0x0801de65
 801ddac:	0801de65 	.word	0x0801de65
 801ddb0:	0801de65 	.word	0x0801de65
 801ddb4:	0801de39 	.word	0x0801de39
 801ddb8:	0801de65 	.word	0x0801de65
 801ddbc:	0801de65 	.word	0x0801de65
 801ddc0:	0801de65 	.word	0x0801de65
 801ddc4:	0801de65 	.word	0x0801de65
 801ddc8:	0801de65 	.word	0x0801de65
 801ddcc:	0801de65 	.word	0x0801de65
 801ddd0:	0801de65 	.word	0x0801de65
 801ddd4:	0801de4f 	.word	0x0801de4f
 801ddd8:	0801de65 	.word	0x0801de65
 801dddc:	0801de65 	.word	0x0801de65
 801dde0:	0801de65 	.word	0x0801de65
 801dde4:	0801de65 	.word	0x0801de65
 801dde8:	0801de65 	.word	0x0801de65
 801ddec:	0801de65 	.word	0x0801de65
 801ddf0:	0801de65 	.word	0x0801de65
 801ddf4:	0801de6d 	.word	0x0801de6d
 801ddf8:	0801de65 	.word	0x0801de65
 801ddfc:	0801de65 	.word	0x0801de65
 801de00:	0801de65 	.word	0x0801de65
 801de04:	0801de65 	.word	0x0801de65
 801de08:	0801de65 	.word	0x0801de65
 801de0c:	0801de65 	.word	0x0801de65
 801de10:	0801de65 	.word	0x0801de65
 801de14:	0801de6d 	.word	0x0801de6d
 801de18:	0801de65 	.word	0x0801de65
 801de1c:	0801de65 	.word	0x0801de65
 801de20:	0801de65 	.word	0x0801de65
 801de24:	0801de65 	.word	0x0801de65
 801de28:	0801de65 	.word	0x0801de65
 801de2c:	0801de65 	.word	0x0801de65
 801de30:	0801de65 	.word	0x0801de65
 801de34:	0801de6d 	.word	0x0801de6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801de38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de3c:	3308      	adds	r3, #8
 801de3e:	2101      	movs	r1, #1
 801de40:	4618      	mov	r0, r3
 801de42:	f000 ffc3 	bl	801edcc <RCCEx_PLL2_Config>
 801de46:	4603      	mov	r3, r0
 801de48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801de4c:	e00f      	b.n	801de6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801de4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de52:	3328      	adds	r3, #40	@ 0x28
 801de54:	2101      	movs	r1, #1
 801de56:	4618      	mov	r0, r3
 801de58:	f001 f86a 	bl	801ef30 <RCCEx_PLL3_Config>
 801de5c:	4603      	mov	r3, r0
 801de5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801de62:	e004      	b.n	801de6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de64:	2301      	movs	r3, #1
 801de66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de6a:	e000      	b.n	801de6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801de6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de72:	2b00      	cmp	r3, #0
 801de74:	d10a      	bne.n	801de8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801de76:	4bbf      	ldr	r3, [pc, #764]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801de7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801de7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de84:	4abb      	ldr	r2, [pc, #748]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de86:	430b      	orrs	r3, r1
 801de88:	6553      	str	r3, [r2, #84]	@ 0x54
 801de8a:	e003      	b.n	801de94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801de94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de9c:	f002 0302 	and.w	r3, r2, #2
 801dea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801dea4:	2300      	movs	r3, #0
 801dea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801deaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801deae:	460b      	mov	r3, r1
 801deb0:	4313      	orrs	r3, r2
 801deb2:	d041      	beq.n	801df38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801deb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801deb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801deba:	2b05      	cmp	r3, #5
 801debc:	d824      	bhi.n	801df08 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801debe:	a201      	add	r2, pc, #4	@ (adr r2, 801dec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801dec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dec4:	0801df11 	.word	0x0801df11
 801dec8:	0801dedd 	.word	0x0801dedd
 801decc:	0801def3 	.word	0x0801def3
 801ded0:	0801df11 	.word	0x0801df11
 801ded4:	0801df11 	.word	0x0801df11
 801ded8:	0801df11 	.word	0x0801df11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dee0:	3308      	adds	r3, #8
 801dee2:	2101      	movs	r1, #1
 801dee4:	4618      	mov	r0, r3
 801dee6:	f000 ff71 	bl	801edcc <RCCEx_PLL2_Config>
 801deea:	4603      	mov	r3, r0
 801deec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801def0:	e00f      	b.n	801df12 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801def2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801def6:	3328      	adds	r3, #40	@ 0x28
 801def8:	2101      	movs	r1, #1
 801defa:	4618      	mov	r0, r3
 801defc:	f001 f818 	bl	801ef30 <RCCEx_PLL3_Config>
 801df00:	4603      	mov	r3, r0
 801df02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801df06:	e004      	b.n	801df12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801df08:	2301      	movs	r3, #1
 801df0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df0e:	e000      	b.n	801df12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801df10:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df16:	2b00      	cmp	r3, #0
 801df18:	d10a      	bne.n	801df30 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801df1a:	4b96      	ldr	r3, [pc, #600]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df1e:	f023 0107 	bic.w	r1, r3, #7
 801df22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801df28:	4a92      	ldr	r2, [pc, #584]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df2a:	430b      	orrs	r3, r1
 801df2c:	6553      	str	r3, [r2, #84]	@ 0x54
 801df2e:	e003      	b.n	801df38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801df38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df40:	f002 0304 	and.w	r3, r2, #4
 801df44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801df48:	2300      	movs	r3, #0
 801df4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801df4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801df52:	460b      	mov	r3, r1
 801df54:	4313      	orrs	r3, r2
 801df56:	d044      	beq.n	801dfe2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801df58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801df60:	2b05      	cmp	r3, #5
 801df62:	d825      	bhi.n	801dfb0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801df64:	a201      	add	r2, pc, #4	@ (adr r2, 801df6c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801df66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df6a:	bf00      	nop
 801df6c:	0801dfb9 	.word	0x0801dfb9
 801df70:	0801df85 	.word	0x0801df85
 801df74:	0801df9b 	.word	0x0801df9b
 801df78:	0801dfb9 	.word	0x0801dfb9
 801df7c:	0801dfb9 	.word	0x0801dfb9
 801df80:	0801dfb9 	.word	0x0801dfb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801df84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df88:	3308      	adds	r3, #8
 801df8a:	2101      	movs	r1, #1
 801df8c:	4618      	mov	r0, r3
 801df8e:	f000 ff1d 	bl	801edcc <RCCEx_PLL2_Config>
 801df92:	4603      	mov	r3, r0
 801df94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801df98:	e00f      	b.n	801dfba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801df9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df9e:	3328      	adds	r3, #40	@ 0x28
 801dfa0:	2101      	movs	r1, #1
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f000 ffc4 	bl	801ef30 <RCCEx_PLL3_Config>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dfae:	e004      	b.n	801dfba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dfb0:	2301      	movs	r3, #1
 801dfb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dfb6:	e000      	b.n	801dfba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801dfb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dfba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d10b      	bne.n	801dfda <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801dfc2:	4b6c      	ldr	r3, [pc, #432]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dfc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dfc6:	f023 0107 	bic.w	r1, r3, #7
 801dfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dfd2:	4a68      	ldr	r2, [pc, #416]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dfd4:	430b      	orrs	r3, r1
 801dfd6:	6593      	str	r3, [r2, #88]	@ 0x58
 801dfd8:	e003      	b.n	801dfe2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dfda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801dfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfea:	f002 0320 	and.w	r3, r2, #32
 801dfee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801dff2:	2300      	movs	r3, #0
 801dff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801dff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801dffc:	460b      	mov	r3, r1
 801dffe:	4313      	orrs	r3, r2
 801e000:	d055      	beq.n	801e0ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801e002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e00e:	d033      	beq.n	801e078 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801e010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e014:	d82c      	bhi.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e01a:	d02f      	beq.n	801e07c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801e01c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e020:	d826      	bhi.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e022:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e026:	d02b      	beq.n	801e080 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801e028:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e02c:	d820      	bhi.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e02e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e032:	d012      	beq.n	801e05a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801e034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e038:	d81a      	bhi.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d022      	beq.n	801e084 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801e03e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e042:	d115      	bne.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e048:	3308      	adds	r3, #8
 801e04a:	2100      	movs	r1, #0
 801e04c:	4618      	mov	r0, r3
 801e04e:	f000 febd 	bl	801edcc <RCCEx_PLL2_Config>
 801e052:	4603      	mov	r3, r0
 801e054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e058:	e015      	b.n	801e086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e05e:	3328      	adds	r3, #40	@ 0x28
 801e060:	2102      	movs	r1, #2
 801e062:	4618      	mov	r0, r3
 801e064:	f000 ff64 	bl	801ef30 <RCCEx_PLL3_Config>
 801e068:	4603      	mov	r3, r0
 801e06a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e06e:	e00a      	b.n	801e086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e070:	2301      	movs	r3, #1
 801e072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e076:	e006      	b.n	801e086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e078:	bf00      	nop
 801e07a:	e004      	b.n	801e086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e07c:	bf00      	nop
 801e07e:	e002      	b.n	801e086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e080:	bf00      	nop
 801e082:	e000      	b.n	801e086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e084:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	d10b      	bne.n	801e0a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e08e:	4b39      	ldr	r3, [pc, #228]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e092:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e09e:	4a35      	ldr	r2, [pc, #212]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e0a0:	430b      	orrs	r3, r1
 801e0a2:	6553      	str	r3, [r2, #84]	@ 0x54
 801e0a4:	e003      	b.n	801e0ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801e0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e0be:	2300      	movs	r3, #0
 801e0c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e0c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e0c8:	460b      	mov	r3, r1
 801e0ca:	4313      	orrs	r3, r2
 801e0cc:	d058      	beq.n	801e180 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801e0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e0d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e0da:	d033      	beq.n	801e144 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801e0dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e0e0:	d82c      	bhi.n	801e13c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e0e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e0e6:	d02f      	beq.n	801e148 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801e0e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e0ec:	d826      	bhi.n	801e13c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e0ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e0f2:	d02b      	beq.n	801e14c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801e0f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e0f8:	d820      	bhi.n	801e13c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e0fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e0fe:	d012      	beq.n	801e126 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801e100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e104:	d81a      	bhi.n	801e13c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e106:	2b00      	cmp	r3, #0
 801e108:	d022      	beq.n	801e150 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801e10a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e10e:	d115      	bne.n	801e13c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e114:	3308      	adds	r3, #8
 801e116:	2100      	movs	r1, #0
 801e118:	4618      	mov	r0, r3
 801e11a:	f000 fe57 	bl	801edcc <RCCEx_PLL2_Config>
 801e11e:	4603      	mov	r3, r0
 801e120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e124:	e015      	b.n	801e152 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e12a:	3328      	adds	r3, #40	@ 0x28
 801e12c:	2102      	movs	r1, #2
 801e12e:	4618      	mov	r0, r3
 801e130:	f000 fefe 	bl	801ef30 <RCCEx_PLL3_Config>
 801e134:	4603      	mov	r3, r0
 801e136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e13a:	e00a      	b.n	801e152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e13c:	2301      	movs	r3, #1
 801e13e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e142:	e006      	b.n	801e152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e144:	bf00      	nop
 801e146:	e004      	b.n	801e152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e148:	bf00      	nop
 801e14a:	e002      	b.n	801e152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e14c:	bf00      	nop
 801e14e:	e000      	b.n	801e152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e150:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e156:	2b00      	cmp	r3, #0
 801e158:	d10e      	bne.n	801e178 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801e15a:	4b06      	ldr	r3, [pc, #24]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e15c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e15e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801e162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e16a:	4a02      	ldr	r2, [pc, #8]	@ (801e174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e16c:	430b      	orrs	r3, r1
 801e16e:	6593      	str	r3, [r2, #88]	@ 0x58
 801e170:	e006      	b.n	801e180 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801e172:	bf00      	nop
 801e174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e17c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e188:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e18c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e190:	2300      	movs	r3, #0
 801e192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e196:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e19a:	460b      	mov	r3, r1
 801e19c:	4313      	orrs	r3, r2
 801e19e:	d055      	beq.n	801e24c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e1a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e1ac:	d033      	beq.n	801e216 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e1ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e1b2:	d82c      	bhi.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e1b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e1b8:	d02f      	beq.n	801e21a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e1ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e1be:	d826      	bhi.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e1c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e1c4:	d02b      	beq.n	801e21e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e1c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e1ca:	d820      	bhi.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e1cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e1d0:	d012      	beq.n	801e1f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e1d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e1d6:	d81a      	bhi.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d022      	beq.n	801e222 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e1dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e1e0:	d115      	bne.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1e6:	3308      	adds	r3, #8
 801e1e8:	2100      	movs	r1, #0
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	f000 fdee 	bl	801edcc <RCCEx_PLL2_Config>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e1f6:	e015      	b.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1fc:	3328      	adds	r3, #40	@ 0x28
 801e1fe:	2102      	movs	r1, #2
 801e200:	4618      	mov	r0, r3
 801e202:	f000 fe95 	bl	801ef30 <RCCEx_PLL3_Config>
 801e206:	4603      	mov	r3, r0
 801e208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e20c:	e00a      	b.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e20e:	2301      	movs	r3, #1
 801e210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e214:	e006      	b.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e216:	bf00      	nop
 801e218:	e004      	b.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e21a:	bf00      	nop
 801e21c:	e002      	b.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e21e:	bf00      	nop
 801e220:	e000      	b.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e222:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e228:	2b00      	cmp	r3, #0
 801e22a:	d10b      	bne.n	801e244 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e22c:	4ba1      	ldr	r3, [pc, #644]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e22e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e230:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e23c:	4a9d      	ldr	r2, [pc, #628]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e23e:	430b      	orrs	r3, r1
 801e240:	6593      	str	r3, [r2, #88]	@ 0x58
 801e242:	e003      	b.n	801e24c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e254:	f002 0308 	and.w	r3, r2, #8
 801e258:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e25c:	2300      	movs	r3, #0
 801e25e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e262:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e266:	460b      	mov	r3, r1
 801e268:	4313      	orrs	r3, r2
 801e26a:	d01e      	beq.n	801e2aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e278:	d10c      	bne.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e27e:	3328      	adds	r3, #40	@ 0x28
 801e280:	2102      	movs	r1, #2
 801e282:	4618      	mov	r0, r3
 801e284:	f000 fe54 	bl	801ef30 <RCCEx_PLL3_Config>
 801e288:	4603      	mov	r3, r0
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d002      	beq.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e28e:	2301      	movs	r3, #1
 801e290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e294:	4b87      	ldr	r3, [pc, #540]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e298:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e2a4:	4a83      	ldr	r2, [pc, #524]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e2a6:	430b      	orrs	r3, r1
 801e2a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2b2:	f002 0310 	and.w	r3, r2, #16
 801e2b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e2c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e2c4:	460b      	mov	r3, r1
 801e2c6:	4313      	orrs	r3, r2
 801e2c8:	d01e      	beq.n	801e308 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e2d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2d6:	d10c      	bne.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2dc:	3328      	adds	r3, #40	@ 0x28
 801e2de:	2102      	movs	r1, #2
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	f000 fe25 	bl	801ef30 <RCCEx_PLL3_Config>
 801e2e6:	4603      	mov	r3, r0
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d002      	beq.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e2ec:	2301      	movs	r3, #1
 801e2ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e2f2:	4b70      	ldr	r3, [pc, #448]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e2f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e2f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e302:	4a6c      	ldr	r2, [pc, #432]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e304:	430b      	orrs	r3, r1
 801e306:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e310:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e318:	2300      	movs	r3, #0
 801e31a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e31e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e322:	460b      	mov	r3, r1
 801e324:	4313      	orrs	r3, r2
 801e326:	d03e      	beq.n	801e3a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e32c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e334:	d022      	beq.n	801e37c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e33a:	d81b      	bhi.n	801e374 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d003      	beq.n	801e348 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e344:	d00b      	beq.n	801e35e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e346:	e015      	b.n	801e374 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34c:	3308      	adds	r3, #8
 801e34e:	2100      	movs	r1, #0
 801e350:	4618      	mov	r0, r3
 801e352:	f000 fd3b 	bl	801edcc <RCCEx_PLL2_Config>
 801e356:	4603      	mov	r3, r0
 801e358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e35c:	e00f      	b.n	801e37e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e362:	3328      	adds	r3, #40	@ 0x28
 801e364:	2102      	movs	r1, #2
 801e366:	4618      	mov	r0, r3
 801e368:	f000 fde2 	bl	801ef30 <RCCEx_PLL3_Config>
 801e36c:	4603      	mov	r3, r0
 801e36e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e372:	e004      	b.n	801e37e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e374:	2301      	movs	r3, #1
 801e376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e37a:	e000      	b.n	801e37e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e37c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e37e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e382:	2b00      	cmp	r3, #0
 801e384:	d10b      	bne.n	801e39e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e386:	4b4b      	ldr	r3, [pc, #300]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e38a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e396:	4a47      	ldr	r2, [pc, #284]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e398:	430b      	orrs	r3, r1
 801e39a:	6593      	str	r3, [r2, #88]	@ 0x58
 801e39c:	e003      	b.n	801e3a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e39e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e3b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e3b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e3bc:	460b      	mov	r3, r1
 801e3be:	4313      	orrs	r3, r2
 801e3c0:	d03b      	beq.n	801e43a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e3ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e3ce:	d01f      	beq.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e3d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e3d4:	d818      	bhi.n	801e408 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e3d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e3da:	d003      	beq.n	801e3e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e3dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e3e0:	d007      	beq.n	801e3f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e3e2:	e011      	b.n	801e408 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e3e4:	4b33      	ldr	r3, [pc, #204]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3e8:	4a32      	ldr	r2, [pc, #200]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e3ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e3f0:	e00f      	b.n	801e412 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3f6:	3328      	adds	r3, #40	@ 0x28
 801e3f8:	2101      	movs	r1, #1
 801e3fa:	4618      	mov	r0, r3
 801e3fc:	f000 fd98 	bl	801ef30 <RCCEx_PLL3_Config>
 801e400:	4603      	mov	r3, r0
 801e402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e406:	e004      	b.n	801e412 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e408:	2301      	movs	r3, #1
 801e40a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e40e:	e000      	b.n	801e412 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e410:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e416:	2b00      	cmp	r3, #0
 801e418:	d10b      	bne.n	801e432 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e41a:	4b26      	ldr	r3, [pc, #152]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e41e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e42a:	4a22      	ldr	r2, [pc, #136]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e42c:	430b      	orrs	r3, r1
 801e42e:	6553      	str	r3, [r2, #84]	@ 0x54
 801e430:	e003      	b.n	801e43a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e442:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e446:	673b      	str	r3, [r7, #112]	@ 0x70
 801e448:	2300      	movs	r3, #0
 801e44a:	677b      	str	r3, [r7, #116]	@ 0x74
 801e44c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e450:	460b      	mov	r3, r1
 801e452:	4313      	orrs	r3, r2
 801e454:	d034      	beq.n	801e4c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d003      	beq.n	801e468 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e464:	d007      	beq.n	801e476 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e466:	e011      	b.n	801e48c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e468:	4b12      	ldr	r3, [pc, #72]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e46c:	4a11      	ldr	r2, [pc, #68]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e46e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e474:	e00e      	b.n	801e494 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e47a:	3308      	adds	r3, #8
 801e47c:	2102      	movs	r1, #2
 801e47e:	4618      	mov	r0, r3
 801e480:	f000 fca4 	bl	801edcc <RCCEx_PLL2_Config>
 801e484:	4603      	mov	r3, r0
 801e486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e48a:	e003      	b.n	801e494 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e48c:	2301      	movs	r3, #1
 801e48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e492:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d10d      	bne.n	801e4b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e49c:	4b05      	ldr	r3, [pc, #20]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e49e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e4a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e4aa:	4a02      	ldr	r2, [pc, #8]	@ (801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e4ac:	430b      	orrs	r3, r1
 801e4ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e4b0:	e006      	b.n	801e4c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e4b2:	bf00      	nop
 801e4b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e4cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e4d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e4d6:	460b      	mov	r3, r1
 801e4d8:	4313      	orrs	r3, r2
 801e4da:	d00c      	beq.n	801e4f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4e0:	3328      	adds	r3, #40	@ 0x28
 801e4e2:	2102      	movs	r1, #2
 801e4e4:	4618      	mov	r0, r3
 801e4e6:	f000 fd23 	bl	801ef30 <RCCEx_PLL3_Config>
 801e4ea:	4603      	mov	r3, r0
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d002      	beq.n	801e4f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e4f0:	2301      	movs	r3, #1
 801e4f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e502:	663b      	str	r3, [r7, #96]	@ 0x60
 801e504:	2300      	movs	r3, #0
 801e506:	667b      	str	r3, [r7, #100]	@ 0x64
 801e508:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e50c:	460b      	mov	r3, r1
 801e50e:	4313      	orrs	r3, r2
 801e510:	d038      	beq.n	801e584 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e51a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e51e:	d018      	beq.n	801e552 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e524:	d811      	bhi.n	801e54a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e52a:	d014      	beq.n	801e556 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e530:	d80b      	bhi.n	801e54a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e532:	2b00      	cmp	r3, #0
 801e534:	d011      	beq.n	801e55a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e53a:	d106      	bne.n	801e54a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e53c:	4bc3      	ldr	r3, [pc, #780]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e540:	4ac2      	ldr	r2, [pc, #776]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e548:	e008      	b.n	801e55c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e54a:	2301      	movs	r3, #1
 801e54c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e550:	e004      	b.n	801e55c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e552:	bf00      	nop
 801e554:	e002      	b.n	801e55c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e556:	bf00      	nop
 801e558:	e000      	b.n	801e55c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e55a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e55c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e560:	2b00      	cmp	r3, #0
 801e562:	d10b      	bne.n	801e57c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e564:	4bb9      	ldr	r3, [pc, #740]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e568:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e574:	4ab5      	ldr	r2, [pc, #724]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e576:	430b      	orrs	r3, r1
 801e578:	6553      	str	r3, [r2, #84]	@ 0x54
 801e57a:	e003      	b.n	801e584 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e57c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e58c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e590:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e592:	2300      	movs	r3, #0
 801e594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e596:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e59a:	460b      	mov	r3, r1
 801e59c:	4313      	orrs	r3, r2
 801e59e:	d009      	beq.n	801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e5a0:	4baa      	ldr	r3, [pc, #680]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e5a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e5ae:	4aa7      	ldr	r2, [pc, #668]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5b0:	430b      	orrs	r3, r1
 801e5b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e5c0:	653b      	str	r3, [r7, #80]	@ 0x50
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	657b      	str	r3, [r7, #84]	@ 0x54
 801e5c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e5ca:	460b      	mov	r3, r1
 801e5cc:	4313      	orrs	r3, r2
 801e5ce:	d00a      	beq.n	801e5e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e5d0:	4b9e      	ldr	r3, [pc, #632]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5d2:	691b      	ldr	r3, [r3, #16]
 801e5d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e5e0:	4a9a      	ldr	r2, [pc, #616]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5e2:	430b      	orrs	r3, r1
 801e5e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e5f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e5f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e5fc:	460b      	mov	r3, r1
 801e5fe:	4313      	orrs	r3, r2
 801e600:	d009      	beq.n	801e616 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e602:	4b92      	ldr	r3, [pc, #584]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e606:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e610:	4a8e      	ldr	r2, [pc, #568]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e612:	430b      	orrs	r3, r1
 801e614:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e622:	643b      	str	r3, [r7, #64]	@ 0x40
 801e624:	2300      	movs	r3, #0
 801e626:	647b      	str	r3, [r7, #68]	@ 0x44
 801e628:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e62c:	460b      	mov	r3, r1
 801e62e:	4313      	orrs	r3, r2
 801e630:	d00e      	beq.n	801e650 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e632:	4b86      	ldr	r3, [pc, #536]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e634:	691b      	ldr	r3, [r3, #16]
 801e636:	4a85      	ldr	r2, [pc, #532]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e638:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e63c:	6113      	str	r3, [r2, #16]
 801e63e:	4b83      	ldr	r3, [pc, #524]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e640:	6919      	ldr	r1, [r3, #16]
 801e642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e646:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e64a:	4a80      	ldr	r2, [pc, #512]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e64c:	430b      	orrs	r3, r1
 801e64e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e658:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e65c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e65e:	2300      	movs	r3, #0
 801e660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e662:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e666:	460b      	mov	r3, r1
 801e668:	4313      	orrs	r3, r2
 801e66a:	d009      	beq.n	801e680 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e66c:	4b77      	ldr	r3, [pc, #476]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e66e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e670:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e67a:	4a74      	ldr	r2, [pc, #464]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e67c:	430b      	orrs	r3, r1
 801e67e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e688:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e68c:	633b      	str	r3, [r7, #48]	@ 0x30
 801e68e:	2300      	movs	r3, #0
 801e690:	637b      	str	r3, [r7, #52]	@ 0x34
 801e692:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e696:	460b      	mov	r3, r1
 801e698:	4313      	orrs	r3, r2
 801e69a:	d00a      	beq.n	801e6b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e69c:	4b6b      	ldr	r3, [pc, #428]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e6a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e6ac:	4a67      	ldr	r2, [pc, #412]	@ (801e84c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e6ae:	430b      	orrs	r3, r1
 801e6b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ba:	2100      	movs	r1, #0
 801e6bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e6be:	f003 0301 	and.w	r3, r3, #1
 801e6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e6c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e6c8:	460b      	mov	r3, r1
 801e6ca:	4313      	orrs	r3, r2
 801e6cc:	d011      	beq.n	801e6f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6d2:	3308      	adds	r3, #8
 801e6d4:	2100      	movs	r1, #0
 801e6d6:	4618      	mov	r0, r3
 801e6d8:	f000 fb78 	bl	801edcc <RCCEx_PLL2_Config>
 801e6dc:	4603      	mov	r3, r0
 801e6de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d003      	beq.n	801e6f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6fa:	2100      	movs	r1, #0
 801e6fc:	6239      	str	r1, [r7, #32]
 801e6fe:	f003 0302 	and.w	r3, r3, #2
 801e702:	627b      	str	r3, [r7, #36]	@ 0x24
 801e704:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e708:	460b      	mov	r3, r1
 801e70a:	4313      	orrs	r3, r2
 801e70c:	d011      	beq.n	801e732 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e712:	3308      	adds	r3, #8
 801e714:	2101      	movs	r1, #1
 801e716:	4618      	mov	r0, r3
 801e718:	f000 fb58 	bl	801edcc <RCCEx_PLL2_Config>
 801e71c:	4603      	mov	r3, r0
 801e71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e726:	2b00      	cmp	r3, #0
 801e728:	d003      	beq.n	801e732 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e72a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e72e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e73a:	2100      	movs	r1, #0
 801e73c:	61b9      	str	r1, [r7, #24]
 801e73e:	f003 0304 	and.w	r3, r3, #4
 801e742:	61fb      	str	r3, [r7, #28]
 801e744:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e748:	460b      	mov	r3, r1
 801e74a:	4313      	orrs	r3, r2
 801e74c:	d011      	beq.n	801e772 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e752:	3308      	adds	r3, #8
 801e754:	2102      	movs	r1, #2
 801e756:	4618      	mov	r0, r3
 801e758:	f000 fb38 	bl	801edcc <RCCEx_PLL2_Config>
 801e75c:	4603      	mov	r3, r0
 801e75e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e766:	2b00      	cmp	r3, #0
 801e768:	d003      	beq.n	801e772 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e76a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e76e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77a:	2100      	movs	r1, #0
 801e77c:	6139      	str	r1, [r7, #16]
 801e77e:	f003 0308 	and.w	r3, r3, #8
 801e782:	617b      	str	r3, [r7, #20]
 801e784:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e788:	460b      	mov	r3, r1
 801e78a:	4313      	orrs	r3, r2
 801e78c:	d011      	beq.n	801e7b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e792:	3328      	adds	r3, #40	@ 0x28
 801e794:	2100      	movs	r1, #0
 801e796:	4618      	mov	r0, r3
 801e798:	f000 fbca 	bl	801ef30 <RCCEx_PLL3_Config>
 801e79c:	4603      	mov	r3, r0
 801e79e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d003      	beq.n	801e7b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e7aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ba:	2100      	movs	r1, #0
 801e7bc:	60b9      	str	r1, [r7, #8]
 801e7be:	f003 0310 	and.w	r3, r3, #16
 801e7c2:	60fb      	str	r3, [r7, #12]
 801e7c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e7c8:	460b      	mov	r3, r1
 801e7ca:	4313      	orrs	r3, r2
 801e7cc:	d011      	beq.n	801e7f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7d2:	3328      	adds	r3, #40	@ 0x28
 801e7d4:	2101      	movs	r1, #1
 801e7d6:	4618      	mov	r0, r3
 801e7d8:	f000 fbaa 	bl	801ef30 <RCCEx_PLL3_Config>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d003      	beq.n	801e7f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7fa:	2100      	movs	r1, #0
 801e7fc:	6039      	str	r1, [r7, #0]
 801e7fe:	f003 0320 	and.w	r3, r3, #32
 801e802:	607b      	str	r3, [r7, #4]
 801e804:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e808:	460b      	mov	r3, r1
 801e80a:	4313      	orrs	r3, r2
 801e80c:	d011      	beq.n	801e832 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e812:	3328      	adds	r3, #40	@ 0x28
 801e814:	2102      	movs	r1, #2
 801e816:	4618      	mov	r0, r3
 801e818:	f000 fb8a 	bl	801ef30 <RCCEx_PLL3_Config>
 801e81c:	4603      	mov	r3, r0
 801e81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e826:	2b00      	cmp	r3, #0
 801e828:	d003      	beq.n	801e832 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e82a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e82e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e832:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e836:	2b00      	cmp	r3, #0
 801e838:	d101      	bne.n	801e83e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e83a:	2300      	movs	r3, #0
 801e83c:	e000      	b.n	801e840 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e83e:	2301      	movs	r3, #1
}
 801e840:	4618      	mov	r0, r3
 801e842:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e846:	46bd      	mov	sp, r7
 801e848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e84c:	58024400 	.word	0x58024400

0801e850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e850:	b580      	push	{r7, lr}
 801e852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e854:	f7fe fd54 	bl	801d300 <HAL_RCC_GetHCLKFreq>
 801e858:	4602      	mov	r2, r0
 801e85a:	4b06      	ldr	r3, [pc, #24]	@ (801e874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e85c:	6a1b      	ldr	r3, [r3, #32]
 801e85e:	091b      	lsrs	r3, r3, #4
 801e860:	f003 0307 	and.w	r3, r3, #7
 801e864:	4904      	ldr	r1, [pc, #16]	@ (801e878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e866:	5ccb      	ldrb	r3, [r1, r3]
 801e868:	f003 031f 	and.w	r3, r3, #31
 801e86c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e870:	4618      	mov	r0, r3
 801e872:	bd80      	pop	{r7, pc}
 801e874:	58024400 	.word	0x58024400
 801e878:	0802bdbc 	.word	0x0802bdbc

0801e87c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e87c:	b480      	push	{r7}
 801e87e:	b089      	sub	sp, #36	@ 0x24
 801e880:	af00      	add	r7, sp, #0
 801e882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e884:	4ba1      	ldr	r3, [pc, #644]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e888:	f003 0303 	and.w	r3, r3, #3
 801e88c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e88e:	4b9f      	ldr	r3, [pc, #636]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e892:	0b1b      	lsrs	r3, r3, #12
 801e894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e89a:	4b9c      	ldr	r3, [pc, #624]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e89e:	091b      	lsrs	r3, r3, #4
 801e8a0:	f003 0301 	and.w	r3, r3, #1
 801e8a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e8a6:	4b99      	ldr	r3, [pc, #612]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e8aa:	08db      	lsrs	r3, r3, #3
 801e8ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e8b0:	693a      	ldr	r2, [r7, #16]
 801e8b2:	fb02 f303 	mul.w	r3, r2, r3
 801e8b6:	ee07 3a90 	vmov	s15, r3
 801e8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e8c2:	697b      	ldr	r3, [r7, #20]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	f000 8111 	beq.w	801eaec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e8ca:	69bb      	ldr	r3, [r7, #24]
 801e8cc:	2b02      	cmp	r3, #2
 801e8ce:	f000 8083 	beq.w	801e9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e8d2:	69bb      	ldr	r3, [r7, #24]
 801e8d4:	2b02      	cmp	r3, #2
 801e8d6:	f200 80a1 	bhi.w	801ea1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e8da:	69bb      	ldr	r3, [r7, #24]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d003      	beq.n	801e8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e8e0:	69bb      	ldr	r3, [r7, #24]
 801e8e2:	2b01      	cmp	r3, #1
 801e8e4:	d056      	beq.n	801e994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e8e6:	e099      	b.n	801ea1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e8e8:	4b88      	ldr	r3, [pc, #544]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	f003 0320 	and.w	r3, r3, #32
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d02d      	beq.n	801e950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e8f4:	4b85      	ldr	r3, [pc, #532]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	08db      	lsrs	r3, r3, #3
 801e8fa:	f003 0303 	and.w	r3, r3, #3
 801e8fe:	4a84      	ldr	r2, [pc, #528]	@ (801eb10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e900:	fa22 f303 	lsr.w	r3, r2, r3
 801e904:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e906:	68bb      	ldr	r3, [r7, #8]
 801e908:	ee07 3a90 	vmov	s15, r3
 801e90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e910:	697b      	ldr	r3, [r7, #20]
 801e912:	ee07 3a90 	vmov	s15, r3
 801e916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e91e:	4b7b      	ldr	r3, [pc, #492]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e926:	ee07 3a90 	vmov	s15, r3
 801e92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e92e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e932:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801eb14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e946:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e94a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e94e:	e087      	b.n	801ea60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e950:	697b      	ldr	r3, [r7, #20]
 801e952:	ee07 3a90 	vmov	s15, r3
 801e956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e95a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801eb18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e962:	4b6a      	ldr	r3, [pc, #424]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e96a:	ee07 3a90 	vmov	s15, r3
 801e96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e972:	ed97 6a03 	vldr	s12, [r7, #12]
 801e976:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801eb14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e98e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e992:	e065      	b.n	801ea60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e994:	697b      	ldr	r3, [r7, #20]
 801e996:	ee07 3a90 	vmov	s15, r3
 801e99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e99e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801eb1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e9a6:	4b59      	ldr	r3, [pc, #356]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9ae:	ee07 3a90 	vmov	s15, r3
 801e9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e9ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801eb14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e9c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e9d6:	e043      	b.n	801ea60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e9d8:	697b      	ldr	r3, [r7, #20]
 801e9da:	ee07 3a90 	vmov	s15, r3
 801e9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801eb20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e9ea:	4b48      	ldr	r3, [pc, #288]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9f2:	ee07 3a90 	vmov	s15, r3
 801e9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 801e9fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801eb14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ea02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea12:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea1a:	e021      	b.n	801ea60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea1c:	697b      	ldr	r3, [r7, #20]
 801ea1e:	ee07 3a90 	vmov	s15, r3
 801ea22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eb1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ea2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea2e:	4b37      	ldr	r3, [pc, #220]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea36:	ee07 3a90 	vmov	s15, r3
 801ea3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea3e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801eb14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ea46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea56:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801ea60:	4b2a      	ldr	r3, [pc, #168]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea64:	0a5b      	lsrs	r3, r3, #9
 801ea66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ea6a:	ee07 3a90 	vmov	s15, r3
 801ea6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ea76:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ea7a:	edd7 6a07 	vldr	s13, [r7, #28]
 801ea7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ea82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ea86:	ee17 2a90 	vmov	r2, s15
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ea8e:	4b1f      	ldr	r3, [pc, #124]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea92:	0c1b      	lsrs	r3, r3, #16
 801ea94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ea98:	ee07 3a90 	vmov	s15, r3
 801ea9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eaa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eaa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eaa8:	edd7 6a07 	vldr	s13, [r7, #28]
 801eaac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eab4:	ee17 2a90 	vmov	r2, s15
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801eabc:	4b13      	ldr	r3, [pc, #76]	@ (801eb0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eac0:	0e1b      	lsrs	r3, r3, #24
 801eac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eac6:	ee07 3a90 	vmov	s15, r3
 801eaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ead2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ead6:	edd7 6a07 	vldr	s13, [r7, #28]
 801eada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eae2:	ee17 2a90 	vmov	r2, s15
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801eaea:	e008      	b.n	801eafe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	2200      	movs	r2, #0
 801eaf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	2200      	movs	r2, #0
 801eaf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	2200      	movs	r2, #0
 801eafc:	609a      	str	r2, [r3, #8]
}
 801eafe:	bf00      	nop
 801eb00:	3724      	adds	r7, #36	@ 0x24
 801eb02:	46bd      	mov	sp, r7
 801eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb08:	4770      	bx	lr
 801eb0a:	bf00      	nop
 801eb0c:	58024400 	.word	0x58024400
 801eb10:	03d09000 	.word	0x03d09000
 801eb14:	46000000 	.word	0x46000000
 801eb18:	4c742400 	.word	0x4c742400
 801eb1c:	4a742400 	.word	0x4a742400
 801eb20:	4af42400 	.word	0x4af42400

0801eb24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801eb24:	b480      	push	{r7}
 801eb26:	b089      	sub	sp, #36	@ 0x24
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801eb2c:	4ba1      	ldr	r3, [pc, #644]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb30:	f003 0303 	and.w	r3, r3, #3
 801eb34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801eb36:	4b9f      	ldr	r3, [pc, #636]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb3a:	0d1b      	lsrs	r3, r3, #20
 801eb3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eb40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801eb42:	4b9c      	ldr	r3, [pc, #624]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb46:	0a1b      	lsrs	r3, r3, #8
 801eb48:	f003 0301 	and.w	r3, r3, #1
 801eb4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801eb4e:	4b99      	ldr	r3, [pc, #612]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801eb52:	08db      	lsrs	r3, r3, #3
 801eb54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eb58:	693a      	ldr	r2, [r7, #16]
 801eb5a:	fb02 f303 	mul.w	r3, r2, r3
 801eb5e:	ee07 3a90 	vmov	s15, r3
 801eb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801eb6a:	697b      	ldr	r3, [r7, #20]
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	f000 8111 	beq.w	801ed94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801eb72:	69bb      	ldr	r3, [r7, #24]
 801eb74:	2b02      	cmp	r3, #2
 801eb76:	f000 8083 	beq.w	801ec80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801eb7a:	69bb      	ldr	r3, [r7, #24]
 801eb7c:	2b02      	cmp	r3, #2
 801eb7e:	f200 80a1 	bhi.w	801ecc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801eb82:	69bb      	ldr	r3, [r7, #24]
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d003      	beq.n	801eb90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801eb88:	69bb      	ldr	r3, [r7, #24]
 801eb8a:	2b01      	cmp	r3, #1
 801eb8c:	d056      	beq.n	801ec3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801eb8e:	e099      	b.n	801ecc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801eb90:	4b88      	ldr	r3, [pc, #544]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	f003 0320 	and.w	r3, r3, #32
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d02d      	beq.n	801ebf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801eb9c:	4b85      	ldr	r3, [pc, #532]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	08db      	lsrs	r3, r3, #3
 801eba2:	f003 0303 	and.w	r3, r3, #3
 801eba6:	4a84      	ldr	r2, [pc, #528]	@ (801edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801eba8:	fa22 f303 	lsr.w	r3, r2, r3
 801ebac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ebae:	68bb      	ldr	r3, [r7, #8]
 801ebb0:	ee07 3a90 	vmov	s15, r3
 801ebb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ebb8:	697b      	ldr	r3, [r7, #20]
 801ebba:	ee07 3a90 	vmov	s15, r3
 801ebbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ebc6:	4b7b      	ldr	r3, [pc, #492]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ebc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ebca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ebce:	ee07 3a90 	vmov	s15, r3
 801ebd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ebd6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ebda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801edbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ebde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ebe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ebe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ebee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ebf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ebf6:	e087      	b.n	801ed08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ebf8:	697b      	ldr	r3, [r7, #20]
 801ebfa:	ee07 3a90 	vmov	s15, r3
 801ebfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801edc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ec06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec0a:	4b6a      	ldr	r3, [pc, #424]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec12:	ee07 3a90 	vmov	s15, r3
 801ec16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801edbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ec22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec3a:	e065      	b.n	801ed08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ec3c:	697b      	ldr	r3, [r7, #20]
 801ec3e:	ee07 3a90 	vmov	s15, r3
 801ec42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801edc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ec4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec4e:	4b59      	ldr	r3, [pc, #356]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec56:	ee07 3a90 	vmov	s15, r3
 801ec5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801edbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ec66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec7e:	e043      	b.n	801ed08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ec80:	697b      	ldr	r3, [r7, #20]
 801ec82:	ee07 3a90 	vmov	s15, r3
 801ec86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801edc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ec8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec92:	4b48      	ldr	r3, [pc, #288]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec9a:	ee07 3a90 	vmov	s15, r3
 801ec9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eca2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eca6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801edbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ecaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ecae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ecb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ecb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ecbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ecc2:	e021      	b.n	801ed08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ecc4:	697b      	ldr	r3, [r7, #20]
 801ecc6:	ee07 3a90 	vmov	s15, r3
 801ecca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801edc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ecd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecd6:	4b37      	ldr	r3, [pc, #220]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ecda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecde:	ee07 3a90 	vmov	s15, r3
 801ece2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ece6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ecea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801edbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ecee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ecf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ecf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ecfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801ed08:	4b2a      	ldr	r3, [pc, #168]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed0c:	0a5b      	lsrs	r3, r3, #9
 801ed0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ed12:	ee07 3a90 	vmov	s15, r3
 801ed16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed22:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed2e:	ee17 2a90 	vmov	r2, s15
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801ed36:	4b1f      	ldr	r3, [pc, #124]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed3a:	0c1b      	lsrs	r3, r3, #16
 801ed3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ed40:	ee07 3a90 	vmov	s15, r3
 801ed44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed50:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed5c:	ee17 2a90 	vmov	r2, s15
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801ed64:	4b13      	ldr	r3, [pc, #76]	@ (801edb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed68:	0e1b      	lsrs	r3, r3, #24
 801ed6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ed6e:	ee07 3a90 	vmov	s15, r3
 801ed72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed7e:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed8a:	ee17 2a90 	vmov	r2, s15
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801ed92:	e008      	b.n	801eda6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	2200      	movs	r2, #0
 801ed98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	2200      	movs	r2, #0
 801eda4:	609a      	str	r2, [r3, #8]
}
 801eda6:	bf00      	nop
 801eda8:	3724      	adds	r7, #36	@ 0x24
 801edaa:	46bd      	mov	sp, r7
 801edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edb0:	4770      	bx	lr
 801edb2:	bf00      	nop
 801edb4:	58024400 	.word	0x58024400
 801edb8:	03d09000 	.word	0x03d09000
 801edbc:	46000000 	.word	0x46000000
 801edc0:	4c742400 	.word	0x4c742400
 801edc4:	4a742400 	.word	0x4a742400
 801edc8:	4af42400 	.word	0x4af42400

0801edcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801edcc:	b580      	push	{r7, lr}
 801edce:	b084      	sub	sp, #16
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
 801edd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801edd6:	2300      	movs	r3, #0
 801edd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801edda:	4b53      	ldr	r3, [pc, #332]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edde:	f003 0303 	and.w	r3, r3, #3
 801ede2:	2b03      	cmp	r3, #3
 801ede4:	d101      	bne.n	801edea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801ede6:	2301      	movs	r3, #1
 801ede8:	e099      	b.n	801ef1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801edea:	4b4f      	ldr	r3, [pc, #316]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	4a4e      	ldr	r2, [pc, #312]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801edf0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801edf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801edf6:	f7fc fb95 	bl	801b524 <HAL_GetTick>
 801edfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801edfc:	e008      	b.n	801ee10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801edfe:	f7fc fb91 	bl	801b524 <HAL_GetTick>
 801ee02:	4602      	mov	r2, r0
 801ee04:	68bb      	ldr	r3, [r7, #8]
 801ee06:	1ad3      	subs	r3, r2, r3
 801ee08:	2b02      	cmp	r3, #2
 801ee0a:	d901      	bls.n	801ee10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ee0c:	2303      	movs	r3, #3
 801ee0e:	e086      	b.n	801ef1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ee10:	4b45      	ldr	r3, [pc, #276]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d1f0      	bne.n	801edfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801ee1c:	4b42      	ldr	r3, [pc, #264]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	681b      	ldr	r3, [r3, #0]
 801ee28:	031b      	lsls	r3, r3, #12
 801ee2a:	493f      	ldr	r1, [pc, #252]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee2c:	4313      	orrs	r3, r2
 801ee2e:	628b      	str	r3, [r1, #40]	@ 0x28
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	685b      	ldr	r3, [r3, #4]
 801ee34:	3b01      	subs	r3, #1
 801ee36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	689b      	ldr	r3, [r3, #8]
 801ee3e:	3b01      	subs	r3, #1
 801ee40:	025b      	lsls	r3, r3, #9
 801ee42:	b29b      	uxth	r3, r3
 801ee44:	431a      	orrs	r2, r3
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	68db      	ldr	r3, [r3, #12]
 801ee4a:	3b01      	subs	r3, #1
 801ee4c:	041b      	lsls	r3, r3, #16
 801ee4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ee52:	431a      	orrs	r2, r3
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	691b      	ldr	r3, [r3, #16]
 801ee58:	3b01      	subs	r3, #1
 801ee5a:	061b      	lsls	r3, r3, #24
 801ee5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ee60:	4931      	ldr	r1, [pc, #196]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee62:	4313      	orrs	r3, r2
 801ee64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801ee66:	4b30      	ldr	r3, [pc, #192]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	695b      	ldr	r3, [r3, #20]
 801ee72:	492d      	ldr	r1, [pc, #180]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee74:	4313      	orrs	r3, r2
 801ee76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801ee78:	4b2b      	ldr	r3, [pc, #172]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee7c:	f023 0220 	bic.w	r2, r3, #32
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	699b      	ldr	r3, [r3, #24]
 801ee84:	4928      	ldr	r1, [pc, #160]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee86:	4313      	orrs	r3, r2
 801ee88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801ee8a:	4b27      	ldr	r3, [pc, #156]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee8e:	4a26      	ldr	r2, [pc, #152]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee90:	f023 0310 	bic.w	r3, r3, #16
 801ee94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801ee96:	4b24      	ldr	r3, [pc, #144]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ee98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ee9a:	4b24      	ldr	r3, [pc, #144]	@ (801ef2c <RCCEx_PLL2_Config+0x160>)
 801ee9c:	4013      	ands	r3, r2
 801ee9e:	687a      	ldr	r2, [r7, #4]
 801eea0:	69d2      	ldr	r2, [r2, #28]
 801eea2:	00d2      	lsls	r2, r2, #3
 801eea4:	4920      	ldr	r1, [pc, #128]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eea6:	4313      	orrs	r3, r2
 801eea8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801eeaa:	4b1f      	ldr	r3, [pc, #124]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eeae:	4a1e      	ldr	r2, [pc, #120]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eeb0:	f043 0310 	orr.w	r3, r3, #16
 801eeb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d106      	bne.n	801eeca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801eebc:	4b1a      	ldr	r3, [pc, #104]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eec0:	4a19      	ldr	r2, [pc, #100]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801eec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801eec8:	e00f      	b.n	801eeea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801eeca:	683b      	ldr	r3, [r7, #0]
 801eecc:	2b01      	cmp	r3, #1
 801eece:	d106      	bne.n	801eede <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801eed0:	4b15      	ldr	r3, [pc, #84]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eed4:	4a14      	ldr	r2, [pc, #80]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eeda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801eedc:	e005      	b.n	801eeea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801eede:	4b12      	ldr	r3, [pc, #72]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eee2:	4a11      	ldr	r2, [pc, #68]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801eee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801eeea:	4b0f      	ldr	r3, [pc, #60]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	4a0e      	ldr	r2, [pc, #56]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801eef0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801eef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eef6:	f7fc fb15 	bl	801b524 <HAL_GetTick>
 801eefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801eefc:	e008      	b.n	801ef10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801eefe:	f7fc fb11 	bl	801b524 <HAL_GetTick>
 801ef02:	4602      	mov	r2, r0
 801ef04:	68bb      	ldr	r3, [r7, #8]
 801ef06:	1ad3      	subs	r3, r2, r3
 801ef08:	2b02      	cmp	r3, #2
 801ef0a:	d901      	bls.n	801ef10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801ef0c:	2303      	movs	r3, #3
 801ef0e:	e006      	b.n	801ef1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801ef10:	4b05      	ldr	r3, [pc, #20]	@ (801ef28 <RCCEx_PLL2_Config+0x15c>)
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d0f0      	beq.n	801eefe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801ef1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ef1e:	4618      	mov	r0, r3
 801ef20:	3710      	adds	r7, #16
 801ef22:	46bd      	mov	sp, r7
 801ef24:	bd80      	pop	{r7, pc}
 801ef26:	bf00      	nop
 801ef28:	58024400 	.word	0x58024400
 801ef2c:	ffff0007 	.word	0xffff0007

0801ef30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801ef30:	b580      	push	{r7, lr}
 801ef32:	b084      	sub	sp, #16
 801ef34:	af00      	add	r7, sp, #0
 801ef36:	6078      	str	r0, [r7, #4]
 801ef38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ef3a:	2300      	movs	r3, #0
 801ef3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ef3e:	4b53      	ldr	r3, [pc, #332]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801ef40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef42:	f003 0303 	and.w	r3, r3, #3
 801ef46:	2b03      	cmp	r3, #3
 801ef48:	d101      	bne.n	801ef4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801ef4a:	2301      	movs	r3, #1
 801ef4c:	e099      	b.n	801f082 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801ef4e:	4b4f      	ldr	r3, [pc, #316]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801ef50:	681b      	ldr	r3, [r3, #0]
 801ef52:	4a4e      	ldr	r2, [pc, #312]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801ef54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ef58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ef5a:	f7fc fae3 	bl	801b524 <HAL_GetTick>
 801ef5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ef60:	e008      	b.n	801ef74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ef62:	f7fc fadf 	bl	801b524 <HAL_GetTick>
 801ef66:	4602      	mov	r2, r0
 801ef68:	68bb      	ldr	r3, [r7, #8]
 801ef6a:	1ad3      	subs	r3, r2, r3
 801ef6c:	2b02      	cmp	r3, #2
 801ef6e:	d901      	bls.n	801ef74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ef70:	2303      	movs	r3, #3
 801ef72:	e086      	b.n	801f082 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ef74:	4b45      	ldr	r3, [pc, #276]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d1f0      	bne.n	801ef62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ef80:	4b42      	ldr	r3, [pc, #264]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801ef82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	051b      	lsls	r3, r3, #20
 801ef8e:	493f      	ldr	r1, [pc, #252]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801ef90:	4313      	orrs	r3, r2
 801ef92:	628b      	str	r3, [r1, #40]	@ 0x28
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	685b      	ldr	r3, [r3, #4]
 801ef98:	3b01      	subs	r3, #1
 801ef9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	689b      	ldr	r3, [r3, #8]
 801efa2:	3b01      	subs	r3, #1
 801efa4:	025b      	lsls	r3, r3, #9
 801efa6:	b29b      	uxth	r3, r3
 801efa8:	431a      	orrs	r2, r3
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	68db      	ldr	r3, [r3, #12]
 801efae:	3b01      	subs	r3, #1
 801efb0:	041b      	lsls	r3, r3, #16
 801efb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801efb6:	431a      	orrs	r2, r3
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	691b      	ldr	r3, [r3, #16]
 801efbc:	3b01      	subs	r3, #1
 801efbe:	061b      	lsls	r3, r3, #24
 801efc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801efc4:	4931      	ldr	r1, [pc, #196]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801efc6:	4313      	orrs	r3, r2
 801efc8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801efca:	4b30      	ldr	r3, [pc, #192]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801efcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	695b      	ldr	r3, [r3, #20]
 801efd6:	492d      	ldr	r1, [pc, #180]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801efd8:	4313      	orrs	r3, r2
 801efda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801efdc:	4b2b      	ldr	r3, [pc, #172]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801efde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efe0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	699b      	ldr	r3, [r3, #24]
 801efe8:	4928      	ldr	r1, [pc, #160]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801efea:	4313      	orrs	r3, r2
 801efec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801efee:	4b27      	ldr	r3, [pc, #156]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801eff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eff2:	4a26      	ldr	r2, [pc, #152]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801eff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801eff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801effa:	4b24      	ldr	r3, [pc, #144]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801effc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801effe:	4b24      	ldr	r3, [pc, #144]	@ (801f090 <RCCEx_PLL3_Config+0x160>)
 801f000:	4013      	ands	r3, r2
 801f002:	687a      	ldr	r2, [r7, #4]
 801f004:	69d2      	ldr	r2, [r2, #28]
 801f006:	00d2      	lsls	r2, r2, #3
 801f008:	4920      	ldr	r1, [pc, #128]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f00a:	4313      	orrs	r3, r2
 801f00c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f00e:	4b1f      	ldr	r3, [pc, #124]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f012:	4a1e      	ldr	r2, [pc, #120]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f01a:	683b      	ldr	r3, [r7, #0]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d106      	bne.n	801f02e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f020:	4b1a      	ldr	r3, [pc, #104]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f024:	4a19      	ldr	r2, [pc, #100]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f026:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f02a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f02c:	e00f      	b.n	801f04e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f02e:	683b      	ldr	r3, [r7, #0]
 801f030:	2b01      	cmp	r3, #1
 801f032:	d106      	bne.n	801f042 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f034:	4b15      	ldr	r3, [pc, #84]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f038:	4a14      	ldr	r2, [pc, #80]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f03a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f03e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f040:	e005      	b.n	801f04e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f042:	4b12      	ldr	r3, [pc, #72]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f046:	4a11      	ldr	r2, [pc, #68]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f048:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f04c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f04e:	4b0f      	ldr	r3, [pc, #60]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	4a0e      	ldr	r2, [pc, #56]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f05a:	f7fc fa63 	bl	801b524 <HAL_GetTick>
 801f05e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f060:	e008      	b.n	801f074 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f062:	f7fc fa5f 	bl	801b524 <HAL_GetTick>
 801f066:	4602      	mov	r2, r0
 801f068:	68bb      	ldr	r3, [r7, #8]
 801f06a:	1ad3      	subs	r3, r2, r3
 801f06c:	2b02      	cmp	r3, #2
 801f06e:	d901      	bls.n	801f074 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f070:	2303      	movs	r3, #3
 801f072:	e006      	b.n	801f082 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f074:	4b05      	ldr	r3, [pc, #20]	@ (801f08c <RCCEx_PLL3_Config+0x15c>)
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d0f0      	beq.n	801f062 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f080:	7bfb      	ldrb	r3, [r7, #15]
}
 801f082:	4618      	mov	r0, r3
 801f084:	3710      	adds	r7, #16
 801f086:	46bd      	mov	sp, r7
 801f088:	bd80      	pop	{r7, pc}
 801f08a:	bf00      	nop
 801f08c:	58024400 	.word	0x58024400
 801f090:	ffff0007 	.word	0xffff0007

0801f094 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801f094:	b580      	push	{r7, lr}
 801f096:	b084      	sub	sp, #16
 801f098:	af00      	add	r7, sp, #0
 801f09a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d101      	bne.n	801f0a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801f0a2:	2301      	movs	r3, #1
 801f0a4:	e054      	b.n	801f150 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	7a5b      	ldrb	r3, [r3, #9]
 801f0aa:	b2db      	uxtb	r3, r3
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d105      	bne.n	801f0bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	2200      	movs	r2, #0
 801f0b4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801f0b6:	6878      	ldr	r0, [r7, #4]
 801f0b8:	f7fb ff66 	bl	801af88 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	2202      	movs	r2, #2
 801f0c0:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	f023 0120 	bic.w	r1, r3, #32
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	685a      	ldr	r2, [r3, #4]
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	430a      	orrs	r2, r1
 801f0d6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	681a      	ldr	r2, [r3, #0]
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	f042 0204 	orr.w	r2, r2, #4
 801f0e6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	685b      	ldr	r3, [r3, #4]
 801f0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f0f2:	2b40      	cmp	r3, #64	@ 0x40
 801f0f4:	d104      	bne.n	801f100 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	2204      	movs	r2, #4
 801f0fa:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 801f0fc:	2301      	movs	r3, #1
 801f0fe:	e027      	b.n	801f150 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 801f100:	f7fc fa10 	bl	801b524 <HAL_GetTick>
 801f104:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f106:	e015      	b.n	801f134 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801f108:	f7fc fa0c 	bl	801b524 <HAL_GetTick>
 801f10c:	4602      	mov	r2, r0
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	1ad3      	subs	r3, r2, r3
 801f112:	2b02      	cmp	r3, #2
 801f114:	d90e      	bls.n	801f134 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	685b      	ldr	r3, [r3, #4]
 801f11c:	f003 0304 	and.w	r3, r3, #4
 801f120:	2b04      	cmp	r3, #4
 801f122:	d107      	bne.n	801f134 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	2204      	movs	r2, #4
 801f128:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	2202      	movs	r2, #2
 801f12e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 801f130:	2301      	movs	r3, #1
 801f132:	e00d      	b.n	801f150 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	685b      	ldr	r3, [r3, #4]
 801f13a:	f003 0304 	and.w	r3, r3, #4
 801f13e:	2b04      	cmp	r3, #4
 801f140:	d0e2      	beq.n	801f108 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	2201      	movs	r2, #1
 801f146:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	2200      	movs	r2, #0
 801f14c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 801f14e:	2300      	movs	r3, #0
}
 801f150:	4618      	mov	r0, r3
 801f152:	3710      	adds	r7, #16
 801f154:	46bd      	mov	sp, r7
 801f156:	bd80      	pop	{r7, pc}

0801f158 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801f158:	b580      	push	{r7, lr}
 801f15a:	b084      	sub	sp, #16
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	6078      	str	r0, [r7, #4]
 801f160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f162:	2300      	movs	r3, #0
 801f164:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	7a1b      	ldrb	r3, [r3, #8]
 801f16a:	2b01      	cmp	r3, #1
 801f16c:	d101      	bne.n	801f172 <HAL_RNG_GenerateRandomNumber+0x1a>
 801f16e:	2302      	movs	r3, #2
 801f170:	e044      	b.n	801f1fc <HAL_RNG_GenerateRandomNumber+0xa4>
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	2201      	movs	r2, #1
 801f176:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	7a5b      	ldrb	r3, [r3, #9]
 801f17c:	b2db      	uxtb	r3, r3
 801f17e:	2b01      	cmp	r3, #1
 801f180:	d133      	bne.n	801f1ea <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2202      	movs	r2, #2
 801f186:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 801f188:	f7fc f9cc 	bl	801b524 <HAL_GetTick>
 801f18c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f18e:	e018      	b.n	801f1c2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801f190:	f7fc f9c8 	bl	801b524 <HAL_GetTick>
 801f194:	4602      	mov	r2, r0
 801f196:	68bb      	ldr	r3, [r7, #8]
 801f198:	1ad3      	subs	r3, r2, r3
 801f19a:	2b02      	cmp	r3, #2
 801f19c:	d911      	bls.n	801f1c2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	681b      	ldr	r3, [r3, #0]
 801f1a2:	685b      	ldr	r3, [r3, #4]
 801f1a4:	f003 0301 	and.w	r3, r3, #1
 801f1a8:	2b01      	cmp	r3, #1
 801f1aa:	d00a      	beq.n	801f1c2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	2201      	movs	r2, #1
 801f1b0:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	2202      	movs	r2, #2
 801f1b6:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 801f1be:	2301      	movs	r3, #1
 801f1c0:	e01c      	b.n	801f1fc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	685b      	ldr	r3, [r3, #4]
 801f1c8:	f003 0301 	and.w	r3, r3, #1
 801f1cc:	2b01      	cmp	r3, #1
 801f1ce:	d1df      	bne.n	801f190 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	689a      	ldr	r2, [r3, #8]
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	691a      	ldr	r2, [r3, #16]
 801f1de:	683b      	ldr	r3, [r7, #0]
 801f1e0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	2201      	movs	r2, #1
 801f1e6:	725a      	strb	r2, [r3, #9]
 801f1e8:	e004      	b.n	801f1f4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	2204      	movs	r2, #4
 801f1ee:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 801f1f0:	2301      	movs	r3, #1
 801f1f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	2200      	movs	r2, #0
 801f1f8:	721a      	strb	r2, [r3, #8]

  return status;
 801f1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801f1fc:	4618      	mov	r0, r3
 801f1fe:	3710      	adds	r7, #16
 801f200:	46bd      	mov	sp, r7
 801f202:	bd80      	pop	{r7, pc}

0801f204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f204:	b580      	push	{r7, lr}
 801f206:	b082      	sub	sp, #8
 801f208:	af00      	add	r7, sp, #0
 801f20a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d101      	bne.n	801f216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f212:	2301      	movs	r3, #1
 801f214:	e049      	b.n	801f2aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f21c:	b2db      	uxtb	r3, r3
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d106      	bne.n	801f230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	2200      	movs	r2, #0
 801f226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f22a:	6878      	ldr	r0, [r7, #4]
 801f22c:	f000 f841 	bl	801f2b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	2202      	movs	r2, #2
 801f234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	681a      	ldr	r2, [r3, #0]
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	3304      	adds	r3, #4
 801f240:	4619      	mov	r1, r3
 801f242:	4610      	mov	r0, r2
 801f244:	f000 f9e8 	bl	801f618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	2201      	movs	r2, #1
 801f24c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	2201      	movs	r2, #1
 801f254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	2201      	movs	r2, #1
 801f25c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	2201      	movs	r2, #1
 801f264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	2201      	movs	r2, #1
 801f26c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	2201      	movs	r2, #1
 801f274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	2201      	movs	r2, #1
 801f27c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	2201      	movs	r2, #1
 801f284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	2201      	movs	r2, #1
 801f28c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	2201      	movs	r2, #1
 801f294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	2201      	movs	r2, #1
 801f29c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	2201      	movs	r2, #1
 801f2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f2a8:	2300      	movs	r3, #0
}
 801f2aa:	4618      	mov	r0, r3
 801f2ac:	3708      	adds	r7, #8
 801f2ae:	46bd      	mov	sp, r7
 801f2b0:	bd80      	pop	{r7, pc}

0801f2b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801f2b2:	b480      	push	{r7}
 801f2b4:	b083      	sub	sp, #12
 801f2b6:	af00      	add	r7, sp, #0
 801f2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801f2ba:	bf00      	nop
 801f2bc:	370c      	adds	r7, #12
 801f2be:	46bd      	mov	sp, r7
 801f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2c4:	4770      	bx	lr
	...

0801f2c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f2c8:	b480      	push	{r7}
 801f2ca:	b085      	sub	sp, #20
 801f2cc:	af00      	add	r7, sp, #0
 801f2ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f2d6:	b2db      	uxtb	r3, r3
 801f2d8:	2b01      	cmp	r3, #1
 801f2da:	d001      	beq.n	801f2e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f2dc:	2301      	movs	r3, #1
 801f2de:	e054      	b.n	801f38a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	2202      	movs	r2, #2
 801f2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	68da      	ldr	r2, [r3, #12]
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	f042 0201 	orr.w	r2, r2, #1
 801f2f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	4a26      	ldr	r2, [pc, #152]	@ (801f398 <HAL_TIM_Base_Start_IT+0xd0>)
 801f2fe:	4293      	cmp	r3, r2
 801f300:	d022      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f30a:	d01d      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	4a22      	ldr	r2, [pc, #136]	@ (801f39c <HAL_TIM_Base_Start_IT+0xd4>)
 801f312:	4293      	cmp	r3, r2
 801f314:	d018      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	4a21      	ldr	r2, [pc, #132]	@ (801f3a0 <HAL_TIM_Base_Start_IT+0xd8>)
 801f31c:	4293      	cmp	r3, r2
 801f31e:	d013      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	681b      	ldr	r3, [r3, #0]
 801f324:	4a1f      	ldr	r2, [pc, #124]	@ (801f3a4 <HAL_TIM_Base_Start_IT+0xdc>)
 801f326:	4293      	cmp	r3, r2
 801f328:	d00e      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	4a1e      	ldr	r2, [pc, #120]	@ (801f3a8 <HAL_TIM_Base_Start_IT+0xe0>)
 801f330:	4293      	cmp	r3, r2
 801f332:	d009      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	4a1c      	ldr	r2, [pc, #112]	@ (801f3ac <HAL_TIM_Base_Start_IT+0xe4>)
 801f33a:	4293      	cmp	r3, r2
 801f33c:	d004      	beq.n	801f348 <HAL_TIM_Base_Start_IT+0x80>
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	4a1b      	ldr	r2, [pc, #108]	@ (801f3b0 <HAL_TIM_Base_Start_IT+0xe8>)
 801f344:	4293      	cmp	r3, r2
 801f346:	d115      	bne.n	801f374 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	689a      	ldr	r2, [r3, #8]
 801f34e:	4b19      	ldr	r3, [pc, #100]	@ (801f3b4 <HAL_TIM_Base_Start_IT+0xec>)
 801f350:	4013      	ands	r3, r2
 801f352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	2b06      	cmp	r3, #6
 801f358:	d015      	beq.n	801f386 <HAL_TIM_Base_Start_IT+0xbe>
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f360:	d011      	beq.n	801f386 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	681a      	ldr	r2, [r3, #0]
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	681b      	ldr	r3, [r3, #0]
 801f36c:	f042 0201 	orr.w	r2, r2, #1
 801f370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f372:	e008      	b.n	801f386 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	681a      	ldr	r2, [r3, #0]
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	f042 0201 	orr.w	r2, r2, #1
 801f382:	601a      	str	r2, [r3, #0]
 801f384:	e000      	b.n	801f388 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f388:	2300      	movs	r3, #0
}
 801f38a:	4618      	mov	r0, r3
 801f38c:	3714      	adds	r7, #20
 801f38e:	46bd      	mov	sp, r7
 801f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f394:	4770      	bx	lr
 801f396:	bf00      	nop
 801f398:	40010000 	.word	0x40010000
 801f39c:	40000400 	.word	0x40000400
 801f3a0:	40000800 	.word	0x40000800
 801f3a4:	40000c00 	.word	0x40000c00
 801f3a8:	40010400 	.word	0x40010400
 801f3ac:	40001800 	.word	0x40001800
 801f3b0:	40014000 	.word	0x40014000
 801f3b4:	00010007 	.word	0x00010007

0801f3b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b084      	sub	sp, #16
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	681b      	ldr	r3, [r3, #0]
 801f3c4:	68db      	ldr	r3, [r3, #12]
 801f3c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	691b      	ldr	r3, [r3, #16]
 801f3ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801f3d0:	68bb      	ldr	r3, [r7, #8]
 801f3d2:	f003 0302 	and.w	r3, r3, #2
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d020      	beq.n	801f41c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801f3da:	68fb      	ldr	r3, [r7, #12]
 801f3dc:	f003 0302 	and.w	r3, r3, #2
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d01b      	beq.n	801f41c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	f06f 0202 	mvn.w	r2, #2
 801f3ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	2201      	movs	r2, #1
 801f3f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	699b      	ldr	r3, [r3, #24]
 801f3fa:	f003 0303 	and.w	r3, r3, #3
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d003      	beq.n	801f40a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f402:	6878      	ldr	r0, [r7, #4]
 801f404:	f000 f8e9 	bl	801f5da <HAL_TIM_IC_CaptureCallback>
 801f408:	e005      	b.n	801f416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f40a:	6878      	ldr	r0, [r7, #4]
 801f40c:	f000 f8db 	bl	801f5c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f410:	6878      	ldr	r0, [r7, #4]
 801f412:	f000 f8ec 	bl	801f5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	2200      	movs	r2, #0
 801f41a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801f41c:	68bb      	ldr	r3, [r7, #8]
 801f41e:	f003 0304 	and.w	r3, r3, #4
 801f422:	2b00      	cmp	r3, #0
 801f424:	d020      	beq.n	801f468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	f003 0304 	and.w	r3, r3, #4
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d01b      	beq.n	801f468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	f06f 0204 	mvn.w	r2, #4
 801f438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	2202      	movs	r2, #2
 801f43e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	681b      	ldr	r3, [r3, #0]
 801f444:	699b      	ldr	r3, [r3, #24]
 801f446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d003      	beq.n	801f456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f44e:	6878      	ldr	r0, [r7, #4]
 801f450:	f000 f8c3 	bl	801f5da <HAL_TIM_IC_CaptureCallback>
 801f454:	e005      	b.n	801f462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f456:	6878      	ldr	r0, [r7, #4]
 801f458:	f000 f8b5 	bl	801f5c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f45c:	6878      	ldr	r0, [r7, #4]
 801f45e:	f000 f8c6 	bl	801f5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f462:	687b      	ldr	r3, [r7, #4]
 801f464:	2200      	movs	r2, #0
 801f466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801f468:	68bb      	ldr	r3, [r7, #8]
 801f46a:	f003 0308 	and.w	r3, r3, #8
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d020      	beq.n	801f4b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	f003 0308 	and.w	r3, r3, #8
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d01b      	beq.n	801f4b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	f06f 0208 	mvn.w	r2, #8
 801f484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	2204      	movs	r2, #4
 801f48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	69db      	ldr	r3, [r3, #28]
 801f492:	f003 0303 	and.w	r3, r3, #3
 801f496:	2b00      	cmp	r3, #0
 801f498:	d003      	beq.n	801f4a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f49a:	6878      	ldr	r0, [r7, #4]
 801f49c:	f000 f89d 	bl	801f5da <HAL_TIM_IC_CaptureCallback>
 801f4a0:	e005      	b.n	801f4ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f4a2:	6878      	ldr	r0, [r7, #4]
 801f4a4:	f000 f88f 	bl	801f5c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f4a8:	6878      	ldr	r0, [r7, #4]
 801f4aa:	f000 f8a0 	bl	801f5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	2200      	movs	r2, #0
 801f4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801f4b4:	68bb      	ldr	r3, [r7, #8]
 801f4b6:	f003 0310 	and.w	r3, r3, #16
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d020      	beq.n	801f500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	f003 0310 	and.w	r3, r3, #16
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d01b      	beq.n	801f500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	f06f 0210 	mvn.w	r2, #16
 801f4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	2208      	movs	r2, #8
 801f4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	69db      	ldr	r3, [r3, #28]
 801f4de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d003      	beq.n	801f4ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f4e6:	6878      	ldr	r0, [r7, #4]
 801f4e8:	f000 f877 	bl	801f5da <HAL_TIM_IC_CaptureCallback>
 801f4ec:	e005      	b.n	801f4fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f4ee:	6878      	ldr	r0, [r7, #4]
 801f4f0:	f000 f869 	bl	801f5c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f4f4:	6878      	ldr	r0, [r7, #4]
 801f4f6:	f000 f87a 	bl	801f5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	2200      	movs	r2, #0
 801f4fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801f500:	68bb      	ldr	r3, [r7, #8]
 801f502:	f003 0301 	and.w	r3, r3, #1
 801f506:	2b00      	cmp	r3, #0
 801f508:	d00c      	beq.n	801f524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801f50a:	68fb      	ldr	r3, [r7, #12]
 801f50c:	f003 0301 	and.w	r3, r3, #1
 801f510:	2b00      	cmp	r3, #0
 801f512:	d007      	beq.n	801f524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	f06f 0201 	mvn.w	r2, #1
 801f51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f51e:	6878      	ldr	r0, [r7, #4]
 801f520:	f7e2 f812 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801f524:	68bb      	ldr	r3, [r7, #8]
 801f526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d104      	bne.n	801f538 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801f52e:	68bb      	ldr	r3, [r7, #8]
 801f530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801f534:	2b00      	cmp	r3, #0
 801f536:	d00c      	beq.n	801f552 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d007      	beq.n	801f552 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801f54a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f54c:	6878      	ldr	r0, [r7, #4]
 801f54e:	f000 f913 	bl	801f778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801f552:	68bb      	ldr	r3, [r7, #8]
 801f554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d00c      	beq.n	801f576 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801f55c:	68fb      	ldr	r3, [r7, #12]
 801f55e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f562:	2b00      	cmp	r3, #0
 801f564:	d007      	beq.n	801f576 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801f56e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f570:	6878      	ldr	r0, [r7, #4]
 801f572:	f000 f90b 	bl	801f78c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801f576:	68bb      	ldr	r3, [r7, #8]
 801f578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d00c      	beq.n	801f59a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f586:	2b00      	cmp	r3, #0
 801f588:	d007      	beq.n	801f59a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801f592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f594:	6878      	ldr	r0, [r7, #4]
 801f596:	f000 f834 	bl	801f602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801f59a:	68bb      	ldr	r3, [r7, #8]
 801f59c:	f003 0320 	and.w	r3, r3, #32
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d00c      	beq.n	801f5be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801f5a4:	68fb      	ldr	r3, [r7, #12]
 801f5a6:	f003 0320 	and.w	r3, r3, #32
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d007      	beq.n	801f5be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	681b      	ldr	r3, [r3, #0]
 801f5b2:	f06f 0220 	mvn.w	r2, #32
 801f5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f5b8:	6878      	ldr	r0, [r7, #4]
 801f5ba:	f000 f8d3 	bl	801f764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f5be:	bf00      	nop
 801f5c0:	3710      	adds	r7, #16
 801f5c2:	46bd      	mov	sp, r7
 801f5c4:	bd80      	pop	{r7, pc}

0801f5c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f5c6:	b480      	push	{r7}
 801f5c8:	b083      	sub	sp, #12
 801f5ca:	af00      	add	r7, sp, #0
 801f5cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f5ce:	bf00      	nop
 801f5d0:	370c      	adds	r7, #12
 801f5d2:	46bd      	mov	sp, r7
 801f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5d8:	4770      	bx	lr

0801f5da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f5da:	b480      	push	{r7}
 801f5dc:	b083      	sub	sp, #12
 801f5de:	af00      	add	r7, sp, #0
 801f5e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f5e2:	bf00      	nop
 801f5e4:	370c      	adds	r7, #12
 801f5e6:	46bd      	mov	sp, r7
 801f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ec:	4770      	bx	lr

0801f5ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f5ee:	b480      	push	{r7}
 801f5f0:	b083      	sub	sp, #12
 801f5f2:	af00      	add	r7, sp, #0
 801f5f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f5f6:	bf00      	nop
 801f5f8:	370c      	adds	r7, #12
 801f5fa:	46bd      	mov	sp, r7
 801f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f600:	4770      	bx	lr

0801f602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f602:	b480      	push	{r7}
 801f604:	b083      	sub	sp, #12
 801f606:	af00      	add	r7, sp, #0
 801f608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f60a:	bf00      	nop
 801f60c:	370c      	adds	r7, #12
 801f60e:	46bd      	mov	sp, r7
 801f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f614:	4770      	bx	lr
	...

0801f618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f618:	b480      	push	{r7}
 801f61a:	b085      	sub	sp, #20
 801f61c:	af00      	add	r7, sp, #0
 801f61e:	6078      	str	r0, [r7, #4]
 801f620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	4a46      	ldr	r2, [pc, #280]	@ (801f744 <TIM_Base_SetConfig+0x12c>)
 801f62c:	4293      	cmp	r3, r2
 801f62e:	d013      	beq.n	801f658 <TIM_Base_SetConfig+0x40>
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f636:	d00f      	beq.n	801f658 <TIM_Base_SetConfig+0x40>
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	4a43      	ldr	r2, [pc, #268]	@ (801f748 <TIM_Base_SetConfig+0x130>)
 801f63c:	4293      	cmp	r3, r2
 801f63e:	d00b      	beq.n	801f658 <TIM_Base_SetConfig+0x40>
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	4a42      	ldr	r2, [pc, #264]	@ (801f74c <TIM_Base_SetConfig+0x134>)
 801f644:	4293      	cmp	r3, r2
 801f646:	d007      	beq.n	801f658 <TIM_Base_SetConfig+0x40>
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	4a41      	ldr	r2, [pc, #260]	@ (801f750 <TIM_Base_SetConfig+0x138>)
 801f64c:	4293      	cmp	r3, r2
 801f64e:	d003      	beq.n	801f658 <TIM_Base_SetConfig+0x40>
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	4a40      	ldr	r2, [pc, #256]	@ (801f754 <TIM_Base_SetConfig+0x13c>)
 801f654:	4293      	cmp	r3, r2
 801f656:	d108      	bne.n	801f66a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f658:	68fb      	ldr	r3, [r7, #12]
 801f65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f65e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f660:	683b      	ldr	r3, [r7, #0]
 801f662:	685b      	ldr	r3, [r3, #4]
 801f664:	68fa      	ldr	r2, [r7, #12]
 801f666:	4313      	orrs	r3, r2
 801f668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	4a35      	ldr	r2, [pc, #212]	@ (801f744 <TIM_Base_SetConfig+0x12c>)
 801f66e:	4293      	cmp	r3, r2
 801f670:	d01f      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f678:	d01b      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	4a32      	ldr	r2, [pc, #200]	@ (801f748 <TIM_Base_SetConfig+0x130>)
 801f67e:	4293      	cmp	r3, r2
 801f680:	d017      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	4a31      	ldr	r2, [pc, #196]	@ (801f74c <TIM_Base_SetConfig+0x134>)
 801f686:	4293      	cmp	r3, r2
 801f688:	d013      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	4a30      	ldr	r2, [pc, #192]	@ (801f750 <TIM_Base_SetConfig+0x138>)
 801f68e:	4293      	cmp	r3, r2
 801f690:	d00f      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	4a2f      	ldr	r2, [pc, #188]	@ (801f754 <TIM_Base_SetConfig+0x13c>)
 801f696:	4293      	cmp	r3, r2
 801f698:	d00b      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	4a2e      	ldr	r2, [pc, #184]	@ (801f758 <TIM_Base_SetConfig+0x140>)
 801f69e:	4293      	cmp	r3, r2
 801f6a0:	d007      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	4a2d      	ldr	r2, [pc, #180]	@ (801f75c <TIM_Base_SetConfig+0x144>)
 801f6a6:	4293      	cmp	r3, r2
 801f6a8:	d003      	beq.n	801f6b2 <TIM_Base_SetConfig+0x9a>
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	4a2c      	ldr	r2, [pc, #176]	@ (801f760 <TIM_Base_SetConfig+0x148>)
 801f6ae:	4293      	cmp	r3, r2
 801f6b0:	d108      	bne.n	801f6c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f6b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f6ba:	683b      	ldr	r3, [r7, #0]
 801f6bc:	68db      	ldr	r3, [r3, #12]
 801f6be:	68fa      	ldr	r2, [r7, #12]
 801f6c0:	4313      	orrs	r3, r2
 801f6c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801f6ca:	683b      	ldr	r3, [r7, #0]
 801f6cc:	695b      	ldr	r3, [r3, #20]
 801f6ce:	4313      	orrs	r3, r2
 801f6d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	68fa      	ldr	r2, [r7, #12]
 801f6d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f6d8:	683b      	ldr	r3, [r7, #0]
 801f6da:	689a      	ldr	r2, [r3, #8]
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f6e0:	683b      	ldr	r3, [r7, #0]
 801f6e2:	681a      	ldr	r2, [r3, #0]
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	4a16      	ldr	r2, [pc, #88]	@ (801f744 <TIM_Base_SetConfig+0x12c>)
 801f6ec:	4293      	cmp	r3, r2
 801f6ee:	d00f      	beq.n	801f710 <TIM_Base_SetConfig+0xf8>
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	4a18      	ldr	r2, [pc, #96]	@ (801f754 <TIM_Base_SetConfig+0x13c>)
 801f6f4:	4293      	cmp	r3, r2
 801f6f6:	d00b      	beq.n	801f710 <TIM_Base_SetConfig+0xf8>
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	4a17      	ldr	r2, [pc, #92]	@ (801f758 <TIM_Base_SetConfig+0x140>)
 801f6fc:	4293      	cmp	r3, r2
 801f6fe:	d007      	beq.n	801f710 <TIM_Base_SetConfig+0xf8>
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	4a16      	ldr	r2, [pc, #88]	@ (801f75c <TIM_Base_SetConfig+0x144>)
 801f704:	4293      	cmp	r3, r2
 801f706:	d003      	beq.n	801f710 <TIM_Base_SetConfig+0xf8>
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	4a15      	ldr	r2, [pc, #84]	@ (801f760 <TIM_Base_SetConfig+0x148>)
 801f70c:	4293      	cmp	r3, r2
 801f70e:	d103      	bne.n	801f718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f710:	683b      	ldr	r3, [r7, #0]
 801f712:	691a      	ldr	r2, [r3, #16]
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	2201      	movs	r2, #1
 801f71c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	691b      	ldr	r3, [r3, #16]
 801f722:	f003 0301 	and.w	r3, r3, #1
 801f726:	2b01      	cmp	r3, #1
 801f728:	d105      	bne.n	801f736 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	691b      	ldr	r3, [r3, #16]
 801f72e:	f023 0201 	bic.w	r2, r3, #1
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	611a      	str	r2, [r3, #16]
  }
}
 801f736:	bf00      	nop
 801f738:	3714      	adds	r7, #20
 801f73a:	46bd      	mov	sp, r7
 801f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f740:	4770      	bx	lr
 801f742:	bf00      	nop
 801f744:	40010000 	.word	0x40010000
 801f748:	40000400 	.word	0x40000400
 801f74c:	40000800 	.word	0x40000800
 801f750:	40000c00 	.word	0x40000c00
 801f754:	40010400 	.word	0x40010400
 801f758:	40014000 	.word	0x40014000
 801f75c:	40014400 	.word	0x40014400
 801f760:	40014800 	.word	0x40014800

0801f764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f764:	b480      	push	{r7}
 801f766:	b083      	sub	sp, #12
 801f768:	af00      	add	r7, sp, #0
 801f76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f76c:	bf00      	nop
 801f76e:	370c      	adds	r7, #12
 801f770:	46bd      	mov	sp, r7
 801f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f776:	4770      	bx	lr

0801f778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f778:	b480      	push	{r7}
 801f77a:	b083      	sub	sp, #12
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f780:	bf00      	nop
 801f782:	370c      	adds	r7, #12
 801f784:	46bd      	mov	sp, r7
 801f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f78a:	4770      	bx	lr

0801f78c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f78c:	b480      	push	{r7}
 801f78e:	b083      	sub	sp, #12
 801f790:	af00      	add	r7, sp, #0
 801f792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f794:	bf00      	nop
 801f796:	370c      	adds	r7, #12
 801f798:	46bd      	mov	sp, r7
 801f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79e:	4770      	bx	lr

0801f7a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f7a0:	b580      	push	{r7, lr}
 801f7a2:	b082      	sub	sp, #8
 801f7a4:	af00      	add	r7, sp, #0
 801f7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d101      	bne.n	801f7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f7ae:	2301      	movs	r3, #1
 801f7b0:	e042      	b.n	801f838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d106      	bne.n	801f7ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	2200      	movs	r2, #0
 801f7c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f7c4:	6878      	ldr	r0, [r7, #4]
 801f7c6:	f7fb fc19 	bl	801affc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	2224      	movs	r2, #36	@ 0x24
 801f7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	681a      	ldr	r2, [r3, #0]
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	f022 0201 	bic.w	r2, r2, #1
 801f7e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d002      	beq.n	801f7f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f7ea:	6878      	ldr	r0, [r7, #4]
 801f7ec:	f000 fee6 	bl	80205bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f7f0:	6878      	ldr	r0, [r7, #4]
 801f7f2:	f000 f97b 	bl	801faec <UART_SetConfig>
 801f7f6:	4603      	mov	r3, r0
 801f7f8:	2b01      	cmp	r3, #1
 801f7fa:	d101      	bne.n	801f800 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f7fc:	2301      	movs	r3, #1
 801f7fe:	e01b      	b.n	801f838 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	685a      	ldr	r2, [r3, #4]
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f80e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	689a      	ldr	r2, [r3, #8]
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f81e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	681a      	ldr	r2, [r3, #0]
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	f042 0201 	orr.w	r2, r2, #1
 801f82e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f830:	6878      	ldr	r0, [r7, #4]
 801f832:	f000 ff65 	bl	8020700 <UART_CheckIdleState>
 801f836:	4603      	mov	r3, r0
}
 801f838:	4618      	mov	r0, r3
 801f83a:	3708      	adds	r7, #8
 801f83c:	46bd      	mov	sp, r7
 801f83e:	bd80      	pop	{r7, pc}

0801f840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f840:	b580      	push	{r7, lr}
 801f842:	b08a      	sub	sp, #40	@ 0x28
 801f844:	af02      	add	r7, sp, #8
 801f846:	60f8      	str	r0, [r7, #12]
 801f848:	60b9      	str	r1, [r7, #8]
 801f84a:	603b      	str	r3, [r7, #0]
 801f84c:	4613      	mov	r3, r2
 801f84e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f850:	68fb      	ldr	r3, [r7, #12]
 801f852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f856:	2b20      	cmp	r3, #32
 801f858:	d17b      	bne.n	801f952 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801f85a:	68bb      	ldr	r3, [r7, #8]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d002      	beq.n	801f866 <HAL_UART_Transmit+0x26>
 801f860:	88fb      	ldrh	r3, [r7, #6]
 801f862:	2b00      	cmp	r3, #0
 801f864:	d101      	bne.n	801f86a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801f866:	2301      	movs	r3, #1
 801f868:	e074      	b.n	801f954 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	2200      	movs	r2, #0
 801f86e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	2221      	movs	r2, #33	@ 0x21
 801f876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f87a:	f7fb fe53 	bl	801b524 <HAL_GetTick>
 801f87e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	88fa      	ldrh	r2, [r7, #6]
 801f884:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	88fa      	ldrh	r2, [r7, #6]
 801f88c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	689b      	ldr	r3, [r3, #8]
 801f894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f898:	d108      	bne.n	801f8ac <HAL_UART_Transmit+0x6c>
 801f89a:	68fb      	ldr	r3, [r7, #12]
 801f89c:	691b      	ldr	r3, [r3, #16]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d104      	bne.n	801f8ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f8a6:	68bb      	ldr	r3, [r7, #8]
 801f8a8:	61bb      	str	r3, [r7, #24]
 801f8aa:	e003      	b.n	801f8b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801f8ac:	68bb      	ldr	r3, [r7, #8]
 801f8ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f8b0:	2300      	movs	r3, #0
 801f8b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f8b4:	e030      	b.n	801f918 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f8b6:	683b      	ldr	r3, [r7, #0]
 801f8b8:	9300      	str	r3, [sp, #0]
 801f8ba:	697b      	ldr	r3, [r7, #20]
 801f8bc:	2200      	movs	r2, #0
 801f8be:	2180      	movs	r1, #128	@ 0x80
 801f8c0:	68f8      	ldr	r0, [r7, #12]
 801f8c2:	f000 ffc7 	bl	8020854 <UART_WaitOnFlagUntilTimeout>
 801f8c6:	4603      	mov	r3, r0
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d005      	beq.n	801f8d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	2220      	movs	r2, #32
 801f8d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801f8d4:	2303      	movs	r3, #3
 801f8d6:	e03d      	b.n	801f954 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801f8d8:	69fb      	ldr	r3, [r7, #28]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d10b      	bne.n	801f8f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f8de:	69bb      	ldr	r3, [r7, #24]
 801f8e0:	881b      	ldrh	r3, [r3, #0]
 801f8e2:	461a      	mov	r2, r3
 801f8e4:	68fb      	ldr	r3, [r7, #12]
 801f8e6:	681b      	ldr	r3, [r3, #0]
 801f8e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f8ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801f8ee:	69bb      	ldr	r3, [r7, #24]
 801f8f0:	3302      	adds	r3, #2
 801f8f2:	61bb      	str	r3, [r7, #24]
 801f8f4:	e007      	b.n	801f906 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f8f6:	69fb      	ldr	r3, [r7, #28]
 801f8f8:	781a      	ldrb	r2, [r3, #0]
 801f8fa:	68fb      	ldr	r3, [r7, #12]
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801f900:	69fb      	ldr	r3, [r7, #28]
 801f902:	3301      	adds	r3, #1
 801f904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f90c:	b29b      	uxth	r3, r3
 801f90e:	3b01      	subs	r3, #1
 801f910:	b29a      	uxth	r2, r3
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f91e:	b29b      	uxth	r3, r3
 801f920:	2b00      	cmp	r3, #0
 801f922:	d1c8      	bne.n	801f8b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f924:	683b      	ldr	r3, [r7, #0]
 801f926:	9300      	str	r3, [sp, #0]
 801f928:	697b      	ldr	r3, [r7, #20]
 801f92a:	2200      	movs	r2, #0
 801f92c:	2140      	movs	r1, #64	@ 0x40
 801f92e:	68f8      	ldr	r0, [r7, #12]
 801f930:	f000 ff90 	bl	8020854 <UART_WaitOnFlagUntilTimeout>
 801f934:	4603      	mov	r3, r0
 801f936:	2b00      	cmp	r3, #0
 801f938:	d005      	beq.n	801f946 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801f93a:	68fb      	ldr	r3, [r7, #12]
 801f93c:	2220      	movs	r2, #32
 801f93e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801f942:	2303      	movs	r3, #3
 801f944:	e006      	b.n	801f954 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	2220      	movs	r2, #32
 801f94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801f94e:	2300      	movs	r3, #0
 801f950:	e000      	b.n	801f954 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801f952:	2302      	movs	r3, #2
  }
}
 801f954:	4618      	mov	r0, r3
 801f956:	3720      	adds	r7, #32
 801f958:	46bd      	mov	sp, r7
 801f95a:	bd80      	pop	{r7, pc}

0801f95c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b08a      	sub	sp, #40	@ 0x28
 801f960:	af02      	add	r7, sp, #8
 801f962:	60f8      	str	r0, [r7, #12]
 801f964:	60b9      	str	r1, [r7, #8]
 801f966:	603b      	str	r3, [r7, #0]
 801f968:	4613      	mov	r3, r2
 801f96a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f96c:	68fb      	ldr	r3, [r7, #12]
 801f96e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f972:	2b20      	cmp	r3, #32
 801f974:	f040 80b5 	bne.w	801fae2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801f978:	68bb      	ldr	r3, [r7, #8]
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d002      	beq.n	801f984 <HAL_UART_Receive+0x28>
 801f97e:	88fb      	ldrh	r3, [r7, #6]
 801f980:	2b00      	cmp	r3, #0
 801f982:	d101      	bne.n	801f988 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801f984:	2301      	movs	r3, #1
 801f986:	e0ad      	b.n	801fae4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	2200      	movs	r2, #0
 801f98c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801f990:	68fb      	ldr	r3, [r7, #12]
 801f992:	2222      	movs	r2, #34	@ 0x22
 801f994:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f998:	68fb      	ldr	r3, [r7, #12]
 801f99a:	2200      	movs	r2, #0
 801f99c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f99e:	f7fb fdc1 	bl	801b524 <HAL_GetTick>
 801f9a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801f9a4:	68fb      	ldr	r3, [r7, #12]
 801f9a6:	88fa      	ldrh	r2, [r7, #6]
 801f9a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 801f9ac:	68fb      	ldr	r3, [r7, #12]
 801f9ae:	88fa      	ldrh	r2, [r7, #6]
 801f9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801f9b4:	68fb      	ldr	r3, [r7, #12]
 801f9b6:	689b      	ldr	r3, [r3, #8]
 801f9b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f9bc:	d10e      	bne.n	801f9dc <HAL_UART_Receive+0x80>
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	691b      	ldr	r3, [r3, #16]
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	d105      	bne.n	801f9d2 <HAL_UART_Receive+0x76>
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801f9cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f9d0:	e02d      	b.n	801fa2e <HAL_UART_Receive+0xd2>
 801f9d2:	68fb      	ldr	r3, [r7, #12]
 801f9d4:	22ff      	movs	r2, #255	@ 0xff
 801f9d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f9da:	e028      	b.n	801fa2e <HAL_UART_Receive+0xd2>
 801f9dc:	68fb      	ldr	r3, [r7, #12]
 801f9de:	689b      	ldr	r3, [r3, #8]
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d10d      	bne.n	801fa00 <HAL_UART_Receive+0xa4>
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	691b      	ldr	r3, [r3, #16]
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	d104      	bne.n	801f9f6 <HAL_UART_Receive+0x9a>
 801f9ec:	68fb      	ldr	r3, [r7, #12]
 801f9ee:	22ff      	movs	r2, #255	@ 0xff
 801f9f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f9f4:	e01b      	b.n	801fa2e <HAL_UART_Receive+0xd2>
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	227f      	movs	r2, #127	@ 0x7f
 801f9fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f9fe:	e016      	b.n	801fa2e <HAL_UART_Receive+0xd2>
 801fa00:	68fb      	ldr	r3, [r7, #12]
 801fa02:	689b      	ldr	r3, [r3, #8]
 801fa04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fa08:	d10d      	bne.n	801fa26 <HAL_UART_Receive+0xca>
 801fa0a:	68fb      	ldr	r3, [r7, #12]
 801fa0c:	691b      	ldr	r3, [r3, #16]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d104      	bne.n	801fa1c <HAL_UART_Receive+0xc0>
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	227f      	movs	r2, #127	@ 0x7f
 801fa16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801fa1a:	e008      	b.n	801fa2e <HAL_UART_Receive+0xd2>
 801fa1c:	68fb      	ldr	r3, [r7, #12]
 801fa1e:	223f      	movs	r2, #63	@ 0x3f
 801fa20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801fa24:	e003      	b.n	801fa2e <HAL_UART_Receive+0xd2>
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	2200      	movs	r2, #0
 801fa2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 801fa2e:	68fb      	ldr	r3, [r7, #12]
 801fa30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fa34:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801fa36:	68fb      	ldr	r3, [r7, #12]
 801fa38:	689b      	ldr	r3, [r3, #8]
 801fa3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fa3e:	d108      	bne.n	801fa52 <HAL_UART_Receive+0xf6>
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	691b      	ldr	r3, [r3, #16]
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	d104      	bne.n	801fa52 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801fa48:	2300      	movs	r3, #0
 801fa4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801fa4c:	68bb      	ldr	r3, [r7, #8]
 801fa4e:	61bb      	str	r3, [r7, #24]
 801fa50:	e003      	b.n	801fa5a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801fa52:	68bb      	ldr	r3, [r7, #8]
 801fa54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801fa56:	2300      	movs	r3, #0
 801fa58:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801fa5a:	e036      	b.n	801faca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801fa5c:	683b      	ldr	r3, [r7, #0]
 801fa5e:	9300      	str	r3, [sp, #0]
 801fa60:	697b      	ldr	r3, [r7, #20]
 801fa62:	2200      	movs	r2, #0
 801fa64:	2120      	movs	r1, #32
 801fa66:	68f8      	ldr	r0, [r7, #12]
 801fa68:	f000 fef4 	bl	8020854 <UART_WaitOnFlagUntilTimeout>
 801fa6c:	4603      	mov	r3, r0
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d005      	beq.n	801fa7e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801fa72:	68fb      	ldr	r3, [r7, #12]
 801fa74:	2220      	movs	r2, #32
 801fa76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 801fa7a:	2303      	movs	r3, #3
 801fa7c:	e032      	b.n	801fae4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801fa7e:	69fb      	ldr	r3, [r7, #28]
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d10c      	bne.n	801fa9e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fa8a:	b29a      	uxth	r2, r3
 801fa8c:	8a7b      	ldrh	r3, [r7, #18]
 801fa8e:	4013      	ands	r3, r2
 801fa90:	b29a      	uxth	r2, r3
 801fa92:	69bb      	ldr	r3, [r7, #24]
 801fa94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801fa96:	69bb      	ldr	r3, [r7, #24]
 801fa98:	3302      	adds	r3, #2
 801fa9a:	61bb      	str	r3, [r7, #24]
 801fa9c:	e00c      	b.n	801fab8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801fa9e:	68fb      	ldr	r3, [r7, #12]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801faa4:	b2da      	uxtb	r2, r3
 801faa6:	8a7b      	ldrh	r3, [r7, #18]
 801faa8:	b2db      	uxtb	r3, r3
 801faaa:	4013      	ands	r3, r2
 801faac:	b2da      	uxtb	r2, r3
 801faae:	69fb      	ldr	r3, [r7, #28]
 801fab0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801fab2:	69fb      	ldr	r3, [r7, #28]
 801fab4:	3301      	adds	r3, #1
 801fab6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801fab8:	68fb      	ldr	r3, [r7, #12]
 801faba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801fabe:	b29b      	uxth	r3, r3
 801fac0:	3b01      	subs	r3, #1
 801fac2:	b29a      	uxth	r2, r3
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 801faca:	68fb      	ldr	r3, [r7, #12]
 801facc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801fad0:	b29b      	uxth	r3, r3
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d1c2      	bne.n	801fa5c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	2220      	movs	r2, #32
 801fada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 801fade:	2300      	movs	r3, #0
 801fae0:	e000      	b.n	801fae4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801fae2:	2302      	movs	r3, #2
  }
}
 801fae4:	4618      	mov	r0, r3
 801fae6:	3720      	adds	r7, #32
 801fae8:	46bd      	mov	sp, r7
 801faea:	bd80      	pop	{r7, pc}

0801faec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801faec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801faf0:	b092      	sub	sp, #72	@ 0x48
 801faf2:	af00      	add	r7, sp, #0
 801faf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801faf6:	2300      	movs	r3, #0
 801faf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801fafc:	697b      	ldr	r3, [r7, #20]
 801fafe:	689a      	ldr	r2, [r3, #8]
 801fb00:	697b      	ldr	r3, [r7, #20]
 801fb02:	691b      	ldr	r3, [r3, #16]
 801fb04:	431a      	orrs	r2, r3
 801fb06:	697b      	ldr	r3, [r7, #20]
 801fb08:	695b      	ldr	r3, [r3, #20]
 801fb0a:	431a      	orrs	r2, r3
 801fb0c:	697b      	ldr	r3, [r7, #20]
 801fb0e:	69db      	ldr	r3, [r3, #28]
 801fb10:	4313      	orrs	r3, r2
 801fb12:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	681a      	ldr	r2, [r3, #0]
 801fb1a:	4bbe      	ldr	r3, [pc, #760]	@ (801fe14 <UART_SetConfig+0x328>)
 801fb1c:	4013      	ands	r3, r2
 801fb1e:	697a      	ldr	r2, [r7, #20]
 801fb20:	6812      	ldr	r2, [r2, #0]
 801fb22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801fb24:	430b      	orrs	r3, r1
 801fb26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801fb28:	697b      	ldr	r3, [r7, #20]
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	685b      	ldr	r3, [r3, #4]
 801fb2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801fb32:	697b      	ldr	r3, [r7, #20]
 801fb34:	68da      	ldr	r2, [r3, #12]
 801fb36:	697b      	ldr	r3, [r7, #20]
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	430a      	orrs	r2, r1
 801fb3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801fb3e:	697b      	ldr	r3, [r7, #20]
 801fb40:	699b      	ldr	r3, [r3, #24]
 801fb42:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801fb44:	697b      	ldr	r3, [r7, #20]
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	4ab3      	ldr	r2, [pc, #716]	@ (801fe18 <UART_SetConfig+0x32c>)
 801fb4a:	4293      	cmp	r3, r2
 801fb4c:	d004      	beq.n	801fb58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801fb4e:	697b      	ldr	r3, [r7, #20]
 801fb50:	6a1b      	ldr	r3, [r3, #32]
 801fb52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fb54:	4313      	orrs	r3, r2
 801fb56:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801fb58:	697b      	ldr	r3, [r7, #20]
 801fb5a:	681b      	ldr	r3, [r3, #0]
 801fb5c:	689a      	ldr	r2, [r3, #8]
 801fb5e:	4baf      	ldr	r3, [pc, #700]	@ (801fe1c <UART_SetConfig+0x330>)
 801fb60:	4013      	ands	r3, r2
 801fb62:	697a      	ldr	r2, [r7, #20]
 801fb64:	6812      	ldr	r2, [r2, #0]
 801fb66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801fb68:	430b      	orrs	r3, r1
 801fb6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801fb6c:	697b      	ldr	r3, [r7, #20]
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb72:	f023 010f 	bic.w	r1, r3, #15
 801fb76:	697b      	ldr	r3, [r7, #20]
 801fb78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801fb7a:	697b      	ldr	r3, [r7, #20]
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	430a      	orrs	r2, r1
 801fb80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801fb82:	697b      	ldr	r3, [r7, #20]
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	4aa6      	ldr	r2, [pc, #664]	@ (801fe20 <UART_SetConfig+0x334>)
 801fb88:	4293      	cmp	r3, r2
 801fb8a:	d177      	bne.n	801fc7c <UART_SetConfig+0x190>
 801fb8c:	4ba5      	ldr	r3, [pc, #660]	@ (801fe24 <UART_SetConfig+0x338>)
 801fb8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fb90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801fb94:	2b28      	cmp	r3, #40	@ 0x28
 801fb96:	d86d      	bhi.n	801fc74 <UART_SetConfig+0x188>
 801fb98:	a201      	add	r2, pc, #4	@ (adr r2, 801fba0 <UART_SetConfig+0xb4>)
 801fb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb9e:	bf00      	nop
 801fba0:	0801fc45 	.word	0x0801fc45
 801fba4:	0801fc75 	.word	0x0801fc75
 801fba8:	0801fc75 	.word	0x0801fc75
 801fbac:	0801fc75 	.word	0x0801fc75
 801fbb0:	0801fc75 	.word	0x0801fc75
 801fbb4:	0801fc75 	.word	0x0801fc75
 801fbb8:	0801fc75 	.word	0x0801fc75
 801fbbc:	0801fc75 	.word	0x0801fc75
 801fbc0:	0801fc4d 	.word	0x0801fc4d
 801fbc4:	0801fc75 	.word	0x0801fc75
 801fbc8:	0801fc75 	.word	0x0801fc75
 801fbcc:	0801fc75 	.word	0x0801fc75
 801fbd0:	0801fc75 	.word	0x0801fc75
 801fbd4:	0801fc75 	.word	0x0801fc75
 801fbd8:	0801fc75 	.word	0x0801fc75
 801fbdc:	0801fc75 	.word	0x0801fc75
 801fbe0:	0801fc55 	.word	0x0801fc55
 801fbe4:	0801fc75 	.word	0x0801fc75
 801fbe8:	0801fc75 	.word	0x0801fc75
 801fbec:	0801fc75 	.word	0x0801fc75
 801fbf0:	0801fc75 	.word	0x0801fc75
 801fbf4:	0801fc75 	.word	0x0801fc75
 801fbf8:	0801fc75 	.word	0x0801fc75
 801fbfc:	0801fc75 	.word	0x0801fc75
 801fc00:	0801fc5d 	.word	0x0801fc5d
 801fc04:	0801fc75 	.word	0x0801fc75
 801fc08:	0801fc75 	.word	0x0801fc75
 801fc0c:	0801fc75 	.word	0x0801fc75
 801fc10:	0801fc75 	.word	0x0801fc75
 801fc14:	0801fc75 	.word	0x0801fc75
 801fc18:	0801fc75 	.word	0x0801fc75
 801fc1c:	0801fc75 	.word	0x0801fc75
 801fc20:	0801fc65 	.word	0x0801fc65
 801fc24:	0801fc75 	.word	0x0801fc75
 801fc28:	0801fc75 	.word	0x0801fc75
 801fc2c:	0801fc75 	.word	0x0801fc75
 801fc30:	0801fc75 	.word	0x0801fc75
 801fc34:	0801fc75 	.word	0x0801fc75
 801fc38:	0801fc75 	.word	0x0801fc75
 801fc3c:	0801fc75 	.word	0x0801fc75
 801fc40:	0801fc6d 	.word	0x0801fc6d
 801fc44:	2301      	movs	r3, #1
 801fc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc4a:	e222      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc4c:	2304      	movs	r3, #4
 801fc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc52:	e21e      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc54:	2308      	movs	r3, #8
 801fc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc5a:	e21a      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc5c:	2310      	movs	r3, #16
 801fc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc62:	e216      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc64:	2320      	movs	r3, #32
 801fc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc6a:	e212      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc6c:	2340      	movs	r3, #64	@ 0x40
 801fc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc72:	e20e      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc74:	2380      	movs	r3, #128	@ 0x80
 801fc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc7a:	e20a      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fc7c:	697b      	ldr	r3, [r7, #20]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	4a69      	ldr	r2, [pc, #420]	@ (801fe28 <UART_SetConfig+0x33c>)
 801fc82:	4293      	cmp	r3, r2
 801fc84:	d130      	bne.n	801fce8 <UART_SetConfig+0x1fc>
 801fc86:	4b67      	ldr	r3, [pc, #412]	@ (801fe24 <UART_SetConfig+0x338>)
 801fc88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fc8a:	f003 0307 	and.w	r3, r3, #7
 801fc8e:	2b05      	cmp	r3, #5
 801fc90:	d826      	bhi.n	801fce0 <UART_SetConfig+0x1f4>
 801fc92:	a201      	add	r2, pc, #4	@ (adr r2, 801fc98 <UART_SetConfig+0x1ac>)
 801fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc98:	0801fcb1 	.word	0x0801fcb1
 801fc9c:	0801fcb9 	.word	0x0801fcb9
 801fca0:	0801fcc1 	.word	0x0801fcc1
 801fca4:	0801fcc9 	.word	0x0801fcc9
 801fca8:	0801fcd1 	.word	0x0801fcd1
 801fcac:	0801fcd9 	.word	0x0801fcd9
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcb6:	e1ec      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fcb8:	2304      	movs	r3, #4
 801fcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcbe:	e1e8      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fcc0:	2308      	movs	r3, #8
 801fcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcc6:	e1e4      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fcc8:	2310      	movs	r3, #16
 801fcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcce:	e1e0      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fcd0:	2320      	movs	r3, #32
 801fcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcd6:	e1dc      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fcd8:	2340      	movs	r3, #64	@ 0x40
 801fcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcde:	e1d8      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fce0:	2380      	movs	r3, #128	@ 0x80
 801fce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fce6:	e1d4      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fce8:	697b      	ldr	r3, [r7, #20]
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	4a4f      	ldr	r2, [pc, #316]	@ (801fe2c <UART_SetConfig+0x340>)
 801fcee:	4293      	cmp	r3, r2
 801fcf0:	d130      	bne.n	801fd54 <UART_SetConfig+0x268>
 801fcf2:	4b4c      	ldr	r3, [pc, #304]	@ (801fe24 <UART_SetConfig+0x338>)
 801fcf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fcf6:	f003 0307 	and.w	r3, r3, #7
 801fcfa:	2b05      	cmp	r3, #5
 801fcfc:	d826      	bhi.n	801fd4c <UART_SetConfig+0x260>
 801fcfe:	a201      	add	r2, pc, #4	@ (adr r2, 801fd04 <UART_SetConfig+0x218>)
 801fd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd04:	0801fd1d 	.word	0x0801fd1d
 801fd08:	0801fd25 	.word	0x0801fd25
 801fd0c:	0801fd2d 	.word	0x0801fd2d
 801fd10:	0801fd35 	.word	0x0801fd35
 801fd14:	0801fd3d 	.word	0x0801fd3d
 801fd18:	0801fd45 	.word	0x0801fd45
 801fd1c:	2300      	movs	r3, #0
 801fd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd22:	e1b6      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd24:	2304      	movs	r3, #4
 801fd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd2a:	e1b2      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd2c:	2308      	movs	r3, #8
 801fd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd32:	e1ae      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd34:	2310      	movs	r3, #16
 801fd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd3a:	e1aa      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd3c:	2320      	movs	r3, #32
 801fd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd42:	e1a6      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd44:	2340      	movs	r3, #64	@ 0x40
 801fd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd4a:	e1a2      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd4c:	2380      	movs	r3, #128	@ 0x80
 801fd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd52:	e19e      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd54:	697b      	ldr	r3, [r7, #20]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	4a35      	ldr	r2, [pc, #212]	@ (801fe30 <UART_SetConfig+0x344>)
 801fd5a:	4293      	cmp	r3, r2
 801fd5c:	d130      	bne.n	801fdc0 <UART_SetConfig+0x2d4>
 801fd5e:	4b31      	ldr	r3, [pc, #196]	@ (801fe24 <UART_SetConfig+0x338>)
 801fd60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fd62:	f003 0307 	and.w	r3, r3, #7
 801fd66:	2b05      	cmp	r3, #5
 801fd68:	d826      	bhi.n	801fdb8 <UART_SetConfig+0x2cc>
 801fd6a:	a201      	add	r2, pc, #4	@ (adr r2, 801fd70 <UART_SetConfig+0x284>)
 801fd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd70:	0801fd89 	.word	0x0801fd89
 801fd74:	0801fd91 	.word	0x0801fd91
 801fd78:	0801fd99 	.word	0x0801fd99
 801fd7c:	0801fda1 	.word	0x0801fda1
 801fd80:	0801fda9 	.word	0x0801fda9
 801fd84:	0801fdb1 	.word	0x0801fdb1
 801fd88:	2300      	movs	r3, #0
 801fd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd8e:	e180      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd90:	2304      	movs	r3, #4
 801fd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd96:	e17c      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fd98:	2308      	movs	r3, #8
 801fd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd9e:	e178      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fda0:	2310      	movs	r3, #16
 801fda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fda6:	e174      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fda8:	2320      	movs	r3, #32
 801fdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdae:	e170      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fdb0:	2340      	movs	r3, #64	@ 0x40
 801fdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdb6:	e16c      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fdb8:	2380      	movs	r3, #128	@ 0x80
 801fdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdbe:	e168      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fdc0:	697b      	ldr	r3, [r7, #20]
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	4a1b      	ldr	r2, [pc, #108]	@ (801fe34 <UART_SetConfig+0x348>)
 801fdc6:	4293      	cmp	r3, r2
 801fdc8:	d142      	bne.n	801fe50 <UART_SetConfig+0x364>
 801fdca:	4b16      	ldr	r3, [pc, #88]	@ (801fe24 <UART_SetConfig+0x338>)
 801fdcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fdce:	f003 0307 	and.w	r3, r3, #7
 801fdd2:	2b05      	cmp	r3, #5
 801fdd4:	d838      	bhi.n	801fe48 <UART_SetConfig+0x35c>
 801fdd6:	a201      	add	r2, pc, #4	@ (adr r2, 801fddc <UART_SetConfig+0x2f0>)
 801fdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fddc:	0801fdf5 	.word	0x0801fdf5
 801fde0:	0801fdfd 	.word	0x0801fdfd
 801fde4:	0801fe05 	.word	0x0801fe05
 801fde8:	0801fe0d 	.word	0x0801fe0d
 801fdec:	0801fe39 	.word	0x0801fe39
 801fdf0:	0801fe41 	.word	0x0801fe41
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdfa:	e14a      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fdfc:	2304      	movs	r3, #4
 801fdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe02:	e146      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fe04:	2308      	movs	r3, #8
 801fe06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe0a:	e142      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fe0c:	2310      	movs	r3, #16
 801fe0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe12:	e13e      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fe14:	cfff69f3 	.word	0xcfff69f3
 801fe18:	58000c00 	.word	0x58000c00
 801fe1c:	11fff4ff 	.word	0x11fff4ff
 801fe20:	40011000 	.word	0x40011000
 801fe24:	58024400 	.word	0x58024400
 801fe28:	40004400 	.word	0x40004400
 801fe2c:	40004800 	.word	0x40004800
 801fe30:	40004c00 	.word	0x40004c00
 801fe34:	40005000 	.word	0x40005000
 801fe38:	2320      	movs	r3, #32
 801fe3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe3e:	e128      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fe40:	2340      	movs	r3, #64	@ 0x40
 801fe42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe46:	e124      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fe48:	2380      	movs	r3, #128	@ 0x80
 801fe4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe4e:	e120      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fe50:	697b      	ldr	r3, [r7, #20]
 801fe52:	681b      	ldr	r3, [r3, #0]
 801fe54:	4acb      	ldr	r2, [pc, #812]	@ (8020184 <UART_SetConfig+0x698>)
 801fe56:	4293      	cmp	r3, r2
 801fe58:	d176      	bne.n	801ff48 <UART_SetConfig+0x45c>
 801fe5a:	4bcb      	ldr	r3, [pc, #812]	@ (8020188 <UART_SetConfig+0x69c>)
 801fe5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fe5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801fe62:	2b28      	cmp	r3, #40	@ 0x28
 801fe64:	d86c      	bhi.n	801ff40 <UART_SetConfig+0x454>
 801fe66:	a201      	add	r2, pc, #4	@ (adr r2, 801fe6c <UART_SetConfig+0x380>)
 801fe68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe6c:	0801ff11 	.word	0x0801ff11
 801fe70:	0801ff41 	.word	0x0801ff41
 801fe74:	0801ff41 	.word	0x0801ff41
 801fe78:	0801ff41 	.word	0x0801ff41
 801fe7c:	0801ff41 	.word	0x0801ff41
 801fe80:	0801ff41 	.word	0x0801ff41
 801fe84:	0801ff41 	.word	0x0801ff41
 801fe88:	0801ff41 	.word	0x0801ff41
 801fe8c:	0801ff19 	.word	0x0801ff19
 801fe90:	0801ff41 	.word	0x0801ff41
 801fe94:	0801ff41 	.word	0x0801ff41
 801fe98:	0801ff41 	.word	0x0801ff41
 801fe9c:	0801ff41 	.word	0x0801ff41
 801fea0:	0801ff41 	.word	0x0801ff41
 801fea4:	0801ff41 	.word	0x0801ff41
 801fea8:	0801ff41 	.word	0x0801ff41
 801feac:	0801ff21 	.word	0x0801ff21
 801feb0:	0801ff41 	.word	0x0801ff41
 801feb4:	0801ff41 	.word	0x0801ff41
 801feb8:	0801ff41 	.word	0x0801ff41
 801febc:	0801ff41 	.word	0x0801ff41
 801fec0:	0801ff41 	.word	0x0801ff41
 801fec4:	0801ff41 	.word	0x0801ff41
 801fec8:	0801ff41 	.word	0x0801ff41
 801fecc:	0801ff29 	.word	0x0801ff29
 801fed0:	0801ff41 	.word	0x0801ff41
 801fed4:	0801ff41 	.word	0x0801ff41
 801fed8:	0801ff41 	.word	0x0801ff41
 801fedc:	0801ff41 	.word	0x0801ff41
 801fee0:	0801ff41 	.word	0x0801ff41
 801fee4:	0801ff41 	.word	0x0801ff41
 801fee8:	0801ff41 	.word	0x0801ff41
 801feec:	0801ff31 	.word	0x0801ff31
 801fef0:	0801ff41 	.word	0x0801ff41
 801fef4:	0801ff41 	.word	0x0801ff41
 801fef8:	0801ff41 	.word	0x0801ff41
 801fefc:	0801ff41 	.word	0x0801ff41
 801ff00:	0801ff41 	.word	0x0801ff41
 801ff04:	0801ff41 	.word	0x0801ff41
 801ff08:	0801ff41 	.word	0x0801ff41
 801ff0c:	0801ff39 	.word	0x0801ff39
 801ff10:	2301      	movs	r3, #1
 801ff12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff16:	e0bc      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff18:	2304      	movs	r3, #4
 801ff1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff1e:	e0b8      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff20:	2308      	movs	r3, #8
 801ff22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff26:	e0b4      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff28:	2310      	movs	r3, #16
 801ff2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff2e:	e0b0      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff30:	2320      	movs	r3, #32
 801ff32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff36:	e0ac      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff38:	2340      	movs	r3, #64	@ 0x40
 801ff3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff3e:	e0a8      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff40:	2380      	movs	r3, #128	@ 0x80
 801ff42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff46:	e0a4      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff48:	697b      	ldr	r3, [r7, #20]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	4a8f      	ldr	r2, [pc, #572]	@ (802018c <UART_SetConfig+0x6a0>)
 801ff4e:	4293      	cmp	r3, r2
 801ff50:	d130      	bne.n	801ffb4 <UART_SetConfig+0x4c8>
 801ff52:	4b8d      	ldr	r3, [pc, #564]	@ (8020188 <UART_SetConfig+0x69c>)
 801ff54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ff56:	f003 0307 	and.w	r3, r3, #7
 801ff5a:	2b05      	cmp	r3, #5
 801ff5c:	d826      	bhi.n	801ffac <UART_SetConfig+0x4c0>
 801ff5e:	a201      	add	r2, pc, #4	@ (adr r2, 801ff64 <UART_SetConfig+0x478>)
 801ff60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff64:	0801ff7d 	.word	0x0801ff7d
 801ff68:	0801ff85 	.word	0x0801ff85
 801ff6c:	0801ff8d 	.word	0x0801ff8d
 801ff70:	0801ff95 	.word	0x0801ff95
 801ff74:	0801ff9d 	.word	0x0801ff9d
 801ff78:	0801ffa5 	.word	0x0801ffa5
 801ff7c:	2300      	movs	r3, #0
 801ff7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff82:	e086      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff84:	2304      	movs	r3, #4
 801ff86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff8a:	e082      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff8c:	2308      	movs	r3, #8
 801ff8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff92:	e07e      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff94:	2310      	movs	r3, #16
 801ff96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ff9a:	e07a      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ff9c:	2320      	movs	r3, #32
 801ff9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ffa2:	e076      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ffa4:	2340      	movs	r3, #64	@ 0x40
 801ffa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ffaa:	e072      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ffac:	2380      	movs	r3, #128	@ 0x80
 801ffae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ffb2:	e06e      	b.n	8020092 <UART_SetConfig+0x5a6>
 801ffb4:	697b      	ldr	r3, [r7, #20]
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	4a75      	ldr	r2, [pc, #468]	@ (8020190 <UART_SetConfig+0x6a4>)
 801ffba:	4293      	cmp	r3, r2
 801ffbc:	d130      	bne.n	8020020 <UART_SetConfig+0x534>
 801ffbe:	4b72      	ldr	r3, [pc, #456]	@ (8020188 <UART_SetConfig+0x69c>)
 801ffc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ffc2:	f003 0307 	and.w	r3, r3, #7
 801ffc6:	2b05      	cmp	r3, #5
 801ffc8:	d826      	bhi.n	8020018 <UART_SetConfig+0x52c>
 801ffca:	a201      	add	r2, pc, #4	@ (adr r2, 801ffd0 <UART_SetConfig+0x4e4>)
 801ffcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffd0:	0801ffe9 	.word	0x0801ffe9
 801ffd4:	0801fff1 	.word	0x0801fff1
 801ffd8:	0801fff9 	.word	0x0801fff9
 801ffdc:	08020001 	.word	0x08020001
 801ffe0:	08020009 	.word	0x08020009
 801ffe4:	08020011 	.word	0x08020011
 801ffe8:	2300      	movs	r3, #0
 801ffea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801ffee:	e050      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fff0:	2304      	movs	r3, #4
 801fff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fff6:	e04c      	b.n	8020092 <UART_SetConfig+0x5a6>
 801fff8:	2308      	movs	r3, #8
 801fffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fffe:	e048      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020000:	2310      	movs	r3, #16
 8020002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020006:	e044      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020008:	2320      	movs	r3, #32
 802000a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802000e:	e040      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020010:	2340      	movs	r3, #64	@ 0x40
 8020012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020016:	e03c      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020018:	2380      	movs	r3, #128	@ 0x80
 802001a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802001e:	e038      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020020:	697b      	ldr	r3, [r7, #20]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	4a5b      	ldr	r2, [pc, #364]	@ (8020194 <UART_SetConfig+0x6a8>)
 8020026:	4293      	cmp	r3, r2
 8020028:	d130      	bne.n	802008c <UART_SetConfig+0x5a0>
 802002a:	4b57      	ldr	r3, [pc, #348]	@ (8020188 <UART_SetConfig+0x69c>)
 802002c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802002e:	f003 0307 	and.w	r3, r3, #7
 8020032:	2b05      	cmp	r3, #5
 8020034:	d826      	bhi.n	8020084 <UART_SetConfig+0x598>
 8020036:	a201      	add	r2, pc, #4	@ (adr r2, 802003c <UART_SetConfig+0x550>)
 8020038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802003c:	08020055 	.word	0x08020055
 8020040:	0802005d 	.word	0x0802005d
 8020044:	08020065 	.word	0x08020065
 8020048:	0802006d 	.word	0x0802006d
 802004c:	08020075 	.word	0x08020075
 8020050:	0802007d 	.word	0x0802007d
 8020054:	2302      	movs	r3, #2
 8020056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802005a:	e01a      	b.n	8020092 <UART_SetConfig+0x5a6>
 802005c:	2304      	movs	r3, #4
 802005e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020062:	e016      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020064:	2308      	movs	r3, #8
 8020066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802006a:	e012      	b.n	8020092 <UART_SetConfig+0x5a6>
 802006c:	2310      	movs	r3, #16
 802006e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020072:	e00e      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020074:	2320      	movs	r3, #32
 8020076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802007a:	e00a      	b.n	8020092 <UART_SetConfig+0x5a6>
 802007c:	2340      	movs	r3, #64	@ 0x40
 802007e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020082:	e006      	b.n	8020092 <UART_SetConfig+0x5a6>
 8020084:	2380      	movs	r3, #128	@ 0x80
 8020086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802008a:	e002      	b.n	8020092 <UART_SetConfig+0x5a6>
 802008c:	2380      	movs	r3, #128	@ 0x80
 802008e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020092:	697b      	ldr	r3, [r7, #20]
 8020094:	681b      	ldr	r3, [r3, #0]
 8020096:	4a3f      	ldr	r2, [pc, #252]	@ (8020194 <UART_SetConfig+0x6a8>)
 8020098:	4293      	cmp	r3, r2
 802009a:	f040 80f8 	bne.w	802028e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802009e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80200a2:	2b20      	cmp	r3, #32
 80200a4:	dc46      	bgt.n	8020134 <UART_SetConfig+0x648>
 80200a6:	2b02      	cmp	r3, #2
 80200a8:	f2c0 8082 	blt.w	80201b0 <UART_SetConfig+0x6c4>
 80200ac:	3b02      	subs	r3, #2
 80200ae:	2b1e      	cmp	r3, #30
 80200b0:	d87e      	bhi.n	80201b0 <UART_SetConfig+0x6c4>
 80200b2:	a201      	add	r2, pc, #4	@ (adr r2, 80200b8 <UART_SetConfig+0x5cc>)
 80200b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200b8:	0802013b 	.word	0x0802013b
 80200bc:	080201b1 	.word	0x080201b1
 80200c0:	08020143 	.word	0x08020143
 80200c4:	080201b1 	.word	0x080201b1
 80200c8:	080201b1 	.word	0x080201b1
 80200cc:	080201b1 	.word	0x080201b1
 80200d0:	08020153 	.word	0x08020153
 80200d4:	080201b1 	.word	0x080201b1
 80200d8:	080201b1 	.word	0x080201b1
 80200dc:	080201b1 	.word	0x080201b1
 80200e0:	080201b1 	.word	0x080201b1
 80200e4:	080201b1 	.word	0x080201b1
 80200e8:	080201b1 	.word	0x080201b1
 80200ec:	080201b1 	.word	0x080201b1
 80200f0:	08020163 	.word	0x08020163
 80200f4:	080201b1 	.word	0x080201b1
 80200f8:	080201b1 	.word	0x080201b1
 80200fc:	080201b1 	.word	0x080201b1
 8020100:	080201b1 	.word	0x080201b1
 8020104:	080201b1 	.word	0x080201b1
 8020108:	080201b1 	.word	0x080201b1
 802010c:	080201b1 	.word	0x080201b1
 8020110:	080201b1 	.word	0x080201b1
 8020114:	080201b1 	.word	0x080201b1
 8020118:	080201b1 	.word	0x080201b1
 802011c:	080201b1 	.word	0x080201b1
 8020120:	080201b1 	.word	0x080201b1
 8020124:	080201b1 	.word	0x080201b1
 8020128:	080201b1 	.word	0x080201b1
 802012c:	080201b1 	.word	0x080201b1
 8020130:	080201a3 	.word	0x080201a3
 8020134:	2b40      	cmp	r3, #64	@ 0x40
 8020136:	d037      	beq.n	80201a8 <UART_SetConfig+0x6bc>
 8020138:	e03a      	b.n	80201b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802013a:	f7fe fb89 	bl	801e850 <HAL_RCCEx_GetD3PCLK1Freq>
 802013e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020140:	e03c      	b.n	80201bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020146:	4618      	mov	r0, r3
 8020148:	f7fe fb98 	bl	801e87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802014c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802014e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020150:	e034      	b.n	80201bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020152:	f107 0318 	add.w	r3, r7, #24
 8020156:	4618      	mov	r0, r3
 8020158:	f7fe fce4 	bl	801eb24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802015c:	69fb      	ldr	r3, [r7, #28]
 802015e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020160:	e02c      	b.n	80201bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020162:	4b09      	ldr	r3, [pc, #36]	@ (8020188 <UART_SetConfig+0x69c>)
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	f003 0320 	and.w	r3, r3, #32
 802016a:	2b00      	cmp	r3, #0
 802016c:	d016      	beq.n	802019c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802016e:	4b06      	ldr	r3, [pc, #24]	@ (8020188 <UART_SetConfig+0x69c>)
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	08db      	lsrs	r3, r3, #3
 8020174:	f003 0303 	and.w	r3, r3, #3
 8020178:	4a07      	ldr	r2, [pc, #28]	@ (8020198 <UART_SetConfig+0x6ac>)
 802017a:	fa22 f303 	lsr.w	r3, r2, r3
 802017e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020180:	e01c      	b.n	80201bc <UART_SetConfig+0x6d0>
 8020182:	bf00      	nop
 8020184:	40011400 	.word	0x40011400
 8020188:	58024400 	.word	0x58024400
 802018c:	40007800 	.word	0x40007800
 8020190:	40007c00 	.word	0x40007c00
 8020194:	58000c00 	.word	0x58000c00
 8020198:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 802019c:	4b9d      	ldr	r3, [pc, #628]	@ (8020414 <UART_SetConfig+0x928>)
 802019e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201a0:	e00c      	b.n	80201bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80201a2:	4b9d      	ldr	r3, [pc, #628]	@ (8020418 <UART_SetConfig+0x92c>)
 80201a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201a6:	e009      	b.n	80201bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80201a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80201ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201ae:	e005      	b.n	80201bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80201b0:	2300      	movs	r3, #0
 80201b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80201b4:	2301      	movs	r3, #1
 80201b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80201ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80201bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80201be:	2b00      	cmp	r3, #0
 80201c0:	f000 81de 	beq.w	8020580 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80201c4:	697b      	ldr	r3, [r7, #20]
 80201c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80201c8:	4a94      	ldr	r2, [pc, #592]	@ (802041c <UART_SetConfig+0x930>)
 80201ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80201ce:	461a      	mov	r2, r3
 80201d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80201d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80201d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80201d8:	697b      	ldr	r3, [r7, #20]
 80201da:	685a      	ldr	r2, [r3, #4]
 80201dc:	4613      	mov	r3, r2
 80201de:	005b      	lsls	r3, r3, #1
 80201e0:	4413      	add	r3, r2
 80201e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80201e4:	429a      	cmp	r2, r3
 80201e6:	d305      	bcc.n	80201f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80201e8:	697b      	ldr	r3, [r7, #20]
 80201ea:	685b      	ldr	r3, [r3, #4]
 80201ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80201ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80201f0:	429a      	cmp	r2, r3
 80201f2:	d903      	bls.n	80201fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80201f4:	2301      	movs	r3, #1
 80201f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80201fa:	e1c1      	b.n	8020580 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80201fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80201fe:	2200      	movs	r2, #0
 8020200:	60bb      	str	r3, [r7, #8]
 8020202:	60fa      	str	r2, [r7, #12]
 8020204:	697b      	ldr	r3, [r7, #20]
 8020206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020208:	4a84      	ldr	r2, [pc, #528]	@ (802041c <UART_SetConfig+0x930>)
 802020a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802020e:	b29b      	uxth	r3, r3
 8020210:	2200      	movs	r2, #0
 8020212:	603b      	str	r3, [r7, #0]
 8020214:	607a      	str	r2, [r7, #4]
 8020216:	e9d7 2300 	ldrd	r2, r3, [r7]
 802021a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802021e:	f7e0 fad3 	bl	80007c8 <__aeabi_uldivmod>
 8020222:	4602      	mov	r2, r0
 8020224:	460b      	mov	r3, r1
 8020226:	4610      	mov	r0, r2
 8020228:	4619      	mov	r1, r3
 802022a:	f04f 0200 	mov.w	r2, #0
 802022e:	f04f 0300 	mov.w	r3, #0
 8020232:	020b      	lsls	r3, r1, #8
 8020234:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8020238:	0202      	lsls	r2, r0, #8
 802023a:	6979      	ldr	r1, [r7, #20]
 802023c:	6849      	ldr	r1, [r1, #4]
 802023e:	0849      	lsrs	r1, r1, #1
 8020240:	2000      	movs	r0, #0
 8020242:	460c      	mov	r4, r1
 8020244:	4605      	mov	r5, r0
 8020246:	eb12 0804 	adds.w	r8, r2, r4
 802024a:	eb43 0905 	adc.w	r9, r3, r5
 802024e:	697b      	ldr	r3, [r7, #20]
 8020250:	685b      	ldr	r3, [r3, #4]
 8020252:	2200      	movs	r2, #0
 8020254:	469a      	mov	sl, r3
 8020256:	4693      	mov	fp, r2
 8020258:	4652      	mov	r2, sl
 802025a:	465b      	mov	r3, fp
 802025c:	4640      	mov	r0, r8
 802025e:	4649      	mov	r1, r9
 8020260:	f7e0 fab2 	bl	80007c8 <__aeabi_uldivmod>
 8020264:	4602      	mov	r2, r0
 8020266:	460b      	mov	r3, r1
 8020268:	4613      	mov	r3, r2
 802026a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802026c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802026e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020272:	d308      	bcc.n	8020286 <UART_SetConfig+0x79a>
 8020274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802027a:	d204      	bcs.n	8020286 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 802027c:	697b      	ldr	r3, [r7, #20]
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020282:	60da      	str	r2, [r3, #12]
 8020284:	e17c      	b.n	8020580 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8020286:	2301      	movs	r3, #1
 8020288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 802028c:	e178      	b.n	8020580 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802028e:	697b      	ldr	r3, [r7, #20]
 8020290:	69db      	ldr	r3, [r3, #28]
 8020292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020296:	f040 80c5 	bne.w	8020424 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802029a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802029e:	2b20      	cmp	r3, #32
 80202a0:	dc48      	bgt.n	8020334 <UART_SetConfig+0x848>
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	db7b      	blt.n	802039e <UART_SetConfig+0x8b2>
 80202a6:	2b20      	cmp	r3, #32
 80202a8:	d879      	bhi.n	802039e <UART_SetConfig+0x8b2>
 80202aa:	a201      	add	r2, pc, #4	@ (adr r2, 80202b0 <UART_SetConfig+0x7c4>)
 80202ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80202b0:	0802033b 	.word	0x0802033b
 80202b4:	08020343 	.word	0x08020343
 80202b8:	0802039f 	.word	0x0802039f
 80202bc:	0802039f 	.word	0x0802039f
 80202c0:	0802034b 	.word	0x0802034b
 80202c4:	0802039f 	.word	0x0802039f
 80202c8:	0802039f 	.word	0x0802039f
 80202cc:	0802039f 	.word	0x0802039f
 80202d0:	0802035b 	.word	0x0802035b
 80202d4:	0802039f 	.word	0x0802039f
 80202d8:	0802039f 	.word	0x0802039f
 80202dc:	0802039f 	.word	0x0802039f
 80202e0:	0802039f 	.word	0x0802039f
 80202e4:	0802039f 	.word	0x0802039f
 80202e8:	0802039f 	.word	0x0802039f
 80202ec:	0802039f 	.word	0x0802039f
 80202f0:	0802036b 	.word	0x0802036b
 80202f4:	0802039f 	.word	0x0802039f
 80202f8:	0802039f 	.word	0x0802039f
 80202fc:	0802039f 	.word	0x0802039f
 8020300:	0802039f 	.word	0x0802039f
 8020304:	0802039f 	.word	0x0802039f
 8020308:	0802039f 	.word	0x0802039f
 802030c:	0802039f 	.word	0x0802039f
 8020310:	0802039f 	.word	0x0802039f
 8020314:	0802039f 	.word	0x0802039f
 8020318:	0802039f 	.word	0x0802039f
 802031c:	0802039f 	.word	0x0802039f
 8020320:	0802039f 	.word	0x0802039f
 8020324:	0802039f 	.word	0x0802039f
 8020328:	0802039f 	.word	0x0802039f
 802032c:	0802039f 	.word	0x0802039f
 8020330:	08020391 	.word	0x08020391
 8020334:	2b40      	cmp	r3, #64	@ 0x40
 8020336:	d02e      	beq.n	8020396 <UART_SetConfig+0x8aa>
 8020338:	e031      	b.n	802039e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802033a:	f7fd f811 	bl	801d360 <HAL_RCC_GetPCLK1Freq>
 802033e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020340:	e033      	b.n	80203aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020342:	f7fd f823 	bl	801d38c <HAL_RCC_GetPCLK2Freq>
 8020346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020348:	e02f      	b.n	80203aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802034a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802034e:	4618      	mov	r0, r3
 8020350:	f7fe fa94 	bl	801e87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020358:	e027      	b.n	80203aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802035a:	f107 0318 	add.w	r3, r7, #24
 802035e:	4618      	mov	r0, r3
 8020360:	f7fe fbe0 	bl	801eb24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020364:	69fb      	ldr	r3, [r7, #28]
 8020366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020368:	e01f      	b.n	80203aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802036a:	4b2d      	ldr	r3, [pc, #180]	@ (8020420 <UART_SetConfig+0x934>)
 802036c:	681b      	ldr	r3, [r3, #0]
 802036e:	f003 0320 	and.w	r3, r3, #32
 8020372:	2b00      	cmp	r3, #0
 8020374:	d009      	beq.n	802038a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020376:	4b2a      	ldr	r3, [pc, #168]	@ (8020420 <UART_SetConfig+0x934>)
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	08db      	lsrs	r3, r3, #3
 802037c:	f003 0303 	and.w	r3, r3, #3
 8020380:	4a24      	ldr	r2, [pc, #144]	@ (8020414 <UART_SetConfig+0x928>)
 8020382:	fa22 f303 	lsr.w	r3, r2, r3
 8020386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020388:	e00f      	b.n	80203aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802038a:	4b22      	ldr	r3, [pc, #136]	@ (8020414 <UART_SetConfig+0x928>)
 802038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802038e:	e00c      	b.n	80203aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020390:	4b21      	ldr	r3, [pc, #132]	@ (8020418 <UART_SetConfig+0x92c>)
 8020392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020394:	e009      	b.n	80203aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802039c:	e005      	b.n	80203aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802039e:	2300      	movs	r3, #0
 80203a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80203a2:	2301      	movs	r3, #1
 80203a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80203a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80203aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	f000 80e7 	beq.w	8020580 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80203b2:	697b      	ldr	r3, [r7, #20]
 80203b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203b6:	4a19      	ldr	r2, [pc, #100]	@ (802041c <UART_SetConfig+0x930>)
 80203b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80203bc:	461a      	mov	r2, r3
 80203be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80203c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80203c4:	005a      	lsls	r2, r3, #1
 80203c6:	697b      	ldr	r3, [r7, #20]
 80203c8:	685b      	ldr	r3, [r3, #4]
 80203ca:	085b      	lsrs	r3, r3, #1
 80203cc:	441a      	add	r2, r3
 80203ce:	697b      	ldr	r3, [r7, #20]
 80203d0:	685b      	ldr	r3, [r3, #4]
 80203d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80203d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80203d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203da:	2b0f      	cmp	r3, #15
 80203dc:	d916      	bls.n	802040c <UART_SetConfig+0x920>
 80203de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80203e4:	d212      	bcs.n	802040c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80203e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203e8:	b29b      	uxth	r3, r3
 80203ea:	f023 030f 	bic.w	r3, r3, #15
 80203ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80203f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203f2:	085b      	lsrs	r3, r3, #1
 80203f4:	b29b      	uxth	r3, r3
 80203f6:	f003 0307 	and.w	r3, r3, #7
 80203fa:	b29a      	uxth	r2, r3
 80203fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80203fe:	4313      	orrs	r3, r2
 8020400:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8020402:	697b      	ldr	r3, [r7, #20]
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020408:	60da      	str	r2, [r3, #12]
 802040a:	e0b9      	b.n	8020580 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802040c:	2301      	movs	r3, #1
 802040e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020412:	e0b5      	b.n	8020580 <UART_SetConfig+0xa94>
 8020414:	03d09000 	.word	0x03d09000
 8020418:	003d0900 	.word	0x003d0900
 802041c:	080383fc 	.word	0x080383fc
 8020420:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020424:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020428:	2b20      	cmp	r3, #32
 802042a:	dc49      	bgt.n	80204c0 <UART_SetConfig+0x9d4>
 802042c:	2b00      	cmp	r3, #0
 802042e:	db7c      	blt.n	802052a <UART_SetConfig+0xa3e>
 8020430:	2b20      	cmp	r3, #32
 8020432:	d87a      	bhi.n	802052a <UART_SetConfig+0xa3e>
 8020434:	a201      	add	r2, pc, #4	@ (adr r2, 802043c <UART_SetConfig+0x950>)
 8020436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802043a:	bf00      	nop
 802043c:	080204c7 	.word	0x080204c7
 8020440:	080204cf 	.word	0x080204cf
 8020444:	0802052b 	.word	0x0802052b
 8020448:	0802052b 	.word	0x0802052b
 802044c:	080204d7 	.word	0x080204d7
 8020450:	0802052b 	.word	0x0802052b
 8020454:	0802052b 	.word	0x0802052b
 8020458:	0802052b 	.word	0x0802052b
 802045c:	080204e7 	.word	0x080204e7
 8020460:	0802052b 	.word	0x0802052b
 8020464:	0802052b 	.word	0x0802052b
 8020468:	0802052b 	.word	0x0802052b
 802046c:	0802052b 	.word	0x0802052b
 8020470:	0802052b 	.word	0x0802052b
 8020474:	0802052b 	.word	0x0802052b
 8020478:	0802052b 	.word	0x0802052b
 802047c:	080204f7 	.word	0x080204f7
 8020480:	0802052b 	.word	0x0802052b
 8020484:	0802052b 	.word	0x0802052b
 8020488:	0802052b 	.word	0x0802052b
 802048c:	0802052b 	.word	0x0802052b
 8020490:	0802052b 	.word	0x0802052b
 8020494:	0802052b 	.word	0x0802052b
 8020498:	0802052b 	.word	0x0802052b
 802049c:	0802052b 	.word	0x0802052b
 80204a0:	0802052b 	.word	0x0802052b
 80204a4:	0802052b 	.word	0x0802052b
 80204a8:	0802052b 	.word	0x0802052b
 80204ac:	0802052b 	.word	0x0802052b
 80204b0:	0802052b 	.word	0x0802052b
 80204b4:	0802052b 	.word	0x0802052b
 80204b8:	0802052b 	.word	0x0802052b
 80204bc:	0802051d 	.word	0x0802051d
 80204c0:	2b40      	cmp	r3, #64	@ 0x40
 80204c2:	d02e      	beq.n	8020522 <UART_SetConfig+0xa36>
 80204c4:	e031      	b.n	802052a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80204c6:	f7fc ff4b 	bl	801d360 <HAL_RCC_GetPCLK1Freq>
 80204ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80204cc:	e033      	b.n	8020536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80204ce:	f7fc ff5d 	bl	801d38c <HAL_RCC_GetPCLK2Freq>
 80204d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80204d4:	e02f      	b.n	8020536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80204d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80204da:	4618      	mov	r0, r3
 80204dc:	f7fe f9ce 	bl	801e87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80204e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80204e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80204e4:	e027      	b.n	8020536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80204e6:	f107 0318 	add.w	r3, r7, #24
 80204ea:	4618      	mov	r0, r3
 80204ec:	f7fe fb1a 	bl	801eb24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80204f0:	69fb      	ldr	r3, [r7, #28]
 80204f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80204f4:	e01f      	b.n	8020536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80204f6:	4b2d      	ldr	r3, [pc, #180]	@ (80205ac <UART_SetConfig+0xac0>)
 80204f8:	681b      	ldr	r3, [r3, #0]
 80204fa:	f003 0320 	and.w	r3, r3, #32
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d009      	beq.n	8020516 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020502:	4b2a      	ldr	r3, [pc, #168]	@ (80205ac <UART_SetConfig+0xac0>)
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	08db      	lsrs	r3, r3, #3
 8020508:	f003 0303 	and.w	r3, r3, #3
 802050c:	4a28      	ldr	r2, [pc, #160]	@ (80205b0 <UART_SetConfig+0xac4>)
 802050e:	fa22 f303 	lsr.w	r3, r2, r3
 8020512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020514:	e00f      	b.n	8020536 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8020516:	4b26      	ldr	r3, [pc, #152]	@ (80205b0 <UART_SetConfig+0xac4>)
 8020518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802051a:	e00c      	b.n	8020536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802051c:	4b25      	ldr	r3, [pc, #148]	@ (80205b4 <UART_SetConfig+0xac8>)
 802051e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020520:	e009      	b.n	8020536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020528:	e005      	b.n	8020536 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 802052a:	2300      	movs	r3, #0
 802052c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802052e:	2301      	movs	r3, #1
 8020530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020534:	bf00      	nop
    }

    if (pclk != 0U)
 8020536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020538:	2b00      	cmp	r3, #0
 802053a:	d021      	beq.n	8020580 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802053c:	697b      	ldr	r3, [r7, #20]
 802053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020540:	4a1d      	ldr	r2, [pc, #116]	@ (80205b8 <UART_SetConfig+0xacc>)
 8020542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020546:	461a      	mov	r2, r3
 8020548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802054a:	fbb3 f2f2 	udiv	r2, r3, r2
 802054e:	697b      	ldr	r3, [r7, #20]
 8020550:	685b      	ldr	r3, [r3, #4]
 8020552:	085b      	lsrs	r3, r3, #1
 8020554:	441a      	add	r2, r3
 8020556:	697b      	ldr	r3, [r7, #20]
 8020558:	685b      	ldr	r3, [r3, #4]
 802055a:	fbb2 f3f3 	udiv	r3, r2, r3
 802055e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020562:	2b0f      	cmp	r3, #15
 8020564:	d909      	bls.n	802057a <UART_SetConfig+0xa8e>
 8020566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802056c:	d205      	bcs.n	802057a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802056e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020570:	b29a      	uxth	r2, r3
 8020572:	697b      	ldr	r3, [r7, #20]
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	60da      	str	r2, [r3, #12]
 8020578:	e002      	b.n	8020580 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802057a:	2301      	movs	r3, #1
 802057c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8020580:	697b      	ldr	r3, [r7, #20]
 8020582:	2201      	movs	r2, #1
 8020584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8020588:	697b      	ldr	r3, [r7, #20]
 802058a:	2201      	movs	r2, #1
 802058c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020590:	697b      	ldr	r3, [r7, #20]
 8020592:	2200      	movs	r2, #0
 8020594:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8020596:	697b      	ldr	r3, [r7, #20]
 8020598:	2200      	movs	r2, #0
 802059a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 802059c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80205a0:	4618      	mov	r0, r3
 80205a2:	3748      	adds	r7, #72	@ 0x48
 80205a4:	46bd      	mov	sp, r7
 80205a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80205aa:	bf00      	nop
 80205ac:	58024400 	.word	0x58024400
 80205b0:	03d09000 	.word	0x03d09000
 80205b4:	003d0900 	.word	0x003d0900
 80205b8:	080383fc 	.word	0x080383fc

080205bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80205bc:	b480      	push	{r7}
 80205be:	b083      	sub	sp, #12
 80205c0:	af00      	add	r7, sp, #0
 80205c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80205c8:	f003 0308 	and.w	r3, r3, #8
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d00a      	beq.n	80205e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	685b      	ldr	r3, [r3, #4]
 80205d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	681b      	ldr	r3, [r3, #0]
 80205e2:	430a      	orrs	r2, r1
 80205e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80205ea:	f003 0301 	and.w	r3, r3, #1
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d00a      	beq.n	8020608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80205f2:	687b      	ldr	r3, [r7, #4]
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	685b      	ldr	r3, [r3, #4]
 80205f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	430a      	orrs	r2, r1
 8020606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802060c:	f003 0302 	and.w	r3, r3, #2
 8020610:	2b00      	cmp	r3, #0
 8020612:	d00a      	beq.n	802062a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	685b      	ldr	r3, [r3, #4]
 802061a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	430a      	orrs	r2, r1
 8020628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802062a:	687b      	ldr	r3, [r7, #4]
 802062c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802062e:	f003 0304 	and.w	r3, r3, #4
 8020632:	2b00      	cmp	r3, #0
 8020634:	d00a      	beq.n	802064c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8020636:	687b      	ldr	r3, [r7, #4]
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	685b      	ldr	r3, [r3, #4]
 802063c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	430a      	orrs	r2, r1
 802064a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020650:	f003 0310 	and.w	r3, r3, #16
 8020654:	2b00      	cmp	r3, #0
 8020656:	d00a      	beq.n	802066e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	689b      	ldr	r3, [r3, #8]
 802065e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	430a      	orrs	r2, r1
 802066c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020672:	f003 0320 	and.w	r3, r3, #32
 8020676:	2b00      	cmp	r3, #0
 8020678:	d00a      	beq.n	8020690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	689b      	ldr	r3, [r3, #8]
 8020680:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	430a      	orrs	r2, r1
 802068e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020698:	2b00      	cmp	r3, #0
 802069a:	d01a      	beq.n	80206d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	685b      	ldr	r3, [r3, #4]
 80206a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	430a      	orrs	r2, r1
 80206b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80206b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80206ba:	d10a      	bne.n	80206d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	685b      	ldr	r3, [r3, #4]
 80206c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	430a      	orrs	r2, r1
 80206d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80206d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d00a      	beq.n	80206f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80206de:	687b      	ldr	r3, [r7, #4]
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	685b      	ldr	r3, [r3, #4]
 80206e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	430a      	orrs	r2, r1
 80206f2:	605a      	str	r2, [r3, #4]
  }
}
 80206f4:	bf00      	nop
 80206f6:	370c      	adds	r7, #12
 80206f8:	46bd      	mov	sp, r7
 80206fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206fe:	4770      	bx	lr

08020700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020700:	b580      	push	{r7, lr}
 8020702:	b098      	sub	sp, #96	@ 0x60
 8020704:	af02      	add	r7, sp, #8
 8020706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	2200      	movs	r2, #0
 802070c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020710:	f7fa ff08 	bl	801b524 <HAL_GetTick>
 8020714:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	f003 0308 	and.w	r3, r3, #8
 8020720:	2b08      	cmp	r3, #8
 8020722:	d12f      	bne.n	8020784 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020724:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020728:	9300      	str	r3, [sp, #0]
 802072a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802072c:	2200      	movs	r2, #0
 802072e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8020732:	6878      	ldr	r0, [r7, #4]
 8020734:	f000 f88e 	bl	8020854 <UART_WaitOnFlagUntilTimeout>
 8020738:	4603      	mov	r3, r0
 802073a:	2b00      	cmp	r3, #0
 802073c:	d022      	beq.n	8020784 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020746:	e853 3f00 	ldrex	r3, [r3]
 802074a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802074c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802074e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020752:	653b      	str	r3, [r7, #80]	@ 0x50
 8020754:	687b      	ldr	r3, [r7, #4]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	461a      	mov	r2, r3
 802075a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802075c:	647b      	str	r3, [r7, #68]	@ 0x44
 802075e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020764:	e841 2300 	strex	r3, r2, [r1]
 8020768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802076a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802076c:	2b00      	cmp	r3, #0
 802076e:	d1e6      	bne.n	802073e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	2220      	movs	r2, #32
 8020774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	2200      	movs	r2, #0
 802077c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020780:	2303      	movs	r3, #3
 8020782:	e063      	b.n	802084c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	681b      	ldr	r3, [r3, #0]
 802078a:	f003 0304 	and.w	r3, r3, #4
 802078e:	2b04      	cmp	r3, #4
 8020790:	d149      	bne.n	8020826 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020792:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020796:	9300      	str	r3, [sp, #0]
 8020798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802079a:	2200      	movs	r2, #0
 802079c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80207a0:	6878      	ldr	r0, [r7, #4]
 80207a2:	f000 f857 	bl	8020854 <UART_WaitOnFlagUntilTimeout>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d03c      	beq.n	8020826 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207b4:	e853 3f00 	ldrex	r3, [r3]
 80207b8:	623b      	str	r3, [r7, #32]
   return(result);
 80207ba:	6a3b      	ldr	r3, [r7, #32]
 80207bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80207c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	681b      	ldr	r3, [r3, #0]
 80207c6:	461a      	mov	r2, r3
 80207c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80207ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80207cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80207d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80207d2:	e841 2300 	strex	r3, r2, [r1]
 80207d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80207d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80207da:	2b00      	cmp	r3, #0
 80207dc:	d1e6      	bne.n	80207ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	681b      	ldr	r3, [r3, #0]
 80207e2:	3308      	adds	r3, #8
 80207e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207e6:	693b      	ldr	r3, [r7, #16]
 80207e8:	e853 3f00 	ldrex	r3, [r3]
 80207ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80207ee:	68fb      	ldr	r3, [r7, #12]
 80207f0:	f023 0301 	bic.w	r3, r3, #1
 80207f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	3308      	adds	r3, #8
 80207fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80207fe:	61fa      	str	r2, [r7, #28]
 8020800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020802:	69b9      	ldr	r1, [r7, #24]
 8020804:	69fa      	ldr	r2, [r7, #28]
 8020806:	e841 2300 	strex	r3, r2, [r1]
 802080a:	617b      	str	r3, [r7, #20]
   return(result);
 802080c:	697b      	ldr	r3, [r7, #20]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d1e5      	bne.n	80207de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	2220      	movs	r2, #32
 8020816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	2200      	movs	r2, #0
 802081e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020822:	2303      	movs	r3, #3
 8020824:	e012      	b.n	802084c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	2220      	movs	r2, #32
 802082a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	2220      	movs	r2, #32
 8020832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020836:	687b      	ldr	r3, [r7, #4]
 8020838:	2200      	movs	r2, #0
 802083a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	2200      	movs	r2, #0
 8020840:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	2200      	movs	r2, #0
 8020846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802084a:	2300      	movs	r3, #0
}
 802084c:	4618      	mov	r0, r3
 802084e:	3758      	adds	r7, #88	@ 0x58
 8020850:	46bd      	mov	sp, r7
 8020852:	bd80      	pop	{r7, pc}

08020854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8020854:	b580      	push	{r7, lr}
 8020856:	b084      	sub	sp, #16
 8020858:	af00      	add	r7, sp, #0
 802085a:	60f8      	str	r0, [r7, #12]
 802085c:	60b9      	str	r1, [r7, #8]
 802085e:	603b      	str	r3, [r7, #0]
 8020860:	4613      	mov	r3, r2
 8020862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020864:	e04f      	b.n	8020906 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020866:	69bb      	ldr	r3, [r7, #24]
 8020868:	f1b3 3fff 	cmp.w	r3, #4294967295
 802086c:	d04b      	beq.n	8020906 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802086e:	f7fa fe59 	bl	801b524 <HAL_GetTick>
 8020872:	4602      	mov	r2, r0
 8020874:	683b      	ldr	r3, [r7, #0]
 8020876:	1ad3      	subs	r3, r2, r3
 8020878:	69ba      	ldr	r2, [r7, #24]
 802087a:	429a      	cmp	r2, r3
 802087c:	d302      	bcc.n	8020884 <UART_WaitOnFlagUntilTimeout+0x30>
 802087e:	69bb      	ldr	r3, [r7, #24]
 8020880:	2b00      	cmp	r3, #0
 8020882:	d101      	bne.n	8020888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8020884:	2303      	movs	r3, #3
 8020886:	e04e      	b.n	8020926 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	f003 0304 	and.w	r3, r3, #4
 8020892:	2b00      	cmp	r3, #0
 8020894:	d037      	beq.n	8020906 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020896:	68bb      	ldr	r3, [r7, #8]
 8020898:	2b80      	cmp	r3, #128	@ 0x80
 802089a:	d034      	beq.n	8020906 <UART_WaitOnFlagUntilTimeout+0xb2>
 802089c:	68bb      	ldr	r3, [r7, #8]
 802089e:	2b40      	cmp	r3, #64	@ 0x40
 80208a0:	d031      	beq.n	8020906 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80208a2:	68fb      	ldr	r3, [r7, #12]
 80208a4:	681b      	ldr	r3, [r3, #0]
 80208a6:	69db      	ldr	r3, [r3, #28]
 80208a8:	f003 0308 	and.w	r3, r3, #8
 80208ac:	2b08      	cmp	r3, #8
 80208ae:	d110      	bne.n	80208d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	2208      	movs	r2, #8
 80208b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80208b8:	68f8      	ldr	r0, [r7, #12]
 80208ba:	f000 f839 	bl	8020930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80208be:	68fb      	ldr	r3, [r7, #12]
 80208c0:	2208      	movs	r2, #8
 80208c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	2200      	movs	r2, #0
 80208ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80208ce:	2301      	movs	r3, #1
 80208d0:	e029      	b.n	8020926 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	69db      	ldr	r3, [r3, #28]
 80208d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80208dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80208e0:	d111      	bne.n	8020906 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80208e2:	68fb      	ldr	r3, [r7, #12]
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80208ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80208ec:	68f8      	ldr	r0, [r7, #12]
 80208ee:	f000 f81f 	bl	8020930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80208f2:	68fb      	ldr	r3, [r7, #12]
 80208f4:	2220      	movs	r2, #32
 80208f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	2200      	movs	r2, #0
 80208fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8020902:	2303      	movs	r3, #3
 8020904:	e00f      	b.n	8020926 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	69da      	ldr	r2, [r3, #28]
 802090c:	68bb      	ldr	r3, [r7, #8]
 802090e:	4013      	ands	r3, r2
 8020910:	68ba      	ldr	r2, [r7, #8]
 8020912:	429a      	cmp	r2, r3
 8020914:	bf0c      	ite	eq
 8020916:	2301      	moveq	r3, #1
 8020918:	2300      	movne	r3, #0
 802091a:	b2db      	uxtb	r3, r3
 802091c:	461a      	mov	r2, r3
 802091e:	79fb      	ldrb	r3, [r7, #7]
 8020920:	429a      	cmp	r2, r3
 8020922:	d0a0      	beq.n	8020866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020924:	2300      	movs	r3, #0
}
 8020926:	4618      	mov	r0, r3
 8020928:	3710      	adds	r7, #16
 802092a:	46bd      	mov	sp, r7
 802092c:	bd80      	pop	{r7, pc}
	...

08020930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020930:	b480      	push	{r7}
 8020932:	b095      	sub	sp, #84	@ 0x54
 8020934:	af00      	add	r7, sp, #0
 8020936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802093e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020940:	e853 3f00 	ldrex	r3, [r3]
 8020944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8020946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802094c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	461a      	mov	r2, r3
 8020954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020956:	643b      	str	r3, [r7, #64]	@ 0x40
 8020958:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802095a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802095c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802095e:	e841 2300 	strex	r3, r2, [r1]
 8020962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020966:	2b00      	cmp	r3, #0
 8020968:	d1e6      	bne.n	8020938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	681b      	ldr	r3, [r3, #0]
 802096e:	3308      	adds	r3, #8
 8020970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020972:	6a3b      	ldr	r3, [r7, #32]
 8020974:	e853 3f00 	ldrex	r3, [r3]
 8020978:	61fb      	str	r3, [r7, #28]
   return(result);
 802097a:	69fa      	ldr	r2, [r7, #28]
 802097c:	4b1e      	ldr	r3, [pc, #120]	@ (80209f8 <UART_EndRxTransfer+0xc8>)
 802097e:	4013      	ands	r3, r2
 8020980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	3308      	adds	r3, #8
 8020988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802098a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802098c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802098e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020992:	e841 2300 	strex	r3, r2, [r1]
 8020996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8020998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802099a:	2b00      	cmp	r3, #0
 802099c:	d1e5      	bne.n	802096a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80209a2:	2b01      	cmp	r3, #1
 80209a4:	d118      	bne.n	80209d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80209a6:	687b      	ldr	r3, [r7, #4]
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	e853 3f00 	ldrex	r3, [r3]
 80209b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80209b4:	68bb      	ldr	r3, [r7, #8]
 80209b6:	f023 0310 	bic.w	r3, r3, #16
 80209ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80209bc:	687b      	ldr	r3, [r7, #4]
 80209be:	681b      	ldr	r3, [r3, #0]
 80209c0:	461a      	mov	r2, r3
 80209c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80209c4:	61bb      	str	r3, [r7, #24]
 80209c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80209c8:	6979      	ldr	r1, [r7, #20]
 80209ca:	69ba      	ldr	r2, [r7, #24]
 80209cc:	e841 2300 	strex	r3, r2, [r1]
 80209d0:	613b      	str	r3, [r7, #16]
   return(result);
 80209d2:	693b      	ldr	r3, [r7, #16]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d1e6      	bne.n	80209a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	2220      	movs	r2, #32
 80209dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	2200      	movs	r2, #0
 80209e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	2200      	movs	r2, #0
 80209ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80209ec:	bf00      	nop
 80209ee:	3754      	adds	r7, #84	@ 0x54
 80209f0:	46bd      	mov	sp, r7
 80209f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209f6:	4770      	bx	lr
 80209f8:	effffffe 	.word	0xeffffffe

080209fc <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80209fc:	b580      	push	{r7, lr}
 80209fe:	b086      	sub	sp, #24
 8020a00:	af00      	add	r7, sp, #0
 8020a02:	60f8      	str	r0, [r7, #12]
 8020a04:	60b9      	str	r1, [r7, #8]
 8020a06:	607a      	str	r2, [r7, #4]
 8020a08:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d101      	bne.n	8020a14 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8020a10:	2301      	movs	r3, #1
 8020a12:	e056      	b.n	8020ac2 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8020a14:	68fb      	ldr	r3, [r7, #12]
 8020a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d106      	bne.n	8020a2c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	2200      	movs	r2, #0
 8020a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8020a26:	68f8      	ldr	r0, [r7, #12]
 8020a28:	f7fa fae8 	bl	801affc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	2224      	movs	r2, #36	@ 0x24
 8020a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8020a34:	68fb      	ldr	r3, [r7, #12]
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	681a      	ldr	r2, [r3, #0]
 8020a3a:	68fb      	ldr	r3, [r7, #12]
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	f022 0201 	bic.w	r2, r2, #1
 8020a42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d002      	beq.n	8020a52 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8020a4c:	68f8      	ldr	r0, [r7, #12]
 8020a4e:	f7ff fdb5 	bl	80205bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8020a52:	68f8      	ldr	r0, [r7, #12]
 8020a54:	f7ff f84a 	bl	801faec <UART_SetConfig>
 8020a58:	4603      	mov	r3, r0
 8020a5a:	2b01      	cmp	r3, #1
 8020a5c:	d101      	bne.n	8020a62 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8020a5e:	2301      	movs	r3, #1
 8020a60:	e02f      	b.n	8020ac2 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8020a62:	68fb      	ldr	r3, [r7, #12]
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	689a      	ldr	r2, [r3, #8]
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8020a70:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8020a72:	68fb      	ldr	r3, [r7, #12]
 8020a74:	681b      	ldr	r3, [r3, #0]
 8020a76:	689b      	ldr	r3, [r3, #8]
 8020a78:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	68ba      	ldr	r2, [r7, #8]
 8020a82:	430a      	orrs	r2, r1
 8020a84:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	055b      	lsls	r3, r3, #21
 8020a8a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8020a8c:	683b      	ldr	r3, [r7, #0]
 8020a8e:	041b      	lsls	r3, r3, #16
 8020a90:	697a      	ldr	r2, [r7, #20]
 8020a92:	4313      	orrs	r3, r2
 8020a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8020a96:	68fb      	ldr	r3, [r7, #12]
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	681a      	ldr	r2, [r3, #0]
 8020a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8020acc <HAL_RS485Ex_Init+0xd0>)
 8020a9e:	4013      	ands	r3, r2
 8020aa0:	68fa      	ldr	r2, [r7, #12]
 8020aa2:	6812      	ldr	r2, [r2, #0]
 8020aa4:	6979      	ldr	r1, [r7, #20]
 8020aa6:	430b      	orrs	r3, r1
 8020aa8:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	681a      	ldr	r2, [r3, #0]
 8020ab0:	68fb      	ldr	r3, [r7, #12]
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	f042 0201 	orr.w	r2, r2, #1
 8020ab8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020aba:	68f8      	ldr	r0, [r7, #12]
 8020abc:	f7ff fe20 	bl	8020700 <UART_CheckIdleState>
 8020ac0:	4603      	mov	r3, r0
}
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3718      	adds	r7, #24
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd80      	pop	{r7, pc}
 8020aca:	bf00      	nop
 8020acc:	fc00ffff 	.word	0xfc00ffff

08020ad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8020ad0:	b480      	push	{r7}
 8020ad2:	b085      	sub	sp, #20
 8020ad4:	af00      	add	r7, sp, #0
 8020ad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020ade:	2b01      	cmp	r3, #1
 8020ae0:	d101      	bne.n	8020ae6 <HAL_UARTEx_DisableFifoMode+0x16>
 8020ae2:	2302      	movs	r3, #2
 8020ae4:	e027      	b.n	8020b36 <HAL_UARTEx_DisableFifoMode+0x66>
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	2201      	movs	r2, #1
 8020aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	2224      	movs	r2, #36	@ 0x24
 8020af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	681b      	ldr	r3, [r3, #0]
 8020b02:	681a      	ldr	r2, [r3, #0]
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	f022 0201 	bic.w	r2, r2, #1
 8020b0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8020b0e:	68fb      	ldr	r3, [r7, #12]
 8020b10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8020b14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	2200      	movs	r2, #0
 8020b1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	68fa      	ldr	r2, [r7, #12]
 8020b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	2220      	movs	r2, #32
 8020b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	2200      	movs	r2, #0
 8020b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020b34:	2300      	movs	r3, #0
}
 8020b36:	4618      	mov	r0, r3
 8020b38:	3714      	adds	r7, #20
 8020b3a:	46bd      	mov	sp, r7
 8020b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b40:	4770      	bx	lr

08020b42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020b42:	b580      	push	{r7, lr}
 8020b44:	b084      	sub	sp, #16
 8020b46:	af00      	add	r7, sp, #0
 8020b48:	6078      	str	r0, [r7, #4]
 8020b4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020b52:	2b01      	cmp	r3, #1
 8020b54:	d101      	bne.n	8020b5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020b56:	2302      	movs	r3, #2
 8020b58:	e02d      	b.n	8020bb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	2201      	movs	r2, #1
 8020b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	2224      	movs	r2, #36	@ 0x24
 8020b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	681b      	ldr	r3, [r3, #0]
 8020b6e:	681b      	ldr	r3, [r3, #0]
 8020b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	681a      	ldr	r2, [r3, #0]
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	f022 0201 	bic.w	r2, r2, #1
 8020b80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	689b      	ldr	r3, [r3, #8]
 8020b88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	683a      	ldr	r2, [r7, #0]
 8020b92:	430a      	orrs	r2, r1
 8020b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020b96:	6878      	ldr	r0, [r7, #4]
 8020b98:	f000 f850 	bl	8020c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	68fa      	ldr	r2, [r7, #12]
 8020ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	2220      	movs	r2, #32
 8020ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	2200      	movs	r2, #0
 8020bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020bb4:	2300      	movs	r3, #0
}
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	3710      	adds	r7, #16
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	bd80      	pop	{r7, pc}

08020bbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020bbe:	b580      	push	{r7, lr}
 8020bc0:	b084      	sub	sp, #16
 8020bc2:	af00      	add	r7, sp, #0
 8020bc4:	6078      	str	r0, [r7, #4]
 8020bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020bce:	2b01      	cmp	r3, #1
 8020bd0:	d101      	bne.n	8020bd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020bd2:	2302      	movs	r3, #2
 8020bd4:	e02d      	b.n	8020c32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	2201      	movs	r2, #1
 8020bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	2224      	movs	r2, #36	@ 0x24
 8020be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	681b      	ldr	r3, [r3, #0]
 8020bea:	681b      	ldr	r3, [r3, #0]
 8020bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	681a      	ldr	r2, [r3, #0]
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	681b      	ldr	r3, [r3, #0]
 8020bf8:	f022 0201 	bic.w	r2, r2, #1
 8020bfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	689b      	ldr	r3, [r3, #8]
 8020c04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	683a      	ldr	r2, [r7, #0]
 8020c0e:	430a      	orrs	r2, r1
 8020c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020c12:	6878      	ldr	r0, [r7, #4]
 8020c14:	f000 f812 	bl	8020c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	68fa      	ldr	r2, [r7, #12]
 8020c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	2220      	movs	r2, #32
 8020c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	2200      	movs	r2, #0
 8020c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020c30:	2300      	movs	r3, #0
}
 8020c32:	4618      	mov	r0, r3
 8020c34:	3710      	adds	r7, #16
 8020c36:	46bd      	mov	sp, r7
 8020c38:	bd80      	pop	{r7, pc}
	...

08020c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020c3c:	b480      	push	{r7}
 8020c3e:	b085      	sub	sp, #20
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	d108      	bne.n	8020c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8020c4c:	687b      	ldr	r3, [r7, #4]
 8020c4e:	2201      	movs	r2, #1
 8020c50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	2201      	movs	r2, #1
 8020c58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020c5c:	e031      	b.n	8020cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8020c5e:	2310      	movs	r3, #16
 8020c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020c62:	2310      	movs	r3, #16
 8020c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020c66:	687b      	ldr	r3, [r7, #4]
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	689b      	ldr	r3, [r3, #8]
 8020c6c:	0e5b      	lsrs	r3, r3, #25
 8020c6e:	b2db      	uxtb	r3, r3
 8020c70:	f003 0307 	and.w	r3, r3, #7
 8020c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	689b      	ldr	r3, [r3, #8]
 8020c7c:	0f5b      	lsrs	r3, r3, #29
 8020c7e:	b2db      	uxtb	r3, r3
 8020c80:	f003 0307 	and.w	r3, r3, #7
 8020c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020c86:	7bbb      	ldrb	r3, [r7, #14]
 8020c88:	7b3a      	ldrb	r2, [r7, #12]
 8020c8a:	4911      	ldr	r1, [pc, #68]	@ (8020cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8020c8c:	5c8a      	ldrb	r2, [r1, r2]
 8020c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020c92:	7b3a      	ldrb	r2, [r7, #12]
 8020c94:	490f      	ldr	r1, [pc, #60]	@ (8020cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8020c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8020c9c:	b29a      	uxth	r2, r3
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020ca4:	7bfb      	ldrb	r3, [r7, #15]
 8020ca6:	7b7a      	ldrb	r2, [r7, #13]
 8020ca8:	4909      	ldr	r1, [pc, #36]	@ (8020cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8020caa:	5c8a      	ldrb	r2, [r1, r2]
 8020cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020cb0:	7b7a      	ldrb	r2, [r7, #13]
 8020cb2:	4908      	ldr	r1, [pc, #32]	@ (8020cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8020cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8020cba:	b29a      	uxth	r2, r3
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8020cc2:	bf00      	nop
 8020cc4:	3714      	adds	r7, #20
 8020cc6:	46bd      	mov	sp, r7
 8020cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ccc:	4770      	bx	lr
 8020cce:	bf00      	nop
 8020cd0:	08038414 	.word	0x08038414
 8020cd4:	0803841c 	.word	0x0803841c

08020cd8 <__NVIC_SetPriority>:
{
 8020cd8:	b480      	push	{r7}
 8020cda:	b083      	sub	sp, #12
 8020cdc:	af00      	add	r7, sp, #0
 8020cde:	4603      	mov	r3, r0
 8020ce0:	6039      	str	r1, [r7, #0]
 8020ce2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8020ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	db0a      	blt.n	8020d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020cec:	683b      	ldr	r3, [r7, #0]
 8020cee:	b2da      	uxtb	r2, r3
 8020cf0:	490c      	ldr	r1, [pc, #48]	@ (8020d24 <__NVIC_SetPriority+0x4c>)
 8020cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020cf6:	0112      	lsls	r2, r2, #4
 8020cf8:	b2d2      	uxtb	r2, r2
 8020cfa:	440b      	add	r3, r1
 8020cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8020d00:	e00a      	b.n	8020d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d02:	683b      	ldr	r3, [r7, #0]
 8020d04:	b2da      	uxtb	r2, r3
 8020d06:	4908      	ldr	r1, [pc, #32]	@ (8020d28 <__NVIC_SetPriority+0x50>)
 8020d08:	88fb      	ldrh	r3, [r7, #6]
 8020d0a:	f003 030f 	and.w	r3, r3, #15
 8020d0e:	3b04      	subs	r3, #4
 8020d10:	0112      	lsls	r2, r2, #4
 8020d12:	b2d2      	uxtb	r2, r2
 8020d14:	440b      	add	r3, r1
 8020d16:	761a      	strb	r2, [r3, #24]
}
 8020d18:	bf00      	nop
 8020d1a:	370c      	adds	r7, #12
 8020d1c:	46bd      	mov	sp, r7
 8020d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d22:	4770      	bx	lr
 8020d24:	e000e100 	.word	0xe000e100
 8020d28:	e000ed00 	.word	0xe000ed00

08020d2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8020d30:	4b05      	ldr	r3, [pc, #20]	@ (8020d48 <SysTick_Handler+0x1c>)
 8020d32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8020d34:	f002 f984 	bl	8023040 <xTaskGetSchedulerState>
 8020d38:	4603      	mov	r3, r0
 8020d3a:	2b01      	cmp	r3, #1
 8020d3c:	d001      	beq.n	8020d42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8020d3e:	f000 fd9b 	bl	8021878 <xPortSysTickHandler>
  }
}
 8020d42:	bf00      	nop
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	e000e010 	.word	0xe000e010

08020d4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8020d50:	2100      	movs	r1, #0
 8020d52:	f06f 0004 	mvn.w	r0, #4
 8020d56:	f7ff ffbf 	bl	8020cd8 <__NVIC_SetPriority>
#endif
}
 8020d5a:	bf00      	nop
 8020d5c:	bd80      	pop	{r7, pc}
	...

08020d60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8020d60:	b480      	push	{r7}
 8020d62:	b083      	sub	sp, #12
 8020d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020d66:	f3ef 8305 	mrs	r3, IPSR
 8020d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8020d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d003      	beq.n	8020d7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8020d72:	f06f 0305 	mvn.w	r3, #5
 8020d76:	607b      	str	r3, [r7, #4]
 8020d78:	e00c      	b.n	8020d94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8020d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8020da4 <osKernelInitialize+0x44>)
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d105      	bne.n	8020d8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8020d82:	4b08      	ldr	r3, [pc, #32]	@ (8020da4 <osKernelInitialize+0x44>)
 8020d84:	2201      	movs	r2, #1
 8020d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8020d88:	2300      	movs	r3, #0
 8020d8a:	607b      	str	r3, [r7, #4]
 8020d8c:	e002      	b.n	8020d94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8020d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8020d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8020d94:	687b      	ldr	r3, [r7, #4]
}
 8020d96:	4618      	mov	r0, r3
 8020d98:	370c      	adds	r7, #12
 8020d9a:	46bd      	mov	sp, r7
 8020d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020da0:	4770      	bx	lr
 8020da2:	bf00      	nop
 8020da4:	24003fd4 	.word	0x24003fd4

08020da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8020da8:	b580      	push	{r7, lr}
 8020daa:	b082      	sub	sp, #8
 8020dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020dae:	f3ef 8305 	mrs	r3, IPSR
 8020db2:	603b      	str	r3, [r7, #0]
  return(result);
 8020db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d003      	beq.n	8020dc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8020dba:	f06f 0305 	mvn.w	r3, #5
 8020dbe:	607b      	str	r3, [r7, #4]
 8020dc0:	e010      	b.n	8020de4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8020dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8020df0 <osKernelStart+0x48>)
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	2b01      	cmp	r3, #1
 8020dc8:	d109      	bne.n	8020dde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8020dca:	f7ff ffbf 	bl	8020d4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8020dce:	4b08      	ldr	r3, [pc, #32]	@ (8020df0 <osKernelStart+0x48>)
 8020dd0:	2202      	movs	r2, #2
 8020dd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8020dd4:	f001 fcd0 	bl	8022778 <vTaskStartScheduler>
      stat = osOK;
 8020dd8:	2300      	movs	r3, #0
 8020dda:	607b      	str	r3, [r7, #4]
 8020ddc:	e002      	b.n	8020de4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8020dde:	f04f 33ff 	mov.w	r3, #4294967295
 8020de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8020de4:	687b      	ldr	r3, [r7, #4]
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	3708      	adds	r7, #8
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd80      	pop	{r7, pc}
 8020dee:	bf00      	nop
 8020df0:	24003fd4 	.word	0x24003fd4

08020df4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8020df4:	b580      	push	{r7, lr}
 8020df6:	b08e      	sub	sp, #56	@ 0x38
 8020df8:	af04      	add	r7, sp, #16
 8020dfa:	60f8      	str	r0, [r7, #12]
 8020dfc:	60b9      	str	r1, [r7, #8]
 8020dfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8020e00:	2300      	movs	r3, #0
 8020e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020e04:	f3ef 8305 	mrs	r3, IPSR
 8020e08:	617b      	str	r3, [r7, #20]
  return(result);
 8020e0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d17e      	bne.n	8020f0e <osThreadNew+0x11a>
 8020e10:	68fb      	ldr	r3, [r7, #12]
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d07b      	beq.n	8020f0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8020e16:	2380      	movs	r3, #128	@ 0x80
 8020e18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8020e1a:	2318      	movs	r3, #24
 8020e1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8020e1e:	2300      	movs	r3, #0
 8020e20:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8020e22:	f04f 33ff 	mov.w	r3, #4294967295
 8020e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d045      	beq.n	8020eba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	681b      	ldr	r3, [r3, #0]
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	d002      	beq.n	8020e3c <osThreadNew+0x48>
        name = attr->name;
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	699b      	ldr	r3, [r3, #24]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d002      	beq.n	8020e4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	699b      	ldr	r3, [r3, #24]
 8020e48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8020e4a:	69fb      	ldr	r3, [r7, #28]
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d008      	beq.n	8020e62 <osThreadNew+0x6e>
 8020e50:	69fb      	ldr	r3, [r7, #28]
 8020e52:	2b38      	cmp	r3, #56	@ 0x38
 8020e54:	d805      	bhi.n	8020e62 <osThreadNew+0x6e>
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	685b      	ldr	r3, [r3, #4]
 8020e5a:	f003 0301 	and.w	r3, r3, #1
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d001      	beq.n	8020e66 <osThreadNew+0x72>
        return (NULL);
 8020e62:	2300      	movs	r3, #0
 8020e64:	e054      	b.n	8020f10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	695b      	ldr	r3, [r3, #20]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d003      	beq.n	8020e76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	695b      	ldr	r3, [r3, #20]
 8020e72:	089b      	lsrs	r3, r3, #2
 8020e74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	689b      	ldr	r3, [r3, #8]
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d00e      	beq.n	8020e9c <osThreadNew+0xa8>
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	68db      	ldr	r3, [r3, #12]
 8020e82:	2ba7      	cmp	r3, #167	@ 0xa7
 8020e84:	d90a      	bls.n	8020e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	d006      	beq.n	8020e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	695b      	ldr	r3, [r3, #20]
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d002      	beq.n	8020e9c <osThreadNew+0xa8>
        mem = 1;
 8020e96:	2301      	movs	r3, #1
 8020e98:	61bb      	str	r3, [r7, #24]
 8020e9a:	e010      	b.n	8020ebe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	689b      	ldr	r3, [r3, #8]
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	d10c      	bne.n	8020ebe <osThreadNew+0xca>
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	68db      	ldr	r3, [r3, #12]
 8020ea8:	2b00      	cmp	r3, #0
 8020eaa:	d108      	bne.n	8020ebe <osThreadNew+0xca>
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	691b      	ldr	r3, [r3, #16]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d104      	bne.n	8020ebe <osThreadNew+0xca>
          mem = 0;
 8020eb4:	2300      	movs	r3, #0
 8020eb6:	61bb      	str	r3, [r7, #24]
 8020eb8:	e001      	b.n	8020ebe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8020eba:	2300      	movs	r3, #0
 8020ebc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8020ebe:	69bb      	ldr	r3, [r7, #24]
 8020ec0:	2b01      	cmp	r3, #1
 8020ec2:	d110      	bne.n	8020ee6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8020ec8:	687a      	ldr	r2, [r7, #4]
 8020eca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020ecc:	9202      	str	r2, [sp, #8]
 8020ece:	9301      	str	r3, [sp, #4]
 8020ed0:	69fb      	ldr	r3, [r7, #28]
 8020ed2:	9300      	str	r3, [sp, #0]
 8020ed4:	68bb      	ldr	r3, [r7, #8]
 8020ed6:	6a3a      	ldr	r2, [r7, #32]
 8020ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020eda:	68f8      	ldr	r0, [r7, #12]
 8020edc:	f001 fa58 	bl	8022390 <xTaskCreateStatic>
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	613b      	str	r3, [r7, #16]
 8020ee4:	e013      	b.n	8020f0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8020ee6:	69bb      	ldr	r3, [r7, #24]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d110      	bne.n	8020f0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8020eec:	6a3b      	ldr	r3, [r7, #32]
 8020eee:	b29a      	uxth	r2, r3
 8020ef0:	f107 0310 	add.w	r3, r7, #16
 8020ef4:	9301      	str	r3, [sp, #4]
 8020ef6:	69fb      	ldr	r3, [r7, #28]
 8020ef8:	9300      	str	r3, [sp, #0]
 8020efa:	68bb      	ldr	r3, [r7, #8]
 8020efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020efe:	68f8      	ldr	r0, [r7, #12]
 8020f00:	f001 faa6 	bl	8022450 <xTaskCreate>
 8020f04:	4603      	mov	r3, r0
 8020f06:	2b01      	cmp	r3, #1
 8020f08:	d001      	beq.n	8020f0e <osThreadNew+0x11a>
            hTask = NULL;
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8020f0e:	693b      	ldr	r3, [r7, #16]
}
 8020f10:	4618      	mov	r0, r3
 8020f12:	3728      	adds	r7, #40	@ 0x28
 8020f14:	46bd      	mov	sp, r7
 8020f16:	bd80      	pop	{r7, pc}

08020f18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8020f18:	b580      	push	{r7, lr}
 8020f1a:	b084      	sub	sp, #16
 8020f1c:	af00      	add	r7, sp, #0
 8020f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020f20:	f3ef 8305 	mrs	r3, IPSR
 8020f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8020f26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d003      	beq.n	8020f34 <osDelay+0x1c>
    stat = osErrorISR;
 8020f2c:	f06f 0305 	mvn.w	r3, #5
 8020f30:	60fb      	str	r3, [r7, #12]
 8020f32:	e007      	b.n	8020f44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8020f34:	2300      	movs	r3, #0
 8020f36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d002      	beq.n	8020f44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8020f3e:	6878      	ldr	r0, [r7, #4]
 8020f40:	f001 fbe4 	bl	802270c <vTaskDelay>
    }
  }

  return (stat);
 8020f44:	68fb      	ldr	r3, [r7, #12]
}
 8020f46:	4618      	mov	r0, r3
 8020f48:	3710      	adds	r7, #16
 8020f4a:	46bd      	mov	sp, r7
 8020f4c:	bd80      	pop	{r7, pc}
	...

08020f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020f50:	b480      	push	{r7}
 8020f52:	b085      	sub	sp, #20
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	60f8      	str	r0, [r7, #12]
 8020f58:	60b9      	str	r1, [r7, #8]
 8020f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8020f5c:	68fb      	ldr	r3, [r7, #12]
 8020f5e:	4a07      	ldr	r2, [pc, #28]	@ (8020f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8020f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8020f62:	68bb      	ldr	r3, [r7, #8]
 8020f64:	4a06      	ldr	r2, [pc, #24]	@ (8020f80 <vApplicationGetIdleTaskMemory+0x30>)
 8020f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	2280      	movs	r2, #128	@ 0x80
 8020f6c:	601a      	str	r2, [r3, #0]
}
 8020f6e:	bf00      	nop
 8020f70:	3714      	adds	r7, #20
 8020f72:	46bd      	mov	sp, r7
 8020f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f78:	4770      	bx	lr
 8020f7a:	bf00      	nop
 8020f7c:	24003fd8 	.word	0x24003fd8
 8020f80:	24004080 	.word	0x24004080

08020f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8020f84:	b480      	push	{r7}
 8020f86:	b085      	sub	sp, #20
 8020f88:	af00      	add	r7, sp, #0
 8020f8a:	60f8      	str	r0, [r7, #12]
 8020f8c:	60b9      	str	r1, [r7, #8]
 8020f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8020f90:	68fb      	ldr	r3, [r7, #12]
 8020f92:	4a07      	ldr	r2, [pc, #28]	@ (8020fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8020f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8020f96:	68bb      	ldr	r3, [r7, #8]
 8020f98:	4a06      	ldr	r2, [pc, #24]	@ (8020fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8020f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020fa2:	601a      	str	r2, [r3, #0]
}
 8020fa4:	bf00      	nop
 8020fa6:	3714      	adds	r7, #20
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fae:	4770      	bx	lr
 8020fb0:	24004280 	.word	0x24004280
 8020fb4:	24004328 	.word	0x24004328

08020fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8020fb8:	b580      	push	{r7, lr}
 8020fba:	b08a      	sub	sp, #40	@ 0x28
 8020fbc:	af00      	add	r7, sp, #0
 8020fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8020fc4:	f001 fc48 	bl	8022858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020fc8:	4b5c      	ldr	r3, [pc, #368]	@ (802113c <pvPortMalloc+0x184>)
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d101      	bne.n	8020fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020fd0:	f000 f924 	bl	802121c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8021140 <pvPortMalloc+0x188>)
 8020fd6:	681a      	ldr	r2, [r3, #0]
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	4013      	ands	r3, r2
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	f040 8095 	bne.w	802110c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	2b00      	cmp	r3, #0
 8020fe6:	d01e      	beq.n	8021026 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8020fe8:	2208      	movs	r2, #8
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	4413      	add	r3, r2
 8020fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	f003 0307 	and.w	r3, r3, #7
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d015      	beq.n	8021026 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	f023 0307 	bic.w	r3, r3, #7
 8021000:	3308      	adds	r3, #8
 8021002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	f003 0307 	and.w	r3, r3, #7
 802100a:	2b00      	cmp	r3, #0
 802100c:	d00b      	beq.n	8021026 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 802100e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021012:	f383 8811 	msr	BASEPRI, r3
 8021016:	f3bf 8f6f 	isb	sy
 802101a:	f3bf 8f4f 	dsb	sy
 802101e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8021020:	bf00      	nop
 8021022:	bf00      	nop
 8021024:	e7fd      	b.n	8021022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	2b00      	cmp	r3, #0
 802102a:	d06f      	beq.n	802110c <pvPortMalloc+0x154>
 802102c:	4b45      	ldr	r3, [pc, #276]	@ (8021144 <pvPortMalloc+0x18c>)
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	687a      	ldr	r2, [r7, #4]
 8021032:	429a      	cmp	r2, r3
 8021034:	d86a      	bhi.n	802110c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8021036:	4b44      	ldr	r3, [pc, #272]	@ (8021148 <pvPortMalloc+0x190>)
 8021038:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802103a:	4b43      	ldr	r3, [pc, #268]	@ (8021148 <pvPortMalloc+0x190>)
 802103c:	681b      	ldr	r3, [r3, #0]
 802103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8021040:	e004      	b.n	802104c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8021042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021044:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8021046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021048:	681b      	ldr	r3, [r3, #0]
 802104a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802104e:	685b      	ldr	r3, [r3, #4]
 8021050:	687a      	ldr	r2, [r7, #4]
 8021052:	429a      	cmp	r2, r3
 8021054:	d903      	bls.n	802105e <pvPortMalloc+0xa6>
 8021056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	2b00      	cmp	r3, #0
 802105c:	d1f1      	bne.n	8021042 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802105e:	4b37      	ldr	r3, [pc, #220]	@ (802113c <pvPortMalloc+0x184>)
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021064:	429a      	cmp	r2, r3
 8021066:	d051      	beq.n	802110c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8021068:	6a3b      	ldr	r3, [r7, #32]
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	2208      	movs	r2, #8
 802106e:	4413      	add	r3, r2
 8021070:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8021072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021074:	681a      	ldr	r2, [r3, #0]
 8021076:	6a3b      	ldr	r3, [r7, #32]
 8021078:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802107c:	685a      	ldr	r2, [r3, #4]
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	1ad2      	subs	r2, r2, r3
 8021082:	2308      	movs	r3, #8
 8021084:	005b      	lsls	r3, r3, #1
 8021086:	429a      	cmp	r2, r3
 8021088:	d920      	bls.n	80210cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802108a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	4413      	add	r3, r2
 8021090:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8021092:	69bb      	ldr	r3, [r7, #24]
 8021094:	f003 0307 	and.w	r3, r3, #7
 8021098:	2b00      	cmp	r3, #0
 802109a:	d00b      	beq.n	80210b4 <pvPortMalloc+0xfc>
	__asm volatile
 802109c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80210a0:	f383 8811 	msr	BASEPRI, r3
 80210a4:	f3bf 8f6f 	isb	sy
 80210a8:	f3bf 8f4f 	dsb	sy
 80210ac:	613b      	str	r3, [r7, #16]
}
 80210ae:	bf00      	nop
 80210b0:	bf00      	nop
 80210b2:	e7fd      	b.n	80210b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80210b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210b6:	685a      	ldr	r2, [r3, #4]
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	1ad2      	subs	r2, r2, r3
 80210bc:	69bb      	ldr	r3, [r7, #24]
 80210be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80210c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210c2:	687a      	ldr	r2, [r7, #4]
 80210c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80210c6:	69b8      	ldr	r0, [r7, #24]
 80210c8:	f000 f90a 	bl	80212e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80210cc:	4b1d      	ldr	r3, [pc, #116]	@ (8021144 <pvPortMalloc+0x18c>)
 80210ce:	681a      	ldr	r2, [r3, #0]
 80210d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210d2:	685b      	ldr	r3, [r3, #4]
 80210d4:	1ad3      	subs	r3, r2, r3
 80210d6:	4a1b      	ldr	r2, [pc, #108]	@ (8021144 <pvPortMalloc+0x18c>)
 80210d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80210da:	4b1a      	ldr	r3, [pc, #104]	@ (8021144 <pvPortMalloc+0x18c>)
 80210dc:	681a      	ldr	r2, [r3, #0]
 80210de:	4b1b      	ldr	r3, [pc, #108]	@ (802114c <pvPortMalloc+0x194>)
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	429a      	cmp	r2, r3
 80210e4:	d203      	bcs.n	80210ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80210e6:	4b17      	ldr	r3, [pc, #92]	@ (8021144 <pvPortMalloc+0x18c>)
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	4a18      	ldr	r2, [pc, #96]	@ (802114c <pvPortMalloc+0x194>)
 80210ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80210ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210f0:	685a      	ldr	r2, [r3, #4]
 80210f2:	4b13      	ldr	r3, [pc, #76]	@ (8021140 <pvPortMalloc+0x188>)
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	431a      	orrs	r2, r3
 80210f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80210fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210fe:	2200      	movs	r2, #0
 8021100:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8021102:	4b13      	ldr	r3, [pc, #76]	@ (8021150 <pvPortMalloc+0x198>)
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	3301      	adds	r3, #1
 8021108:	4a11      	ldr	r2, [pc, #68]	@ (8021150 <pvPortMalloc+0x198>)
 802110a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802110c:	f001 fbb2 	bl	8022874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8021110:	69fb      	ldr	r3, [r7, #28]
 8021112:	f003 0307 	and.w	r3, r3, #7
 8021116:	2b00      	cmp	r3, #0
 8021118:	d00b      	beq.n	8021132 <pvPortMalloc+0x17a>
	__asm volatile
 802111a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802111e:	f383 8811 	msr	BASEPRI, r3
 8021122:	f3bf 8f6f 	isb	sy
 8021126:	f3bf 8f4f 	dsb	sy
 802112a:	60fb      	str	r3, [r7, #12]
}
 802112c:	bf00      	nop
 802112e:	bf00      	nop
 8021130:	e7fd      	b.n	802112e <pvPortMalloc+0x176>
	return pvReturn;
 8021132:	69fb      	ldr	r3, [r7, #28]
}
 8021134:	4618      	mov	r0, r3
 8021136:	3728      	adds	r7, #40	@ 0x28
 8021138:	46bd      	mov	sp, r7
 802113a:	bd80      	pop	{r7, pc}
 802113c:	24008330 	.word	0x24008330
 8021140:	24008344 	.word	0x24008344
 8021144:	24008334 	.word	0x24008334
 8021148:	24008328 	.word	0x24008328
 802114c:	24008338 	.word	0x24008338
 8021150:	2400833c 	.word	0x2400833c

08021154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8021154:	b580      	push	{r7, lr}
 8021156:	b086      	sub	sp, #24
 8021158:	af00      	add	r7, sp, #0
 802115a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	2b00      	cmp	r3, #0
 8021164:	d04f      	beq.n	8021206 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8021166:	2308      	movs	r3, #8
 8021168:	425b      	negs	r3, r3
 802116a:	697a      	ldr	r2, [r7, #20]
 802116c:	4413      	add	r3, r2
 802116e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8021170:	697b      	ldr	r3, [r7, #20]
 8021172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8021174:	693b      	ldr	r3, [r7, #16]
 8021176:	685a      	ldr	r2, [r3, #4]
 8021178:	4b25      	ldr	r3, [pc, #148]	@ (8021210 <vPortFree+0xbc>)
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	4013      	ands	r3, r2
 802117e:	2b00      	cmp	r3, #0
 8021180:	d10b      	bne.n	802119a <vPortFree+0x46>
	__asm volatile
 8021182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021186:	f383 8811 	msr	BASEPRI, r3
 802118a:	f3bf 8f6f 	isb	sy
 802118e:	f3bf 8f4f 	dsb	sy
 8021192:	60fb      	str	r3, [r7, #12]
}
 8021194:	bf00      	nop
 8021196:	bf00      	nop
 8021198:	e7fd      	b.n	8021196 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802119a:	693b      	ldr	r3, [r7, #16]
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d00b      	beq.n	80211ba <vPortFree+0x66>
	__asm volatile
 80211a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80211a6:	f383 8811 	msr	BASEPRI, r3
 80211aa:	f3bf 8f6f 	isb	sy
 80211ae:	f3bf 8f4f 	dsb	sy
 80211b2:	60bb      	str	r3, [r7, #8]
}
 80211b4:	bf00      	nop
 80211b6:	bf00      	nop
 80211b8:	e7fd      	b.n	80211b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80211ba:	693b      	ldr	r3, [r7, #16]
 80211bc:	685a      	ldr	r2, [r3, #4]
 80211be:	4b14      	ldr	r3, [pc, #80]	@ (8021210 <vPortFree+0xbc>)
 80211c0:	681b      	ldr	r3, [r3, #0]
 80211c2:	4013      	ands	r3, r2
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d01e      	beq.n	8021206 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80211c8:	693b      	ldr	r3, [r7, #16]
 80211ca:	681b      	ldr	r3, [r3, #0]
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d11a      	bne.n	8021206 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80211d0:	693b      	ldr	r3, [r7, #16]
 80211d2:	685a      	ldr	r2, [r3, #4]
 80211d4:	4b0e      	ldr	r3, [pc, #56]	@ (8021210 <vPortFree+0xbc>)
 80211d6:	681b      	ldr	r3, [r3, #0]
 80211d8:	43db      	mvns	r3, r3
 80211da:	401a      	ands	r2, r3
 80211dc:	693b      	ldr	r3, [r7, #16]
 80211de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80211e0:	f001 fb3a 	bl	8022858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80211e4:	693b      	ldr	r3, [r7, #16]
 80211e6:	685a      	ldr	r2, [r3, #4]
 80211e8:	4b0a      	ldr	r3, [pc, #40]	@ (8021214 <vPortFree+0xc0>)
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	4413      	add	r3, r2
 80211ee:	4a09      	ldr	r2, [pc, #36]	@ (8021214 <vPortFree+0xc0>)
 80211f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80211f2:	6938      	ldr	r0, [r7, #16]
 80211f4:	f000 f874 	bl	80212e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80211f8:	4b07      	ldr	r3, [pc, #28]	@ (8021218 <vPortFree+0xc4>)
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	3301      	adds	r3, #1
 80211fe:	4a06      	ldr	r2, [pc, #24]	@ (8021218 <vPortFree+0xc4>)
 8021200:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8021202:	f001 fb37 	bl	8022874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8021206:	bf00      	nop
 8021208:	3718      	adds	r7, #24
 802120a:	46bd      	mov	sp, r7
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop
 8021210:	24008344 	.word	0x24008344
 8021214:	24008334 	.word	0x24008334
 8021218:	24008340 	.word	0x24008340

0802121c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802121c:	b480      	push	{r7}
 802121e:	b085      	sub	sp, #20
 8021220:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8021222:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8021226:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8021228:	4b27      	ldr	r3, [pc, #156]	@ (80212c8 <prvHeapInit+0xac>)
 802122a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802122c:	68fb      	ldr	r3, [r7, #12]
 802122e:	f003 0307 	and.w	r3, r3, #7
 8021232:	2b00      	cmp	r3, #0
 8021234:	d00c      	beq.n	8021250 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8021236:	68fb      	ldr	r3, [r7, #12]
 8021238:	3307      	adds	r3, #7
 802123a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802123c:	68fb      	ldr	r3, [r7, #12]
 802123e:	f023 0307 	bic.w	r3, r3, #7
 8021242:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8021244:	68ba      	ldr	r2, [r7, #8]
 8021246:	68fb      	ldr	r3, [r7, #12]
 8021248:	1ad3      	subs	r3, r2, r3
 802124a:	4a1f      	ldr	r2, [pc, #124]	@ (80212c8 <prvHeapInit+0xac>)
 802124c:	4413      	add	r3, r2
 802124e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8021250:	68fb      	ldr	r3, [r7, #12]
 8021252:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8021254:	4a1d      	ldr	r2, [pc, #116]	@ (80212cc <prvHeapInit+0xb0>)
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802125a:	4b1c      	ldr	r3, [pc, #112]	@ (80212cc <prvHeapInit+0xb0>)
 802125c:	2200      	movs	r2, #0
 802125e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	68ba      	ldr	r2, [r7, #8]
 8021264:	4413      	add	r3, r2
 8021266:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8021268:	2208      	movs	r2, #8
 802126a:	68fb      	ldr	r3, [r7, #12]
 802126c:	1a9b      	subs	r3, r3, r2
 802126e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	f023 0307 	bic.w	r3, r3, #7
 8021276:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8021278:	68fb      	ldr	r3, [r7, #12]
 802127a:	4a15      	ldr	r2, [pc, #84]	@ (80212d0 <prvHeapInit+0xb4>)
 802127c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802127e:	4b14      	ldr	r3, [pc, #80]	@ (80212d0 <prvHeapInit+0xb4>)
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	2200      	movs	r2, #0
 8021284:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8021286:	4b12      	ldr	r3, [pc, #72]	@ (80212d0 <prvHeapInit+0xb4>)
 8021288:	681b      	ldr	r3, [r3, #0]
 802128a:	2200      	movs	r2, #0
 802128c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8021292:	683b      	ldr	r3, [r7, #0]
 8021294:	68fa      	ldr	r2, [r7, #12]
 8021296:	1ad2      	subs	r2, r2, r3
 8021298:	683b      	ldr	r3, [r7, #0]
 802129a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802129c:	4b0c      	ldr	r3, [pc, #48]	@ (80212d0 <prvHeapInit+0xb4>)
 802129e:	681a      	ldr	r2, [r3, #0]
 80212a0:	683b      	ldr	r3, [r7, #0]
 80212a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80212a4:	683b      	ldr	r3, [r7, #0]
 80212a6:	685b      	ldr	r3, [r3, #4]
 80212a8:	4a0a      	ldr	r2, [pc, #40]	@ (80212d4 <prvHeapInit+0xb8>)
 80212aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80212ac:	683b      	ldr	r3, [r7, #0]
 80212ae:	685b      	ldr	r3, [r3, #4]
 80212b0:	4a09      	ldr	r2, [pc, #36]	@ (80212d8 <prvHeapInit+0xbc>)
 80212b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80212b4:	4b09      	ldr	r3, [pc, #36]	@ (80212dc <prvHeapInit+0xc0>)
 80212b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80212ba:	601a      	str	r2, [r3, #0]
}
 80212bc:	bf00      	nop
 80212be:	3714      	adds	r7, #20
 80212c0:	46bd      	mov	sp, r7
 80212c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212c6:	4770      	bx	lr
 80212c8:	24004728 	.word	0x24004728
 80212cc:	24008328 	.word	0x24008328
 80212d0:	24008330 	.word	0x24008330
 80212d4:	24008338 	.word	0x24008338
 80212d8:	24008334 	.word	0x24008334
 80212dc:	24008344 	.word	0x24008344

080212e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80212e0:	b480      	push	{r7}
 80212e2:	b085      	sub	sp, #20
 80212e4:	af00      	add	r7, sp, #0
 80212e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80212e8:	4b28      	ldr	r3, [pc, #160]	@ (802138c <prvInsertBlockIntoFreeList+0xac>)
 80212ea:	60fb      	str	r3, [r7, #12]
 80212ec:	e002      	b.n	80212f4 <prvInsertBlockIntoFreeList+0x14>
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	681b      	ldr	r3, [r3, #0]
 80212f2:	60fb      	str	r3, [r7, #12]
 80212f4:	68fb      	ldr	r3, [r7, #12]
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	687a      	ldr	r2, [r7, #4]
 80212fa:	429a      	cmp	r2, r3
 80212fc:	d8f7      	bhi.n	80212ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80212fe:	68fb      	ldr	r3, [r7, #12]
 8021300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8021302:	68fb      	ldr	r3, [r7, #12]
 8021304:	685b      	ldr	r3, [r3, #4]
 8021306:	68ba      	ldr	r2, [r7, #8]
 8021308:	4413      	add	r3, r2
 802130a:	687a      	ldr	r2, [r7, #4]
 802130c:	429a      	cmp	r2, r3
 802130e:	d108      	bne.n	8021322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	685a      	ldr	r2, [r3, #4]
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	685b      	ldr	r3, [r3, #4]
 8021318:	441a      	add	r2, r3
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	685b      	ldr	r3, [r3, #4]
 802132a:	68ba      	ldr	r2, [r7, #8]
 802132c:	441a      	add	r2, r3
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	429a      	cmp	r2, r3
 8021334:	d118      	bne.n	8021368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8021336:	68fb      	ldr	r3, [r7, #12]
 8021338:	681a      	ldr	r2, [r3, #0]
 802133a:	4b15      	ldr	r3, [pc, #84]	@ (8021390 <prvInsertBlockIntoFreeList+0xb0>)
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	429a      	cmp	r2, r3
 8021340:	d00d      	beq.n	802135e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	685a      	ldr	r2, [r3, #4]
 8021346:	68fb      	ldr	r3, [r7, #12]
 8021348:	681b      	ldr	r3, [r3, #0]
 802134a:	685b      	ldr	r3, [r3, #4]
 802134c:	441a      	add	r2, r3
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	681a      	ldr	r2, [r3, #0]
 8021358:	687b      	ldr	r3, [r7, #4]
 802135a:	601a      	str	r2, [r3, #0]
 802135c:	e008      	b.n	8021370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802135e:	4b0c      	ldr	r3, [pc, #48]	@ (8021390 <prvInsertBlockIntoFreeList+0xb0>)
 8021360:	681a      	ldr	r2, [r3, #0]
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	601a      	str	r2, [r3, #0]
 8021366:	e003      	b.n	8021370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021368:	68fb      	ldr	r3, [r7, #12]
 802136a:	681a      	ldr	r2, [r3, #0]
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021370:	68fa      	ldr	r2, [r7, #12]
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	429a      	cmp	r2, r3
 8021376:	d002      	beq.n	802137e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021378:	68fb      	ldr	r3, [r7, #12]
 802137a:	687a      	ldr	r2, [r7, #4]
 802137c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802137e:	bf00      	nop
 8021380:	3714      	adds	r7, #20
 8021382:	46bd      	mov	sp, r7
 8021384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021388:	4770      	bx	lr
 802138a:	bf00      	nop
 802138c:	24008328 	.word	0x24008328
 8021390:	24008330 	.word	0x24008330

08021394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8021394:	b480      	push	{r7}
 8021396:	b083      	sub	sp, #12
 8021398:	af00      	add	r7, sp, #0
 802139a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	f103 0208 	add.w	r2, r3, #8
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	f04f 32ff 	mov.w	r2, #4294967295
 80213ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	f103 0208 	add.w	r2, r3, #8
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	f103 0208 	add.w	r2, r3, #8
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	2200      	movs	r2, #0
 80213c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80213c8:	bf00      	nop
 80213ca:	370c      	adds	r7, #12
 80213cc:	46bd      	mov	sp, r7
 80213ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d2:	4770      	bx	lr

080213d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80213d4:	b480      	push	{r7}
 80213d6:	b083      	sub	sp, #12
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	2200      	movs	r2, #0
 80213e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80213e2:	bf00      	nop
 80213e4:	370c      	adds	r7, #12
 80213e6:	46bd      	mov	sp, r7
 80213e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ec:	4770      	bx	lr

080213ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80213ee:	b480      	push	{r7}
 80213f0:	b085      	sub	sp, #20
 80213f2:	af00      	add	r7, sp, #0
 80213f4:	6078      	str	r0, [r7, #4]
 80213f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	685b      	ldr	r3, [r3, #4]
 80213fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80213fe:	683b      	ldr	r3, [r7, #0]
 8021400:	68fa      	ldr	r2, [r7, #12]
 8021402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8021404:	68fb      	ldr	r3, [r7, #12]
 8021406:	689a      	ldr	r2, [r3, #8]
 8021408:	683b      	ldr	r3, [r7, #0]
 802140a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	689b      	ldr	r3, [r3, #8]
 8021410:	683a      	ldr	r2, [r7, #0]
 8021412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8021414:	68fb      	ldr	r3, [r7, #12]
 8021416:	683a      	ldr	r2, [r7, #0]
 8021418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802141a:	683b      	ldr	r3, [r7, #0]
 802141c:	687a      	ldr	r2, [r7, #4]
 802141e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	1c5a      	adds	r2, r3, #1
 8021426:	687b      	ldr	r3, [r7, #4]
 8021428:	601a      	str	r2, [r3, #0]
}
 802142a:	bf00      	nop
 802142c:	3714      	adds	r7, #20
 802142e:	46bd      	mov	sp, r7
 8021430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021434:	4770      	bx	lr

08021436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8021436:	b480      	push	{r7}
 8021438:	b085      	sub	sp, #20
 802143a:	af00      	add	r7, sp, #0
 802143c:	6078      	str	r0, [r7, #4]
 802143e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8021440:	683b      	ldr	r3, [r7, #0]
 8021442:	681b      	ldr	r3, [r3, #0]
 8021444:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8021446:	68bb      	ldr	r3, [r7, #8]
 8021448:	f1b3 3fff 	cmp.w	r3, #4294967295
 802144c:	d103      	bne.n	8021456 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	691b      	ldr	r3, [r3, #16]
 8021452:	60fb      	str	r3, [r7, #12]
 8021454:	e00c      	b.n	8021470 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	3308      	adds	r3, #8
 802145a:	60fb      	str	r3, [r7, #12]
 802145c:	e002      	b.n	8021464 <vListInsert+0x2e>
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	685b      	ldr	r3, [r3, #4]
 8021462:	60fb      	str	r3, [r7, #12]
 8021464:	68fb      	ldr	r3, [r7, #12]
 8021466:	685b      	ldr	r3, [r3, #4]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	68ba      	ldr	r2, [r7, #8]
 802146c:	429a      	cmp	r2, r3
 802146e:	d2f6      	bcs.n	802145e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8021470:	68fb      	ldr	r3, [r7, #12]
 8021472:	685a      	ldr	r2, [r3, #4]
 8021474:	683b      	ldr	r3, [r7, #0]
 8021476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8021478:	683b      	ldr	r3, [r7, #0]
 802147a:	685b      	ldr	r3, [r3, #4]
 802147c:	683a      	ldr	r2, [r7, #0]
 802147e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8021480:	683b      	ldr	r3, [r7, #0]
 8021482:	68fa      	ldr	r2, [r7, #12]
 8021484:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8021486:	68fb      	ldr	r3, [r7, #12]
 8021488:	683a      	ldr	r2, [r7, #0]
 802148a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 802148c:	683b      	ldr	r3, [r7, #0]
 802148e:	687a      	ldr	r2, [r7, #4]
 8021490:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	1c5a      	adds	r2, r3, #1
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	601a      	str	r2, [r3, #0]
}
 802149c:	bf00      	nop
 802149e:	3714      	adds	r7, #20
 80214a0:	46bd      	mov	sp, r7
 80214a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a6:	4770      	bx	lr

080214a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80214a8:	b480      	push	{r7}
 80214aa:	b085      	sub	sp, #20
 80214ac:	af00      	add	r7, sp, #0
 80214ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	691b      	ldr	r3, [r3, #16]
 80214b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80214b6:	687b      	ldr	r3, [r7, #4]
 80214b8:	685b      	ldr	r3, [r3, #4]
 80214ba:	687a      	ldr	r2, [r7, #4]
 80214bc:	6892      	ldr	r2, [r2, #8]
 80214be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	689b      	ldr	r3, [r3, #8]
 80214c4:	687a      	ldr	r2, [r7, #4]
 80214c6:	6852      	ldr	r2, [r2, #4]
 80214c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80214ca:	68fb      	ldr	r3, [r7, #12]
 80214cc:	685b      	ldr	r3, [r3, #4]
 80214ce:	687a      	ldr	r2, [r7, #4]
 80214d0:	429a      	cmp	r2, r3
 80214d2:	d103      	bne.n	80214dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	689a      	ldr	r2, [r3, #8]
 80214d8:	68fb      	ldr	r3, [r7, #12]
 80214da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	2200      	movs	r2, #0
 80214e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80214e2:	68fb      	ldr	r3, [r7, #12]
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	1e5a      	subs	r2, r3, #1
 80214e8:	68fb      	ldr	r3, [r7, #12]
 80214ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80214ec:	68fb      	ldr	r3, [r7, #12]
 80214ee:	681b      	ldr	r3, [r3, #0]
}
 80214f0:	4618      	mov	r0, r3
 80214f2:	3714      	adds	r7, #20
 80214f4:	46bd      	mov	sp, r7
 80214f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214fa:	4770      	bx	lr

080214fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80214fc:	b480      	push	{r7}
 80214fe:	b085      	sub	sp, #20
 8021500:	af00      	add	r7, sp, #0
 8021502:	60f8      	str	r0, [r7, #12]
 8021504:	60b9      	str	r1, [r7, #8]
 8021506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8021508:	68fb      	ldr	r3, [r7, #12]
 802150a:	3b04      	subs	r3, #4
 802150c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802150e:	68fb      	ldr	r3, [r7, #12]
 8021510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8021514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8021516:	68fb      	ldr	r3, [r7, #12]
 8021518:	3b04      	subs	r3, #4
 802151a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802151c:	68bb      	ldr	r3, [r7, #8]
 802151e:	f023 0201 	bic.w	r2, r3, #1
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8021526:	68fb      	ldr	r3, [r7, #12]
 8021528:	3b04      	subs	r3, #4
 802152a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802152c:	4a0c      	ldr	r2, [pc, #48]	@ (8021560 <pxPortInitialiseStack+0x64>)
 802152e:	68fb      	ldr	r3, [r7, #12]
 8021530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	3b14      	subs	r3, #20
 8021536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8021538:	687a      	ldr	r2, [r7, #4]
 802153a:	68fb      	ldr	r3, [r7, #12]
 802153c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802153e:	68fb      	ldr	r3, [r7, #12]
 8021540:	3b04      	subs	r3, #4
 8021542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8021544:	68fb      	ldr	r3, [r7, #12]
 8021546:	f06f 0202 	mvn.w	r2, #2
 802154a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	3b20      	subs	r3, #32
 8021550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8021552:	68fb      	ldr	r3, [r7, #12]
}
 8021554:	4618      	mov	r0, r3
 8021556:	3714      	adds	r7, #20
 8021558:	46bd      	mov	sp, r7
 802155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802155e:	4770      	bx	lr
 8021560:	08021565 	.word	0x08021565

08021564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8021564:	b480      	push	{r7}
 8021566:	b085      	sub	sp, #20
 8021568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802156a:	2300      	movs	r3, #0
 802156c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802156e:	4b13      	ldr	r3, [pc, #76]	@ (80215bc <prvTaskExitError+0x58>)
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021576:	d00b      	beq.n	8021590 <prvTaskExitError+0x2c>
	__asm volatile
 8021578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802157c:	f383 8811 	msr	BASEPRI, r3
 8021580:	f3bf 8f6f 	isb	sy
 8021584:	f3bf 8f4f 	dsb	sy
 8021588:	60fb      	str	r3, [r7, #12]
}
 802158a:	bf00      	nop
 802158c:	bf00      	nop
 802158e:	e7fd      	b.n	802158c <prvTaskExitError+0x28>
	__asm volatile
 8021590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021594:	f383 8811 	msr	BASEPRI, r3
 8021598:	f3bf 8f6f 	isb	sy
 802159c:	f3bf 8f4f 	dsb	sy
 80215a0:	60bb      	str	r3, [r7, #8]
}
 80215a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80215a4:	bf00      	nop
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d0fc      	beq.n	80215a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80215ac:	bf00      	nop
 80215ae:	bf00      	nop
 80215b0:	3714      	adds	r7, #20
 80215b2:	46bd      	mov	sp, r7
 80215b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215b8:	4770      	bx	lr
 80215ba:	bf00      	nop
 80215bc:	240007a0 	.word	0x240007a0

080215c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80215c0:	4b07      	ldr	r3, [pc, #28]	@ (80215e0 <pxCurrentTCBConst2>)
 80215c2:	6819      	ldr	r1, [r3, #0]
 80215c4:	6808      	ldr	r0, [r1, #0]
 80215c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215ca:	f380 8809 	msr	PSP, r0
 80215ce:	f3bf 8f6f 	isb	sy
 80215d2:	f04f 0000 	mov.w	r0, #0
 80215d6:	f380 8811 	msr	BASEPRI, r0
 80215da:	4770      	bx	lr
 80215dc:	f3af 8000 	nop.w

080215e0 <pxCurrentTCBConst2>:
 80215e0:	24008390 	.word	0x24008390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80215e4:	bf00      	nop
 80215e6:	bf00      	nop

080215e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80215e8:	4808      	ldr	r0, [pc, #32]	@ (802160c <prvPortStartFirstTask+0x24>)
 80215ea:	6800      	ldr	r0, [r0, #0]
 80215ec:	6800      	ldr	r0, [r0, #0]
 80215ee:	f380 8808 	msr	MSP, r0
 80215f2:	f04f 0000 	mov.w	r0, #0
 80215f6:	f380 8814 	msr	CONTROL, r0
 80215fa:	b662      	cpsie	i
 80215fc:	b661      	cpsie	f
 80215fe:	f3bf 8f4f 	dsb	sy
 8021602:	f3bf 8f6f 	isb	sy
 8021606:	df00      	svc	0
 8021608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802160a:	bf00      	nop
 802160c:	e000ed08 	.word	0xe000ed08

08021610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8021610:	b580      	push	{r7, lr}
 8021612:	b086      	sub	sp, #24
 8021614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8021616:	4b47      	ldr	r3, [pc, #284]	@ (8021734 <xPortStartScheduler+0x124>)
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	4a47      	ldr	r2, [pc, #284]	@ (8021738 <xPortStartScheduler+0x128>)
 802161c:	4293      	cmp	r3, r2
 802161e:	d10b      	bne.n	8021638 <xPortStartScheduler+0x28>
	__asm volatile
 8021620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021624:	f383 8811 	msr	BASEPRI, r3
 8021628:	f3bf 8f6f 	isb	sy
 802162c:	f3bf 8f4f 	dsb	sy
 8021630:	613b      	str	r3, [r7, #16]
}
 8021632:	bf00      	nop
 8021634:	bf00      	nop
 8021636:	e7fd      	b.n	8021634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8021638:	4b3e      	ldr	r3, [pc, #248]	@ (8021734 <xPortStartScheduler+0x124>)
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	4a3f      	ldr	r2, [pc, #252]	@ (802173c <xPortStartScheduler+0x12c>)
 802163e:	4293      	cmp	r3, r2
 8021640:	d10b      	bne.n	802165a <xPortStartScheduler+0x4a>
	__asm volatile
 8021642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021646:	f383 8811 	msr	BASEPRI, r3
 802164a:	f3bf 8f6f 	isb	sy
 802164e:	f3bf 8f4f 	dsb	sy
 8021652:	60fb      	str	r3, [r7, #12]
}
 8021654:	bf00      	nop
 8021656:	bf00      	nop
 8021658:	e7fd      	b.n	8021656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802165a:	4b39      	ldr	r3, [pc, #228]	@ (8021740 <xPortStartScheduler+0x130>)
 802165c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802165e:	697b      	ldr	r3, [r7, #20]
 8021660:	781b      	ldrb	r3, [r3, #0]
 8021662:	b2db      	uxtb	r3, r3
 8021664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8021666:	697b      	ldr	r3, [r7, #20]
 8021668:	22ff      	movs	r2, #255	@ 0xff
 802166a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802166c:	697b      	ldr	r3, [r7, #20]
 802166e:	781b      	ldrb	r3, [r3, #0]
 8021670:	b2db      	uxtb	r3, r3
 8021672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8021674:	78fb      	ldrb	r3, [r7, #3]
 8021676:	b2db      	uxtb	r3, r3
 8021678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 802167c:	b2da      	uxtb	r2, r3
 802167e:	4b31      	ldr	r3, [pc, #196]	@ (8021744 <xPortStartScheduler+0x134>)
 8021680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8021682:	4b31      	ldr	r3, [pc, #196]	@ (8021748 <xPortStartScheduler+0x138>)
 8021684:	2207      	movs	r2, #7
 8021686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8021688:	e009      	b.n	802169e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 802168a:	4b2f      	ldr	r3, [pc, #188]	@ (8021748 <xPortStartScheduler+0x138>)
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	3b01      	subs	r3, #1
 8021690:	4a2d      	ldr	r2, [pc, #180]	@ (8021748 <xPortStartScheduler+0x138>)
 8021692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8021694:	78fb      	ldrb	r3, [r7, #3]
 8021696:	b2db      	uxtb	r3, r3
 8021698:	005b      	lsls	r3, r3, #1
 802169a:	b2db      	uxtb	r3, r3
 802169c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802169e:	78fb      	ldrb	r3, [r7, #3]
 80216a0:	b2db      	uxtb	r3, r3
 80216a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80216a6:	2b80      	cmp	r3, #128	@ 0x80
 80216a8:	d0ef      	beq.n	802168a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80216aa:	4b27      	ldr	r3, [pc, #156]	@ (8021748 <xPortStartScheduler+0x138>)
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	f1c3 0307 	rsb	r3, r3, #7
 80216b2:	2b04      	cmp	r3, #4
 80216b4:	d00b      	beq.n	80216ce <xPortStartScheduler+0xbe>
	__asm volatile
 80216b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80216ba:	f383 8811 	msr	BASEPRI, r3
 80216be:	f3bf 8f6f 	isb	sy
 80216c2:	f3bf 8f4f 	dsb	sy
 80216c6:	60bb      	str	r3, [r7, #8]
}
 80216c8:	bf00      	nop
 80216ca:	bf00      	nop
 80216cc:	e7fd      	b.n	80216ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80216ce:	4b1e      	ldr	r3, [pc, #120]	@ (8021748 <xPortStartScheduler+0x138>)
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	021b      	lsls	r3, r3, #8
 80216d4:	4a1c      	ldr	r2, [pc, #112]	@ (8021748 <xPortStartScheduler+0x138>)
 80216d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80216d8:	4b1b      	ldr	r3, [pc, #108]	@ (8021748 <xPortStartScheduler+0x138>)
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80216e0:	4a19      	ldr	r2, [pc, #100]	@ (8021748 <xPortStartScheduler+0x138>)
 80216e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	b2da      	uxtb	r2, r3
 80216e8:	697b      	ldr	r3, [r7, #20]
 80216ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80216ec:	4b17      	ldr	r3, [pc, #92]	@ (802174c <xPortStartScheduler+0x13c>)
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	4a16      	ldr	r2, [pc, #88]	@ (802174c <xPortStartScheduler+0x13c>)
 80216f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80216f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80216f8:	4b14      	ldr	r3, [pc, #80]	@ (802174c <xPortStartScheduler+0x13c>)
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	4a13      	ldr	r2, [pc, #76]	@ (802174c <xPortStartScheduler+0x13c>)
 80216fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8021702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8021704:	f000 f8da 	bl	80218bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8021708:	4b11      	ldr	r3, [pc, #68]	@ (8021750 <xPortStartScheduler+0x140>)
 802170a:	2200      	movs	r2, #0
 802170c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802170e:	f000 f8f9 	bl	8021904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8021712:	4b10      	ldr	r3, [pc, #64]	@ (8021754 <xPortStartScheduler+0x144>)
 8021714:	681b      	ldr	r3, [r3, #0]
 8021716:	4a0f      	ldr	r2, [pc, #60]	@ (8021754 <xPortStartScheduler+0x144>)
 8021718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 802171c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802171e:	f7ff ff63 	bl	80215e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8021722:	f001 fa0f 	bl	8022b44 <vTaskSwitchContext>
	prvTaskExitError();
 8021726:	f7ff ff1d 	bl	8021564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802172a:	2300      	movs	r3, #0
}
 802172c:	4618      	mov	r0, r3
 802172e:	3718      	adds	r7, #24
 8021730:	46bd      	mov	sp, r7
 8021732:	bd80      	pop	{r7, pc}
 8021734:	e000ed00 	.word	0xe000ed00
 8021738:	410fc271 	.word	0x410fc271
 802173c:	410fc270 	.word	0x410fc270
 8021740:	e000e400 	.word	0xe000e400
 8021744:	24008348 	.word	0x24008348
 8021748:	2400834c 	.word	0x2400834c
 802174c:	e000ed20 	.word	0xe000ed20
 8021750:	240007a0 	.word	0x240007a0
 8021754:	e000ef34 	.word	0xe000ef34

08021758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8021758:	b480      	push	{r7}
 802175a:	b083      	sub	sp, #12
 802175c:	af00      	add	r7, sp, #0
	__asm volatile
 802175e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021762:	f383 8811 	msr	BASEPRI, r3
 8021766:	f3bf 8f6f 	isb	sy
 802176a:	f3bf 8f4f 	dsb	sy
 802176e:	607b      	str	r3, [r7, #4]
}
 8021770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8021772:	4b10      	ldr	r3, [pc, #64]	@ (80217b4 <vPortEnterCritical+0x5c>)
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	3301      	adds	r3, #1
 8021778:	4a0e      	ldr	r2, [pc, #56]	@ (80217b4 <vPortEnterCritical+0x5c>)
 802177a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802177c:	4b0d      	ldr	r3, [pc, #52]	@ (80217b4 <vPortEnterCritical+0x5c>)
 802177e:	681b      	ldr	r3, [r3, #0]
 8021780:	2b01      	cmp	r3, #1
 8021782:	d110      	bne.n	80217a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8021784:	4b0c      	ldr	r3, [pc, #48]	@ (80217b8 <vPortEnterCritical+0x60>)
 8021786:	681b      	ldr	r3, [r3, #0]
 8021788:	b2db      	uxtb	r3, r3
 802178a:	2b00      	cmp	r3, #0
 802178c:	d00b      	beq.n	80217a6 <vPortEnterCritical+0x4e>
	__asm volatile
 802178e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021792:	f383 8811 	msr	BASEPRI, r3
 8021796:	f3bf 8f6f 	isb	sy
 802179a:	f3bf 8f4f 	dsb	sy
 802179e:	603b      	str	r3, [r7, #0]
}
 80217a0:	bf00      	nop
 80217a2:	bf00      	nop
 80217a4:	e7fd      	b.n	80217a2 <vPortEnterCritical+0x4a>
	}
}
 80217a6:	bf00      	nop
 80217a8:	370c      	adds	r7, #12
 80217aa:	46bd      	mov	sp, r7
 80217ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b0:	4770      	bx	lr
 80217b2:	bf00      	nop
 80217b4:	240007a0 	.word	0x240007a0
 80217b8:	e000ed04 	.word	0xe000ed04

080217bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80217bc:	b480      	push	{r7}
 80217be:	b083      	sub	sp, #12
 80217c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80217c2:	4b12      	ldr	r3, [pc, #72]	@ (802180c <vPortExitCritical+0x50>)
 80217c4:	681b      	ldr	r3, [r3, #0]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d10b      	bne.n	80217e2 <vPortExitCritical+0x26>
	__asm volatile
 80217ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80217ce:	f383 8811 	msr	BASEPRI, r3
 80217d2:	f3bf 8f6f 	isb	sy
 80217d6:	f3bf 8f4f 	dsb	sy
 80217da:	607b      	str	r3, [r7, #4]
}
 80217dc:	bf00      	nop
 80217de:	bf00      	nop
 80217e0:	e7fd      	b.n	80217de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80217e2:	4b0a      	ldr	r3, [pc, #40]	@ (802180c <vPortExitCritical+0x50>)
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	3b01      	subs	r3, #1
 80217e8:	4a08      	ldr	r2, [pc, #32]	@ (802180c <vPortExitCritical+0x50>)
 80217ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80217ec:	4b07      	ldr	r3, [pc, #28]	@ (802180c <vPortExitCritical+0x50>)
 80217ee:	681b      	ldr	r3, [r3, #0]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d105      	bne.n	8021800 <vPortExitCritical+0x44>
 80217f4:	2300      	movs	r3, #0
 80217f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80217f8:	683b      	ldr	r3, [r7, #0]
 80217fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80217fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8021800:	bf00      	nop
 8021802:	370c      	adds	r7, #12
 8021804:	46bd      	mov	sp, r7
 8021806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802180a:	4770      	bx	lr
 802180c:	240007a0 	.word	0x240007a0

08021810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8021810:	f3ef 8009 	mrs	r0, PSP
 8021814:	f3bf 8f6f 	isb	sy
 8021818:	4b15      	ldr	r3, [pc, #84]	@ (8021870 <pxCurrentTCBConst>)
 802181a:	681a      	ldr	r2, [r3, #0]
 802181c:	f01e 0f10 	tst.w	lr, #16
 8021820:	bf08      	it	eq
 8021822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8021826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802182a:	6010      	str	r0, [r2, #0]
 802182c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8021830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8021834:	f380 8811 	msr	BASEPRI, r0
 8021838:	f3bf 8f4f 	dsb	sy
 802183c:	f3bf 8f6f 	isb	sy
 8021840:	f001 f980 	bl	8022b44 <vTaskSwitchContext>
 8021844:	f04f 0000 	mov.w	r0, #0
 8021848:	f380 8811 	msr	BASEPRI, r0
 802184c:	bc09      	pop	{r0, r3}
 802184e:	6819      	ldr	r1, [r3, #0]
 8021850:	6808      	ldr	r0, [r1, #0]
 8021852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021856:	f01e 0f10 	tst.w	lr, #16
 802185a:	bf08      	it	eq
 802185c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8021860:	f380 8809 	msr	PSP, r0
 8021864:	f3bf 8f6f 	isb	sy
 8021868:	4770      	bx	lr
 802186a:	bf00      	nop
 802186c:	f3af 8000 	nop.w

08021870 <pxCurrentTCBConst>:
 8021870:	24008390 	.word	0x24008390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8021874:	bf00      	nop
 8021876:	bf00      	nop

08021878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8021878:	b580      	push	{r7, lr}
 802187a:	b082      	sub	sp, #8
 802187c:	af00      	add	r7, sp, #0
	__asm volatile
 802187e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021882:	f383 8811 	msr	BASEPRI, r3
 8021886:	f3bf 8f6f 	isb	sy
 802188a:	f3bf 8f4f 	dsb	sy
 802188e:	607b      	str	r3, [r7, #4]
}
 8021890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8021892:	f001 f89d 	bl	80229d0 <xTaskIncrementTick>
 8021896:	4603      	mov	r3, r0
 8021898:	2b00      	cmp	r3, #0
 802189a:	d003      	beq.n	80218a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802189c:	4b06      	ldr	r3, [pc, #24]	@ (80218b8 <xPortSysTickHandler+0x40>)
 802189e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80218a2:	601a      	str	r2, [r3, #0]
 80218a4:	2300      	movs	r3, #0
 80218a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80218a8:	683b      	ldr	r3, [r7, #0]
 80218aa:	f383 8811 	msr	BASEPRI, r3
}
 80218ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80218b0:	bf00      	nop
 80218b2:	3708      	adds	r7, #8
 80218b4:	46bd      	mov	sp, r7
 80218b6:	bd80      	pop	{r7, pc}
 80218b8:	e000ed04 	.word	0xe000ed04

080218bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80218bc:	b480      	push	{r7}
 80218be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80218c0:	4b0b      	ldr	r3, [pc, #44]	@ (80218f0 <vPortSetupTimerInterrupt+0x34>)
 80218c2:	2200      	movs	r2, #0
 80218c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80218c6:	4b0b      	ldr	r3, [pc, #44]	@ (80218f4 <vPortSetupTimerInterrupt+0x38>)
 80218c8:	2200      	movs	r2, #0
 80218ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80218cc:	4b0a      	ldr	r3, [pc, #40]	@ (80218f8 <vPortSetupTimerInterrupt+0x3c>)
 80218ce:	681b      	ldr	r3, [r3, #0]
 80218d0:	4a0a      	ldr	r2, [pc, #40]	@ (80218fc <vPortSetupTimerInterrupt+0x40>)
 80218d2:	fba2 2303 	umull	r2, r3, r2, r3
 80218d6:	099b      	lsrs	r3, r3, #6
 80218d8:	4a09      	ldr	r2, [pc, #36]	@ (8021900 <vPortSetupTimerInterrupt+0x44>)
 80218da:	3b01      	subs	r3, #1
 80218dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80218de:	4b04      	ldr	r3, [pc, #16]	@ (80218f0 <vPortSetupTimerInterrupt+0x34>)
 80218e0:	2207      	movs	r2, #7
 80218e2:	601a      	str	r2, [r3, #0]
}
 80218e4:	bf00      	nop
 80218e6:	46bd      	mov	sp, r7
 80218e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ec:	4770      	bx	lr
 80218ee:	bf00      	nop
 80218f0:	e000e010 	.word	0xe000e010
 80218f4:	e000e018 	.word	0xe000e018
 80218f8:	24000000 	.word	0x24000000
 80218fc:	10624dd3 	.word	0x10624dd3
 8021900:	e000e014 	.word	0xe000e014

08021904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8021904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8021914 <vPortEnableVFP+0x10>
 8021908:	6801      	ldr	r1, [r0, #0]
 802190a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802190e:	6001      	str	r1, [r0, #0]
 8021910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8021912:	bf00      	nop
 8021914:	e000ed88 	.word	0xe000ed88

08021918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8021918:	b480      	push	{r7}
 802191a:	b085      	sub	sp, #20
 802191c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802191e:	f3ef 8305 	mrs	r3, IPSR
 8021922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	2b0f      	cmp	r3, #15
 8021928:	d915      	bls.n	8021956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802192a:	4a18      	ldr	r2, [pc, #96]	@ (802198c <vPortValidateInterruptPriority+0x74>)
 802192c:	68fb      	ldr	r3, [r7, #12]
 802192e:	4413      	add	r3, r2
 8021930:	781b      	ldrb	r3, [r3, #0]
 8021932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8021934:	4b16      	ldr	r3, [pc, #88]	@ (8021990 <vPortValidateInterruptPriority+0x78>)
 8021936:	781b      	ldrb	r3, [r3, #0]
 8021938:	7afa      	ldrb	r2, [r7, #11]
 802193a:	429a      	cmp	r2, r3
 802193c:	d20b      	bcs.n	8021956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 802193e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021942:	f383 8811 	msr	BASEPRI, r3
 8021946:	f3bf 8f6f 	isb	sy
 802194a:	f3bf 8f4f 	dsb	sy
 802194e:	607b      	str	r3, [r7, #4]
}
 8021950:	bf00      	nop
 8021952:	bf00      	nop
 8021954:	e7fd      	b.n	8021952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8021956:	4b0f      	ldr	r3, [pc, #60]	@ (8021994 <vPortValidateInterruptPriority+0x7c>)
 8021958:	681b      	ldr	r3, [r3, #0]
 802195a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 802195e:	4b0e      	ldr	r3, [pc, #56]	@ (8021998 <vPortValidateInterruptPriority+0x80>)
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	429a      	cmp	r2, r3
 8021964:	d90b      	bls.n	802197e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8021966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802196a:	f383 8811 	msr	BASEPRI, r3
 802196e:	f3bf 8f6f 	isb	sy
 8021972:	f3bf 8f4f 	dsb	sy
 8021976:	603b      	str	r3, [r7, #0]
}
 8021978:	bf00      	nop
 802197a:	bf00      	nop
 802197c:	e7fd      	b.n	802197a <vPortValidateInterruptPriority+0x62>
	}
 802197e:	bf00      	nop
 8021980:	3714      	adds	r7, #20
 8021982:	46bd      	mov	sp, r7
 8021984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021988:	4770      	bx	lr
 802198a:	bf00      	nop
 802198c:	e000e3f0 	.word	0xe000e3f0
 8021990:	24008348 	.word	0x24008348
 8021994:	e000ed0c 	.word	0xe000ed0c
 8021998:	2400834c 	.word	0x2400834c

0802199c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 802199c:	b580      	push	{r7, lr}
 802199e:	b084      	sub	sp, #16
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	6078      	str	r0, [r7, #4]
 80219a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80219a6:	687b      	ldr	r3, [r7, #4]
 80219a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80219aa:	68fb      	ldr	r3, [r7, #12]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d10b      	bne.n	80219c8 <xQueueGenericReset+0x2c>
	__asm volatile
 80219b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80219b4:	f383 8811 	msr	BASEPRI, r3
 80219b8:	f3bf 8f6f 	isb	sy
 80219bc:	f3bf 8f4f 	dsb	sy
 80219c0:	60bb      	str	r3, [r7, #8]
}
 80219c2:	bf00      	nop
 80219c4:	bf00      	nop
 80219c6:	e7fd      	b.n	80219c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80219c8:	f7ff fec6 	bl	8021758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80219cc:	68fb      	ldr	r3, [r7, #12]
 80219ce:	681a      	ldr	r2, [r3, #0]
 80219d0:	68fb      	ldr	r3, [r7, #12]
 80219d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80219d4:	68f9      	ldr	r1, [r7, #12]
 80219d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80219d8:	fb01 f303 	mul.w	r3, r1, r3
 80219dc:	441a      	add	r2, r3
 80219de:	68fb      	ldr	r3, [r7, #12]
 80219e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80219e2:	68fb      	ldr	r3, [r7, #12]
 80219e4:	2200      	movs	r2, #0
 80219e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80219e8:	68fb      	ldr	r3, [r7, #12]
 80219ea:	681a      	ldr	r2, [r3, #0]
 80219ec:	68fb      	ldr	r3, [r7, #12]
 80219ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	681a      	ldr	r2, [r3, #0]
 80219f4:	68fb      	ldr	r3, [r7, #12]
 80219f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80219f8:	3b01      	subs	r3, #1
 80219fa:	68f9      	ldr	r1, [r7, #12]
 80219fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80219fe:	fb01 f303 	mul.w	r3, r1, r3
 8021a02:	441a      	add	r2, r3
 8021a04:	68fb      	ldr	r3, [r7, #12]
 8021a06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	22ff      	movs	r2, #255	@ 0xff
 8021a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8021a10:	68fb      	ldr	r3, [r7, #12]
 8021a12:	22ff      	movs	r2, #255	@ 0xff
 8021a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8021a18:	683b      	ldr	r3, [r7, #0]
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d114      	bne.n	8021a48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021a1e:	68fb      	ldr	r3, [r7, #12]
 8021a20:	691b      	ldr	r3, [r3, #16]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d01a      	beq.n	8021a5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021a26:	68fb      	ldr	r3, [r7, #12]
 8021a28:	3310      	adds	r3, #16
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	f001 f942 	bl	8022cb4 <xTaskRemoveFromEventList>
 8021a30:	4603      	mov	r3, r0
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	d012      	beq.n	8021a5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8021a36:	4b0d      	ldr	r3, [pc, #52]	@ (8021a6c <xQueueGenericReset+0xd0>)
 8021a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021a3c:	601a      	str	r2, [r3, #0]
 8021a3e:	f3bf 8f4f 	dsb	sy
 8021a42:	f3bf 8f6f 	isb	sy
 8021a46:	e009      	b.n	8021a5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	3310      	adds	r3, #16
 8021a4c:	4618      	mov	r0, r3
 8021a4e:	f7ff fca1 	bl	8021394 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8021a52:	68fb      	ldr	r3, [r7, #12]
 8021a54:	3324      	adds	r3, #36	@ 0x24
 8021a56:	4618      	mov	r0, r3
 8021a58:	f7ff fc9c 	bl	8021394 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8021a5c:	f7ff feae 	bl	80217bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8021a60:	2301      	movs	r3, #1
}
 8021a62:	4618      	mov	r0, r3
 8021a64:	3710      	adds	r7, #16
 8021a66:	46bd      	mov	sp, r7
 8021a68:	bd80      	pop	{r7, pc}
 8021a6a:	bf00      	nop
 8021a6c:	e000ed04 	.word	0xe000ed04

08021a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8021a70:	b580      	push	{r7, lr}
 8021a72:	b08e      	sub	sp, #56	@ 0x38
 8021a74:	af02      	add	r7, sp, #8
 8021a76:	60f8      	str	r0, [r7, #12]
 8021a78:	60b9      	str	r1, [r7, #8]
 8021a7a:	607a      	str	r2, [r7, #4]
 8021a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8021a7e:	68fb      	ldr	r3, [r7, #12]
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d10b      	bne.n	8021a9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8021a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021a88:	f383 8811 	msr	BASEPRI, r3
 8021a8c:	f3bf 8f6f 	isb	sy
 8021a90:	f3bf 8f4f 	dsb	sy
 8021a94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8021a96:	bf00      	nop
 8021a98:	bf00      	nop
 8021a9a:	e7fd      	b.n	8021a98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8021a9c:	683b      	ldr	r3, [r7, #0]
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d10b      	bne.n	8021aba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8021aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021aa6:	f383 8811 	msr	BASEPRI, r3
 8021aaa:	f3bf 8f6f 	isb	sy
 8021aae:	f3bf 8f4f 	dsb	sy
 8021ab2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8021ab4:	bf00      	nop
 8021ab6:	bf00      	nop
 8021ab8:	e7fd      	b.n	8021ab6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d002      	beq.n	8021ac6 <xQueueGenericCreateStatic+0x56>
 8021ac0:	68bb      	ldr	r3, [r7, #8]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d001      	beq.n	8021aca <xQueueGenericCreateStatic+0x5a>
 8021ac6:	2301      	movs	r3, #1
 8021ac8:	e000      	b.n	8021acc <xQueueGenericCreateStatic+0x5c>
 8021aca:	2300      	movs	r3, #0
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d10b      	bne.n	8021ae8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8021ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021ad4:	f383 8811 	msr	BASEPRI, r3
 8021ad8:	f3bf 8f6f 	isb	sy
 8021adc:	f3bf 8f4f 	dsb	sy
 8021ae0:	623b      	str	r3, [r7, #32]
}
 8021ae2:	bf00      	nop
 8021ae4:	bf00      	nop
 8021ae6:	e7fd      	b.n	8021ae4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d102      	bne.n	8021af4 <xQueueGenericCreateStatic+0x84>
 8021aee:	68bb      	ldr	r3, [r7, #8]
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d101      	bne.n	8021af8 <xQueueGenericCreateStatic+0x88>
 8021af4:	2301      	movs	r3, #1
 8021af6:	e000      	b.n	8021afa <xQueueGenericCreateStatic+0x8a>
 8021af8:	2300      	movs	r3, #0
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d10b      	bne.n	8021b16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8021afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021b02:	f383 8811 	msr	BASEPRI, r3
 8021b06:	f3bf 8f6f 	isb	sy
 8021b0a:	f3bf 8f4f 	dsb	sy
 8021b0e:	61fb      	str	r3, [r7, #28]
}
 8021b10:	bf00      	nop
 8021b12:	bf00      	nop
 8021b14:	e7fd      	b.n	8021b12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8021b16:	2350      	movs	r3, #80	@ 0x50
 8021b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8021b1a:	697b      	ldr	r3, [r7, #20]
 8021b1c:	2b50      	cmp	r3, #80	@ 0x50
 8021b1e:	d00b      	beq.n	8021b38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8021b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021b24:	f383 8811 	msr	BASEPRI, r3
 8021b28:	f3bf 8f6f 	isb	sy
 8021b2c:	f3bf 8f4f 	dsb	sy
 8021b30:	61bb      	str	r3, [r7, #24]
}
 8021b32:	bf00      	nop
 8021b34:	bf00      	nop
 8021b36:	e7fd      	b.n	8021b34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8021b38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021b3a:	683b      	ldr	r3, [r7, #0]
 8021b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8021b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	d00d      	beq.n	8021b60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8021b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b46:	2201      	movs	r2, #1
 8021b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8021b4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8021b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b52:	9300      	str	r3, [sp, #0]
 8021b54:	4613      	mov	r3, r2
 8021b56:	687a      	ldr	r2, [r7, #4]
 8021b58:	68b9      	ldr	r1, [r7, #8]
 8021b5a:	68f8      	ldr	r0, [r7, #12]
 8021b5c:	f000 f805 	bl	8021b6a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8021b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8021b62:	4618      	mov	r0, r3
 8021b64:	3730      	adds	r7, #48	@ 0x30
 8021b66:	46bd      	mov	sp, r7
 8021b68:	bd80      	pop	{r7, pc}

08021b6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8021b6a:	b580      	push	{r7, lr}
 8021b6c:	b084      	sub	sp, #16
 8021b6e:	af00      	add	r7, sp, #0
 8021b70:	60f8      	str	r0, [r7, #12]
 8021b72:	60b9      	str	r1, [r7, #8]
 8021b74:	607a      	str	r2, [r7, #4]
 8021b76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8021b78:	68bb      	ldr	r3, [r7, #8]
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d103      	bne.n	8021b86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8021b7e:	69bb      	ldr	r3, [r7, #24]
 8021b80:	69ba      	ldr	r2, [r7, #24]
 8021b82:	601a      	str	r2, [r3, #0]
 8021b84:	e002      	b.n	8021b8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8021b86:	69bb      	ldr	r3, [r7, #24]
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8021b8c:	69bb      	ldr	r3, [r7, #24]
 8021b8e:	68fa      	ldr	r2, [r7, #12]
 8021b90:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8021b92:	69bb      	ldr	r3, [r7, #24]
 8021b94:	68ba      	ldr	r2, [r7, #8]
 8021b96:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8021b98:	2101      	movs	r1, #1
 8021b9a:	69b8      	ldr	r0, [r7, #24]
 8021b9c:	f7ff fefe 	bl	802199c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8021ba0:	69bb      	ldr	r3, [r7, #24]
 8021ba2:	78fa      	ldrb	r2, [r7, #3]
 8021ba4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8021ba8:	bf00      	nop
 8021baa:	3710      	adds	r7, #16
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd80      	pop	{r7, pc}

08021bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8021bb0:	b580      	push	{r7, lr}
 8021bb2:	b08e      	sub	sp, #56	@ 0x38
 8021bb4:	af00      	add	r7, sp, #0
 8021bb6:	60f8      	str	r0, [r7, #12]
 8021bb8:	60b9      	str	r1, [r7, #8]
 8021bba:	607a      	str	r2, [r7, #4]
 8021bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8021bbe:	2300      	movs	r3, #0
 8021bc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8021bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d10b      	bne.n	8021be4 <xQueueGenericSend+0x34>
	__asm volatile
 8021bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021bd0:	f383 8811 	msr	BASEPRI, r3
 8021bd4:	f3bf 8f6f 	isb	sy
 8021bd8:	f3bf 8f4f 	dsb	sy
 8021bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8021bde:	bf00      	nop
 8021be0:	bf00      	nop
 8021be2:	e7fd      	b.n	8021be0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d103      	bne.n	8021bf2 <xQueueGenericSend+0x42>
 8021bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	d101      	bne.n	8021bf6 <xQueueGenericSend+0x46>
 8021bf2:	2301      	movs	r3, #1
 8021bf4:	e000      	b.n	8021bf8 <xQueueGenericSend+0x48>
 8021bf6:	2300      	movs	r3, #0
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	d10b      	bne.n	8021c14 <xQueueGenericSend+0x64>
	__asm volatile
 8021bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c00:	f383 8811 	msr	BASEPRI, r3
 8021c04:	f3bf 8f6f 	isb	sy
 8021c08:	f3bf 8f4f 	dsb	sy
 8021c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8021c0e:	bf00      	nop
 8021c10:	bf00      	nop
 8021c12:	e7fd      	b.n	8021c10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8021c14:	683b      	ldr	r3, [r7, #0]
 8021c16:	2b02      	cmp	r3, #2
 8021c18:	d103      	bne.n	8021c22 <xQueueGenericSend+0x72>
 8021c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021c1e:	2b01      	cmp	r3, #1
 8021c20:	d101      	bne.n	8021c26 <xQueueGenericSend+0x76>
 8021c22:	2301      	movs	r3, #1
 8021c24:	e000      	b.n	8021c28 <xQueueGenericSend+0x78>
 8021c26:	2300      	movs	r3, #0
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d10b      	bne.n	8021c44 <xQueueGenericSend+0x94>
	__asm volatile
 8021c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c30:	f383 8811 	msr	BASEPRI, r3
 8021c34:	f3bf 8f6f 	isb	sy
 8021c38:	f3bf 8f4f 	dsb	sy
 8021c3c:	623b      	str	r3, [r7, #32]
}
 8021c3e:	bf00      	nop
 8021c40:	bf00      	nop
 8021c42:	e7fd      	b.n	8021c40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021c44:	f001 f9fc 	bl	8023040 <xTaskGetSchedulerState>
 8021c48:	4603      	mov	r3, r0
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d102      	bne.n	8021c54 <xQueueGenericSend+0xa4>
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d101      	bne.n	8021c58 <xQueueGenericSend+0xa8>
 8021c54:	2301      	movs	r3, #1
 8021c56:	e000      	b.n	8021c5a <xQueueGenericSend+0xaa>
 8021c58:	2300      	movs	r3, #0
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	d10b      	bne.n	8021c76 <xQueueGenericSend+0xc6>
	__asm volatile
 8021c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c62:	f383 8811 	msr	BASEPRI, r3
 8021c66:	f3bf 8f6f 	isb	sy
 8021c6a:	f3bf 8f4f 	dsb	sy
 8021c6e:	61fb      	str	r3, [r7, #28]
}
 8021c70:	bf00      	nop
 8021c72:	bf00      	nop
 8021c74:	e7fd      	b.n	8021c72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021c76:	f7ff fd6f 	bl	8021758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8021c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021c82:	429a      	cmp	r2, r3
 8021c84:	d302      	bcc.n	8021c8c <xQueueGenericSend+0xdc>
 8021c86:	683b      	ldr	r3, [r7, #0]
 8021c88:	2b02      	cmp	r3, #2
 8021c8a:	d129      	bne.n	8021ce0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8021c8c:	683a      	ldr	r2, [r7, #0]
 8021c8e:	68b9      	ldr	r1, [r7, #8]
 8021c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021c92:	f000 fa0f 	bl	80220b4 <prvCopyDataToQueue>
 8021c96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d010      	beq.n	8021cc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021ca2:	3324      	adds	r3, #36	@ 0x24
 8021ca4:	4618      	mov	r0, r3
 8021ca6:	f001 f805 	bl	8022cb4 <xTaskRemoveFromEventList>
 8021caa:	4603      	mov	r3, r0
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d013      	beq.n	8021cd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8021cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8021db0 <xQueueGenericSend+0x200>)
 8021cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021cb6:	601a      	str	r2, [r3, #0]
 8021cb8:	f3bf 8f4f 	dsb	sy
 8021cbc:	f3bf 8f6f 	isb	sy
 8021cc0:	e00a      	b.n	8021cd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8021cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d007      	beq.n	8021cd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8021cc8:	4b39      	ldr	r3, [pc, #228]	@ (8021db0 <xQueueGenericSend+0x200>)
 8021cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021cce:	601a      	str	r2, [r3, #0]
 8021cd0:	f3bf 8f4f 	dsb	sy
 8021cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8021cd8:	f7ff fd70 	bl	80217bc <vPortExitCritical>
				return pdPASS;
 8021cdc:	2301      	movs	r3, #1
 8021cde:	e063      	b.n	8021da8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d103      	bne.n	8021cee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021ce6:	f7ff fd69 	bl	80217bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8021cea:	2300      	movs	r3, #0
 8021cec:	e05c      	b.n	8021da8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d106      	bne.n	8021d02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021cf4:	f107 0314 	add.w	r3, r7, #20
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	f001 f83f 	bl	8022d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021cfe:	2301      	movs	r3, #1
 8021d00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021d02:	f7ff fd5b 	bl	80217bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021d06:	f000 fda7 	bl	8022858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021d0a:	f7ff fd25 	bl	8021758 <vPortEnterCritical>
 8021d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021d14:	b25b      	sxtb	r3, r3
 8021d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021d1a:	d103      	bne.n	8021d24 <xQueueGenericSend+0x174>
 8021d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d1e:	2200      	movs	r2, #0
 8021d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8021d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021d2a:	b25b      	sxtb	r3, r3
 8021d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021d30:	d103      	bne.n	8021d3a <xQueueGenericSend+0x18a>
 8021d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d34:	2200      	movs	r2, #0
 8021d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8021d3a:	f7ff fd3f 	bl	80217bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021d3e:	1d3a      	adds	r2, r7, #4
 8021d40:	f107 0314 	add.w	r3, r7, #20
 8021d44:	4611      	mov	r1, r2
 8021d46:	4618      	mov	r0, r3
 8021d48:	f001 f82e 	bl	8022da8 <xTaskCheckForTimeOut>
 8021d4c:	4603      	mov	r3, r0
 8021d4e:	2b00      	cmp	r3, #0
 8021d50:	d124      	bne.n	8021d9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8021d52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021d54:	f000 faa6 	bl	80222a4 <prvIsQueueFull>
 8021d58:	4603      	mov	r3, r0
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d018      	beq.n	8021d90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8021d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d60:	3310      	adds	r3, #16
 8021d62:	687a      	ldr	r2, [r7, #4]
 8021d64:	4611      	mov	r1, r2
 8021d66:	4618      	mov	r0, r3
 8021d68:	f000 ff52 	bl	8022c10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8021d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021d6e:	f000 fa31 	bl	80221d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8021d72:	f000 fd7f 	bl	8022874 <xTaskResumeAll>
 8021d76:	4603      	mov	r3, r0
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	f47f af7c 	bne.w	8021c76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8021d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8021db0 <xQueueGenericSend+0x200>)
 8021d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021d84:	601a      	str	r2, [r3, #0]
 8021d86:	f3bf 8f4f 	dsb	sy
 8021d8a:	f3bf 8f6f 	isb	sy
 8021d8e:	e772      	b.n	8021c76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8021d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021d92:	f000 fa1f 	bl	80221d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021d96:	f000 fd6d 	bl	8022874 <xTaskResumeAll>
 8021d9a:	e76c      	b.n	8021c76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8021d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021d9e:	f000 fa19 	bl	80221d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021da2:	f000 fd67 	bl	8022874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8021da6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8021da8:	4618      	mov	r0, r3
 8021daa:	3738      	adds	r7, #56	@ 0x38
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd80      	pop	{r7, pc}
 8021db0:	e000ed04 	.word	0xe000ed04

08021db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b090      	sub	sp, #64	@ 0x40
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	60f8      	str	r0, [r7, #12]
 8021dbc:	60b9      	str	r1, [r7, #8]
 8021dbe:	607a      	str	r2, [r7, #4]
 8021dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8021dc2:	68fb      	ldr	r3, [r7, #12]
 8021dc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8021dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d10b      	bne.n	8021de4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8021dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021dd0:	f383 8811 	msr	BASEPRI, r3
 8021dd4:	f3bf 8f6f 	isb	sy
 8021dd8:	f3bf 8f4f 	dsb	sy
 8021ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8021dde:	bf00      	nop
 8021de0:	bf00      	nop
 8021de2:	e7fd      	b.n	8021de0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021de4:	68bb      	ldr	r3, [r7, #8]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d103      	bne.n	8021df2 <xQueueGenericSendFromISR+0x3e>
 8021dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d101      	bne.n	8021df6 <xQueueGenericSendFromISR+0x42>
 8021df2:	2301      	movs	r3, #1
 8021df4:	e000      	b.n	8021df8 <xQueueGenericSendFromISR+0x44>
 8021df6:	2300      	movs	r3, #0
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	d10b      	bne.n	8021e14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8021dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021e00:	f383 8811 	msr	BASEPRI, r3
 8021e04:	f3bf 8f6f 	isb	sy
 8021e08:	f3bf 8f4f 	dsb	sy
 8021e0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8021e0e:	bf00      	nop
 8021e10:	bf00      	nop
 8021e12:	e7fd      	b.n	8021e10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8021e14:	683b      	ldr	r3, [r7, #0]
 8021e16:	2b02      	cmp	r3, #2
 8021e18:	d103      	bne.n	8021e22 <xQueueGenericSendFromISR+0x6e>
 8021e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021e1e:	2b01      	cmp	r3, #1
 8021e20:	d101      	bne.n	8021e26 <xQueueGenericSendFromISR+0x72>
 8021e22:	2301      	movs	r3, #1
 8021e24:	e000      	b.n	8021e28 <xQueueGenericSendFromISR+0x74>
 8021e26:	2300      	movs	r3, #0
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d10b      	bne.n	8021e44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8021e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021e30:	f383 8811 	msr	BASEPRI, r3
 8021e34:	f3bf 8f6f 	isb	sy
 8021e38:	f3bf 8f4f 	dsb	sy
 8021e3c:	623b      	str	r3, [r7, #32]
}
 8021e3e:	bf00      	nop
 8021e40:	bf00      	nop
 8021e42:	e7fd      	b.n	8021e40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021e44:	f7ff fd68 	bl	8021918 <vPortValidateInterruptPriority>
	__asm volatile
 8021e48:	f3ef 8211 	mrs	r2, BASEPRI
 8021e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021e50:	f383 8811 	msr	BASEPRI, r3
 8021e54:	f3bf 8f6f 	isb	sy
 8021e58:	f3bf 8f4f 	dsb	sy
 8021e5c:	61fa      	str	r2, [r7, #28]
 8021e5e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8021e60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021e62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8021e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021e6c:	429a      	cmp	r2, r3
 8021e6e:	d302      	bcc.n	8021e76 <xQueueGenericSendFromISR+0xc2>
 8021e70:	683b      	ldr	r3, [r7, #0]
 8021e72:	2b02      	cmp	r3, #2
 8021e74:	d12f      	bne.n	8021ed6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8021e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021e7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8021e86:	683a      	ldr	r2, [r7, #0]
 8021e88:	68b9      	ldr	r1, [r7, #8]
 8021e8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8021e8c:	f000 f912 	bl	80220b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8021e90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8021e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e98:	d112      	bne.n	8021ec0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d016      	beq.n	8021ed0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ea4:	3324      	adds	r3, #36	@ 0x24
 8021ea6:	4618      	mov	r0, r3
 8021ea8:	f000 ff04 	bl	8022cb4 <xTaskRemoveFromEventList>
 8021eac:	4603      	mov	r3, r0
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d00e      	beq.n	8021ed0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d00b      	beq.n	8021ed0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8021eb8:	687b      	ldr	r3, [r7, #4]
 8021eba:	2201      	movs	r2, #1
 8021ebc:	601a      	str	r2, [r3, #0]
 8021ebe:	e007      	b.n	8021ed0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8021ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021ec4:	3301      	adds	r3, #1
 8021ec6:	b2db      	uxtb	r3, r3
 8021ec8:	b25a      	sxtb	r2, r3
 8021eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8021ed0:	2301      	movs	r3, #1
 8021ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8021ed4:	e001      	b.n	8021eda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8021ed6:	2300      	movs	r3, #0
 8021ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021edc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8021ede:	697b      	ldr	r3, [r7, #20]
 8021ee0:	f383 8811 	msr	BASEPRI, r3
}
 8021ee4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8021ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8021ee8:	4618      	mov	r0, r3
 8021eea:	3740      	adds	r7, #64	@ 0x40
 8021eec:	46bd      	mov	sp, r7
 8021eee:	bd80      	pop	{r7, pc}

08021ef0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8021ef0:	b580      	push	{r7, lr}
 8021ef2:	b08c      	sub	sp, #48	@ 0x30
 8021ef4:	af00      	add	r7, sp, #0
 8021ef6:	60f8      	str	r0, [r7, #12]
 8021ef8:	60b9      	str	r1, [r7, #8]
 8021efa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021efc:	2300      	movs	r3, #0
 8021efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8021f00:	68fb      	ldr	r3, [r7, #12]
 8021f02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d10b      	bne.n	8021f22 <xQueueReceive+0x32>
	__asm volatile
 8021f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f0e:	f383 8811 	msr	BASEPRI, r3
 8021f12:	f3bf 8f6f 	isb	sy
 8021f16:	f3bf 8f4f 	dsb	sy
 8021f1a:	623b      	str	r3, [r7, #32]
}
 8021f1c:	bf00      	nop
 8021f1e:	bf00      	nop
 8021f20:	e7fd      	b.n	8021f1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021f22:	68bb      	ldr	r3, [r7, #8]
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d103      	bne.n	8021f30 <xQueueReceive+0x40>
 8021f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d101      	bne.n	8021f34 <xQueueReceive+0x44>
 8021f30:	2301      	movs	r3, #1
 8021f32:	e000      	b.n	8021f36 <xQueueReceive+0x46>
 8021f34:	2300      	movs	r3, #0
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d10b      	bne.n	8021f52 <xQueueReceive+0x62>
	__asm volatile
 8021f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f3e:	f383 8811 	msr	BASEPRI, r3
 8021f42:	f3bf 8f6f 	isb	sy
 8021f46:	f3bf 8f4f 	dsb	sy
 8021f4a:	61fb      	str	r3, [r7, #28]
}
 8021f4c:	bf00      	nop
 8021f4e:	bf00      	nop
 8021f50:	e7fd      	b.n	8021f4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021f52:	f001 f875 	bl	8023040 <xTaskGetSchedulerState>
 8021f56:	4603      	mov	r3, r0
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d102      	bne.n	8021f62 <xQueueReceive+0x72>
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	d101      	bne.n	8021f66 <xQueueReceive+0x76>
 8021f62:	2301      	movs	r3, #1
 8021f64:	e000      	b.n	8021f68 <xQueueReceive+0x78>
 8021f66:	2300      	movs	r3, #0
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	d10b      	bne.n	8021f84 <xQueueReceive+0x94>
	__asm volatile
 8021f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f70:	f383 8811 	msr	BASEPRI, r3
 8021f74:	f3bf 8f6f 	isb	sy
 8021f78:	f3bf 8f4f 	dsb	sy
 8021f7c:	61bb      	str	r3, [r7, #24]
}
 8021f7e:	bf00      	nop
 8021f80:	bf00      	nop
 8021f82:	e7fd      	b.n	8021f80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021f84:	f7ff fbe8 	bl	8021758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021f8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d01f      	beq.n	8021fd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021f94:	68b9      	ldr	r1, [r7, #8]
 8021f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021f98:	f000 f8f6 	bl	8022188 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f9e:	1e5a      	subs	r2, r3, #1
 8021fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021fa2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021fa6:	691b      	ldr	r3, [r3, #16]
 8021fa8:	2b00      	cmp	r3, #0
 8021faa:	d00f      	beq.n	8021fcc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021fae:	3310      	adds	r3, #16
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	f000 fe7f 	bl	8022cb4 <xTaskRemoveFromEventList>
 8021fb6:	4603      	mov	r3, r0
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	d007      	beq.n	8021fcc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8021fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80220b0 <xQueueReceive+0x1c0>)
 8021fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021fc2:	601a      	str	r2, [r3, #0]
 8021fc4:	f3bf 8f4f 	dsb	sy
 8021fc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8021fcc:	f7ff fbf6 	bl	80217bc <vPortExitCritical>
				return pdPASS;
 8021fd0:	2301      	movs	r3, #1
 8021fd2:	e069      	b.n	80220a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	2b00      	cmp	r3, #0
 8021fd8:	d103      	bne.n	8021fe2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021fda:	f7ff fbef 	bl	80217bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021fde:	2300      	movs	r3, #0
 8021fe0:	e062      	b.n	80220a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	d106      	bne.n	8021ff6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021fe8:	f107 0310 	add.w	r3, r7, #16
 8021fec:	4618      	mov	r0, r3
 8021fee:	f000 fec5 	bl	8022d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021ff2:	2301      	movs	r3, #1
 8021ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021ff6:	f7ff fbe1 	bl	80217bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021ffa:	f000 fc2d 	bl	8022858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021ffe:	f7ff fbab 	bl	8021758 <vPortEnterCritical>
 8022002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8022008:	b25b      	sxtb	r3, r3
 802200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802200e:	d103      	bne.n	8022018 <xQueueReceive+0x128>
 8022010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022012:	2200      	movs	r2, #0
 8022014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8022018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802201a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802201e:	b25b      	sxtb	r3, r3
 8022020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022024:	d103      	bne.n	802202e <xQueueReceive+0x13e>
 8022026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022028:	2200      	movs	r2, #0
 802202a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802202e:	f7ff fbc5 	bl	80217bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8022032:	1d3a      	adds	r2, r7, #4
 8022034:	f107 0310 	add.w	r3, r7, #16
 8022038:	4611      	mov	r1, r2
 802203a:	4618      	mov	r0, r3
 802203c:	f000 feb4 	bl	8022da8 <xTaskCheckForTimeOut>
 8022040:	4603      	mov	r3, r0
 8022042:	2b00      	cmp	r3, #0
 8022044:	d123      	bne.n	802208e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022048:	f000 f916 	bl	8022278 <prvIsQueueEmpty>
 802204c:	4603      	mov	r3, r0
 802204e:	2b00      	cmp	r3, #0
 8022050:	d017      	beq.n	8022082 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022054:	3324      	adds	r3, #36	@ 0x24
 8022056:	687a      	ldr	r2, [r7, #4]
 8022058:	4611      	mov	r1, r2
 802205a:	4618      	mov	r0, r3
 802205c:	f000 fdd8 	bl	8022c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8022060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022062:	f000 f8b7 	bl	80221d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022066:	f000 fc05 	bl	8022874 <xTaskResumeAll>
 802206a:	4603      	mov	r3, r0
 802206c:	2b00      	cmp	r3, #0
 802206e:	d189      	bne.n	8021f84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8022070:	4b0f      	ldr	r3, [pc, #60]	@ (80220b0 <xQueueReceive+0x1c0>)
 8022072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022076:	601a      	str	r2, [r3, #0]
 8022078:	f3bf 8f4f 	dsb	sy
 802207c:	f3bf 8f6f 	isb	sy
 8022080:	e780      	b.n	8021f84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8022082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022084:	f000 f8a6 	bl	80221d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022088:	f000 fbf4 	bl	8022874 <xTaskResumeAll>
 802208c:	e77a      	b.n	8021f84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802208e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022090:	f000 f8a0 	bl	80221d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8022094:	f000 fbee 	bl	8022874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802209a:	f000 f8ed 	bl	8022278 <prvIsQueueEmpty>
 802209e:	4603      	mov	r3, r0
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	f43f af6f 	beq.w	8021f84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80220a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80220a8:	4618      	mov	r0, r3
 80220aa:	3730      	adds	r7, #48	@ 0x30
 80220ac:	46bd      	mov	sp, r7
 80220ae:	bd80      	pop	{r7, pc}
 80220b0:	e000ed04 	.word	0xe000ed04

080220b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80220b4:	b580      	push	{r7, lr}
 80220b6:	b086      	sub	sp, #24
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	60f8      	str	r0, [r7, #12]
 80220bc:	60b9      	str	r1, [r7, #8]
 80220be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80220c0:	2300      	movs	r3, #0
 80220c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80220c4:	68fb      	ldr	r3, [r7, #12]
 80220c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80220c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	d10d      	bne.n	80220ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80220d2:	68fb      	ldr	r3, [r7, #12]
 80220d4:	681b      	ldr	r3, [r3, #0]
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d14d      	bne.n	8022176 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80220da:	68fb      	ldr	r3, [r7, #12]
 80220dc:	689b      	ldr	r3, [r3, #8]
 80220de:	4618      	mov	r0, r3
 80220e0:	f000 ffcc 	bl	802307c <xTaskPriorityDisinherit>
 80220e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	2200      	movs	r2, #0
 80220ea:	609a      	str	r2, [r3, #8]
 80220ec:	e043      	b.n	8022176 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d119      	bne.n	8022128 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80220f4:	68fb      	ldr	r3, [r7, #12]
 80220f6:	6858      	ldr	r0, [r3, #4]
 80220f8:	68fb      	ldr	r3, [r7, #12]
 80220fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80220fc:	461a      	mov	r2, r3
 80220fe:	68b9      	ldr	r1, [r7, #8]
 8022100:	f002 fff7 	bl	80250f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8022104:	68fb      	ldr	r3, [r7, #12]
 8022106:	685a      	ldr	r2, [r3, #4]
 8022108:	68fb      	ldr	r3, [r7, #12]
 802210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802210c:	441a      	add	r2, r3
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8022112:	68fb      	ldr	r3, [r7, #12]
 8022114:	685a      	ldr	r2, [r3, #4]
 8022116:	68fb      	ldr	r3, [r7, #12]
 8022118:	689b      	ldr	r3, [r3, #8]
 802211a:	429a      	cmp	r2, r3
 802211c:	d32b      	bcc.n	8022176 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	681a      	ldr	r2, [r3, #0]
 8022122:	68fb      	ldr	r3, [r7, #12]
 8022124:	605a      	str	r2, [r3, #4]
 8022126:	e026      	b.n	8022176 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8022128:	68fb      	ldr	r3, [r7, #12]
 802212a:	68d8      	ldr	r0, [r3, #12]
 802212c:	68fb      	ldr	r3, [r7, #12]
 802212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022130:	461a      	mov	r2, r3
 8022132:	68b9      	ldr	r1, [r7, #8]
 8022134:	f002 ffdd 	bl	80250f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	68da      	ldr	r2, [r3, #12]
 802213c:	68fb      	ldr	r3, [r7, #12]
 802213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022140:	425b      	negs	r3, r3
 8022142:	441a      	add	r2, r3
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8022148:	68fb      	ldr	r3, [r7, #12]
 802214a:	68da      	ldr	r2, [r3, #12]
 802214c:	68fb      	ldr	r3, [r7, #12]
 802214e:	681b      	ldr	r3, [r3, #0]
 8022150:	429a      	cmp	r2, r3
 8022152:	d207      	bcs.n	8022164 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8022154:	68fb      	ldr	r3, [r7, #12]
 8022156:	689a      	ldr	r2, [r3, #8]
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802215c:	425b      	negs	r3, r3
 802215e:	441a      	add	r2, r3
 8022160:	68fb      	ldr	r3, [r7, #12]
 8022162:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	2b02      	cmp	r3, #2
 8022168:	d105      	bne.n	8022176 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802216a:	693b      	ldr	r3, [r7, #16]
 802216c:	2b00      	cmp	r3, #0
 802216e:	d002      	beq.n	8022176 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8022170:	693b      	ldr	r3, [r7, #16]
 8022172:	3b01      	subs	r3, #1
 8022174:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8022176:	693b      	ldr	r3, [r7, #16]
 8022178:	1c5a      	adds	r2, r3, #1
 802217a:	68fb      	ldr	r3, [r7, #12]
 802217c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 802217e:	697b      	ldr	r3, [r7, #20]
}
 8022180:	4618      	mov	r0, r3
 8022182:	3718      	adds	r7, #24
 8022184:	46bd      	mov	sp, r7
 8022186:	bd80      	pop	{r7, pc}

08022188 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8022188:	b580      	push	{r7, lr}
 802218a:	b082      	sub	sp, #8
 802218c:	af00      	add	r7, sp, #0
 802218e:	6078      	str	r0, [r7, #4]
 8022190:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022196:	2b00      	cmp	r3, #0
 8022198:	d018      	beq.n	80221cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	68da      	ldr	r2, [r3, #12]
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80221a2:	441a      	add	r2, r3
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	68da      	ldr	r2, [r3, #12]
 80221ac:	687b      	ldr	r3, [r7, #4]
 80221ae:	689b      	ldr	r3, [r3, #8]
 80221b0:	429a      	cmp	r2, r3
 80221b2:	d303      	bcc.n	80221bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	681a      	ldr	r2, [r3, #0]
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	68d9      	ldr	r1, [r3, #12]
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80221c4:	461a      	mov	r2, r3
 80221c6:	6838      	ldr	r0, [r7, #0]
 80221c8:	f002 ff93 	bl	80250f2 <memcpy>
	}
}
 80221cc:	bf00      	nop
 80221ce:	3708      	adds	r7, #8
 80221d0:	46bd      	mov	sp, r7
 80221d2:	bd80      	pop	{r7, pc}

080221d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80221d4:	b580      	push	{r7, lr}
 80221d6:	b084      	sub	sp, #16
 80221d8:	af00      	add	r7, sp, #0
 80221da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80221dc:	f7ff fabc 	bl	8021758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80221e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80221e8:	e011      	b.n	802220e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80221ea:	687b      	ldr	r3, [r7, #4]
 80221ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d012      	beq.n	8022218 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	3324      	adds	r3, #36	@ 0x24
 80221f6:	4618      	mov	r0, r3
 80221f8:	f000 fd5c 	bl	8022cb4 <xTaskRemoveFromEventList>
 80221fc:	4603      	mov	r3, r0
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d001      	beq.n	8022206 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8022202:	f000 fe35 	bl	8022e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8022206:	7bfb      	ldrb	r3, [r7, #15]
 8022208:	3b01      	subs	r3, #1
 802220a:	b2db      	uxtb	r3, r3
 802220c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022212:	2b00      	cmp	r3, #0
 8022214:	dce9      	bgt.n	80221ea <prvUnlockQueue+0x16>
 8022216:	e000      	b.n	802221a <prvUnlockQueue+0x46>
					break;
 8022218:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802221a:	687b      	ldr	r3, [r7, #4]
 802221c:	22ff      	movs	r2, #255	@ 0xff
 802221e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8022222:	f7ff facb 	bl	80217bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8022226:	f7ff fa97 	bl	8021758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8022230:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8022232:	e011      	b.n	8022258 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	691b      	ldr	r3, [r3, #16]
 8022238:	2b00      	cmp	r3, #0
 802223a:	d012      	beq.n	8022262 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	3310      	adds	r3, #16
 8022240:	4618      	mov	r0, r3
 8022242:	f000 fd37 	bl	8022cb4 <xTaskRemoveFromEventList>
 8022246:	4603      	mov	r3, r0
 8022248:	2b00      	cmp	r3, #0
 802224a:	d001      	beq.n	8022250 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802224c:	f000 fe10 	bl	8022e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8022250:	7bbb      	ldrb	r3, [r7, #14]
 8022252:	3b01      	subs	r3, #1
 8022254:	b2db      	uxtb	r3, r3
 8022256:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8022258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802225c:	2b00      	cmp	r3, #0
 802225e:	dce9      	bgt.n	8022234 <prvUnlockQueue+0x60>
 8022260:	e000      	b.n	8022264 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8022262:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	22ff      	movs	r2, #255	@ 0xff
 8022268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 802226c:	f7ff faa6 	bl	80217bc <vPortExitCritical>
}
 8022270:	bf00      	nop
 8022272:	3710      	adds	r7, #16
 8022274:	46bd      	mov	sp, r7
 8022276:	bd80      	pop	{r7, pc}

08022278 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8022278:	b580      	push	{r7, lr}
 802227a:	b084      	sub	sp, #16
 802227c:	af00      	add	r7, sp, #0
 802227e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8022280:	f7ff fa6a 	bl	8021758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8022284:	687b      	ldr	r3, [r7, #4]
 8022286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022288:	2b00      	cmp	r3, #0
 802228a:	d102      	bne.n	8022292 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 802228c:	2301      	movs	r3, #1
 802228e:	60fb      	str	r3, [r7, #12]
 8022290:	e001      	b.n	8022296 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8022292:	2300      	movs	r3, #0
 8022294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8022296:	f7ff fa91 	bl	80217bc <vPortExitCritical>

	return xReturn;
 802229a:	68fb      	ldr	r3, [r7, #12]
}
 802229c:	4618      	mov	r0, r3
 802229e:	3710      	adds	r7, #16
 80222a0:	46bd      	mov	sp, r7
 80222a2:	bd80      	pop	{r7, pc}

080222a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80222a4:	b580      	push	{r7, lr}
 80222a6:	b084      	sub	sp, #16
 80222a8:	af00      	add	r7, sp, #0
 80222aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80222ac:	f7ff fa54 	bl	8021758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80222b0:	687b      	ldr	r3, [r7, #4]
 80222b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80222b8:	429a      	cmp	r2, r3
 80222ba:	d102      	bne.n	80222c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80222bc:	2301      	movs	r3, #1
 80222be:	60fb      	str	r3, [r7, #12]
 80222c0:	e001      	b.n	80222c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80222c2:	2300      	movs	r3, #0
 80222c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80222c6:	f7ff fa79 	bl	80217bc <vPortExitCritical>

	return xReturn;
 80222ca:	68fb      	ldr	r3, [r7, #12]
}
 80222cc:	4618      	mov	r0, r3
 80222ce:	3710      	adds	r7, #16
 80222d0:	46bd      	mov	sp, r7
 80222d2:	bd80      	pop	{r7, pc}

080222d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80222d4:	b480      	push	{r7}
 80222d6:	b085      	sub	sp, #20
 80222d8:	af00      	add	r7, sp, #0
 80222da:	6078      	str	r0, [r7, #4]
 80222dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80222de:	2300      	movs	r3, #0
 80222e0:	60fb      	str	r3, [r7, #12]
 80222e2:	e014      	b.n	802230e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80222e4:	4a0f      	ldr	r2, [pc, #60]	@ (8022324 <vQueueAddToRegistry+0x50>)
 80222e6:	68fb      	ldr	r3, [r7, #12]
 80222e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d10b      	bne.n	8022308 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80222f0:	490c      	ldr	r1, [pc, #48]	@ (8022324 <vQueueAddToRegistry+0x50>)
 80222f2:	68fb      	ldr	r3, [r7, #12]
 80222f4:	683a      	ldr	r2, [r7, #0]
 80222f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80222fa:	4a0a      	ldr	r2, [pc, #40]	@ (8022324 <vQueueAddToRegistry+0x50>)
 80222fc:	68fb      	ldr	r3, [r7, #12]
 80222fe:	00db      	lsls	r3, r3, #3
 8022300:	4413      	add	r3, r2
 8022302:	687a      	ldr	r2, [r7, #4]
 8022304:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8022306:	e006      	b.n	8022316 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022308:	68fb      	ldr	r3, [r7, #12]
 802230a:	3301      	adds	r3, #1
 802230c:	60fb      	str	r3, [r7, #12]
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	2b07      	cmp	r3, #7
 8022312:	d9e7      	bls.n	80222e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8022314:	bf00      	nop
 8022316:	bf00      	nop
 8022318:	3714      	adds	r7, #20
 802231a:	46bd      	mov	sp, r7
 802231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022320:	4770      	bx	lr
 8022322:	bf00      	nop
 8022324:	24008350 	.word	0x24008350

08022328 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022328:	b580      	push	{r7, lr}
 802232a:	b086      	sub	sp, #24
 802232c:	af00      	add	r7, sp, #0
 802232e:	60f8      	str	r0, [r7, #12]
 8022330:	60b9      	str	r1, [r7, #8]
 8022332:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8022334:	68fb      	ldr	r3, [r7, #12]
 8022336:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8022338:	f7ff fa0e 	bl	8021758 <vPortEnterCritical>
 802233c:	697b      	ldr	r3, [r7, #20]
 802233e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8022342:	b25b      	sxtb	r3, r3
 8022344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022348:	d103      	bne.n	8022352 <vQueueWaitForMessageRestricted+0x2a>
 802234a:	697b      	ldr	r3, [r7, #20]
 802234c:	2200      	movs	r2, #0
 802234e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8022352:	697b      	ldr	r3, [r7, #20]
 8022354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8022358:	b25b      	sxtb	r3, r3
 802235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802235e:	d103      	bne.n	8022368 <vQueueWaitForMessageRestricted+0x40>
 8022360:	697b      	ldr	r3, [r7, #20]
 8022362:	2200      	movs	r2, #0
 8022364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8022368:	f7ff fa28 	bl	80217bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802236c:	697b      	ldr	r3, [r7, #20]
 802236e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022370:	2b00      	cmp	r3, #0
 8022372:	d106      	bne.n	8022382 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8022374:	697b      	ldr	r3, [r7, #20]
 8022376:	3324      	adds	r3, #36	@ 0x24
 8022378:	687a      	ldr	r2, [r7, #4]
 802237a:	68b9      	ldr	r1, [r7, #8]
 802237c:	4618      	mov	r0, r3
 802237e:	f000 fc6d 	bl	8022c5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8022382:	6978      	ldr	r0, [r7, #20]
 8022384:	f7ff ff26 	bl	80221d4 <prvUnlockQueue>
	}
 8022388:	bf00      	nop
 802238a:	3718      	adds	r7, #24
 802238c:	46bd      	mov	sp, r7
 802238e:	bd80      	pop	{r7, pc}

08022390 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8022390:	b580      	push	{r7, lr}
 8022392:	b08e      	sub	sp, #56	@ 0x38
 8022394:	af04      	add	r7, sp, #16
 8022396:	60f8      	str	r0, [r7, #12]
 8022398:	60b9      	str	r1, [r7, #8]
 802239a:	607a      	str	r2, [r7, #4]
 802239c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802239e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d10b      	bne.n	80223bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80223a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80223a8:	f383 8811 	msr	BASEPRI, r3
 80223ac:	f3bf 8f6f 	isb	sy
 80223b0:	f3bf 8f4f 	dsb	sy
 80223b4:	623b      	str	r3, [r7, #32]
}
 80223b6:	bf00      	nop
 80223b8:	bf00      	nop
 80223ba:	e7fd      	b.n	80223b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80223bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80223be:	2b00      	cmp	r3, #0
 80223c0:	d10b      	bne.n	80223da <xTaskCreateStatic+0x4a>
	__asm volatile
 80223c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80223c6:	f383 8811 	msr	BASEPRI, r3
 80223ca:	f3bf 8f6f 	isb	sy
 80223ce:	f3bf 8f4f 	dsb	sy
 80223d2:	61fb      	str	r3, [r7, #28]
}
 80223d4:	bf00      	nop
 80223d6:	bf00      	nop
 80223d8:	e7fd      	b.n	80223d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80223da:	23a8      	movs	r3, #168	@ 0xa8
 80223dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80223de:	693b      	ldr	r3, [r7, #16]
 80223e0:	2ba8      	cmp	r3, #168	@ 0xa8
 80223e2:	d00b      	beq.n	80223fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80223e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80223e8:	f383 8811 	msr	BASEPRI, r3
 80223ec:	f3bf 8f6f 	isb	sy
 80223f0:	f3bf 8f4f 	dsb	sy
 80223f4:	61bb      	str	r3, [r7, #24]
}
 80223f6:	bf00      	nop
 80223f8:	bf00      	nop
 80223fa:	e7fd      	b.n	80223f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80223fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80223fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022400:	2b00      	cmp	r3, #0
 8022402:	d01e      	beq.n	8022442 <xTaskCreateStatic+0xb2>
 8022404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022406:	2b00      	cmp	r3, #0
 8022408:	d01b      	beq.n	8022442 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802240a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802240c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 802240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8022412:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8022414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022416:	2202      	movs	r2, #2
 8022418:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 802241c:	2300      	movs	r3, #0
 802241e:	9303      	str	r3, [sp, #12]
 8022420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022422:	9302      	str	r3, [sp, #8]
 8022424:	f107 0314 	add.w	r3, r7, #20
 8022428:	9301      	str	r3, [sp, #4]
 802242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802242c:	9300      	str	r3, [sp, #0]
 802242e:	683b      	ldr	r3, [r7, #0]
 8022430:	687a      	ldr	r2, [r7, #4]
 8022432:	68b9      	ldr	r1, [r7, #8]
 8022434:	68f8      	ldr	r0, [r7, #12]
 8022436:	f000 f851 	bl	80224dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802243a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802243c:	f000 f8f6 	bl	802262c <prvAddNewTaskToReadyList>
 8022440:	e001      	b.n	8022446 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8022442:	2300      	movs	r3, #0
 8022444:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8022446:	697b      	ldr	r3, [r7, #20]
	}
 8022448:	4618      	mov	r0, r3
 802244a:	3728      	adds	r7, #40	@ 0x28
 802244c:	46bd      	mov	sp, r7
 802244e:	bd80      	pop	{r7, pc}

08022450 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8022450:	b580      	push	{r7, lr}
 8022452:	b08c      	sub	sp, #48	@ 0x30
 8022454:	af04      	add	r7, sp, #16
 8022456:	60f8      	str	r0, [r7, #12]
 8022458:	60b9      	str	r1, [r7, #8]
 802245a:	603b      	str	r3, [r7, #0]
 802245c:	4613      	mov	r3, r2
 802245e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8022460:	88fb      	ldrh	r3, [r7, #6]
 8022462:	009b      	lsls	r3, r3, #2
 8022464:	4618      	mov	r0, r3
 8022466:	f7fe fda7 	bl	8020fb8 <pvPortMalloc>
 802246a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802246c:	697b      	ldr	r3, [r7, #20]
 802246e:	2b00      	cmp	r3, #0
 8022470:	d00e      	beq.n	8022490 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8022472:	20a8      	movs	r0, #168	@ 0xa8
 8022474:	f7fe fda0 	bl	8020fb8 <pvPortMalloc>
 8022478:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802247a:	69fb      	ldr	r3, [r7, #28]
 802247c:	2b00      	cmp	r3, #0
 802247e:	d003      	beq.n	8022488 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8022480:	69fb      	ldr	r3, [r7, #28]
 8022482:	697a      	ldr	r2, [r7, #20]
 8022484:	631a      	str	r2, [r3, #48]	@ 0x30
 8022486:	e005      	b.n	8022494 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8022488:	6978      	ldr	r0, [r7, #20]
 802248a:	f7fe fe63 	bl	8021154 <vPortFree>
 802248e:	e001      	b.n	8022494 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8022490:	2300      	movs	r3, #0
 8022492:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8022494:	69fb      	ldr	r3, [r7, #28]
 8022496:	2b00      	cmp	r3, #0
 8022498:	d017      	beq.n	80224ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802249a:	69fb      	ldr	r3, [r7, #28]
 802249c:	2200      	movs	r2, #0
 802249e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80224a2:	88fa      	ldrh	r2, [r7, #6]
 80224a4:	2300      	movs	r3, #0
 80224a6:	9303      	str	r3, [sp, #12]
 80224a8:	69fb      	ldr	r3, [r7, #28]
 80224aa:	9302      	str	r3, [sp, #8]
 80224ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80224ae:	9301      	str	r3, [sp, #4]
 80224b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80224b2:	9300      	str	r3, [sp, #0]
 80224b4:	683b      	ldr	r3, [r7, #0]
 80224b6:	68b9      	ldr	r1, [r7, #8]
 80224b8:	68f8      	ldr	r0, [r7, #12]
 80224ba:	f000 f80f 	bl	80224dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80224be:	69f8      	ldr	r0, [r7, #28]
 80224c0:	f000 f8b4 	bl	802262c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80224c4:	2301      	movs	r3, #1
 80224c6:	61bb      	str	r3, [r7, #24]
 80224c8:	e002      	b.n	80224d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80224ca:	f04f 33ff 	mov.w	r3, #4294967295
 80224ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80224d0:	69bb      	ldr	r3, [r7, #24]
	}
 80224d2:	4618      	mov	r0, r3
 80224d4:	3720      	adds	r7, #32
 80224d6:	46bd      	mov	sp, r7
 80224d8:	bd80      	pop	{r7, pc}
	...

080224dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80224dc:	b580      	push	{r7, lr}
 80224de:	b088      	sub	sp, #32
 80224e0:	af00      	add	r7, sp, #0
 80224e2:	60f8      	str	r0, [r7, #12]
 80224e4:	60b9      	str	r1, [r7, #8]
 80224e6:	607a      	str	r2, [r7, #4]
 80224e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80224ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80224ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	009b      	lsls	r3, r3, #2
 80224f2:	461a      	mov	r2, r3
 80224f4:	21a5      	movs	r1, #165	@ 0xa5
 80224f6:	f002 fcb1 	bl	8024e5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80224fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80224fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80224fe:	6879      	ldr	r1, [r7, #4]
 8022500:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8022504:	440b      	add	r3, r1
 8022506:	009b      	lsls	r3, r3, #2
 8022508:	4413      	add	r3, r2
 802250a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802250c:	69bb      	ldr	r3, [r7, #24]
 802250e:	f023 0307 	bic.w	r3, r3, #7
 8022512:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8022514:	69bb      	ldr	r3, [r7, #24]
 8022516:	f003 0307 	and.w	r3, r3, #7
 802251a:	2b00      	cmp	r3, #0
 802251c:	d00b      	beq.n	8022536 <prvInitialiseNewTask+0x5a>
	__asm volatile
 802251e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022522:	f383 8811 	msr	BASEPRI, r3
 8022526:	f3bf 8f6f 	isb	sy
 802252a:	f3bf 8f4f 	dsb	sy
 802252e:	617b      	str	r3, [r7, #20]
}
 8022530:	bf00      	nop
 8022532:	bf00      	nop
 8022534:	e7fd      	b.n	8022532 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8022536:	68bb      	ldr	r3, [r7, #8]
 8022538:	2b00      	cmp	r3, #0
 802253a:	d01f      	beq.n	802257c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802253c:	2300      	movs	r3, #0
 802253e:	61fb      	str	r3, [r7, #28]
 8022540:	e012      	b.n	8022568 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8022542:	68ba      	ldr	r2, [r7, #8]
 8022544:	69fb      	ldr	r3, [r7, #28]
 8022546:	4413      	add	r3, r2
 8022548:	7819      	ldrb	r1, [r3, #0]
 802254a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802254c:	69fb      	ldr	r3, [r7, #28]
 802254e:	4413      	add	r3, r2
 8022550:	3334      	adds	r3, #52	@ 0x34
 8022552:	460a      	mov	r2, r1
 8022554:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8022556:	68ba      	ldr	r2, [r7, #8]
 8022558:	69fb      	ldr	r3, [r7, #28]
 802255a:	4413      	add	r3, r2
 802255c:	781b      	ldrb	r3, [r3, #0]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d006      	beq.n	8022570 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8022562:	69fb      	ldr	r3, [r7, #28]
 8022564:	3301      	adds	r3, #1
 8022566:	61fb      	str	r3, [r7, #28]
 8022568:	69fb      	ldr	r3, [r7, #28]
 802256a:	2b0f      	cmp	r3, #15
 802256c:	d9e9      	bls.n	8022542 <prvInitialiseNewTask+0x66>
 802256e:	e000      	b.n	8022572 <prvInitialiseNewTask+0x96>
			{
				break;
 8022570:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8022572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022574:	2200      	movs	r2, #0
 8022576:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 802257a:	e003      	b.n	8022584 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802257e:	2200      	movs	r2, #0
 8022580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8022584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022586:	2b37      	cmp	r3, #55	@ 0x37
 8022588:	d901      	bls.n	802258e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802258a:	2337      	movs	r3, #55	@ 0x37
 802258c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022592:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8022594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022598:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 802259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802259c:	2200      	movs	r2, #0
 802259e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80225a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225a2:	3304      	adds	r3, #4
 80225a4:	4618      	mov	r0, r3
 80225a6:	f7fe ff15 	bl	80213d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80225aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225ac:	3318      	adds	r3, #24
 80225ae:	4618      	mov	r0, r3
 80225b0:	f7fe ff10 	bl	80213d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80225b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80225b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80225ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80225bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80225c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80225c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80225c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80225ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225cc:	2200      	movs	r2, #0
 80225ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80225d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225d4:	2200      	movs	r2, #0
 80225d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80225da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225dc:	3354      	adds	r3, #84	@ 0x54
 80225de:	224c      	movs	r2, #76	@ 0x4c
 80225e0:	2100      	movs	r1, #0
 80225e2:	4618      	mov	r0, r3
 80225e4:	f002 fc3a 	bl	8024e5c <memset>
 80225e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225ea:	4a0d      	ldr	r2, [pc, #52]	@ (8022620 <prvInitialiseNewTask+0x144>)
 80225ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80225ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225f0:	4a0c      	ldr	r2, [pc, #48]	@ (8022624 <prvInitialiseNewTask+0x148>)
 80225f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80225f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80225f6:	4a0c      	ldr	r2, [pc, #48]	@ (8022628 <prvInitialiseNewTask+0x14c>)
 80225f8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80225fa:	683a      	ldr	r2, [r7, #0]
 80225fc:	68f9      	ldr	r1, [r7, #12]
 80225fe:	69b8      	ldr	r0, [r7, #24]
 8022600:	f7fe ff7c 	bl	80214fc <pxPortInitialiseStack>
 8022604:	4602      	mov	r2, r0
 8022606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022608:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 802260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802260c:	2b00      	cmp	r3, #0
 802260e:	d002      	beq.n	8022616 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8022610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8022616:	bf00      	nop
 8022618:	3720      	adds	r7, #32
 802261a:	46bd      	mov	sp, r7
 802261c:	bd80      	pop	{r7, pc}
 802261e:	bf00      	nop
 8022620:	240089c4 	.word	0x240089c4
 8022624:	24008a2c 	.word	0x24008a2c
 8022628:	24008a94 	.word	0x24008a94

0802262c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802262c:	b580      	push	{r7, lr}
 802262e:	b082      	sub	sp, #8
 8022630:	af00      	add	r7, sp, #0
 8022632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8022634:	f7ff f890 	bl	8021758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8022638:	4b2d      	ldr	r3, [pc, #180]	@ (80226f0 <prvAddNewTaskToReadyList+0xc4>)
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	3301      	adds	r3, #1
 802263e:	4a2c      	ldr	r2, [pc, #176]	@ (80226f0 <prvAddNewTaskToReadyList+0xc4>)
 8022640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8022642:	4b2c      	ldr	r3, [pc, #176]	@ (80226f4 <prvAddNewTaskToReadyList+0xc8>)
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	2b00      	cmp	r3, #0
 8022648:	d109      	bne.n	802265e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802264a:	4a2a      	ldr	r2, [pc, #168]	@ (80226f4 <prvAddNewTaskToReadyList+0xc8>)
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8022650:	4b27      	ldr	r3, [pc, #156]	@ (80226f0 <prvAddNewTaskToReadyList+0xc4>)
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	2b01      	cmp	r3, #1
 8022656:	d110      	bne.n	802267a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8022658:	f000 fc2e 	bl	8022eb8 <prvInitialiseTaskLists>
 802265c:	e00d      	b.n	802267a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802265e:	4b26      	ldr	r3, [pc, #152]	@ (80226f8 <prvAddNewTaskToReadyList+0xcc>)
 8022660:	681b      	ldr	r3, [r3, #0]
 8022662:	2b00      	cmp	r3, #0
 8022664:	d109      	bne.n	802267a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8022666:	4b23      	ldr	r3, [pc, #140]	@ (80226f4 <prvAddNewTaskToReadyList+0xc8>)
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022670:	429a      	cmp	r2, r3
 8022672:	d802      	bhi.n	802267a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8022674:	4a1f      	ldr	r2, [pc, #124]	@ (80226f4 <prvAddNewTaskToReadyList+0xc8>)
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802267a:	4b20      	ldr	r3, [pc, #128]	@ (80226fc <prvAddNewTaskToReadyList+0xd0>)
 802267c:	681b      	ldr	r3, [r3, #0]
 802267e:	3301      	adds	r3, #1
 8022680:	4a1e      	ldr	r2, [pc, #120]	@ (80226fc <prvAddNewTaskToReadyList+0xd0>)
 8022682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8022684:	4b1d      	ldr	r3, [pc, #116]	@ (80226fc <prvAddNewTaskToReadyList+0xd0>)
 8022686:	681a      	ldr	r2, [r3, #0]
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022690:	4b1b      	ldr	r3, [pc, #108]	@ (8022700 <prvAddNewTaskToReadyList+0xd4>)
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	429a      	cmp	r2, r3
 8022696:	d903      	bls.n	80226a0 <prvAddNewTaskToReadyList+0x74>
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802269c:	4a18      	ldr	r2, [pc, #96]	@ (8022700 <prvAddNewTaskToReadyList+0xd4>)
 802269e:	6013      	str	r3, [r2, #0]
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80226a4:	4613      	mov	r3, r2
 80226a6:	009b      	lsls	r3, r3, #2
 80226a8:	4413      	add	r3, r2
 80226aa:	009b      	lsls	r3, r3, #2
 80226ac:	4a15      	ldr	r2, [pc, #84]	@ (8022704 <prvAddNewTaskToReadyList+0xd8>)
 80226ae:	441a      	add	r2, r3
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	3304      	adds	r3, #4
 80226b4:	4619      	mov	r1, r3
 80226b6:	4610      	mov	r0, r2
 80226b8:	f7fe fe99 	bl	80213ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80226bc:	f7ff f87e 	bl	80217bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80226c0:	4b0d      	ldr	r3, [pc, #52]	@ (80226f8 <prvAddNewTaskToReadyList+0xcc>)
 80226c2:	681b      	ldr	r3, [r3, #0]
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d00e      	beq.n	80226e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80226c8:	4b0a      	ldr	r3, [pc, #40]	@ (80226f4 <prvAddNewTaskToReadyList+0xc8>)
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80226d2:	429a      	cmp	r2, r3
 80226d4:	d207      	bcs.n	80226e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80226d6:	4b0c      	ldr	r3, [pc, #48]	@ (8022708 <prvAddNewTaskToReadyList+0xdc>)
 80226d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80226dc:	601a      	str	r2, [r3, #0]
 80226de:	f3bf 8f4f 	dsb	sy
 80226e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80226e6:	bf00      	nop
 80226e8:	3708      	adds	r7, #8
 80226ea:	46bd      	mov	sp, r7
 80226ec:	bd80      	pop	{r7, pc}
 80226ee:	bf00      	nop
 80226f0:	24008864 	.word	0x24008864
 80226f4:	24008390 	.word	0x24008390
 80226f8:	24008870 	.word	0x24008870
 80226fc:	24008880 	.word	0x24008880
 8022700:	2400886c 	.word	0x2400886c
 8022704:	24008394 	.word	0x24008394
 8022708:	e000ed04 	.word	0xe000ed04

0802270c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 802270c:	b580      	push	{r7, lr}
 802270e:	b084      	sub	sp, #16
 8022710:	af00      	add	r7, sp, #0
 8022712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8022714:	2300      	movs	r3, #0
 8022716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	2b00      	cmp	r3, #0
 802271c:	d018      	beq.n	8022750 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802271e:	4b14      	ldr	r3, [pc, #80]	@ (8022770 <vTaskDelay+0x64>)
 8022720:	681b      	ldr	r3, [r3, #0]
 8022722:	2b00      	cmp	r3, #0
 8022724:	d00b      	beq.n	802273e <vTaskDelay+0x32>
	__asm volatile
 8022726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802272a:	f383 8811 	msr	BASEPRI, r3
 802272e:	f3bf 8f6f 	isb	sy
 8022732:	f3bf 8f4f 	dsb	sy
 8022736:	60bb      	str	r3, [r7, #8]
}
 8022738:	bf00      	nop
 802273a:	bf00      	nop
 802273c:	e7fd      	b.n	802273a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 802273e:	f000 f88b 	bl	8022858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8022742:	2100      	movs	r1, #0
 8022744:	6878      	ldr	r0, [r7, #4]
 8022746:	f000 fd09 	bl	802315c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 802274a:	f000 f893 	bl	8022874 <xTaskResumeAll>
 802274e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	2b00      	cmp	r3, #0
 8022754:	d107      	bne.n	8022766 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8022756:	4b07      	ldr	r3, [pc, #28]	@ (8022774 <vTaskDelay+0x68>)
 8022758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802275c:	601a      	str	r2, [r3, #0]
 802275e:	f3bf 8f4f 	dsb	sy
 8022762:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022766:	bf00      	nop
 8022768:	3710      	adds	r7, #16
 802276a:	46bd      	mov	sp, r7
 802276c:	bd80      	pop	{r7, pc}
 802276e:	bf00      	nop
 8022770:	2400888c 	.word	0x2400888c
 8022774:	e000ed04 	.word	0xe000ed04

08022778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8022778:	b580      	push	{r7, lr}
 802277a:	b08a      	sub	sp, #40	@ 0x28
 802277c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802277e:	2300      	movs	r3, #0
 8022780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8022782:	2300      	movs	r3, #0
 8022784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8022786:	463a      	mov	r2, r7
 8022788:	1d39      	adds	r1, r7, #4
 802278a:	f107 0308 	add.w	r3, r7, #8
 802278e:	4618      	mov	r0, r3
 8022790:	f7fe fbde 	bl	8020f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8022794:	6839      	ldr	r1, [r7, #0]
 8022796:	687b      	ldr	r3, [r7, #4]
 8022798:	68ba      	ldr	r2, [r7, #8]
 802279a:	9202      	str	r2, [sp, #8]
 802279c:	9301      	str	r3, [sp, #4]
 802279e:	2300      	movs	r3, #0
 80227a0:	9300      	str	r3, [sp, #0]
 80227a2:	2300      	movs	r3, #0
 80227a4:	460a      	mov	r2, r1
 80227a6:	4924      	ldr	r1, [pc, #144]	@ (8022838 <vTaskStartScheduler+0xc0>)
 80227a8:	4824      	ldr	r0, [pc, #144]	@ (802283c <vTaskStartScheduler+0xc4>)
 80227aa:	f7ff fdf1 	bl	8022390 <xTaskCreateStatic>
 80227ae:	4603      	mov	r3, r0
 80227b0:	4a23      	ldr	r2, [pc, #140]	@ (8022840 <vTaskStartScheduler+0xc8>)
 80227b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80227b4:	4b22      	ldr	r3, [pc, #136]	@ (8022840 <vTaskStartScheduler+0xc8>)
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	d002      	beq.n	80227c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80227bc:	2301      	movs	r3, #1
 80227be:	617b      	str	r3, [r7, #20]
 80227c0:	e001      	b.n	80227c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80227c2:	2300      	movs	r3, #0
 80227c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80227c6:	697b      	ldr	r3, [r7, #20]
 80227c8:	2b01      	cmp	r3, #1
 80227ca:	d102      	bne.n	80227d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80227cc:	f000 fd1a 	bl	8023204 <xTimerCreateTimerTask>
 80227d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80227d2:	697b      	ldr	r3, [r7, #20]
 80227d4:	2b01      	cmp	r3, #1
 80227d6:	d11b      	bne.n	8022810 <vTaskStartScheduler+0x98>
	__asm volatile
 80227d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80227dc:	f383 8811 	msr	BASEPRI, r3
 80227e0:	f3bf 8f6f 	isb	sy
 80227e4:	f3bf 8f4f 	dsb	sy
 80227e8:	613b      	str	r3, [r7, #16]
}
 80227ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80227ec:	4b15      	ldr	r3, [pc, #84]	@ (8022844 <vTaskStartScheduler+0xcc>)
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	3354      	adds	r3, #84	@ 0x54
 80227f2:	4a15      	ldr	r2, [pc, #84]	@ (8022848 <vTaskStartScheduler+0xd0>)
 80227f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80227f6:	4b15      	ldr	r3, [pc, #84]	@ (802284c <vTaskStartScheduler+0xd4>)
 80227f8:	f04f 32ff 	mov.w	r2, #4294967295
 80227fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80227fe:	4b14      	ldr	r3, [pc, #80]	@ (8022850 <vTaskStartScheduler+0xd8>)
 8022800:	2201      	movs	r2, #1
 8022802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8022804:	4b13      	ldr	r3, [pc, #76]	@ (8022854 <vTaskStartScheduler+0xdc>)
 8022806:	2200      	movs	r2, #0
 8022808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 802280a:	f7fe ff01 	bl	8021610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802280e:	e00f      	b.n	8022830 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8022810:	697b      	ldr	r3, [r7, #20]
 8022812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022816:	d10b      	bne.n	8022830 <vTaskStartScheduler+0xb8>
	__asm volatile
 8022818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802281c:	f383 8811 	msr	BASEPRI, r3
 8022820:	f3bf 8f6f 	isb	sy
 8022824:	f3bf 8f4f 	dsb	sy
 8022828:	60fb      	str	r3, [r7, #12]
}
 802282a:	bf00      	nop
 802282c:	bf00      	nop
 802282e:	e7fd      	b.n	802282c <vTaskStartScheduler+0xb4>
}
 8022830:	bf00      	nop
 8022832:	3718      	adds	r7, #24
 8022834:	46bd      	mov	sp, r7
 8022836:	bd80      	pop	{r7, pc}
 8022838:	0802bda4 	.word	0x0802bda4
 802283c:	08022e89 	.word	0x08022e89
 8022840:	24008888 	.word	0x24008888
 8022844:	24008390 	.word	0x24008390
 8022848:	240007b0 	.word	0x240007b0
 802284c:	24008884 	.word	0x24008884
 8022850:	24008870 	.word	0x24008870
 8022854:	24008868 	.word	0x24008868

08022858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8022858:	b480      	push	{r7}
 802285a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802285c:	4b04      	ldr	r3, [pc, #16]	@ (8022870 <vTaskSuspendAll+0x18>)
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	3301      	adds	r3, #1
 8022862:	4a03      	ldr	r2, [pc, #12]	@ (8022870 <vTaskSuspendAll+0x18>)
 8022864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8022866:	bf00      	nop
 8022868:	46bd      	mov	sp, r7
 802286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802286e:	4770      	bx	lr
 8022870:	2400888c 	.word	0x2400888c

08022874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8022874:	b580      	push	{r7, lr}
 8022876:	b084      	sub	sp, #16
 8022878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802287a:	2300      	movs	r3, #0
 802287c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802287e:	2300      	movs	r3, #0
 8022880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8022882:	4b42      	ldr	r3, [pc, #264]	@ (802298c <xTaskResumeAll+0x118>)
 8022884:	681b      	ldr	r3, [r3, #0]
 8022886:	2b00      	cmp	r3, #0
 8022888:	d10b      	bne.n	80228a2 <xTaskResumeAll+0x2e>
	__asm volatile
 802288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802288e:	f383 8811 	msr	BASEPRI, r3
 8022892:	f3bf 8f6f 	isb	sy
 8022896:	f3bf 8f4f 	dsb	sy
 802289a:	603b      	str	r3, [r7, #0]
}
 802289c:	bf00      	nop
 802289e:	bf00      	nop
 80228a0:	e7fd      	b.n	802289e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80228a2:	f7fe ff59 	bl	8021758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80228a6:	4b39      	ldr	r3, [pc, #228]	@ (802298c <xTaskResumeAll+0x118>)
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	3b01      	subs	r3, #1
 80228ac:	4a37      	ldr	r2, [pc, #220]	@ (802298c <xTaskResumeAll+0x118>)
 80228ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80228b0:	4b36      	ldr	r3, [pc, #216]	@ (802298c <xTaskResumeAll+0x118>)
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d162      	bne.n	802297e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80228b8:	4b35      	ldr	r3, [pc, #212]	@ (8022990 <xTaskResumeAll+0x11c>)
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d05e      	beq.n	802297e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80228c0:	e02f      	b.n	8022922 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80228c2:	4b34      	ldr	r3, [pc, #208]	@ (8022994 <xTaskResumeAll+0x120>)
 80228c4:	68db      	ldr	r3, [r3, #12]
 80228c6:	68db      	ldr	r3, [r3, #12]
 80228c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	3318      	adds	r3, #24
 80228ce:	4618      	mov	r0, r3
 80228d0:	f7fe fdea 	bl	80214a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80228d4:	68fb      	ldr	r3, [r7, #12]
 80228d6:	3304      	adds	r3, #4
 80228d8:	4618      	mov	r0, r3
 80228da:	f7fe fde5 	bl	80214a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80228de:	68fb      	ldr	r3, [r7, #12]
 80228e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80228e2:	4b2d      	ldr	r3, [pc, #180]	@ (8022998 <xTaskResumeAll+0x124>)
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	429a      	cmp	r2, r3
 80228e8:	d903      	bls.n	80228f2 <xTaskResumeAll+0x7e>
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80228ee:	4a2a      	ldr	r2, [pc, #168]	@ (8022998 <xTaskResumeAll+0x124>)
 80228f0:	6013      	str	r3, [r2, #0]
 80228f2:	68fb      	ldr	r3, [r7, #12]
 80228f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80228f6:	4613      	mov	r3, r2
 80228f8:	009b      	lsls	r3, r3, #2
 80228fa:	4413      	add	r3, r2
 80228fc:	009b      	lsls	r3, r3, #2
 80228fe:	4a27      	ldr	r2, [pc, #156]	@ (802299c <xTaskResumeAll+0x128>)
 8022900:	441a      	add	r2, r3
 8022902:	68fb      	ldr	r3, [r7, #12]
 8022904:	3304      	adds	r3, #4
 8022906:	4619      	mov	r1, r3
 8022908:	4610      	mov	r0, r2
 802290a:	f7fe fd70 	bl	80213ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802290e:	68fb      	ldr	r3, [r7, #12]
 8022910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022912:	4b23      	ldr	r3, [pc, #140]	@ (80229a0 <xTaskResumeAll+0x12c>)
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022918:	429a      	cmp	r2, r3
 802291a:	d302      	bcc.n	8022922 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 802291c:	4b21      	ldr	r3, [pc, #132]	@ (80229a4 <xTaskResumeAll+0x130>)
 802291e:	2201      	movs	r2, #1
 8022920:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022922:	4b1c      	ldr	r3, [pc, #112]	@ (8022994 <xTaskResumeAll+0x120>)
 8022924:	681b      	ldr	r3, [r3, #0]
 8022926:	2b00      	cmp	r3, #0
 8022928:	d1cb      	bne.n	80228c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	2b00      	cmp	r3, #0
 802292e:	d001      	beq.n	8022934 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8022930:	f000 fb66 	bl	8023000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8022934:	4b1c      	ldr	r3, [pc, #112]	@ (80229a8 <xTaskResumeAll+0x134>)
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	2b00      	cmp	r3, #0
 802293e:	d010      	beq.n	8022962 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8022940:	f000 f846 	bl	80229d0 <xTaskIncrementTick>
 8022944:	4603      	mov	r3, r0
 8022946:	2b00      	cmp	r3, #0
 8022948:	d002      	beq.n	8022950 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 802294a:	4b16      	ldr	r3, [pc, #88]	@ (80229a4 <xTaskResumeAll+0x130>)
 802294c:	2201      	movs	r2, #1
 802294e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	3b01      	subs	r3, #1
 8022954:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	2b00      	cmp	r3, #0
 802295a:	d1f1      	bne.n	8022940 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 802295c:	4b12      	ldr	r3, [pc, #72]	@ (80229a8 <xTaskResumeAll+0x134>)
 802295e:	2200      	movs	r2, #0
 8022960:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8022962:	4b10      	ldr	r3, [pc, #64]	@ (80229a4 <xTaskResumeAll+0x130>)
 8022964:	681b      	ldr	r3, [r3, #0]
 8022966:	2b00      	cmp	r3, #0
 8022968:	d009      	beq.n	802297e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802296a:	2301      	movs	r3, #1
 802296c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802296e:	4b0f      	ldr	r3, [pc, #60]	@ (80229ac <xTaskResumeAll+0x138>)
 8022970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022974:	601a      	str	r2, [r3, #0]
 8022976:	f3bf 8f4f 	dsb	sy
 802297a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802297e:	f7fe ff1d 	bl	80217bc <vPortExitCritical>

	return xAlreadyYielded;
 8022982:	68bb      	ldr	r3, [r7, #8]
}
 8022984:	4618      	mov	r0, r3
 8022986:	3710      	adds	r7, #16
 8022988:	46bd      	mov	sp, r7
 802298a:	bd80      	pop	{r7, pc}
 802298c:	2400888c 	.word	0x2400888c
 8022990:	24008864 	.word	0x24008864
 8022994:	24008824 	.word	0x24008824
 8022998:	2400886c 	.word	0x2400886c
 802299c:	24008394 	.word	0x24008394
 80229a0:	24008390 	.word	0x24008390
 80229a4:	24008878 	.word	0x24008878
 80229a8:	24008874 	.word	0x24008874
 80229ac:	e000ed04 	.word	0xe000ed04

080229b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80229b0:	b480      	push	{r7}
 80229b2:	b083      	sub	sp, #12
 80229b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80229b6:	4b05      	ldr	r3, [pc, #20]	@ (80229cc <xTaskGetTickCount+0x1c>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80229bc:	687b      	ldr	r3, [r7, #4]
}
 80229be:	4618      	mov	r0, r3
 80229c0:	370c      	adds	r7, #12
 80229c2:	46bd      	mov	sp, r7
 80229c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229c8:	4770      	bx	lr
 80229ca:	bf00      	nop
 80229cc:	24008868 	.word	0x24008868

080229d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80229d0:	b580      	push	{r7, lr}
 80229d2:	b086      	sub	sp, #24
 80229d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80229d6:	2300      	movs	r3, #0
 80229d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80229da:	4b4f      	ldr	r3, [pc, #316]	@ (8022b18 <xTaskIncrementTick+0x148>)
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	2b00      	cmp	r3, #0
 80229e0:	f040 8090 	bne.w	8022b04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80229e4:	4b4d      	ldr	r3, [pc, #308]	@ (8022b1c <xTaskIncrementTick+0x14c>)
 80229e6:	681b      	ldr	r3, [r3, #0]
 80229e8:	3301      	adds	r3, #1
 80229ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80229ec:	4a4b      	ldr	r2, [pc, #300]	@ (8022b1c <xTaskIncrementTick+0x14c>)
 80229ee:	693b      	ldr	r3, [r7, #16]
 80229f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80229f2:	693b      	ldr	r3, [r7, #16]
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d121      	bne.n	8022a3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80229f8:	4b49      	ldr	r3, [pc, #292]	@ (8022b20 <xTaskIncrementTick+0x150>)
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	d00b      	beq.n	8022a1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8022a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022a06:	f383 8811 	msr	BASEPRI, r3
 8022a0a:	f3bf 8f6f 	isb	sy
 8022a0e:	f3bf 8f4f 	dsb	sy
 8022a12:	603b      	str	r3, [r7, #0]
}
 8022a14:	bf00      	nop
 8022a16:	bf00      	nop
 8022a18:	e7fd      	b.n	8022a16 <xTaskIncrementTick+0x46>
 8022a1a:	4b41      	ldr	r3, [pc, #260]	@ (8022b20 <xTaskIncrementTick+0x150>)
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	60fb      	str	r3, [r7, #12]
 8022a20:	4b40      	ldr	r3, [pc, #256]	@ (8022b24 <xTaskIncrementTick+0x154>)
 8022a22:	681b      	ldr	r3, [r3, #0]
 8022a24:	4a3e      	ldr	r2, [pc, #248]	@ (8022b20 <xTaskIncrementTick+0x150>)
 8022a26:	6013      	str	r3, [r2, #0]
 8022a28:	4a3e      	ldr	r2, [pc, #248]	@ (8022b24 <xTaskIncrementTick+0x154>)
 8022a2a:	68fb      	ldr	r3, [r7, #12]
 8022a2c:	6013      	str	r3, [r2, #0]
 8022a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8022b28 <xTaskIncrementTick+0x158>)
 8022a30:	681b      	ldr	r3, [r3, #0]
 8022a32:	3301      	adds	r3, #1
 8022a34:	4a3c      	ldr	r2, [pc, #240]	@ (8022b28 <xTaskIncrementTick+0x158>)
 8022a36:	6013      	str	r3, [r2, #0]
 8022a38:	f000 fae2 	bl	8023000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8022a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8022b2c <xTaskIncrementTick+0x15c>)
 8022a3e:	681b      	ldr	r3, [r3, #0]
 8022a40:	693a      	ldr	r2, [r7, #16]
 8022a42:	429a      	cmp	r2, r3
 8022a44:	d349      	bcc.n	8022ada <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022a46:	4b36      	ldr	r3, [pc, #216]	@ (8022b20 <xTaskIncrementTick+0x150>)
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	d104      	bne.n	8022a5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022a50:	4b36      	ldr	r3, [pc, #216]	@ (8022b2c <xTaskIncrementTick+0x15c>)
 8022a52:	f04f 32ff 	mov.w	r2, #4294967295
 8022a56:	601a      	str	r2, [r3, #0]
					break;
 8022a58:	e03f      	b.n	8022ada <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022a5a:	4b31      	ldr	r3, [pc, #196]	@ (8022b20 <xTaskIncrementTick+0x150>)
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	68db      	ldr	r3, [r3, #12]
 8022a60:	68db      	ldr	r3, [r3, #12]
 8022a62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8022a64:	68bb      	ldr	r3, [r7, #8]
 8022a66:	685b      	ldr	r3, [r3, #4]
 8022a68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8022a6a:	693a      	ldr	r2, [r7, #16]
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	429a      	cmp	r2, r3
 8022a70:	d203      	bcs.n	8022a7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8022a72:	4a2e      	ldr	r2, [pc, #184]	@ (8022b2c <xTaskIncrementTick+0x15c>)
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8022a78:	e02f      	b.n	8022ada <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022a7a:	68bb      	ldr	r3, [r7, #8]
 8022a7c:	3304      	adds	r3, #4
 8022a7e:	4618      	mov	r0, r3
 8022a80:	f7fe fd12 	bl	80214a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8022a84:	68bb      	ldr	r3, [r7, #8]
 8022a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d004      	beq.n	8022a96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022a8c:	68bb      	ldr	r3, [r7, #8]
 8022a8e:	3318      	adds	r3, #24
 8022a90:	4618      	mov	r0, r3
 8022a92:	f7fe fd09 	bl	80214a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8022a96:	68bb      	ldr	r3, [r7, #8]
 8022a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a9a:	4b25      	ldr	r3, [pc, #148]	@ (8022b30 <xTaskIncrementTick+0x160>)
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	429a      	cmp	r2, r3
 8022aa0:	d903      	bls.n	8022aaa <xTaskIncrementTick+0xda>
 8022aa2:	68bb      	ldr	r3, [r7, #8]
 8022aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022aa6:	4a22      	ldr	r2, [pc, #136]	@ (8022b30 <xTaskIncrementTick+0x160>)
 8022aa8:	6013      	str	r3, [r2, #0]
 8022aaa:	68bb      	ldr	r3, [r7, #8]
 8022aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022aae:	4613      	mov	r3, r2
 8022ab0:	009b      	lsls	r3, r3, #2
 8022ab2:	4413      	add	r3, r2
 8022ab4:	009b      	lsls	r3, r3, #2
 8022ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8022b34 <xTaskIncrementTick+0x164>)
 8022ab8:	441a      	add	r2, r3
 8022aba:	68bb      	ldr	r3, [r7, #8]
 8022abc:	3304      	adds	r3, #4
 8022abe:	4619      	mov	r1, r3
 8022ac0:	4610      	mov	r0, r2
 8022ac2:	f7fe fc94 	bl	80213ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022ac6:	68bb      	ldr	r3, [r7, #8]
 8022ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022aca:	4b1b      	ldr	r3, [pc, #108]	@ (8022b38 <xTaskIncrementTick+0x168>)
 8022acc:	681b      	ldr	r3, [r3, #0]
 8022ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ad0:	429a      	cmp	r2, r3
 8022ad2:	d3b8      	bcc.n	8022a46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8022ad4:	2301      	movs	r3, #1
 8022ad6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022ad8:	e7b5      	b.n	8022a46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8022ada:	4b17      	ldr	r3, [pc, #92]	@ (8022b38 <xTaskIncrementTick+0x168>)
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022ae0:	4914      	ldr	r1, [pc, #80]	@ (8022b34 <xTaskIncrementTick+0x164>)
 8022ae2:	4613      	mov	r3, r2
 8022ae4:	009b      	lsls	r3, r3, #2
 8022ae6:	4413      	add	r3, r2
 8022ae8:	009b      	lsls	r3, r3, #2
 8022aea:	440b      	add	r3, r1
 8022aec:	681b      	ldr	r3, [r3, #0]
 8022aee:	2b01      	cmp	r3, #1
 8022af0:	d901      	bls.n	8022af6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8022af2:	2301      	movs	r3, #1
 8022af4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8022af6:	4b11      	ldr	r3, [pc, #68]	@ (8022b3c <xTaskIncrementTick+0x16c>)
 8022af8:	681b      	ldr	r3, [r3, #0]
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	d007      	beq.n	8022b0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8022afe:	2301      	movs	r3, #1
 8022b00:	617b      	str	r3, [r7, #20]
 8022b02:	e004      	b.n	8022b0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8022b04:	4b0e      	ldr	r3, [pc, #56]	@ (8022b40 <xTaskIncrementTick+0x170>)
 8022b06:	681b      	ldr	r3, [r3, #0]
 8022b08:	3301      	adds	r3, #1
 8022b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8022b40 <xTaskIncrementTick+0x170>)
 8022b0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8022b0e:	697b      	ldr	r3, [r7, #20]
}
 8022b10:	4618      	mov	r0, r3
 8022b12:	3718      	adds	r7, #24
 8022b14:	46bd      	mov	sp, r7
 8022b16:	bd80      	pop	{r7, pc}
 8022b18:	2400888c 	.word	0x2400888c
 8022b1c:	24008868 	.word	0x24008868
 8022b20:	2400881c 	.word	0x2400881c
 8022b24:	24008820 	.word	0x24008820
 8022b28:	2400887c 	.word	0x2400887c
 8022b2c:	24008884 	.word	0x24008884
 8022b30:	2400886c 	.word	0x2400886c
 8022b34:	24008394 	.word	0x24008394
 8022b38:	24008390 	.word	0x24008390
 8022b3c:	24008878 	.word	0x24008878
 8022b40:	24008874 	.word	0x24008874

08022b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8022b44:	b480      	push	{r7}
 8022b46:	b085      	sub	sp, #20
 8022b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8022b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8022bf8 <vTaskSwitchContext+0xb4>)
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d003      	beq.n	8022b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8022b52:	4b2a      	ldr	r3, [pc, #168]	@ (8022bfc <vTaskSwitchContext+0xb8>)
 8022b54:	2201      	movs	r2, #1
 8022b56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8022b58:	e047      	b.n	8022bea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8022b5a:	4b28      	ldr	r3, [pc, #160]	@ (8022bfc <vTaskSwitchContext+0xb8>)
 8022b5c:	2200      	movs	r2, #0
 8022b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022b60:	4b27      	ldr	r3, [pc, #156]	@ (8022c00 <vTaskSwitchContext+0xbc>)
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	60fb      	str	r3, [r7, #12]
 8022b66:	e011      	b.n	8022b8c <vTaskSwitchContext+0x48>
 8022b68:	68fb      	ldr	r3, [r7, #12]
 8022b6a:	2b00      	cmp	r3, #0
 8022b6c:	d10b      	bne.n	8022b86 <vTaskSwitchContext+0x42>
	__asm volatile
 8022b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022b72:	f383 8811 	msr	BASEPRI, r3
 8022b76:	f3bf 8f6f 	isb	sy
 8022b7a:	f3bf 8f4f 	dsb	sy
 8022b7e:	607b      	str	r3, [r7, #4]
}
 8022b80:	bf00      	nop
 8022b82:	bf00      	nop
 8022b84:	e7fd      	b.n	8022b82 <vTaskSwitchContext+0x3e>
 8022b86:	68fb      	ldr	r3, [r7, #12]
 8022b88:	3b01      	subs	r3, #1
 8022b8a:	60fb      	str	r3, [r7, #12]
 8022b8c:	491d      	ldr	r1, [pc, #116]	@ (8022c04 <vTaskSwitchContext+0xc0>)
 8022b8e:	68fa      	ldr	r2, [r7, #12]
 8022b90:	4613      	mov	r3, r2
 8022b92:	009b      	lsls	r3, r3, #2
 8022b94:	4413      	add	r3, r2
 8022b96:	009b      	lsls	r3, r3, #2
 8022b98:	440b      	add	r3, r1
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d0e3      	beq.n	8022b68 <vTaskSwitchContext+0x24>
 8022ba0:	68fa      	ldr	r2, [r7, #12]
 8022ba2:	4613      	mov	r3, r2
 8022ba4:	009b      	lsls	r3, r3, #2
 8022ba6:	4413      	add	r3, r2
 8022ba8:	009b      	lsls	r3, r3, #2
 8022baa:	4a16      	ldr	r2, [pc, #88]	@ (8022c04 <vTaskSwitchContext+0xc0>)
 8022bac:	4413      	add	r3, r2
 8022bae:	60bb      	str	r3, [r7, #8]
 8022bb0:	68bb      	ldr	r3, [r7, #8]
 8022bb2:	685b      	ldr	r3, [r3, #4]
 8022bb4:	685a      	ldr	r2, [r3, #4]
 8022bb6:	68bb      	ldr	r3, [r7, #8]
 8022bb8:	605a      	str	r2, [r3, #4]
 8022bba:	68bb      	ldr	r3, [r7, #8]
 8022bbc:	685a      	ldr	r2, [r3, #4]
 8022bbe:	68bb      	ldr	r3, [r7, #8]
 8022bc0:	3308      	adds	r3, #8
 8022bc2:	429a      	cmp	r2, r3
 8022bc4:	d104      	bne.n	8022bd0 <vTaskSwitchContext+0x8c>
 8022bc6:	68bb      	ldr	r3, [r7, #8]
 8022bc8:	685b      	ldr	r3, [r3, #4]
 8022bca:	685a      	ldr	r2, [r3, #4]
 8022bcc:	68bb      	ldr	r3, [r7, #8]
 8022bce:	605a      	str	r2, [r3, #4]
 8022bd0:	68bb      	ldr	r3, [r7, #8]
 8022bd2:	685b      	ldr	r3, [r3, #4]
 8022bd4:	68db      	ldr	r3, [r3, #12]
 8022bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8022c08 <vTaskSwitchContext+0xc4>)
 8022bd8:	6013      	str	r3, [r2, #0]
 8022bda:	4a09      	ldr	r2, [pc, #36]	@ (8022c00 <vTaskSwitchContext+0xbc>)
 8022bdc:	68fb      	ldr	r3, [r7, #12]
 8022bde:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022be0:	4b09      	ldr	r3, [pc, #36]	@ (8022c08 <vTaskSwitchContext+0xc4>)
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	3354      	adds	r3, #84	@ 0x54
 8022be6:	4a09      	ldr	r2, [pc, #36]	@ (8022c0c <vTaskSwitchContext+0xc8>)
 8022be8:	6013      	str	r3, [r2, #0]
}
 8022bea:	bf00      	nop
 8022bec:	3714      	adds	r7, #20
 8022bee:	46bd      	mov	sp, r7
 8022bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bf4:	4770      	bx	lr
 8022bf6:	bf00      	nop
 8022bf8:	2400888c 	.word	0x2400888c
 8022bfc:	24008878 	.word	0x24008878
 8022c00:	2400886c 	.word	0x2400886c
 8022c04:	24008394 	.word	0x24008394
 8022c08:	24008390 	.word	0x24008390
 8022c0c:	240007b0 	.word	0x240007b0

08022c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8022c10:	b580      	push	{r7, lr}
 8022c12:	b084      	sub	sp, #16
 8022c14:	af00      	add	r7, sp, #0
 8022c16:	6078      	str	r0, [r7, #4]
 8022c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d10b      	bne.n	8022c38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8022c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022c24:	f383 8811 	msr	BASEPRI, r3
 8022c28:	f3bf 8f6f 	isb	sy
 8022c2c:	f3bf 8f4f 	dsb	sy
 8022c30:	60fb      	str	r3, [r7, #12]
}
 8022c32:	bf00      	nop
 8022c34:	bf00      	nop
 8022c36:	e7fd      	b.n	8022c34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022c38:	4b07      	ldr	r3, [pc, #28]	@ (8022c58 <vTaskPlaceOnEventList+0x48>)
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	3318      	adds	r3, #24
 8022c3e:	4619      	mov	r1, r3
 8022c40:	6878      	ldr	r0, [r7, #4]
 8022c42:	f7fe fbf8 	bl	8021436 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022c46:	2101      	movs	r1, #1
 8022c48:	6838      	ldr	r0, [r7, #0]
 8022c4a:	f000 fa87 	bl	802315c <prvAddCurrentTaskToDelayedList>
}
 8022c4e:	bf00      	nop
 8022c50:	3710      	adds	r7, #16
 8022c52:	46bd      	mov	sp, r7
 8022c54:	bd80      	pop	{r7, pc}
 8022c56:	bf00      	nop
 8022c58:	24008390 	.word	0x24008390

08022c5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022c5c:	b580      	push	{r7, lr}
 8022c5e:	b086      	sub	sp, #24
 8022c60:	af00      	add	r7, sp, #0
 8022c62:	60f8      	str	r0, [r7, #12]
 8022c64:	60b9      	str	r1, [r7, #8]
 8022c66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d10b      	bne.n	8022c86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8022c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022c72:	f383 8811 	msr	BASEPRI, r3
 8022c76:	f3bf 8f6f 	isb	sy
 8022c7a:	f3bf 8f4f 	dsb	sy
 8022c7e:	617b      	str	r3, [r7, #20]
}
 8022c80:	bf00      	nop
 8022c82:	bf00      	nop
 8022c84:	e7fd      	b.n	8022c82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022c86:	4b0a      	ldr	r3, [pc, #40]	@ (8022cb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	3318      	adds	r3, #24
 8022c8c:	4619      	mov	r1, r3
 8022c8e:	68f8      	ldr	r0, [r7, #12]
 8022c90:	f7fe fbad 	bl	80213ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	d002      	beq.n	8022ca0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8022c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8022c9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8022ca0:	6879      	ldr	r1, [r7, #4]
 8022ca2:	68b8      	ldr	r0, [r7, #8]
 8022ca4:	f000 fa5a 	bl	802315c <prvAddCurrentTaskToDelayedList>
	}
 8022ca8:	bf00      	nop
 8022caa:	3718      	adds	r7, #24
 8022cac:	46bd      	mov	sp, r7
 8022cae:	bd80      	pop	{r7, pc}
 8022cb0:	24008390 	.word	0x24008390

08022cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8022cb4:	b580      	push	{r7, lr}
 8022cb6:	b086      	sub	sp, #24
 8022cb8:	af00      	add	r7, sp, #0
 8022cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	68db      	ldr	r3, [r3, #12]
 8022cc0:	68db      	ldr	r3, [r3, #12]
 8022cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8022cc4:	693b      	ldr	r3, [r7, #16]
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	d10b      	bne.n	8022ce2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8022cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022cce:	f383 8811 	msr	BASEPRI, r3
 8022cd2:	f3bf 8f6f 	isb	sy
 8022cd6:	f3bf 8f4f 	dsb	sy
 8022cda:	60fb      	str	r3, [r7, #12]
}
 8022cdc:	bf00      	nop
 8022cde:	bf00      	nop
 8022ce0:	e7fd      	b.n	8022cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8022ce2:	693b      	ldr	r3, [r7, #16]
 8022ce4:	3318      	adds	r3, #24
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	f7fe fbde 	bl	80214a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022cec:	4b1d      	ldr	r3, [pc, #116]	@ (8022d64 <xTaskRemoveFromEventList+0xb0>)
 8022cee:	681b      	ldr	r3, [r3, #0]
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d11d      	bne.n	8022d30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8022cf4:	693b      	ldr	r3, [r7, #16]
 8022cf6:	3304      	adds	r3, #4
 8022cf8:	4618      	mov	r0, r3
 8022cfa:	f7fe fbd5 	bl	80214a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8022cfe:	693b      	ldr	r3, [r7, #16]
 8022d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022d02:	4b19      	ldr	r3, [pc, #100]	@ (8022d68 <xTaskRemoveFromEventList+0xb4>)
 8022d04:	681b      	ldr	r3, [r3, #0]
 8022d06:	429a      	cmp	r2, r3
 8022d08:	d903      	bls.n	8022d12 <xTaskRemoveFromEventList+0x5e>
 8022d0a:	693b      	ldr	r3, [r7, #16]
 8022d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d0e:	4a16      	ldr	r2, [pc, #88]	@ (8022d68 <xTaskRemoveFromEventList+0xb4>)
 8022d10:	6013      	str	r3, [r2, #0]
 8022d12:	693b      	ldr	r3, [r7, #16]
 8022d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022d16:	4613      	mov	r3, r2
 8022d18:	009b      	lsls	r3, r3, #2
 8022d1a:	4413      	add	r3, r2
 8022d1c:	009b      	lsls	r3, r3, #2
 8022d1e:	4a13      	ldr	r2, [pc, #76]	@ (8022d6c <xTaskRemoveFromEventList+0xb8>)
 8022d20:	441a      	add	r2, r3
 8022d22:	693b      	ldr	r3, [r7, #16]
 8022d24:	3304      	adds	r3, #4
 8022d26:	4619      	mov	r1, r3
 8022d28:	4610      	mov	r0, r2
 8022d2a:	f7fe fb60 	bl	80213ee <vListInsertEnd>
 8022d2e:	e005      	b.n	8022d3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022d30:	693b      	ldr	r3, [r7, #16]
 8022d32:	3318      	adds	r3, #24
 8022d34:	4619      	mov	r1, r3
 8022d36:	480e      	ldr	r0, [pc, #56]	@ (8022d70 <xTaskRemoveFromEventList+0xbc>)
 8022d38:	f7fe fb59 	bl	80213ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022d3c:	693b      	ldr	r3, [r7, #16]
 8022d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022d40:	4b0c      	ldr	r3, [pc, #48]	@ (8022d74 <xTaskRemoveFromEventList+0xc0>)
 8022d42:	681b      	ldr	r3, [r3, #0]
 8022d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d46:	429a      	cmp	r2, r3
 8022d48:	d905      	bls.n	8022d56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022d4a:	2301      	movs	r3, #1
 8022d4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8022d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8022d78 <xTaskRemoveFromEventList+0xc4>)
 8022d50:	2201      	movs	r2, #1
 8022d52:	601a      	str	r2, [r3, #0]
 8022d54:	e001      	b.n	8022d5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8022d56:	2300      	movs	r3, #0
 8022d58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022d5a:	697b      	ldr	r3, [r7, #20]
}
 8022d5c:	4618      	mov	r0, r3
 8022d5e:	3718      	adds	r7, #24
 8022d60:	46bd      	mov	sp, r7
 8022d62:	bd80      	pop	{r7, pc}
 8022d64:	2400888c 	.word	0x2400888c
 8022d68:	2400886c 	.word	0x2400886c
 8022d6c:	24008394 	.word	0x24008394
 8022d70:	24008824 	.word	0x24008824
 8022d74:	24008390 	.word	0x24008390
 8022d78:	24008878 	.word	0x24008878

08022d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8022d7c:	b480      	push	{r7}
 8022d7e:	b083      	sub	sp, #12
 8022d80:	af00      	add	r7, sp, #0
 8022d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8022d84:	4b06      	ldr	r3, [pc, #24]	@ (8022da0 <vTaskInternalSetTimeOutState+0x24>)
 8022d86:	681a      	ldr	r2, [r3, #0]
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8022d8c:	4b05      	ldr	r3, [pc, #20]	@ (8022da4 <vTaskInternalSetTimeOutState+0x28>)
 8022d8e:	681a      	ldr	r2, [r3, #0]
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	605a      	str	r2, [r3, #4]
}
 8022d94:	bf00      	nop
 8022d96:	370c      	adds	r7, #12
 8022d98:	46bd      	mov	sp, r7
 8022d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d9e:	4770      	bx	lr
 8022da0:	2400887c 	.word	0x2400887c
 8022da4:	24008868 	.word	0x24008868

08022da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8022da8:	b580      	push	{r7, lr}
 8022daa:	b088      	sub	sp, #32
 8022dac:	af00      	add	r7, sp, #0
 8022dae:	6078      	str	r0, [r7, #4]
 8022db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	d10b      	bne.n	8022dd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8022db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022dbc:	f383 8811 	msr	BASEPRI, r3
 8022dc0:	f3bf 8f6f 	isb	sy
 8022dc4:	f3bf 8f4f 	dsb	sy
 8022dc8:	613b      	str	r3, [r7, #16]
}
 8022dca:	bf00      	nop
 8022dcc:	bf00      	nop
 8022dce:	e7fd      	b.n	8022dcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8022dd0:	683b      	ldr	r3, [r7, #0]
 8022dd2:	2b00      	cmp	r3, #0
 8022dd4:	d10b      	bne.n	8022dee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8022dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022dda:	f383 8811 	msr	BASEPRI, r3
 8022dde:	f3bf 8f6f 	isb	sy
 8022de2:	f3bf 8f4f 	dsb	sy
 8022de6:	60fb      	str	r3, [r7, #12]
}
 8022de8:	bf00      	nop
 8022dea:	bf00      	nop
 8022dec:	e7fd      	b.n	8022dea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8022dee:	f7fe fcb3 	bl	8021758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8022df2:	4b1d      	ldr	r3, [pc, #116]	@ (8022e68 <xTaskCheckForTimeOut+0xc0>)
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8022df8:	687b      	ldr	r3, [r7, #4]
 8022dfa:	685b      	ldr	r3, [r3, #4]
 8022dfc:	69ba      	ldr	r2, [r7, #24]
 8022dfe:	1ad3      	subs	r3, r2, r3
 8022e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8022e02:	683b      	ldr	r3, [r7, #0]
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e0a:	d102      	bne.n	8022e12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	61fb      	str	r3, [r7, #28]
 8022e10:	e023      	b.n	8022e5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	681a      	ldr	r2, [r3, #0]
 8022e16:	4b15      	ldr	r3, [pc, #84]	@ (8022e6c <xTaskCheckForTimeOut+0xc4>)
 8022e18:	681b      	ldr	r3, [r3, #0]
 8022e1a:	429a      	cmp	r2, r3
 8022e1c:	d007      	beq.n	8022e2e <xTaskCheckForTimeOut+0x86>
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	685b      	ldr	r3, [r3, #4]
 8022e22:	69ba      	ldr	r2, [r7, #24]
 8022e24:	429a      	cmp	r2, r3
 8022e26:	d302      	bcc.n	8022e2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8022e28:	2301      	movs	r3, #1
 8022e2a:	61fb      	str	r3, [r7, #28]
 8022e2c:	e015      	b.n	8022e5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022e2e:	683b      	ldr	r3, [r7, #0]
 8022e30:	681b      	ldr	r3, [r3, #0]
 8022e32:	697a      	ldr	r2, [r7, #20]
 8022e34:	429a      	cmp	r2, r3
 8022e36:	d20b      	bcs.n	8022e50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8022e38:	683b      	ldr	r3, [r7, #0]
 8022e3a:	681a      	ldr	r2, [r3, #0]
 8022e3c:	697b      	ldr	r3, [r7, #20]
 8022e3e:	1ad2      	subs	r2, r2, r3
 8022e40:	683b      	ldr	r3, [r7, #0]
 8022e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022e44:	6878      	ldr	r0, [r7, #4]
 8022e46:	f7ff ff99 	bl	8022d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	61fb      	str	r3, [r7, #28]
 8022e4e:	e004      	b.n	8022e5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8022e50:	683b      	ldr	r3, [r7, #0]
 8022e52:	2200      	movs	r2, #0
 8022e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8022e56:	2301      	movs	r3, #1
 8022e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8022e5a:	f7fe fcaf 	bl	80217bc <vPortExitCritical>

	return xReturn;
 8022e5e:	69fb      	ldr	r3, [r7, #28]
}
 8022e60:	4618      	mov	r0, r3
 8022e62:	3720      	adds	r7, #32
 8022e64:	46bd      	mov	sp, r7
 8022e66:	bd80      	pop	{r7, pc}
 8022e68:	24008868 	.word	0x24008868
 8022e6c:	2400887c 	.word	0x2400887c

08022e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8022e70:	b480      	push	{r7}
 8022e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8022e74:	4b03      	ldr	r3, [pc, #12]	@ (8022e84 <vTaskMissedYield+0x14>)
 8022e76:	2201      	movs	r2, #1
 8022e78:	601a      	str	r2, [r3, #0]
}
 8022e7a:	bf00      	nop
 8022e7c:	46bd      	mov	sp, r7
 8022e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e82:	4770      	bx	lr
 8022e84:	24008878 	.word	0x24008878

08022e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8022e88:	b580      	push	{r7, lr}
 8022e8a:	b082      	sub	sp, #8
 8022e8c:	af00      	add	r7, sp, #0
 8022e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8022e90:	f000 f852 	bl	8022f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022e94:	4b06      	ldr	r3, [pc, #24]	@ (8022eb0 <prvIdleTask+0x28>)
 8022e96:	681b      	ldr	r3, [r3, #0]
 8022e98:	2b01      	cmp	r3, #1
 8022e9a:	d9f9      	bls.n	8022e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8022e9c:	4b05      	ldr	r3, [pc, #20]	@ (8022eb4 <prvIdleTask+0x2c>)
 8022e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022ea2:	601a      	str	r2, [r3, #0]
 8022ea4:	f3bf 8f4f 	dsb	sy
 8022ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8022eac:	e7f0      	b.n	8022e90 <prvIdleTask+0x8>
 8022eae:	bf00      	nop
 8022eb0:	24008394 	.word	0x24008394
 8022eb4:	e000ed04 	.word	0xe000ed04

08022eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8022eb8:	b580      	push	{r7, lr}
 8022eba:	b082      	sub	sp, #8
 8022ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	607b      	str	r3, [r7, #4]
 8022ec2:	e00c      	b.n	8022ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8022ec4:	687a      	ldr	r2, [r7, #4]
 8022ec6:	4613      	mov	r3, r2
 8022ec8:	009b      	lsls	r3, r3, #2
 8022eca:	4413      	add	r3, r2
 8022ecc:	009b      	lsls	r3, r3, #2
 8022ece:	4a12      	ldr	r2, [pc, #72]	@ (8022f18 <prvInitialiseTaskLists+0x60>)
 8022ed0:	4413      	add	r3, r2
 8022ed2:	4618      	mov	r0, r3
 8022ed4:	f7fe fa5e 	bl	8021394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	3301      	adds	r3, #1
 8022edc:	607b      	str	r3, [r7, #4]
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	2b37      	cmp	r3, #55	@ 0x37
 8022ee2:	d9ef      	bls.n	8022ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8022ee4:	480d      	ldr	r0, [pc, #52]	@ (8022f1c <prvInitialiseTaskLists+0x64>)
 8022ee6:	f7fe fa55 	bl	8021394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8022eea:	480d      	ldr	r0, [pc, #52]	@ (8022f20 <prvInitialiseTaskLists+0x68>)
 8022eec:	f7fe fa52 	bl	8021394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8022ef0:	480c      	ldr	r0, [pc, #48]	@ (8022f24 <prvInitialiseTaskLists+0x6c>)
 8022ef2:	f7fe fa4f 	bl	8021394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8022ef6:	480c      	ldr	r0, [pc, #48]	@ (8022f28 <prvInitialiseTaskLists+0x70>)
 8022ef8:	f7fe fa4c 	bl	8021394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022efc:	480b      	ldr	r0, [pc, #44]	@ (8022f2c <prvInitialiseTaskLists+0x74>)
 8022efe:	f7fe fa49 	bl	8021394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8022f02:	4b0b      	ldr	r3, [pc, #44]	@ (8022f30 <prvInitialiseTaskLists+0x78>)
 8022f04:	4a05      	ldr	r2, [pc, #20]	@ (8022f1c <prvInitialiseTaskLists+0x64>)
 8022f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8022f08:	4b0a      	ldr	r3, [pc, #40]	@ (8022f34 <prvInitialiseTaskLists+0x7c>)
 8022f0a:	4a05      	ldr	r2, [pc, #20]	@ (8022f20 <prvInitialiseTaskLists+0x68>)
 8022f0c:	601a      	str	r2, [r3, #0]
}
 8022f0e:	bf00      	nop
 8022f10:	3708      	adds	r7, #8
 8022f12:	46bd      	mov	sp, r7
 8022f14:	bd80      	pop	{r7, pc}
 8022f16:	bf00      	nop
 8022f18:	24008394 	.word	0x24008394
 8022f1c:	240087f4 	.word	0x240087f4
 8022f20:	24008808 	.word	0x24008808
 8022f24:	24008824 	.word	0x24008824
 8022f28:	24008838 	.word	0x24008838
 8022f2c:	24008850 	.word	0x24008850
 8022f30:	2400881c 	.word	0x2400881c
 8022f34:	24008820 	.word	0x24008820

08022f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8022f38:	b580      	push	{r7, lr}
 8022f3a:	b082      	sub	sp, #8
 8022f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022f3e:	e019      	b.n	8022f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022f40:	f7fe fc0a 	bl	8021758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022f44:	4b10      	ldr	r3, [pc, #64]	@ (8022f88 <prvCheckTasksWaitingTermination+0x50>)
 8022f46:	68db      	ldr	r3, [r3, #12]
 8022f48:	68db      	ldr	r3, [r3, #12]
 8022f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	3304      	adds	r3, #4
 8022f50:	4618      	mov	r0, r3
 8022f52:	f7fe faa9 	bl	80214a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8022f56:	4b0d      	ldr	r3, [pc, #52]	@ (8022f8c <prvCheckTasksWaitingTermination+0x54>)
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	3b01      	subs	r3, #1
 8022f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8022f8c <prvCheckTasksWaitingTermination+0x54>)
 8022f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022f60:	4b0b      	ldr	r3, [pc, #44]	@ (8022f90 <prvCheckTasksWaitingTermination+0x58>)
 8022f62:	681b      	ldr	r3, [r3, #0]
 8022f64:	3b01      	subs	r3, #1
 8022f66:	4a0a      	ldr	r2, [pc, #40]	@ (8022f90 <prvCheckTasksWaitingTermination+0x58>)
 8022f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8022f6a:	f7fe fc27 	bl	80217bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8022f6e:	6878      	ldr	r0, [r7, #4]
 8022f70:	f000 f810 	bl	8022f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022f74:	4b06      	ldr	r3, [pc, #24]	@ (8022f90 <prvCheckTasksWaitingTermination+0x58>)
 8022f76:	681b      	ldr	r3, [r3, #0]
 8022f78:	2b00      	cmp	r3, #0
 8022f7a:	d1e1      	bne.n	8022f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022f7c:	bf00      	nop
 8022f7e:	bf00      	nop
 8022f80:	3708      	adds	r7, #8
 8022f82:	46bd      	mov	sp, r7
 8022f84:	bd80      	pop	{r7, pc}
 8022f86:	bf00      	nop
 8022f88:	24008838 	.word	0x24008838
 8022f8c:	24008864 	.word	0x24008864
 8022f90:	2400884c 	.word	0x2400884c

08022f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8022f94:	b580      	push	{r7, lr}
 8022f96:	b084      	sub	sp, #16
 8022f98:	af00      	add	r7, sp, #0
 8022f9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	3354      	adds	r3, #84	@ 0x54
 8022fa0:	4618      	mov	r0, r3
 8022fa2:	f001 ffd5 	bl	8024f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d108      	bne.n	8022fc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022fb4:	4618      	mov	r0, r3
 8022fb6:	f7fe f8cd 	bl	8021154 <vPortFree>
				vPortFree( pxTCB );
 8022fba:	6878      	ldr	r0, [r7, #4]
 8022fbc:	f7fe f8ca 	bl	8021154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022fc0:	e019      	b.n	8022ff6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8022fc8:	2b01      	cmp	r3, #1
 8022fca:	d103      	bne.n	8022fd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022fcc:	6878      	ldr	r0, [r7, #4]
 8022fce:	f7fe f8c1 	bl	8021154 <vPortFree>
	}
 8022fd2:	e010      	b.n	8022ff6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8022fda:	2b02      	cmp	r3, #2
 8022fdc:	d00b      	beq.n	8022ff6 <prvDeleteTCB+0x62>
	__asm volatile
 8022fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022fe2:	f383 8811 	msr	BASEPRI, r3
 8022fe6:	f3bf 8f6f 	isb	sy
 8022fea:	f3bf 8f4f 	dsb	sy
 8022fee:	60fb      	str	r3, [r7, #12]
}
 8022ff0:	bf00      	nop
 8022ff2:	bf00      	nop
 8022ff4:	e7fd      	b.n	8022ff2 <prvDeleteTCB+0x5e>
	}
 8022ff6:	bf00      	nop
 8022ff8:	3710      	adds	r7, #16
 8022ffa:	46bd      	mov	sp, r7
 8022ffc:	bd80      	pop	{r7, pc}
	...

08023000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8023000:	b480      	push	{r7}
 8023002:	b083      	sub	sp, #12
 8023004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8023006:	4b0c      	ldr	r3, [pc, #48]	@ (8023038 <prvResetNextTaskUnblockTime+0x38>)
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	681b      	ldr	r3, [r3, #0]
 802300c:	2b00      	cmp	r3, #0
 802300e:	d104      	bne.n	802301a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8023010:	4b0a      	ldr	r3, [pc, #40]	@ (802303c <prvResetNextTaskUnblockTime+0x3c>)
 8023012:	f04f 32ff 	mov.w	r2, #4294967295
 8023016:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8023018:	e008      	b.n	802302c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802301a:	4b07      	ldr	r3, [pc, #28]	@ (8023038 <prvResetNextTaskUnblockTime+0x38>)
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	68db      	ldr	r3, [r3, #12]
 8023020:	68db      	ldr	r3, [r3, #12]
 8023022:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	685b      	ldr	r3, [r3, #4]
 8023028:	4a04      	ldr	r2, [pc, #16]	@ (802303c <prvResetNextTaskUnblockTime+0x3c>)
 802302a:	6013      	str	r3, [r2, #0]
}
 802302c:	bf00      	nop
 802302e:	370c      	adds	r7, #12
 8023030:	46bd      	mov	sp, r7
 8023032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023036:	4770      	bx	lr
 8023038:	2400881c 	.word	0x2400881c
 802303c:	24008884 	.word	0x24008884

08023040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8023040:	b480      	push	{r7}
 8023042:	b083      	sub	sp, #12
 8023044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8023046:	4b0b      	ldr	r3, [pc, #44]	@ (8023074 <xTaskGetSchedulerState+0x34>)
 8023048:	681b      	ldr	r3, [r3, #0]
 802304a:	2b00      	cmp	r3, #0
 802304c:	d102      	bne.n	8023054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802304e:	2301      	movs	r3, #1
 8023050:	607b      	str	r3, [r7, #4]
 8023052:	e008      	b.n	8023066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8023054:	4b08      	ldr	r3, [pc, #32]	@ (8023078 <xTaskGetSchedulerState+0x38>)
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	2b00      	cmp	r3, #0
 802305a:	d102      	bne.n	8023062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802305c:	2302      	movs	r3, #2
 802305e:	607b      	str	r3, [r7, #4]
 8023060:	e001      	b.n	8023066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8023062:	2300      	movs	r3, #0
 8023064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8023066:	687b      	ldr	r3, [r7, #4]
	}
 8023068:	4618      	mov	r0, r3
 802306a:	370c      	adds	r7, #12
 802306c:	46bd      	mov	sp, r7
 802306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023072:	4770      	bx	lr
 8023074:	24008870 	.word	0x24008870
 8023078:	2400888c 	.word	0x2400888c

0802307c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802307c:	b580      	push	{r7, lr}
 802307e:	b086      	sub	sp, #24
 8023080:	af00      	add	r7, sp, #0
 8023082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8023088:	2300      	movs	r3, #0
 802308a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	2b00      	cmp	r3, #0
 8023090:	d058      	beq.n	8023144 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8023092:	4b2f      	ldr	r3, [pc, #188]	@ (8023150 <xTaskPriorityDisinherit+0xd4>)
 8023094:	681b      	ldr	r3, [r3, #0]
 8023096:	693a      	ldr	r2, [r7, #16]
 8023098:	429a      	cmp	r2, r3
 802309a:	d00b      	beq.n	80230b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 802309c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80230a0:	f383 8811 	msr	BASEPRI, r3
 80230a4:	f3bf 8f6f 	isb	sy
 80230a8:	f3bf 8f4f 	dsb	sy
 80230ac:	60fb      	str	r3, [r7, #12]
}
 80230ae:	bf00      	nop
 80230b0:	bf00      	nop
 80230b2:	e7fd      	b.n	80230b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80230b4:	693b      	ldr	r3, [r7, #16]
 80230b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80230b8:	2b00      	cmp	r3, #0
 80230ba:	d10b      	bne.n	80230d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80230bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80230c0:	f383 8811 	msr	BASEPRI, r3
 80230c4:	f3bf 8f6f 	isb	sy
 80230c8:	f3bf 8f4f 	dsb	sy
 80230cc:	60bb      	str	r3, [r7, #8]
}
 80230ce:	bf00      	nop
 80230d0:	bf00      	nop
 80230d2:	e7fd      	b.n	80230d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80230d4:	693b      	ldr	r3, [r7, #16]
 80230d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80230d8:	1e5a      	subs	r2, r3, #1
 80230da:	693b      	ldr	r3, [r7, #16]
 80230dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80230de:	693b      	ldr	r3, [r7, #16]
 80230e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80230e2:	693b      	ldr	r3, [r7, #16]
 80230e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80230e6:	429a      	cmp	r2, r3
 80230e8:	d02c      	beq.n	8023144 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80230ea:	693b      	ldr	r3, [r7, #16]
 80230ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80230ee:	2b00      	cmp	r3, #0
 80230f0:	d128      	bne.n	8023144 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80230f2:	693b      	ldr	r3, [r7, #16]
 80230f4:	3304      	adds	r3, #4
 80230f6:	4618      	mov	r0, r3
 80230f8:	f7fe f9d6 	bl	80214a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80230fc:	693b      	ldr	r3, [r7, #16]
 80230fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8023100:	693b      	ldr	r3, [r7, #16]
 8023102:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023104:	693b      	ldr	r3, [r7, #16]
 8023106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023108:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 802310c:	693b      	ldr	r3, [r7, #16]
 802310e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8023110:	693b      	ldr	r3, [r7, #16]
 8023112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8023114:	4b0f      	ldr	r3, [pc, #60]	@ (8023154 <xTaskPriorityDisinherit+0xd8>)
 8023116:	681b      	ldr	r3, [r3, #0]
 8023118:	429a      	cmp	r2, r3
 802311a:	d903      	bls.n	8023124 <xTaskPriorityDisinherit+0xa8>
 802311c:	693b      	ldr	r3, [r7, #16]
 802311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023120:	4a0c      	ldr	r2, [pc, #48]	@ (8023154 <xTaskPriorityDisinherit+0xd8>)
 8023122:	6013      	str	r3, [r2, #0]
 8023124:	693b      	ldr	r3, [r7, #16]
 8023126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8023128:	4613      	mov	r3, r2
 802312a:	009b      	lsls	r3, r3, #2
 802312c:	4413      	add	r3, r2
 802312e:	009b      	lsls	r3, r3, #2
 8023130:	4a09      	ldr	r2, [pc, #36]	@ (8023158 <xTaskPriorityDisinherit+0xdc>)
 8023132:	441a      	add	r2, r3
 8023134:	693b      	ldr	r3, [r7, #16]
 8023136:	3304      	adds	r3, #4
 8023138:	4619      	mov	r1, r3
 802313a:	4610      	mov	r0, r2
 802313c:	f7fe f957 	bl	80213ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8023140:	2301      	movs	r3, #1
 8023142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8023144:	697b      	ldr	r3, [r7, #20]
	}
 8023146:	4618      	mov	r0, r3
 8023148:	3718      	adds	r7, #24
 802314a:	46bd      	mov	sp, r7
 802314c:	bd80      	pop	{r7, pc}
 802314e:	bf00      	nop
 8023150:	24008390 	.word	0x24008390
 8023154:	2400886c 	.word	0x2400886c
 8023158:	24008394 	.word	0x24008394

0802315c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802315c:	b580      	push	{r7, lr}
 802315e:	b084      	sub	sp, #16
 8023160:	af00      	add	r7, sp, #0
 8023162:	6078      	str	r0, [r7, #4]
 8023164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8023166:	4b21      	ldr	r3, [pc, #132]	@ (80231ec <prvAddCurrentTaskToDelayedList+0x90>)
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802316c:	4b20      	ldr	r3, [pc, #128]	@ (80231f0 <prvAddCurrentTaskToDelayedList+0x94>)
 802316e:	681b      	ldr	r3, [r3, #0]
 8023170:	3304      	adds	r3, #4
 8023172:	4618      	mov	r0, r3
 8023174:	f7fe f998 	bl	80214a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802317e:	d10a      	bne.n	8023196 <prvAddCurrentTaskToDelayedList+0x3a>
 8023180:	683b      	ldr	r3, [r7, #0]
 8023182:	2b00      	cmp	r3, #0
 8023184:	d007      	beq.n	8023196 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8023186:	4b1a      	ldr	r3, [pc, #104]	@ (80231f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8023188:	681b      	ldr	r3, [r3, #0]
 802318a:	3304      	adds	r3, #4
 802318c:	4619      	mov	r1, r3
 802318e:	4819      	ldr	r0, [pc, #100]	@ (80231f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8023190:	f7fe f92d 	bl	80213ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8023194:	e026      	b.n	80231e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8023196:	68fa      	ldr	r2, [r7, #12]
 8023198:	687b      	ldr	r3, [r7, #4]
 802319a:	4413      	add	r3, r2
 802319c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802319e:	4b14      	ldr	r3, [pc, #80]	@ (80231f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80231a0:	681b      	ldr	r3, [r3, #0]
 80231a2:	68ba      	ldr	r2, [r7, #8]
 80231a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80231a6:	68ba      	ldr	r2, [r7, #8]
 80231a8:	68fb      	ldr	r3, [r7, #12]
 80231aa:	429a      	cmp	r2, r3
 80231ac:	d209      	bcs.n	80231c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80231ae:	4b12      	ldr	r3, [pc, #72]	@ (80231f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80231b0:	681a      	ldr	r2, [r3, #0]
 80231b2:	4b0f      	ldr	r3, [pc, #60]	@ (80231f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80231b4:	681b      	ldr	r3, [r3, #0]
 80231b6:	3304      	adds	r3, #4
 80231b8:	4619      	mov	r1, r3
 80231ba:	4610      	mov	r0, r2
 80231bc:	f7fe f93b 	bl	8021436 <vListInsert>
}
 80231c0:	e010      	b.n	80231e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80231c2:	4b0e      	ldr	r3, [pc, #56]	@ (80231fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80231c4:	681a      	ldr	r2, [r3, #0]
 80231c6:	4b0a      	ldr	r3, [pc, #40]	@ (80231f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80231c8:	681b      	ldr	r3, [r3, #0]
 80231ca:	3304      	adds	r3, #4
 80231cc:	4619      	mov	r1, r3
 80231ce:	4610      	mov	r0, r2
 80231d0:	f7fe f931 	bl	8021436 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80231d4:	4b0a      	ldr	r3, [pc, #40]	@ (8023200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	68ba      	ldr	r2, [r7, #8]
 80231da:	429a      	cmp	r2, r3
 80231dc:	d202      	bcs.n	80231e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80231de:	4a08      	ldr	r2, [pc, #32]	@ (8023200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80231e0:	68bb      	ldr	r3, [r7, #8]
 80231e2:	6013      	str	r3, [r2, #0]
}
 80231e4:	bf00      	nop
 80231e6:	3710      	adds	r7, #16
 80231e8:	46bd      	mov	sp, r7
 80231ea:	bd80      	pop	{r7, pc}
 80231ec:	24008868 	.word	0x24008868
 80231f0:	24008390 	.word	0x24008390
 80231f4:	24008850 	.word	0x24008850
 80231f8:	24008820 	.word	0x24008820
 80231fc:	2400881c 	.word	0x2400881c
 8023200:	24008884 	.word	0x24008884

08023204 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8023204:	b580      	push	{r7, lr}
 8023206:	b08a      	sub	sp, #40	@ 0x28
 8023208:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802320a:	2300      	movs	r3, #0
 802320c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802320e:	f000 fb13 	bl	8023838 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8023212:	4b1d      	ldr	r3, [pc, #116]	@ (8023288 <xTimerCreateTimerTask+0x84>)
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	2b00      	cmp	r3, #0
 8023218:	d021      	beq.n	802325e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802321a:	2300      	movs	r3, #0
 802321c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802321e:	2300      	movs	r3, #0
 8023220:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8023222:	1d3a      	adds	r2, r7, #4
 8023224:	f107 0108 	add.w	r1, r7, #8
 8023228:	f107 030c 	add.w	r3, r7, #12
 802322c:	4618      	mov	r0, r3
 802322e:	f7fd fea9 	bl	8020f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8023232:	6879      	ldr	r1, [r7, #4]
 8023234:	68bb      	ldr	r3, [r7, #8]
 8023236:	68fa      	ldr	r2, [r7, #12]
 8023238:	9202      	str	r2, [sp, #8]
 802323a:	9301      	str	r3, [sp, #4]
 802323c:	2302      	movs	r3, #2
 802323e:	9300      	str	r3, [sp, #0]
 8023240:	2300      	movs	r3, #0
 8023242:	460a      	mov	r2, r1
 8023244:	4911      	ldr	r1, [pc, #68]	@ (802328c <xTimerCreateTimerTask+0x88>)
 8023246:	4812      	ldr	r0, [pc, #72]	@ (8023290 <xTimerCreateTimerTask+0x8c>)
 8023248:	f7ff f8a2 	bl	8022390 <xTaskCreateStatic>
 802324c:	4603      	mov	r3, r0
 802324e:	4a11      	ldr	r2, [pc, #68]	@ (8023294 <xTimerCreateTimerTask+0x90>)
 8023250:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8023252:	4b10      	ldr	r3, [pc, #64]	@ (8023294 <xTimerCreateTimerTask+0x90>)
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	2b00      	cmp	r3, #0
 8023258:	d001      	beq.n	802325e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802325a:	2301      	movs	r3, #1
 802325c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802325e:	697b      	ldr	r3, [r7, #20]
 8023260:	2b00      	cmp	r3, #0
 8023262:	d10b      	bne.n	802327c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8023264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023268:	f383 8811 	msr	BASEPRI, r3
 802326c:	f3bf 8f6f 	isb	sy
 8023270:	f3bf 8f4f 	dsb	sy
 8023274:	613b      	str	r3, [r7, #16]
}
 8023276:	bf00      	nop
 8023278:	bf00      	nop
 802327a:	e7fd      	b.n	8023278 <xTimerCreateTimerTask+0x74>
	return xReturn;
 802327c:	697b      	ldr	r3, [r7, #20]
}
 802327e:	4618      	mov	r0, r3
 8023280:	3718      	adds	r7, #24
 8023282:	46bd      	mov	sp, r7
 8023284:	bd80      	pop	{r7, pc}
 8023286:	bf00      	nop
 8023288:	240088c0 	.word	0x240088c0
 802328c:	0802bdac 	.word	0x0802bdac
 8023290:	080233d1 	.word	0x080233d1
 8023294:	240088c4 	.word	0x240088c4

08023298 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8023298:	b580      	push	{r7, lr}
 802329a:	b08a      	sub	sp, #40	@ 0x28
 802329c:	af00      	add	r7, sp, #0
 802329e:	60f8      	str	r0, [r7, #12]
 80232a0:	60b9      	str	r1, [r7, #8]
 80232a2:	607a      	str	r2, [r7, #4]
 80232a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80232a6:	2300      	movs	r3, #0
 80232a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80232aa:	68fb      	ldr	r3, [r7, #12]
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d10b      	bne.n	80232c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80232b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80232b4:	f383 8811 	msr	BASEPRI, r3
 80232b8:	f3bf 8f6f 	isb	sy
 80232bc:	f3bf 8f4f 	dsb	sy
 80232c0:	623b      	str	r3, [r7, #32]
}
 80232c2:	bf00      	nop
 80232c4:	bf00      	nop
 80232c6:	e7fd      	b.n	80232c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80232c8:	4b19      	ldr	r3, [pc, #100]	@ (8023330 <xTimerGenericCommand+0x98>)
 80232ca:	681b      	ldr	r3, [r3, #0]
 80232cc:	2b00      	cmp	r3, #0
 80232ce:	d02a      	beq.n	8023326 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80232d0:	68bb      	ldr	r3, [r7, #8]
 80232d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80232d8:	68fb      	ldr	r3, [r7, #12]
 80232da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80232dc:	68bb      	ldr	r3, [r7, #8]
 80232de:	2b05      	cmp	r3, #5
 80232e0:	dc18      	bgt.n	8023314 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80232e2:	f7ff fead 	bl	8023040 <xTaskGetSchedulerState>
 80232e6:	4603      	mov	r3, r0
 80232e8:	2b02      	cmp	r3, #2
 80232ea:	d109      	bne.n	8023300 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80232ec:	4b10      	ldr	r3, [pc, #64]	@ (8023330 <xTimerGenericCommand+0x98>)
 80232ee:	6818      	ldr	r0, [r3, #0]
 80232f0:	f107 0110 	add.w	r1, r7, #16
 80232f4:	2300      	movs	r3, #0
 80232f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80232f8:	f7fe fc5a 	bl	8021bb0 <xQueueGenericSend>
 80232fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80232fe:	e012      	b.n	8023326 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8023300:	4b0b      	ldr	r3, [pc, #44]	@ (8023330 <xTimerGenericCommand+0x98>)
 8023302:	6818      	ldr	r0, [r3, #0]
 8023304:	f107 0110 	add.w	r1, r7, #16
 8023308:	2300      	movs	r3, #0
 802330a:	2200      	movs	r2, #0
 802330c:	f7fe fc50 	bl	8021bb0 <xQueueGenericSend>
 8023310:	6278      	str	r0, [r7, #36]	@ 0x24
 8023312:	e008      	b.n	8023326 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8023314:	4b06      	ldr	r3, [pc, #24]	@ (8023330 <xTimerGenericCommand+0x98>)
 8023316:	6818      	ldr	r0, [r3, #0]
 8023318:	f107 0110 	add.w	r1, r7, #16
 802331c:	2300      	movs	r3, #0
 802331e:	683a      	ldr	r2, [r7, #0]
 8023320:	f7fe fd48 	bl	8021db4 <xQueueGenericSendFromISR>
 8023324:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8023326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8023328:	4618      	mov	r0, r3
 802332a:	3728      	adds	r7, #40	@ 0x28
 802332c:	46bd      	mov	sp, r7
 802332e:	bd80      	pop	{r7, pc}
 8023330:	240088c0 	.word	0x240088c0

08023334 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8023334:	b580      	push	{r7, lr}
 8023336:	b088      	sub	sp, #32
 8023338:	af02      	add	r7, sp, #8
 802333a:	6078      	str	r0, [r7, #4]
 802333c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802333e:	4b23      	ldr	r3, [pc, #140]	@ (80233cc <prvProcessExpiredTimer+0x98>)
 8023340:	681b      	ldr	r3, [r3, #0]
 8023342:	68db      	ldr	r3, [r3, #12]
 8023344:	68db      	ldr	r3, [r3, #12]
 8023346:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023348:	697b      	ldr	r3, [r7, #20]
 802334a:	3304      	adds	r3, #4
 802334c:	4618      	mov	r0, r3
 802334e:	f7fe f8ab 	bl	80214a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023352:	697b      	ldr	r3, [r7, #20]
 8023354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023358:	f003 0304 	and.w	r3, r3, #4
 802335c:	2b00      	cmp	r3, #0
 802335e:	d023      	beq.n	80233a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8023360:	697b      	ldr	r3, [r7, #20]
 8023362:	699a      	ldr	r2, [r3, #24]
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	18d1      	adds	r1, r2, r3
 8023368:	687b      	ldr	r3, [r7, #4]
 802336a:	683a      	ldr	r2, [r7, #0]
 802336c:	6978      	ldr	r0, [r7, #20]
 802336e:	f000 f8d5 	bl	802351c <prvInsertTimerInActiveList>
 8023372:	4603      	mov	r3, r0
 8023374:	2b00      	cmp	r3, #0
 8023376:	d020      	beq.n	80233ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8023378:	2300      	movs	r3, #0
 802337a:	9300      	str	r3, [sp, #0]
 802337c:	2300      	movs	r3, #0
 802337e:	687a      	ldr	r2, [r7, #4]
 8023380:	2100      	movs	r1, #0
 8023382:	6978      	ldr	r0, [r7, #20]
 8023384:	f7ff ff88 	bl	8023298 <xTimerGenericCommand>
 8023388:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802338a:	693b      	ldr	r3, [r7, #16]
 802338c:	2b00      	cmp	r3, #0
 802338e:	d114      	bne.n	80233ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8023390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023394:	f383 8811 	msr	BASEPRI, r3
 8023398:	f3bf 8f6f 	isb	sy
 802339c:	f3bf 8f4f 	dsb	sy
 80233a0:	60fb      	str	r3, [r7, #12]
}
 80233a2:	bf00      	nop
 80233a4:	bf00      	nop
 80233a6:	e7fd      	b.n	80233a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80233a8:	697b      	ldr	r3, [r7, #20]
 80233aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80233ae:	f023 0301 	bic.w	r3, r3, #1
 80233b2:	b2da      	uxtb	r2, r3
 80233b4:	697b      	ldr	r3, [r7, #20]
 80233b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80233ba:	697b      	ldr	r3, [r7, #20]
 80233bc:	6a1b      	ldr	r3, [r3, #32]
 80233be:	6978      	ldr	r0, [r7, #20]
 80233c0:	4798      	blx	r3
}
 80233c2:	bf00      	nop
 80233c4:	3718      	adds	r7, #24
 80233c6:	46bd      	mov	sp, r7
 80233c8:	bd80      	pop	{r7, pc}
 80233ca:	bf00      	nop
 80233cc:	240088b8 	.word	0x240088b8

080233d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80233d0:	b580      	push	{r7, lr}
 80233d2:	b084      	sub	sp, #16
 80233d4:	af00      	add	r7, sp, #0
 80233d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80233d8:	f107 0308 	add.w	r3, r7, #8
 80233dc:	4618      	mov	r0, r3
 80233de:	f000 f859 	bl	8023494 <prvGetNextExpireTime>
 80233e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80233e4:	68bb      	ldr	r3, [r7, #8]
 80233e6:	4619      	mov	r1, r3
 80233e8:	68f8      	ldr	r0, [r7, #12]
 80233ea:	f000 f805 	bl	80233f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80233ee:	f000 f8d7 	bl	80235a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80233f2:	bf00      	nop
 80233f4:	e7f0      	b.n	80233d8 <prvTimerTask+0x8>
	...

080233f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80233f8:	b580      	push	{r7, lr}
 80233fa:	b084      	sub	sp, #16
 80233fc:	af00      	add	r7, sp, #0
 80233fe:	6078      	str	r0, [r7, #4]
 8023400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8023402:	f7ff fa29 	bl	8022858 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8023406:	f107 0308 	add.w	r3, r7, #8
 802340a:	4618      	mov	r0, r3
 802340c:	f000 f866 	bl	80234dc <prvSampleTimeNow>
 8023410:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8023412:	68bb      	ldr	r3, [r7, #8]
 8023414:	2b00      	cmp	r3, #0
 8023416:	d130      	bne.n	802347a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8023418:	683b      	ldr	r3, [r7, #0]
 802341a:	2b00      	cmp	r3, #0
 802341c:	d10a      	bne.n	8023434 <prvProcessTimerOrBlockTask+0x3c>
 802341e:	687a      	ldr	r2, [r7, #4]
 8023420:	68fb      	ldr	r3, [r7, #12]
 8023422:	429a      	cmp	r2, r3
 8023424:	d806      	bhi.n	8023434 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8023426:	f7ff fa25 	bl	8022874 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802342a:	68f9      	ldr	r1, [r7, #12]
 802342c:	6878      	ldr	r0, [r7, #4]
 802342e:	f7ff ff81 	bl	8023334 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8023432:	e024      	b.n	802347e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8023434:	683b      	ldr	r3, [r7, #0]
 8023436:	2b00      	cmp	r3, #0
 8023438:	d008      	beq.n	802344c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802343a:	4b13      	ldr	r3, [pc, #76]	@ (8023488 <prvProcessTimerOrBlockTask+0x90>)
 802343c:	681b      	ldr	r3, [r3, #0]
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	2b00      	cmp	r3, #0
 8023442:	d101      	bne.n	8023448 <prvProcessTimerOrBlockTask+0x50>
 8023444:	2301      	movs	r3, #1
 8023446:	e000      	b.n	802344a <prvProcessTimerOrBlockTask+0x52>
 8023448:	2300      	movs	r3, #0
 802344a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802344c:	4b0f      	ldr	r3, [pc, #60]	@ (802348c <prvProcessTimerOrBlockTask+0x94>)
 802344e:	6818      	ldr	r0, [r3, #0]
 8023450:	687a      	ldr	r2, [r7, #4]
 8023452:	68fb      	ldr	r3, [r7, #12]
 8023454:	1ad3      	subs	r3, r2, r3
 8023456:	683a      	ldr	r2, [r7, #0]
 8023458:	4619      	mov	r1, r3
 802345a:	f7fe ff65 	bl	8022328 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802345e:	f7ff fa09 	bl	8022874 <xTaskResumeAll>
 8023462:	4603      	mov	r3, r0
 8023464:	2b00      	cmp	r3, #0
 8023466:	d10a      	bne.n	802347e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8023468:	4b09      	ldr	r3, [pc, #36]	@ (8023490 <prvProcessTimerOrBlockTask+0x98>)
 802346a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802346e:	601a      	str	r2, [r3, #0]
 8023470:	f3bf 8f4f 	dsb	sy
 8023474:	f3bf 8f6f 	isb	sy
}
 8023478:	e001      	b.n	802347e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802347a:	f7ff f9fb 	bl	8022874 <xTaskResumeAll>
}
 802347e:	bf00      	nop
 8023480:	3710      	adds	r7, #16
 8023482:	46bd      	mov	sp, r7
 8023484:	bd80      	pop	{r7, pc}
 8023486:	bf00      	nop
 8023488:	240088bc 	.word	0x240088bc
 802348c:	240088c0 	.word	0x240088c0
 8023490:	e000ed04 	.word	0xe000ed04

08023494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8023494:	b480      	push	{r7}
 8023496:	b085      	sub	sp, #20
 8023498:	af00      	add	r7, sp, #0
 802349a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 802349c:	4b0e      	ldr	r3, [pc, #56]	@ (80234d8 <prvGetNextExpireTime+0x44>)
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d101      	bne.n	80234aa <prvGetNextExpireTime+0x16>
 80234a6:	2201      	movs	r2, #1
 80234a8:	e000      	b.n	80234ac <prvGetNextExpireTime+0x18>
 80234aa:	2200      	movs	r2, #0
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80234b0:	687b      	ldr	r3, [r7, #4]
 80234b2:	681b      	ldr	r3, [r3, #0]
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	d105      	bne.n	80234c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80234b8:	4b07      	ldr	r3, [pc, #28]	@ (80234d8 <prvGetNextExpireTime+0x44>)
 80234ba:	681b      	ldr	r3, [r3, #0]
 80234bc:	68db      	ldr	r3, [r3, #12]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	60fb      	str	r3, [r7, #12]
 80234c2:	e001      	b.n	80234c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80234c4:	2300      	movs	r3, #0
 80234c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80234c8:	68fb      	ldr	r3, [r7, #12]
}
 80234ca:	4618      	mov	r0, r3
 80234cc:	3714      	adds	r7, #20
 80234ce:	46bd      	mov	sp, r7
 80234d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d4:	4770      	bx	lr
 80234d6:	bf00      	nop
 80234d8:	240088b8 	.word	0x240088b8

080234dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80234dc:	b580      	push	{r7, lr}
 80234de:	b084      	sub	sp, #16
 80234e0:	af00      	add	r7, sp, #0
 80234e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80234e4:	f7ff fa64 	bl	80229b0 <xTaskGetTickCount>
 80234e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80234ea:	4b0b      	ldr	r3, [pc, #44]	@ (8023518 <prvSampleTimeNow+0x3c>)
 80234ec:	681b      	ldr	r3, [r3, #0]
 80234ee:	68fa      	ldr	r2, [r7, #12]
 80234f0:	429a      	cmp	r2, r3
 80234f2:	d205      	bcs.n	8023500 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80234f4:	f000 f93a 	bl	802376c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	2201      	movs	r2, #1
 80234fc:	601a      	str	r2, [r3, #0]
 80234fe:	e002      	b.n	8023506 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	2200      	movs	r2, #0
 8023504:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8023506:	4a04      	ldr	r2, [pc, #16]	@ (8023518 <prvSampleTimeNow+0x3c>)
 8023508:	68fb      	ldr	r3, [r7, #12]
 802350a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802350c:	68fb      	ldr	r3, [r7, #12]
}
 802350e:	4618      	mov	r0, r3
 8023510:	3710      	adds	r7, #16
 8023512:	46bd      	mov	sp, r7
 8023514:	bd80      	pop	{r7, pc}
 8023516:	bf00      	nop
 8023518:	240088c8 	.word	0x240088c8

0802351c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802351c:	b580      	push	{r7, lr}
 802351e:	b086      	sub	sp, #24
 8023520:	af00      	add	r7, sp, #0
 8023522:	60f8      	str	r0, [r7, #12]
 8023524:	60b9      	str	r1, [r7, #8]
 8023526:	607a      	str	r2, [r7, #4]
 8023528:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802352a:	2300      	movs	r3, #0
 802352c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802352e:	68fb      	ldr	r3, [r7, #12]
 8023530:	68ba      	ldr	r2, [r7, #8]
 8023532:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8023534:	68fb      	ldr	r3, [r7, #12]
 8023536:	68fa      	ldr	r2, [r7, #12]
 8023538:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802353a:	68ba      	ldr	r2, [r7, #8]
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	429a      	cmp	r2, r3
 8023540:	d812      	bhi.n	8023568 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023542:	687a      	ldr	r2, [r7, #4]
 8023544:	683b      	ldr	r3, [r7, #0]
 8023546:	1ad2      	subs	r2, r2, r3
 8023548:	68fb      	ldr	r3, [r7, #12]
 802354a:	699b      	ldr	r3, [r3, #24]
 802354c:	429a      	cmp	r2, r3
 802354e:	d302      	bcc.n	8023556 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8023550:	2301      	movs	r3, #1
 8023552:	617b      	str	r3, [r7, #20]
 8023554:	e01b      	b.n	802358e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8023556:	4b10      	ldr	r3, [pc, #64]	@ (8023598 <prvInsertTimerInActiveList+0x7c>)
 8023558:	681a      	ldr	r2, [r3, #0]
 802355a:	68fb      	ldr	r3, [r7, #12]
 802355c:	3304      	adds	r3, #4
 802355e:	4619      	mov	r1, r3
 8023560:	4610      	mov	r0, r2
 8023562:	f7fd ff68 	bl	8021436 <vListInsert>
 8023566:	e012      	b.n	802358e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8023568:	687a      	ldr	r2, [r7, #4]
 802356a:	683b      	ldr	r3, [r7, #0]
 802356c:	429a      	cmp	r2, r3
 802356e:	d206      	bcs.n	802357e <prvInsertTimerInActiveList+0x62>
 8023570:	68ba      	ldr	r2, [r7, #8]
 8023572:	683b      	ldr	r3, [r7, #0]
 8023574:	429a      	cmp	r2, r3
 8023576:	d302      	bcc.n	802357e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8023578:	2301      	movs	r3, #1
 802357a:	617b      	str	r3, [r7, #20]
 802357c:	e007      	b.n	802358e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802357e:	4b07      	ldr	r3, [pc, #28]	@ (802359c <prvInsertTimerInActiveList+0x80>)
 8023580:	681a      	ldr	r2, [r3, #0]
 8023582:	68fb      	ldr	r3, [r7, #12]
 8023584:	3304      	adds	r3, #4
 8023586:	4619      	mov	r1, r3
 8023588:	4610      	mov	r0, r2
 802358a:	f7fd ff54 	bl	8021436 <vListInsert>
		}
	}

	return xProcessTimerNow;
 802358e:	697b      	ldr	r3, [r7, #20]
}
 8023590:	4618      	mov	r0, r3
 8023592:	3718      	adds	r7, #24
 8023594:	46bd      	mov	sp, r7
 8023596:	bd80      	pop	{r7, pc}
 8023598:	240088bc 	.word	0x240088bc
 802359c:	240088b8 	.word	0x240088b8

080235a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80235a0:	b580      	push	{r7, lr}
 80235a2:	b08e      	sub	sp, #56	@ 0x38
 80235a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80235a6:	e0ce      	b.n	8023746 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	2b00      	cmp	r3, #0
 80235ac:	da19      	bge.n	80235e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80235ae:	1d3b      	adds	r3, r7, #4
 80235b0:	3304      	adds	r3, #4
 80235b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80235b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d10b      	bne.n	80235d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80235ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80235be:	f383 8811 	msr	BASEPRI, r3
 80235c2:	f3bf 8f6f 	isb	sy
 80235c6:	f3bf 8f4f 	dsb	sy
 80235ca:	61fb      	str	r3, [r7, #28]
}
 80235cc:	bf00      	nop
 80235ce:	bf00      	nop
 80235d0:	e7fd      	b.n	80235ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80235d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235d4:	681b      	ldr	r3, [r3, #0]
 80235d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80235d8:	6850      	ldr	r0, [r2, #4]
 80235da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80235dc:	6892      	ldr	r2, [r2, #8]
 80235de:	4611      	mov	r1, r2
 80235e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	f2c0 80ae 	blt.w	8023746 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80235ea:	68fb      	ldr	r3, [r7, #12]
 80235ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80235ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235f0:	695b      	ldr	r3, [r3, #20]
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d004      	beq.n	8023600 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80235f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235f8:	3304      	adds	r3, #4
 80235fa:	4618      	mov	r0, r3
 80235fc:	f7fd ff54 	bl	80214a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8023600:	463b      	mov	r3, r7
 8023602:	4618      	mov	r0, r3
 8023604:	f7ff ff6a 	bl	80234dc <prvSampleTimeNow>
 8023608:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	2b09      	cmp	r3, #9
 802360e:	f200 8097 	bhi.w	8023740 <prvProcessReceivedCommands+0x1a0>
 8023612:	a201      	add	r2, pc, #4	@ (adr r2, 8023618 <prvProcessReceivedCommands+0x78>)
 8023614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023618:	08023641 	.word	0x08023641
 802361c:	08023641 	.word	0x08023641
 8023620:	08023641 	.word	0x08023641
 8023624:	080236b7 	.word	0x080236b7
 8023628:	080236cb 	.word	0x080236cb
 802362c:	08023717 	.word	0x08023717
 8023630:	08023641 	.word	0x08023641
 8023634:	08023641 	.word	0x08023641
 8023638:	080236b7 	.word	0x080236b7
 802363c:	080236cb 	.word	0x080236cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023646:	f043 0301 	orr.w	r3, r3, #1
 802364a:	b2da      	uxtb	r2, r3
 802364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802364e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8023652:	68ba      	ldr	r2, [r7, #8]
 8023654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023656:	699b      	ldr	r3, [r3, #24]
 8023658:	18d1      	adds	r1, r2, r3
 802365a:	68bb      	ldr	r3, [r7, #8]
 802365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802365e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023660:	f7ff ff5c 	bl	802351c <prvInsertTimerInActiveList>
 8023664:	4603      	mov	r3, r0
 8023666:	2b00      	cmp	r3, #0
 8023668:	d06c      	beq.n	8023744 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802366c:	6a1b      	ldr	r3, [r3, #32]
 802366e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023678:	f003 0304 	and.w	r3, r3, #4
 802367c:	2b00      	cmp	r3, #0
 802367e:	d061      	beq.n	8023744 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8023680:	68ba      	ldr	r2, [r7, #8]
 8023682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023684:	699b      	ldr	r3, [r3, #24]
 8023686:	441a      	add	r2, r3
 8023688:	2300      	movs	r3, #0
 802368a:	9300      	str	r3, [sp, #0]
 802368c:	2300      	movs	r3, #0
 802368e:	2100      	movs	r1, #0
 8023690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023692:	f7ff fe01 	bl	8023298 <xTimerGenericCommand>
 8023696:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8023698:	6a3b      	ldr	r3, [r7, #32]
 802369a:	2b00      	cmp	r3, #0
 802369c:	d152      	bne.n	8023744 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 802369e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80236a2:	f383 8811 	msr	BASEPRI, r3
 80236a6:	f3bf 8f6f 	isb	sy
 80236aa:	f3bf 8f4f 	dsb	sy
 80236ae:	61bb      	str	r3, [r7, #24]
}
 80236b0:	bf00      	nop
 80236b2:	bf00      	nop
 80236b4:	e7fd      	b.n	80236b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80236b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80236bc:	f023 0301 	bic.w	r3, r3, #1
 80236c0:	b2da      	uxtb	r2, r3
 80236c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80236c8:	e03d      	b.n	8023746 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80236ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80236d0:	f043 0301 	orr.w	r3, r3, #1
 80236d4:	b2da      	uxtb	r2, r3
 80236d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80236dc:	68ba      	ldr	r2, [r7, #8]
 80236de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80236e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236e4:	699b      	ldr	r3, [r3, #24]
 80236e6:	2b00      	cmp	r3, #0
 80236e8:	d10b      	bne.n	8023702 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80236ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80236ee:	f383 8811 	msr	BASEPRI, r3
 80236f2:	f3bf 8f6f 	isb	sy
 80236f6:	f3bf 8f4f 	dsb	sy
 80236fa:	617b      	str	r3, [r7, #20]
}
 80236fc:	bf00      	nop
 80236fe:	bf00      	nop
 8023700:	e7fd      	b.n	80236fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8023702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023704:	699a      	ldr	r2, [r3, #24]
 8023706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023708:	18d1      	adds	r1, r2, r3
 802370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802370c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802370e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023710:	f7ff ff04 	bl	802351c <prvInsertTimerInActiveList>
					break;
 8023714:	e017      	b.n	8023746 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8023716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802371c:	f003 0302 	and.w	r3, r3, #2
 8023720:	2b00      	cmp	r3, #0
 8023722:	d103      	bne.n	802372c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8023724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023726:	f7fd fd15 	bl	8021154 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802372a:	e00c      	b.n	8023746 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802372e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023732:	f023 0301 	bic.w	r3, r3, #1
 8023736:	b2da      	uxtb	r2, r3
 8023738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802373a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 802373e:	e002      	b.n	8023746 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8023740:	bf00      	nop
 8023742:	e000      	b.n	8023746 <prvProcessReceivedCommands+0x1a6>
					break;
 8023744:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8023746:	4b08      	ldr	r3, [pc, #32]	@ (8023768 <prvProcessReceivedCommands+0x1c8>)
 8023748:	681b      	ldr	r3, [r3, #0]
 802374a:	1d39      	adds	r1, r7, #4
 802374c:	2200      	movs	r2, #0
 802374e:	4618      	mov	r0, r3
 8023750:	f7fe fbce 	bl	8021ef0 <xQueueReceive>
 8023754:	4603      	mov	r3, r0
 8023756:	2b00      	cmp	r3, #0
 8023758:	f47f af26 	bne.w	80235a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 802375c:	bf00      	nop
 802375e:	bf00      	nop
 8023760:	3730      	adds	r7, #48	@ 0x30
 8023762:	46bd      	mov	sp, r7
 8023764:	bd80      	pop	{r7, pc}
 8023766:	bf00      	nop
 8023768:	240088c0 	.word	0x240088c0

0802376c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802376c:	b580      	push	{r7, lr}
 802376e:	b088      	sub	sp, #32
 8023770:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8023772:	e049      	b.n	8023808 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8023774:	4b2e      	ldr	r3, [pc, #184]	@ (8023830 <prvSwitchTimerLists+0xc4>)
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	68db      	ldr	r3, [r3, #12]
 802377a:	681b      	ldr	r3, [r3, #0]
 802377c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802377e:	4b2c      	ldr	r3, [pc, #176]	@ (8023830 <prvSwitchTimerLists+0xc4>)
 8023780:	681b      	ldr	r3, [r3, #0]
 8023782:	68db      	ldr	r3, [r3, #12]
 8023784:	68db      	ldr	r3, [r3, #12]
 8023786:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023788:	68fb      	ldr	r3, [r7, #12]
 802378a:	3304      	adds	r3, #4
 802378c:	4618      	mov	r0, r3
 802378e:	f7fd fe8b 	bl	80214a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	6a1b      	ldr	r3, [r3, #32]
 8023796:	68f8      	ldr	r0, [r7, #12]
 8023798:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802379a:	68fb      	ldr	r3, [r7, #12]
 802379c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80237a0:	f003 0304 	and.w	r3, r3, #4
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	d02f      	beq.n	8023808 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80237a8:	68fb      	ldr	r3, [r7, #12]
 80237aa:	699b      	ldr	r3, [r3, #24]
 80237ac:	693a      	ldr	r2, [r7, #16]
 80237ae:	4413      	add	r3, r2
 80237b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80237b2:	68ba      	ldr	r2, [r7, #8]
 80237b4:	693b      	ldr	r3, [r7, #16]
 80237b6:	429a      	cmp	r2, r3
 80237b8:	d90e      	bls.n	80237d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80237ba:	68fb      	ldr	r3, [r7, #12]
 80237bc:	68ba      	ldr	r2, [r7, #8]
 80237be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80237c0:	68fb      	ldr	r3, [r7, #12]
 80237c2:	68fa      	ldr	r2, [r7, #12]
 80237c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80237c6:	4b1a      	ldr	r3, [pc, #104]	@ (8023830 <prvSwitchTimerLists+0xc4>)
 80237c8:	681a      	ldr	r2, [r3, #0]
 80237ca:	68fb      	ldr	r3, [r7, #12]
 80237cc:	3304      	adds	r3, #4
 80237ce:	4619      	mov	r1, r3
 80237d0:	4610      	mov	r0, r2
 80237d2:	f7fd fe30 	bl	8021436 <vListInsert>
 80237d6:	e017      	b.n	8023808 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80237d8:	2300      	movs	r3, #0
 80237da:	9300      	str	r3, [sp, #0]
 80237dc:	2300      	movs	r3, #0
 80237de:	693a      	ldr	r2, [r7, #16]
 80237e0:	2100      	movs	r1, #0
 80237e2:	68f8      	ldr	r0, [r7, #12]
 80237e4:	f7ff fd58 	bl	8023298 <xTimerGenericCommand>
 80237e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80237ea:	687b      	ldr	r3, [r7, #4]
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	d10b      	bne.n	8023808 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80237f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80237f4:	f383 8811 	msr	BASEPRI, r3
 80237f8:	f3bf 8f6f 	isb	sy
 80237fc:	f3bf 8f4f 	dsb	sy
 8023800:	603b      	str	r3, [r7, #0]
}
 8023802:	bf00      	nop
 8023804:	bf00      	nop
 8023806:	e7fd      	b.n	8023804 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8023808:	4b09      	ldr	r3, [pc, #36]	@ (8023830 <prvSwitchTimerLists+0xc4>)
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	681b      	ldr	r3, [r3, #0]
 802380e:	2b00      	cmp	r3, #0
 8023810:	d1b0      	bne.n	8023774 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8023812:	4b07      	ldr	r3, [pc, #28]	@ (8023830 <prvSwitchTimerLists+0xc4>)
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8023818:	4b06      	ldr	r3, [pc, #24]	@ (8023834 <prvSwitchTimerLists+0xc8>)
 802381a:	681b      	ldr	r3, [r3, #0]
 802381c:	4a04      	ldr	r2, [pc, #16]	@ (8023830 <prvSwitchTimerLists+0xc4>)
 802381e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8023820:	4a04      	ldr	r2, [pc, #16]	@ (8023834 <prvSwitchTimerLists+0xc8>)
 8023822:	697b      	ldr	r3, [r7, #20]
 8023824:	6013      	str	r3, [r2, #0]
}
 8023826:	bf00      	nop
 8023828:	3718      	adds	r7, #24
 802382a:	46bd      	mov	sp, r7
 802382c:	bd80      	pop	{r7, pc}
 802382e:	bf00      	nop
 8023830:	240088b8 	.word	0x240088b8
 8023834:	240088bc 	.word	0x240088bc

08023838 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8023838:	b580      	push	{r7, lr}
 802383a:	b082      	sub	sp, #8
 802383c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802383e:	f7fd ff8b 	bl	8021758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8023842:	4b15      	ldr	r3, [pc, #84]	@ (8023898 <prvCheckForValidListAndQueue+0x60>)
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	2b00      	cmp	r3, #0
 8023848:	d120      	bne.n	802388c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802384a:	4814      	ldr	r0, [pc, #80]	@ (802389c <prvCheckForValidListAndQueue+0x64>)
 802384c:	f7fd fda2 	bl	8021394 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8023850:	4813      	ldr	r0, [pc, #76]	@ (80238a0 <prvCheckForValidListAndQueue+0x68>)
 8023852:	f7fd fd9f 	bl	8021394 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8023856:	4b13      	ldr	r3, [pc, #76]	@ (80238a4 <prvCheckForValidListAndQueue+0x6c>)
 8023858:	4a10      	ldr	r2, [pc, #64]	@ (802389c <prvCheckForValidListAndQueue+0x64>)
 802385a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802385c:	4b12      	ldr	r3, [pc, #72]	@ (80238a8 <prvCheckForValidListAndQueue+0x70>)
 802385e:	4a10      	ldr	r2, [pc, #64]	@ (80238a0 <prvCheckForValidListAndQueue+0x68>)
 8023860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8023862:	2300      	movs	r3, #0
 8023864:	9300      	str	r3, [sp, #0]
 8023866:	4b11      	ldr	r3, [pc, #68]	@ (80238ac <prvCheckForValidListAndQueue+0x74>)
 8023868:	4a11      	ldr	r2, [pc, #68]	@ (80238b0 <prvCheckForValidListAndQueue+0x78>)
 802386a:	2110      	movs	r1, #16
 802386c:	200a      	movs	r0, #10
 802386e:	f7fe f8ff 	bl	8021a70 <xQueueGenericCreateStatic>
 8023872:	4603      	mov	r3, r0
 8023874:	4a08      	ldr	r2, [pc, #32]	@ (8023898 <prvCheckForValidListAndQueue+0x60>)
 8023876:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8023878:	4b07      	ldr	r3, [pc, #28]	@ (8023898 <prvCheckForValidListAndQueue+0x60>)
 802387a:	681b      	ldr	r3, [r3, #0]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d005      	beq.n	802388c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8023880:	4b05      	ldr	r3, [pc, #20]	@ (8023898 <prvCheckForValidListAndQueue+0x60>)
 8023882:	681b      	ldr	r3, [r3, #0]
 8023884:	490b      	ldr	r1, [pc, #44]	@ (80238b4 <prvCheckForValidListAndQueue+0x7c>)
 8023886:	4618      	mov	r0, r3
 8023888:	f7fe fd24 	bl	80222d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802388c:	f7fd ff96 	bl	80217bc <vPortExitCritical>
}
 8023890:	bf00      	nop
 8023892:	46bd      	mov	sp, r7
 8023894:	bd80      	pop	{r7, pc}
 8023896:	bf00      	nop
 8023898:	240088c0 	.word	0x240088c0
 802389c:	24008890 	.word	0x24008890
 80238a0:	240088a4 	.word	0x240088a4
 80238a4:	240088b8 	.word	0x240088b8
 80238a8:	240088bc 	.word	0x240088bc
 80238ac:	2400896c 	.word	0x2400896c
 80238b0:	240088cc 	.word	0x240088cc
 80238b4:	0802bdb4 	.word	0x0802bdb4

080238b8 <__assert_func>:
 80238b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80238ba:	4614      	mov	r4, r2
 80238bc:	461a      	mov	r2, r3
 80238be:	4b09      	ldr	r3, [pc, #36]	@ (80238e4 <__assert_func+0x2c>)
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	4605      	mov	r5, r0
 80238c4:	68d8      	ldr	r0, [r3, #12]
 80238c6:	b954      	cbnz	r4, 80238de <__assert_func+0x26>
 80238c8:	4b07      	ldr	r3, [pc, #28]	@ (80238e8 <__assert_func+0x30>)
 80238ca:	461c      	mov	r4, r3
 80238cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80238d0:	9100      	str	r1, [sp, #0]
 80238d2:	462b      	mov	r3, r5
 80238d4:	4905      	ldr	r1, [pc, #20]	@ (80238ec <__assert_func+0x34>)
 80238d6:	f001 f8c3 	bl	8024a60 <fiprintf>
 80238da:	f001 fc1f 	bl	802511c <abort>
 80238de:	4b04      	ldr	r3, [pc, #16]	@ (80238f0 <__assert_func+0x38>)
 80238e0:	e7f4      	b.n	80238cc <__assert_func+0x14>
 80238e2:	bf00      	nop
 80238e4:	240007b0 	.word	0x240007b0
 80238e8:	0803845f 	.word	0x0803845f
 80238ec:	08038431 	.word	0x08038431
 80238f0:	08038424 	.word	0x08038424

080238f4 <atoi>:
 80238f4:	220a      	movs	r2, #10
 80238f6:	2100      	movs	r1, #0
 80238f8:	f000 b9c2 	b.w	8023c80 <strtol>

080238fc <calloc>:
 80238fc:	4b02      	ldr	r3, [pc, #8]	@ (8023908 <calloc+0xc>)
 80238fe:	460a      	mov	r2, r1
 8023900:	4601      	mov	r1, r0
 8023902:	6818      	ldr	r0, [r3, #0]
 8023904:	f000 b802 	b.w	802390c <_calloc_r>
 8023908:	240007b0 	.word	0x240007b0

0802390c <_calloc_r>:
 802390c:	b570      	push	{r4, r5, r6, lr}
 802390e:	fba1 5402 	umull	r5, r4, r1, r2
 8023912:	b93c      	cbnz	r4, 8023924 <_calloc_r+0x18>
 8023914:	4629      	mov	r1, r5
 8023916:	f000 f83f 	bl	8023998 <_malloc_r>
 802391a:	4606      	mov	r6, r0
 802391c:	b928      	cbnz	r0, 802392a <_calloc_r+0x1e>
 802391e:	2600      	movs	r6, #0
 8023920:	4630      	mov	r0, r6
 8023922:	bd70      	pop	{r4, r5, r6, pc}
 8023924:	220c      	movs	r2, #12
 8023926:	6002      	str	r2, [r0, #0]
 8023928:	e7f9      	b.n	802391e <_calloc_r+0x12>
 802392a:	462a      	mov	r2, r5
 802392c:	4621      	mov	r1, r4
 802392e:	f001 fa95 	bl	8024e5c <memset>
 8023932:	e7f5      	b.n	8023920 <_calloc_r+0x14>

08023934 <malloc>:
 8023934:	4b02      	ldr	r3, [pc, #8]	@ (8023940 <malloc+0xc>)
 8023936:	4601      	mov	r1, r0
 8023938:	6818      	ldr	r0, [r3, #0]
 802393a:	f000 b82d 	b.w	8023998 <_malloc_r>
 802393e:	bf00      	nop
 8023940:	240007b0 	.word	0x240007b0

08023944 <free>:
 8023944:	4b02      	ldr	r3, [pc, #8]	@ (8023950 <free+0xc>)
 8023946:	4601      	mov	r1, r0
 8023948:	6818      	ldr	r0, [r3, #0]
 802394a:	f002 b9cf 	b.w	8025cec <_free_r>
 802394e:	bf00      	nop
 8023950:	240007b0 	.word	0x240007b0

08023954 <sbrk_aligned>:
 8023954:	b570      	push	{r4, r5, r6, lr}
 8023956:	4e0f      	ldr	r6, [pc, #60]	@ (8023994 <sbrk_aligned+0x40>)
 8023958:	460c      	mov	r4, r1
 802395a:	6831      	ldr	r1, [r6, #0]
 802395c:	4605      	mov	r5, r0
 802395e:	b911      	cbnz	r1, 8023966 <sbrk_aligned+0x12>
 8023960:	f001 fb70 	bl	8025044 <_sbrk_r>
 8023964:	6030      	str	r0, [r6, #0]
 8023966:	4621      	mov	r1, r4
 8023968:	4628      	mov	r0, r5
 802396a:	f001 fb6b 	bl	8025044 <_sbrk_r>
 802396e:	1c43      	adds	r3, r0, #1
 8023970:	d103      	bne.n	802397a <sbrk_aligned+0x26>
 8023972:	f04f 34ff 	mov.w	r4, #4294967295
 8023976:	4620      	mov	r0, r4
 8023978:	bd70      	pop	{r4, r5, r6, pc}
 802397a:	1cc4      	adds	r4, r0, #3
 802397c:	f024 0403 	bic.w	r4, r4, #3
 8023980:	42a0      	cmp	r0, r4
 8023982:	d0f8      	beq.n	8023976 <sbrk_aligned+0x22>
 8023984:	1a21      	subs	r1, r4, r0
 8023986:	4628      	mov	r0, r5
 8023988:	f001 fb5c 	bl	8025044 <_sbrk_r>
 802398c:	3001      	adds	r0, #1
 802398e:	d1f2      	bne.n	8023976 <sbrk_aligned+0x22>
 8023990:	e7ef      	b.n	8023972 <sbrk_aligned+0x1e>
 8023992:	bf00      	nop
 8023994:	240089bc 	.word	0x240089bc

08023998 <_malloc_r>:
 8023998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802399c:	1ccd      	adds	r5, r1, #3
 802399e:	f025 0503 	bic.w	r5, r5, #3
 80239a2:	3508      	adds	r5, #8
 80239a4:	2d0c      	cmp	r5, #12
 80239a6:	bf38      	it	cc
 80239a8:	250c      	movcc	r5, #12
 80239aa:	2d00      	cmp	r5, #0
 80239ac:	4606      	mov	r6, r0
 80239ae:	db01      	blt.n	80239b4 <_malloc_r+0x1c>
 80239b0:	42a9      	cmp	r1, r5
 80239b2:	d904      	bls.n	80239be <_malloc_r+0x26>
 80239b4:	230c      	movs	r3, #12
 80239b6:	6033      	str	r3, [r6, #0]
 80239b8:	2000      	movs	r0, #0
 80239ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023a94 <_malloc_r+0xfc>
 80239c2:	f000 f869 	bl	8023a98 <__malloc_lock>
 80239c6:	f8d8 3000 	ldr.w	r3, [r8]
 80239ca:	461c      	mov	r4, r3
 80239cc:	bb44      	cbnz	r4, 8023a20 <_malloc_r+0x88>
 80239ce:	4629      	mov	r1, r5
 80239d0:	4630      	mov	r0, r6
 80239d2:	f7ff ffbf 	bl	8023954 <sbrk_aligned>
 80239d6:	1c43      	adds	r3, r0, #1
 80239d8:	4604      	mov	r4, r0
 80239da:	d158      	bne.n	8023a8e <_malloc_r+0xf6>
 80239dc:	f8d8 4000 	ldr.w	r4, [r8]
 80239e0:	4627      	mov	r7, r4
 80239e2:	2f00      	cmp	r7, #0
 80239e4:	d143      	bne.n	8023a6e <_malloc_r+0xd6>
 80239e6:	2c00      	cmp	r4, #0
 80239e8:	d04b      	beq.n	8023a82 <_malloc_r+0xea>
 80239ea:	6823      	ldr	r3, [r4, #0]
 80239ec:	4639      	mov	r1, r7
 80239ee:	4630      	mov	r0, r6
 80239f0:	eb04 0903 	add.w	r9, r4, r3
 80239f4:	f001 fb26 	bl	8025044 <_sbrk_r>
 80239f8:	4581      	cmp	r9, r0
 80239fa:	d142      	bne.n	8023a82 <_malloc_r+0xea>
 80239fc:	6821      	ldr	r1, [r4, #0]
 80239fe:	1a6d      	subs	r5, r5, r1
 8023a00:	4629      	mov	r1, r5
 8023a02:	4630      	mov	r0, r6
 8023a04:	f7ff ffa6 	bl	8023954 <sbrk_aligned>
 8023a08:	3001      	adds	r0, #1
 8023a0a:	d03a      	beq.n	8023a82 <_malloc_r+0xea>
 8023a0c:	6823      	ldr	r3, [r4, #0]
 8023a0e:	442b      	add	r3, r5
 8023a10:	6023      	str	r3, [r4, #0]
 8023a12:	f8d8 3000 	ldr.w	r3, [r8]
 8023a16:	685a      	ldr	r2, [r3, #4]
 8023a18:	bb62      	cbnz	r2, 8023a74 <_malloc_r+0xdc>
 8023a1a:	f8c8 7000 	str.w	r7, [r8]
 8023a1e:	e00f      	b.n	8023a40 <_malloc_r+0xa8>
 8023a20:	6822      	ldr	r2, [r4, #0]
 8023a22:	1b52      	subs	r2, r2, r5
 8023a24:	d420      	bmi.n	8023a68 <_malloc_r+0xd0>
 8023a26:	2a0b      	cmp	r2, #11
 8023a28:	d917      	bls.n	8023a5a <_malloc_r+0xc2>
 8023a2a:	1961      	adds	r1, r4, r5
 8023a2c:	42a3      	cmp	r3, r4
 8023a2e:	6025      	str	r5, [r4, #0]
 8023a30:	bf18      	it	ne
 8023a32:	6059      	strne	r1, [r3, #4]
 8023a34:	6863      	ldr	r3, [r4, #4]
 8023a36:	bf08      	it	eq
 8023a38:	f8c8 1000 	streq.w	r1, [r8]
 8023a3c:	5162      	str	r2, [r4, r5]
 8023a3e:	604b      	str	r3, [r1, #4]
 8023a40:	4630      	mov	r0, r6
 8023a42:	f000 f82f 	bl	8023aa4 <__malloc_unlock>
 8023a46:	f104 000b 	add.w	r0, r4, #11
 8023a4a:	1d23      	adds	r3, r4, #4
 8023a4c:	f020 0007 	bic.w	r0, r0, #7
 8023a50:	1ac2      	subs	r2, r0, r3
 8023a52:	bf1c      	itt	ne
 8023a54:	1a1b      	subne	r3, r3, r0
 8023a56:	50a3      	strne	r3, [r4, r2]
 8023a58:	e7af      	b.n	80239ba <_malloc_r+0x22>
 8023a5a:	6862      	ldr	r2, [r4, #4]
 8023a5c:	42a3      	cmp	r3, r4
 8023a5e:	bf0c      	ite	eq
 8023a60:	f8c8 2000 	streq.w	r2, [r8]
 8023a64:	605a      	strne	r2, [r3, #4]
 8023a66:	e7eb      	b.n	8023a40 <_malloc_r+0xa8>
 8023a68:	4623      	mov	r3, r4
 8023a6a:	6864      	ldr	r4, [r4, #4]
 8023a6c:	e7ae      	b.n	80239cc <_malloc_r+0x34>
 8023a6e:	463c      	mov	r4, r7
 8023a70:	687f      	ldr	r7, [r7, #4]
 8023a72:	e7b6      	b.n	80239e2 <_malloc_r+0x4a>
 8023a74:	461a      	mov	r2, r3
 8023a76:	685b      	ldr	r3, [r3, #4]
 8023a78:	42a3      	cmp	r3, r4
 8023a7a:	d1fb      	bne.n	8023a74 <_malloc_r+0xdc>
 8023a7c:	2300      	movs	r3, #0
 8023a7e:	6053      	str	r3, [r2, #4]
 8023a80:	e7de      	b.n	8023a40 <_malloc_r+0xa8>
 8023a82:	230c      	movs	r3, #12
 8023a84:	6033      	str	r3, [r6, #0]
 8023a86:	4630      	mov	r0, r6
 8023a88:	f000 f80c 	bl	8023aa4 <__malloc_unlock>
 8023a8c:	e794      	b.n	80239b8 <_malloc_r+0x20>
 8023a8e:	6005      	str	r5, [r0, #0]
 8023a90:	e7d6      	b.n	8023a40 <_malloc_r+0xa8>
 8023a92:	bf00      	nop
 8023a94:	240089c0 	.word	0x240089c0

08023a98 <__malloc_lock>:
 8023a98:	4801      	ldr	r0, [pc, #4]	@ (8023aa0 <__malloc_lock+0x8>)
 8023a9a:	f001 bb20 	b.w	80250de <__retarget_lock_acquire_recursive>
 8023a9e:	bf00      	nop
 8023aa0:	24008b04 	.word	0x24008b04

08023aa4 <__malloc_unlock>:
 8023aa4:	4801      	ldr	r0, [pc, #4]	@ (8023aac <__malloc_unlock+0x8>)
 8023aa6:	f001 bb1b 	b.w	80250e0 <__retarget_lock_release_recursive>
 8023aaa:	bf00      	nop
 8023aac:	24008b04 	.word	0x24008b04

08023ab0 <srand>:
 8023ab0:	b538      	push	{r3, r4, r5, lr}
 8023ab2:	4b10      	ldr	r3, [pc, #64]	@ (8023af4 <srand+0x44>)
 8023ab4:	681d      	ldr	r5, [r3, #0]
 8023ab6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023ab8:	4604      	mov	r4, r0
 8023aba:	b9b3      	cbnz	r3, 8023aea <srand+0x3a>
 8023abc:	2018      	movs	r0, #24
 8023abe:	f7ff ff39 	bl	8023934 <malloc>
 8023ac2:	4602      	mov	r2, r0
 8023ac4:	6328      	str	r0, [r5, #48]	@ 0x30
 8023ac6:	b920      	cbnz	r0, 8023ad2 <srand+0x22>
 8023ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8023af8 <srand+0x48>)
 8023aca:	480c      	ldr	r0, [pc, #48]	@ (8023afc <srand+0x4c>)
 8023acc:	2146      	movs	r1, #70	@ 0x46
 8023ace:	f7ff fef3 	bl	80238b8 <__assert_func>
 8023ad2:	490b      	ldr	r1, [pc, #44]	@ (8023b00 <srand+0x50>)
 8023ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8023b04 <srand+0x54>)
 8023ad6:	e9c0 1300 	strd	r1, r3, [r0]
 8023ada:	4b0b      	ldr	r3, [pc, #44]	@ (8023b08 <srand+0x58>)
 8023adc:	6083      	str	r3, [r0, #8]
 8023ade:	230b      	movs	r3, #11
 8023ae0:	8183      	strh	r3, [r0, #12]
 8023ae2:	2100      	movs	r1, #0
 8023ae4:	2001      	movs	r0, #1
 8023ae6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023aea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023aec:	2200      	movs	r2, #0
 8023aee:	611c      	str	r4, [r3, #16]
 8023af0:	615a      	str	r2, [r3, #20]
 8023af2:	bd38      	pop	{r3, r4, r5, pc}
 8023af4:	240007b0 	.word	0x240007b0
 8023af8:	08038460 	.word	0x08038460
 8023afc:	08038477 	.word	0x08038477
 8023b00:	abcd330e 	.word	0xabcd330e
 8023b04:	e66d1234 	.word	0xe66d1234
 8023b08:	0005deec 	.word	0x0005deec

08023b0c <rand>:
 8023b0c:	4b16      	ldr	r3, [pc, #88]	@ (8023b68 <rand+0x5c>)
 8023b0e:	b510      	push	{r4, lr}
 8023b10:	681c      	ldr	r4, [r3, #0]
 8023b12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023b14:	b9b3      	cbnz	r3, 8023b44 <rand+0x38>
 8023b16:	2018      	movs	r0, #24
 8023b18:	f7ff ff0c 	bl	8023934 <malloc>
 8023b1c:	4602      	mov	r2, r0
 8023b1e:	6320      	str	r0, [r4, #48]	@ 0x30
 8023b20:	b920      	cbnz	r0, 8023b2c <rand+0x20>
 8023b22:	4b12      	ldr	r3, [pc, #72]	@ (8023b6c <rand+0x60>)
 8023b24:	4812      	ldr	r0, [pc, #72]	@ (8023b70 <rand+0x64>)
 8023b26:	2152      	movs	r1, #82	@ 0x52
 8023b28:	f7ff fec6 	bl	80238b8 <__assert_func>
 8023b2c:	4911      	ldr	r1, [pc, #68]	@ (8023b74 <rand+0x68>)
 8023b2e:	4b12      	ldr	r3, [pc, #72]	@ (8023b78 <rand+0x6c>)
 8023b30:	e9c0 1300 	strd	r1, r3, [r0]
 8023b34:	4b11      	ldr	r3, [pc, #68]	@ (8023b7c <rand+0x70>)
 8023b36:	6083      	str	r3, [r0, #8]
 8023b38:	230b      	movs	r3, #11
 8023b3a:	8183      	strh	r3, [r0, #12]
 8023b3c:	2100      	movs	r1, #0
 8023b3e:	2001      	movs	r0, #1
 8023b40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023b44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8023b46:	480e      	ldr	r0, [pc, #56]	@ (8023b80 <rand+0x74>)
 8023b48:	690b      	ldr	r3, [r1, #16]
 8023b4a:	694c      	ldr	r4, [r1, #20]
 8023b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8023b84 <rand+0x78>)
 8023b4e:	4358      	muls	r0, r3
 8023b50:	fb02 0004 	mla	r0, r2, r4, r0
 8023b54:	fba3 3202 	umull	r3, r2, r3, r2
 8023b58:	3301      	adds	r3, #1
 8023b5a:	eb40 0002 	adc.w	r0, r0, r2
 8023b5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8023b62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8023b66:	bd10      	pop	{r4, pc}
 8023b68:	240007b0 	.word	0x240007b0
 8023b6c:	08038460 	.word	0x08038460
 8023b70:	08038477 	.word	0x08038477
 8023b74:	abcd330e 	.word	0xabcd330e
 8023b78:	e66d1234 	.word	0xe66d1234
 8023b7c:	0005deec 	.word	0x0005deec
 8023b80:	5851f42d 	.word	0x5851f42d
 8023b84:	4c957f2d 	.word	0x4c957f2d

08023b88 <_strtol_l.constprop.0>:
 8023b88:	2b24      	cmp	r3, #36	@ 0x24
 8023b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b8e:	4686      	mov	lr, r0
 8023b90:	4690      	mov	r8, r2
 8023b92:	d801      	bhi.n	8023b98 <_strtol_l.constprop.0+0x10>
 8023b94:	2b01      	cmp	r3, #1
 8023b96:	d106      	bne.n	8023ba6 <_strtol_l.constprop.0+0x1e>
 8023b98:	f001 fa76 	bl	8025088 <__errno>
 8023b9c:	2316      	movs	r3, #22
 8023b9e:	6003      	str	r3, [r0, #0]
 8023ba0:	2000      	movs	r0, #0
 8023ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ba6:	4834      	ldr	r0, [pc, #208]	@ (8023c78 <_strtol_l.constprop.0+0xf0>)
 8023ba8:	460d      	mov	r5, r1
 8023baa:	462a      	mov	r2, r5
 8023bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023bb0:	5d06      	ldrb	r6, [r0, r4]
 8023bb2:	f016 0608 	ands.w	r6, r6, #8
 8023bb6:	d1f8      	bne.n	8023baa <_strtol_l.constprop.0+0x22>
 8023bb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8023bba:	d12d      	bne.n	8023c18 <_strtol_l.constprop.0+0x90>
 8023bbc:	782c      	ldrb	r4, [r5, #0]
 8023bbe:	2601      	movs	r6, #1
 8023bc0:	1c95      	adds	r5, r2, #2
 8023bc2:	f033 0210 	bics.w	r2, r3, #16
 8023bc6:	d109      	bne.n	8023bdc <_strtol_l.constprop.0+0x54>
 8023bc8:	2c30      	cmp	r4, #48	@ 0x30
 8023bca:	d12a      	bne.n	8023c22 <_strtol_l.constprop.0+0x9a>
 8023bcc:	782a      	ldrb	r2, [r5, #0]
 8023bce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023bd2:	2a58      	cmp	r2, #88	@ 0x58
 8023bd4:	d125      	bne.n	8023c22 <_strtol_l.constprop.0+0x9a>
 8023bd6:	786c      	ldrb	r4, [r5, #1]
 8023bd8:	2310      	movs	r3, #16
 8023bda:	3502      	adds	r5, #2
 8023bdc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8023be0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023be4:	2200      	movs	r2, #0
 8023be6:	fbbc f9f3 	udiv	r9, ip, r3
 8023bea:	4610      	mov	r0, r2
 8023bec:	fb03 ca19 	mls	sl, r3, r9, ip
 8023bf0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023bf4:	2f09      	cmp	r7, #9
 8023bf6:	d81b      	bhi.n	8023c30 <_strtol_l.constprop.0+0xa8>
 8023bf8:	463c      	mov	r4, r7
 8023bfa:	42a3      	cmp	r3, r4
 8023bfc:	dd27      	ble.n	8023c4e <_strtol_l.constprop.0+0xc6>
 8023bfe:	1c57      	adds	r7, r2, #1
 8023c00:	d007      	beq.n	8023c12 <_strtol_l.constprop.0+0x8a>
 8023c02:	4581      	cmp	r9, r0
 8023c04:	d320      	bcc.n	8023c48 <_strtol_l.constprop.0+0xc0>
 8023c06:	d101      	bne.n	8023c0c <_strtol_l.constprop.0+0x84>
 8023c08:	45a2      	cmp	sl, r4
 8023c0a:	db1d      	blt.n	8023c48 <_strtol_l.constprop.0+0xc0>
 8023c0c:	fb00 4003 	mla	r0, r0, r3, r4
 8023c10:	2201      	movs	r2, #1
 8023c12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023c16:	e7eb      	b.n	8023bf0 <_strtol_l.constprop.0+0x68>
 8023c18:	2c2b      	cmp	r4, #43	@ 0x2b
 8023c1a:	bf04      	itt	eq
 8023c1c:	782c      	ldrbeq	r4, [r5, #0]
 8023c1e:	1c95      	addeq	r5, r2, #2
 8023c20:	e7cf      	b.n	8023bc2 <_strtol_l.constprop.0+0x3a>
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d1da      	bne.n	8023bdc <_strtol_l.constprop.0+0x54>
 8023c26:	2c30      	cmp	r4, #48	@ 0x30
 8023c28:	bf0c      	ite	eq
 8023c2a:	2308      	moveq	r3, #8
 8023c2c:	230a      	movne	r3, #10
 8023c2e:	e7d5      	b.n	8023bdc <_strtol_l.constprop.0+0x54>
 8023c30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023c34:	2f19      	cmp	r7, #25
 8023c36:	d801      	bhi.n	8023c3c <_strtol_l.constprop.0+0xb4>
 8023c38:	3c37      	subs	r4, #55	@ 0x37
 8023c3a:	e7de      	b.n	8023bfa <_strtol_l.constprop.0+0x72>
 8023c3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023c40:	2f19      	cmp	r7, #25
 8023c42:	d804      	bhi.n	8023c4e <_strtol_l.constprop.0+0xc6>
 8023c44:	3c57      	subs	r4, #87	@ 0x57
 8023c46:	e7d8      	b.n	8023bfa <_strtol_l.constprop.0+0x72>
 8023c48:	f04f 32ff 	mov.w	r2, #4294967295
 8023c4c:	e7e1      	b.n	8023c12 <_strtol_l.constprop.0+0x8a>
 8023c4e:	1c53      	adds	r3, r2, #1
 8023c50:	d108      	bne.n	8023c64 <_strtol_l.constprop.0+0xdc>
 8023c52:	2322      	movs	r3, #34	@ 0x22
 8023c54:	f8ce 3000 	str.w	r3, [lr]
 8023c58:	4660      	mov	r0, ip
 8023c5a:	f1b8 0f00 	cmp.w	r8, #0
 8023c5e:	d0a0      	beq.n	8023ba2 <_strtol_l.constprop.0+0x1a>
 8023c60:	1e69      	subs	r1, r5, #1
 8023c62:	e006      	b.n	8023c72 <_strtol_l.constprop.0+0xea>
 8023c64:	b106      	cbz	r6, 8023c68 <_strtol_l.constprop.0+0xe0>
 8023c66:	4240      	negs	r0, r0
 8023c68:	f1b8 0f00 	cmp.w	r8, #0
 8023c6c:	d099      	beq.n	8023ba2 <_strtol_l.constprop.0+0x1a>
 8023c6e:	2a00      	cmp	r2, #0
 8023c70:	d1f6      	bne.n	8023c60 <_strtol_l.constprop.0+0xd8>
 8023c72:	f8c8 1000 	str.w	r1, [r8]
 8023c76:	e794      	b.n	8023ba2 <_strtol_l.constprop.0+0x1a>
 8023c78:	080384d0 	.word	0x080384d0

08023c7c <_strtol_r>:
 8023c7c:	f7ff bf84 	b.w	8023b88 <_strtol_l.constprop.0>

08023c80 <strtol>:
 8023c80:	4613      	mov	r3, r2
 8023c82:	460a      	mov	r2, r1
 8023c84:	4601      	mov	r1, r0
 8023c86:	4802      	ldr	r0, [pc, #8]	@ (8023c90 <strtol+0x10>)
 8023c88:	6800      	ldr	r0, [r0, #0]
 8023c8a:	f7ff bf7d 	b.w	8023b88 <_strtol_l.constprop.0>
 8023c8e:	bf00      	nop
 8023c90:	240007b0 	.word	0x240007b0

08023c94 <__cvt>:
 8023c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c96:	ed2d 8b02 	vpush	{d8}
 8023c9a:	eeb0 8b40 	vmov.f64	d8, d0
 8023c9e:	b085      	sub	sp, #20
 8023ca0:	4617      	mov	r7, r2
 8023ca2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023ca4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023ca6:	ee18 2a90 	vmov	r2, s17
 8023caa:	f025 0520 	bic.w	r5, r5, #32
 8023cae:	2a00      	cmp	r2, #0
 8023cb0:	bfb6      	itet	lt
 8023cb2:	222d      	movlt	r2, #45	@ 0x2d
 8023cb4:	2200      	movge	r2, #0
 8023cb6:	eeb1 8b40 	vneglt.f64	d8, d0
 8023cba:	2d46      	cmp	r5, #70	@ 0x46
 8023cbc:	460c      	mov	r4, r1
 8023cbe:	701a      	strb	r2, [r3, #0]
 8023cc0:	d004      	beq.n	8023ccc <__cvt+0x38>
 8023cc2:	2d45      	cmp	r5, #69	@ 0x45
 8023cc4:	d100      	bne.n	8023cc8 <__cvt+0x34>
 8023cc6:	3401      	adds	r4, #1
 8023cc8:	2102      	movs	r1, #2
 8023cca:	e000      	b.n	8023cce <__cvt+0x3a>
 8023ccc:	2103      	movs	r1, #3
 8023cce:	ab03      	add	r3, sp, #12
 8023cd0:	9301      	str	r3, [sp, #4]
 8023cd2:	ab02      	add	r3, sp, #8
 8023cd4:	9300      	str	r3, [sp, #0]
 8023cd6:	4622      	mov	r2, r4
 8023cd8:	4633      	mov	r3, r6
 8023cda:	eeb0 0b48 	vmov.f64	d0, d8
 8023cde:	f001 faaf 	bl	8025240 <_dtoa_r>
 8023ce2:	2d47      	cmp	r5, #71	@ 0x47
 8023ce4:	d114      	bne.n	8023d10 <__cvt+0x7c>
 8023ce6:	07fb      	lsls	r3, r7, #31
 8023ce8:	d50a      	bpl.n	8023d00 <__cvt+0x6c>
 8023cea:	1902      	adds	r2, r0, r4
 8023cec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cf4:	bf08      	it	eq
 8023cf6:	9203      	streq	r2, [sp, #12]
 8023cf8:	2130      	movs	r1, #48	@ 0x30
 8023cfa:	9b03      	ldr	r3, [sp, #12]
 8023cfc:	4293      	cmp	r3, r2
 8023cfe:	d319      	bcc.n	8023d34 <__cvt+0xa0>
 8023d00:	9b03      	ldr	r3, [sp, #12]
 8023d02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d04:	1a1b      	subs	r3, r3, r0
 8023d06:	6013      	str	r3, [r2, #0]
 8023d08:	b005      	add	sp, #20
 8023d0a:	ecbd 8b02 	vpop	{d8}
 8023d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d10:	2d46      	cmp	r5, #70	@ 0x46
 8023d12:	eb00 0204 	add.w	r2, r0, r4
 8023d16:	d1e9      	bne.n	8023cec <__cvt+0x58>
 8023d18:	7803      	ldrb	r3, [r0, #0]
 8023d1a:	2b30      	cmp	r3, #48	@ 0x30
 8023d1c:	d107      	bne.n	8023d2e <__cvt+0x9a>
 8023d1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d26:	bf1c      	itt	ne
 8023d28:	f1c4 0401 	rsbne	r4, r4, #1
 8023d2c:	6034      	strne	r4, [r6, #0]
 8023d2e:	6833      	ldr	r3, [r6, #0]
 8023d30:	441a      	add	r2, r3
 8023d32:	e7db      	b.n	8023cec <__cvt+0x58>
 8023d34:	1c5c      	adds	r4, r3, #1
 8023d36:	9403      	str	r4, [sp, #12]
 8023d38:	7019      	strb	r1, [r3, #0]
 8023d3a:	e7de      	b.n	8023cfa <__cvt+0x66>

08023d3c <__exponent>:
 8023d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023d3e:	2900      	cmp	r1, #0
 8023d40:	bfba      	itte	lt
 8023d42:	4249      	neglt	r1, r1
 8023d44:	232d      	movlt	r3, #45	@ 0x2d
 8023d46:	232b      	movge	r3, #43	@ 0x2b
 8023d48:	2909      	cmp	r1, #9
 8023d4a:	7002      	strb	r2, [r0, #0]
 8023d4c:	7043      	strb	r3, [r0, #1]
 8023d4e:	dd29      	ble.n	8023da4 <__exponent+0x68>
 8023d50:	f10d 0307 	add.w	r3, sp, #7
 8023d54:	461d      	mov	r5, r3
 8023d56:	270a      	movs	r7, #10
 8023d58:	461a      	mov	r2, r3
 8023d5a:	fbb1 f6f7 	udiv	r6, r1, r7
 8023d5e:	fb07 1416 	mls	r4, r7, r6, r1
 8023d62:	3430      	adds	r4, #48	@ 0x30
 8023d64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8023d68:	460c      	mov	r4, r1
 8023d6a:	2c63      	cmp	r4, #99	@ 0x63
 8023d6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8023d70:	4631      	mov	r1, r6
 8023d72:	dcf1      	bgt.n	8023d58 <__exponent+0x1c>
 8023d74:	3130      	adds	r1, #48	@ 0x30
 8023d76:	1e94      	subs	r4, r2, #2
 8023d78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8023d7c:	1c41      	adds	r1, r0, #1
 8023d7e:	4623      	mov	r3, r4
 8023d80:	42ab      	cmp	r3, r5
 8023d82:	d30a      	bcc.n	8023d9a <__exponent+0x5e>
 8023d84:	f10d 0309 	add.w	r3, sp, #9
 8023d88:	1a9b      	subs	r3, r3, r2
 8023d8a:	42ac      	cmp	r4, r5
 8023d8c:	bf88      	it	hi
 8023d8e:	2300      	movhi	r3, #0
 8023d90:	3302      	adds	r3, #2
 8023d92:	4403      	add	r3, r0
 8023d94:	1a18      	subs	r0, r3, r0
 8023d96:	b003      	add	sp, #12
 8023d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8023d9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8023da2:	e7ed      	b.n	8023d80 <__exponent+0x44>
 8023da4:	2330      	movs	r3, #48	@ 0x30
 8023da6:	3130      	adds	r1, #48	@ 0x30
 8023da8:	7083      	strb	r3, [r0, #2]
 8023daa:	70c1      	strb	r1, [r0, #3]
 8023dac:	1d03      	adds	r3, r0, #4
 8023dae:	e7f1      	b.n	8023d94 <__exponent+0x58>

08023db0 <_printf_float>:
 8023db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023db4:	b08d      	sub	sp, #52	@ 0x34
 8023db6:	460c      	mov	r4, r1
 8023db8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8023dbc:	4616      	mov	r6, r2
 8023dbe:	461f      	mov	r7, r3
 8023dc0:	4605      	mov	r5, r0
 8023dc2:	f001 f8b1 	bl	8024f28 <_localeconv_r>
 8023dc6:	f8d0 b000 	ldr.w	fp, [r0]
 8023dca:	4658      	mov	r0, fp
 8023dcc:	f7dc fae8 	bl	80003a0 <strlen>
 8023dd0:	2300      	movs	r3, #0
 8023dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8023dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8023dd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8023ddc:	6822      	ldr	r2, [r4, #0]
 8023dde:	9005      	str	r0, [sp, #20]
 8023de0:	3307      	adds	r3, #7
 8023de2:	f023 0307 	bic.w	r3, r3, #7
 8023de6:	f103 0108 	add.w	r1, r3, #8
 8023dea:	f8c8 1000 	str.w	r1, [r8]
 8023dee:	ed93 0b00 	vldr	d0, [r3]
 8023df2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8024050 <_printf_float+0x2a0>
 8023df6:	eeb0 7bc0 	vabs.f64	d7, d0
 8023dfa:	eeb4 7b46 	vcmp.f64	d7, d6
 8023dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e02:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8023e06:	dd24      	ble.n	8023e52 <_printf_float+0xa2>
 8023e08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e10:	d502      	bpl.n	8023e18 <_printf_float+0x68>
 8023e12:	232d      	movs	r3, #45	@ 0x2d
 8023e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023e18:	498f      	ldr	r1, [pc, #572]	@ (8024058 <_printf_float+0x2a8>)
 8023e1a:	4b90      	ldr	r3, [pc, #576]	@ (802405c <_printf_float+0x2ac>)
 8023e1c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8023e20:	bf94      	ite	ls
 8023e22:	4688      	movls	r8, r1
 8023e24:	4698      	movhi	r8, r3
 8023e26:	f022 0204 	bic.w	r2, r2, #4
 8023e2a:	2303      	movs	r3, #3
 8023e2c:	6123      	str	r3, [r4, #16]
 8023e2e:	6022      	str	r2, [r4, #0]
 8023e30:	f04f 0a00 	mov.w	sl, #0
 8023e34:	9700      	str	r7, [sp, #0]
 8023e36:	4633      	mov	r3, r6
 8023e38:	aa0b      	add	r2, sp, #44	@ 0x2c
 8023e3a:	4621      	mov	r1, r4
 8023e3c:	4628      	mov	r0, r5
 8023e3e:	f000 f9d1 	bl	80241e4 <_printf_common>
 8023e42:	3001      	adds	r0, #1
 8023e44:	f040 8089 	bne.w	8023f5a <_printf_float+0x1aa>
 8023e48:	f04f 30ff 	mov.w	r0, #4294967295
 8023e4c:	b00d      	add	sp, #52	@ 0x34
 8023e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e52:	eeb4 0b40 	vcmp.f64	d0, d0
 8023e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e5a:	d709      	bvc.n	8023e70 <_printf_float+0xc0>
 8023e5c:	ee10 3a90 	vmov	r3, s1
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	bfbc      	itt	lt
 8023e64:	232d      	movlt	r3, #45	@ 0x2d
 8023e66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8023e6a:	497d      	ldr	r1, [pc, #500]	@ (8024060 <_printf_float+0x2b0>)
 8023e6c:	4b7d      	ldr	r3, [pc, #500]	@ (8024064 <_printf_float+0x2b4>)
 8023e6e:	e7d5      	b.n	8023e1c <_printf_float+0x6c>
 8023e70:	6863      	ldr	r3, [r4, #4]
 8023e72:	1c59      	adds	r1, r3, #1
 8023e74:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8023e78:	d139      	bne.n	8023eee <_printf_float+0x13e>
 8023e7a:	2306      	movs	r3, #6
 8023e7c:	6063      	str	r3, [r4, #4]
 8023e7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023e82:	2300      	movs	r3, #0
 8023e84:	6022      	str	r2, [r4, #0]
 8023e86:	9303      	str	r3, [sp, #12]
 8023e88:	ab0a      	add	r3, sp, #40	@ 0x28
 8023e8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023e8e:	ab09      	add	r3, sp, #36	@ 0x24
 8023e90:	9300      	str	r3, [sp, #0]
 8023e92:	6861      	ldr	r1, [r4, #4]
 8023e94:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8023e98:	4628      	mov	r0, r5
 8023e9a:	f7ff fefb 	bl	8023c94 <__cvt>
 8023e9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8023ea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023ea4:	4680      	mov	r8, r0
 8023ea6:	d129      	bne.n	8023efc <_printf_float+0x14c>
 8023ea8:	1cc8      	adds	r0, r1, #3
 8023eaa:	db02      	blt.n	8023eb2 <_printf_float+0x102>
 8023eac:	6863      	ldr	r3, [r4, #4]
 8023eae:	4299      	cmp	r1, r3
 8023eb0:	dd41      	ble.n	8023f36 <_printf_float+0x186>
 8023eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8023eb6:	fa5f f989 	uxtb.w	r9, r9
 8023eba:	3901      	subs	r1, #1
 8023ebc:	464a      	mov	r2, r9
 8023ebe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8023ec2:	9109      	str	r1, [sp, #36]	@ 0x24
 8023ec4:	f7ff ff3a 	bl	8023d3c <__exponent>
 8023ec8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023eca:	1813      	adds	r3, r2, r0
 8023ecc:	2a01      	cmp	r2, #1
 8023ece:	4682      	mov	sl, r0
 8023ed0:	6123      	str	r3, [r4, #16]
 8023ed2:	dc02      	bgt.n	8023eda <_printf_float+0x12a>
 8023ed4:	6822      	ldr	r2, [r4, #0]
 8023ed6:	07d2      	lsls	r2, r2, #31
 8023ed8:	d501      	bpl.n	8023ede <_printf_float+0x12e>
 8023eda:	3301      	adds	r3, #1
 8023edc:	6123      	str	r3, [r4, #16]
 8023ede:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d0a6      	beq.n	8023e34 <_printf_float+0x84>
 8023ee6:	232d      	movs	r3, #45	@ 0x2d
 8023ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023eec:	e7a2      	b.n	8023e34 <_printf_float+0x84>
 8023eee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8023ef2:	d1c4      	bne.n	8023e7e <_printf_float+0xce>
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d1c2      	bne.n	8023e7e <_printf_float+0xce>
 8023ef8:	2301      	movs	r3, #1
 8023efa:	e7bf      	b.n	8023e7c <_printf_float+0xcc>
 8023efc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8023f00:	d9db      	bls.n	8023eba <_printf_float+0x10a>
 8023f02:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8023f06:	d118      	bne.n	8023f3a <_printf_float+0x18a>
 8023f08:	2900      	cmp	r1, #0
 8023f0a:	6863      	ldr	r3, [r4, #4]
 8023f0c:	dd0b      	ble.n	8023f26 <_printf_float+0x176>
 8023f0e:	6121      	str	r1, [r4, #16]
 8023f10:	b913      	cbnz	r3, 8023f18 <_printf_float+0x168>
 8023f12:	6822      	ldr	r2, [r4, #0]
 8023f14:	07d0      	lsls	r0, r2, #31
 8023f16:	d502      	bpl.n	8023f1e <_printf_float+0x16e>
 8023f18:	3301      	adds	r3, #1
 8023f1a:	440b      	add	r3, r1
 8023f1c:	6123      	str	r3, [r4, #16]
 8023f1e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8023f20:	f04f 0a00 	mov.w	sl, #0
 8023f24:	e7db      	b.n	8023ede <_printf_float+0x12e>
 8023f26:	b913      	cbnz	r3, 8023f2e <_printf_float+0x17e>
 8023f28:	6822      	ldr	r2, [r4, #0]
 8023f2a:	07d2      	lsls	r2, r2, #31
 8023f2c:	d501      	bpl.n	8023f32 <_printf_float+0x182>
 8023f2e:	3302      	adds	r3, #2
 8023f30:	e7f4      	b.n	8023f1c <_printf_float+0x16c>
 8023f32:	2301      	movs	r3, #1
 8023f34:	e7f2      	b.n	8023f1c <_printf_float+0x16c>
 8023f36:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8023f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f3c:	4299      	cmp	r1, r3
 8023f3e:	db05      	blt.n	8023f4c <_printf_float+0x19c>
 8023f40:	6823      	ldr	r3, [r4, #0]
 8023f42:	6121      	str	r1, [r4, #16]
 8023f44:	07d8      	lsls	r0, r3, #31
 8023f46:	d5ea      	bpl.n	8023f1e <_printf_float+0x16e>
 8023f48:	1c4b      	adds	r3, r1, #1
 8023f4a:	e7e7      	b.n	8023f1c <_printf_float+0x16c>
 8023f4c:	2900      	cmp	r1, #0
 8023f4e:	bfd4      	ite	le
 8023f50:	f1c1 0202 	rsble	r2, r1, #2
 8023f54:	2201      	movgt	r2, #1
 8023f56:	4413      	add	r3, r2
 8023f58:	e7e0      	b.n	8023f1c <_printf_float+0x16c>
 8023f5a:	6823      	ldr	r3, [r4, #0]
 8023f5c:	055a      	lsls	r2, r3, #21
 8023f5e:	d407      	bmi.n	8023f70 <_printf_float+0x1c0>
 8023f60:	6923      	ldr	r3, [r4, #16]
 8023f62:	4642      	mov	r2, r8
 8023f64:	4631      	mov	r1, r6
 8023f66:	4628      	mov	r0, r5
 8023f68:	47b8      	blx	r7
 8023f6a:	3001      	adds	r0, #1
 8023f6c:	d12a      	bne.n	8023fc4 <_printf_float+0x214>
 8023f6e:	e76b      	b.n	8023e48 <_printf_float+0x98>
 8023f70:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8023f74:	f240 80e0 	bls.w	8024138 <_printf_float+0x388>
 8023f78:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8023f7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f84:	d133      	bne.n	8023fee <_printf_float+0x23e>
 8023f86:	4a38      	ldr	r2, [pc, #224]	@ (8024068 <_printf_float+0x2b8>)
 8023f88:	2301      	movs	r3, #1
 8023f8a:	4631      	mov	r1, r6
 8023f8c:	4628      	mov	r0, r5
 8023f8e:	47b8      	blx	r7
 8023f90:	3001      	adds	r0, #1
 8023f92:	f43f af59 	beq.w	8023e48 <_printf_float+0x98>
 8023f96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8023f9a:	4543      	cmp	r3, r8
 8023f9c:	db02      	blt.n	8023fa4 <_printf_float+0x1f4>
 8023f9e:	6823      	ldr	r3, [r4, #0]
 8023fa0:	07d8      	lsls	r0, r3, #31
 8023fa2:	d50f      	bpl.n	8023fc4 <_printf_float+0x214>
 8023fa4:	9b05      	ldr	r3, [sp, #20]
 8023fa6:	465a      	mov	r2, fp
 8023fa8:	4631      	mov	r1, r6
 8023faa:	4628      	mov	r0, r5
 8023fac:	47b8      	blx	r7
 8023fae:	3001      	adds	r0, #1
 8023fb0:	f43f af4a 	beq.w	8023e48 <_printf_float+0x98>
 8023fb4:	f04f 0900 	mov.w	r9, #0
 8023fb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8023fbc:	f104 0a1a 	add.w	sl, r4, #26
 8023fc0:	45c8      	cmp	r8, r9
 8023fc2:	dc09      	bgt.n	8023fd8 <_printf_float+0x228>
 8023fc4:	6823      	ldr	r3, [r4, #0]
 8023fc6:	079b      	lsls	r3, r3, #30
 8023fc8:	f100 8107 	bmi.w	80241da <_printf_float+0x42a>
 8023fcc:	68e0      	ldr	r0, [r4, #12]
 8023fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023fd0:	4298      	cmp	r0, r3
 8023fd2:	bfb8      	it	lt
 8023fd4:	4618      	movlt	r0, r3
 8023fd6:	e739      	b.n	8023e4c <_printf_float+0x9c>
 8023fd8:	2301      	movs	r3, #1
 8023fda:	4652      	mov	r2, sl
 8023fdc:	4631      	mov	r1, r6
 8023fde:	4628      	mov	r0, r5
 8023fe0:	47b8      	blx	r7
 8023fe2:	3001      	adds	r0, #1
 8023fe4:	f43f af30 	beq.w	8023e48 <_printf_float+0x98>
 8023fe8:	f109 0901 	add.w	r9, r9, #1
 8023fec:	e7e8      	b.n	8023fc0 <_printf_float+0x210>
 8023fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	dc3b      	bgt.n	802406c <_printf_float+0x2bc>
 8023ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8024068 <_printf_float+0x2b8>)
 8023ff6:	2301      	movs	r3, #1
 8023ff8:	4631      	mov	r1, r6
 8023ffa:	4628      	mov	r0, r5
 8023ffc:	47b8      	blx	r7
 8023ffe:	3001      	adds	r0, #1
 8024000:	f43f af22 	beq.w	8023e48 <_printf_float+0x98>
 8024004:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8024008:	ea59 0303 	orrs.w	r3, r9, r3
 802400c:	d102      	bne.n	8024014 <_printf_float+0x264>
 802400e:	6823      	ldr	r3, [r4, #0]
 8024010:	07d9      	lsls	r1, r3, #31
 8024012:	d5d7      	bpl.n	8023fc4 <_printf_float+0x214>
 8024014:	9b05      	ldr	r3, [sp, #20]
 8024016:	465a      	mov	r2, fp
 8024018:	4631      	mov	r1, r6
 802401a:	4628      	mov	r0, r5
 802401c:	47b8      	blx	r7
 802401e:	3001      	adds	r0, #1
 8024020:	f43f af12 	beq.w	8023e48 <_printf_float+0x98>
 8024024:	f04f 0a00 	mov.w	sl, #0
 8024028:	f104 0b1a 	add.w	fp, r4, #26
 802402c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802402e:	425b      	negs	r3, r3
 8024030:	4553      	cmp	r3, sl
 8024032:	dc01      	bgt.n	8024038 <_printf_float+0x288>
 8024034:	464b      	mov	r3, r9
 8024036:	e794      	b.n	8023f62 <_printf_float+0x1b2>
 8024038:	2301      	movs	r3, #1
 802403a:	465a      	mov	r2, fp
 802403c:	4631      	mov	r1, r6
 802403e:	4628      	mov	r0, r5
 8024040:	47b8      	blx	r7
 8024042:	3001      	adds	r0, #1
 8024044:	f43f af00 	beq.w	8023e48 <_printf_float+0x98>
 8024048:	f10a 0a01 	add.w	sl, sl, #1
 802404c:	e7ee      	b.n	802402c <_printf_float+0x27c>
 802404e:	bf00      	nop
 8024050:	ffffffff 	.word	0xffffffff
 8024054:	7fefffff 	.word	0x7fefffff
 8024058:	080385d0 	.word	0x080385d0
 802405c:	080385d4 	.word	0x080385d4
 8024060:	080385d8 	.word	0x080385d8
 8024064:	080385dc 	.word	0x080385dc
 8024068:	080385e0 	.word	0x080385e0
 802406c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802406e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8024072:	4553      	cmp	r3, sl
 8024074:	bfa8      	it	ge
 8024076:	4653      	movge	r3, sl
 8024078:	2b00      	cmp	r3, #0
 802407a:	4699      	mov	r9, r3
 802407c:	dc37      	bgt.n	80240ee <_printf_float+0x33e>
 802407e:	2300      	movs	r3, #0
 8024080:	9307      	str	r3, [sp, #28]
 8024082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024086:	f104 021a 	add.w	r2, r4, #26
 802408a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802408c:	9907      	ldr	r1, [sp, #28]
 802408e:	9306      	str	r3, [sp, #24]
 8024090:	eba3 0309 	sub.w	r3, r3, r9
 8024094:	428b      	cmp	r3, r1
 8024096:	dc31      	bgt.n	80240fc <_printf_float+0x34c>
 8024098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802409a:	459a      	cmp	sl, r3
 802409c:	dc3b      	bgt.n	8024116 <_printf_float+0x366>
 802409e:	6823      	ldr	r3, [r4, #0]
 80240a0:	07da      	lsls	r2, r3, #31
 80240a2:	d438      	bmi.n	8024116 <_printf_float+0x366>
 80240a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240a6:	ebaa 0903 	sub.w	r9, sl, r3
 80240aa:	9b06      	ldr	r3, [sp, #24]
 80240ac:	ebaa 0303 	sub.w	r3, sl, r3
 80240b0:	4599      	cmp	r9, r3
 80240b2:	bfa8      	it	ge
 80240b4:	4699      	movge	r9, r3
 80240b6:	f1b9 0f00 	cmp.w	r9, #0
 80240ba:	dc34      	bgt.n	8024126 <_printf_float+0x376>
 80240bc:	f04f 0800 	mov.w	r8, #0
 80240c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80240c4:	f104 0b1a 	add.w	fp, r4, #26
 80240c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240ca:	ebaa 0303 	sub.w	r3, sl, r3
 80240ce:	eba3 0309 	sub.w	r3, r3, r9
 80240d2:	4543      	cmp	r3, r8
 80240d4:	f77f af76 	ble.w	8023fc4 <_printf_float+0x214>
 80240d8:	2301      	movs	r3, #1
 80240da:	465a      	mov	r2, fp
 80240dc:	4631      	mov	r1, r6
 80240de:	4628      	mov	r0, r5
 80240e0:	47b8      	blx	r7
 80240e2:	3001      	adds	r0, #1
 80240e4:	f43f aeb0 	beq.w	8023e48 <_printf_float+0x98>
 80240e8:	f108 0801 	add.w	r8, r8, #1
 80240ec:	e7ec      	b.n	80240c8 <_printf_float+0x318>
 80240ee:	4642      	mov	r2, r8
 80240f0:	4631      	mov	r1, r6
 80240f2:	4628      	mov	r0, r5
 80240f4:	47b8      	blx	r7
 80240f6:	3001      	adds	r0, #1
 80240f8:	d1c1      	bne.n	802407e <_printf_float+0x2ce>
 80240fa:	e6a5      	b.n	8023e48 <_printf_float+0x98>
 80240fc:	2301      	movs	r3, #1
 80240fe:	4631      	mov	r1, r6
 8024100:	4628      	mov	r0, r5
 8024102:	9206      	str	r2, [sp, #24]
 8024104:	47b8      	blx	r7
 8024106:	3001      	adds	r0, #1
 8024108:	f43f ae9e 	beq.w	8023e48 <_printf_float+0x98>
 802410c:	9b07      	ldr	r3, [sp, #28]
 802410e:	9a06      	ldr	r2, [sp, #24]
 8024110:	3301      	adds	r3, #1
 8024112:	9307      	str	r3, [sp, #28]
 8024114:	e7b9      	b.n	802408a <_printf_float+0x2da>
 8024116:	9b05      	ldr	r3, [sp, #20]
 8024118:	465a      	mov	r2, fp
 802411a:	4631      	mov	r1, r6
 802411c:	4628      	mov	r0, r5
 802411e:	47b8      	blx	r7
 8024120:	3001      	adds	r0, #1
 8024122:	d1bf      	bne.n	80240a4 <_printf_float+0x2f4>
 8024124:	e690      	b.n	8023e48 <_printf_float+0x98>
 8024126:	9a06      	ldr	r2, [sp, #24]
 8024128:	464b      	mov	r3, r9
 802412a:	4442      	add	r2, r8
 802412c:	4631      	mov	r1, r6
 802412e:	4628      	mov	r0, r5
 8024130:	47b8      	blx	r7
 8024132:	3001      	adds	r0, #1
 8024134:	d1c2      	bne.n	80240bc <_printf_float+0x30c>
 8024136:	e687      	b.n	8023e48 <_printf_float+0x98>
 8024138:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802413c:	f1b9 0f01 	cmp.w	r9, #1
 8024140:	dc01      	bgt.n	8024146 <_printf_float+0x396>
 8024142:	07db      	lsls	r3, r3, #31
 8024144:	d536      	bpl.n	80241b4 <_printf_float+0x404>
 8024146:	2301      	movs	r3, #1
 8024148:	4642      	mov	r2, r8
 802414a:	4631      	mov	r1, r6
 802414c:	4628      	mov	r0, r5
 802414e:	47b8      	blx	r7
 8024150:	3001      	adds	r0, #1
 8024152:	f43f ae79 	beq.w	8023e48 <_printf_float+0x98>
 8024156:	9b05      	ldr	r3, [sp, #20]
 8024158:	465a      	mov	r2, fp
 802415a:	4631      	mov	r1, r6
 802415c:	4628      	mov	r0, r5
 802415e:	47b8      	blx	r7
 8024160:	3001      	adds	r0, #1
 8024162:	f43f ae71 	beq.w	8023e48 <_printf_float+0x98>
 8024166:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802416a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024172:	f109 39ff 	add.w	r9, r9, #4294967295
 8024176:	d018      	beq.n	80241aa <_printf_float+0x3fa>
 8024178:	464b      	mov	r3, r9
 802417a:	f108 0201 	add.w	r2, r8, #1
 802417e:	4631      	mov	r1, r6
 8024180:	4628      	mov	r0, r5
 8024182:	47b8      	blx	r7
 8024184:	3001      	adds	r0, #1
 8024186:	d10c      	bne.n	80241a2 <_printf_float+0x3f2>
 8024188:	e65e      	b.n	8023e48 <_printf_float+0x98>
 802418a:	2301      	movs	r3, #1
 802418c:	465a      	mov	r2, fp
 802418e:	4631      	mov	r1, r6
 8024190:	4628      	mov	r0, r5
 8024192:	47b8      	blx	r7
 8024194:	3001      	adds	r0, #1
 8024196:	f43f ae57 	beq.w	8023e48 <_printf_float+0x98>
 802419a:	f108 0801 	add.w	r8, r8, #1
 802419e:	45c8      	cmp	r8, r9
 80241a0:	dbf3      	blt.n	802418a <_printf_float+0x3da>
 80241a2:	4653      	mov	r3, sl
 80241a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80241a8:	e6dc      	b.n	8023f64 <_printf_float+0x1b4>
 80241aa:	f04f 0800 	mov.w	r8, #0
 80241ae:	f104 0b1a 	add.w	fp, r4, #26
 80241b2:	e7f4      	b.n	802419e <_printf_float+0x3ee>
 80241b4:	2301      	movs	r3, #1
 80241b6:	4642      	mov	r2, r8
 80241b8:	e7e1      	b.n	802417e <_printf_float+0x3ce>
 80241ba:	2301      	movs	r3, #1
 80241bc:	464a      	mov	r2, r9
 80241be:	4631      	mov	r1, r6
 80241c0:	4628      	mov	r0, r5
 80241c2:	47b8      	blx	r7
 80241c4:	3001      	adds	r0, #1
 80241c6:	f43f ae3f 	beq.w	8023e48 <_printf_float+0x98>
 80241ca:	f108 0801 	add.w	r8, r8, #1
 80241ce:	68e3      	ldr	r3, [r4, #12]
 80241d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80241d2:	1a5b      	subs	r3, r3, r1
 80241d4:	4543      	cmp	r3, r8
 80241d6:	dcf0      	bgt.n	80241ba <_printf_float+0x40a>
 80241d8:	e6f8      	b.n	8023fcc <_printf_float+0x21c>
 80241da:	f04f 0800 	mov.w	r8, #0
 80241de:	f104 0919 	add.w	r9, r4, #25
 80241e2:	e7f4      	b.n	80241ce <_printf_float+0x41e>

080241e4 <_printf_common>:
 80241e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241e8:	4616      	mov	r6, r2
 80241ea:	4698      	mov	r8, r3
 80241ec:	688a      	ldr	r2, [r1, #8]
 80241ee:	690b      	ldr	r3, [r1, #16]
 80241f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80241f4:	4293      	cmp	r3, r2
 80241f6:	bfb8      	it	lt
 80241f8:	4613      	movlt	r3, r2
 80241fa:	6033      	str	r3, [r6, #0]
 80241fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024200:	4607      	mov	r7, r0
 8024202:	460c      	mov	r4, r1
 8024204:	b10a      	cbz	r2, 802420a <_printf_common+0x26>
 8024206:	3301      	adds	r3, #1
 8024208:	6033      	str	r3, [r6, #0]
 802420a:	6823      	ldr	r3, [r4, #0]
 802420c:	0699      	lsls	r1, r3, #26
 802420e:	bf42      	ittt	mi
 8024210:	6833      	ldrmi	r3, [r6, #0]
 8024212:	3302      	addmi	r3, #2
 8024214:	6033      	strmi	r3, [r6, #0]
 8024216:	6825      	ldr	r5, [r4, #0]
 8024218:	f015 0506 	ands.w	r5, r5, #6
 802421c:	d106      	bne.n	802422c <_printf_common+0x48>
 802421e:	f104 0a19 	add.w	sl, r4, #25
 8024222:	68e3      	ldr	r3, [r4, #12]
 8024224:	6832      	ldr	r2, [r6, #0]
 8024226:	1a9b      	subs	r3, r3, r2
 8024228:	42ab      	cmp	r3, r5
 802422a:	dc26      	bgt.n	802427a <_printf_common+0x96>
 802422c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024230:	6822      	ldr	r2, [r4, #0]
 8024232:	3b00      	subs	r3, #0
 8024234:	bf18      	it	ne
 8024236:	2301      	movne	r3, #1
 8024238:	0692      	lsls	r2, r2, #26
 802423a:	d42b      	bmi.n	8024294 <_printf_common+0xb0>
 802423c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024240:	4641      	mov	r1, r8
 8024242:	4638      	mov	r0, r7
 8024244:	47c8      	blx	r9
 8024246:	3001      	adds	r0, #1
 8024248:	d01e      	beq.n	8024288 <_printf_common+0xa4>
 802424a:	6823      	ldr	r3, [r4, #0]
 802424c:	6922      	ldr	r2, [r4, #16]
 802424e:	f003 0306 	and.w	r3, r3, #6
 8024252:	2b04      	cmp	r3, #4
 8024254:	bf02      	ittt	eq
 8024256:	68e5      	ldreq	r5, [r4, #12]
 8024258:	6833      	ldreq	r3, [r6, #0]
 802425a:	1aed      	subeq	r5, r5, r3
 802425c:	68a3      	ldr	r3, [r4, #8]
 802425e:	bf0c      	ite	eq
 8024260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024264:	2500      	movne	r5, #0
 8024266:	4293      	cmp	r3, r2
 8024268:	bfc4      	itt	gt
 802426a:	1a9b      	subgt	r3, r3, r2
 802426c:	18ed      	addgt	r5, r5, r3
 802426e:	2600      	movs	r6, #0
 8024270:	341a      	adds	r4, #26
 8024272:	42b5      	cmp	r5, r6
 8024274:	d11a      	bne.n	80242ac <_printf_common+0xc8>
 8024276:	2000      	movs	r0, #0
 8024278:	e008      	b.n	802428c <_printf_common+0xa8>
 802427a:	2301      	movs	r3, #1
 802427c:	4652      	mov	r2, sl
 802427e:	4641      	mov	r1, r8
 8024280:	4638      	mov	r0, r7
 8024282:	47c8      	blx	r9
 8024284:	3001      	adds	r0, #1
 8024286:	d103      	bne.n	8024290 <_printf_common+0xac>
 8024288:	f04f 30ff 	mov.w	r0, #4294967295
 802428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024290:	3501      	adds	r5, #1
 8024292:	e7c6      	b.n	8024222 <_printf_common+0x3e>
 8024294:	18e1      	adds	r1, r4, r3
 8024296:	1c5a      	adds	r2, r3, #1
 8024298:	2030      	movs	r0, #48	@ 0x30
 802429a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802429e:	4422      	add	r2, r4
 80242a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80242a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80242a8:	3302      	adds	r3, #2
 80242aa:	e7c7      	b.n	802423c <_printf_common+0x58>
 80242ac:	2301      	movs	r3, #1
 80242ae:	4622      	mov	r2, r4
 80242b0:	4641      	mov	r1, r8
 80242b2:	4638      	mov	r0, r7
 80242b4:	47c8      	blx	r9
 80242b6:	3001      	adds	r0, #1
 80242b8:	d0e6      	beq.n	8024288 <_printf_common+0xa4>
 80242ba:	3601      	adds	r6, #1
 80242bc:	e7d9      	b.n	8024272 <_printf_common+0x8e>
	...

080242c0 <_printf_i>:
 80242c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80242c4:	7e0f      	ldrb	r7, [r1, #24]
 80242c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80242c8:	2f78      	cmp	r7, #120	@ 0x78
 80242ca:	4691      	mov	r9, r2
 80242cc:	4680      	mov	r8, r0
 80242ce:	460c      	mov	r4, r1
 80242d0:	469a      	mov	sl, r3
 80242d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80242d6:	d807      	bhi.n	80242e8 <_printf_i+0x28>
 80242d8:	2f62      	cmp	r7, #98	@ 0x62
 80242da:	d80a      	bhi.n	80242f2 <_printf_i+0x32>
 80242dc:	2f00      	cmp	r7, #0
 80242de:	f000 80d2 	beq.w	8024486 <_printf_i+0x1c6>
 80242e2:	2f58      	cmp	r7, #88	@ 0x58
 80242e4:	f000 80b9 	beq.w	802445a <_printf_i+0x19a>
 80242e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80242ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80242f0:	e03a      	b.n	8024368 <_printf_i+0xa8>
 80242f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80242f6:	2b15      	cmp	r3, #21
 80242f8:	d8f6      	bhi.n	80242e8 <_printf_i+0x28>
 80242fa:	a101      	add	r1, pc, #4	@ (adr r1, 8024300 <_printf_i+0x40>)
 80242fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024300:	08024359 	.word	0x08024359
 8024304:	0802436d 	.word	0x0802436d
 8024308:	080242e9 	.word	0x080242e9
 802430c:	080242e9 	.word	0x080242e9
 8024310:	080242e9 	.word	0x080242e9
 8024314:	080242e9 	.word	0x080242e9
 8024318:	0802436d 	.word	0x0802436d
 802431c:	080242e9 	.word	0x080242e9
 8024320:	080242e9 	.word	0x080242e9
 8024324:	080242e9 	.word	0x080242e9
 8024328:	080242e9 	.word	0x080242e9
 802432c:	0802446d 	.word	0x0802446d
 8024330:	08024397 	.word	0x08024397
 8024334:	08024427 	.word	0x08024427
 8024338:	080242e9 	.word	0x080242e9
 802433c:	080242e9 	.word	0x080242e9
 8024340:	0802448f 	.word	0x0802448f
 8024344:	080242e9 	.word	0x080242e9
 8024348:	08024397 	.word	0x08024397
 802434c:	080242e9 	.word	0x080242e9
 8024350:	080242e9 	.word	0x080242e9
 8024354:	0802442f 	.word	0x0802442f
 8024358:	6833      	ldr	r3, [r6, #0]
 802435a:	1d1a      	adds	r2, r3, #4
 802435c:	681b      	ldr	r3, [r3, #0]
 802435e:	6032      	str	r2, [r6, #0]
 8024360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024368:	2301      	movs	r3, #1
 802436a:	e09d      	b.n	80244a8 <_printf_i+0x1e8>
 802436c:	6833      	ldr	r3, [r6, #0]
 802436e:	6820      	ldr	r0, [r4, #0]
 8024370:	1d19      	adds	r1, r3, #4
 8024372:	6031      	str	r1, [r6, #0]
 8024374:	0606      	lsls	r6, r0, #24
 8024376:	d501      	bpl.n	802437c <_printf_i+0xbc>
 8024378:	681d      	ldr	r5, [r3, #0]
 802437a:	e003      	b.n	8024384 <_printf_i+0xc4>
 802437c:	0645      	lsls	r5, r0, #25
 802437e:	d5fb      	bpl.n	8024378 <_printf_i+0xb8>
 8024380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024384:	2d00      	cmp	r5, #0
 8024386:	da03      	bge.n	8024390 <_printf_i+0xd0>
 8024388:	232d      	movs	r3, #45	@ 0x2d
 802438a:	426d      	negs	r5, r5
 802438c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024390:	4859      	ldr	r0, [pc, #356]	@ (80244f8 <_printf_i+0x238>)
 8024392:	230a      	movs	r3, #10
 8024394:	e011      	b.n	80243ba <_printf_i+0xfa>
 8024396:	6821      	ldr	r1, [r4, #0]
 8024398:	6833      	ldr	r3, [r6, #0]
 802439a:	0608      	lsls	r0, r1, #24
 802439c:	f853 5b04 	ldr.w	r5, [r3], #4
 80243a0:	d402      	bmi.n	80243a8 <_printf_i+0xe8>
 80243a2:	0649      	lsls	r1, r1, #25
 80243a4:	bf48      	it	mi
 80243a6:	b2ad      	uxthmi	r5, r5
 80243a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80243aa:	4853      	ldr	r0, [pc, #332]	@ (80244f8 <_printf_i+0x238>)
 80243ac:	6033      	str	r3, [r6, #0]
 80243ae:	bf14      	ite	ne
 80243b0:	230a      	movne	r3, #10
 80243b2:	2308      	moveq	r3, #8
 80243b4:	2100      	movs	r1, #0
 80243b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80243ba:	6866      	ldr	r6, [r4, #4]
 80243bc:	60a6      	str	r6, [r4, #8]
 80243be:	2e00      	cmp	r6, #0
 80243c0:	bfa2      	ittt	ge
 80243c2:	6821      	ldrge	r1, [r4, #0]
 80243c4:	f021 0104 	bicge.w	r1, r1, #4
 80243c8:	6021      	strge	r1, [r4, #0]
 80243ca:	b90d      	cbnz	r5, 80243d0 <_printf_i+0x110>
 80243cc:	2e00      	cmp	r6, #0
 80243ce:	d04b      	beq.n	8024468 <_printf_i+0x1a8>
 80243d0:	4616      	mov	r6, r2
 80243d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80243d6:	fb03 5711 	mls	r7, r3, r1, r5
 80243da:	5dc7      	ldrb	r7, [r0, r7]
 80243dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80243e0:	462f      	mov	r7, r5
 80243e2:	42bb      	cmp	r3, r7
 80243e4:	460d      	mov	r5, r1
 80243e6:	d9f4      	bls.n	80243d2 <_printf_i+0x112>
 80243e8:	2b08      	cmp	r3, #8
 80243ea:	d10b      	bne.n	8024404 <_printf_i+0x144>
 80243ec:	6823      	ldr	r3, [r4, #0]
 80243ee:	07df      	lsls	r7, r3, #31
 80243f0:	d508      	bpl.n	8024404 <_printf_i+0x144>
 80243f2:	6923      	ldr	r3, [r4, #16]
 80243f4:	6861      	ldr	r1, [r4, #4]
 80243f6:	4299      	cmp	r1, r3
 80243f8:	bfde      	ittt	le
 80243fa:	2330      	movle	r3, #48	@ 0x30
 80243fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024400:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024404:	1b92      	subs	r2, r2, r6
 8024406:	6122      	str	r2, [r4, #16]
 8024408:	f8cd a000 	str.w	sl, [sp]
 802440c:	464b      	mov	r3, r9
 802440e:	aa03      	add	r2, sp, #12
 8024410:	4621      	mov	r1, r4
 8024412:	4640      	mov	r0, r8
 8024414:	f7ff fee6 	bl	80241e4 <_printf_common>
 8024418:	3001      	adds	r0, #1
 802441a:	d14a      	bne.n	80244b2 <_printf_i+0x1f2>
 802441c:	f04f 30ff 	mov.w	r0, #4294967295
 8024420:	b004      	add	sp, #16
 8024422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024426:	6823      	ldr	r3, [r4, #0]
 8024428:	f043 0320 	orr.w	r3, r3, #32
 802442c:	6023      	str	r3, [r4, #0]
 802442e:	4833      	ldr	r0, [pc, #204]	@ (80244fc <_printf_i+0x23c>)
 8024430:	2778      	movs	r7, #120	@ 0x78
 8024432:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024436:	6823      	ldr	r3, [r4, #0]
 8024438:	6831      	ldr	r1, [r6, #0]
 802443a:	061f      	lsls	r7, r3, #24
 802443c:	f851 5b04 	ldr.w	r5, [r1], #4
 8024440:	d402      	bmi.n	8024448 <_printf_i+0x188>
 8024442:	065f      	lsls	r7, r3, #25
 8024444:	bf48      	it	mi
 8024446:	b2ad      	uxthmi	r5, r5
 8024448:	6031      	str	r1, [r6, #0]
 802444a:	07d9      	lsls	r1, r3, #31
 802444c:	bf44      	itt	mi
 802444e:	f043 0320 	orrmi.w	r3, r3, #32
 8024452:	6023      	strmi	r3, [r4, #0]
 8024454:	b11d      	cbz	r5, 802445e <_printf_i+0x19e>
 8024456:	2310      	movs	r3, #16
 8024458:	e7ac      	b.n	80243b4 <_printf_i+0xf4>
 802445a:	4827      	ldr	r0, [pc, #156]	@ (80244f8 <_printf_i+0x238>)
 802445c:	e7e9      	b.n	8024432 <_printf_i+0x172>
 802445e:	6823      	ldr	r3, [r4, #0]
 8024460:	f023 0320 	bic.w	r3, r3, #32
 8024464:	6023      	str	r3, [r4, #0]
 8024466:	e7f6      	b.n	8024456 <_printf_i+0x196>
 8024468:	4616      	mov	r6, r2
 802446a:	e7bd      	b.n	80243e8 <_printf_i+0x128>
 802446c:	6833      	ldr	r3, [r6, #0]
 802446e:	6825      	ldr	r5, [r4, #0]
 8024470:	6961      	ldr	r1, [r4, #20]
 8024472:	1d18      	adds	r0, r3, #4
 8024474:	6030      	str	r0, [r6, #0]
 8024476:	062e      	lsls	r6, r5, #24
 8024478:	681b      	ldr	r3, [r3, #0]
 802447a:	d501      	bpl.n	8024480 <_printf_i+0x1c0>
 802447c:	6019      	str	r1, [r3, #0]
 802447e:	e002      	b.n	8024486 <_printf_i+0x1c6>
 8024480:	0668      	lsls	r0, r5, #25
 8024482:	d5fb      	bpl.n	802447c <_printf_i+0x1bc>
 8024484:	8019      	strh	r1, [r3, #0]
 8024486:	2300      	movs	r3, #0
 8024488:	6123      	str	r3, [r4, #16]
 802448a:	4616      	mov	r6, r2
 802448c:	e7bc      	b.n	8024408 <_printf_i+0x148>
 802448e:	6833      	ldr	r3, [r6, #0]
 8024490:	1d1a      	adds	r2, r3, #4
 8024492:	6032      	str	r2, [r6, #0]
 8024494:	681e      	ldr	r6, [r3, #0]
 8024496:	6862      	ldr	r2, [r4, #4]
 8024498:	2100      	movs	r1, #0
 802449a:	4630      	mov	r0, r6
 802449c:	f7db ff30 	bl	8000300 <memchr>
 80244a0:	b108      	cbz	r0, 80244a6 <_printf_i+0x1e6>
 80244a2:	1b80      	subs	r0, r0, r6
 80244a4:	6060      	str	r0, [r4, #4]
 80244a6:	6863      	ldr	r3, [r4, #4]
 80244a8:	6123      	str	r3, [r4, #16]
 80244aa:	2300      	movs	r3, #0
 80244ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80244b0:	e7aa      	b.n	8024408 <_printf_i+0x148>
 80244b2:	6923      	ldr	r3, [r4, #16]
 80244b4:	4632      	mov	r2, r6
 80244b6:	4649      	mov	r1, r9
 80244b8:	4640      	mov	r0, r8
 80244ba:	47d0      	blx	sl
 80244bc:	3001      	adds	r0, #1
 80244be:	d0ad      	beq.n	802441c <_printf_i+0x15c>
 80244c0:	6823      	ldr	r3, [r4, #0]
 80244c2:	079b      	lsls	r3, r3, #30
 80244c4:	d413      	bmi.n	80244ee <_printf_i+0x22e>
 80244c6:	68e0      	ldr	r0, [r4, #12]
 80244c8:	9b03      	ldr	r3, [sp, #12]
 80244ca:	4298      	cmp	r0, r3
 80244cc:	bfb8      	it	lt
 80244ce:	4618      	movlt	r0, r3
 80244d0:	e7a6      	b.n	8024420 <_printf_i+0x160>
 80244d2:	2301      	movs	r3, #1
 80244d4:	4632      	mov	r2, r6
 80244d6:	4649      	mov	r1, r9
 80244d8:	4640      	mov	r0, r8
 80244da:	47d0      	blx	sl
 80244dc:	3001      	adds	r0, #1
 80244de:	d09d      	beq.n	802441c <_printf_i+0x15c>
 80244e0:	3501      	adds	r5, #1
 80244e2:	68e3      	ldr	r3, [r4, #12]
 80244e4:	9903      	ldr	r1, [sp, #12]
 80244e6:	1a5b      	subs	r3, r3, r1
 80244e8:	42ab      	cmp	r3, r5
 80244ea:	dcf2      	bgt.n	80244d2 <_printf_i+0x212>
 80244ec:	e7eb      	b.n	80244c6 <_printf_i+0x206>
 80244ee:	2500      	movs	r5, #0
 80244f0:	f104 0619 	add.w	r6, r4, #25
 80244f4:	e7f5      	b.n	80244e2 <_printf_i+0x222>
 80244f6:	bf00      	nop
 80244f8:	080385e2 	.word	0x080385e2
 80244fc:	080385f3 	.word	0x080385f3

08024500 <_scanf_float>:
 8024500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024504:	b087      	sub	sp, #28
 8024506:	4617      	mov	r7, r2
 8024508:	9303      	str	r3, [sp, #12]
 802450a:	688b      	ldr	r3, [r1, #8]
 802450c:	1e5a      	subs	r2, r3, #1
 802450e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024512:	bf81      	itttt	hi
 8024514:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024518:	eb03 0b05 	addhi.w	fp, r3, r5
 802451c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024520:	608b      	strhi	r3, [r1, #8]
 8024522:	680b      	ldr	r3, [r1, #0]
 8024524:	460a      	mov	r2, r1
 8024526:	f04f 0500 	mov.w	r5, #0
 802452a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 802452e:	f842 3b1c 	str.w	r3, [r2], #28
 8024532:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8024536:	4680      	mov	r8, r0
 8024538:	460c      	mov	r4, r1
 802453a:	bf98      	it	ls
 802453c:	f04f 0b00 	movls.w	fp, #0
 8024540:	9201      	str	r2, [sp, #4]
 8024542:	4616      	mov	r6, r2
 8024544:	46aa      	mov	sl, r5
 8024546:	46a9      	mov	r9, r5
 8024548:	9502      	str	r5, [sp, #8]
 802454a:	68a2      	ldr	r2, [r4, #8]
 802454c:	b152      	cbz	r2, 8024564 <_scanf_float+0x64>
 802454e:	683b      	ldr	r3, [r7, #0]
 8024550:	781b      	ldrb	r3, [r3, #0]
 8024552:	2b4e      	cmp	r3, #78	@ 0x4e
 8024554:	d864      	bhi.n	8024620 <_scanf_float+0x120>
 8024556:	2b40      	cmp	r3, #64	@ 0x40
 8024558:	d83c      	bhi.n	80245d4 <_scanf_float+0xd4>
 802455a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802455e:	b2c8      	uxtb	r0, r1
 8024560:	280e      	cmp	r0, #14
 8024562:	d93a      	bls.n	80245da <_scanf_float+0xda>
 8024564:	f1b9 0f00 	cmp.w	r9, #0
 8024568:	d003      	beq.n	8024572 <_scanf_float+0x72>
 802456a:	6823      	ldr	r3, [r4, #0]
 802456c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024570:	6023      	str	r3, [r4, #0]
 8024572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024576:	f1ba 0f01 	cmp.w	sl, #1
 802457a:	f200 8117 	bhi.w	80247ac <_scanf_float+0x2ac>
 802457e:	9b01      	ldr	r3, [sp, #4]
 8024580:	429e      	cmp	r6, r3
 8024582:	f200 8108 	bhi.w	8024796 <_scanf_float+0x296>
 8024586:	2001      	movs	r0, #1
 8024588:	b007      	add	sp, #28
 802458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802458e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8024592:	2a0d      	cmp	r2, #13
 8024594:	d8e6      	bhi.n	8024564 <_scanf_float+0x64>
 8024596:	a101      	add	r1, pc, #4	@ (adr r1, 802459c <_scanf_float+0x9c>)
 8024598:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802459c:	080246e3 	.word	0x080246e3
 80245a0:	08024565 	.word	0x08024565
 80245a4:	08024565 	.word	0x08024565
 80245a8:	08024565 	.word	0x08024565
 80245ac:	08024743 	.word	0x08024743
 80245b0:	0802471b 	.word	0x0802471b
 80245b4:	08024565 	.word	0x08024565
 80245b8:	08024565 	.word	0x08024565
 80245bc:	080246f1 	.word	0x080246f1
 80245c0:	08024565 	.word	0x08024565
 80245c4:	08024565 	.word	0x08024565
 80245c8:	08024565 	.word	0x08024565
 80245cc:	08024565 	.word	0x08024565
 80245d0:	080246a9 	.word	0x080246a9
 80245d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80245d8:	e7db      	b.n	8024592 <_scanf_float+0x92>
 80245da:	290e      	cmp	r1, #14
 80245dc:	d8c2      	bhi.n	8024564 <_scanf_float+0x64>
 80245de:	a001      	add	r0, pc, #4	@ (adr r0, 80245e4 <_scanf_float+0xe4>)
 80245e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80245e4:	08024699 	.word	0x08024699
 80245e8:	08024565 	.word	0x08024565
 80245ec:	08024699 	.word	0x08024699
 80245f0:	0802472f 	.word	0x0802472f
 80245f4:	08024565 	.word	0x08024565
 80245f8:	08024641 	.word	0x08024641
 80245fc:	0802467f 	.word	0x0802467f
 8024600:	0802467f 	.word	0x0802467f
 8024604:	0802467f 	.word	0x0802467f
 8024608:	0802467f 	.word	0x0802467f
 802460c:	0802467f 	.word	0x0802467f
 8024610:	0802467f 	.word	0x0802467f
 8024614:	0802467f 	.word	0x0802467f
 8024618:	0802467f 	.word	0x0802467f
 802461c:	0802467f 	.word	0x0802467f
 8024620:	2b6e      	cmp	r3, #110	@ 0x6e
 8024622:	d809      	bhi.n	8024638 <_scanf_float+0x138>
 8024624:	2b60      	cmp	r3, #96	@ 0x60
 8024626:	d8b2      	bhi.n	802458e <_scanf_float+0x8e>
 8024628:	2b54      	cmp	r3, #84	@ 0x54
 802462a:	d07b      	beq.n	8024724 <_scanf_float+0x224>
 802462c:	2b59      	cmp	r3, #89	@ 0x59
 802462e:	d199      	bne.n	8024564 <_scanf_float+0x64>
 8024630:	2d07      	cmp	r5, #7
 8024632:	d197      	bne.n	8024564 <_scanf_float+0x64>
 8024634:	2508      	movs	r5, #8
 8024636:	e02c      	b.n	8024692 <_scanf_float+0x192>
 8024638:	2b74      	cmp	r3, #116	@ 0x74
 802463a:	d073      	beq.n	8024724 <_scanf_float+0x224>
 802463c:	2b79      	cmp	r3, #121	@ 0x79
 802463e:	e7f6      	b.n	802462e <_scanf_float+0x12e>
 8024640:	6821      	ldr	r1, [r4, #0]
 8024642:	05c8      	lsls	r0, r1, #23
 8024644:	d51b      	bpl.n	802467e <_scanf_float+0x17e>
 8024646:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802464a:	6021      	str	r1, [r4, #0]
 802464c:	f109 0901 	add.w	r9, r9, #1
 8024650:	f1bb 0f00 	cmp.w	fp, #0
 8024654:	d003      	beq.n	802465e <_scanf_float+0x15e>
 8024656:	3201      	adds	r2, #1
 8024658:	f10b 3bff 	add.w	fp, fp, #4294967295
 802465c:	60a2      	str	r2, [r4, #8]
 802465e:	68a3      	ldr	r3, [r4, #8]
 8024660:	3b01      	subs	r3, #1
 8024662:	60a3      	str	r3, [r4, #8]
 8024664:	6923      	ldr	r3, [r4, #16]
 8024666:	3301      	adds	r3, #1
 8024668:	6123      	str	r3, [r4, #16]
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	3b01      	subs	r3, #1
 802466e:	2b00      	cmp	r3, #0
 8024670:	607b      	str	r3, [r7, #4]
 8024672:	f340 8087 	ble.w	8024784 <_scanf_float+0x284>
 8024676:	683b      	ldr	r3, [r7, #0]
 8024678:	3301      	adds	r3, #1
 802467a:	603b      	str	r3, [r7, #0]
 802467c:	e765      	b.n	802454a <_scanf_float+0x4a>
 802467e:	eb1a 0105 	adds.w	r1, sl, r5
 8024682:	f47f af6f 	bne.w	8024564 <_scanf_float+0x64>
 8024686:	6822      	ldr	r2, [r4, #0]
 8024688:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 802468c:	6022      	str	r2, [r4, #0]
 802468e:	460d      	mov	r5, r1
 8024690:	468a      	mov	sl, r1
 8024692:	f806 3b01 	strb.w	r3, [r6], #1
 8024696:	e7e2      	b.n	802465e <_scanf_float+0x15e>
 8024698:	6822      	ldr	r2, [r4, #0]
 802469a:	0610      	lsls	r0, r2, #24
 802469c:	f57f af62 	bpl.w	8024564 <_scanf_float+0x64>
 80246a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80246a4:	6022      	str	r2, [r4, #0]
 80246a6:	e7f4      	b.n	8024692 <_scanf_float+0x192>
 80246a8:	f1ba 0f00 	cmp.w	sl, #0
 80246ac:	d10e      	bne.n	80246cc <_scanf_float+0x1cc>
 80246ae:	f1b9 0f00 	cmp.w	r9, #0
 80246b2:	d10e      	bne.n	80246d2 <_scanf_float+0x1d2>
 80246b4:	6822      	ldr	r2, [r4, #0]
 80246b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80246ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80246be:	d108      	bne.n	80246d2 <_scanf_float+0x1d2>
 80246c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80246c4:	6022      	str	r2, [r4, #0]
 80246c6:	f04f 0a01 	mov.w	sl, #1
 80246ca:	e7e2      	b.n	8024692 <_scanf_float+0x192>
 80246cc:	f1ba 0f02 	cmp.w	sl, #2
 80246d0:	d055      	beq.n	802477e <_scanf_float+0x27e>
 80246d2:	2d01      	cmp	r5, #1
 80246d4:	d002      	beq.n	80246dc <_scanf_float+0x1dc>
 80246d6:	2d04      	cmp	r5, #4
 80246d8:	f47f af44 	bne.w	8024564 <_scanf_float+0x64>
 80246dc:	3501      	adds	r5, #1
 80246de:	b2ed      	uxtb	r5, r5
 80246e0:	e7d7      	b.n	8024692 <_scanf_float+0x192>
 80246e2:	f1ba 0f01 	cmp.w	sl, #1
 80246e6:	f47f af3d 	bne.w	8024564 <_scanf_float+0x64>
 80246ea:	f04f 0a02 	mov.w	sl, #2
 80246ee:	e7d0      	b.n	8024692 <_scanf_float+0x192>
 80246f0:	b97d      	cbnz	r5, 8024712 <_scanf_float+0x212>
 80246f2:	f1b9 0f00 	cmp.w	r9, #0
 80246f6:	f47f af38 	bne.w	802456a <_scanf_float+0x6a>
 80246fa:	6822      	ldr	r2, [r4, #0]
 80246fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024700:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024704:	f040 8101 	bne.w	802490a <_scanf_float+0x40a>
 8024708:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802470c:	6022      	str	r2, [r4, #0]
 802470e:	2501      	movs	r5, #1
 8024710:	e7bf      	b.n	8024692 <_scanf_float+0x192>
 8024712:	2d03      	cmp	r5, #3
 8024714:	d0e2      	beq.n	80246dc <_scanf_float+0x1dc>
 8024716:	2d05      	cmp	r5, #5
 8024718:	e7de      	b.n	80246d8 <_scanf_float+0x1d8>
 802471a:	2d02      	cmp	r5, #2
 802471c:	f47f af22 	bne.w	8024564 <_scanf_float+0x64>
 8024720:	2503      	movs	r5, #3
 8024722:	e7b6      	b.n	8024692 <_scanf_float+0x192>
 8024724:	2d06      	cmp	r5, #6
 8024726:	f47f af1d 	bne.w	8024564 <_scanf_float+0x64>
 802472a:	2507      	movs	r5, #7
 802472c:	e7b1      	b.n	8024692 <_scanf_float+0x192>
 802472e:	6822      	ldr	r2, [r4, #0]
 8024730:	0591      	lsls	r1, r2, #22
 8024732:	f57f af17 	bpl.w	8024564 <_scanf_float+0x64>
 8024736:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 802473a:	6022      	str	r2, [r4, #0]
 802473c:	f8cd 9008 	str.w	r9, [sp, #8]
 8024740:	e7a7      	b.n	8024692 <_scanf_float+0x192>
 8024742:	6822      	ldr	r2, [r4, #0]
 8024744:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8024748:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 802474c:	d006      	beq.n	802475c <_scanf_float+0x25c>
 802474e:	0550      	lsls	r0, r2, #21
 8024750:	f57f af08 	bpl.w	8024564 <_scanf_float+0x64>
 8024754:	f1b9 0f00 	cmp.w	r9, #0
 8024758:	f000 80d7 	beq.w	802490a <_scanf_float+0x40a>
 802475c:	0591      	lsls	r1, r2, #22
 802475e:	bf58      	it	pl
 8024760:	9902      	ldrpl	r1, [sp, #8]
 8024762:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024766:	bf58      	it	pl
 8024768:	eba9 0101 	subpl.w	r1, r9, r1
 802476c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8024770:	bf58      	it	pl
 8024772:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8024776:	6022      	str	r2, [r4, #0]
 8024778:	f04f 0900 	mov.w	r9, #0
 802477c:	e789      	b.n	8024692 <_scanf_float+0x192>
 802477e:	f04f 0a03 	mov.w	sl, #3
 8024782:	e786      	b.n	8024692 <_scanf_float+0x192>
 8024784:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8024788:	4639      	mov	r1, r7
 802478a:	4640      	mov	r0, r8
 802478c:	4798      	blx	r3
 802478e:	2800      	cmp	r0, #0
 8024790:	f43f aedb 	beq.w	802454a <_scanf_float+0x4a>
 8024794:	e6e6      	b.n	8024564 <_scanf_float+0x64>
 8024796:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802479a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802479e:	463a      	mov	r2, r7
 80247a0:	4640      	mov	r0, r8
 80247a2:	4798      	blx	r3
 80247a4:	6923      	ldr	r3, [r4, #16]
 80247a6:	3b01      	subs	r3, #1
 80247a8:	6123      	str	r3, [r4, #16]
 80247aa:	e6e8      	b.n	802457e <_scanf_float+0x7e>
 80247ac:	1e6b      	subs	r3, r5, #1
 80247ae:	2b06      	cmp	r3, #6
 80247b0:	d824      	bhi.n	80247fc <_scanf_float+0x2fc>
 80247b2:	2d02      	cmp	r5, #2
 80247b4:	d836      	bhi.n	8024824 <_scanf_float+0x324>
 80247b6:	9b01      	ldr	r3, [sp, #4]
 80247b8:	429e      	cmp	r6, r3
 80247ba:	f67f aee4 	bls.w	8024586 <_scanf_float+0x86>
 80247be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80247c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80247c6:	463a      	mov	r2, r7
 80247c8:	4640      	mov	r0, r8
 80247ca:	4798      	blx	r3
 80247cc:	6923      	ldr	r3, [r4, #16]
 80247ce:	3b01      	subs	r3, #1
 80247d0:	6123      	str	r3, [r4, #16]
 80247d2:	e7f0      	b.n	80247b6 <_scanf_float+0x2b6>
 80247d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80247d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80247dc:	463a      	mov	r2, r7
 80247de:	4640      	mov	r0, r8
 80247e0:	4798      	blx	r3
 80247e2:	6923      	ldr	r3, [r4, #16]
 80247e4:	3b01      	subs	r3, #1
 80247e6:	6123      	str	r3, [r4, #16]
 80247e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80247ec:	fa5f fa8a 	uxtb.w	sl, sl
 80247f0:	f1ba 0f02 	cmp.w	sl, #2
 80247f4:	d1ee      	bne.n	80247d4 <_scanf_float+0x2d4>
 80247f6:	3d03      	subs	r5, #3
 80247f8:	b2ed      	uxtb	r5, r5
 80247fa:	1b76      	subs	r6, r6, r5
 80247fc:	6823      	ldr	r3, [r4, #0]
 80247fe:	05da      	lsls	r2, r3, #23
 8024800:	d530      	bpl.n	8024864 <_scanf_float+0x364>
 8024802:	055b      	lsls	r3, r3, #21
 8024804:	d511      	bpl.n	802482a <_scanf_float+0x32a>
 8024806:	9b01      	ldr	r3, [sp, #4]
 8024808:	429e      	cmp	r6, r3
 802480a:	f67f aebc 	bls.w	8024586 <_scanf_float+0x86>
 802480e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024816:	463a      	mov	r2, r7
 8024818:	4640      	mov	r0, r8
 802481a:	4798      	blx	r3
 802481c:	6923      	ldr	r3, [r4, #16]
 802481e:	3b01      	subs	r3, #1
 8024820:	6123      	str	r3, [r4, #16]
 8024822:	e7f0      	b.n	8024806 <_scanf_float+0x306>
 8024824:	46aa      	mov	sl, r5
 8024826:	46b3      	mov	fp, r6
 8024828:	e7de      	b.n	80247e8 <_scanf_float+0x2e8>
 802482a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802482e:	6923      	ldr	r3, [r4, #16]
 8024830:	2965      	cmp	r1, #101	@ 0x65
 8024832:	f103 33ff 	add.w	r3, r3, #4294967295
 8024836:	f106 35ff 	add.w	r5, r6, #4294967295
 802483a:	6123      	str	r3, [r4, #16]
 802483c:	d00c      	beq.n	8024858 <_scanf_float+0x358>
 802483e:	2945      	cmp	r1, #69	@ 0x45
 8024840:	d00a      	beq.n	8024858 <_scanf_float+0x358>
 8024842:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024846:	463a      	mov	r2, r7
 8024848:	4640      	mov	r0, r8
 802484a:	4798      	blx	r3
 802484c:	6923      	ldr	r3, [r4, #16]
 802484e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8024852:	3b01      	subs	r3, #1
 8024854:	1eb5      	subs	r5, r6, #2
 8024856:	6123      	str	r3, [r4, #16]
 8024858:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802485c:	463a      	mov	r2, r7
 802485e:	4640      	mov	r0, r8
 8024860:	4798      	blx	r3
 8024862:	462e      	mov	r6, r5
 8024864:	6822      	ldr	r2, [r4, #0]
 8024866:	f012 0210 	ands.w	r2, r2, #16
 802486a:	d001      	beq.n	8024870 <_scanf_float+0x370>
 802486c:	2000      	movs	r0, #0
 802486e:	e68b      	b.n	8024588 <_scanf_float+0x88>
 8024870:	7032      	strb	r2, [r6, #0]
 8024872:	6823      	ldr	r3, [r4, #0]
 8024874:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8024878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802487c:	d11a      	bne.n	80248b4 <_scanf_float+0x3b4>
 802487e:	9b02      	ldr	r3, [sp, #8]
 8024880:	454b      	cmp	r3, r9
 8024882:	eba3 0209 	sub.w	r2, r3, r9
 8024886:	d121      	bne.n	80248cc <_scanf_float+0x3cc>
 8024888:	9901      	ldr	r1, [sp, #4]
 802488a:	2200      	movs	r2, #0
 802488c:	4640      	mov	r0, r8
 802488e:	f002 fcd9 	bl	8027244 <_strtod_r>
 8024892:	9b03      	ldr	r3, [sp, #12]
 8024894:	6821      	ldr	r1, [r4, #0]
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	f011 0f02 	tst.w	r1, #2
 802489c:	f103 0204 	add.w	r2, r3, #4
 80248a0:	d01f      	beq.n	80248e2 <_scanf_float+0x3e2>
 80248a2:	9903      	ldr	r1, [sp, #12]
 80248a4:	600a      	str	r2, [r1, #0]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	ed83 0b00 	vstr	d0, [r3]
 80248ac:	68e3      	ldr	r3, [r4, #12]
 80248ae:	3301      	adds	r3, #1
 80248b0:	60e3      	str	r3, [r4, #12]
 80248b2:	e7db      	b.n	802486c <_scanf_float+0x36c>
 80248b4:	9b04      	ldr	r3, [sp, #16]
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d0e6      	beq.n	8024888 <_scanf_float+0x388>
 80248ba:	9905      	ldr	r1, [sp, #20]
 80248bc:	230a      	movs	r3, #10
 80248be:	3101      	adds	r1, #1
 80248c0:	4640      	mov	r0, r8
 80248c2:	f7ff f9db 	bl	8023c7c <_strtol_r>
 80248c6:	9b04      	ldr	r3, [sp, #16]
 80248c8:	9e05      	ldr	r6, [sp, #20]
 80248ca:	1ac2      	subs	r2, r0, r3
 80248cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80248d0:	429e      	cmp	r6, r3
 80248d2:	bf28      	it	cs
 80248d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80248d8:	490d      	ldr	r1, [pc, #52]	@ (8024910 <_scanf_float+0x410>)
 80248da:	4630      	mov	r0, r6
 80248dc:	f000 f99c 	bl	8024c18 <siprintf>
 80248e0:	e7d2      	b.n	8024888 <_scanf_float+0x388>
 80248e2:	f011 0f04 	tst.w	r1, #4
 80248e6:	9903      	ldr	r1, [sp, #12]
 80248e8:	600a      	str	r2, [r1, #0]
 80248ea:	d1dc      	bne.n	80248a6 <_scanf_float+0x3a6>
 80248ec:	eeb4 0b40 	vcmp.f64	d0, d0
 80248f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248f4:	681d      	ldr	r5, [r3, #0]
 80248f6:	d705      	bvc.n	8024904 <_scanf_float+0x404>
 80248f8:	4806      	ldr	r0, [pc, #24]	@ (8024914 <_scanf_float+0x414>)
 80248fa:	f000 fc09 	bl	8025110 <nanf>
 80248fe:	ed85 0a00 	vstr	s0, [r5]
 8024902:	e7d3      	b.n	80248ac <_scanf_float+0x3ac>
 8024904:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024908:	e7f9      	b.n	80248fe <_scanf_float+0x3fe>
 802490a:	f04f 0900 	mov.w	r9, #0
 802490e:	e630      	b.n	8024572 <_scanf_float+0x72>
 8024910:	08038604 	.word	0x08038604
 8024914:	0803845f 	.word	0x0803845f

08024918 <std>:
 8024918:	2300      	movs	r3, #0
 802491a:	b510      	push	{r4, lr}
 802491c:	4604      	mov	r4, r0
 802491e:	e9c0 3300 	strd	r3, r3, [r0]
 8024922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024926:	6083      	str	r3, [r0, #8]
 8024928:	8181      	strh	r1, [r0, #12]
 802492a:	6643      	str	r3, [r0, #100]	@ 0x64
 802492c:	81c2      	strh	r2, [r0, #14]
 802492e:	6183      	str	r3, [r0, #24]
 8024930:	4619      	mov	r1, r3
 8024932:	2208      	movs	r2, #8
 8024934:	305c      	adds	r0, #92	@ 0x5c
 8024936:	f000 fa91 	bl	8024e5c <memset>
 802493a:	4b0d      	ldr	r3, [pc, #52]	@ (8024970 <std+0x58>)
 802493c:	6263      	str	r3, [r4, #36]	@ 0x24
 802493e:	4b0d      	ldr	r3, [pc, #52]	@ (8024974 <std+0x5c>)
 8024940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024942:	4b0d      	ldr	r3, [pc, #52]	@ (8024978 <std+0x60>)
 8024944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024946:	4b0d      	ldr	r3, [pc, #52]	@ (802497c <std+0x64>)
 8024948:	6323      	str	r3, [r4, #48]	@ 0x30
 802494a:	4b0d      	ldr	r3, [pc, #52]	@ (8024980 <std+0x68>)
 802494c:	6224      	str	r4, [r4, #32]
 802494e:	429c      	cmp	r4, r3
 8024950:	d006      	beq.n	8024960 <std+0x48>
 8024952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024956:	4294      	cmp	r4, r2
 8024958:	d002      	beq.n	8024960 <std+0x48>
 802495a:	33d0      	adds	r3, #208	@ 0xd0
 802495c:	429c      	cmp	r4, r3
 802495e:	d105      	bne.n	802496c <std+0x54>
 8024960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024968:	f000 bbb8 	b.w	80250dc <__retarget_lock_init_recursive>
 802496c:	bd10      	pop	{r4, pc}
 802496e:	bf00      	nop
 8024970:	08024c59 	.word	0x08024c59
 8024974:	08024c7b 	.word	0x08024c7b
 8024978:	08024cb3 	.word	0x08024cb3
 802497c:	08024cd7 	.word	0x08024cd7
 8024980:	240089c4 	.word	0x240089c4

08024984 <stdio_exit_handler>:
 8024984:	4a02      	ldr	r2, [pc, #8]	@ (8024990 <stdio_exit_handler+0xc>)
 8024986:	4903      	ldr	r1, [pc, #12]	@ (8024994 <stdio_exit_handler+0x10>)
 8024988:	4803      	ldr	r0, [pc, #12]	@ (8024998 <stdio_exit_handler+0x14>)
 802498a:	f000 b87b 	b.w	8024a84 <_fwalk_sglue>
 802498e:	bf00      	nop
 8024990:	240007a4 	.word	0x240007a4
 8024994:	0802788d 	.word	0x0802788d
 8024998:	240007b4 	.word	0x240007b4

0802499c <cleanup_stdio>:
 802499c:	6841      	ldr	r1, [r0, #4]
 802499e:	4b0c      	ldr	r3, [pc, #48]	@ (80249d0 <cleanup_stdio+0x34>)
 80249a0:	4299      	cmp	r1, r3
 80249a2:	b510      	push	{r4, lr}
 80249a4:	4604      	mov	r4, r0
 80249a6:	d001      	beq.n	80249ac <cleanup_stdio+0x10>
 80249a8:	f002 ff70 	bl	802788c <_fflush_r>
 80249ac:	68a1      	ldr	r1, [r4, #8]
 80249ae:	4b09      	ldr	r3, [pc, #36]	@ (80249d4 <cleanup_stdio+0x38>)
 80249b0:	4299      	cmp	r1, r3
 80249b2:	d002      	beq.n	80249ba <cleanup_stdio+0x1e>
 80249b4:	4620      	mov	r0, r4
 80249b6:	f002 ff69 	bl	802788c <_fflush_r>
 80249ba:	68e1      	ldr	r1, [r4, #12]
 80249bc:	4b06      	ldr	r3, [pc, #24]	@ (80249d8 <cleanup_stdio+0x3c>)
 80249be:	4299      	cmp	r1, r3
 80249c0:	d004      	beq.n	80249cc <cleanup_stdio+0x30>
 80249c2:	4620      	mov	r0, r4
 80249c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80249c8:	f002 bf60 	b.w	802788c <_fflush_r>
 80249cc:	bd10      	pop	{r4, pc}
 80249ce:	bf00      	nop
 80249d0:	240089c4 	.word	0x240089c4
 80249d4:	24008a2c 	.word	0x24008a2c
 80249d8:	24008a94 	.word	0x24008a94

080249dc <global_stdio_init.part.0>:
 80249dc:	b510      	push	{r4, lr}
 80249de:	4b0b      	ldr	r3, [pc, #44]	@ (8024a0c <global_stdio_init.part.0+0x30>)
 80249e0:	4c0b      	ldr	r4, [pc, #44]	@ (8024a10 <global_stdio_init.part.0+0x34>)
 80249e2:	4a0c      	ldr	r2, [pc, #48]	@ (8024a14 <global_stdio_init.part.0+0x38>)
 80249e4:	601a      	str	r2, [r3, #0]
 80249e6:	4620      	mov	r0, r4
 80249e8:	2200      	movs	r2, #0
 80249ea:	2104      	movs	r1, #4
 80249ec:	f7ff ff94 	bl	8024918 <std>
 80249f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80249f4:	2201      	movs	r2, #1
 80249f6:	2109      	movs	r1, #9
 80249f8:	f7ff ff8e 	bl	8024918 <std>
 80249fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024a00:	2202      	movs	r2, #2
 8024a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a06:	2112      	movs	r1, #18
 8024a08:	f7ff bf86 	b.w	8024918 <std>
 8024a0c:	24008afc 	.word	0x24008afc
 8024a10:	240089c4 	.word	0x240089c4
 8024a14:	08024985 	.word	0x08024985

08024a18 <__sfp_lock_acquire>:
 8024a18:	4801      	ldr	r0, [pc, #4]	@ (8024a20 <__sfp_lock_acquire+0x8>)
 8024a1a:	f000 bb60 	b.w	80250de <__retarget_lock_acquire_recursive>
 8024a1e:	bf00      	nop
 8024a20:	24008b05 	.word	0x24008b05

08024a24 <__sfp_lock_release>:
 8024a24:	4801      	ldr	r0, [pc, #4]	@ (8024a2c <__sfp_lock_release+0x8>)
 8024a26:	f000 bb5b 	b.w	80250e0 <__retarget_lock_release_recursive>
 8024a2a:	bf00      	nop
 8024a2c:	24008b05 	.word	0x24008b05

08024a30 <__sinit>:
 8024a30:	b510      	push	{r4, lr}
 8024a32:	4604      	mov	r4, r0
 8024a34:	f7ff fff0 	bl	8024a18 <__sfp_lock_acquire>
 8024a38:	6a23      	ldr	r3, [r4, #32]
 8024a3a:	b11b      	cbz	r3, 8024a44 <__sinit+0x14>
 8024a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a40:	f7ff bff0 	b.w	8024a24 <__sfp_lock_release>
 8024a44:	4b04      	ldr	r3, [pc, #16]	@ (8024a58 <__sinit+0x28>)
 8024a46:	6223      	str	r3, [r4, #32]
 8024a48:	4b04      	ldr	r3, [pc, #16]	@ (8024a5c <__sinit+0x2c>)
 8024a4a:	681b      	ldr	r3, [r3, #0]
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d1f5      	bne.n	8024a3c <__sinit+0xc>
 8024a50:	f7ff ffc4 	bl	80249dc <global_stdio_init.part.0>
 8024a54:	e7f2      	b.n	8024a3c <__sinit+0xc>
 8024a56:	bf00      	nop
 8024a58:	0802499d 	.word	0x0802499d
 8024a5c:	24008afc 	.word	0x24008afc

08024a60 <fiprintf>:
 8024a60:	b40e      	push	{r1, r2, r3}
 8024a62:	b503      	push	{r0, r1, lr}
 8024a64:	4601      	mov	r1, r0
 8024a66:	ab03      	add	r3, sp, #12
 8024a68:	4805      	ldr	r0, [pc, #20]	@ (8024a80 <fiprintf+0x20>)
 8024a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a6e:	6800      	ldr	r0, [r0, #0]
 8024a70:	9301      	str	r3, [sp, #4]
 8024a72:	f002 fd6f 	bl	8027554 <_vfiprintf_r>
 8024a76:	b002      	add	sp, #8
 8024a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8024a7c:	b003      	add	sp, #12
 8024a7e:	4770      	bx	lr
 8024a80:	240007b0 	.word	0x240007b0

08024a84 <_fwalk_sglue>:
 8024a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024a88:	4607      	mov	r7, r0
 8024a8a:	4688      	mov	r8, r1
 8024a8c:	4614      	mov	r4, r2
 8024a8e:	2600      	movs	r6, #0
 8024a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024a94:	f1b9 0901 	subs.w	r9, r9, #1
 8024a98:	d505      	bpl.n	8024aa6 <_fwalk_sglue+0x22>
 8024a9a:	6824      	ldr	r4, [r4, #0]
 8024a9c:	2c00      	cmp	r4, #0
 8024a9e:	d1f7      	bne.n	8024a90 <_fwalk_sglue+0xc>
 8024aa0:	4630      	mov	r0, r6
 8024aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024aa6:	89ab      	ldrh	r3, [r5, #12]
 8024aa8:	2b01      	cmp	r3, #1
 8024aaa:	d907      	bls.n	8024abc <_fwalk_sglue+0x38>
 8024aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024ab0:	3301      	adds	r3, #1
 8024ab2:	d003      	beq.n	8024abc <_fwalk_sglue+0x38>
 8024ab4:	4629      	mov	r1, r5
 8024ab6:	4638      	mov	r0, r7
 8024ab8:	47c0      	blx	r8
 8024aba:	4306      	orrs	r6, r0
 8024abc:	3568      	adds	r5, #104	@ 0x68
 8024abe:	e7e9      	b.n	8024a94 <_fwalk_sglue+0x10>

08024ac0 <iprintf>:
 8024ac0:	b40f      	push	{r0, r1, r2, r3}
 8024ac2:	b507      	push	{r0, r1, r2, lr}
 8024ac4:	4906      	ldr	r1, [pc, #24]	@ (8024ae0 <iprintf+0x20>)
 8024ac6:	ab04      	add	r3, sp, #16
 8024ac8:	6808      	ldr	r0, [r1, #0]
 8024aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8024ace:	6881      	ldr	r1, [r0, #8]
 8024ad0:	9301      	str	r3, [sp, #4]
 8024ad2:	f002 fd3f 	bl	8027554 <_vfiprintf_r>
 8024ad6:	b003      	add	sp, #12
 8024ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8024adc:	b004      	add	sp, #16
 8024ade:	4770      	bx	lr
 8024ae0:	240007b0 	.word	0x240007b0

08024ae4 <putchar>:
 8024ae4:	4b02      	ldr	r3, [pc, #8]	@ (8024af0 <putchar+0xc>)
 8024ae6:	4601      	mov	r1, r0
 8024ae8:	6818      	ldr	r0, [r3, #0]
 8024aea:	6882      	ldr	r2, [r0, #8]
 8024aec:	f002 bf58 	b.w	80279a0 <_putc_r>
 8024af0:	240007b0 	.word	0x240007b0

08024af4 <_puts_r>:
 8024af4:	6a03      	ldr	r3, [r0, #32]
 8024af6:	b570      	push	{r4, r5, r6, lr}
 8024af8:	6884      	ldr	r4, [r0, #8]
 8024afa:	4605      	mov	r5, r0
 8024afc:	460e      	mov	r6, r1
 8024afe:	b90b      	cbnz	r3, 8024b04 <_puts_r+0x10>
 8024b00:	f7ff ff96 	bl	8024a30 <__sinit>
 8024b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024b06:	07db      	lsls	r3, r3, #31
 8024b08:	d405      	bmi.n	8024b16 <_puts_r+0x22>
 8024b0a:	89a3      	ldrh	r3, [r4, #12]
 8024b0c:	0598      	lsls	r0, r3, #22
 8024b0e:	d402      	bmi.n	8024b16 <_puts_r+0x22>
 8024b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024b12:	f000 fae4 	bl	80250de <__retarget_lock_acquire_recursive>
 8024b16:	89a3      	ldrh	r3, [r4, #12]
 8024b18:	0719      	lsls	r1, r3, #28
 8024b1a:	d502      	bpl.n	8024b22 <_puts_r+0x2e>
 8024b1c:	6923      	ldr	r3, [r4, #16]
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	d135      	bne.n	8024b8e <_puts_r+0x9a>
 8024b22:	4621      	mov	r1, r4
 8024b24:	4628      	mov	r0, r5
 8024b26:	f000 f919 	bl	8024d5c <__swsetup_r>
 8024b2a:	b380      	cbz	r0, 8024b8e <_puts_r+0x9a>
 8024b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8024b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024b32:	07da      	lsls	r2, r3, #31
 8024b34:	d405      	bmi.n	8024b42 <_puts_r+0x4e>
 8024b36:	89a3      	ldrh	r3, [r4, #12]
 8024b38:	059b      	lsls	r3, r3, #22
 8024b3a:	d402      	bmi.n	8024b42 <_puts_r+0x4e>
 8024b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024b3e:	f000 facf 	bl	80250e0 <__retarget_lock_release_recursive>
 8024b42:	4628      	mov	r0, r5
 8024b44:	bd70      	pop	{r4, r5, r6, pc}
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	da04      	bge.n	8024b54 <_puts_r+0x60>
 8024b4a:	69a2      	ldr	r2, [r4, #24]
 8024b4c:	429a      	cmp	r2, r3
 8024b4e:	dc17      	bgt.n	8024b80 <_puts_r+0x8c>
 8024b50:	290a      	cmp	r1, #10
 8024b52:	d015      	beq.n	8024b80 <_puts_r+0x8c>
 8024b54:	6823      	ldr	r3, [r4, #0]
 8024b56:	1c5a      	adds	r2, r3, #1
 8024b58:	6022      	str	r2, [r4, #0]
 8024b5a:	7019      	strb	r1, [r3, #0]
 8024b5c:	68a3      	ldr	r3, [r4, #8]
 8024b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024b62:	3b01      	subs	r3, #1
 8024b64:	60a3      	str	r3, [r4, #8]
 8024b66:	2900      	cmp	r1, #0
 8024b68:	d1ed      	bne.n	8024b46 <_puts_r+0x52>
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	da11      	bge.n	8024b92 <_puts_r+0x9e>
 8024b6e:	4622      	mov	r2, r4
 8024b70:	210a      	movs	r1, #10
 8024b72:	4628      	mov	r0, r5
 8024b74:	f000 f8b3 	bl	8024cde <__swbuf_r>
 8024b78:	3001      	adds	r0, #1
 8024b7a:	d0d7      	beq.n	8024b2c <_puts_r+0x38>
 8024b7c:	250a      	movs	r5, #10
 8024b7e:	e7d7      	b.n	8024b30 <_puts_r+0x3c>
 8024b80:	4622      	mov	r2, r4
 8024b82:	4628      	mov	r0, r5
 8024b84:	f000 f8ab 	bl	8024cde <__swbuf_r>
 8024b88:	3001      	adds	r0, #1
 8024b8a:	d1e7      	bne.n	8024b5c <_puts_r+0x68>
 8024b8c:	e7ce      	b.n	8024b2c <_puts_r+0x38>
 8024b8e:	3e01      	subs	r6, #1
 8024b90:	e7e4      	b.n	8024b5c <_puts_r+0x68>
 8024b92:	6823      	ldr	r3, [r4, #0]
 8024b94:	1c5a      	adds	r2, r3, #1
 8024b96:	6022      	str	r2, [r4, #0]
 8024b98:	220a      	movs	r2, #10
 8024b9a:	701a      	strb	r2, [r3, #0]
 8024b9c:	e7ee      	b.n	8024b7c <_puts_r+0x88>
	...

08024ba0 <puts>:
 8024ba0:	4b02      	ldr	r3, [pc, #8]	@ (8024bac <puts+0xc>)
 8024ba2:	4601      	mov	r1, r0
 8024ba4:	6818      	ldr	r0, [r3, #0]
 8024ba6:	f7ff bfa5 	b.w	8024af4 <_puts_r>
 8024baa:	bf00      	nop
 8024bac:	240007b0 	.word	0x240007b0

08024bb0 <sniprintf>:
 8024bb0:	b40c      	push	{r2, r3}
 8024bb2:	b530      	push	{r4, r5, lr}
 8024bb4:	4b17      	ldr	r3, [pc, #92]	@ (8024c14 <sniprintf+0x64>)
 8024bb6:	1e0c      	subs	r4, r1, #0
 8024bb8:	681d      	ldr	r5, [r3, #0]
 8024bba:	b09d      	sub	sp, #116	@ 0x74
 8024bbc:	da08      	bge.n	8024bd0 <sniprintf+0x20>
 8024bbe:	238b      	movs	r3, #139	@ 0x8b
 8024bc0:	602b      	str	r3, [r5, #0]
 8024bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8024bc6:	b01d      	add	sp, #116	@ 0x74
 8024bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024bcc:	b002      	add	sp, #8
 8024bce:	4770      	bx	lr
 8024bd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8024bd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024bd8:	bf14      	ite	ne
 8024bda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024bde:	4623      	moveq	r3, r4
 8024be0:	9304      	str	r3, [sp, #16]
 8024be2:	9307      	str	r3, [sp, #28]
 8024be4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024be8:	9002      	str	r0, [sp, #8]
 8024bea:	9006      	str	r0, [sp, #24]
 8024bec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024bf0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024bf2:	ab21      	add	r3, sp, #132	@ 0x84
 8024bf4:	a902      	add	r1, sp, #8
 8024bf6:	4628      	mov	r0, r5
 8024bf8:	9301      	str	r3, [sp, #4]
 8024bfa:	f002 fb85 	bl	8027308 <_svfiprintf_r>
 8024bfe:	1c43      	adds	r3, r0, #1
 8024c00:	bfbc      	itt	lt
 8024c02:	238b      	movlt	r3, #139	@ 0x8b
 8024c04:	602b      	strlt	r3, [r5, #0]
 8024c06:	2c00      	cmp	r4, #0
 8024c08:	d0dd      	beq.n	8024bc6 <sniprintf+0x16>
 8024c0a:	9b02      	ldr	r3, [sp, #8]
 8024c0c:	2200      	movs	r2, #0
 8024c0e:	701a      	strb	r2, [r3, #0]
 8024c10:	e7d9      	b.n	8024bc6 <sniprintf+0x16>
 8024c12:	bf00      	nop
 8024c14:	240007b0 	.word	0x240007b0

08024c18 <siprintf>:
 8024c18:	b40e      	push	{r1, r2, r3}
 8024c1a:	b500      	push	{lr}
 8024c1c:	b09c      	sub	sp, #112	@ 0x70
 8024c1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8024c20:	9002      	str	r0, [sp, #8]
 8024c22:	9006      	str	r0, [sp, #24]
 8024c24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024c28:	4809      	ldr	r0, [pc, #36]	@ (8024c50 <siprintf+0x38>)
 8024c2a:	9107      	str	r1, [sp, #28]
 8024c2c:	9104      	str	r1, [sp, #16]
 8024c2e:	4909      	ldr	r1, [pc, #36]	@ (8024c54 <siprintf+0x3c>)
 8024c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8024c34:	9105      	str	r1, [sp, #20]
 8024c36:	6800      	ldr	r0, [r0, #0]
 8024c38:	9301      	str	r3, [sp, #4]
 8024c3a:	a902      	add	r1, sp, #8
 8024c3c:	f002 fb64 	bl	8027308 <_svfiprintf_r>
 8024c40:	9b02      	ldr	r3, [sp, #8]
 8024c42:	2200      	movs	r2, #0
 8024c44:	701a      	strb	r2, [r3, #0]
 8024c46:	b01c      	add	sp, #112	@ 0x70
 8024c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8024c4c:	b003      	add	sp, #12
 8024c4e:	4770      	bx	lr
 8024c50:	240007b0 	.word	0x240007b0
 8024c54:	ffff0208 	.word	0xffff0208

08024c58 <__sread>:
 8024c58:	b510      	push	{r4, lr}
 8024c5a:	460c      	mov	r4, r1
 8024c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c60:	f000 f9de 	bl	8025020 <_read_r>
 8024c64:	2800      	cmp	r0, #0
 8024c66:	bfab      	itete	ge
 8024c68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8024c6c:	181b      	addge	r3, r3, r0
 8024c6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024c72:	bfac      	ite	ge
 8024c74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024c76:	81a3      	strhlt	r3, [r4, #12]
 8024c78:	bd10      	pop	{r4, pc}

08024c7a <__swrite>:
 8024c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c7e:	461f      	mov	r7, r3
 8024c80:	898b      	ldrh	r3, [r1, #12]
 8024c82:	05db      	lsls	r3, r3, #23
 8024c84:	4605      	mov	r5, r0
 8024c86:	460c      	mov	r4, r1
 8024c88:	4616      	mov	r6, r2
 8024c8a:	d505      	bpl.n	8024c98 <__swrite+0x1e>
 8024c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c90:	2302      	movs	r3, #2
 8024c92:	2200      	movs	r2, #0
 8024c94:	f000 f9b2 	bl	8024ffc <_lseek_r>
 8024c98:	89a3      	ldrh	r3, [r4, #12]
 8024c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024ca2:	81a3      	strh	r3, [r4, #12]
 8024ca4:	4632      	mov	r2, r6
 8024ca6:	463b      	mov	r3, r7
 8024ca8:	4628      	mov	r0, r5
 8024caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cae:	f000 b9d9 	b.w	8025064 <_write_r>

08024cb2 <__sseek>:
 8024cb2:	b510      	push	{r4, lr}
 8024cb4:	460c      	mov	r4, r1
 8024cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024cba:	f000 f99f 	bl	8024ffc <_lseek_r>
 8024cbe:	1c43      	adds	r3, r0, #1
 8024cc0:	89a3      	ldrh	r3, [r4, #12]
 8024cc2:	bf15      	itete	ne
 8024cc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024cc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024cca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024cce:	81a3      	strheq	r3, [r4, #12]
 8024cd0:	bf18      	it	ne
 8024cd2:	81a3      	strhne	r3, [r4, #12]
 8024cd4:	bd10      	pop	{r4, pc}

08024cd6 <__sclose>:
 8024cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024cda:	f000 b929 	b.w	8024f30 <_close_r>

08024cde <__swbuf_r>:
 8024cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ce0:	460e      	mov	r6, r1
 8024ce2:	4614      	mov	r4, r2
 8024ce4:	4605      	mov	r5, r0
 8024ce6:	b118      	cbz	r0, 8024cf0 <__swbuf_r+0x12>
 8024ce8:	6a03      	ldr	r3, [r0, #32]
 8024cea:	b90b      	cbnz	r3, 8024cf0 <__swbuf_r+0x12>
 8024cec:	f7ff fea0 	bl	8024a30 <__sinit>
 8024cf0:	69a3      	ldr	r3, [r4, #24]
 8024cf2:	60a3      	str	r3, [r4, #8]
 8024cf4:	89a3      	ldrh	r3, [r4, #12]
 8024cf6:	071a      	lsls	r2, r3, #28
 8024cf8:	d501      	bpl.n	8024cfe <__swbuf_r+0x20>
 8024cfa:	6923      	ldr	r3, [r4, #16]
 8024cfc:	b943      	cbnz	r3, 8024d10 <__swbuf_r+0x32>
 8024cfe:	4621      	mov	r1, r4
 8024d00:	4628      	mov	r0, r5
 8024d02:	f000 f82b 	bl	8024d5c <__swsetup_r>
 8024d06:	b118      	cbz	r0, 8024d10 <__swbuf_r+0x32>
 8024d08:	f04f 37ff 	mov.w	r7, #4294967295
 8024d0c:	4638      	mov	r0, r7
 8024d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d10:	6823      	ldr	r3, [r4, #0]
 8024d12:	6922      	ldr	r2, [r4, #16]
 8024d14:	1a98      	subs	r0, r3, r2
 8024d16:	6963      	ldr	r3, [r4, #20]
 8024d18:	b2f6      	uxtb	r6, r6
 8024d1a:	4283      	cmp	r3, r0
 8024d1c:	4637      	mov	r7, r6
 8024d1e:	dc05      	bgt.n	8024d2c <__swbuf_r+0x4e>
 8024d20:	4621      	mov	r1, r4
 8024d22:	4628      	mov	r0, r5
 8024d24:	f002 fdb2 	bl	802788c <_fflush_r>
 8024d28:	2800      	cmp	r0, #0
 8024d2a:	d1ed      	bne.n	8024d08 <__swbuf_r+0x2a>
 8024d2c:	68a3      	ldr	r3, [r4, #8]
 8024d2e:	3b01      	subs	r3, #1
 8024d30:	60a3      	str	r3, [r4, #8]
 8024d32:	6823      	ldr	r3, [r4, #0]
 8024d34:	1c5a      	adds	r2, r3, #1
 8024d36:	6022      	str	r2, [r4, #0]
 8024d38:	701e      	strb	r6, [r3, #0]
 8024d3a:	6962      	ldr	r2, [r4, #20]
 8024d3c:	1c43      	adds	r3, r0, #1
 8024d3e:	429a      	cmp	r2, r3
 8024d40:	d004      	beq.n	8024d4c <__swbuf_r+0x6e>
 8024d42:	89a3      	ldrh	r3, [r4, #12]
 8024d44:	07db      	lsls	r3, r3, #31
 8024d46:	d5e1      	bpl.n	8024d0c <__swbuf_r+0x2e>
 8024d48:	2e0a      	cmp	r6, #10
 8024d4a:	d1df      	bne.n	8024d0c <__swbuf_r+0x2e>
 8024d4c:	4621      	mov	r1, r4
 8024d4e:	4628      	mov	r0, r5
 8024d50:	f002 fd9c 	bl	802788c <_fflush_r>
 8024d54:	2800      	cmp	r0, #0
 8024d56:	d0d9      	beq.n	8024d0c <__swbuf_r+0x2e>
 8024d58:	e7d6      	b.n	8024d08 <__swbuf_r+0x2a>
	...

08024d5c <__swsetup_r>:
 8024d5c:	b538      	push	{r3, r4, r5, lr}
 8024d5e:	4b29      	ldr	r3, [pc, #164]	@ (8024e04 <__swsetup_r+0xa8>)
 8024d60:	4605      	mov	r5, r0
 8024d62:	6818      	ldr	r0, [r3, #0]
 8024d64:	460c      	mov	r4, r1
 8024d66:	b118      	cbz	r0, 8024d70 <__swsetup_r+0x14>
 8024d68:	6a03      	ldr	r3, [r0, #32]
 8024d6a:	b90b      	cbnz	r3, 8024d70 <__swsetup_r+0x14>
 8024d6c:	f7ff fe60 	bl	8024a30 <__sinit>
 8024d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024d74:	0719      	lsls	r1, r3, #28
 8024d76:	d422      	bmi.n	8024dbe <__swsetup_r+0x62>
 8024d78:	06da      	lsls	r2, r3, #27
 8024d7a:	d407      	bmi.n	8024d8c <__swsetup_r+0x30>
 8024d7c:	2209      	movs	r2, #9
 8024d7e:	602a      	str	r2, [r5, #0]
 8024d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024d84:	81a3      	strh	r3, [r4, #12]
 8024d86:	f04f 30ff 	mov.w	r0, #4294967295
 8024d8a:	e033      	b.n	8024df4 <__swsetup_r+0x98>
 8024d8c:	0758      	lsls	r0, r3, #29
 8024d8e:	d512      	bpl.n	8024db6 <__swsetup_r+0x5a>
 8024d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024d92:	b141      	cbz	r1, 8024da6 <__swsetup_r+0x4a>
 8024d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024d98:	4299      	cmp	r1, r3
 8024d9a:	d002      	beq.n	8024da2 <__swsetup_r+0x46>
 8024d9c:	4628      	mov	r0, r5
 8024d9e:	f000 ffa5 	bl	8025cec <_free_r>
 8024da2:	2300      	movs	r3, #0
 8024da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8024da6:	89a3      	ldrh	r3, [r4, #12]
 8024da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024dac:	81a3      	strh	r3, [r4, #12]
 8024dae:	2300      	movs	r3, #0
 8024db0:	6063      	str	r3, [r4, #4]
 8024db2:	6923      	ldr	r3, [r4, #16]
 8024db4:	6023      	str	r3, [r4, #0]
 8024db6:	89a3      	ldrh	r3, [r4, #12]
 8024db8:	f043 0308 	orr.w	r3, r3, #8
 8024dbc:	81a3      	strh	r3, [r4, #12]
 8024dbe:	6923      	ldr	r3, [r4, #16]
 8024dc0:	b94b      	cbnz	r3, 8024dd6 <__swsetup_r+0x7a>
 8024dc2:	89a3      	ldrh	r3, [r4, #12]
 8024dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024dcc:	d003      	beq.n	8024dd6 <__swsetup_r+0x7a>
 8024dce:	4621      	mov	r1, r4
 8024dd0:	4628      	mov	r0, r5
 8024dd2:	f002 fda9 	bl	8027928 <__smakebuf_r>
 8024dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024dda:	f013 0201 	ands.w	r2, r3, #1
 8024dde:	d00a      	beq.n	8024df6 <__swsetup_r+0x9a>
 8024de0:	2200      	movs	r2, #0
 8024de2:	60a2      	str	r2, [r4, #8]
 8024de4:	6962      	ldr	r2, [r4, #20]
 8024de6:	4252      	negs	r2, r2
 8024de8:	61a2      	str	r2, [r4, #24]
 8024dea:	6922      	ldr	r2, [r4, #16]
 8024dec:	b942      	cbnz	r2, 8024e00 <__swsetup_r+0xa4>
 8024dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024df2:	d1c5      	bne.n	8024d80 <__swsetup_r+0x24>
 8024df4:	bd38      	pop	{r3, r4, r5, pc}
 8024df6:	0799      	lsls	r1, r3, #30
 8024df8:	bf58      	it	pl
 8024dfa:	6962      	ldrpl	r2, [r4, #20]
 8024dfc:	60a2      	str	r2, [r4, #8]
 8024dfe:	e7f4      	b.n	8024dea <__swsetup_r+0x8e>
 8024e00:	2000      	movs	r0, #0
 8024e02:	e7f7      	b.n	8024df4 <__swsetup_r+0x98>
 8024e04:	240007b0 	.word	0x240007b0

08024e08 <memcmp>:
 8024e08:	b510      	push	{r4, lr}
 8024e0a:	3901      	subs	r1, #1
 8024e0c:	4402      	add	r2, r0
 8024e0e:	4290      	cmp	r0, r2
 8024e10:	d101      	bne.n	8024e16 <memcmp+0xe>
 8024e12:	2000      	movs	r0, #0
 8024e14:	e005      	b.n	8024e22 <memcmp+0x1a>
 8024e16:	7803      	ldrb	r3, [r0, #0]
 8024e18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024e1c:	42a3      	cmp	r3, r4
 8024e1e:	d001      	beq.n	8024e24 <memcmp+0x1c>
 8024e20:	1b18      	subs	r0, r3, r4
 8024e22:	bd10      	pop	{r4, pc}
 8024e24:	3001      	adds	r0, #1
 8024e26:	e7f2      	b.n	8024e0e <memcmp+0x6>

08024e28 <memmove>:
 8024e28:	4288      	cmp	r0, r1
 8024e2a:	b510      	push	{r4, lr}
 8024e2c:	eb01 0402 	add.w	r4, r1, r2
 8024e30:	d902      	bls.n	8024e38 <memmove+0x10>
 8024e32:	4284      	cmp	r4, r0
 8024e34:	4623      	mov	r3, r4
 8024e36:	d807      	bhi.n	8024e48 <memmove+0x20>
 8024e38:	1e43      	subs	r3, r0, #1
 8024e3a:	42a1      	cmp	r1, r4
 8024e3c:	d008      	beq.n	8024e50 <memmove+0x28>
 8024e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024e46:	e7f8      	b.n	8024e3a <memmove+0x12>
 8024e48:	4402      	add	r2, r0
 8024e4a:	4601      	mov	r1, r0
 8024e4c:	428a      	cmp	r2, r1
 8024e4e:	d100      	bne.n	8024e52 <memmove+0x2a>
 8024e50:	bd10      	pop	{r4, pc}
 8024e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024e5a:	e7f7      	b.n	8024e4c <memmove+0x24>

08024e5c <memset>:
 8024e5c:	4402      	add	r2, r0
 8024e5e:	4603      	mov	r3, r0
 8024e60:	4293      	cmp	r3, r2
 8024e62:	d100      	bne.n	8024e66 <memset+0xa>
 8024e64:	4770      	bx	lr
 8024e66:	f803 1b01 	strb.w	r1, [r3], #1
 8024e6a:	e7f9      	b.n	8024e60 <memset+0x4>

08024e6c <strchr>:
 8024e6c:	b2c9      	uxtb	r1, r1
 8024e6e:	4603      	mov	r3, r0
 8024e70:	4618      	mov	r0, r3
 8024e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024e76:	b112      	cbz	r2, 8024e7e <strchr+0x12>
 8024e78:	428a      	cmp	r2, r1
 8024e7a:	d1f9      	bne.n	8024e70 <strchr+0x4>
 8024e7c:	4770      	bx	lr
 8024e7e:	2900      	cmp	r1, #0
 8024e80:	bf18      	it	ne
 8024e82:	2000      	movne	r0, #0
 8024e84:	4770      	bx	lr

08024e86 <strncmp>:
 8024e86:	b510      	push	{r4, lr}
 8024e88:	b16a      	cbz	r2, 8024ea6 <strncmp+0x20>
 8024e8a:	3901      	subs	r1, #1
 8024e8c:	1884      	adds	r4, r0, r2
 8024e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024e92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024e96:	429a      	cmp	r2, r3
 8024e98:	d103      	bne.n	8024ea2 <strncmp+0x1c>
 8024e9a:	42a0      	cmp	r0, r4
 8024e9c:	d001      	beq.n	8024ea2 <strncmp+0x1c>
 8024e9e:	2a00      	cmp	r2, #0
 8024ea0:	d1f5      	bne.n	8024e8e <strncmp+0x8>
 8024ea2:	1ad0      	subs	r0, r2, r3
 8024ea4:	bd10      	pop	{r4, pc}
 8024ea6:	4610      	mov	r0, r2
 8024ea8:	e7fc      	b.n	8024ea4 <strncmp+0x1e>

08024eaa <strncpy>:
 8024eaa:	b510      	push	{r4, lr}
 8024eac:	3901      	subs	r1, #1
 8024eae:	4603      	mov	r3, r0
 8024eb0:	b132      	cbz	r2, 8024ec0 <strncpy+0x16>
 8024eb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024eb6:	f803 4b01 	strb.w	r4, [r3], #1
 8024eba:	3a01      	subs	r2, #1
 8024ebc:	2c00      	cmp	r4, #0
 8024ebe:	d1f7      	bne.n	8024eb0 <strncpy+0x6>
 8024ec0:	441a      	add	r2, r3
 8024ec2:	2100      	movs	r1, #0
 8024ec4:	4293      	cmp	r3, r2
 8024ec6:	d100      	bne.n	8024eca <strncpy+0x20>
 8024ec8:	bd10      	pop	{r4, pc}
 8024eca:	f803 1b01 	strb.w	r1, [r3], #1
 8024ece:	e7f9      	b.n	8024ec4 <strncpy+0x1a>

08024ed0 <strrchr>:
 8024ed0:	b538      	push	{r3, r4, r5, lr}
 8024ed2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8024ed6:	4603      	mov	r3, r0
 8024ed8:	d10e      	bne.n	8024ef8 <strrchr+0x28>
 8024eda:	4621      	mov	r1, r4
 8024edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024ee0:	f7ff bfc4 	b.w	8024e6c <strchr>
 8024ee4:	1c43      	adds	r3, r0, #1
 8024ee6:	4605      	mov	r5, r0
 8024ee8:	4621      	mov	r1, r4
 8024eea:	4618      	mov	r0, r3
 8024eec:	f7ff ffbe 	bl	8024e6c <strchr>
 8024ef0:	2800      	cmp	r0, #0
 8024ef2:	d1f7      	bne.n	8024ee4 <strrchr+0x14>
 8024ef4:	4628      	mov	r0, r5
 8024ef6:	bd38      	pop	{r3, r4, r5, pc}
 8024ef8:	2500      	movs	r5, #0
 8024efa:	e7f5      	b.n	8024ee8 <strrchr+0x18>

08024efc <strstr>:
 8024efc:	780a      	ldrb	r2, [r1, #0]
 8024efe:	b570      	push	{r4, r5, r6, lr}
 8024f00:	b96a      	cbnz	r2, 8024f1e <strstr+0x22>
 8024f02:	bd70      	pop	{r4, r5, r6, pc}
 8024f04:	429a      	cmp	r2, r3
 8024f06:	d109      	bne.n	8024f1c <strstr+0x20>
 8024f08:	460c      	mov	r4, r1
 8024f0a:	4605      	mov	r5, r0
 8024f0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	d0f6      	beq.n	8024f02 <strstr+0x6>
 8024f14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8024f18:	429e      	cmp	r6, r3
 8024f1a:	d0f7      	beq.n	8024f0c <strstr+0x10>
 8024f1c:	3001      	adds	r0, #1
 8024f1e:	7803      	ldrb	r3, [r0, #0]
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	d1ef      	bne.n	8024f04 <strstr+0x8>
 8024f24:	4618      	mov	r0, r3
 8024f26:	e7ec      	b.n	8024f02 <strstr+0x6>

08024f28 <_localeconv_r>:
 8024f28:	4800      	ldr	r0, [pc, #0]	@ (8024f2c <_localeconv_r+0x4>)
 8024f2a:	4770      	bx	lr
 8024f2c:	240008f0 	.word	0x240008f0

08024f30 <_close_r>:
 8024f30:	b538      	push	{r3, r4, r5, lr}
 8024f32:	4d06      	ldr	r5, [pc, #24]	@ (8024f4c <_close_r+0x1c>)
 8024f34:	2300      	movs	r3, #0
 8024f36:	4604      	mov	r4, r0
 8024f38:	4608      	mov	r0, r1
 8024f3a:	602b      	str	r3, [r5, #0]
 8024f3c:	f7f6 fa0e 	bl	801b35c <_close>
 8024f40:	1c43      	adds	r3, r0, #1
 8024f42:	d102      	bne.n	8024f4a <_close_r+0x1a>
 8024f44:	682b      	ldr	r3, [r5, #0]
 8024f46:	b103      	cbz	r3, 8024f4a <_close_r+0x1a>
 8024f48:	6023      	str	r3, [r4, #0]
 8024f4a:	bd38      	pop	{r3, r4, r5, pc}
 8024f4c:	24008b00 	.word	0x24008b00

08024f50 <_reclaim_reent>:
 8024f50:	4b29      	ldr	r3, [pc, #164]	@ (8024ff8 <_reclaim_reent+0xa8>)
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	4283      	cmp	r3, r0
 8024f56:	b570      	push	{r4, r5, r6, lr}
 8024f58:	4604      	mov	r4, r0
 8024f5a:	d04b      	beq.n	8024ff4 <_reclaim_reent+0xa4>
 8024f5c:	69c3      	ldr	r3, [r0, #28]
 8024f5e:	b1ab      	cbz	r3, 8024f8c <_reclaim_reent+0x3c>
 8024f60:	68db      	ldr	r3, [r3, #12]
 8024f62:	b16b      	cbz	r3, 8024f80 <_reclaim_reent+0x30>
 8024f64:	2500      	movs	r5, #0
 8024f66:	69e3      	ldr	r3, [r4, #28]
 8024f68:	68db      	ldr	r3, [r3, #12]
 8024f6a:	5959      	ldr	r1, [r3, r5]
 8024f6c:	2900      	cmp	r1, #0
 8024f6e:	d13b      	bne.n	8024fe8 <_reclaim_reent+0x98>
 8024f70:	3504      	adds	r5, #4
 8024f72:	2d80      	cmp	r5, #128	@ 0x80
 8024f74:	d1f7      	bne.n	8024f66 <_reclaim_reent+0x16>
 8024f76:	69e3      	ldr	r3, [r4, #28]
 8024f78:	4620      	mov	r0, r4
 8024f7a:	68d9      	ldr	r1, [r3, #12]
 8024f7c:	f000 feb6 	bl	8025cec <_free_r>
 8024f80:	69e3      	ldr	r3, [r4, #28]
 8024f82:	6819      	ldr	r1, [r3, #0]
 8024f84:	b111      	cbz	r1, 8024f8c <_reclaim_reent+0x3c>
 8024f86:	4620      	mov	r0, r4
 8024f88:	f000 feb0 	bl	8025cec <_free_r>
 8024f8c:	6961      	ldr	r1, [r4, #20]
 8024f8e:	b111      	cbz	r1, 8024f96 <_reclaim_reent+0x46>
 8024f90:	4620      	mov	r0, r4
 8024f92:	f000 feab 	bl	8025cec <_free_r>
 8024f96:	69e1      	ldr	r1, [r4, #28]
 8024f98:	b111      	cbz	r1, 8024fa0 <_reclaim_reent+0x50>
 8024f9a:	4620      	mov	r0, r4
 8024f9c:	f000 fea6 	bl	8025cec <_free_r>
 8024fa0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024fa2:	b111      	cbz	r1, 8024faa <_reclaim_reent+0x5a>
 8024fa4:	4620      	mov	r0, r4
 8024fa6:	f000 fea1 	bl	8025cec <_free_r>
 8024faa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024fac:	b111      	cbz	r1, 8024fb4 <_reclaim_reent+0x64>
 8024fae:	4620      	mov	r0, r4
 8024fb0:	f000 fe9c 	bl	8025cec <_free_r>
 8024fb4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8024fb6:	b111      	cbz	r1, 8024fbe <_reclaim_reent+0x6e>
 8024fb8:	4620      	mov	r0, r4
 8024fba:	f000 fe97 	bl	8025cec <_free_r>
 8024fbe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8024fc0:	b111      	cbz	r1, 8024fc8 <_reclaim_reent+0x78>
 8024fc2:	4620      	mov	r0, r4
 8024fc4:	f000 fe92 	bl	8025cec <_free_r>
 8024fc8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8024fca:	b111      	cbz	r1, 8024fd2 <_reclaim_reent+0x82>
 8024fcc:	4620      	mov	r0, r4
 8024fce:	f000 fe8d 	bl	8025cec <_free_r>
 8024fd2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8024fd4:	b111      	cbz	r1, 8024fdc <_reclaim_reent+0x8c>
 8024fd6:	4620      	mov	r0, r4
 8024fd8:	f000 fe88 	bl	8025cec <_free_r>
 8024fdc:	6a23      	ldr	r3, [r4, #32]
 8024fde:	b14b      	cbz	r3, 8024ff4 <_reclaim_reent+0xa4>
 8024fe0:	4620      	mov	r0, r4
 8024fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024fe6:	4718      	bx	r3
 8024fe8:	680e      	ldr	r6, [r1, #0]
 8024fea:	4620      	mov	r0, r4
 8024fec:	f000 fe7e 	bl	8025cec <_free_r>
 8024ff0:	4631      	mov	r1, r6
 8024ff2:	e7bb      	b.n	8024f6c <_reclaim_reent+0x1c>
 8024ff4:	bd70      	pop	{r4, r5, r6, pc}
 8024ff6:	bf00      	nop
 8024ff8:	240007b0 	.word	0x240007b0

08024ffc <_lseek_r>:
 8024ffc:	b538      	push	{r3, r4, r5, lr}
 8024ffe:	4d07      	ldr	r5, [pc, #28]	@ (802501c <_lseek_r+0x20>)
 8025000:	4604      	mov	r4, r0
 8025002:	4608      	mov	r0, r1
 8025004:	4611      	mov	r1, r2
 8025006:	2200      	movs	r2, #0
 8025008:	602a      	str	r2, [r5, #0]
 802500a:	461a      	mov	r2, r3
 802500c:	f7f6 f9cd 	bl	801b3aa <_lseek>
 8025010:	1c43      	adds	r3, r0, #1
 8025012:	d102      	bne.n	802501a <_lseek_r+0x1e>
 8025014:	682b      	ldr	r3, [r5, #0]
 8025016:	b103      	cbz	r3, 802501a <_lseek_r+0x1e>
 8025018:	6023      	str	r3, [r4, #0]
 802501a:	bd38      	pop	{r3, r4, r5, pc}
 802501c:	24008b00 	.word	0x24008b00

08025020 <_read_r>:
 8025020:	b538      	push	{r3, r4, r5, lr}
 8025022:	4d07      	ldr	r5, [pc, #28]	@ (8025040 <_read_r+0x20>)
 8025024:	4604      	mov	r4, r0
 8025026:	4608      	mov	r0, r1
 8025028:	4611      	mov	r1, r2
 802502a:	2200      	movs	r2, #0
 802502c:	602a      	str	r2, [r5, #0]
 802502e:	461a      	mov	r2, r3
 8025030:	f7f6 f977 	bl	801b322 <_read>
 8025034:	1c43      	adds	r3, r0, #1
 8025036:	d102      	bne.n	802503e <_read_r+0x1e>
 8025038:	682b      	ldr	r3, [r5, #0]
 802503a:	b103      	cbz	r3, 802503e <_read_r+0x1e>
 802503c:	6023      	str	r3, [r4, #0]
 802503e:	bd38      	pop	{r3, r4, r5, pc}
 8025040:	24008b00 	.word	0x24008b00

08025044 <_sbrk_r>:
 8025044:	b538      	push	{r3, r4, r5, lr}
 8025046:	4d06      	ldr	r5, [pc, #24]	@ (8025060 <_sbrk_r+0x1c>)
 8025048:	2300      	movs	r3, #0
 802504a:	4604      	mov	r4, r0
 802504c:	4608      	mov	r0, r1
 802504e:	602b      	str	r3, [r5, #0]
 8025050:	f7f6 f9b8 	bl	801b3c4 <_sbrk>
 8025054:	1c43      	adds	r3, r0, #1
 8025056:	d102      	bne.n	802505e <_sbrk_r+0x1a>
 8025058:	682b      	ldr	r3, [r5, #0]
 802505a:	b103      	cbz	r3, 802505e <_sbrk_r+0x1a>
 802505c:	6023      	str	r3, [r4, #0]
 802505e:	bd38      	pop	{r3, r4, r5, pc}
 8025060:	24008b00 	.word	0x24008b00

08025064 <_write_r>:
 8025064:	b538      	push	{r3, r4, r5, lr}
 8025066:	4d07      	ldr	r5, [pc, #28]	@ (8025084 <_write_r+0x20>)
 8025068:	4604      	mov	r4, r0
 802506a:	4608      	mov	r0, r1
 802506c:	4611      	mov	r1, r2
 802506e:	2200      	movs	r2, #0
 8025070:	602a      	str	r2, [r5, #0]
 8025072:	461a      	mov	r2, r3
 8025074:	f7db ff92 	bl	8000f9c <_write>
 8025078:	1c43      	adds	r3, r0, #1
 802507a:	d102      	bne.n	8025082 <_write_r+0x1e>
 802507c:	682b      	ldr	r3, [r5, #0]
 802507e:	b103      	cbz	r3, 8025082 <_write_r+0x1e>
 8025080:	6023      	str	r3, [r4, #0]
 8025082:	bd38      	pop	{r3, r4, r5, pc}
 8025084:	24008b00 	.word	0x24008b00

08025088 <__errno>:
 8025088:	4b01      	ldr	r3, [pc, #4]	@ (8025090 <__errno+0x8>)
 802508a:	6818      	ldr	r0, [r3, #0]
 802508c:	4770      	bx	lr
 802508e:	bf00      	nop
 8025090:	240007b0 	.word	0x240007b0

08025094 <__libc_init_array>:
 8025094:	b570      	push	{r4, r5, r6, lr}
 8025096:	4d0d      	ldr	r5, [pc, #52]	@ (80250cc <__libc_init_array+0x38>)
 8025098:	4c0d      	ldr	r4, [pc, #52]	@ (80250d0 <__libc_init_array+0x3c>)
 802509a:	1b64      	subs	r4, r4, r5
 802509c:	10a4      	asrs	r4, r4, #2
 802509e:	2600      	movs	r6, #0
 80250a0:	42a6      	cmp	r6, r4
 80250a2:	d109      	bne.n	80250b8 <__libc_init_array+0x24>
 80250a4:	4d0b      	ldr	r5, [pc, #44]	@ (80250d4 <__libc_init_array+0x40>)
 80250a6:	4c0c      	ldr	r4, [pc, #48]	@ (80250d8 <__libc_init_array+0x44>)
 80250a8:	f003 f8ac 	bl	8028204 <_init>
 80250ac:	1b64      	subs	r4, r4, r5
 80250ae:	10a4      	asrs	r4, r4, #2
 80250b0:	2600      	movs	r6, #0
 80250b2:	42a6      	cmp	r6, r4
 80250b4:	d105      	bne.n	80250c2 <__libc_init_array+0x2e>
 80250b6:	bd70      	pop	{r4, r5, r6, pc}
 80250b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80250bc:	4798      	blx	r3
 80250be:	3601      	adds	r6, #1
 80250c0:	e7ee      	b.n	80250a0 <__libc_init_array+0xc>
 80250c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80250c6:	4798      	blx	r3
 80250c8:	3601      	adds	r6, #1
 80250ca:	e7f2      	b.n	80250b2 <__libc_init_array+0x1e>
 80250cc:	080388b4 	.word	0x080388b4
 80250d0:	080388b4 	.word	0x080388b4
 80250d4:	080388b4 	.word	0x080388b4
 80250d8:	080388b8 	.word	0x080388b8

080250dc <__retarget_lock_init_recursive>:
 80250dc:	4770      	bx	lr

080250de <__retarget_lock_acquire_recursive>:
 80250de:	4770      	bx	lr

080250e0 <__retarget_lock_release_recursive>:
 80250e0:	4770      	bx	lr

080250e2 <strcpy>:
 80250e2:	4603      	mov	r3, r0
 80250e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80250e8:	f803 2b01 	strb.w	r2, [r3], #1
 80250ec:	2a00      	cmp	r2, #0
 80250ee:	d1f9      	bne.n	80250e4 <strcpy+0x2>
 80250f0:	4770      	bx	lr

080250f2 <memcpy>:
 80250f2:	440a      	add	r2, r1
 80250f4:	4291      	cmp	r1, r2
 80250f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80250fa:	d100      	bne.n	80250fe <memcpy+0xc>
 80250fc:	4770      	bx	lr
 80250fe:	b510      	push	{r4, lr}
 8025100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025108:	4291      	cmp	r1, r2
 802510a:	d1f9      	bne.n	8025100 <memcpy+0xe>
 802510c:	bd10      	pop	{r4, pc}
	...

08025110 <nanf>:
 8025110:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8025118 <nanf+0x8>
 8025114:	4770      	bx	lr
 8025116:	bf00      	nop
 8025118:	7fc00000 	.word	0x7fc00000

0802511c <abort>:
 802511c:	b508      	push	{r3, lr}
 802511e:	2006      	movs	r0, #6
 8025120:	f002 fc9a 	bl	8027a58 <raise>
 8025124:	2001      	movs	r0, #1
 8025126:	f7f6 f8f1 	bl	801b30c <_exit>

0802512a <quorem>:
 802512a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802512e:	6903      	ldr	r3, [r0, #16]
 8025130:	690c      	ldr	r4, [r1, #16]
 8025132:	42a3      	cmp	r3, r4
 8025134:	4607      	mov	r7, r0
 8025136:	db7e      	blt.n	8025236 <quorem+0x10c>
 8025138:	3c01      	subs	r4, #1
 802513a:	f101 0814 	add.w	r8, r1, #20
 802513e:	00a3      	lsls	r3, r4, #2
 8025140:	f100 0514 	add.w	r5, r0, #20
 8025144:	9300      	str	r3, [sp, #0]
 8025146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802514a:	9301      	str	r3, [sp, #4]
 802514c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025154:	3301      	adds	r3, #1
 8025156:	429a      	cmp	r2, r3
 8025158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802515c:	fbb2 f6f3 	udiv	r6, r2, r3
 8025160:	d32e      	bcc.n	80251c0 <quorem+0x96>
 8025162:	f04f 0a00 	mov.w	sl, #0
 8025166:	46c4      	mov	ip, r8
 8025168:	46ae      	mov	lr, r5
 802516a:	46d3      	mov	fp, sl
 802516c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025170:	b298      	uxth	r0, r3
 8025172:	fb06 a000 	mla	r0, r6, r0, sl
 8025176:	0c02      	lsrs	r2, r0, #16
 8025178:	0c1b      	lsrs	r3, r3, #16
 802517a:	fb06 2303 	mla	r3, r6, r3, r2
 802517e:	f8de 2000 	ldr.w	r2, [lr]
 8025182:	b280      	uxth	r0, r0
 8025184:	b292      	uxth	r2, r2
 8025186:	1a12      	subs	r2, r2, r0
 8025188:	445a      	add	r2, fp
 802518a:	f8de 0000 	ldr.w	r0, [lr]
 802518e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025192:	b29b      	uxth	r3, r3
 8025194:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8025198:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802519c:	b292      	uxth	r2, r2
 802519e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80251a2:	45e1      	cmp	r9, ip
 80251a4:	f84e 2b04 	str.w	r2, [lr], #4
 80251a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80251ac:	d2de      	bcs.n	802516c <quorem+0x42>
 80251ae:	9b00      	ldr	r3, [sp, #0]
 80251b0:	58eb      	ldr	r3, [r5, r3]
 80251b2:	b92b      	cbnz	r3, 80251c0 <quorem+0x96>
 80251b4:	9b01      	ldr	r3, [sp, #4]
 80251b6:	3b04      	subs	r3, #4
 80251b8:	429d      	cmp	r5, r3
 80251ba:	461a      	mov	r2, r3
 80251bc:	d32f      	bcc.n	802521e <quorem+0xf4>
 80251be:	613c      	str	r4, [r7, #16]
 80251c0:	4638      	mov	r0, r7
 80251c2:	f001 f8a1 	bl	8026308 <__mcmp>
 80251c6:	2800      	cmp	r0, #0
 80251c8:	db25      	blt.n	8025216 <quorem+0xec>
 80251ca:	4629      	mov	r1, r5
 80251cc:	2000      	movs	r0, #0
 80251ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80251d2:	f8d1 c000 	ldr.w	ip, [r1]
 80251d6:	fa1f fe82 	uxth.w	lr, r2
 80251da:	fa1f f38c 	uxth.w	r3, ip
 80251de:	eba3 030e 	sub.w	r3, r3, lr
 80251e2:	4403      	add	r3, r0
 80251e4:	0c12      	lsrs	r2, r2, #16
 80251e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80251ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80251ee:	b29b      	uxth	r3, r3
 80251f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80251f4:	45c1      	cmp	r9, r8
 80251f6:	f841 3b04 	str.w	r3, [r1], #4
 80251fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80251fe:	d2e6      	bcs.n	80251ce <quorem+0xa4>
 8025200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025208:	b922      	cbnz	r2, 8025214 <quorem+0xea>
 802520a:	3b04      	subs	r3, #4
 802520c:	429d      	cmp	r5, r3
 802520e:	461a      	mov	r2, r3
 8025210:	d30b      	bcc.n	802522a <quorem+0x100>
 8025212:	613c      	str	r4, [r7, #16]
 8025214:	3601      	adds	r6, #1
 8025216:	4630      	mov	r0, r6
 8025218:	b003      	add	sp, #12
 802521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802521e:	6812      	ldr	r2, [r2, #0]
 8025220:	3b04      	subs	r3, #4
 8025222:	2a00      	cmp	r2, #0
 8025224:	d1cb      	bne.n	80251be <quorem+0x94>
 8025226:	3c01      	subs	r4, #1
 8025228:	e7c6      	b.n	80251b8 <quorem+0x8e>
 802522a:	6812      	ldr	r2, [r2, #0]
 802522c:	3b04      	subs	r3, #4
 802522e:	2a00      	cmp	r2, #0
 8025230:	d1ef      	bne.n	8025212 <quorem+0xe8>
 8025232:	3c01      	subs	r4, #1
 8025234:	e7ea      	b.n	802520c <quorem+0xe2>
 8025236:	2000      	movs	r0, #0
 8025238:	e7ee      	b.n	8025218 <quorem+0xee>
 802523a:	0000      	movs	r0, r0
 802523c:	0000      	movs	r0, r0
	...

08025240 <_dtoa_r>:
 8025240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025244:	ed2d 8b02 	vpush	{d8}
 8025248:	69c7      	ldr	r7, [r0, #28]
 802524a:	b091      	sub	sp, #68	@ 0x44
 802524c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025250:	ec55 4b10 	vmov	r4, r5, d0
 8025254:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8025256:	9107      	str	r1, [sp, #28]
 8025258:	4681      	mov	r9, r0
 802525a:	9209      	str	r2, [sp, #36]	@ 0x24
 802525c:	930d      	str	r3, [sp, #52]	@ 0x34
 802525e:	b97f      	cbnz	r7, 8025280 <_dtoa_r+0x40>
 8025260:	2010      	movs	r0, #16
 8025262:	f7fe fb67 	bl	8023934 <malloc>
 8025266:	4602      	mov	r2, r0
 8025268:	f8c9 001c 	str.w	r0, [r9, #28]
 802526c:	b920      	cbnz	r0, 8025278 <_dtoa_r+0x38>
 802526e:	4ba0      	ldr	r3, [pc, #640]	@ (80254f0 <_dtoa_r+0x2b0>)
 8025270:	21ef      	movs	r1, #239	@ 0xef
 8025272:	48a0      	ldr	r0, [pc, #640]	@ (80254f4 <_dtoa_r+0x2b4>)
 8025274:	f7fe fb20 	bl	80238b8 <__assert_func>
 8025278:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802527c:	6007      	str	r7, [r0, #0]
 802527e:	60c7      	str	r7, [r0, #12]
 8025280:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8025284:	6819      	ldr	r1, [r3, #0]
 8025286:	b159      	cbz	r1, 80252a0 <_dtoa_r+0x60>
 8025288:	685a      	ldr	r2, [r3, #4]
 802528a:	604a      	str	r2, [r1, #4]
 802528c:	2301      	movs	r3, #1
 802528e:	4093      	lsls	r3, r2
 8025290:	608b      	str	r3, [r1, #8]
 8025292:	4648      	mov	r0, r9
 8025294:	f000 fdb4 	bl	8025e00 <_Bfree>
 8025298:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802529c:	2200      	movs	r2, #0
 802529e:	601a      	str	r2, [r3, #0]
 80252a0:	1e2b      	subs	r3, r5, #0
 80252a2:	bfbb      	ittet	lt
 80252a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80252a8:	9303      	strlt	r3, [sp, #12]
 80252aa:	2300      	movge	r3, #0
 80252ac:	2201      	movlt	r2, #1
 80252ae:	bfac      	ite	ge
 80252b0:	6033      	strge	r3, [r6, #0]
 80252b2:	6032      	strlt	r2, [r6, #0]
 80252b4:	4b90      	ldr	r3, [pc, #576]	@ (80254f8 <_dtoa_r+0x2b8>)
 80252b6:	9e03      	ldr	r6, [sp, #12]
 80252b8:	43b3      	bics	r3, r6
 80252ba:	d110      	bne.n	80252de <_dtoa_r+0x9e>
 80252bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80252be:	f242 730f 	movw	r3, #9999	@ 0x270f
 80252c2:	6013      	str	r3, [r2, #0]
 80252c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80252c8:	4323      	orrs	r3, r4
 80252ca:	f000 84de 	beq.w	8025c8a <_dtoa_r+0xa4a>
 80252ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80252d0:	4f8a      	ldr	r7, [pc, #552]	@ (80254fc <_dtoa_r+0x2bc>)
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	f000 84e0 	beq.w	8025c98 <_dtoa_r+0xa58>
 80252d8:	1cfb      	adds	r3, r7, #3
 80252da:	f000 bcdb 	b.w	8025c94 <_dtoa_r+0xa54>
 80252de:	ed9d 8b02 	vldr	d8, [sp, #8]
 80252e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80252e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252ea:	d10a      	bne.n	8025302 <_dtoa_r+0xc2>
 80252ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80252ee:	2301      	movs	r3, #1
 80252f0:	6013      	str	r3, [r2, #0]
 80252f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80252f4:	b113      	cbz	r3, 80252fc <_dtoa_r+0xbc>
 80252f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80252f8:	4b81      	ldr	r3, [pc, #516]	@ (8025500 <_dtoa_r+0x2c0>)
 80252fa:	6013      	str	r3, [r2, #0]
 80252fc:	4f81      	ldr	r7, [pc, #516]	@ (8025504 <_dtoa_r+0x2c4>)
 80252fe:	f000 bccb 	b.w	8025c98 <_dtoa_r+0xa58>
 8025302:	aa0e      	add	r2, sp, #56	@ 0x38
 8025304:	a90f      	add	r1, sp, #60	@ 0x3c
 8025306:	4648      	mov	r0, r9
 8025308:	eeb0 0b48 	vmov.f64	d0, d8
 802530c:	f001 f91c 	bl	8026548 <__d2b>
 8025310:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8025314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025316:	9001      	str	r0, [sp, #4]
 8025318:	2b00      	cmp	r3, #0
 802531a:	d045      	beq.n	80253a8 <_dtoa_r+0x168>
 802531c:	eeb0 7b48 	vmov.f64	d7, d8
 8025320:	ee18 1a90 	vmov	r1, s17
 8025324:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8025328:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 802532c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8025330:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8025334:	2500      	movs	r5, #0
 8025336:	ee07 1a90 	vmov	s15, r1
 802533a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 802533e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80254d8 <_dtoa_r+0x298>
 8025342:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025346:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80254e0 <_dtoa_r+0x2a0>
 802534a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802534e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80254e8 <_dtoa_r+0x2a8>
 8025352:	ee07 3a90 	vmov	s15, r3
 8025356:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802535a:	eeb0 7b46 	vmov.f64	d7, d6
 802535e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8025362:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025366:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802536e:	ee16 8a90 	vmov	r8, s13
 8025372:	d508      	bpl.n	8025386 <_dtoa_r+0x146>
 8025374:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025378:	eeb4 6b47 	vcmp.f64	d6, d7
 802537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025380:	bf18      	it	ne
 8025382:	f108 38ff 	addne.w	r8, r8, #4294967295
 8025386:	f1b8 0f16 	cmp.w	r8, #22
 802538a:	d82b      	bhi.n	80253e4 <_dtoa_r+0x1a4>
 802538c:	495e      	ldr	r1, [pc, #376]	@ (8025508 <_dtoa_r+0x2c8>)
 802538e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8025392:	ed91 7b00 	vldr	d7, [r1]
 8025396:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802539e:	d501      	bpl.n	80253a4 <_dtoa_r+0x164>
 80253a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80253a4:	2100      	movs	r1, #0
 80253a6:	e01e      	b.n	80253e6 <_dtoa_r+0x1a6>
 80253a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80253aa:	4413      	add	r3, r2
 80253ac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80253b0:	2920      	cmp	r1, #32
 80253b2:	bfc1      	itttt	gt
 80253b4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80253b8:	408e      	lslgt	r6, r1
 80253ba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80253be:	fa24 f101 	lsrgt.w	r1, r4, r1
 80253c2:	bfd6      	itet	le
 80253c4:	f1c1 0120 	rsble	r1, r1, #32
 80253c8:	4331      	orrgt	r1, r6
 80253ca:	fa04 f101 	lslle.w	r1, r4, r1
 80253ce:	ee07 1a90 	vmov	s15, r1
 80253d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80253d6:	3b01      	subs	r3, #1
 80253d8:	ee17 1a90 	vmov	r1, s15
 80253dc:	2501      	movs	r5, #1
 80253de:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80253e2:	e7a8      	b.n	8025336 <_dtoa_r+0xf6>
 80253e4:	2101      	movs	r1, #1
 80253e6:	1ad2      	subs	r2, r2, r3
 80253e8:	1e53      	subs	r3, r2, #1
 80253ea:	9306      	str	r3, [sp, #24]
 80253ec:	bf45      	ittet	mi
 80253ee:	f1c2 0301 	rsbmi	r3, r2, #1
 80253f2:	9305      	strmi	r3, [sp, #20]
 80253f4:	2300      	movpl	r3, #0
 80253f6:	2300      	movmi	r3, #0
 80253f8:	bf4c      	ite	mi
 80253fa:	9306      	strmi	r3, [sp, #24]
 80253fc:	9305      	strpl	r3, [sp, #20]
 80253fe:	f1b8 0f00 	cmp.w	r8, #0
 8025402:	910c      	str	r1, [sp, #48]	@ 0x30
 8025404:	db18      	blt.n	8025438 <_dtoa_r+0x1f8>
 8025406:	9b06      	ldr	r3, [sp, #24]
 8025408:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 802540c:	4443      	add	r3, r8
 802540e:	9306      	str	r3, [sp, #24]
 8025410:	2300      	movs	r3, #0
 8025412:	9a07      	ldr	r2, [sp, #28]
 8025414:	2a09      	cmp	r2, #9
 8025416:	d849      	bhi.n	80254ac <_dtoa_r+0x26c>
 8025418:	2a05      	cmp	r2, #5
 802541a:	bfc4      	itt	gt
 802541c:	3a04      	subgt	r2, #4
 802541e:	9207      	strgt	r2, [sp, #28]
 8025420:	9a07      	ldr	r2, [sp, #28]
 8025422:	f1a2 0202 	sub.w	r2, r2, #2
 8025426:	bfcc      	ite	gt
 8025428:	2400      	movgt	r4, #0
 802542a:	2401      	movle	r4, #1
 802542c:	2a03      	cmp	r2, #3
 802542e:	d848      	bhi.n	80254c2 <_dtoa_r+0x282>
 8025430:	e8df f002 	tbb	[pc, r2]
 8025434:	3a2c2e0b 	.word	0x3a2c2e0b
 8025438:	9b05      	ldr	r3, [sp, #20]
 802543a:	2200      	movs	r2, #0
 802543c:	eba3 0308 	sub.w	r3, r3, r8
 8025440:	9305      	str	r3, [sp, #20]
 8025442:	920a      	str	r2, [sp, #40]	@ 0x28
 8025444:	f1c8 0300 	rsb	r3, r8, #0
 8025448:	e7e3      	b.n	8025412 <_dtoa_r+0x1d2>
 802544a:	2200      	movs	r2, #0
 802544c:	9208      	str	r2, [sp, #32]
 802544e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025450:	2a00      	cmp	r2, #0
 8025452:	dc39      	bgt.n	80254c8 <_dtoa_r+0x288>
 8025454:	f04f 0b01 	mov.w	fp, #1
 8025458:	46da      	mov	sl, fp
 802545a:	465a      	mov	r2, fp
 802545c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8025460:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8025464:	2100      	movs	r1, #0
 8025466:	2004      	movs	r0, #4
 8025468:	f100 0614 	add.w	r6, r0, #20
 802546c:	4296      	cmp	r6, r2
 802546e:	d930      	bls.n	80254d2 <_dtoa_r+0x292>
 8025470:	6079      	str	r1, [r7, #4]
 8025472:	4648      	mov	r0, r9
 8025474:	9304      	str	r3, [sp, #16]
 8025476:	f000 fc83 	bl	8025d80 <_Balloc>
 802547a:	9b04      	ldr	r3, [sp, #16]
 802547c:	4607      	mov	r7, r0
 802547e:	2800      	cmp	r0, #0
 8025480:	d146      	bne.n	8025510 <_dtoa_r+0x2d0>
 8025482:	4b22      	ldr	r3, [pc, #136]	@ (802550c <_dtoa_r+0x2cc>)
 8025484:	4602      	mov	r2, r0
 8025486:	f240 11af 	movw	r1, #431	@ 0x1af
 802548a:	e6f2      	b.n	8025272 <_dtoa_r+0x32>
 802548c:	2201      	movs	r2, #1
 802548e:	e7dd      	b.n	802544c <_dtoa_r+0x20c>
 8025490:	2200      	movs	r2, #0
 8025492:	9208      	str	r2, [sp, #32]
 8025494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025496:	eb08 0b02 	add.w	fp, r8, r2
 802549a:	f10b 0a01 	add.w	sl, fp, #1
 802549e:	4652      	mov	r2, sl
 80254a0:	2a01      	cmp	r2, #1
 80254a2:	bfb8      	it	lt
 80254a4:	2201      	movlt	r2, #1
 80254a6:	e7db      	b.n	8025460 <_dtoa_r+0x220>
 80254a8:	2201      	movs	r2, #1
 80254aa:	e7f2      	b.n	8025492 <_dtoa_r+0x252>
 80254ac:	2401      	movs	r4, #1
 80254ae:	2200      	movs	r2, #0
 80254b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80254b4:	f04f 3bff 	mov.w	fp, #4294967295
 80254b8:	2100      	movs	r1, #0
 80254ba:	46da      	mov	sl, fp
 80254bc:	2212      	movs	r2, #18
 80254be:	9109      	str	r1, [sp, #36]	@ 0x24
 80254c0:	e7ce      	b.n	8025460 <_dtoa_r+0x220>
 80254c2:	2201      	movs	r2, #1
 80254c4:	9208      	str	r2, [sp, #32]
 80254c6:	e7f5      	b.n	80254b4 <_dtoa_r+0x274>
 80254c8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80254cc:	46da      	mov	sl, fp
 80254ce:	465a      	mov	r2, fp
 80254d0:	e7c6      	b.n	8025460 <_dtoa_r+0x220>
 80254d2:	3101      	adds	r1, #1
 80254d4:	0040      	lsls	r0, r0, #1
 80254d6:	e7c7      	b.n	8025468 <_dtoa_r+0x228>
 80254d8:	636f4361 	.word	0x636f4361
 80254dc:	3fd287a7 	.word	0x3fd287a7
 80254e0:	8b60c8b3 	.word	0x8b60c8b3
 80254e4:	3fc68a28 	.word	0x3fc68a28
 80254e8:	509f79fb 	.word	0x509f79fb
 80254ec:	3fd34413 	.word	0x3fd34413
 80254f0:	08038460 	.word	0x08038460
 80254f4:	08038616 	.word	0x08038616
 80254f8:	7ff00000 	.word	0x7ff00000
 80254fc:	08038612 	.word	0x08038612
 8025500:	080385e1 	.word	0x080385e1
 8025504:	080385e0 	.word	0x080385e0
 8025508:	08038710 	.word	0x08038710
 802550c:	0803866e 	.word	0x0803866e
 8025510:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8025514:	f1ba 0f0e 	cmp.w	sl, #14
 8025518:	6010      	str	r0, [r2, #0]
 802551a:	d86f      	bhi.n	80255fc <_dtoa_r+0x3bc>
 802551c:	2c00      	cmp	r4, #0
 802551e:	d06d      	beq.n	80255fc <_dtoa_r+0x3bc>
 8025520:	f1b8 0f00 	cmp.w	r8, #0
 8025524:	f340 80c2 	ble.w	80256ac <_dtoa_r+0x46c>
 8025528:	4aca      	ldr	r2, [pc, #808]	@ (8025854 <_dtoa_r+0x614>)
 802552a:	f008 010f 	and.w	r1, r8, #15
 802552e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8025532:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8025536:	ed92 7b00 	vldr	d7, [r2]
 802553a:	ea4f 1128 	mov.w	r1, r8, asr #4
 802553e:	f000 80a9 	beq.w	8025694 <_dtoa_r+0x454>
 8025542:	4ac5      	ldr	r2, [pc, #788]	@ (8025858 <_dtoa_r+0x618>)
 8025544:	ed92 6b08 	vldr	d6, [r2, #32]
 8025548:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802554c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025550:	f001 010f 	and.w	r1, r1, #15
 8025554:	2203      	movs	r2, #3
 8025556:	48c0      	ldr	r0, [pc, #768]	@ (8025858 <_dtoa_r+0x618>)
 8025558:	2900      	cmp	r1, #0
 802555a:	f040 809d 	bne.w	8025698 <_dtoa_r+0x458>
 802555e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025562:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025566:	ed8d 7b02 	vstr	d7, [sp, #8]
 802556a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802556c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025570:	2900      	cmp	r1, #0
 8025572:	f000 80c1 	beq.w	80256f8 <_dtoa_r+0x4b8>
 8025576:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 802557a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802557e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025582:	f140 80b9 	bpl.w	80256f8 <_dtoa_r+0x4b8>
 8025586:	f1ba 0f00 	cmp.w	sl, #0
 802558a:	f000 80b5 	beq.w	80256f8 <_dtoa_r+0x4b8>
 802558e:	f1bb 0f00 	cmp.w	fp, #0
 8025592:	dd31      	ble.n	80255f8 <_dtoa_r+0x3b8>
 8025594:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8025598:	ee27 7b06 	vmul.f64	d7, d7, d6
 802559c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80255a0:	f108 31ff 	add.w	r1, r8, #4294967295
 80255a4:	9104      	str	r1, [sp, #16]
 80255a6:	3201      	adds	r2, #1
 80255a8:	465c      	mov	r4, fp
 80255aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80255ae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80255b2:	ee07 2a90 	vmov	s15, r2
 80255b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80255ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 80255be:	ee15 2a90 	vmov	r2, s11
 80255c2:	ec51 0b15 	vmov	r0, r1, d5
 80255c6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80255ca:	2c00      	cmp	r4, #0
 80255cc:	f040 8098 	bne.w	8025700 <_dtoa_r+0x4c0>
 80255d0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80255d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80255d8:	ec41 0b17 	vmov	d7, r0, r1
 80255dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80255e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255e4:	f300 8261 	bgt.w	8025aaa <_dtoa_r+0x86a>
 80255e8:	eeb1 7b47 	vneg.f64	d7, d7
 80255ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80255f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255f4:	f100 80f5 	bmi.w	80257e2 <_dtoa_r+0x5a2>
 80255f8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80255fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80255fe:	2a00      	cmp	r2, #0
 8025600:	f2c0 812c 	blt.w	802585c <_dtoa_r+0x61c>
 8025604:	f1b8 0f0e 	cmp.w	r8, #14
 8025608:	f300 8128 	bgt.w	802585c <_dtoa_r+0x61c>
 802560c:	4b91      	ldr	r3, [pc, #580]	@ (8025854 <_dtoa_r+0x614>)
 802560e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025612:	ed93 6b00 	vldr	d6, [r3]
 8025616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025618:	2b00      	cmp	r3, #0
 802561a:	da03      	bge.n	8025624 <_dtoa_r+0x3e4>
 802561c:	f1ba 0f00 	cmp.w	sl, #0
 8025620:	f340 80d2 	ble.w	80257c8 <_dtoa_r+0x588>
 8025624:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8025628:	ed9d 7b02 	vldr	d7, [sp, #8]
 802562c:	463e      	mov	r6, r7
 802562e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025632:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025636:	ee15 3a10 	vmov	r3, s10
 802563a:	3330      	adds	r3, #48	@ 0x30
 802563c:	f806 3b01 	strb.w	r3, [r6], #1
 8025640:	1bf3      	subs	r3, r6, r7
 8025642:	459a      	cmp	sl, r3
 8025644:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8025648:	eea3 7b46 	vfms.f64	d7, d3, d6
 802564c:	f040 80f8 	bne.w	8025840 <_dtoa_r+0x600>
 8025650:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025654:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802565c:	f300 80dd 	bgt.w	802581a <_dtoa_r+0x5da>
 8025660:	eeb4 7b46 	vcmp.f64	d7, d6
 8025664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025668:	d104      	bne.n	8025674 <_dtoa_r+0x434>
 802566a:	ee15 3a10 	vmov	r3, s10
 802566e:	07db      	lsls	r3, r3, #31
 8025670:	f100 80d3 	bmi.w	802581a <_dtoa_r+0x5da>
 8025674:	9901      	ldr	r1, [sp, #4]
 8025676:	4648      	mov	r0, r9
 8025678:	f000 fbc2 	bl	8025e00 <_Bfree>
 802567c:	2300      	movs	r3, #0
 802567e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025680:	7033      	strb	r3, [r6, #0]
 8025682:	f108 0301 	add.w	r3, r8, #1
 8025686:	6013      	str	r3, [r2, #0]
 8025688:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802568a:	2b00      	cmp	r3, #0
 802568c:	f000 8304 	beq.w	8025c98 <_dtoa_r+0xa58>
 8025690:	601e      	str	r6, [r3, #0]
 8025692:	e301      	b.n	8025c98 <_dtoa_r+0xa58>
 8025694:	2202      	movs	r2, #2
 8025696:	e75e      	b.n	8025556 <_dtoa_r+0x316>
 8025698:	07cc      	lsls	r4, r1, #31
 802569a:	d504      	bpl.n	80256a6 <_dtoa_r+0x466>
 802569c:	ed90 6b00 	vldr	d6, [r0]
 80256a0:	3201      	adds	r2, #1
 80256a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80256a6:	1049      	asrs	r1, r1, #1
 80256a8:	3008      	adds	r0, #8
 80256aa:	e755      	b.n	8025558 <_dtoa_r+0x318>
 80256ac:	d022      	beq.n	80256f4 <_dtoa_r+0x4b4>
 80256ae:	f1c8 0100 	rsb	r1, r8, #0
 80256b2:	4a68      	ldr	r2, [pc, #416]	@ (8025854 <_dtoa_r+0x614>)
 80256b4:	f001 000f 	and.w	r0, r1, #15
 80256b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80256bc:	ed92 7b00 	vldr	d7, [r2]
 80256c0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80256c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80256c8:	4863      	ldr	r0, [pc, #396]	@ (8025858 <_dtoa_r+0x618>)
 80256ca:	1109      	asrs	r1, r1, #4
 80256cc:	2400      	movs	r4, #0
 80256ce:	2202      	movs	r2, #2
 80256d0:	b929      	cbnz	r1, 80256de <_dtoa_r+0x49e>
 80256d2:	2c00      	cmp	r4, #0
 80256d4:	f43f af49 	beq.w	802556a <_dtoa_r+0x32a>
 80256d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80256dc:	e745      	b.n	802556a <_dtoa_r+0x32a>
 80256de:	07ce      	lsls	r6, r1, #31
 80256e0:	d505      	bpl.n	80256ee <_dtoa_r+0x4ae>
 80256e2:	ed90 6b00 	vldr	d6, [r0]
 80256e6:	3201      	adds	r2, #1
 80256e8:	2401      	movs	r4, #1
 80256ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80256ee:	1049      	asrs	r1, r1, #1
 80256f0:	3008      	adds	r0, #8
 80256f2:	e7ed      	b.n	80256d0 <_dtoa_r+0x490>
 80256f4:	2202      	movs	r2, #2
 80256f6:	e738      	b.n	802556a <_dtoa_r+0x32a>
 80256f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80256fc:	4654      	mov	r4, sl
 80256fe:	e754      	b.n	80255aa <_dtoa_r+0x36a>
 8025700:	4a54      	ldr	r2, [pc, #336]	@ (8025854 <_dtoa_r+0x614>)
 8025702:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025706:	ed12 4b02 	vldr	d4, [r2, #-8]
 802570a:	9a08      	ldr	r2, [sp, #32]
 802570c:	ec41 0b17 	vmov	d7, r0, r1
 8025710:	443c      	add	r4, r7
 8025712:	b34a      	cbz	r2, 8025768 <_dtoa_r+0x528>
 8025714:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8025718:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 802571c:	463e      	mov	r6, r7
 802571e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8025722:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025726:	ee35 7b47 	vsub.f64	d7, d5, d7
 802572a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802572e:	ee14 2a90 	vmov	r2, s9
 8025732:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025736:	3230      	adds	r2, #48	@ 0x30
 8025738:	ee36 6b45 	vsub.f64	d6, d6, d5
 802573c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025744:	f806 2b01 	strb.w	r2, [r6], #1
 8025748:	d438      	bmi.n	80257bc <_dtoa_r+0x57c>
 802574a:	ee32 5b46 	vsub.f64	d5, d2, d6
 802574e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8025752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025756:	d462      	bmi.n	802581e <_dtoa_r+0x5de>
 8025758:	42a6      	cmp	r6, r4
 802575a:	f43f af4d 	beq.w	80255f8 <_dtoa_r+0x3b8>
 802575e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8025762:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025766:	e7e0      	b.n	802572a <_dtoa_r+0x4ea>
 8025768:	4621      	mov	r1, r4
 802576a:	463e      	mov	r6, r7
 802576c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025770:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025774:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025778:	ee14 2a90 	vmov	r2, s9
 802577c:	3230      	adds	r2, #48	@ 0x30
 802577e:	f806 2b01 	strb.w	r2, [r6], #1
 8025782:	42a6      	cmp	r6, r4
 8025784:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025788:	ee36 6b45 	vsub.f64	d6, d6, d5
 802578c:	d119      	bne.n	80257c2 <_dtoa_r+0x582>
 802578e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8025792:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025796:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802579a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802579e:	dc3e      	bgt.n	802581e <_dtoa_r+0x5de>
 80257a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80257a4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80257a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257ac:	f57f af24 	bpl.w	80255f8 <_dtoa_r+0x3b8>
 80257b0:	460e      	mov	r6, r1
 80257b2:	3901      	subs	r1, #1
 80257b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80257b8:	2b30      	cmp	r3, #48	@ 0x30
 80257ba:	d0f9      	beq.n	80257b0 <_dtoa_r+0x570>
 80257bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80257c0:	e758      	b.n	8025674 <_dtoa_r+0x434>
 80257c2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80257c6:	e7d5      	b.n	8025774 <_dtoa_r+0x534>
 80257c8:	d10b      	bne.n	80257e2 <_dtoa_r+0x5a2>
 80257ca:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80257ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80257d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80257d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80257da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257de:	f2c0 8161 	blt.w	8025aa4 <_dtoa_r+0x864>
 80257e2:	2400      	movs	r4, #0
 80257e4:	4625      	mov	r5, r4
 80257e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257e8:	43db      	mvns	r3, r3
 80257ea:	9304      	str	r3, [sp, #16]
 80257ec:	463e      	mov	r6, r7
 80257ee:	f04f 0800 	mov.w	r8, #0
 80257f2:	4621      	mov	r1, r4
 80257f4:	4648      	mov	r0, r9
 80257f6:	f000 fb03 	bl	8025e00 <_Bfree>
 80257fa:	2d00      	cmp	r5, #0
 80257fc:	d0de      	beq.n	80257bc <_dtoa_r+0x57c>
 80257fe:	f1b8 0f00 	cmp.w	r8, #0
 8025802:	d005      	beq.n	8025810 <_dtoa_r+0x5d0>
 8025804:	45a8      	cmp	r8, r5
 8025806:	d003      	beq.n	8025810 <_dtoa_r+0x5d0>
 8025808:	4641      	mov	r1, r8
 802580a:	4648      	mov	r0, r9
 802580c:	f000 faf8 	bl	8025e00 <_Bfree>
 8025810:	4629      	mov	r1, r5
 8025812:	4648      	mov	r0, r9
 8025814:	f000 faf4 	bl	8025e00 <_Bfree>
 8025818:	e7d0      	b.n	80257bc <_dtoa_r+0x57c>
 802581a:	f8cd 8010 	str.w	r8, [sp, #16]
 802581e:	4633      	mov	r3, r6
 8025820:	461e      	mov	r6, r3
 8025822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025826:	2a39      	cmp	r2, #57	@ 0x39
 8025828:	d106      	bne.n	8025838 <_dtoa_r+0x5f8>
 802582a:	429f      	cmp	r7, r3
 802582c:	d1f8      	bne.n	8025820 <_dtoa_r+0x5e0>
 802582e:	9a04      	ldr	r2, [sp, #16]
 8025830:	3201      	adds	r2, #1
 8025832:	9204      	str	r2, [sp, #16]
 8025834:	2230      	movs	r2, #48	@ 0x30
 8025836:	703a      	strb	r2, [r7, #0]
 8025838:	781a      	ldrb	r2, [r3, #0]
 802583a:	3201      	adds	r2, #1
 802583c:	701a      	strb	r2, [r3, #0]
 802583e:	e7bd      	b.n	80257bc <_dtoa_r+0x57c>
 8025840:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025844:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802584c:	f47f aeef 	bne.w	802562e <_dtoa_r+0x3ee>
 8025850:	e710      	b.n	8025674 <_dtoa_r+0x434>
 8025852:	bf00      	nop
 8025854:	08038710 	.word	0x08038710
 8025858:	080386e8 	.word	0x080386e8
 802585c:	9908      	ldr	r1, [sp, #32]
 802585e:	2900      	cmp	r1, #0
 8025860:	f000 80e3 	beq.w	8025a2a <_dtoa_r+0x7ea>
 8025864:	9907      	ldr	r1, [sp, #28]
 8025866:	2901      	cmp	r1, #1
 8025868:	f300 80c8 	bgt.w	80259fc <_dtoa_r+0x7bc>
 802586c:	2d00      	cmp	r5, #0
 802586e:	f000 80c1 	beq.w	80259f4 <_dtoa_r+0x7b4>
 8025872:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025876:	9e05      	ldr	r6, [sp, #20]
 8025878:	461c      	mov	r4, r3
 802587a:	9304      	str	r3, [sp, #16]
 802587c:	9b05      	ldr	r3, [sp, #20]
 802587e:	4413      	add	r3, r2
 8025880:	9305      	str	r3, [sp, #20]
 8025882:	9b06      	ldr	r3, [sp, #24]
 8025884:	2101      	movs	r1, #1
 8025886:	4413      	add	r3, r2
 8025888:	4648      	mov	r0, r9
 802588a:	9306      	str	r3, [sp, #24]
 802588c:	f000 fbb6 	bl	8025ffc <__i2b>
 8025890:	9b04      	ldr	r3, [sp, #16]
 8025892:	4605      	mov	r5, r0
 8025894:	b166      	cbz	r6, 80258b0 <_dtoa_r+0x670>
 8025896:	9a06      	ldr	r2, [sp, #24]
 8025898:	2a00      	cmp	r2, #0
 802589a:	dd09      	ble.n	80258b0 <_dtoa_r+0x670>
 802589c:	42b2      	cmp	r2, r6
 802589e:	9905      	ldr	r1, [sp, #20]
 80258a0:	bfa8      	it	ge
 80258a2:	4632      	movge	r2, r6
 80258a4:	1a89      	subs	r1, r1, r2
 80258a6:	9105      	str	r1, [sp, #20]
 80258a8:	9906      	ldr	r1, [sp, #24]
 80258aa:	1ab6      	subs	r6, r6, r2
 80258ac:	1a8a      	subs	r2, r1, r2
 80258ae:	9206      	str	r2, [sp, #24]
 80258b0:	b1fb      	cbz	r3, 80258f2 <_dtoa_r+0x6b2>
 80258b2:	9a08      	ldr	r2, [sp, #32]
 80258b4:	2a00      	cmp	r2, #0
 80258b6:	f000 80bc 	beq.w	8025a32 <_dtoa_r+0x7f2>
 80258ba:	b19c      	cbz	r4, 80258e4 <_dtoa_r+0x6a4>
 80258bc:	4629      	mov	r1, r5
 80258be:	4622      	mov	r2, r4
 80258c0:	4648      	mov	r0, r9
 80258c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80258c4:	f000 fc5a 	bl	802617c <__pow5mult>
 80258c8:	9a01      	ldr	r2, [sp, #4]
 80258ca:	4601      	mov	r1, r0
 80258cc:	4605      	mov	r5, r0
 80258ce:	4648      	mov	r0, r9
 80258d0:	f000 fbaa 	bl	8026028 <__multiply>
 80258d4:	9901      	ldr	r1, [sp, #4]
 80258d6:	9004      	str	r0, [sp, #16]
 80258d8:	4648      	mov	r0, r9
 80258da:	f000 fa91 	bl	8025e00 <_Bfree>
 80258de:	9a04      	ldr	r2, [sp, #16]
 80258e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258e2:	9201      	str	r2, [sp, #4]
 80258e4:	1b1a      	subs	r2, r3, r4
 80258e6:	d004      	beq.n	80258f2 <_dtoa_r+0x6b2>
 80258e8:	9901      	ldr	r1, [sp, #4]
 80258ea:	4648      	mov	r0, r9
 80258ec:	f000 fc46 	bl	802617c <__pow5mult>
 80258f0:	9001      	str	r0, [sp, #4]
 80258f2:	2101      	movs	r1, #1
 80258f4:	4648      	mov	r0, r9
 80258f6:	f000 fb81 	bl	8025ffc <__i2b>
 80258fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80258fc:	4604      	mov	r4, r0
 80258fe:	2b00      	cmp	r3, #0
 8025900:	f000 81d0 	beq.w	8025ca4 <_dtoa_r+0xa64>
 8025904:	461a      	mov	r2, r3
 8025906:	4601      	mov	r1, r0
 8025908:	4648      	mov	r0, r9
 802590a:	f000 fc37 	bl	802617c <__pow5mult>
 802590e:	9b07      	ldr	r3, [sp, #28]
 8025910:	2b01      	cmp	r3, #1
 8025912:	4604      	mov	r4, r0
 8025914:	f300 8095 	bgt.w	8025a42 <_dtoa_r+0x802>
 8025918:	9b02      	ldr	r3, [sp, #8]
 802591a:	2b00      	cmp	r3, #0
 802591c:	f040 808b 	bne.w	8025a36 <_dtoa_r+0x7f6>
 8025920:	9b03      	ldr	r3, [sp, #12]
 8025922:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8025926:	2a00      	cmp	r2, #0
 8025928:	f040 8087 	bne.w	8025a3a <_dtoa_r+0x7fa>
 802592c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8025930:	0d12      	lsrs	r2, r2, #20
 8025932:	0512      	lsls	r2, r2, #20
 8025934:	2a00      	cmp	r2, #0
 8025936:	f000 8082 	beq.w	8025a3e <_dtoa_r+0x7fe>
 802593a:	9b05      	ldr	r3, [sp, #20]
 802593c:	3301      	adds	r3, #1
 802593e:	9305      	str	r3, [sp, #20]
 8025940:	9b06      	ldr	r3, [sp, #24]
 8025942:	3301      	adds	r3, #1
 8025944:	9306      	str	r3, [sp, #24]
 8025946:	2301      	movs	r3, #1
 8025948:	930b      	str	r3, [sp, #44]	@ 0x2c
 802594a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802594c:	2b00      	cmp	r3, #0
 802594e:	f000 81af 	beq.w	8025cb0 <_dtoa_r+0xa70>
 8025952:	6922      	ldr	r2, [r4, #16]
 8025954:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8025958:	6910      	ldr	r0, [r2, #16]
 802595a:	f000 fb03 	bl	8025f64 <__hi0bits>
 802595e:	f1c0 0020 	rsb	r0, r0, #32
 8025962:	9b06      	ldr	r3, [sp, #24]
 8025964:	4418      	add	r0, r3
 8025966:	f010 001f 	ands.w	r0, r0, #31
 802596a:	d076      	beq.n	8025a5a <_dtoa_r+0x81a>
 802596c:	f1c0 0220 	rsb	r2, r0, #32
 8025970:	2a04      	cmp	r2, #4
 8025972:	dd69      	ble.n	8025a48 <_dtoa_r+0x808>
 8025974:	9b05      	ldr	r3, [sp, #20]
 8025976:	f1c0 001c 	rsb	r0, r0, #28
 802597a:	4403      	add	r3, r0
 802597c:	9305      	str	r3, [sp, #20]
 802597e:	9b06      	ldr	r3, [sp, #24]
 8025980:	4406      	add	r6, r0
 8025982:	4403      	add	r3, r0
 8025984:	9306      	str	r3, [sp, #24]
 8025986:	9b05      	ldr	r3, [sp, #20]
 8025988:	2b00      	cmp	r3, #0
 802598a:	dd05      	ble.n	8025998 <_dtoa_r+0x758>
 802598c:	9901      	ldr	r1, [sp, #4]
 802598e:	461a      	mov	r2, r3
 8025990:	4648      	mov	r0, r9
 8025992:	f000 fc4d 	bl	8026230 <__lshift>
 8025996:	9001      	str	r0, [sp, #4]
 8025998:	9b06      	ldr	r3, [sp, #24]
 802599a:	2b00      	cmp	r3, #0
 802599c:	dd05      	ble.n	80259aa <_dtoa_r+0x76a>
 802599e:	4621      	mov	r1, r4
 80259a0:	461a      	mov	r2, r3
 80259a2:	4648      	mov	r0, r9
 80259a4:	f000 fc44 	bl	8026230 <__lshift>
 80259a8:	4604      	mov	r4, r0
 80259aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259ac:	2b00      	cmp	r3, #0
 80259ae:	d056      	beq.n	8025a5e <_dtoa_r+0x81e>
 80259b0:	9801      	ldr	r0, [sp, #4]
 80259b2:	4621      	mov	r1, r4
 80259b4:	f000 fca8 	bl	8026308 <__mcmp>
 80259b8:	2800      	cmp	r0, #0
 80259ba:	da50      	bge.n	8025a5e <_dtoa_r+0x81e>
 80259bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80259c0:	9304      	str	r3, [sp, #16]
 80259c2:	9901      	ldr	r1, [sp, #4]
 80259c4:	2300      	movs	r3, #0
 80259c6:	220a      	movs	r2, #10
 80259c8:	4648      	mov	r0, r9
 80259ca:	f000 fa3b 	bl	8025e44 <__multadd>
 80259ce:	9b08      	ldr	r3, [sp, #32]
 80259d0:	9001      	str	r0, [sp, #4]
 80259d2:	2b00      	cmp	r3, #0
 80259d4:	f000 816e 	beq.w	8025cb4 <_dtoa_r+0xa74>
 80259d8:	4629      	mov	r1, r5
 80259da:	2300      	movs	r3, #0
 80259dc:	220a      	movs	r2, #10
 80259de:	4648      	mov	r0, r9
 80259e0:	f000 fa30 	bl	8025e44 <__multadd>
 80259e4:	f1bb 0f00 	cmp.w	fp, #0
 80259e8:	4605      	mov	r5, r0
 80259ea:	dc64      	bgt.n	8025ab6 <_dtoa_r+0x876>
 80259ec:	9b07      	ldr	r3, [sp, #28]
 80259ee:	2b02      	cmp	r3, #2
 80259f0:	dc3e      	bgt.n	8025a70 <_dtoa_r+0x830>
 80259f2:	e060      	b.n	8025ab6 <_dtoa_r+0x876>
 80259f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80259f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80259fa:	e73c      	b.n	8025876 <_dtoa_r+0x636>
 80259fc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8025a00:	42a3      	cmp	r3, r4
 8025a02:	bfbf      	itttt	lt
 8025a04:	1ae2      	sublt	r2, r4, r3
 8025a06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8025a08:	189b      	addlt	r3, r3, r2
 8025a0a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8025a0c:	bfae      	itee	ge
 8025a0e:	1b1c      	subge	r4, r3, r4
 8025a10:	4623      	movlt	r3, r4
 8025a12:	2400      	movlt	r4, #0
 8025a14:	f1ba 0f00 	cmp.w	sl, #0
 8025a18:	bfb5      	itete	lt
 8025a1a:	9a05      	ldrlt	r2, [sp, #20]
 8025a1c:	9e05      	ldrge	r6, [sp, #20]
 8025a1e:	eba2 060a 	sublt.w	r6, r2, sl
 8025a22:	4652      	movge	r2, sl
 8025a24:	bfb8      	it	lt
 8025a26:	2200      	movlt	r2, #0
 8025a28:	e727      	b.n	802587a <_dtoa_r+0x63a>
 8025a2a:	9e05      	ldr	r6, [sp, #20]
 8025a2c:	9d08      	ldr	r5, [sp, #32]
 8025a2e:	461c      	mov	r4, r3
 8025a30:	e730      	b.n	8025894 <_dtoa_r+0x654>
 8025a32:	461a      	mov	r2, r3
 8025a34:	e758      	b.n	80258e8 <_dtoa_r+0x6a8>
 8025a36:	2300      	movs	r3, #0
 8025a38:	e786      	b.n	8025948 <_dtoa_r+0x708>
 8025a3a:	9b02      	ldr	r3, [sp, #8]
 8025a3c:	e784      	b.n	8025948 <_dtoa_r+0x708>
 8025a3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025a40:	e783      	b.n	802594a <_dtoa_r+0x70a>
 8025a42:	2300      	movs	r3, #0
 8025a44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025a46:	e784      	b.n	8025952 <_dtoa_r+0x712>
 8025a48:	d09d      	beq.n	8025986 <_dtoa_r+0x746>
 8025a4a:	9b05      	ldr	r3, [sp, #20]
 8025a4c:	321c      	adds	r2, #28
 8025a4e:	4413      	add	r3, r2
 8025a50:	9305      	str	r3, [sp, #20]
 8025a52:	9b06      	ldr	r3, [sp, #24]
 8025a54:	4416      	add	r6, r2
 8025a56:	4413      	add	r3, r2
 8025a58:	e794      	b.n	8025984 <_dtoa_r+0x744>
 8025a5a:	4602      	mov	r2, r0
 8025a5c:	e7f5      	b.n	8025a4a <_dtoa_r+0x80a>
 8025a5e:	f1ba 0f00 	cmp.w	sl, #0
 8025a62:	f8cd 8010 	str.w	r8, [sp, #16]
 8025a66:	46d3      	mov	fp, sl
 8025a68:	dc21      	bgt.n	8025aae <_dtoa_r+0x86e>
 8025a6a:	9b07      	ldr	r3, [sp, #28]
 8025a6c:	2b02      	cmp	r3, #2
 8025a6e:	dd1e      	ble.n	8025aae <_dtoa_r+0x86e>
 8025a70:	f1bb 0f00 	cmp.w	fp, #0
 8025a74:	f47f aeb7 	bne.w	80257e6 <_dtoa_r+0x5a6>
 8025a78:	4621      	mov	r1, r4
 8025a7a:	465b      	mov	r3, fp
 8025a7c:	2205      	movs	r2, #5
 8025a7e:	4648      	mov	r0, r9
 8025a80:	f000 f9e0 	bl	8025e44 <__multadd>
 8025a84:	4601      	mov	r1, r0
 8025a86:	4604      	mov	r4, r0
 8025a88:	9801      	ldr	r0, [sp, #4]
 8025a8a:	f000 fc3d 	bl	8026308 <__mcmp>
 8025a8e:	2800      	cmp	r0, #0
 8025a90:	f77f aea9 	ble.w	80257e6 <_dtoa_r+0x5a6>
 8025a94:	463e      	mov	r6, r7
 8025a96:	2331      	movs	r3, #49	@ 0x31
 8025a98:	f806 3b01 	strb.w	r3, [r6], #1
 8025a9c:	9b04      	ldr	r3, [sp, #16]
 8025a9e:	3301      	adds	r3, #1
 8025aa0:	9304      	str	r3, [sp, #16]
 8025aa2:	e6a4      	b.n	80257ee <_dtoa_r+0x5ae>
 8025aa4:	f8cd 8010 	str.w	r8, [sp, #16]
 8025aa8:	4654      	mov	r4, sl
 8025aaa:	4625      	mov	r5, r4
 8025aac:	e7f2      	b.n	8025a94 <_dtoa_r+0x854>
 8025aae:	9b08      	ldr	r3, [sp, #32]
 8025ab0:	2b00      	cmp	r3, #0
 8025ab2:	f000 8103 	beq.w	8025cbc <_dtoa_r+0xa7c>
 8025ab6:	2e00      	cmp	r6, #0
 8025ab8:	dd05      	ble.n	8025ac6 <_dtoa_r+0x886>
 8025aba:	4629      	mov	r1, r5
 8025abc:	4632      	mov	r2, r6
 8025abe:	4648      	mov	r0, r9
 8025ac0:	f000 fbb6 	bl	8026230 <__lshift>
 8025ac4:	4605      	mov	r5, r0
 8025ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	d058      	beq.n	8025b7e <_dtoa_r+0x93e>
 8025acc:	6869      	ldr	r1, [r5, #4]
 8025ace:	4648      	mov	r0, r9
 8025ad0:	f000 f956 	bl	8025d80 <_Balloc>
 8025ad4:	4606      	mov	r6, r0
 8025ad6:	b928      	cbnz	r0, 8025ae4 <_dtoa_r+0x8a4>
 8025ad8:	4b82      	ldr	r3, [pc, #520]	@ (8025ce4 <_dtoa_r+0xaa4>)
 8025ada:	4602      	mov	r2, r0
 8025adc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025ae0:	f7ff bbc7 	b.w	8025272 <_dtoa_r+0x32>
 8025ae4:	692a      	ldr	r2, [r5, #16]
 8025ae6:	3202      	adds	r2, #2
 8025ae8:	0092      	lsls	r2, r2, #2
 8025aea:	f105 010c 	add.w	r1, r5, #12
 8025aee:	300c      	adds	r0, #12
 8025af0:	f7ff faff 	bl	80250f2 <memcpy>
 8025af4:	2201      	movs	r2, #1
 8025af6:	4631      	mov	r1, r6
 8025af8:	4648      	mov	r0, r9
 8025afa:	f000 fb99 	bl	8026230 <__lshift>
 8025afe:	1c7b      	adds	r3, r7, #1
 8025b00:	9305      	str	r3, [sp, #20]
 8025b02:	eb07 030b 	add.w	r3, r7, fp
 8025b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b08:	9b02      	ldr	r3, [sp, #8]
 8025b0a:	f003 0301 	and.w	r3, r3, #1
 8025b0e:	46a8      	mov	r8, r5
 8025b10:	9308      	str	r3, [sp, #32]
 8025b12:	4605      	mov	r5, r0
 8025b14:	9b05      	ldr	r3, [sp, #20]
 8025b16:	9801      	ldr	r0, [sp, #4]
 8025b18:	4621      	mov	r1, r4
 8025b1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8025b1e:	f7ff fb04 	bl	802512a <quorem>
 8025b22:	4641      	mov	r1, r8
 8025b24:	9002      	str	r0, [sp, #8]
 8025b26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8025b2a:	9801      	ldr	r0, [sp, #4]
 8025b2c:	f000 fbec 	bl	8026308 <__mcmp>
 8025b30:	462a      	mov	r2, r5
 8025b32:	9006      	str	r0, [sp, #24]
 8025b34:	4621      	mov	r1, r4
 8025b36:	4648      	mov	r0, r9
 8025b38:	f000 fc02 	bl	8026340 <__mdiff>
 8025b3c:	68c2      	ldr	r2, [r0, #12]
 8025b3e:	4606      	mov	r6, r0
 8025b40:	b9fa      	cbnz	r2, 8025b82 <_dtoa_r+0x942>
 8025b42:	4601      	mov	r1, r0
 8025b44:	9801      	ldr	r0, [sp, #4]
 8025b46:	f000 fbdf 	bl	8026308 <__mcmp>
 8025b4a:	4602      	mov	r2, r0
 8025b4c:	4631      	mov	r1, r6
 8025b4e:	4648      	mov	r0, r9
 8025b50:	920a      	str	r2, [sp, #40]	@ 0x28
 8025b52:	f000 f955 	bl	8025e00 <_Bfree>
 8025b56:	9b07      	ldr	r3, [sp, #28]
 8025b58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025b5a:	9e05      	ldr	r6, [sp, #20]
 8025b5c:	ea43 0102 	orr.w	r1, r3, r2
 8025b60:	9b08      	ldr	r3, [sp, #32]
 8025b62:	4319      	orrs	r1, r3
 8025b64:	d10f      	bne.n	8025b86 <_dtoa_r+0x946>
 8025b66:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8025b6a:	d028      	beq.n	8025bbe <_dtoa_r+0x97e>
 8025b6c:	9b06      	ldr	r3, [sp, #24]
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	dd02      	ble.n	8025b78 <_dtoa_r+0x938>
 8025b72:	9b02      	ldr	r3, [sp, #8]
 8025b74:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8025b78:	f88b a000 	strb.w	sl, [fp]
 8025b7c:	e639      	b.n	80257f2 <_dtoa_r+0x5b2>
 8025b7e:	4628      	mov	r0, r5
 8025b80:	e7bd      	b.n	8025afe <_dtoa_r+0x8be>
 8025b82:	2201      	movs	r2, #1
 8025b84:	e7e2      	b.n	8025b4c <_dtoa_r+0x90c>
 8025b86:	9b06      	ldr	r3, [sp, #24]
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	db04      	blt.n	8025b96 <_dtoa_r+0x956>
 8025b8c:	9907      	ldr	r1, [sp, #28]
 8025b8e:	430b      	orrs	r3, r1
 8025b90:	9908      	ldr	r1, [sp, #32]
 8025b92:	430b      	orrs	r3, r1
 8025b94:	d120      	bne.n	8025bd8 <_dtoa_r+0x998>
 8025b96:	2a00      	cmp	r2, #0
 8025b98:	ddee      	ble.n	8025b78 <_dtoa_r+0x938>
 8025b9a:	9901      	ldr	r1, [sp, #4]
 8025b9c:	2201      	movs	r2, #1
 8025b9e:	4648      	mov	r0, r9
 8025ba0:	f000 fb46 	bl	8026230 <__lshift>
 8025ba4:	4621      	mov	r1, r4
 8025ba6:	9001      	str	r0, [sp, #4]
 8025ba8:	f000 fbae 	bl	8026308 <__mcmp>
 8025bac:	2800      	cmp	r0, #0
 8025bae:	dc03      	bgt.n	8025bb8 <_dtoa_r+0x978>
 8025bb0:	d1e2      	bne.n	8025b78 <_dtoa_r+0x938>
 8025bb2:	f01a 0f01 	tst.w	sl, #1
 8025bb6:	d0df      	beq.n	8025b78 <_dtoa_r+0x938>
 8025bb8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8025bbc:	d1d9      	bne.n	8025b72 <_dtoa_r+0x932>
 8025bbe:	2339      	movs	r3, #57	@ 0x39
 8025bc0:	f88b 3000 	strb.w	r3, [fp]
 8025bc4:	4633      	mov	r3, r6
 8025bc6:	461e      	mov	r6, r3
 8025bc8:	3b01      	subs	r3, #1
 8025bca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8025bce:	2a39      	cmp	r2, #57	@ 0x39
 8025bd0:	d053      	beq.n	8025c7a <_dtoa_r+0xa3a>
 8025bd2:	3201      	adds	r2, #1
 8025bd4:	701a      	strb	r2, [r3, #0]
 8025bd6:	e60c      	b.n	80257f2 <_dtoa_r+0x5b2>
 8025bd8:	2a00      	cmp	r2, #0
 8025bda:	dd07      	ble.n	8025bec <_dtoa_r+0x9ac>
 8025bdc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8025be0:	d0ed      	beq.n	8025bbe <_dtoa_r+0x97e>
 8025be2:	f10a 0301 	add.w	r3, sl, #1
 8025be6:	f88b 3000 	strb.w	r3, [fp]
 8025bea:	e602      	b.n	80257f2 <_dtoa_r+0x5b2>
 8025bec:	9b05      	ldr	r3, [sp, #20]
 8025bee:	9a05      	ldr	r2, [sp, #20]
 8025bf0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8025bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bf6:	4293      	cmp	r3, r2
 8025bf8:	d029      	beq.n	8025c4e <_dtoa_r+0xa0e>
 8025bfa:	9901      	ldr	r1, [sp, #4]
 8025bfc:	2300      	movs	r3, #0
 8025bfe:	220a      	movs	r2, #10
 8025c00:	4648      	mov	r0, r9
 8025c02:	f000 f91f 	bl	8025e44 <__multadd>
 8025c06:	45a8      	cmp	r8, r5
 8025c08:	9001      	str	r0, [sp, #4]
 8025c0a:	f04f 0300 	mov.w	r3, #0
 8025c0e:	f04f 020a 	mov.w	r2, #10
 8025c12:	4641      	mov	r1, r8
 8025c14:	4648      	mov	r0, r9
 8025c16:	d107      	bne.n	8025c28 <_dtoa_r+0x9e8>
 8025c18:	f000 f914 	bl	8025e44 <__multadd>
 8025c1c:	4680      	mov	r8, r0
 8025c1e:	4605      	mov	r5, r0
 8025c20:	9b05      	ldr	r3, [sp, #20]
 8025c22:	3301      	adds	r3, #1
 8025c24:	9305      	str	r3, [sp, #20]
 8025c26:	e775      	b.n	8025b14 <_dtoa_r+0x8d4>
 8025c28:	f000 f90c 	bl	8025e44 <__multadd>
 8025c2c:	4629      	mov	r1, r5
 8025c2e:	4680      	mov	r8, r0
 8025c30:	2300      	movs	r3, #0
 8025c32:	220a      	movs	r2, #10
 8025c34:	4648      	mov	r0, r9
 8025c36:	f000 f905 	bl	8025e44 <__multadd>
 8025c3a:	4605      	mov	r5, r0
 8025c3c:	e7f0      	b.n	8025c20 <_dtoa_r+0x9e0>
 8025c3e:	f1bb 0f00 	cmp.w	fp, #0
 8025c42:	bfcc      	ite	gt
 8025c44:	465e      	movgt	r6, fp
 8025c46:	2601      	movle	r6, #1
 8025c48:	443e      	add	r6, r7
 8025c4a:	f04f 0800 	mov.w	r8, #0
 8025c4e:	9901      	ldr	r1, [sp, #4]
 8025c50:	2201      	movs	r2, #1
 8025c52:	4648      	mov	r0, r9
 8025c54:	f000 faec 	bl	8026230 <__lshift>
 8025c58:	4621      	mov	r1, r4
 8025c5a:	9001      	str	r0, [sp, #4]
 8025c5c:	f000 fb54 	bl	8026308 <__mcmp>
 8025c60:	2800      	cmp	r0, #0
 8025c62:	dcaf      	bgt.n	8025bc4 <_dtoa_r+0x984>
 8025c64:	d102      	bne.n	8025c6c <_dtoa_r+0xa2c>
 8025c66:	f01a 0f01 	tst.w	sl, #1
 8025c6a:	d1ab      	bne.n	8025bc4 <_dtoa_r+0x984>
 8025c6c:	4633      	mov	r3, r6
 8025c6e:	461e      	mov	r6, r3
 8025c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025c74:	2a30      	cmp	r2, #48	@ 0x30
 8025c76:	d0fa      	beq.n	8025c6e <_dtoa_r+0xa2e>
 8025c78:	e5bb      	b.n	80257f2 <_dtoa_r+0x5b2>
 8025c7a:	429f      	cmp	r7, r3
 8025c7c:	d1a3      	bne.n	8025bc6 <_dtoa_r+0x986>
 8025c7e:	9b04      	ldr	r3, [sp, #16]
 8025c80:	3301      	adds	r3, #1
 8025c82:	9304      	str	r3, [sp, #16]
 8025c84:	2331      	movs	r3, #49	@ 0x31
 8025c86:	703b      	strb	r3, [r7, #0]
 8025c88:	e5b3      	b.n	80257f2 <_dtoa_r+0x5b2>
 8025c8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025c8c:	4f16      	ldr	r7, [pc, #88]	@ (8025ce8 <_dtoa_r+0xaa8>)
 8025c8e:	b11b      	cbz	r3, 8025c98 <_dtoa_r+0xa58>
 8025c90:	f107 0308 	add.w	r3, r7, #8
 8025c94:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8025c96:	6013      	str	r3, [r2, #0]
 8025c98:	4638      	mov	r0, r7
 8025c9a:	b011      	add	sp, #68	@ 0x44
 8025c9c:	ecbd 8b02 	vpop	{d8}
 8025ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ca4:	9b07      	ldr	r3, [sp, #28]
 8025ca6:	2b01      	cmp	r3, #1
 8025ca8:	f77f ae36 	ble.w	8025918 <_dtoa_r+0x6d8>
 8025cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025cb0:	2001      	movs	r0, #1
 8025cb2:	e656      	b.n	8025962 <_dtoa_r+0x722>
 8025cb4:	f1bb 0f00 	cmp.w	fp, #0
 8025cb8:	f77f aed7 	ble.w	8025a6a <_dtoa_r+0x82a>
 8025cbc:	463e      	mov	r6, r7
 8025cbe:	9801      	ldr	r0, [sp, #4]
 8025cc0:	4621      	mov	r1, r4
 8025cc2:	f7ff fa32 	bl	802512a <quorem>
 8025cc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8025cca:	f806 ab01 	strb.w	sl, [r6], #1
 8025cce:	1bf2      	subs	r2, r6, r7
 8025cd0:	4593      	cmp	fp, r2
 8025cd2:	ddb4      	ble.n	8025c3e <_dtoa_r+0x9fe>
 8025cd4:	9901      	ldr	r1, [sp, #4]
 8025cd6:	2300      	movs	r3, #0
 8025cd8:	220a      	movs	r2, #10
 8025cda:	4648      	mov	r0, r9
 8025cdc:	f000 f8b2 	bl	8025e44 <__multadd>
 8025ce0:	9001      	str	r0, [sp, #4]
 8025ce2:	e7ec      	b.n	8025cbe <_dtoa_r+0xa7e>
 8025ce4:	0803866e 	.word	0x0803866e
 8025ce8:	08038609 	.word	0x08038609

08025cec <_free_r>:
 8025cec:	b538      	push	{r3, r4, r5, lr}
 8025cee:	4605      	mov	r5, r0
 8025cf0:	2900      	cmp	r1, #0
 8025cf2:	d041      	beq.n	8025d78 <_free_r+0x8c>
 8025cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025cf8:	1f0c      	subs	r4, r1, #4
 8025cfa:	2b00      	cmp	r3, #0
 8025cfc:	bfb8      	it	lt
 8025cfe:	18e4      	addlt	r4, r4, r3
 8025d00:	f7fd feca 	bl	8023a98 <__malloc_lock>
 8025d04:	4a1d      	ldr	r2, [pc, #116]	@ (8025d7c <_free_r+0x90>)
 8025d06:	6813      	ldr	r3, [r2, #0]
 8025d08:	b933      	cbnz	r3, 8025d18 <_free_r+0x2c>
 8025d0a:	6063      	str	r3, [r4, #4]
 8025d0c:	6014      	str	r4, [r2, #0]
 8025d0e:	4628      	mov	r0, r5
 8025d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025d14:	f7fd bec6 	b.w	8023aa4 <__malloc_unlock>
 8025d18:	42a3      	cmp	r3, r4
 8025d1a:	d908      	bls.n	8025d2e <_free_r+0x42>
 8025d1c:	6820      	ldr	r0, [r4, #0]
 8025d1e:	1821      	adds	r1, r4, r0
 8025d20:	428b      	cmp	r3, r1
 8025d22:	bf01      	itttt	eq
 8025d24:	6819      	ldreq	r1, [r3, #0]
 8025d26:	685b      	ldreq	r3, [r3, #4]
 8025d28:	1809      	addeq	r1, r1, r0
 8025d2a:	6021      	streq	r1, [r4, #0]
 8025d2c:	e7ed      	b.n	8025d0a <_free_r+0x1e>
 8025d2e:	461a      	mov	r2, r3
 8025d30:	685b      	ldr	r3, [r3, #4]
 8025d32:	b10b      	cbz	r3, 8025d38 <_free_r+0x4c>
 8025d34:	42a3      	cmp	r3, r4
 8025d36:	d9fa      	bls.n	8025d2e <_free_r+0x42>
 8025d38:	6811      	ldr	r1, [r2, #0]
 8025d3a:	1850      	adds	r0, r2, r1
 8025d3c:	42a0      	cmp	r0, r4
 8025d3e:	d10b      	bne.n	8025d58 <_free_r+0x6c>
 8025d40:	6820      	ldr	r0, [r4, #0]
 8025d42:	4401      	add	r1, r0
 8025d44:	1850      	adds	r0, r2, r1
 8025d46:	4283      	cmp	r3, r0
 8025d48:	6011      	str	r1, [r2, #0]
 8025d4a:	d1e0      	bne.n	8025d0e <_free_r+0x22>
 8025d4c:	6818      	ldr	r0, [r3, #0]
 8025d4e:	685b      	ldr	r3, [r3, #4]
 8025d50:	6053      	str	r3, [r2, #4]
 8025d52:	4408      	add	r0, r1
 8025d54:	6010      	str	r0, [r2, #0]
 8025d56:	e7da      	b.n	8025d0e <_free_r+0x22>
 8025d58:	d902      	bls.n	8025d60 <_free_r+0x74>
 8025d5a:	230c      	movs	r3, #12
 8025d5c:	602b      	str	r3, [r5, #0]
 8025d5e:	e7d6      	b.n	8025d0e <_free_r+0x22>
 8025d60:	6820      	ldr	r0, [r4, #0]
 8025d62:	1821      	adds	r1, r4, r0
 8025d64:	428b      	cmp	r3, r1
 8025d66:	bf04      	itt	eq
 8025d68:	6819      	ldreq	r1, [r3, #0]
 8025d6a:	685b      	ldreq	r3, [r3, #4]
 8025d6c:	6063      	str	r3, [r4, #4]
 8025d6e:	bf04      	itt	eq
 8025d70:	1809      	addeq	r1, r1, r0
 8025d72:	6021      	streq	r1, [r4, #0]
 8025d74:	6054      	str	r4, [r2, #4]
 8025d76:	e7ca      	b.n	8025d0e <_free_r+0x22>
 8025d78:	bd38      	pop	{r3, r4, r5, pc}
 8025d7a:	bf00      	nop
 8025d7c:	240089c0 	.word	0x240089c0

08025d80 <_Balloc>:
 8025d80:	b570      	push	{r4, r5, r6, lr}
 8025d82:	69c6      	ldr	r6, [r0, #28]
 8025d84:	4604      	mov	r4, r0
 8025d86:	460d      	mov	r5, r1
 8025d88:	b976      	cbnz	r6, 8025da8 <_Balloc+0x28>
 8025d8a:	2010      	movs	r0, #16
 8025d8c:	f7fd fdd2 	bl	8023934 <malloc>
 8025d90:	4602      	mov	r2, r0
 8025d92:	61e0      	str	r0, [r4, #28]
 8025d94:	b920      	cbnz	r0, 8025da0 <_Balloc+0x20>
 8025d96:	4b18      	ldr	r3, [pc, #96]	@ (8025df8 <_Balloc+0x78>)
 8025d98:	4818      	ldr	r0, [pc, #96]	@ (8025dfc <_Balloc+0x7c>)
 8025d9a:	216b      	movs	r1, #107	@ 0x6b
 8025d9c:	f7fd fd8c 	bl	80238b8 <__assert_func>
 8025da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025da4:	6006      	str	r6, [r0, #0]
 8025da6:	60c6      	str	r6, [r0, #12]
 8025da8:	69e6      	ldr	r6, [r4, #28]
 8025daa:	68f3      	ldr	r3, [r6, #12]
 8025dac:	b183      	cbz	r3, 8025dd0 <_Balloc+0x50>
 8025dae:	69e3      	ldr	r3, [r4, #28]
 8025db0:	68db      	ldr	r3, [r3, #12]
 8025db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025db6:	b9b8      	cbnz	r0, 8025de8 <_Balloc+0x68>
 8025db8:	2101      	movs	r1, #1
 8025dba:	fa01 f605 	lsl.w	r6, r1, r5
 8025dbe:	1d72      	adds	r2, r6, #5
 8025dc0:	0092      	lsls	r2, r2, #2
 8025dc2:	4620      	mov	r0, r4
 8025dc4:	f7fd fda2 	bl	802390c <_calloc_r>
 8025dc8:	b160      	cbz	r0, 8025de4 <_Balloc+0x64>
 8025dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025dce:	e00e      	b.n	8025dee <_Balloc+0x6e>
 8025dd0:	2221      	movs	r2, #33	@ 0x21
 8025dd2:	2104      	movs	r1, #4
 8025dd4:	4620      	mov	r0, r4
 8025dd6:	f7fd fd99 	bl	802390c <_calloc_r>
 8025dda:	69e3      	ldr	r3, [r4, #28]
 8025ddc:	60f0      	str	r0, [r6, #12]
 8025dde:	68db      	ldr	r3, [r3, #12]
 8025de0:	2b00      	cmp	r3, #0
 8025de2:	d1e4      	bne.n	8025dae <_Balloc+0x2e>
 8025de4:	2000      	movs	r0, #0
 8025de6:	bd70      	pop	{r4, r5, r6, pc}
 8025de8:	6802      	ldr	r2, [r0, #0]
 8025dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025dee:	2300      	movs	r3, #0
 8025df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025df4:	e7f7      	b.n	8025de6 <_Balloc+0x66>
 8025df6:	bf00      	nop
 8025df8:	08038460 	.word	0x08038460
 8025dfc:	0803867f 	.word	0x0803867f

08025e00 <_Bfree>:
 8025e00:	b570      	push	{r4, r5, r6, lr}
 8025e02:	69c6      	ldr	r6, [r0, #28]
 8025e04:	4605      	mov	r5, r0
 8025e06:	460c      	mov	r4, r1
 8025e08:	b976      	cbnz	r6, 8025e28 <_Bfree+0x28>
 8025e0a:	2010      	movs	r0, #16
 8025e0c:	f7fd fd92 	bl	8023934 <malloc>
 8025e10:	4602      	mov	r2, r0
 8025e12:	61e8      	str	r0, [r5, #28]
 8025e14:	b920      	cbnz	r0, 8025e20 <_Bfree+0x20>
 8025e16:	4b09      	ldr	r3, [pc, #36]	@ (8025e3c <_Bfree+0x3c>)
 8025e18:	4809      	ldr	r0, [pc, #36]	@ (8025e40 <_Bfree+0x40>)
 8025e1a:	218f      	movs	r1, #143	@ 0x8f
 8025e1c:	f7fd fd4c 	bl	80238b8 <__assert_func>
 8025e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025e24:	6006      	str	r6, [r0, #0]
 8025e26:	60c6      	str	r6, [r0, #12]
 8025e28:	b13c      	cbz	r4, 8025e3a <_Bfree+0x3a>
 8025e2a:	69eb      	ldr	r3, [r5, #28]
 8025e2c:	6862      	ldr	r2, [r4, #4]
 8025e2e:	68db      	ldr	r3, [r3, #12]
 8025e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025e34:	6021      	str	r1, [r4, #0]
 8025e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025e3a:	bd70      	pop	{r4, r5, r6, pc}
 8025e3c:	08038460 	.word	0x08038460
 8025e40:	0803867f 	.word	0x0803867f

08025e44 <__multadd>:
 8025e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e48:	690d      	ldr	r5, [r1, #16]
 8025e4a:	4607      	mov	r7, r0
 8025e4c:	460c      	mov	r4, r1
 8025e4e:	461e      	mov	r6, r3
 8025e50:	f101 0c14 	add.w	ip, r1, #20
 8025e54:	2000      	movs	r0, #0
 8025e56:	f8dc 3000 	ldr.w	r3, [ip]
 8025e5a:	b299      	uxth	r1, r3
 8025e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8025e60:	0c1e      	lsrs	r6, r3, #16
 8025e62:	0c0b      	lsrs	r3, r1, #16
 8025e64:	fb02 3306 	mla	r3, r2, r6, r3
 8025e68:	b289      	uxth	r1, r1
 8025e6a:	3001      	adds	r0, #1
 8025e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025e70:	4285      	cmp	r5, r0
 8025e72:	f84c 1b04 	str.w	r1, [ip], #4
 8025e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025e7a:	dcec      	bgt.n	8025e56 <__multadd+0x12>
 8025e7c:	b30e      	cbz	r6, 8025ec2 <__multadd+0x7e>
 8025e7e:	68a3      	ldr	r3, [r4, #8]
 8025e80:	42ab      	cmp	r3, r5
 8025e82:	dc19      	bgt.n	8025eb8 <__multadd+0x74>
 8025e84:	6861      	ldr	r1, [r4, #4]
 8025e86:	4638      	mov	r0, r7
 8025e88:	3101      	adds	r1, #1
 8025e8a:	f7ff ff79 	bl	8025d80 <_Balloc>
 8025e8e:	4680      	mov	r8, r0
 8025e90:	b928      	cbnz	r0, 8025e9e <__multadd+0x5a>
 8025e92:	4602      	mov	r2, r0
 8025e94:	4b0c      	ldr	r3, [pc, #48]	@ (8025ec8 <__multadd+0x84>)
 8025e96:	480d      	ldr	r0, [pc, #52]	@ (8025ecc <__multadd+0x88>)
 8025e98:	21ba      	movs	r1, #186	@ 0xba
 8025e9a:	f7fd fd0d 	bl	80238b8 <__assert_func>
 8025e9e:	6922      	ldr	r2, [r4, #16]
 8025ea0:	3202      	adds	r2, #2
 8025ea2:	f104 010c 	add.w	r1, r4, #12
 8025ea6:	0092      	lsls	r2, r2, #2
 8025ea8:	300c      	adds	r0, #12
 8025eaa:	f7ff f922 	bl	80250f2 <memcpy>
 8025eae:	4621      	mov	r1, r4
 8025eb0:	4638      	mov	r0, r7
 8025eb2:	f7ff ffa5 	bl	8025e00 <_Bfree>
 8025eb6:	4644      	mov	r4, r8
 8025eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025ebc:	3501      	adds	r5, #1
 8025ebe:	615e      	str	r6, [r3, #20]
 8025ec0:	6125      	str	r5, [r4, #16]
 8025ec2:	4620      	mov	r0, r4
 8025ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ec8:	0803866e 	.word	0x0803866e
 8025ecc:	0803867f 	.word	0x0803867f

08025ed0 <__s2b>:
 8025ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ed4:	460c      	mov	r4, r1
 8025ed6:	4615      	mov	r5, r2
 8025ed8:	461f      	mov	r7, r3
 8025eda:	2209      	movs	r2, #9
 8025edc:	3308      	adds	r3, #8
 8025ede:	4606      	mov	r6, r0
 8025ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8025ee4:	2100      	movs	r1, #0
 8025ee6:	2201      	movs	r2, #1
 8025ee8:	429a      	cmp	r2, r3
 8025eea:	db09      	blt.n	8025f00 <__s2b+0x30>
 8025eec:	4630      	mov	r0, r6
 8025eee:	f7ff ff47 	bl	8025d80 <_Balloc>
 8025ef2:	b940      	cbnz	r0, 8025f06 <__s2b+0x36>
 8025ef4:	4602      	mov	r2, r0
 8025ef6:	4b19      	ldr	r3, [pc, #100]	@ (8025f5c <__s2b+0x8c>)
 8025ef8:	4819      	ldr	r0, [pc, #100]	@ (8025f60 <__s2b+0x90>)
 8025efa:	21d3      	movs	r1, #211	@ 0xd3
 8025efc:	f7fd fcdc 	bl	80238b8 <__assert_func>
 8025f00:	0052      	lsls	r2, r2, #1
 8025f02:	3101      	adds	r1, #1
 8025f04:	e7f0      	b.n	8025ee8 <__s2b+0x18>
 8025f06:	9b08      	ldr	r3, [sp, #32]
 8025f08:	6143      	str	r3, [r0, #20]
 8025f0a:	2d09      	cmp	r5, #9
 8025f0c:	f04f 0301 	mov.w	r3, #1
 8025f10:	6103      	str	r3, [r0, #16]
 8025f12:	dd16      	ble.n	8025f42 <__s2b+0x72>
 8025f14:	f104 0909 	add.w	r9, r4, #9
 8025f18:	46c8      	mov	r8, r9
 8025f1a:	442c      	add	r4, r5
 8025f1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025f20:	4601      	mov	r1, r0
 8025f22:	3b30      	subs	r3, #48	@ 0x30
 8025f24:	220a      	movs	r2, #10
 8025f26:	4630      	mov	r0, r6
 8025f28:	f7ff ff8c 	bl	8025e44 <__multadd>
 8025f2c:	45a0      	cmp	r8, r4
 8025f2e:	d1f5      	bne.n	8025f1c <__s2b+0x4c>
 8025f30:	f1a5 0408 	sub.w	r4, r5, #8
 8025f34:	444c      	add	r4, r9
 8025f36:	1b2d      	subs	r5, r5, r4
 8025f38:	1963      	adds	r3, r4, r5
 8025f3a:	42bb      	cmp	r3, r7
 8025f3c:	db04      	blt.n	8025f48 <__s2b+0x78>
 8025f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025f42:	340a      	adds	r4, #10
 8025f44:	2509      	movs	r5, #9
 8025f46:	e7f6      	b.n	8025f36 <__s2b+0x66>
 8025f48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025f4c:	4601      	mov	r1, r0
 8025f4e:	3b30      	subs	r3, #48	@ 0x30
 8025f50:	220a      	movs	r2, #10
 8025f52:	4630      	mov	r0, r6
 8025f54:	f7ff ff76 	bl	8025e44 <__multadd>
 8025f58:	e7ee      	b.n	8025f38 <__s2b+0x68>
 8025f5a:	bf00      	nop
 8025f5c:	0803866e 	.word	0x0803866e
 8025f60:	0803867f 	.word	0x0803867f

08025f64 <__hi0bits>:
 8025f64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8025f68:	4603      	mov	r3, r0
 8025f6a:	bf36      	itet	cc
 8025f6c:	0403      	lslcc	r3, r0, #16
 8025f6e:	2000      	movcs	r0, #0
 8025f70:	2010      	movcc	r0, #16
 8025f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025f76:	bf3c      	itt	cc
 8025f78:	021b      	lslcc	r3, r3, #8
 8025f7a:	3008      	addcc	r0, #8
 8025f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8025f80:	bf3c      	itt	cc
 8025f82:	011b      	lslcc	r3, r3, #4
 8025f84:	3004      	addcc	r0, #4
 8025f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025f8a:	bf3c      	itt	cc
 8025f8c:	009b      	lslcc	r3, r3, #2
 8025f8e:	3002      	addcc	r0, #2
 8025f90:	2b00      	cmp	r3, #0
 8025f92:	db05      	blt.n	8025fa0 <__hi0bits+0x3c>
 8025f94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8025f98:	f100 0001 	add.w	r0, r0, #1
 8025f9c:	bf08      	it	eq
 8025f9e:	2020      	moveq	r0, #32
 8025fa0:	4770      	bx	lr

08025fa2 <__lo0bits>:
 8025fa2:	6803      	ldr	r3, [r0, #0]
 8025fa4:	4602      	mov	r2, r0
 8025fa6:	f013 0007 	ands.w	r0, r3, #7
 8025faa:	d00b      	beq.n	8025fc4 <__lo0bits+0x22>
 8025fac:	07d9      	lsls	r1, r3, #31
 8025fae:	d421      	bmi.n	8025ff4 <__lo0bits+0x52>
 8025fb0:	0798      	lsls	r0, r3, #30
 8025fb2:	bf49      	itett	mi
 8025fb4:	085b      	lsrmi	r3, r3, #1
 8025fb6:	089b      	lsrpl	r3, r3, #2
 8025fb8:	2001      	movmi	r0, #1
 8025fba:	6013      	strmi	r3, [r2, #0]
 8025fbc:	bf5c      	itt	pl
 8025fbe:	6013      	strpl	r3, [r2, #0]
 8025fc0:	2002      	movpl	r0, #2
 8025fc2:	4770      	bx	lr
 8025fc4:	b299      	uxth	r1, r3
 8025fc6:	b909      	cbnz	r1, 8025fcc <__lo0bits+0x2a>
 8025fc8:	0c1b      	lsrs	r3, r3, #16
 8025fca:	2010      	movs	r0, #16
 8025fcc:	b2d9      	uxtb	r1, r3
 8025fce:	b909      	cbnz	r1, 8025fd4 <__lo0bits+0x32>
 8025fd0:	3008      	adds	r0, #8
 8025fd2:	0a1b      	lsrs	r3, r3, #8
 8025fd4:	0719      	lsls	r1, r3, #28
 8025fd6:	bf04      	itt	eq
 8025fd8:	091b      	lsreq	r3, r3, #4
 8025fda:	3004      	addeq	r0, #4
 8025fdc:	0799      	lsls	r1, r3, #30
 8025fde:	bf04      	itt	eq
 8025fe0:	089b      	lsreq	r3, r3, #2
 8025fe2:	3002      	addeq	r0, #2
 8025fe4:	07d9      	lsls	r1, r3, #31
 8025fe6:	d403      	bmi.n	8025ff0 <__lo0bits+0x4e>
 8025fe8:	085b      	lsrs	r3, r3, #1
 8025fea:	f100 0001 	add.w	r0, r0, #1
 8025fee:	d003      	beq.n	8025ff8 <__lo0bits+0x56>
 8025ff0:	6013      	str	r3, [r2, #0]
 8025ff2:	4770      	bx	lr
 8025ff4:	2000      	movs	r0, #0
 8025ff6:	4770      	bx	lr
 8025ff8:	2020      	movs	r0, #32
 8025ffa:	4770      	bx	lr

08025ffc <__i2b>:
 8025ffc:	b510      	push	{r4, lr}
 8025ffe:	460c      	mov	r4, r1
 8026000:	2101      	movs	r1, #1
 8026002:	f7ff febd 	bl	8025d80 <_Balloc>
 8026006:	4602      	mov	r2, r0
 8026008:	b928      	cbnz	r0, 8026016 <__i2b+0x1a>
 802600a:	4b05      	ldr	r3, [pc, #20]	@ (8026020 <__i2b+0x24>)
 802600c:	4805      	ldr	r0, [pc, #20]	@ (8026024 <__i2b+0x28>)
 802600e:	f240 1145 	movw	r1, #325	@ 0x145
 8026012:	f7fd fc51 	bl	80238b8 <__assert_func>
 8026016:	2301      	movs	r3, #1
 8026018:	6144      	str	r4, [r0, #20]
 802601a:	6103      	str	r3, [r0, #16]
 802601c:	bd10      	pop	{r4, pc}
 802601e:	bf00      	nop
 8026020:	0803866e 	.word	0x0803866e
 8026024:	0803867f 	.word	0x0803867f

08026028 <__multiply>:
 8026028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802602c:	4614      	mov	r4, r2
 802602e:	690a      	ldr	r2, [r1, #16]
 8026030:	6923      	ldr	r3, [r4, #16]
 8026032:	429a      	cmp	r2, r3
 8026034:	bfa8      	it	ge
 8026036:	4623      	movge	r3, r4
 8026038:	460f      	mov	r7, r1
 802603a:	bfa4      	itt	ge
 802603c:	460c      	movge	r4, r1
 802603e:	461f      	movge	r7, r3
 8026040:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026044:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026048:	68a3      	ldr	r3, [r4, #8]
 802604a:	6861      	ldr	r1, [r4, #4]
 802604c:	eb0a 0609 	add.w	r6, sl, r9
 8026050:	42b3      	cmp	r3, r6
 8026052:	b085      	sub	sp, #20
 8026054:	bfb8      	it	lt
 8026056:	3101      	addlt	r1, #1
 8026058:	f7ff fe92 	bl	8025d80 <_Balloc>
 802605c:	b930      	cbnz	r0, 802606c <__multiply+0x44>
 802605e:	4602      	mov	r2, r0
 8026060:	4b44      	ldr	r3, [pc, #272]	@ (8026174 <__multiply+0x14c>)
 8026062:	4845      	ldr	r0, [pc, #276]	@ (8026178 <__multiply+0x150>)
 8026064:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8026068:	f7fd fc26 	bl	80238b8 <__assert_func>
 802606c:	f100 0514 	add.w	r5, r0, #20
 8026070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026074:	462b      	mov	r3, r5
 8026076:	2200      	movs	r2, #0
 8026078:	4543      	cmp	r3, r8
 802607a:	d321      	bcc.n	80260c0 <__multiply+0x98>
 802607c:	f107 0114 	add.w	r1, r7, #20
 8026080:	f104 0214 	add.w	r2, r4, #20
 8026084:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026088:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802608c:	9302      	str	r3, [sp, #8]
 802608e:	1b13      	subs	r3, r2, r4
 8026090:	3b15      	subs	r3, #21
 8026092:	f023 0303 	bic.w	r3, r3, #3
 8026096:	3304      	adds	r3, #4
 8026098:	f104 0715 	add.w	r7, r4, #21
 802609c:	42ba      	cmp	r2, r7
 802609e:	bf38      	it	cc
 80260a0:	2304      	movcc	r3, #4
 80260a2:	9301      	str	r3, [sp, #4]
 80260a4:	9b02      	ldr	r3, [sp, #8]
 80260a6:	9103      	str	r1, [sp, #12]
 80260a8:	428b      	cmp	r3, r1
 80260aa:	d80c      	bhi.n	80260c6 <__multiply+0x9e>
 80260ac:	2e00      	cmp	r6, #0
 80260ae:	dd03      	ble.n	80260b8 <__multiply+0x90>
 80260b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	d05b      	beq.n	8026170 <__multiply+0x148>
 80260b8:	6106      	str	r6, [r0, #16]
 80260ba:	b005      	add	sp, #20
 80260bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260c0:	f843 2b04 	str.w	r2, [r3], #4
 80260c4:	e7d8      	b.n	8026078 <__multiply+0x50>
 80260c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80260ca:	f1ba 0f00 	cmp.w	sl, #0
 80260ce:	d024      	beq.n	802611a <__multiply+0xf2>
 80260d0:	f104 0e14 	add.w	lr, r4, #20
 80260d4:	46a9      	mov	r9, r5
 80260d6:	f04f 0c00 	mov.w	ip, #0
 80260da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80260de:	f8d9 3000 	ldr.w	r3, [r9]
 80260e2:	fa1f fb87 	uxth.w	fp, r7
 80260e6:	b29b      	uxth	r3, r3
 80260e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80260ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80260f0:	f8d9 7000 	ldr.w	r7, [r9]
 80260f4:	4463      	add	r3, ip
 80260f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80260fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80260fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8026102:	b29b      	uxth	r3, r3
 8026104:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026108:	4572      	cmp	r2, lr
 802610a:	f849 3b04 	str.w	r3, [r9], #4
 802610e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026112:	d8e2      	bhi.n	80260da <__multiply+0xb2>
 8026114:	9b01      	ldr	r3, [sp, #4]
 8026116:	f845 c003 	str.w	ip, [r5, r3]
 802611a:	9b03      	ldr	r3, [sp, #12]
 802611c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8026120:	3104      	adds	r1, #4
 8026122:	f1b9 0f00 	cmp.w	r9, #0
 8026126:	d021      	beq.n	802616c <__multiply+0x144>
 8026128:	682b      	ldr	r3, [r5, #0]
 802612a:	f104 0c14 	add.w	ip, r4, #20
 802612e:	46ae      	mov	lr, r5
 8026130:	f04f 0a00 	mov.w	sl, #0
 8026134:	f8bc b000 	ldrh.w	fp, [ip]
 8026138:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802613c:	fb09 770b 	mla	r7, r9, fp, r7
 8026140:	4457      	add	r7, sl
 8026142:	b29b      	uxth	r3, r3
 8026144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026148:	f84e 3b04 	str.w	r3, [lr], #4
 802614c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026154:	f8be 3000 	ldrh.w	r3, [lr]
 8026158:	fb09 330a 	mla	r3, r9, sl, r3
 802615c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026160:	4562      	cmp	r2, ip
 8026162:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026166:	d8e5      	bhi.n	8026134 <__multiply+0x10c>
 8026168:	9f01      	ldr	r7, [sp, #4]
 802616a:	51eb      	str	r3, [r5, r7]
 802616c:	3504      	adds	r5, #4
 802616e:	e799      	b.n	80260a4 <__multiply+0x7c>
 8026170:	3e01      	subs	r6, #1
 8026172:	e79b      	b.n	80260ac <__multiply+0x84>
 8026174:	0803866e 	.word	0x0803866e
 8026178:	0803867f 	.word	0x0803867f

0802617c <__pow5mult>:
 802617c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026180:	4615      	mov	r5, r2
 8026182:	f012 0203 	ands.w	r2, r2, #3
 8026186:	4607      	mov	r7, r0
 8026188:	460e      	mov	r6, r1
 802618a:	d007      	beq.n	802619c <__pow5mult+0x20>
 802618c:	4c25      	ldr	r4, [pc, #148]	@ (8026224 <__pow5mult+0xa8>)
 802618e:	3a01      	subs	r2, #1
 8026190:	2300      	movs	r3, #0
 8026192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026196:	f7ff fe55 	bl	8025e44 <__multadd>
 802619a:	4606      	mov	r6, r0
 802619c:	10ad      	asrs	r5, r5, #2
 802619e:	d03d      	beq.n	802621c <__pow5mult+0xa0>
 80261a0:	69fc      	ldr	r4, [r7, #28]
 80261a2:	b97c      	cbnz	r4, 80261c4 <__pow5mult+0x48>
 80261a4:	2010      	movs	r0, #16
 80261a6:	f7fd fbc5 	bl	8023934 <malloc>
 80261aa:	4602      	mov	r2, r0
 80261ac:	61f8      	str	r0, [r7, #28]
 80261ae:	b928      	cbnz	r0, 80261bc <__pow5mult+0x40>
 80261b0:	4b1d      	ldr	r3, [pc, #116]	@ (8026228 <__pow5mult+0xac>)
 80261b2:	481e      	ldr	r0, [pc, #120]	@ (802622c <__pow5mult+0xb0>)
 80261b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80261b8:	f7fd fb7e 	bl	80238b8 <__assert_func>
 80261bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80261c0:	6004      	str	r4, [r0, #0]
 80261c2:	60c4      	str	r4, [r0, #12]
 80261c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80261c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80261cc:	b94c      	cbnz	r4, 80261e2 <__pow5mult+0x66>
 80261ce:	f240 2171 	movw	r1, #625	@ 0x271
 80261d2:	4638      	mov	r0, r7
 80261d4:	f7ff ff12 	bl	8025ffc <__i2b>
 80261d8:	2300      	movs	r3, #0
 80261da:	f8c8 0008 	str.w	r0, [r8, #8]
 80261de:	4604      	mov	r4, r0
 80261e0:	6003      	str	r3, [r0, #0]
 80261e2:	f04f 0900 	mov.w	r9, #0
 80261e6:	07eb      	lsls	r3, r5, #31
 80261e8:	d50a      	bpl.n	8026200 <__pow5mult+0x84>
 80261ea:	4631      	mov	r1, r6
 80261ec:	4622      	mov	r2, r4
 80261ee:	4638      	mov	r0, r7
 80261f0:	f7ff ff1a 	bl	8026028 <__multiply>
 80261f4:	4631      	mov	r1, r6
 80261f6:	4680      	mov	r8, r0
 80261f8:	4638      	mov	r0, r7
 80261fa:	f7ff fe01 	bl	8025e00 <_Bfree>
 80261fe:	4646      	mov	r6, r8
 8026200:	106d      	asrs	r5, r5, #1
 8026202:	d00b      	beq.n	802621c <__pow5mult+0xa0>
 8026204:	6820      	ldr	r0, [r4, #0]
 8026206:	b938      	cbnz	r0, 8026218 <__pow5mult+0x9c>
 8026208:	4622      	mov	r2, r4
 802620a:	4621      	mov	r1, r4
 802620c:	4638      	mov	r0, r7
 802620e:	f7ff ff0b 	bl	8026028 <__multiply>
 8026212:	6020      	str	r0, [r4, #0]
 8026214:	f8c0 9000 	str.w	r9, [r0]
 8026218:	4604      	mov	r4, r0
 802621a:	e7e4      	b.n	80261e6 <__pow5mult+0x6a>
 802621c:	4630      	mov	r0, r6
 802621e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026222:	bf00      	nop
 8026224:	080386d8 	.word	0x080386d8
 8026228:	08038460 	.word	0x08038460
 802622c:	0803867f 	.word	0x0803867f

08026230 <__lshift>:
 8026230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026234:	460c      	mov	r4, r1
 8026236:	6849      	ldr	r1, [r1, #4]
 8026238:	6923      	ldr	r3, [r4, #16]
 802623a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802623e:	68a3      	ldr	r3, [r4, #8]
 8026240:	4607      	mov	r7, r0
 8026242:	4691      	mov	r9, r2
 8026244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026248:	f108 0601 	add.w	r6, r8, #1
 802624c:	42b3      	cmp	r3, r6
 802624e:	db0b      	blt.n	8026268 <__lshift+0x38>
 8026250:	4638      	mov	r0, r7
 8026252:	f7ff fd95 	bl	8025d80 <_Balloc>
 8026256:	4605      	mov	r5, r0
 8026258:	b948      	cbnz	r0, 802626e <__lshift+0x3e>
 802625a:	4602      	mov	r2, r0
 802625c:	4b28      	ldr	r3, [pc, #160]	@ (8026300 <__lshift+0xd0>)
 802625e:	4829      	ldr	r0, [pc, #164]	@ (8026304 <__lshift+0xd4>)
 8026260:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8026264:	f7fd fb28 	bl	80238b8 <__assert_func>
 8026268:	3101      	adds	r1, #1
 802626a:	005b      	lsls	r3, r3, #1
 802626c:	e7ee      	b.n	802624c <__lshift+0x1c>
 802626e:	2300      	movs	r3, #0
 8026270:	f100 0114 	add.w	r1, r0, #20
 8026274:	f100 0210 	add.w	r2, r0, #16
 8026278:	4618      	mov	r0, r3
 802627a:	4553      	cmp	r3, sl
 802627c:	db33      	blt.n	80262e6 <__lshift+0xb6>
 802627e:	6920      	ldr	r0, [r4, #16]
 8026280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026284:	f104 0314 	add.w	r3, r4, #20
 8026288:	f019 091f 	ands.w	r9, r9, #31
 802628c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026294:	d02b      	beq.n	80262ee <__lshift+0xbe>
 8026296:	f1c9 0e20 	rsb	lr, r9, #32
 802629a:	468a      	mov	sl, r1
 802629c:	2200      	movs	r2, #0
 802629e:	6818      	ldr	r0, [r3, #0]
 80262a0:	fa00 f009 	lsl.w	r0, r0, r9
 80262a4:	4310      	orrs	r0, r2
 80262a6:	f84a 0b04 	str.w	r0, [sl], #4
 80262aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80262ae:	459c      	cmp	ip, r3
 80262b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80262b4:	d8f3      	bhi.n	802629e <__lshift+0x6e>
 80262b6:	ebac 0304 	sub.w	r3, ip, r4
 80262ba:	3b15      	subs	r3, #21
 80262bc:	f023 0303 	bic.w	r3, r3, #3
 80262c0:	3304      	adds	r3, #4
 80262c2:	f104 0015 	add.w	r0, r4, #21
 80262c6:	4584      	cmp	ip, r0
 80262c8:	bf38      	it	cc
 80262ca:	2304      	movcc	r3, #4
 80262cc:	50ca      	str	r2, [r1, r3]
 80262ce:	b10a      	cbz	r2, 80262d4 <__lshift+0xa4>
 80262d0:	f108 0602 	add.w	r6, r8, #2
 80262d4:	3e01      	subs	r6, #1
 80262d6:	4638      	mov	r0, r7
 80262d8:	612e      	str	r6, [r5, #16]
 80262da:	4621      	mov	r1, r4
 80262dc:	f7ff fd90 	bl	8025e00 <_Bfree>
 80262e0:	4628      	mov	r0, r5
 80262e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80262e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80262ea:	3301      	adds	r3, #1
 80262ec:	e7c5      	b.n	802627a <__lshift+0x4a>
 80262ee:	3904      	subs	r1, #4
 80262f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80262f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80262f8:	459c      	cmp	ip, r3
 80262fa:	d8f9      	bhi.n	80262f0 <__lshift+0xc0>
 80262fc:	e7ea      	b.n	80262d4 <__lshift+0xa4>
 80262fe:	bf00      	nop
 8026300:	0803866e 	.word	0x0803866e
 8026304:	0803867f 	.word	0x0803867f

08026308 <__mcmp>:
 8026308:	690a      	ldr	r2, [r1, #16]
 802630a:	4603      	mov	r3, r0
 802630c:	6900      	ldr	r0, [r0, #16]
 802630e:	1a80      	subs	r0, r0, r2
 8026310:	b530      	push	{r4, r5, lr}
 8026312:	d10e      	bne.n	8026332 <__mcmp+0x2a>
 8026314:	3314      	adds	r3, #20
 8026316:	3114      	adds	r1, #20
 8026318:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802631c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026328:	4295      	cmp	r5, r2
 802632a:	d003      	beq.n	8026334 <__mcmp+0x2c>
 802632c:	d205      	bcs.n	802633a <__mcmp+0x32>
 802632e:	f04f 30ff 	mov.w	r0, #4294967295
 8026332:	bd30      	pop	{r4, r5, pc}
 8026334:	42a3      	cmp	r3, r4
 8026336:	d3f3      	bcc.n	8026320 <__mcmp+0x18>
 8026338:	e7fb      	b.n	8026332 <__mcmp+0x2a>
 802633a:	2001      	movs	r0, #1
 802633c:	e7f9      	b.n	8026332 <__mcmp+0x2a>
	...

08026340 <__mdiff>:
 8026340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026344:	4689      	mov	r9, r1
 8026346:	4606      	mov	r6, r0
 8026348:	4611      	mov	r1, r2
 802634a:	4648      	mov	r0, r9
 802634c:	4614      	mov	r4, r2
 802634e:	f7ff ffdb 	bl	8026308 <__mcmp>
 8026352:	1e05      	subs	r5, r0, #0
 8026354:	d112      	bne.n	802637c <__mdiff+0x3c>
 8026356:	4629      	mov	r1, r5
 8026358:	4630      	mov	r0, r6
 802635a:	f7ff fd11 	bl	8025d80 <_Balloc>
 802635e:	4602      	mov	r2, r0
 8026360:	b928      	cbnz	r0, 802636e <__mdiff+0x2e>
 8026362:	4b3f      	ldr	r3, [pc, #252]	@ (8026460 <__mdiff+0x120>)
 8026364:	f240 2137 	movw	r1, #567	@ 0x237
 8026368:	483e      	ldr	r0, [pc, #248]	@ (8026464 <__mdiff+0x124>)
 802636a:	f7fd faa5 	bl	80238b8 <__assert_func>
 802636e:	2301      	movs	r3, #1
 8026370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026374:	4610      	mov	r0, r2
 8026376:	b003      	add	sp, #12
 8026378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802637c:	bfbc      	itt	lt
 802637e:	464b      	movlt	r3, r9
 8026380:	46a1      	movlt	r9, r4
 8026382:	4630      	mov	r0, r6
 8026384:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026388:	bfba      	itte	lt
 802638a:	461c      	movlt	r4, r3
 802638c:	2501      	movlt	r5, #1
 802638e:	2500      	movge	r5, #0
 8026390:	f7ff fcf6 	bl	8025d80 <_Balloc>
 8026394:	4602      	mov	r2, r0
 8026396:	b918      	cbnz	r0, 80263a0 <__mdiff+0x60>
 8026398:	4b31      	ldr	r3, [pc, #196]	@ (8026460 <__mdiff+0x120>)
 802639a:	f240 2145 	movw	r1, #581	@ 0x245
 802639e:	e7e3      	b.n	8026368 <__mdiff+0x28>
 80263a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80263a4:	6926      	ldr	r6, [r4, #16]
 80263a6:	60c5      	str	r5, [r0, #12]
 80263a8:	f109 0310 	add.w	r3, r9, #16
 80263ac:	f109 0514 	add.w	r5, r9, #20
 80263b0:	f104 0e14 	add.w	lr, r4, #20
 80263b4:	f100 0b14 	add.w	fp, r0, #20
 80263b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80263bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80263c0:	9301      	str	r3, [sp, #4]
 80263c2:	46d9      	mov	r9, fp
 80263c4:	f04f 0c00 	mov.w	ip, #0
 80263c8:	9b01      	ldr	r3, [sp, #4]
 80263ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80263ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80263d2:	9301      	str	r3, [sp, #4]
 80263d4:	fa1f f38a 	uxth.w	r3, sl
 80263d8:	4619      	mov	r1, r3
 80263da:	b283      	uxth	r3, r0
 80263dc:	1acb      	subs	r3, r1, r3
 80263de:	0c00      	lsrs	r0, r0, #16
 80263e0:	4463      	add	r3, ip
 80263e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80263e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80263ea:	b29b      	uxth	r3, r3
 80263ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80263f0:	4576      	cmp	r6, lr
 80263f2:	f849 3b04 	str.w	r3, [r9], #4
 80263f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80263fa:	d8e5      	bhi.n	80263c8 <__mdiff+0x88>
 80263fc:	1b33      	subs	r3, r6, r4
 80263fe:	3b15      	subs	r3, #21
 8026400:	f023 0303 	bic.w	r3, r3, #3
 8026404:	3415      	adds	r4, #21
 8026406:	3304      	adds	r3, #4
 8026408:	42a6      	cmp	r6, r4
 802640a:	bf38      	it	cc
 802640c:	2304      	movcc	r3, #4
 802640e:	441d      	add	r5, r3
 8026410:	445b      	add	r3, fp
 8026412:	461e      	mov	r6, r3
 8026414:	462c      	mov	r4, r5
 8026416:	4544      	cmp	r4, r8
 8026418:	d30e      	bcc.n	8026438 <__mdiff+0xf8>
 802641a:	f108 0103 	add.w	r1, r8, #3
 802641e:	1b49      	subs	r1, r1, r5
 8026420:	f021 0103 	bic.w	r1, r1, #3
 8026424:	3d03      	subs	r5, #3
 8026426:	45a8      	cmp	r8, r5
 8026428:	bf38      	it	cc
 802642a:	2100      	movcc	r1, #0
 802642c:	440b      	add	r3, r1
 802642e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026432:	b191      	cbz	r1, 802645a <__mdiff+0x11a>
 8026434:	6117      	str	r7, [r2, #16]
 8026436:	e79d      	b.n	8026374 <__mdiff+0x34>
 8026438:	f854 1b04 	ldr.w	r1, [r4], #4
 802643c:	46e6      	mov	lr, ip
 802643e:	0c08      	lsrs	r0, r1, #16
 8026440:	fa1c fc81 	uxtah	ip, ip, r1
 8026444:	4471      	add	r1, lr
 8026446:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802644a:	b289      	uxth	r1, r1
 802644c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026450:	f846 1b04 	str.w	r1, [r6], #4
 8026454:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026458:	e7dd      	b.n	8026416 <__mdiff+0xd6>
 802645a:	3f01      	subs	r7, #1
 802645c:	e7e7      	b.n	802642e <__mdiff+0xee>
 802645e:	bf00      	nop
 8026460:	0803866e 	.word	0x0803866e
 8026464:	0803867f 	.word	0x0803867f

08026468 <__ulp>:
 8026468:	b082      	sub	sp, #8
 802646a:	ed8d 0b00 	vstr	d0, [sp]
 802646e:	9a01      	ldr	r2, [sp, #4]
 8026470:	4b0f      	ldr	r3, [pc, #60]	@ (80264b0 <__ulp+0x48>)
 8026472:	4013      	ands	r3, r2
 8026474:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026478:	2b00      	cmp	r3, #0
 802647a:	dc08      	bgt.n	802648e <__ulp+0x26>
 802647c:	425b      	negs	r3, r3
 802647e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026482:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026486:	da04      	bge.n	8026492 <__ulp+0x2a>
 8026488:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802648c:	4113      	asrs	r3, r2
 802648e:	2200      	movs	r2, #0
 8026490:	e008      	b.n	80264a4 <__ulp+0x3c>
 8026492:	f1a2 0314 	sub.w	r3, r2, #20
 8026496:	2b1e      	cmp	r3, #30
 8026498:	bfda      	itte	le
 802649a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802649e:	40da      	lsrle	r2, r3
 80264a0:	2201      	movgt	r2, #1
 80264a2:	2300      	movs	r3, #0
 80264a4:	4619      	mov	r1, r3
 80264a6:	4610      	mov	r0, r2
 80264a8:	ec41 0b10 	vmov	d0, r0, r1
 80264ac:	b002      	add	sp, #8
 80264ae:	4770      	bx	lr
 80264b0:	7ff00000 	.word	0x7ff00000

080264b4 <__b2d>:
 80264b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264b8:	6906      	ldr	r6, [r0, #16]
 80264ba:	f100 0814 	add.w	r8, r0, #20
 80264be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80264c2:	1f37      	subs	r7, r6, #4
 80264c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80264c8:	4610      	mov	r0, r2
 80264ca:	f7ff fd4b 	bl	8025f64 <__hi0bits>
 80264ce:	f1c0 0320 	rsb	r3, r0, #32
 80264d2:	280a      	cmp	r0, #10
 80264d4:	600b      	str	r3, [r1, #0]
 80264d6:	491b      	ldr	r1, [pc, #108]	@ (8026544 <__b2d+0x90>)
 80264d8:	dc15      	bgt.n	8026506 <__b2d+0x52>
 80264da:	f1c0 0c0b 	rsb	ip, r0, #11
 80264de:	fa22 f30c 	lsr.w	r3, r2, ip
 80264e2:	45b8      	cmp	r8, r7
 80264e4:	ea43 0501 	orr.w	r5, r3, r1
 80264e8:	bf34      	ite	cc
 80264ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80264ee:	2300      	movcs	r3, #0
 80264f0:	3015      	adds	r0, #21
 80264f2:	fa02 f000 	lsl.w	r0, r2, r0
 80264f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80264fa:	4303      	orrs	r3, r0
 80264fc:	461c      	mov	r4, r3
 80264fe:	ec45 4b10 	vmov	d0, r4, r5
 8026502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026506:	45b8      	cmp	r8, r7
 8026508:	bf3a      	itte	cc
 802650a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802650e:	f1a6 0708 	subcc.w	r7, r6, #8
 8026512:	2300      	movcs	r3, #0
 8026514:	380b      	subs	r0, #11
 8026516:	d012      	beq.n	802653e <__b2d+0x8a>
 8026518:	f1c0 0120 	rsb	r1, r0, #32
 802651c:	fa23 f401 	lsr.w	r4, r3, r1
 8026520:	4082      	lsls	r2, r0
 8026522:	4322      	orrs	r2, r4
 8026524:	4547      	cmp	r7, r8
 8026526:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802652a:	bf8c      	ite	hi
 802652c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8026530:	2200      	movls	r2, #0
 8026532:	4083      	lsls	r3, r0
 8026534:	40ca      	lsrs	r2, r1
 8026536:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802653a:	4313      	orrs	r3, r2
 802653c:	e7de      	b.n	80264fc <__b2d+0x48>
 802653e:	ea42 0501 	orr.w	r5, r2, r1
 8026542:	e7db      	b.n	80264fc <__b2d+0x48>
 8026544:	3ff00000 	.word	0x3ff00000

08026548 <__d2b>:
 8026548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802654c:	460f      	mov	r7, r1
 802654e:	2101      	movs	r1, #1
 8026550:	ec59 8b10 	vmov	r8, r9, d0
 8026554:	4616      	mov	r6, r2
 8026556:	f7ff fc13 	bl	8025d80 <_Balloc>
 802655a:	4604      	mov	r4, r0
 802655c:	b930      	cbnz	r0, 802656c <__d2b+0x24>
 802655e:	4602      	mov	r2, r0
 8026560:	4b23      	ldr	r3, [pc, #140]	@ (80265f0 <__d2b+0xa8>)
 8026562:	4824      	ldr	r0, [pc, #144]	@ (80265f4 <__d2b+0xac>)
 8026564:	f240 310f 	movw	r1, #783	@ 0x30f
 8026568:	f7fd f9a6 	bl	80238b8 <__assert_func>
 802656c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026574:	b10d      	cbz	r5, 802657a <__d2b+0x32>
 8026576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802657a:	9301      	str	r3, [sp, #4]
 802657c:	f1b8 0300 	subs.w	r3, r8, #0
 8026580:	d023      	beq.n	80265ca <__d2b+0x82>
 8026582:	4668      	mov	r0, sp
 8026584:	9300      	str	r3, [sp, #0]
 8026586:	f7ff fd0c 	bl	8025fa2 <__lo0bits>
 802658a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802658e:	b1d0      	cbz	r0, 80265c6 <__d2b+0x7e>
 8026590:	f1c0 0320 	rsb	r3, r0, #32
 8026594:	fa02 f303 	lsl.w	r3, r2, r3
 8026598:	430b      	orrs	r3, r1
 802659a:	40c2      	lsrs	r2, r0
 802659c:	6163      	str	r3, [r4, #20]
 802659e:	9201      	str	r2, [sp, #4]
 80265a0:	9b01      	ldr	r3, [sp, #4]
 80265a2:	61a3      	str	r3, [r4, #24]
 80265a4:	2b00      	cmp	r3, #0
 80265a6:	bf0c      	ite	eq
 80265a8:	2201      	moveq	r2, #1
 80265aa:	2202      	movne	r2, #2
 80265ac:	6122      	str	r2, [r4, #16]
 80265ae:	b1a5      	cbz	r5, 80265da <__d2b+0x92>
 80265b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80265b4:	4405      	add	r5, r0
 80265b6:	603d      	str	r5, [r7, #0]
 80265b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80265bc:	6030      	str	r0, [r6, #0]
 80265be:	4620      	mov	r0, r4
 80265c0:	b003      	add	sp, #12
 80265c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80265c6:	6161      	str	r1, [r4, #20]
 80265c8:	e7ea      	b.n	80265a0 <__d2b+0x58>
 80265ca:	a801      	add	r0, sp, #4
 80265cc:	f7ff fce9 	bl	8025fa2 <__lo0bits>
 80265d0:	9b01      	ldr	r3, [sp, #4]
 80265d2:	6163      	str	r3, [r4, #20]
 80265d4:	3020      	adds	r0, #32
 80265d6:	2201      	movs	r2, #1
 80265d8:	e7e8      	b.n	80265ac <__d2b+0x64>
 80265da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80265de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80265e2:	6038      	str	r0, [r7, #0]
 80265e4:	6918      	ldr	r0, [r3, #16]
 80265e6:	f7ff fcbd 	bl	8025f64 <__hi0bits>
 80265ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80265ee:	e7e5      	b.n	80265bc <__d2b+0x74>
 80265f0:	0803866e 	.word	0x0803866e
 80265f4:	0803867f 	.word	0x0803867f

080265f8 <__ratio>:
 80265f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265fc:	4688      	mov	r8, r1
 80265fe:	4669      	mov	r1, sp
 8026600:	4681      	mov	r9, r0
 8026602:	f7ff ff57 	bl	80264b4 <__b2d>
 8026606:	a901      	add	r1, sp, #4
 8026608:	4640      	mov	r0, r8
 802660a:	ec55 4b10 	vmov	r4, r5, d0
 802660e:	f7ff ff51 	bl	80264b4 <__b2d>
 8026612:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8026616:	f8d9 2010 	ldr.w	r2, [r9, #16]
 802661a:	1ad2      	subs	r2, r2, r3
 802661c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8026620:	1a5b      	subs	r3, r3, r1
 8026622:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8026626:	ec57 6b10 	vmov	r6, r7, d0
 802662a:	2b00      	cmp	r3, #0
 802662c:	bfd6      	itet	le
 802662e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026632:	462a      	movgt	r2, r5
 8026634:	463a      	movle	r2, r7
 8026636:	46ab      	mov	fp, r5
 8026638:	46a2      	mov	sl, r4
 802663a:	bfce      	itee	gt
 802663c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8026640:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8026644:	ee00 3a90 	vmovle	s1, r3
 8026648:	ec4b ab17 	vmov	d7, sl, fp
 802664c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8026650:	b003      	add	sp, #12
 8026652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026656 <__copybits>:
 8026656:	3901      	subs	r1, #1
 8026658:	b570      	push	{r4, r5, r6, lr}
 802665a:	1149      	asrs	r1, r1, #5
 802665c:	6914      	ldr	r4, [r2, #16]
 802665e:	3101      	adds	r1, #1
 8026660:	f102 0314 	add.w	r3, r2, #20
 8026664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026668:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802666c:	1f05      	subs	r5, r0, #4
 802666e:	42a3      	cmp	r3, r4
 8026670:	d30c      	bcc.n	802668c <__copybits+0x36>
 8026672:	1aa3      	subs	r3, r4, r2
 8026674:	3b11      	subs	r3, #17
 8026676:	f023 0303 	bic.w	r3, r3, #3
 802667a:	3211      	adds	r2, #17
 802667c:	42a2      	cmp	r2, r4
 802667e:	bf88      	it	hi
 8026680:	2300      	movhi	r3, #0
 8026682:	4418      	add	r0, r3
 8026684:	2300      	movs	r3, #0
 8026686:	4288      	cmp	r0, r1
 8026688:	d305      	bcc.n	8026696 <__copybits+0x40>
 802668a:	bd70      	pop	{r4, r5, r6, pc}
 802668c:	f853 6b04 	ldr.w	r6, [r3], #4
 8026690:	f845 6f04 	str.w	r6, [r5, #4]!
 8026694:	e7eb      	b.n	802666e <__copybits+0x18>
 8026696:	f840 3b04 	str.w	r3, [r0], #4
 802669a:	e7f4      	b.n	8026686 <__copybits+0x30>

0802669c <__any_on>:
 802669c:	f100 0214 	add.w	r2, r0, #20
 80266a0:	6900      	ldr	r0, [r0, #16]
 80266a2:	114b      	asrs	r3, r1, #5
 80266a4:	4298      	cmp	r0, r3
 80266a6:	b510      	push	{r4, lr}
 80266a8:	db11      	blt.n	80266ce <__any_on+0x32>
 80266aa:	dd0a      	ble.n	80266c2 <__any_on+0x26>
 80266ac:	f011 011f 	ands.w	r1, r1, #31
 80266b0:	d007      	beq.n	80266c2 <__any_on+0x26>
 80266b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80266b6:	fa24 f001 	lsr.w	r0, r4, r1
 80266ba:	fa00 f101 	lsl.w	r1, r0, r1
 80266be:	428c      	cmp	r4, r1
 80266c0:	d10b      	bne.n	80266da <__any_on+0x3e>
 80266c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80266c6:	4293      	cmp	r3, r2
 80266c8:	d803      	bhi.n	80266d2 <__any_on+0x36>
 80266ca:	2000      	movs	r0, #0
 80266cc:	bd10      	pop	{r4, pc}
 80266ce:	4603      	mov	r3, r0
 80266d0:	e7f7      	b.n	80266c2 <__any_on+0x26>
 80266d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80266d6:	2900      	cmp	r1, #0
 80266d8:	d0f5      	beq.n	80266c6 <__any_on+0x2a>
 80266da:	2001      	movs	r0, #1
 80266dc:	e7f6      	b.n	80266cc <__any_on+0x30>

080266de <sulp>:
 80266de:	b570      	push	{r4, r5, r6, lr}
 80266e0:	4604      	mov	r4, r0
 80266e2:	460d      	mov	r5, r1
 80266e4:	4616      	mov	r6, r2
 80266e6:	ec45 4b10 	vmov	d0, r4, r5
 80266ea:	f7ff febd 	bl	8026468 <__ulp>
 80266ee:	b17e      	cbz	r6, 8026710 <sulp+0x32>
 80266f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80266f4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	dd09      	ble.n	8026710 <sulp+0x32>
 80266fc:	051b      	lsls	r3, r3, #20
 80266fe:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8026702:	2000      	movs	r0, #0
 8026704:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8026708:	ec41 0b17 	vmov	d7, r0, r1
 802670c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026710:	bd70      	pop	{r4, r5, r6, pc}
 8026712:	0000      	movs	r0, r0
 8026714:	0000      	movs	r0, r0
	...

08026718 <_strtod_l>:
 8026718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802671c:	ed2d 8b0a 	vpush	{d8-d12}
 8026720:	b097      	sub	sp, #92	@ 0x5c
 8026722:	4688      	mov	r8, r1
 8026724:	920e      	str	r2, [sp, #56]	@ 0x38
 8026726:	2200      	movs	r2, #0
 8026728:	9212      	str	r2, [sp, #72]	@ 0x48
 802672a:	9005      	str	r0, [sp, #20]
 802672c:	f04f 0a00 	mov.w	sl, #0
 8026730:	f04f 0b00 	mov.w	fp, #0
 8026734:	460a      	mov	r2, r1
 8026736:	9211      	str	r2, [sp, #68]	@ 0x44
 8026738:	7811      	ldrb	r1, [r2, #0]
 802673a:	292b      	cmp	r1, #43	@ 0x2b
 802673c:	d04c      	beq.n	80267d8 <_strtod_l+0xc0>
 802673e:	d839      	bhi.n	80267b4 <_strtod_l+0x9c>
 8026740:	290d      	cmp	r1, #13
 8026742:	d833      	bhi.n	80267ac <_strtod_l+0x94>
 8026744:	2908      	cmp	r1, #8
 8026746:	d833      	bhi.n	80267b0 <_strtod_l+0x98>
 8026748:	2900      	cmp	r1, #0
 802674a:	d03c      	beq.n	80267c6 <_strtod_l+0xae>
 802674c:	2200      	movs	r2, #0
 802674e:	9208      	str	r2, [sp, #32]
 8026750:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026752:	782a      	ldrb	r2, [r5, #0]
 8026754:	2a30      	cmp	r2, #48	@ 0x30
 8026756:	f040 80b5 	bne.w	80268c4 <_strtod_l+0x1ac>
 802675a:	786a      	ldrb	r2, [r5, #1]
 802675c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026760:	2a58      	cmp	r2, #88	@ 0x58
 8026762:	d170      	bne.n	8026846 <_strtod_l+0x12e>
 8026764:	9302      	str	r3, [sp, #8]
 8026766:	9b08      	ldr	r3, [sp, #32]
 8026768:	9301      	str	r3, [sp, #4]
 802676a:	ab12      	add	r3, sp, #72	@ 0x48
 802676c:	9300      	str	r3, [sp, #0]
 802676e:	4a8b      	ldr	r2, [pc, #556]	@ (802699c <_strtod_l+0x284>)
 8026770:	9805      	ldr	r0, [sp, #20]
 8026772:	ab13      	add	r3, sp, #76	@ 0x4c
 8026774:	a911      	add	r1, sp, #68	@ 0x44
 8026776:	f001 fa1f 	bl	8027bb8 <__gethex>
 802677a:	f010 060f 	ands.w	r6, r0, #15
 802677e:	4604      	mov	r4, r0
 8026780:	d005      	beq.n	802678e <_strtod_l+0x76>
 8026782:	2e06      	cmp	r6, #6
 8026784:	d12a      	bne.n	80267dc <_strtod_l+0xc4>
 8026786:	3501      	adds	r5, #1
 8026788:	2300      	movs	r3, #0
 802678a:	9511      	str	r5, [sp, #68]	@ 0x44
 802678c:	9308      	str	r3, [sp, #32]
 802678e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026790:	2b00      	cmp	r3, #0
 8026792:	f040 852f 	bne.w	80271f4 <_strtod_l+0xadc>
 8026796:	9b08      	ldr	r3, [sp, #32]
 8026798:	ec4b ab10 	vmov	d0, sl, fp
 802679c:	b1cb      	cbz	r3, 80267d2 <_strtod_l+0xba>
 802679e:	eeb1 0b40 	vneg.f64	d0, d0
 80267a2:	b017      	add	sp, #92	@ 0x5c
 80267a4:	ecbd 8b0a 	vpop	{d8-d12}
 80267a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267ac:	2920      	cmp	r1, #32
 80267ae:	d1cd      	bne.n	802674c <_strtod_l+0x34>
 80267b0:	3201      	adds	r2, #1
 80267b2:	e7c0      	b.n	8026736 <_strtod_l+0x1e>
 80267b4:	292d      	cmp	r1, #45	@ 0x2d
 80267b6:	d1c9      	bne.n	802674c <_strtod_l+0x34>
 80267b8:	2101      	movs	r1, #1
 80267ba:	9108      	str	r1, [sp, #32]
 80267bc:	1c51      	adds	r1, r2, #1
 80267be:	9111      	str	r1, [sp, #68]	@ 0x44
 80267c0:	7852      	ldrb	r2, [r2, #1]
 80267c2:	2a00      	cmp	r2, #0
 80267c4:	d1c4      	bne.n	8026750 <_strtod_l+0x38>
 80267c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80267c8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80267cc:	2b00      	cmp	r3, #0
 80267ce:	f040 850f 	bne.w	80271f0 <_strtod_l+0xad8>
 80267d2:	ec4b ab10 	vmov	d0, sl, fp
 80267d6:	e7e4      	b.n	80267a2 <_strtod_l+0x8a>
 80267d8:	2100      	movs	r1, #0
 80267da:	e7ee      	b.n	80267ba <_strtod_l+0xa2>
 80267dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80267de:	b13a      	cbz	r2, 80267f0 <_strtod_l+0xd8>
 80267e0:	2135      	movs	r1, #53	@ 0x35
 80267e2:	a814      	add	r0, sp, #80	@ 0x50
 80267e4:	f7ff ff37 	bl	8026656 <__copybits>
 80267e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80267ea:	9805      	ldr	r0, [sp, #20]
 80267ec:	f7ff fb08 	bl	8025e00 <_Bfree>
 80267f0:	1e73      	subs	r3, r6, #1
 80267f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80267f4:	2b04      	cmp	r3, #4
 80267f6:	d806      	bhi.n	8026806 <_strtod_l+0xee>
 80267f8:	e8df f003 	tbb	[pc, r3]
 80267fc:	201d0314 	.word	0x201d0314
 8026800:	14          	.byte	0x14
 8026801:	00          	.byte	0x00
 8026802:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8026806:	05e3      	lsls	r3, r4, #23
 8026808:	bf48      	it	mi
 802680a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802680e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026812:	0d1b      	lsrs	r3, r3, #20
 8026814:	051b      	lsls	r3, r3, #20
 8026816:	2b00      	cmp	r3, #0
 8026818:	d1b9      	bne.n	802678e <_strtod_l+0x76>
 802681a:	f7fe fc35 	bl	8025088 <__errno>
 802681e:	2322      	movs	r3, #34	@ 0x22
 8026820:	6003      	str	r3, [r0, #0]
 8026822:	e7b4      	b.n	802678e <_strtod_l+0x76>
 8026824:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8026828:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802682c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026830:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026834:	e7e7      	b.n	8026806 <_strtod_l+0xee>
 8026836:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80269a4 <_strtod_l+0x28c>
 802683a:	e7e4      	b.n	8026806 <_strtod_l+0xee>
 802683c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8026840:	f04f 3aff 	mov.w	sl, #4294967295
 8026844:	e7df      	b.n	8026806 <_strtod_l+0xee>
 8026846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026848:	1c5a      	adds	r2, r3, #1
 802684a:	9211      	str	r2, [sp, #68]	@ 0x44
 802684c:	785b      	ldrb	r3, [r3, #1]
 802684e:	2b30      	cmp	r3, #48	@ 0x30
 8026850:	d0f9      	beq.n	8026846 <_strtod_l+0x12e>
 8026852:	2b00      	cmp	r3, #0
 8026854:	d09b      	beq.n	802678e <_strtod_l+0x76>
 8026856:	2301      	movs	r3, #1
 8026858:	2600      	movs	r6, #0
 802685a:	9307      	str	r3, [sp, #28]
 802685c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802685e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026860:	46b1      	mov	r9, r6
 8026862:	4635      	mov	r5, r6
 8026864:	220a      	movs	r2, #10
 8026866:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026868:	7804      	ldrb	r4, [r0, #0]
 802686a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802686e:	b2d9      	uxtb	r1, r3
 8026870:	2909      	cmp	r1, #9
 8026872:	d929      	bls.n	80268c8 <_strtod_l+0x1b0>
 8026874:	494a      	ldr	r1, [pc, #296]	@ (80269a0 <_strtod_l+0x288>)
 8026876:	2201      	movs	r2, #1
 8026878:	f7fe fb05 	bl	8024e86 <strncmp>
 802687c:	b378      	cbz	r0, 80268de <_strtod_l+0x1c6>
 802687e:	2000      	movs	r0, #0
 8026880:	4622      	mov	r2, r4
 8026882:	462b      	mov	r3, r5
 8026884:	4607      	mov	r7, r0
 8026886:	9006      	str	r0, [sp, #24]
 8026888:	2a65      	cmp	r2, #101	@ 0x65
 802688a:	d001      	beq.n	8026890 <_strtod_l+0x178>
 802688c:	2a45      	cmp	r2, #69	@ 0x45
 802688e:	d117      	bne.n	80268c0 <_strtod_l+0x1a8>
 8026890:	b91b      	cbnz	r3, 802689a <_strtod_l+0x182>
 8026892:	9b07      	ldr	r3, [sp, #28]
 8026894:	4303      	orrs	r3, r0
 8026896:	d096      	beq.n	80267c6 <_strtod_l+0xae>
 8026898:	2300      	movs	r3, #0
 802689a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 802689e:	f108 0201 	add.w	r2, r8, #1
 80268a2:	9211      	str	r2, [sp, #68]	@ 0x44
 80268a4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80268a8:	2a2b      	cmp	r2, #43	@ 0x2b
 80268aa:	d06b      	beq.n	8026984 <_strtod_l+0x26c>
 80268ac:	2a2d      	cmp	r2, #45	@ 0x2d
 80268ae:	d071      	beq.n	8026994 <_strtod_l+0x27c>
 80268b0:	f04f 0e00 	mov.w	lr, #0
 80268b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80268b8:	2c09      	cmp	r4, #9
 80268ba:	d979      	bls.n	80269b0 <_strtod_l+0x298>
 80268bc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80268c0:	2400      	movs	r4, #0
 80268c2:	e094      	b.n	80269ee <_strtod_l+0x2d6>
 80268c4:	2300      	movs	r3, #0
 80268c6:	e7c7      	b.n	8026858 <_strtod_l+0x140>
 80268c8:	2d08      	cmp	r5, #8
 80268ca:	f100 0001 	add.w	r0, r0, #1
 80268ce:	bfd4      	ite	le
 80268d0:	fb02 3909 	mlale	r9, r2, r9, r3
 80268d4:	fb02 3606 	mlagt	r6, r2, r6, r3
 80268d8:	3501      	adds	r5, #1
 80268da:	9011      	str	r0, [sp, #68]	@ 0x44
 80268dc:	e7c3      	b.n	8026866 <_strtod_l+0x14e>
 80268de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80268e0:	1c5a      	adds	r2, r3, #1
 80268e2:	9211      	str	r2, [sp, #68]	@ 0x44
 80268e4:	785a      	ldrb	r2, [r3, #1]
 80268e6:	b375      	cbz	r5, 8026946 <_strtod_l+0x22e>
 80268e8:	4607      	mov	r7, r0
 80268ea:	462b      	mov	r3, r5
 80268ec:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80268f0:	2909      	cmp	r1, #9
 80268f2:	d913      	bls.n	802691c <_strtod_l+0x204>
 80268f4:	2101      	movs	r1, #1
 80268f6:	9106      	str	r1, [sp, #24]
 80268f8:	e7c6      	b.n	8026888 <_strtod_l+0x170>
 80268fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80268fc:	1c5a      	adds	r2, r3, #1
 80268fe:	9211      	str	r2, [sp, #68]	@ 0x44
 8026900:	785a      	ldrb	r2, [r3, #1]
 8026902:	3001      	adds	r0, #1
 8026904:	2a30      	cmp	r2, #48	@ 0x30
 8026906:	d0f8      	beq.n	80268fa <_strtod_l+0x1e2>
 8026908:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802690c:	2b08      	cmp	r3, #8
 802690e:	f200 8476 	bhi.w	80271fe <_strtod_l+0xae6>
 8026912:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026914:	930a      	str	r3, [sp, #40]	@ 0x28
 8026916:	4607      	mov	r7, r0
 8026918:	2000      	movs	r0, #0
 802691a:	4603      	mov	r3, r0
 802691c:	3a30      	subs	r2, #48	@ 0x30
 802691e:	f100 0101 	add.w	r1, r0, #1
 8026922:	d023      	beq.n	802696c <_strtod_l+0x254>
 8026924:	440f      	add	r7, r1
 8026926:	eb00 0c03 	add.w	ip, r0, r3
 802692a:	4619      	mov	r1, r3
 802692c:	240a      	movs	r4, #10
 802692e:	4561      	cmp	r1, ip
 8026930:	d10b      	bne.n	802694a <_strtod_l+0x232>
 8026932:	1c5c      	adds	r4, r3, #1
 8026934:	4403      	add	r3, r0
 8026936:	2b08      	cmp	r3, #8
 8026938:	4404      	add	r4, r0
 802693a:	dc11      	bgt.n	8026960 <_strtod_l+0x248>
 802693c:	230a      	movs	r3, #10
 802693e:	fb03 2909 	mla	r9, r3, r9, r2
 8026942:	2100      	movs	r1, #0
 8026944:	e013      	b.n	802696e <_strtod_l+0x256>
 8026946:	4628      	mov	r0, r5
 8026948:	e7dc      	b.n	8026904 <_strtod_l+0x1ec>
 802694a:	2908      	cmp	r1, #8
 802694c:	f101 0101 	add.w	r1, r1, #1
 8026950:	dc02      	bgt.n	8026958 <_strtod_l+0x240>
 8026952:	fb04 f909 	mul.w	r9, r4, r9
 8026956:	e7ea      	b.n	802692e <_strtod_l+0x216>
 8026958:	2910      	cmp	r1, #16
 802695a:	bfd8      	it	le
 802695c:	4366      	mulle	r6, r4
 802695e:	e7e6      	b.n	802692e <_strtod_l+0x216>
 8026960:	2b0f      	cmp	r3, #15
 8026962:	dcee      	bgt.n	8026942 <_strtod_l+0x22a>
 8026964:	230a      	movs	r3, #10
 8026966:	fb03 2606 	mla	r6, r3, r6, r2
 802696a:	e7ea      	b.n	8026942 <_strtod_l+0x22a>
 802696c:	461c      	mov	r4, r3
 802696e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026970:	1c5a      	adds	r2, r3, #1
 8026972:	9211      	str	r2, [sp, #68]	@ 0x44
 8026974:	785a      	ldrb	r2, [r3, #1]
 8026976:	4608      	mov	r0, r1
 8026978:	4623      	mov	r3, r4
 802697a:	e7b7      	b.n	80268ec <_strtod_l+0x1d4>
 802697c:	2301      	movs	r3, #1
 802697e:	2700      	movs	r7, #0
 8026980:	9306      	str	r3, [sp, #24]
 8026982:	e786      	b.n	8026892 <_strtod_l+0x17a>
 8026984:	f04f 0e00 	mov.w	lr, #0
 8026988:	f108 0202 	add.w	r2, r8, #2
 802698c:	9211      	str	r2, [sp, #68]	@ 0x44
 802698e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026992:	e78f      	b.n	80268b4 <_strtod_l+0x19c>
 8026994:	f04f 0e01 	mov.w	lr, #1
 8026998:	e7f6      	b.n	8026988 <_strtod_l+0x270>
 802699a:	bf00      	nop
 802699c:	080387f0 	.word	0x080387f0
 80269a0:	080387d8 	.word	0x080387d8
 80269a4:	7ff00000 	.word	0x7ff00000
 80269a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80269aa:	1c54      	adds	r4, r2, #1
 80269ac:	9411      	str	r4, [sp, #68]	@ 0x44
 80269ae:	7852      	ldrb	r2, [r2, #1]
 80269b0:	2a30      	cmp	r2, #48	@ 0x30
 80269b2:	d0f9      	beq.n	80269a8 <_strtod_l+0x290>
 80269b4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80269b8:	2c08      	cmp	r4, #8
 80269ba:	d881      	bhi.n	80268c0 <_strtod_l+0x1a8>
 80269bc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80269c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80269c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80269c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80269c6:	1c51      	adds	r1, r2, #1
 80269c8:	9111      	str	r1, [sp, #68]	@ 0x44
 80269ca:	7852      	ldrb	r2, [r2, #1]
 80269cc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80269d0:	2c09      	cmp	r4, #9
 80269d2:	d938      	bls.n	8026a46 <_strtod_l+0x32e>
 80269d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80269d6:	1b0c      	subs	r4, r1, r4
 80269d8:	2c08      	cmp	r4, #8
 80269da:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80269de:	dc02      	bgt.n	80269e6 <_strtod_l+0x2ce>
 80269e0:	4564      	cmp	r4, ip
 80269e2:	bfa8      	it	ge
 80269e4:	4664      	movge	r4, ip
 80269e6:	f1be 0f00 	cmp.w	lr, #0
 80269ea:	d000      	beq.n	80269ee <_strtod_l+0x2d6>
 80269ec:	4264      	negs	r4, r4
 80269ee:	2b00      	cmp	r3, #0
 80269f0:	d14e      	bne.n	8026a90 <_strtod_l+0x378>
 80269f2:	9b07      	ldr	r3, [sp, #28]
 80269f4:	4318      	orrs	r0, r3
 80269f6:	f47f aeca 	bne.w	802678e <_strtod_l+0x76>
 80269fa:	9b06      	ldr	r3, [sp, #24]
 80269fc:	2b00      	cmp	r3, #0
 80269fe:	f47f aee2 	bne.w	80267c6 <_strtod_l+0xae>
 8026a02:	2a69      	cmp	r2, #105	@ 0x69
 8026a04:	d027      	beq.n	8026a56 <_strtod_l+0x33e>
 8026a06:	dc24      	bgt.n	8026a52 <_strtod_l+0x33a>
 8026a08:	2a49      	cmp	r2, #73	@ 0x49
 8026a0a:	d024      	beq.n	8026a56 <_strtod_l+0x33e>
 8026a0c:	2a4e      	cmp	r2, #78	@ 0x4e
 8026a0e:	f47f aeda 	bne.w	80267c6 <_strtod_l+0xae>
 8026a12:	4997      	ldr	r1, [pc, #604]	@ (8026c70 <_strtod_l+0x558>)
 8026a14:	a811      	add	r0, sp, #68	@ 0x44
 8026a16:	f001 faf1 	bl	8027ffc <__match>
 8026a1a:	2800      	cmp	r0, #0
 8026a1c:	f43f aed3 	beq.w	80267c6 <_strtod_l+0xae>
 8026a20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a22:	781b      	ldrb	r3, [r3, #0]
 8026a24:	2b28      	cmp	r3, #40	@ 0x28
 8026a26:	d12d      	bne.n	8026a84 <_strtod_l+0x36c>
 8026a28:	4992      	ldr	r1, [pc, #584]	@ (8026c74 <_strtod_l+0x55c>)
 8026a2a:	aa14      	add	r2, sp, #80	@ 0x50
 8026a2c:	a811      	add	r0, sp, #68	@ 0x44
 8026a2e:	f001 faf9 	bl	8028024 <__hexnan>
 8026a32:	2805      	cmp	r0, #5
 8026a34:	d126      	bne.n	8026a84 <_strtod_l+0x36c>
 8026a36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026a38:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8026a3c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8026a40:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8026a44:	e6a3      	b.n	802678e <_strtod_l+0x76>
 8026a46:	240a      	movs	r4, #10
 8026a48:	fb04 2c0c 	mla	ip, r4, ip, r2
 8026a4c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8026a50:	e7b8      	b.n	80269c4 <_strtod_l+0x2ac>
 8026a52:	2a6e      	cmp	r2, #110	@ 0x6e
 8026a54:	e7db      	b.n	8026a0e <_strtod_l+0x2f6>
 8026a56:	4988      	ldr	r1, [pc, #544]	@ (8026c78 <_strtod_l+0x560>)
 8026a58:	a811      	add	r0, sp, #68	@ 0x44
 8026a5a:	f001 facf 	bl	8027ffc <__match>
 8026a5e:	2800      	cmp	r0, #0
 8026a60:	f43f aeb1 	beq.w	80267c6 <_strtod_l+0xae>
 8026a64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a66:	4985      	ldr	r1, [pc, #532]	@ (8026c7c <_strtod_l+0x564>)
 8026a68:	3b01      	subs	r3, #1
 8026a6a:	a811      	add	r0, sp, #68	@ 0x44
 8026a6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8026a6e:	f001 fac5 	bl	8027ffc <__match>
 8026a72:	b910      	cbnz	r0, 8026a7a <_strtod_l+0x362>
 8026a74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a76:	3301      	adds	r3, #1
 8026a78:	9311      	str	r3, [sp, #68]	@ 0x44
 8026a7a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8026c90 <_strtod_l+0x578>
 8026a7e:	f04f 0a00 	mov.w	sl, #0
 8026a82:	e684      	b.n	802678e <_strtod_l+0x76>
 8026a84:	487e      	ldr	r0, [pc, #504]	@ (8026c80 <_strtod_l+0x568>)
 8026a86:	f001 f827 	bl	8027ad8 <nan>
 8026a8a:	ec5b ab10 	vmov	sl, fp, d0
 8026a8e:	e67e      	b.n	802678e <_strtod_l+0x76>
 8026a90:	ee07 9a90 	vmov	s15, r9
 8026a94:	1be2      	subs	r2, r4, r7
 8026a96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026a9a:	2d00      	cmp	r5, #0
 8026a9c:	bf08      	it	eq
 8026a9e:	461d      	moveq	r5, r3
 8026aa0:	2b10      	cmp	r3, #16
 8026aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8026aa4:	461a      	mov	r2, r3
 8026aa6:	bfa8      	it	ge
 8026aa8:	2210      	movge	r2, #16
 8026aaa:	2b09      	cmp	r3, #9
 8026aac:	ec5b ab17 	vmov	sl, fp, d7
 8026ab0:	dc15      	bgt.n	8026ade <_strtod_l+0x3c6>
 8026ab2:	1be1      	subs	r1, r4, r7
 8026ab4:	2900      	cmp	r1, #0
 8026ab6:	f43f ae6a 	beq.w	802678e <_strtod_l+0x76>
 8026aba:	eba4 0107 	sub.w	r1, r4, r7
 8026abe:	dd72      	ble.n	8026ba6 <_strtod_l+0x48e>
 8026ac0:	2916      	cmp	r1, #22
 8026ac2:	dc59      	bgt.n	8026b78 <_strtod_l+0x460>
 8026ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8026c84 <_strtod_l+0x56c>)
 8026ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026acc:	ed93 7b00 	vldr	d7, [r3]
 8026ad0:	ec4b ab16 	vmov	d6, sl, fp
 8026ad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026ad8:	ec5b ab17 	vmov	sl, fp, d7
 8026adc:	e657      	b.n	802678e <_strtod_l+0x76>
 8026ade:	4969      	ldr	r1, [pc, #420]	@ (8026c84 <_strtod_l+0x56c>)
 8026ae0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8026ae4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8026ae8:	ee06 6a90 	vmov	s13, r6
 8026aec:	2b0f      	cmp	r3, #15
 8026aee:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8026af2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026af6:	ec5b ab16 	vmov	sl, fp, d6
 8026afa:	ddda      	ble.n	8026ab2 <_strtod_l+0x39a>
 8026afc:	1a9a      	subs	r2, r3, r2
 8026afe:	1be1      	subs	r1, r4, r7
 8026b00:	440a      	add	r2, r1
 8026b02:	2a00      	cmp	r2, #0
 8026b04:	f340 8094 	ble.w	8026c30 <_strtod_l+0x518>
 8026b08:	f012 000f 	ands.w	r0, r2, #15
 8026b0c:	d00a      	beq.n	8026b24 <_strtod_l+0x40c>
 8026b0e:	495d      	ldr	r1, [pc, #372]	@ (8026c84 <_strtod_l+0x56c>)
 8026b10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026b14:	ed91 7b00 	vldr	d7, [r1]
 8026b18:	ec4b ab16 	vmov	d6, sl, fp
 8026b1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026b20:	ec5b ab17 	vmov	sl, fp, d7
 8026b24:	f032 020f 	bics.w	r2, r2, #15
 8026b28:	d073      	beq.n	8026c12 <_strtod_l+0x4fa>
 8026b2a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8026b2e:	dd47      	ble.n	8026bc0 <_strtod_l+0x4a8>
 8026b30:	2400      	movs	r4, #0
 8026b32:	4625      	mov	r5, r4
 8026b34:	9407      	str	r4, [sp, #28]
 8026b36:	4626      	mov	r6, r4
 8026b38:	9a05      	ldr	r2, [sp, #20]
 8026b3a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8026c90 <_strtod_l+0x578>
 8026b3e:	2322      	movs	r3, #34	@ 0x22
 8026b40:	6013      	str	r3, [r2, #0]
 8026b42:	f04f 0a00 	mov.w	sl, #0
 8026b46:	9b07      	ldr	r3, [sp, #28]
 8026b48:	2b00      	cmp	r3, #0
 8026b4a:	f43f ae20 	beq.w	802678e <_strtod_l+0x76>
 8026b4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026b50:	9805      	ldr	r0, [sp, #20]
 8026b52:	f7ff f955 	bl	8025e00 <_Bfree>
 8026b56:	9805      	ldr	r0, [sp, #20]
 8026b58:	4631      	mov	r1, r6
 8026b5a:	f7ff f951 	bl	8025e00 <_Bfree>
 8026b5e:	9805      	ldr	r0, [sp, #20]
 8026b60:	4629      	mov	r1, r5
 8026b62:	f7ff f94d 	bl	8025e00 <_Bfree>
 8026b66:	9907      	ldr	r1, [sp, #28]
 8026b68:	9805      	ldr	r0, [sp, #20]
 8026b6a:	f7ff f949 	bl	8025e00 <_Bfree>
 8026b6e:	9805      	ldr	r0, [sp, #20]
 8026b70:	4621      	mov	r1, r4
 8026b72:	f7ff f945 	bl	8025e00 <_Bfree>
 8026b76:	e60a      	b.n	802678e <_strtod_l+0x76>
 8026b78:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8026b7c:	1be0      	subs	r0, r4, r7
 8026b7e:	4281      	cmp	r1, r0
 8026b80:	dbbc      	blt.n	8026afc <_strtod_l+0x3e4>
 8026b82:	4a40      	ldr	r2, [pc, #256]	@ (8026c84 <_strtod_l+0x56c>)
 8026b84:	f1c3 030f 	rsb	r3, r3, #15
 8026b88:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8026b8c:	ed91 7b00 	vldr	d7, [r1]
 8026b90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026b92:	ec4b ab16 	vmov	d6, sl, fp
 8026b96:	1acb      	subs	r3, r1, r3
 8026b98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8026b9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026ba0:	ed92 6b00 	vldr	d6, [r2]
 8026ba4:	e796      	b.n	8026ad4 <_strtod_l+0x3bc>
 8026ba6:	3116      	adds	r1, #22
 8026ba8:	dba8      	blt.n	8026afc <_strtod_l+0x3e4>
 8026baa:	4b36      	ldr	r3, [pc, #216]	@ (8026c84 <_strtod_l+0x56c>)
 8026bac:	1b3c      	subs	r4, r7, r4
 8026bae:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8026bb2:	ed94 7b00 	vldr	d7, [r4]
 8026bb6:	ec4b ab16 	vmov	d6, sl, fp
 8026bba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026bbe:	e78b      	b.n	8026ad8 <_strtod_l+0x3c0>
 8026bc0:	2000      	movs	r0, #0
 8026bc2:	ec4b ab17 	vmov	d7, sl, fp
 8026bc6:	4e30      	ldr	r6, [pc, #192]	@ (8026c88 <_strtod_l+0x570>)
 8026bc8:	1112      	asrs	r2, r2, #4
 8026bca:	4601      	mov	r1, r0
 8026bcc:	2a01      	cmp	r2, #1
 8026bce:	dc23      	bgt.n	8026c18 <_strtod_l+0x500>
 8026bd0:	b108      	cbz	r0, 8026bd6 <_strtod_l+0x4be>
 8026bd2:	ec5b ab17 	vmov	sl, fp, d7
 8026bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8026c88 <_strtod_l+0x570>)
 8026bd8:	482c      	ldr	r0, [pc, #176]	@ (8026c8c <_strtod_l+0x574>)
 8026bda:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8026bde:	ed92 7b00 	vldr	d7, [r2]
 8026be2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8026be6:	ec4b ab16 	vmov	d6, sl, fp
 8026bea:	4a29      	ldr	r2, [pc, #164]	@ (8026c90 <_strtod_l+0x578>)
 8026bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026bf0:	ee17 1a90 	vmov	r1, s15
 8026bf4:	400a      	ands	r2, r1
 8026bf6:	4282      	cmp	r2, r0
 8026bf8:	ec5b ab17 	vmov	sl, fp, d7
 8026bfc:	d898      	bhi.n	8026b30 <_strtod_l+0x418>
 8026bfe:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8026c02:	4282      	cmp	r2, r0
 8026c04:	bf86      	itte	hi
 8026c06:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8026c94 <_strtod_l+0x57c>
 8026c0a:	f04f 3aff 	movhi.w	sl, #4294967295
 8026c0e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8026c12:	2200      	movs	r2, #0
 8026c14:	9206      	str	r2, [sp, #24]
 8026c16:	e076      	b.n	8026d06 <_strtod_l+0x5ee>
 8026c18:	f012 0f01 	tst.w	r2, #1
 8026c1c:	d004      	beq.n	8026c28 <_strtod_l+0x510>
 8026c1e:	ed96 6b00 	vldr	d6, [r6]
 8026c22:	2001      	movs	r0, #1
 8026c24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026c28:	3101      	adds	r1, #1
 8026c2a:	1052      	asrs	r2, r2, #1
 8026c2c:	3608      	adds	r6, #8
 8026c2e:	e7cd      	b.n	8026bcc <_strtod_l+0x4b4>
 8026c30:	d0ef      	beq.n	8026c12 <_strtod_l+0x4fa>
 8026c32:	4252      	negs	r2, r2
 8026c34:	f012 000f 	ands.w	r0, r2, #15
 8026c38:	d00a      	beq.n	8026c50 <_strtod_l+0x538>
 8026c3a:	4912      	ldr	r1, [pc, #72]	@ (8026c84 <_strtod_l+0x56c>)
 8026c3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026c40:	ed91 7b00 	vldr	d7, [r1]
 8026c44:	ec4b ab16 	vmov	d6, sl, fp
 8026c48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026c4c:	ec5b ab17 	vmov	sl, fp, d7
 8026c50:	1112      	asrs	r2, r2, #4
 8026c52:	d0de      	beq.n	8026c12 <_strtod_l+0x4fa>
 8026c54:	2a1f      	cmp	r2, #31
 8026c56:	dd1f      	ble.n	8026c98 <_strtod_l+0x580>
 8026c58:	2400      	movs	r4, #0
 8026c5a:	4625      	mov	r5, r4
 8026c5c:	9407      	str	r4, [sp, #28]
 8026c5e:	4626      	mov	r6, r4
 8026c60:	9a05      	ldr	r2, [sp, #20]
 8026c62:	2322      	movs	r3, #34	@ 0x22
 8026c64:	f04f 0a00 	mov.w	sl, #0
 8026c68:	f04f 0b00 	mov.w	fp, #0
 8026c6c:	6013      	str	r3, [r2, #0]
 8026c6e:	e76a      	b.n	8026b46 <_strtod_l+0x42e>
 8026c70:	080385dd 	.word	0x080385dd
 8026c74:	080387dc 	.word	0x080387dc
 8026c78:	080385d5 	.word	0x080385d5
 8026c7c:	0803860c 	.word	0x0803860c
 8026c80:	0803845f 	.word	0x0803845f
 8026c84:	08038710 	.word	0x08038710
 8026c88:	080386e8 	.word	0x080386e8
 8026c8c:	7ca00000 	.word	0x7ca00000
 8026c90:	7ff00000 	.word	0x7ff00000
 8026c94:	7fefffff 	.word	0x7fefffff
 8026c98:	f012 0110 	ands.w	r1, r2, #16
 8026c9c:	bf18      	it	ne
 8026c9e:	216a      	movne	r1, #106	@ 0x6a
 8026ca0:	9106      	str	r1, [sp, #24]
 8026ca2:	ec4b ab17 	vmov	d7, sl, fp
 8026ca6:	49b0      	ldr	r1, [pc, #704]	@ (8026f68 <_strtod_l+0x850>)
 8026ca8:	2000      	movs	r0, #0
 8026caa:	07d6      	lsls	r6, r2, #31
 8026cac:	d504      	bpl.n	8026cb8 <_strtod_l+0x5a0>
 8026cae:	ed91 6b00 	vldr	d6, [r1]
 8026cb2:	2001      	movs	r0, #1
 8026cb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026cb8:	1052      	asrs	r2, r2, #1
 8026cba:	f101 0108 	add.w	r1, r1, #8
 8026cbe:	d1f4      	bne.n	8026caa <_strtod_l+0x592>
 8026cc0:	b108      	cbz	r0, 8026cc6 <_strtod_l+0x5ae>
 8026cc2:	ec5b ab17 	vmov	sl, fp, d7
 8026cc6:	9a06      	ldr	r2, [sp, #24]
 8026cc8:	b1b2      	cbz	r2, 8026cf8 <_strtod_l+0x5e0>
 8026cca:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8026cce:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8026cd2:	2a00      	cmp	r2, #0
 8026cd4:	4658      	mov	r0, fp
 8026cd6:	dd0f      	ble.n	8026cf8 <_strtod_l+0x5e0>
 8026cd8:	2a1f      	cmp	r2, #31
 8026cda:	dd55      	ble.n	8026d88 <_strtod_l+0x670>
 8026cdc:	2a34      	cmp	r2, #52	@ 0x34
 8026cde:	bfde      	ittt	le
 8026ce0:	f04f 32ff 	movle.w	r2, #4294967295
 8026ce4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8026ce8:	408a      	lslle	r2, r1
 8026cea:	f04f 0a00 	mov.w	sl, #0
 8026cee:	bfcc      	ite	gt
 8026cf0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8026cf4:	ea02 0b00 	andle.w	fp, r2, r0
 8026cf8:	ec4b ab17 	vmov	d7, sl, fp
 8026cfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d04:	d0a8      	beq.n	8026c58 <_strtod_l+0x540>
 8026d06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026d08:	9805      	ldr	r0, [sp, #20]
 8026d0a:	f8cd 9000 	str.w	r9, [sp]
 8026d0e:	462a      	mov	r2, r5
 8026d10:	f7ff f8de 	bl	8025ed0 <__s2b>
 8026d14:	9007      	str	r0, [sp, #28]
 8026d16:	2800      	cmp	r0, #0
 8026d18:	f43f af0a 	beq.w	8026b30 <_strtod_l+0x418>
 8026d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d1e:	1b3f      	subs	r7, r7, r4
 8026d20:	2b00      	cmp	r3, #0
 8026d22:	bfb4      	ite	lt
 8026d24:	463b      	movlt	r3, r7
 8026d26:	2300      	movge	r3, #0
 8026d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d2c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8026f58 <_strtod_l+0x840>
 8026d30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026d34:	2400      	movs	r4, #0
 8026d36:	930d      	str	r3, [sp, #52]	@ 0x34
 8026d38:	4625      	mov	r5, r4
 8026d3a:	9b07      	ldr	r3, [sp, #28]
 8026d3c:	9805      	ldr	r0, [sp, #20]
 8026d3e:	6859      	ldr	r1, [r3, #4]
 8026d40:	f7ff f81e 	bl	8025d80 <_Balloc>
 8026d44:	4606      	mov	r6, r0
 8026d46:	2800      	cmp	r0, #0
 8026d48:	f43f aef6 	beq.w	8026b38 <_strtod_l+0x420>
 8026d4c:	9b07      	ldr	r3, [sp, #28]
 8026d4e:	691a      	ldr	r2, [r3, #16]
 8026d50:	ec4b ab19 	vmov	d9, sl, fp
 8026d54:	3202      	adds	r2, #2
 8026d56:	f103 010c 	add.w	r1, r3, #12
 8026d5a:	0092      	lsls	r2, r2, #2
 8026d5c:	300c      	adds	r0, #12
 8026d5e:	f7fe f9c8 	bl	80250f2 <memcpy>
 8026d62:	eeb0 0b49 	vmov.f64	d0, d9
 8026d66:	9805      	ldr	r0, [sp, #20]
 8026d68:	aa14      	add	r2, sp, #80	@ 0x50
 8026d6a:	a913      	add	r1, sp, #76	@ 0x4c
 8026d6c:	f7ff fbec 	bl	8026548 <__d2b>
 8026d70:	9012      	str	r0, [sp, #72]	@ 0x48
 8026d72:	2800      	cmp	r0, #0
 8026d74:	f43f aee0 	beq.w	8026b38 <_strtod_l+0x420>
 8026d78:	9805      	ldr	r0, [sp, #20]
 8026d7a:	2101      	movs	r1, #1
 8026d7c:	f7ff f93e 	bl	8025ffc <__i2b>
 8026d80:	4605      	mov	r5, r0
 8026d82:	b940      	cbnz	r0, 8026d96 <_strtod_l+0x67e>
 8026d84:	2500      	movs	r5, #0
 8026d86:	e6d7      	b.n	8026b38 <_strtod_l+0x420>
 8026d88:	f04f 31ff 	mov.w	r1, #4294967295
 8026d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8026d90:	ea02 0a0a 	and.w	sl, r2, sl
 8026d94:	e7b0      	b.n	8026cf8 <_strtod_l+0x5e0>
 8026d96:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8026d98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026d9a:	2f00      	cmp	r7, #0
 8026d9c:	bfab      	itete	ge
 8026d9e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8026da0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8026da2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8026da6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8026daa:	bfac      	ite	ge
 8026dac:	eb07 0903 	addge.w	r9, r7, r3
 8026db0:	eba3 0807 	sublt.w	r8, r3, r7
 8026db4:	9b06      	ldr	r3, [sp, #24]
 8026db6:	1aff      	subs	r7, r7, r3
 8026db8:	4417      	add	r7, r2
 8026dba:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8026dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8026f6c <_strtod_l+0x854>)
 8026dc0:	3f01      	subs	r7, #1
 8026dc2:	4297      	cmp	r7, r2
 8026dc4:	da51      	bge.n	8026e6a <_strtod_l+0x752>
 8026dc6:	1bd1      	subs	r1, r2, r7
 8026dc8:	291f      	cmp	r1, #31
 8026dca:	eba3 0301 	sub.w	r3, r3, r1
 8026dce:	f04f 0201 	mov.w	r2, #1
 8026dd2:	dc3e      	bgt.n	8026e52 <_strtod_l+0x73a>
 8026dd4:	408a      	lsls	r2, r1
 8026dd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8026dd8:	2200      	movs	r2, #0
 8026dda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026ddc:	eb09 0703 	add.w	r7, r9, r3
 8026de0:	4498      	add	r8, r3
 8026de2:	9b06      	ldr	r3, [sp, #24]
 8026de4:	45b9      	cmp	r9, r7
 8026de6:	4498      	add	r8, r3
 8026de8:	464b      	mov	r3, r9
 8026dea:	bfa8      	it	ge
 8026dec:	463b      	movge	r3, r7
 8026dee:	4543      	cmp	r3, r8
 8026df0:	bfa8      	it	ge
 8026df2:	4643      	movge	r3, r8
 8026df4:	2b00      	cmp	r3, #0
 8026df6:	bfc2      	ittt	gt
 8026df8:	1aff      	subgt	r7, r7, r3
 8026dfa:	eba8 0803 	subgt.w	r8, r8, r3
 8026dfe:	eba9 0903 	subgt.w	r9, r9, r3
 8026e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026e04:	2b00      	cmp	r3, #0
 8026e06:	dd16      	ble.n	8026e36 <_strtod_l+0x71e>
 8026e08:	4629      	mov	r1, r5
 8026e0a:	9805      	ldr	r0, [sp, #20]
 8026e0c:	461a      	mov	r2, r3
 8026e0e:	f7ff f9b5 	bl	802617c <__pow5mult>
 8026e12:	4605      	mov	r5, r0
 8026e14:	2800      	cmp	r0, #0
 8026e16:	d0b5      	beq.n	8026d84 <_strtod_l+0x66c>
 8026e18:	4601      	mov	r1, r0
 8026e1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026e1c:	9805      	ldr	r0, [sp, #20]
 8026e1e:	f7ff f903 	bl	8026028 <__multiply>
 8026e22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026e24:	2800      	cmp	r0, #0
 8026e26:	f43f ae87 	beq.w	8026b38 <_strtod_l+0x420>
 8026e2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026e2c:	9805      	ldr	r0, [sp, #20]
 8026e2e:	f7fe ffe7 	bl	8025e00 <_Bfree>
 8026e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026e34:	9312      	str	r3, [sp, #72]	@ 0x48
 8026e36:	2f00      	cmp	r7, #0
 8026e38:	dc1b      	bgt.n	8026e72 <_strtod_l+0x75a>
 8026e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e3c:	2b00      	cmp	r3, #0
 8026e3e:	dd21      	ble.n	8026e84 <_strtod_l+0x76c>
 8026e40:	4631      	mov	r1, r6
 8026e42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026e44:	9805      	ldr	r0, [sp, #20]
 8026e46:	f7ff f999 	bl	802617c <__pow5mult>
 8026e4a:	4606      	mov	r6, r0
 8026e4c:	b9d0      	cbnz	r0, 8026e84 <_strtod_l+0x76c>
 8026e4e:	2600      	movs	r6, #0
 8026e50:	e672      	b.n	8026b38 <_strtod_l+0x420>
 8026e52:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8026e56:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8026e5a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8026e5e:	37e2      	adds	r7, #226	@ 0xe2
 8026e60:	fa02 f107 	lsl.w	r1, r2, r7
 8026e64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e66:	920c      	str	r2, [sp, #48]	@ 0x30
 8026e68:	e7b8      	b.n	8026ddc <_strtod_l+0x6c4>
 8026e6a:	2200      	movs	r2, #0
 8026e6c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026e6e:	2201      	movs	r2, #1
 8026e70:	e7f9      	b.n	8026e66 <_strtod_l+0x74e>
 8026e72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026e74:	9805      	ldr	r0, [sp, #20]
 8026e76:	463a      	mov	r2, r7
 8026e78:	f7ff f9da 	bl	8026230 <__lshift>
 8026e7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8026e7e:	2800      	cmp	r0, #0
 8026e80:	d1db      	bne.n	8026e3a <_strtod_l+0x722>
 8026e82:	e659      	b.n	8026b38 <_strtod_l+0x420>
 8026e84:	f1b8 0f00 	cmp.w	r8, #0
 8026e88:	dd07      	ble.n	8026e9a <_strtod_l+0x782>
 8026e8a:	4631      	mov	r1, r6
 8026e8c:	9805      	ldr	r0, [sp, #20]
 8026e8e:	4642      	mov	r2, r8
 8026e90:	f7ff f9ce 	bl	8026230 <__lshift>
 8026e94:	4606      	mov	r6, r0
 8026e96:	2800      	cmp	r0, #0
 8026e98:	d0d9      	beq.n	8026e4e <_strtod_l+0x736>
 8026e9a:	f1b9 0f00 	cmp.w	r9, #0
 8026e9e:	dd08      	ble.n	8026eb2 <_strtod_l+0x79a>
 8026ea0:	4629      	mov	r1, r5
 8026ea2:	9805      	ldr	r0, [sp, #20]
 8026ea4:	464a      	mov	r2, r9
 8026ea6:	f7ff f9c3 	bl	8026230 <__lshift>
 8026eaa:	4605      	mov	r5, r0
 8026eac:	2800      	cmp	r0, #0
 8026eae:	f43f ae43 	beq.w	8026b38 <_strtod_l+0x420>
 8026eb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026eb4:	9805      	ldr	r0, [sp, #20]
 8026eb6:	4632      	mov	r2, r6
 8026eb8:	f7ff fa42 	bl	8026340 <__mdiff>
 8026ebc:	4604      	mov	r4, r0
 8026ebe:	2800      	cmp	r0, #0
 8026ec0:	f43f ae3a 	beq.w	8026b38 <_strtod_l+0x420>
 8026ec4:	2300      	movs	r3, #0
 8026ec6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8026eca:	60c3      	str	r3, [r0, #12]
 8026ecc:	4629      	mov	r1, r5
 8026ece:	f7ff fa1b 	bl	8026308 <__mcmp>
 8026ed2:	2800      	cmp	r0, #0
 8026ed4:	da4e      	bge.n	8026f74 <_strtod_l+0x85c>
 8026ed6:	ea58 080a 	orrs.w	r8, r8, sl
 8026eda:	d174      	bne.n	8026fc6 <_strtod_l+0x8ae>
 8026edc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026ee0:	2b00      	cmp	r3, #0
 8026ee2:	d170      	bne.n	8026fc6 <_strtod_l+0x8ae>
 8026ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026ee8:	0d1b      	lsrs	r3, r3, #20
 8026eea:	051b      	lsls	r3, r3, #20
 8026eec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8026ef0:	d969      	bls.n	8026fc6 <_strtod_l+0x8ae>
 8026ef2:	6963      	ldr	r3, [r4, #20]
 8026ef4:	b913      	cbnz	r3, 8026efc <_strtod_l+0x7e4>
 8026ef6:	6923      	ldr	r3, [r4, #16]
 8026ef8:	2b01      	cmp	r3, #1
 8026efa:	dd64      	ble.n	8026fc6 <_strtod_l+0x8ae>
 8026efc:	4621      	mov	r1, r4
 8026efe:	2201      	movs	r2, #1
 8026f00:	9805      	ldr	r0, [sp, #20]
 8026f02:	f7ff f995 	bl	8026230 <__lshift>
 8026f06:	4629      	mov	r1, r5
 8026f08:	4604      	mov	r4, r0
 8026f0a:	f7ff f9fd 	bl	8026308 <__mcmp>
 8026f0e:	2800      	cmp	r0, #0
 8026f10:	dd59      	ble.n	8026fc6 <_strtod_l+0x8ae>
 8026f12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026f16:	9a06      	ldr	r2, [sp, #24]
 8026f18:	0d1b      	lsrs	r3, r3, #20
 8026f1a:	051b      	lsls	r3, r3, #20
 8026f1c:	2a00      	cmp	r2, #0
 8026f1e:	d070      	beq.n	8027002 <_strtod_l+0x8ea>
 8026f20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8026f24:	d86d      	bhi.n	8027002 <_strtod_l+0x8ea>
 8026f26:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8026f2a:	f67f ae99 	bls.w	8026c60 <_strtod_l+0x548>
 8026f2e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8026f60 <_strtod_l+0x848>
 8026f32:	ec4b ab16 	vmov	d6, sl, fp
 8026f36:	4b0e      	ldr	r3, [pc, #56]	@ (8026f70 <_strtod_l+0x858>)
 8026f38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8026f3c:	ee17 2a90 	vmov	r2, s15
 8026f40:	4013      	ands	r3, r2
 8026f42:	ec5b ab17 	vmov	sl, fp, d7
 8026f46:	2b00      	cmp	r3, #0
 8026f48:	f47f ae01 	bne.w	8026b4e <_strtod_l+0x436>
 8026f4c:	9a05      	ldr	r2, [sp, #20]
 8026f4e:	2322      	movs	r3, #34	@ 0x22
 8026f50:	6013      	str	r3, [r2, #0]
 8026f52:	e5fc      	b.n	8026b4e <_strtod_l+0x436>
 8026f54:	f3af 8000 	nop.w
 8026f58:	ffc00000 	.word	0xffc00000
 8026f5c:	41dfffff 	.word	0x41dfffff
 8026f60:	00000000 	.word	0x00000000
 8026f64:	39500000 	.word	0x39500000
 8026f68:	08038808 	.word	0x08038808
 8026f6c:	fffffc02 	.word	0xfffffc02
 8026f70:	7ff00000 	.word	0x7ff00000
 8026f74:	46d9      	mov	r9, fp
 8026f76:	d15d      	bne.n	8027034 <_strtod_l+0x91c>
 8026f78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026f7c:	f1b8 0f00 	cmp.w	r8, #0
 8026f80:	d02a      	beq.n	8026fd8 <_strtod_l+0x8c0>
 8026f82:	4aab      	ldr	r2, [pc, #684]	@ (8027230 <_strtod_l+0xb18>)
 8026f84:	4293      	cmp	r3, r2
 8026f86:	d12a      	bne.n	8026fde <_strtod_l+0x8c6>
 8026f88:	9b06      	ldr	r3, [sp, #24]
 8026f8a:	4652      	mov	r2, sl
 8026f8c:	b1fb      	cbz	r3, 8026fce <_strtod_l+0x8b6>
 8026f8e:	4ba9      	ldr	r3, [pc, #676]	@ (8027234 <_strtod_l+0xb1c>)
 8026f90:	ea0b 0303 	and.w	r3, fp, r3
 8026f94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8026f98:	f04f 31ff 	mov.w	r1, #4294967295
 8026f9c:	d81a      	bhi.n	8026fd4 <_strtod_l+0x8bc>
 8026f9e:	0d1b      	lsrs	r3, r3, #20
 8026fa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8026fa8:	429a      	cmp	r2, r3
 8026faa:	d118      	bne.n	8026fde <_strtod_l+0x8c6>
 8026fac:	4ba2      	ldr	r3, [pc, #648]	@ (8027238 <_strtod_l+0xb20>)
 8026fae:	4599      	cmp	r9, r3
 8026fb0:	d102      	bne.n	8026fb8 <_strtod_l+0x8a0>
 8026fb2:	3201      	adds	r2, #1
 8026fb4:	f43f adc0 	beq.w	8026b38 <_strtod_l+0x420>
 8026fb8:	4b9e      	ldr	r3, [pc, #632]	@ (8027234 <_strtod_l+0xb1c>)
 8026fba:	ea09 0303 	and.w	r3, r9, r3
 8026fbe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8026fc2:	f04f 0a00 	mov.w	sl, #0
 8026fc6:	9b06      	ldr	r3, [sp, #24]
 8026fc8:	2b00      	cmp	r3, #0
 8026fca:	d1b0      	bne.n	8026f2e <_strtod_l+0x816>
 8026fcc:	e5bf      	b.n	8026b4e <_strtod_l+0x436>
 8026fce:	f04f 33ff 	mov.w	r3, #4294967295
 8026fd2:	e7e9      	b.n	8026fa8 <_strtod_l+0x890>
 8026fd4:	460b      	mov	r3, r1
 8026fd6:	e7e7      	b.n	8026fa8 <_strtod_l+0x890>
 8026fd8:	ea53 030a 	orrs.w	r3, r3, sl
 8026fdc:	d099      	beq.n	8026f12 <_strtod_l+0x7fa>
 8026fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fe0:	b1c3      	cbz	r3, 8027014 <_strtod_l+0x8fc>
 8026fe2:	ea13 0f09 	tst.w	r3, r9
 8026fe6:	d0ee      	beq.n	8026fc6 <_strtod_l+0x8ae>
 8026fe8:	9a06      	ldr	r2, [sp, #24]
 8026fea:	4650      	mov	r0, sl
 8026fec:	4659      	mov	r1, fp
 8026fee:	f1b8 0f00 	cmp.w	r8, #0
 8026ff2:	d013      	beq.n	802701c <_strtod_l+0x904>
 8026ff4:	f7ff fb73 	bl	80266de <sulp>
 8026ff8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8026ffc:	ec5b ab17 	vmov	sl, fp, d7
 8027000:	e7e1      	b.n	8026fc6 <_strtod_l+0x8ae>
 8027002:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8027006:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802700a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802700e:	f04f 3aff 	mov.w	sl, #4294967295
 8027012:	e7d8      	b.n	8026fc6 <_strtod_l+0x8ae>
 8027014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027016:	ea13 0f0a 	tst.w	r3, sl
 802701a:	e7e4      	b.n	8026fe6 <_strtod_l+0x8ce>
 802701c:	f7ff fb5f 	bl	80266de <sulp>
 8027020:	ee39 0b40 	vsub.f64	d0, d9, d0
 8027024:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8027028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802702c:	ec5b ab10 	vmov	sl, fp, d0
 8027030:	d1c9      	bne.n	8026fc6 <_strtod_l+0x8ae>
 8027032:	e615      	b.n	8026c60 <_strtod_l+0x548>
 8027034:	4629      	mov	r1, r5
 8027036:	4620      	mov	r0, r4
 8027038:	f7ff fade 	bl	80265f8 <__ratio>
 802703c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8027040:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027048:	d85d      	bhi.n	8027106 <_strtod_l+0x9ee>
 802704a:	f1b8 0f00 	cmp.w	r8, #0
 802704e:	d164      	bne.n	802711a <_strtod_l+0xa02>
 8027050:	f1ba 0f00 	cmp.w	sl, #0
 8027054:	d14b      	bne.n	80270ee <_strtod_l+0x9d6>
 8027056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802705a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802705e:	2b00      	cmp	r3, #0
 8027060:	d160      	bne.n	8027124 <_strtod_l+0xa0c>
 8027062:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8027066:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802706e:	d401      	bmi.n	8027074 <_strtod_l+0x95c>
 8027070:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027074:	eeb1 ab48 	vneg.f64	d10, d8
 8027078:	486e      	ldr	r0, [pc, #440]	@ (8027234 <_strtod_l+0xb1c>)
 802707a:	4970      	ldr	r1, [pc, #448]	@ (802723c <_strtod_l+0xb24>)
 802707c:	ea09 0700 	and.w	r7, r9, r0
 8027080:	428f      	cmp	r7, r1
 8027082:	ec53 2b1a 	vmov	r2, r3, d10
 8027086:	d17d      	bne.n	8027184 <_strtod_l+0xa6c>
 8027088:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 802708c:	ec4b ab1c 	vmov	d12, sl, fp
 8027090:	eeb0 0b4c 	vmov.f64	d0, d12
 8027094:	f7ff f9e8 	bl	8026468 <__ulp>
 8027098:	4866      	ldr	r0, [pc, #408]	@ (8027234 <_strtod_l+0xb1c>)
 802709a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 802709e:	ee1c 3a90 	vmov	r3, s25
 80270a2:	4a67      	ldr	r2, [pc, #412]	@ (8027240 <_strtod_l+0xb28>)
 80270a4:	ea03 0100 	and.w	r1, r3, r0
 80270a8:	4291      	cmp	r1, r2
 80270aa:	ec5b ab1c 	vmov	sl, fp, d12
 80270ae:	d93c      	bls.n	802712a <_strtod_l+0xa12>
 80270b0:	ee19 2a90 	vmov	r2, s19
 80270b4:	4b60      	ldr	r3, [pc, #384]	@ (8027238 <_strtod_l+0xb20>)
 80270b6:	429a      	cmp	r2, r3
 80270b8:	d104      	bne.n	80270c4 <_strtod_l+0x9ac>
 80270ba:	ee19 3a10 	vmov	r3, s18
 80270be:	3301      	adds	r3, #1
 80270c0:	f43f ad3a 	beq.w	8026b38 <_strtod_l+0x420>
 80270c4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8027238 <_strtod_l+0xb20>
 80270c8:	f04f 3aff 	mov.w	sl, #4294967295
 80270cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80270ce:	9805      	ldr	r0, [sp, #20]
 80270d0:	f7fe fe96 	bl	8025e00 <_Bfree>
 80270d4:	9805      	ldr	r0, [sp, #20]
 80270d6:	4631      	mov	r1, r6
 80270d8:	f7fe fe92 	bl	8025e00 <_Bfree>
 80270dc:	9805      	ldr	r0, [sp, #20]
 80270de:	4629      	mov	r1, r5
 80270e0:	f7fe fe8e 	bl	8025e00 <_Bfree>
 80270e4:	9805      	ldr	r0, [sp, #20]
 80270e6:	4621      	mov	r1, r4
 80270e8:	f7fe fe8a 	bl	8025e00 <_Bfree>
 80270ec:	e625      	b.n	8026d3a <_strtod_l+0x622>
 80270ee:	f1ba 0f01 	cmp.w	sl, #1
 80270f2:	d103      	bne.n	80270fc <_strtod_l+0x9e4>
 80270f4:	f1bb 0f00 	cmp.w	fp, #0
 80270f8:	f43f adb2 	beq.w	8026c60 <_strtod_l+0x548>
 80270fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8027100:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8027104:	e7b8      	b.n	8027078 <_strtod_l+0x960>
 8027106:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802710a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802710e:	f1b8 0f00 	cmp.w	r8, #0
 8027112:	d0af      	beq.n	8027074 <_strtod_l+0x95c>
 8027114:	eeb0 ab48 	vmov.f64	d10, d8
 8027118:	e7ae      	b.n	8027078 <_strtod_l+0x960>
 802711a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 802711e:	eeb0 8b4a 	vmov.f64	d8, d10
 8027122:	e7a9      	b.n	8027078 <_strtod_l+0x960>
 8027124:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8027128:	e7a6      	b.n	8027078 <_strtod_l+0x960>
 802712a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802712e:	9b06      	ldr	r3, [sp, #24]
 8027130:	46d9      	mov	r9, fp
 8027132:	2b00      	cmp	r3, #0
 8027134:	d1ca      	bne.n	80270cc <_strtod_l+0x9b4>
 8027136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802713a:	0d1b      	lsrs	r3, r3, #20
 802713c:	051b      	lsls	r3, r3, #20
 802713e:	429f      	cmp	r7, r3
 8027140:	d1c4      	bne.n	80270cc <_strtod_l+0x9b4>
 8027142:	ec51 0b18 	vmov	r0, r1, d8
 8027146:	f7d9 fb57 	bl	80007f8 <__aeabi_d2lz>
 802714a:	f7d9 fabf 	bl	80006cc <__aeabi_l2d>
 802714e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8027152:	ec41 0b17 	vmov	d7, r0, r1
 8027156:	ea49 090a 	orr.w	r9, r9, sl
 802715a:	ea59 0908 	orrs.w	r9, r9, r8
 802715e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8027162:	d03c      	beq.n	80271de <_strtod_l+0xac6>
 8027164:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8027218 <_strtod_l+0xb00>
 8027168:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027170:	f53f aced 	bmi.w	8026b4e <_strtod_l+0x436>
 8027174:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8027220 <_strtod_l+0xb08>
 8027178:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027180:	dda4      	ble.n	80270cc <_strtod_l+0x9b4>
 8027182:	e4e4      	b.n	8026b4e <_strtod_l+0x436>
 8027184:	9906      	ldr	r1, [sp, #24]
 8027186:	b1e1      	cbz	r1, 80271c2 <_strtod_l+0xaaa>
 8027188:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 802718c:	d819      	bhi.n	80271c2 <_strtod_l+0xaaa>
 802718e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8027192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027196:	d811      	bhi.n	80271bc <_strtod_l+0xaa4>
 8027198:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 802719c:	ee18 3a10 	vmov	r3, s16
 80271a0:	2b01      	cmp	r3, #1
 80271a2:	bf38      	it	cc
 80271a4:	2301      	movcc	r3, #1
 80271a6:	ee08 3a10 	vmov	s16, r3
 80271aa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80271ae:	f1b8 0f00 	cmp.w	r8, #0
 80271b2:	d111      	bne.n	80271d8 <_strtod_l+0xac0>
 80271b4:	eeb1 7b48 	vneg.f64	d7, d8
 80271b8:	ec53 2b17 	vmov	r2, r3, d7
 80271bc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80271c0:	1bcb      	subs	r3, r1, r7
 80271c2:	eeb0 0b49 	vmov.f64	d0, d9
 80271c6:	ec43 2b1a 	vmov	d10, r2, r3
 80271ca:	f7ff f94d 	bl	8026468 <__ulp>
 80271ce:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80271d2:	ec5b ab19 	vmov	sl, fp, d9
 80271d6:	e7aa      	b.n	802712e <_strtod_l+0xa16>
 80271d8:	eeb0 7b48 	vmov.f64	d7, d8
 80271dc:	e7ec      	b.n	80271b8 <_strtod_l+0xaa0>
 80271de:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8027228 <_strtod_l+0xb10>
 80271e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80271e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271ea:	f57f af6f 	bpl.w	80270cc <_strtod_l+0x9b4>
 80271ee:	e4ae      	b.n	8026b4e <_strtod_l+0x436>
 80271f0:	2300      	movs	r3, #0
 80271f2:	9308      	str	r3, [sp, #32]
 80271f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80271f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80271f8:	6013      	str	r3, [r2, #0]
 80271fa:	f7ff bacc 	b.w	8026796 <_strtod_l+0x7e>
 80271fe:	2a65      	cmp	r2, #101	@ 0x65
 8027200:	f43f abbc 	beq.w	802697c <_strtod_l+0x264>
 8027204:	2a45      	cmp	r2, #69	@ 0x45
 8027206:	f43f abb9 	beq.w	802697c <_strtod_l+0x264>
 802720a:	2301      	movs	r3, #1
 802720c:	9306      	str	r3, [sp, #24]
 802720e:	f7ff bbf0 	b.w	80269f2 <_strtod_l+0x2da>
 8027212:	bf00      	nop
 8027214:	f3af 8000 	nop.w
 8027218:	94a03595 	.word	0x94a03595
 802721c:	3fdfffff 	.word	0x3fdfffff
 8027220:	35afe535 	.word	0x35afe535
 8027224:	3fe00000 	.word	0x3fe00000
 8027228:	94a03595 	.word	0x94a03595
 802722c:	3fcfffff 	.word	0x3fcfffff
 8027230:	000fffff 	.word	0x000fffff
 8027234:	7ff00000 	.word	0x7ff00000
 8027238:	7fefffff 	.word	0x7fefffff
 802723c:	7fe00000 	.word	0x7fe00000
 8027240:	7c9fffff 	.word	0x7c9fffff

08027244 <_strtod_r>:
 8027244:	4b01      	ldr	r3, [pc, #4]	@ (802724c <_strtod_r+0x8>)
 8027246:	f7ff ba67 	b.w	8026718 <_strtod_l>
 802724a:	bf00      	nop
 802724c:	24000800 	.word	0x24000800

08027250 <__ssputs_r>:
 8027250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027254:	688e      	ldr	r6, [r1, #8]
 8027256:	461f      	mov	r7, r3
 8027258:	42be      	cmp	r6, r7
 802725a:	680b      	ldr	r3, [r1, #0]
 802725c:	4682      	mov	sl, r0
 802725e:	460c      	mov	r4, r1
 8027260:	4690      	mov	r8, r2
 8027262:	d82d      	bhi.n	80272c0 <__ssputs_r+0x70>
 8027264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027268:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802726c:	d026      	beq.n	80272bc <__ssputs_r+0x6c>
 802726e:	6965      	ldr	r5, [r4, #20]
 8027270:	6909      	ldr	r1, [r1, #16]
 8027272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027276:	eba3 0901 	sub.w	r9, r3, r1
 802727a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802727e:	1c7b      	adds	r3, r7, #1
 8027280:	444b      	add	r3, r9
 8027282:	106d      	asrs	r5, r5, #1
 8027284:	429d      	cmp	r5, r3
 8027286:	bf38      	it	cc
 8027288:	461d      	movcc	r5, r3
 802728a:	0553      	lsls	r3, r2, #21
 802728c:	d527      	bpl.n	80272de <__ssputs_r+0x8e>
 802728e:	4629      	mov	r1, r5
 8027290:	f7fc fb82 	bl	8023998 <_malloc_r>
 8027294:	4606      	mov	r6, r0
 8027296:	b360      	cbz	r0, 80272f2 <__ssputs_r+0xa2>
 8027298:	6921      	ldr	r1, [r4, #16]
 802729a:	464a      	mov	r2, r9
 802729c:	f7fd ff29 	bl	80250f2 <memcpy>
 80272a0:	89a3      	ldrh	r3, [r4, #12]
 80272a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80272a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80272aa:	81a3      	strh	r3, [r4, #12]
 80272ac:	6126      	str	r6, [r4, #16]
 80272ae:	6165      	str	r5, [r4, #20]
 80272b0:	444e      	add	r6, r9
 80272b2:	eba5 0509 	sub.w	r5, r5, r9
 80272b6:	6026      	str	r6, [r4, #0]
 80272b8:	60a5      	str	r5, [r4, #8]
 80272ba:	463e      	mov	r6, r7
 80272bc:	42be      	cmp	r6, r7
 80272be:	d900      	bls.n	80272c2 <__ssputs_r+0x72>
 80272c0:	463e      	mov	r6, r7
 80272c2:	6820      	ldr	r0, [r4, #0]
 80272c4:	4632      	mov	r2, r6
 80272c6:	4641      	mov	r1, r8
 80272c8:	f7fd fdae 	bl	8024e28 <memmove>
 80272cc:	68a3      	ldr	r3, [r4, #8]
 80272ce:	1b9b      	subs	r3, r3, r6
 80272d0:	60a3      	str	r3, [r4, #8]
 80272d2:	6823      	ldr	r3, [r4, #0]
 80272d4:	4433      	add	r3, r6
 80272d6:	6023      	str	r3, [r4, #0]
 80272d8:	2000      	movs	r0, #0
 80272da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80272de:	462a      	mov	r2, r5
 80272e0:	f000 ff4d 	bl	802817e <_realloc_r>
 80272e4:	4606      	mov	r6, r0
 80272e6:	2800      	cmp	r0, #0
 80272e8:	d1e0      	bne.n	80272ac <__ssputs_r+0x5c>
 80272ea:	6921      	ldr	r1, [r4, #16]
 80272ec:	4650      	mov	r0, sl
 80272ee:	f7fe fcfd 	bl	8025cec <_free_r>
 80272f2:	230c      	movs	r3, #12
 80272f4:	f8ca 3000 	str.w	r3, [sl]
 80272f8:	89a3      	ldrh	r3, [r4, #12]
 80272fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80272fe:	81a3      	strh	r3, [r4, #12]
 8027300:	f04f 30ff 	mov.w	r0, #4294967295
 8027304:	e7e9      	b.n	80272da <__ssputs_r+0x8a>
	...

08027308 <_svfiprintf_r>:
 8027308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802730c:	4698      	mov	r8, r3
 802730e:	898b      	ldrh	r3, [r1, #12]
 8027310:	061b      	lsls	r3, r3, #24
 8027312:	b09d      	sub	sp, #116	@ 0x74
 8027314:	4607      	mov	r7, r0
 8027316:	460d      	mov	r5, r1
 8027318:	4614      	mov	r4, r2
 802731a:	d510      	bpl.n	802733e <_svfiprintf_r+0x36>
 802731c:	690b      	ldr	r3, [r1, #16]
 802731e:	b973      	cbnz	r3, 802733e <_svfiprintf_r+0x36>
 8027320:	2140      	movs	r1, #64	@ 0x40
 8027322:	f7fc fb39 	bl	8023998 <_malloc_r>
 8027326:	6028      	str	r0, [r5, #0]
 8027328:	6128      	str	r0, [r5, #16]
 802732a:	b930      	cbnz	r0, 802733a <_svfiprintf_r+0x32>
 802732c:	230c      	movs	r3, #12
 802732e:	603b      	str	r3, [r7, #0]
 8027330:	f04f 30ff 	mov.w	r0, #4294967295
 8027334:	b01d      	add	sp, #116	@ 0x74
 8027336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802733a:	2340      	movs	r3, #64	@ 0x40
 802733c:	616b      	str	r3, [r5, #20]
 802733e:	2300      	movs	r3, #0
 8027340:	9309      	str	r3, [sp, #36]	@ 0x24
 8027342:	2320      	movs	r3, #32
 8027344:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027348:	f8cd 800c 	str.w	r8, [sp, #12]
 802734c:	2330      	movs	r3, #48	@ 0x30
 802734e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80274ec <_svfiprintf_r+0x1e4>
 8027352:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027356:	f04f 0901 	mov.w	r9, #1
 802735a:	4623      	mov	r3, r4
 802735c:	469a      	mov	sl, r3
 802735e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027362:	b10a      	cbz	r2, 8027368 <_svfiprintf_r+0x60>
 8027364:	2a25      	cmp	r2, #37	@ 0x25
 8027366:	d1f9      	bne.n	802735c <_svfiprintf_r+0x54>
 8027368:	ebba 0b04 	subs.w	fp, sl, r4
 802736c:	d00b      	beq.n	8027386 <_svfiprintf_r+0x7e>
 802736e:	465b      	mov	r3, fp
 8027370:	4622      	mov	r2, r4
 8027372:	4629      	mov	r1, r5
 8027374:	4638      	mov	r0, r7
 8027376:	f7ff ff6b 	bl	8027250 <__ssputs_r>
 802737a:	3001      	adds	r0, #1
 802737c:	f000 80a7 	beq.w	80274ce <_svfiprintf_r+0x1c6>
 8027380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027382:	445a      	add	r2, fp
 8027384:	9209      	str	r2, [sp, #36]	@ 0x24
 8027386:	f89a 3000 	ldrb.w	r3, [sl]
 802738a:	2b00      	cmp	r3, #0
 802738c:	f000 809f 	beq.w	80274ce <_svfiprintf_r+0x1c6>
 8027390:	2300      	movs	r3, #0
 8027392:	f04f 32ff 	mov.w	r2, #4294967295
 8027396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802739a:	f10a 0a01 	add.w	sl, sl, #1
 802739e:	9304      	str	r3, [sp, #16]
 80273a0:	9307      	str	r3, [sp, #28]
 80273a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80273a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80273a8:	4654      	mov	r4, sl
 80273aa:	2205      	movs	r2, #5
 80273ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80273b0:	484e      	ldr	r0, [pc, #312]	@ (80274ec <_svfiprintf_r+0x1e4>)
 80273b2:	f7d8 ffa5 	bl	8000300 <memchr>
 80273b6:	9a04      	ldr	r2, [sp, #16]
 80273b8:	b9d8      	cbnz	r0, 80273f2 <_svfiprintf_r+0xea>
 80273ba:	06d0      	lsls	r0, r2, #27
 80273bc:	bf44      	itt	mi
 80273be:	2320      	movmi	r3, #32
 80273c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80273c4:	0711      	lsls	r1, r2, #28
 80273c6:	bf44      	itt	mi
 80273c8:	232b      	movmi	r3, #43	@ 0x2b
 80273ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80273ce:	f89a 3000 	ldrb.w	r3, [sl]
 80273d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80273d4:	d015      	beq.n	8027402 <_svfiprintf_r+0xfa>
 80273d6:	9a07      	ldr	r2, [sp, #28]
 80273d8:	4654      	mov	r4, sl
 80273da:	2000      	movs	r0, #0
 80273dc:	f04f 0c0a 	mov.w	ip, #10
 80273e0:	4621      	mov	r1, r4
 80273e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80273e6:	3b30      	subs	r3, #48	@ 0x30
 80273e8:	2b09      	cmp	r3, #9
 80273ea:	d94b      	bls.n	8027484 <_svfiprintf_r+0x17c>
 80273ec:	b1b0      	cbz	r0, 802741c <_svfiprintf_r+0x114>
 80273ee:	9207      	str	r2, [sp, #28]
 80273f0:	e014      	b.n	802741c <_svfiprintf_r+0x114>
 80273f2:	eba0 0308 	sub.w	r3, r0, r8
 80273f6:	fa09 f303 	lsl.w	r3, r9, r3
 80273fa:	4313      	orrs	r3, r2
 80273fc:	9304      	str	r3, [sp, #16]
 80273fe:	46a2      	mov	sl, r4
 8027400:	e7d2      	b.n	80273a8 <_svfiprintf_r+0xa0>
 8027402:	9b03      	ldr	r3, [sp, #12]
 8027404:	1d19      	adds	r1, r3, #4
 8027406:	681b      	ldr	r3, [r3, #0]
 8027408:	9103      	str	r1, [sp, #12]
 802740a:	2b00      	cmp	r3, #0
 802740c:	bfbb      	ittet	lt
 802740e:	425b      	neglt	r3, r3
 8027410:	f042 0202 	orrlt.w	r2, r2, #2
 8027414:	9307      	strge	r3, [sp, #28]
 8027416:	9307      	strlt	r3, [sp, #28]
 8027418:	bfb8      	it	lt
 802741a:	9204      	strlt	r2, [sp, #16]
 802741c:	7823      	ldrb	r3, [r4, #0]
 802741e:	2b2e      	cmp	r3, #46	@ 0x2e
 8027420:	d10a      	bne.n	8027438 <_svfiprintf_r+0x130>
 8027422:	7863      	ldrb	r3, [r4, #1]
 8027424:	2b2a      	cmp	r3, #42	@ 0x2a
 8027426:	d132      	bne.n	802748e <_svfiprintf_r+0x186>
 8027428:	9b03      	ldr	r3, [sp, #12]
 802742a:	1d1a      	adds	r2, r3, #4
 802742c:	681b      	ldr	r3, [r3, #0]
 802742e:	9203      	str	r2, [sp, #12]
 8027430:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027434:	3402      	adds	r4, #2
 8027436:	9305      	str	r3, [sp, #20]
 8027438:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80274fc <_svfiprintf_r+0x1f4>
 802743c:	7821      	ldrb	r1, [r4, #0]
 802743e:	2203      	movs	r2, #3
 8027440:	4650      	mov	r0, sl
 8027442:	f7d8 ff5d 	bl	8000300 <memchr>
 8027446:	b138      	cbz	r0, 8027458 <_svfiprintf_r+0x150>
 8027448:	9b04      	ldr	r3, [sp, #16]
 802744a:	eba0 000a 	sub.w	r0, r0, sl
 802744e:	2240      	movs	r2, #64	@ 0x40
 8027450:	4082      	lsls	r2, r0
 8027452:	4313      	orrs	r3, r2
 8027454:	3401      	adds	r4, #1
 8027456:	9304      	str	r3, [sp, #16]
 8027458:	f814 1b01 	ldrb.w	r1, [r4], #1
 802745c:	4824      	ldr	r0, [pc, #144]	@ (80274f0 <_svfiprintf_r+0x1e8>)
 802745e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027462:	2206      	movs	r2, #6
 8027464:	f7d8 ff4c 	bl	8000300 <memchr>
 8027468:	2800      	cmp	r0, #0
 802746a:	d036      	beq.n	80274da <_svfiprintf_r+0x1d2>
 802746c:	4b21      	ldr	r3, [pc, #132]	@ (80274f4 <_svfiprintf_r+0x1ec>)
 802746e:	bb1b      	cbnz	r3, 80274b8 <_svfiprintf_r+0x1b0>
 8027470:	9b03      	ldr	r3, [sp, #12]
 8027472:	3307      	adds	r3, #7
 8027474:	f023 0307 	bic.w	r3, r3, #7
 8027478:	3308      	adds	r3, #8
 802747a:	9303      	str	r3, [sp, #12]
 802747c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802747e:	4433      	add	r3, r6
 8027480:	9309      	str	r3, [sp, #36]	@ 0x24
 8027482:	e76a      	b.n	802735a <_svfiprintf_r+0x52>
 8027484:	fb0c 3202 	mla	r2, ip, r2, r3
 8027488:	460c      	mov	r4, r1
 802748a:	2001      	movs	r0, #1
 802748c:	e7a8      	b.n	80273e0 <_svfiprintf_r+0xd8>
 802748e:	2300      	movs	r3, #0
 8027490:	3401      	adds	r4, #1
 8027492:	9305      	str	r3, [sp, #20]
 8027494:	4619      	mov	r1, r3
 8027496:	f04f 0c0a 	mov.w	ip, #10
 802749a:	4620      	mov	r0, r4
 802749c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80274a0:	3a30      	subs	r2, #48	@ 0x30
 80274a2:	2a09      	cmp	r2, #9
 80274a4:	d903      	bls.n	80274ae <_svfiprintf_r+0x1a6>
 80274a6:	2b00      	cmp	r3, #0
 80274a8:	d0c6      	beq.n	8027438 <_svfiprintf_r+0x130>
 80274aa:	9105      	str	r1, [sp, #20]
 80274ac:	e7c4      	b.n	8027438 <_svfiprintf_r+0x130>
 80274ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80274b2:	4604      	mov	r4, r0
 80274b4:	2301      	movs	r3, #1
 80274b6:	e7f0      	b.n	802749a <_svfiprintf_r+0x192>
 80274b8:	ab03      	add	r3, sp, #12
 80274ba:	9300      	str	r3, [sp, #0]
 80274bc:	462a      	mov	r2, r5
 80274be:	4b0e      	ldr	r3, [pc, #56]	@ (80274f8 <_svfiprintf_r+0x1f0>)
 80274c0:	a904      	add	r1, sp, #16
 80274c2:	4638      	mov	r0, r7
 80274c4:	f7fc fc74 	bl	8023db0 <_printf_float>
 80274c8:	1c42      	adds	r2, r0, #1
 80274ca:	4606      	mov	r6, r0
 80274cc:	d1d6      	bne.n	802747c <_svfiprintf_r+0x174>
 80274ce:	89ab      	ldrh	r3, [r5, #12]
 80274d0:	065b      	lsls	r3, r3, #25
 80274d2:	f53f af2d 	bmi.w	8027330 <_svfiprintf_r+0x28>
 80274d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80274d8:	e72c      	b.n	8027334 <_svfiprintf_r+0x2c>
 80274da:	ab03      	add	r3, sp, #12
 80274dc:	9300      	str	r3, [sp, #0]
 80274de:	462a      	mov	r2, r5
 80274e0:	4b05      	ldr	r3, [pc, #20]	@ (80274f8 <_svfiprintf_r+0x1f0>)
 80274e2:	a904      	add	r1, sp, #16
 80274e4:	4638      	mov	r0, r7
 80274e6:	f7fc feeb 	bl	80242c0 <_printf_i>
 80274ea:	e7ed      	b.n	80274c8 <_svfiprintf_r+0x1c0>
 80274ec:	08038830 	.word	0x08038830
 80274f0:	0803883a 	.word	0x0803883a
 80274f4:	08023db1 	.word	0x08023db1
 80274f8:	08027251 	.word	0x08027251
 80274fc:	08038836 	.word	0x08038836

08027500 <__sfputc_r>:
 8027500:	6893      	ldr	r3, [r2, #8]
 8027502:	3b01      	subs	r3, #1
 8027504:	2b00      	cmp	r3, #0
 8027506:	b410      	push	{r4}
 8027508:	6093      	str	r3, [r2, #8]
 802750a:	da08      	bge.n	802751e <__sfputc_r+0x1e>
 802750c:	6994      	ldr	r4, [r2, #24]
 802750e:	42a3      	cmp	r3, r4
 8027510:	db01      	blt.n	8027516 <__sfputc_r+0x16>
 8027512:	290a      	cmp	r1, #10
 8027514:	d103      	bne.n	802751e <__sfputc_r+0x1e>
 8027516:	f85d 4b04 	ldr.w	r4, [sp], #4
 802751a:	f7fd bbe0 	b.w	8024cde <__swbuf_r>
 802751e:	6813      	ldr	r3, [r2, #0]
 8027520:	1c58      	adds	r0, r3, #1
 8027522:	6010      	str	r0, [r2, #0]
 8027524:	7019      	strb	r1, [r3, #0]
 8027526:	4608      	mov	r0, r1
 8027528:	f85d 4b04 	ldr.w	r4, [sp], #4
 802752c:	4770      	bx	lr

0802752e <__sfputs_r>:
 802752e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027530:	4606      	mov	r6, r0
 8027532:	460f      	mov	r7, r1
 8027534:	4614      	mov	r4, r2
 8027536:	18d5      	adds	r5, r2, r3
 8027538:	42ac      	cmp	r4, r5
 802753a:	d101      	bne.n	8027540 <__sfputs_r+0x12>
 802753c:	2000      	movs	r0, #0
 802753e:	e007      	b.n	8027550 <__sfputs_r+0x22>
 8027540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027544:	463a      	mov	r2, r7
 8027546:	4630      	mov	r0, r6
 8027548:	f7ff ffda 	bl	8027500 <__sfputc_r>
 802754c:	1c43      	adds	r3, r0, #1
 802754e:	d1f3      	bne.n	8027538 <__sfputs_r+0xa>
 8027550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027554 <_vfiprintf_r>:
 8027554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027558:	460d      	mov	r5, r1
 802755a:	b09d      	sub	sp, #116	@ 0x74
 802755c:	4614      	mov	r4, r2
 802755e:	4698      	mov	r8, r3
 8027560:	4606      	mov	r6, r0
 8027562:	b118      	cbz	r0, 802756c <_vfiprintf_r+0x18>
 8027564:	6a03      	ldr	r3, [r0, #32]
 8027566:	b90b      	cbnz	r3, 802756c <_vfiprintf_r+0x18>
 8027568:	f7fd fa62 	bl	8024a30 <__sinit>
 802756c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802756e:	07d9      	lsls	r1, r3, #31
 8027570:	d405      	bmi.n	802757e <_vfiprintf_r+0x2a>
 8027572:	89ab      	ldrh	r3, [r5, #12]
 8027574:	059a      	lsls	r2, r3, #22
 8027576:	d402      	bmi.n	802757e <_vfiprintf_r+0x2a>
 8027578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802757a:	f7fd fdb0 	bl	80250de <__retarget_lock_acquire_recursive>
 802757e:	89ab      	ldrh	r3, [r5, #12]
 8027580:	071b      	lsls	r3, r3, #28
 8027582:	d501      	bpl.n	8027588 <_vfiprintf_r+0x34>
 8027584:	692b      	ldr	r3, [r5, #16]
 8027586:	b99b      	cbnz	r3, 80275b0 <_vfiprintf_r+0x5c>
 8027588:	4629      	mov	r1, r5
 802758a:	4630      	mov	r0, r6
 802758c:	f7fd fbe6 	bl	8024d5c <__swsetup_r>
 8027590:	b170      	cbz	r0, 80275b0 <_vfiprintf_r+0x5c>
 8027592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027594:	07dc      	lsls	r4, r3, #31
 8027596:	d504      	bpl.n	80275a2 <_vfiprintf_r+0x4e>
 8027598:	f04f 30ff 	mov.w	r0, #4294967295
 802759c:	b01d      	add	sp, #116	@ 0x74
 802759e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275a2:	89ab      	ldrh	r3, [r5, #12]
 80275a4:	0598      	lsls	r0, r3, #22
 80275a6:	d4f7      	bmi.n	8027598 <_vfiprintf_r+0x44>
 80275a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80275aa:	f7fd fd99 	bl	80250e0 <__retarget_lock_release_recursive>
 80275ae:	e7f3      	b.n	8027598 <_vfiprintf_r+0x44>
 80275b0:	2300      	movs	r3, #0
 80275b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80275b4:	2320      	movs	r3, #32
 80275b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80275ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80275be:	2330      	movs	r3, #48	@ 0x30
 80275c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8027770 <_vfiprintf_r+0x21c>
 80275c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80275c8:	f04f 0901 	mov.w	r9, #1
 80275cc:	4623      	mov	r3, r4
 80275ce:	469a      	mov	sl, r3
 80275d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80275d4:	b10a      	cbz	r2, 80275da <_vfiprintf_r+0x86>
 80275d6:	2a25      	cmp	r2, #37	@ 0x25
 80275d8:	d1f9      	bne.n	80275ce <_vfiprintf_r+0x7a>
 80275da:	ebba 0b04 	subs.w	fp, sl, r4
 80275de:	d00b      	beq.n	80275f8 <_vfiprintf_r+0xa4>
 80275e0:	465b      	mov	r3, fp
 80275e2:	4622      	mov	r2, r4
 80275e4:	4629      	mov	r1, r5
 80275e6:	4630      	mov	r0, r6
 80275e8:	f7ff ffa1 	bl	802752e <__sfputs_r>
 80275ec:	3001      	adds	r0, #1
 80275ee:	f000 80a7 	beq.w	8027740 <_vfiprintf_r+0x1ec>
 80275f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80275f4:	445a      	add	r2, fp
 80275f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80275f8:	f89a 3000 	ldrb.w	r3, [sl]
 80275fc:	2b00      	cmp	r3, #0
 80275fe:	f000 809f 	beq.w	8027740 <_vfiprintf_r+0x1ec>
 8027602:	2300      	movs	r3, #0
 8027604:	f04f 32ff 	mov.w	r2, #4294967295
 8027608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802760c:	f10a 0a01 	add.w	sl, sl, #1
 8027610:	9304      	str	r3, [sp, #16]
 8027612:	9307      	str	r3, [sp, #28]
 8027614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027618:	931a      	str	r3, [sp, #104]	@ 0x68
 802761a:	4654      	mov	r4, sl
 802761c:	2205      	movs	r2, #5
 802761e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027622:	4853      	ldr	r0, [pc, #332]	@ (8027770 <_vfiprintf_r+0x21c>)
 8027624:	f7d8 fe6c 	bl	8000300 <memchr>
 8027628:	9a04      	ldr	r2, [sp, #16]
 802762a:	b9d8      	cbnz	r0, 8027664 <_vfiprintf_r+0x110>
 802762c:	06d1      	lsls	r1, r2, #27
 802762e:	bf44      	itt	mi
 8027630:	2320      	movmi	r3, #32
 8027632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027636:	0713      	lsls	r3, r2, #28
 8027638:	bf44      	itt	mi
 802763a:	232b      	movmi	r3, #43	@ 0x2b
 802763c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027640:	f89a 3000 	ldrb.w	r3, [sl]
 8027644:	2b2a      	cmp	r3, #42	@ 0x2a
 8027646:	d015      	beq.n	8027674 <_vfiprintf_r+0x120>
 8027648:	9a07      	ldr	r2, [sp, #28]
 802764a:	4654      	mov	r4, sl
 802764c:	2000      	movs	r0, #0
 802764e:	f04f 0c0a 	mov.w	ip, #10
 8027652:	4621      	mov	r1, r4
 8027654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027658:	3b30      	subs	r3, #48	@ 0x30
 802765a:	2b09      	cmp	r3, #9
 802765c:	d94b      	bls.n	80276f6 <_vfiprintf_r+0x1a2>
 802765e:	b1b0      	cbz	r0, 802768e <_vfiprintf_r+0x13a>
 8027660:	9207      	str	r2, [sp, #28]
 8027662:	e014      	b.n	802768e <_vfiprintf_r+0x13a>
 8027664:	eba0 0308 	sub.w	r3, r0, r8
 8027668:	fa09 f303 	lsl.w	r3, r9, r3
 802766c:	4313      	orrs	r3, r2
 802766e:	9304      	str	r3, [sp, #16]
 8027670:	46a2      	mov	sl, r4
 8027672:	e7d2      	b.n	802761a <_vfiprintf_r+0xc6>
 8027674:	9b03      	ldr	r3, [sp, #12]
 8027676:	1d19      	adds	r1, r3, #4
 8027678:	681b      	ldr	r3, [r3, #0]
 802767a:	9103      	str	r1, [sp, #12]
 802767c:	2b00      	cmp	r3, #0
 802767e:	bfbb      	ittet	lt
 8027680:	425b      	neglt	r3, r3
 8027682:	f042 0202 	orrlt.w	r2, r2, #2
 8027686:	9307      	strge	r3, [sp, #28]
 8027688:	9307      	strlt	r3, [sp, #28]
 802768a:	bfb8      	it	lt
 802768c:	9204      	strlt	r2, [sp, #16]
 802768e:	7823      	ldrb	r3, [r4, #0]
 8027690:	2b2e      	cmp	r3, #46	@ 0x2e
 8027692:	d10a      	bne.n	80276aa <_vfiprintf_r+0x156>
 8027694:	7863      	ldrb	r3, [r4, #1]
 8027696:	2b2a      	cmp	r3, #42	@ 0x2a
 8027698:	d132      	bne.n	8027700 <_vfiprintf_r+0x1ac>
 802769a:	9b03      	ldr	r3, [sp, #12]
 802769c:	1d1a      	adds	r2, r3, #4
 802769e:	681b      	ldr	r3, [r3, #0]
 80276a0:	9203      	str	r2, [sp, #12]
 80276a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80276a6:	3402      	adds	r4, #2
 80276a8:	9305      	str	r3, [sp, #20]
 80276aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027780 <_vfiprintf_r+0x22c>
 80276ae:	7821      	ldrb	r1, [r4, #0]
 80276b0:	2203      	movs	r2, #3
 80276b2:	4650      	mov	r0, sl
 80276b4:	f7d8 fe24 	bl	8000300 <memchr>
 80276b8:	b138      	cbz	r0, 80276ca <_vfiprintf_r+0x176>
 80276ba:	9b04      	ldr	r3, [sp, #16]
 80276bc:	eba0 000a 	sub.w	r0, r0, sl
 80276c0:	2240      	movs	r2, #64	@ 0x40
 80276c2:	4082      	lsls	r2, r0
 80276c4:	4313      	orrs	r3, r2
 80276c6:	3401      	adds	r4, #1
 80276c8:	9304      	str	r3, [sp, #16]
 80276ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80276ce:	4829      	ldr	r0, [pc, #164]	@ (8027774 <_vfiprintf_r+0x220>)
 80276d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80276d4:	2206      	movs	r2, #6
 80276d6:	f7d8 fe13 	bl	8000300 <memchr>
 80276da:	2800      	cmp	r0, #0
 80276dc:	d03f      	beq.n	802775e <_vfiprintf_r+0x20a>
 80276de:	4b26      	ldr	r3, [pc, #152]	@ (8027778 <_vfiprintf_r+0x224>)
 80276e0:	bb1b      	cbnz	r3, 802772a <_vfiprintf_r+0x1d6>
 80276e2:	9b03      	ldr	r3, [sp, #12]
 80276e4:	3307      	adds	r3, #7
 80276e6:	f023 0307 	bic.w	r3, r3, #7
 80276ea:	3308      	adds	r3, #8
 80276ec:	9303      	str	r3, [sp, #12]
 80276ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80276f0:	443b      	add	r3, r7
 80276f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80276f4:	e76a      	b.n	80275cc <_vfiprintf_r+0x78>
 80276f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80276fa:	460c      	mov	r4, r1
 80276fc:	2001      	movs	r0, #1
 80276fe:	e7a8      	b.n	8027652 <_vfiprintf_r+0xfe>
 8027700:	2300      	movs	r3, #0
 8027702:	3401      	adds	r4, #1
 8027704:	9305      	str	r3, [sp, #20]
 8027706:	4619      	mov	r1, r3
 8027708:	f04f 0c0a 	mov.w	ip, #10
 802770c:	4620      	mov	r0, r4
 802770e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027712:	3a30      	subs	r2, #48	@ 0x30
 8027714:	2a09      	cmp	r2, #9
 8027716:	d903      	bls.n	8027720 <_vfiprintf_r+0x1cc>
 8027718:	2b00      	cmp	r3, #0
 802771a:	d0c6      	beq.n	80276aa <_vfiprintf_r+0x156>
 802771c:	9105      	str	r1, [sp, #20]
 802771e:	e7c4      	b.n	80276aa <_vfiprintf_r+0x156>
 8027720:	fb0c 2101 	mla	r1, ip, r1, r2
 8027724:	4604      	mov	r4, r0
 8027726:	2301      	movs	r3, #1
 8027728:	e7f0      	b.n	802770c <_vfiprintf_r+0x1b8>
 802772a:	ab03      	add	r3, sp, #12
 802772c:	9300      	str	r3, [sp, #0]
 802772e:	462a      	mov	r2, r5
 8027730:	4b12      	ldr	r3, [pc, #72]	@ (802777c <_vfiprintf_r+0x228>)
 8027732:	a904      	add	r1, sp, #16
 8027734:	4630      	mov	r0, r6
 8027736:	f7fc fb3b 	bl	8023db0 <_printf_float>
 802773a:	4607      	mov	r7, r0
 802773c:	1c78      	adds	r0, r7, #1
 802773e:	d1d6      	bne.n	80276ee <_vfiprintf_r+0x19a>
 8027740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027742:	07d9      	lsls	r1, r3, #31
 8027744:	d405      	bmi.n	8027752 <_vfiprintf_r+0x1fe>
 8027746:	89ab      	ldrh	r3, [r5, #12]
 8027748:	059a      	lsls	r2, r3, #22
 802774a:	d402      	bmi.n	8027752 <_vfiprintf_r+0x1fe>
 802774c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802774e:	f7fd fcc7 	bl	80250e0 <__retarget_lock_release_recursive>
 8027752:	89ab      	ldrh	r3, [r5, #12]
 8027754:	065b      	lsls	r3, r3, #25
 8027756:	f53f af1f 	bmi.w	8027598 <_vfiprintf_r+0x44>
 802775a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802775c:	e71e      	b.n	802759c <_vfiprintf_r+0x48>
 802775e:	ab03      	add	r3, sp, #12
 8027760:	9300      	str	r3, [sp, #0]
 8027762:	462a      	mov	r2, r5
 8027764:	4b05      	ldr	r3, [pc, #20]	@ (802777c <_vfiprintf_r+0x228>)
 8027766:	a904      	add	r1, sp, #16
 8027768:	4630      	mov	r0, r6
 802776a:	f7fc fda9 	bl	80242c0 <_printf_i>
 802776e:	e7e4      	b.n	802773a <_vfiprintf_r+0x1e6>
 8027770:	08038830 	.word	0x08038830
 8027774:	0803883a 	.word	0x0803883a
 8027778:	08023db1 	.word	0x08023db1
 802777c:	0802752f 	.word	0x0802752f
 8027780:	08038836 	.word	0x08038836

08027784 <__sflush_r>:
 8027784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802778c:	0716      	lsls	r6, r2, #28
 802778e:	4605      	mov	r5, r0
 8027790:	460c      	mov	r4, r1
 8027792:	d454      	bmi.n	802783e <__sflush_r+0xba>
 8027794:	684b      	ldr	r3, [r1, #4]
 8027796:	2b00      	cmp	r3, #0
 8027798:	dc02      	bgt.n	80277a0 <__sflush_r+0x1c>
 802779a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802779c:	2b00      	cmp	r3, #0
 802779e:	dd48      	ble.n	8027832 <__sflush_r+0xae>
 80277a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80277a2:	2e00      	cmp	r6, #0
 80277a4:	d045      	beq.n	8027832 <__sflush_r+0xae>
 80277a6:	2300      	movs	r3, #0
 80277a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80277ac:	682f      	ldr	r7, [r5, #0]
 80277ae:	6a21      	ldr	r1, [r4, #32]
 80277b0:	602b      	str	r3, [r5, #0]
 80277b2:	d030      	beq.n	8027816 <__sflush_r+0x92>
 80277b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80277b6:	89a3      	ldrh	r3, [r4, #12]
 80277b8:	0759      	lsls	r1, r3, #29
 80277ba:	d505      	bpl.n	80277c8 <__sflush_r+0x44>
 80277bc:	6863      	ldr	r3, [r4, #4]
 80277be:	1ad2      	subs	r2, r2, r3
 80277c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80277c2:	b10b      	cbz	r3, 80277c8 <__sflush_r+0x44>
 80277c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80277c6:	1ad2      	subs	r2, r2, r3
 80277c8:	2300      	movs	r3, #0
 80277ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80277cc:	6a21      	ldr	r1, [r4, #32]
 80277ce:	4628      	mov	r0, r5
 80277d0:	47b0      	blx	r6
 80277d2:	1c43      	adds	r3, r0, #1
 80277d4:	89a3      	ldrh	r3, [r4, #12]
 80277d6:	d106      	bne.n	80277e6 <__sflush_r+0x62>
 80277d8:	6829      	ldr	r1, [r5, #0]
 80277da:	291d      	cmp	r1, #29
 80277dc:	d82b      	bhi.n	8027836 <__sflush_r+0xb2>
 80277de:	4a2a      	ldr	r2, [pc, #168]	@ (8027888 <__sflush_r+0x104>)
 80277e0:	410a      	asrs	r2, r1
 80277e2:	07d6      	lsls	r6, r2, #31
 80277e4:	d427      	bmi.n	8027836 <__sflush_r+0xb2>
 80277e6:	2200      	movs	r2, #0
 80277e8:	6062      	str	r2, [r4, #4]
 80277ea:	04d9      	lsls	r1, r3, #19
 80277ec:	6922      	ldr	r2, [r4, #16]
 80277ee:	6022      	str	r2, [r4, #0]
 80277f0:	d504      	bpl.n	80277fc <__sflush_r+0x78>
 80277f2:	1c42      	adds	r2, r0, #1
 80277f4:	d101      	bne.n	80277fa <__sflush_r+0x76>
 80277f6:	682b      	ldr	r3, [r5, #0]
 80277f8:	b903      	cbnz	r3, 80277fc <__sflush_r+0x78>
 80277fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80277fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80277fe:	602f      	str	r7, [r5, #0]
 8027800:	b1b9      	cbz	r1, 8027832 <__sflush_r+0xae>
 8027802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027806:	4299      	cmp	r1, r3
 8027808:	d002      	beq.n	8027810 <__sflush_r+0x8c>
 802780a:	4628      	mov	r0, r5
 802780c:	f7fe fa6e 	bl	8025cec <_free_r>
 8027810:	2300      	movs	r3, #0
 8027812:	6363      	str	r3, [r4, #52]	@ 0x34
 8027814:	e00d      	b.n	8027832 <__sflush_r+0xae>
 8027816:	2301      	movs	r3, #1
 8027818:	4628      	mov	r0, r5
 802781a:	47b0      	blx	r6
 802781c:	4602      	mov	r2, r0
 802781e:	1c50      	adds	r0, r2, #1
 8027820:	d1c9      	bne.n	80277b6 <__sflush_r+0x32>
 8027822:	682b      	ldr	r3, [r5, #0]
 8027824:	2b00      	cmp	r3, #0
 8027826:	d0c6      	beq.n	80277b6 <__sflush_r+0x32>
 8027828:	2b1d      	cmp	r3, #29
 802782a:	d001      	beq.n	8027830 <__sflush_r+0xac>
 802782c:	2b16      	cmp	r3, #22
 802782e:	d11e      	bne.n	802786e <__sflush_r+0xea>
 8027830:	602f      	str	r7, [r5, #0]
 8027832:	2000      	movs	r0, #0
 8027834:	e022      	b.n	802787c <__sflush_r+0xf8>
 8027836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802783a:	b21b      	sxth	r3, r3
 802783c:	e01b      	b.n	8027876 <__sflush_r+0xf2>
 802783e:	690f      	ldr	r7, [r1, #16]
 8027840:	2f00      	cmp	r7, #0
 8027842:	d0f6      	beq.n	8027832 <__sflush_r+0xae>
 8027844:	0793      	lsls	r3, r2, #30
 8027846:	680e      	ldr	r6, [r1, #0]
 8027848:	bf08      	it	eq
 802784a:	694b      	ldreq	r3, [r1, #20]
 802784c:	600f      	str	r7, [r1, #0]
 802784e:	bf18      	it	ne
 8027850:	2300      	movne	r3, #0
 8027852:	eba6 0807 	sub.w	r8, r6, r7
 8027856:	608b      	str	r3, [r1, #8]
 8027858:	f1b8 0f00 	cmp.w	r8, #0
 802785c:	dde9      	ble.n	8027832 <__sflush_r+0xae>
 802785e:	6a21      	ldr	r1, [r4, #32]
 8027860:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8027862:	4643      	mov	r3, r8
 8027864:	463a      	mov	r2, r7
 8027866:	4628      	mov	r0, r5
 8027868:	47b0      	blx	r6
 802786a:	2800      	cmp	r0, #0
 802786c:	dc08      	bgt.n	8027880 <__sflush_r+0xfc>
 802786e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027876:	81a3      	strh	r3, [r4, #12]
 8027878:	f04f 30ff 	mov.w	r0, #4294967295
 802787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027880:	4407      	add	r7, r0
 8027882:	eba8 0800 	sub.w	r8, r8, r0
 8027886:	e7e7      	b.n	8027858 <__sflush_r+0xd4>
 8027888:	dfbffffe 	.word	0xdfbffffe

0802788c <_fflush_r>:
 802788c:	b538      	push	{r3, r4, r5, lr}
 802788e:	690b      	ldr	r3, [r1, #16]
 8027890:	4605      	mov	r5, r0
 8027892:	460c      	mov	r4, r1
 8027894:	b913      	cbnz	r3, 802789c <_fflush_r+0x10>
 8027896:	2500      	movs	r5, #0
 8027898:	4628      	mov	r0, r5
 802789a:	bd38      	pop	{r3, r4, r5, pc}
 802789c:	b118      	cbz	r0, 80278a6 <_fflush_r+0x1a>
 802789e:	6a03      	ldr	r3, [r0, #32]
 80278a0:	b90b      	cbnz	r3, 80278a6 <_fflush_r+0x1a>
 80278a2:	f7fd f8c5 	bl	8024a30 <__sinit>
 80278a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80278aa:	2b00      	cmp	r3, #0
 80278ac:	d0f3      	beq.n	8027896 <_fflush_r+0xa>
 80278ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80278b0:	07d0      	lsls	r0, r2, #31
 80278b2:	d404      	bmi.n	80278be <_fflush_r+0x32>
 80278b4:	0599      	lsls	r1, r3, #22
 80278b6:	d402      	bmi.n	80278be <_fflush_r+0x32>
 80278b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80278ba:	f7fd fc10 	bl	80250de <__retarget_lock_acquire_recursive>
 80278be:	4628      	mov	r0, r5
 80278c0:	4621      	mov	r1, r4
 80278c2:	f7ff ff5f 	bl	8027784 <__sflush_r>
 80278c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80278c8:	07da      	lsls	r2, r3, #31
 80278ca:	4605      	mov	r5, r0
 80278cc:	d4e4      	bmi.n	8027898 <_fflush_r+0xc>
 80278ce:	89a3      	ldrh	r3, [r4, #12]
 80278d0:	059b      	lsls	r3, r3, #22
 80278d2:	d4e1      	bmi.n	8027898 <_fflush_r+0xc>
 80278d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80278d6:	f7fd fc03 	bl	80250e0 <__retarget_lock_release_recursive>
 80278da:	e7dd      	b.n	8027898 <_fflush_r+0xc>

080278dc <__swhatbuf_r>:
 80278dc:	b570      	push	{r4, r5, r6, lr}
 80278de:	460c      	mov	r4, r1
 80278e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80278e4:	2900      	cmp	r1, #0
 80278e6:	b096      	sub	sp, #88	@ 0x58
 80278e8:	4615      	mov	r5, r2
 80278ea:	461e      	mov	r6, r3
 80278ec:	da0d      	bge.n	802790a <__swhatbuf_r+0x2e>
 80278ee:	89a3      	ldrh	r3, [r4, #12]
 80278f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80278f4:	f04f 0100 	mov.w	r1, #0
 80278f8:	bf14      	ite	ne
 80278fa:	2340      	movne	r3, #64	@ 0x40
 80278fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8027900:	2000      	movs	r0, #0
 8027902:	6031      	str	r1, [r6, #0]
 8027904:	602b      	str	r3, [r5, #0]
 8027906:	b016      	add	sp, #88	@ 0x58
 8027908:	bd70      	pop	{r4, r5, r6, pc}
 802790a:	466a      	mov	r2, sp
 802790c:	f000 f8ac 	bl	8027a68 <_fstat_r>
 8027910:	2800      	cmp	r0, #0
 8027912:	dbec      	blt.n	80278ee <__swhatbuf_r+0x12>
 8027914:	9901      	ldr	r1, [sp, #4]
 8027916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802791a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802791e:	4259      	negs	r1, r3
 8027920:	4159      	adcs	r1, r3
 8027922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8027926:	e7eb      	b.n	8027900 <__swhatbuf_r+0x24>

08027928 <__smakebuf_r>:
 8027928:	898b      	ldrh	r3, [r1, #12]
 802792a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802792c:	079d      	lsls	r5, r3, #30
 802792e:	4606      	mov	r6, r0
 8027930:	460c      	mov	r4, r1
 8027932:	d507      	bpl.n	8027944 <__smakebuf_r+0x1c>
 8027934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8027938:	6023      	str	r3, [r4, #0]
 802793a:	6123      	str	r3, [r4, #16]
 802793c:	2301      	movs	r3, #1
 802793e:	6163      	str	r3, [r4, #20]
 8027940:	b003      	add	sp, #12
 8027942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027944:	ab01      	add	r3, sp, #4
 8027946:	466a      	mov	r2, sp
 8027948:	f7ff ffc8 	bl	80278dc <__swhatbuf_r>
 802794c:	9f00      	ldr	r7, [sp, #0]
 802794e:	4605      	mov	r5, r0
 8027950:	4639      	mov	r1, r7
 8027952:	4630      	mov	r0, r6
 8027954:	f7fc f820 	bl	8023998 <_malloc_r>
 8027958:	b948      	cbnz	r0, 802796e <__smakebuf_r+0x46>
 802795a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802795e:	059a      	lsls	r2, r3, #22
 8027960:	d4ee      	bmi.n	8027940 <__smakebuf_r+0x18>
 8027962:	f023 0303 	bic.w	r3, r3, #3
 8027966:	f043 0302 	orr.w	r3, r3, #2
 802796a:	81a3      	strh	r3, [r4, #12]
 802796c:	e7e2      	b.n	8027934 <__smakebuf_r+0xc>
 802796e:	89a3      	ldrh	r3, [r4, #12]
 8027970:	6020      	str	r0, [r4, #0]
 8027972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027976:	81a3      	strh	r3, [r4, #12]
 8027978:	9b01      	ldr	r3, [sp, #4]
 802797a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802797e:	b15b      	cbz	r3, 8027998 <__smakebuf_r+0x70>
 8027980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027984:	4630      	mov	r0, r6
 8027986:	f000 f881 	bl	8027a8c <_isatty_r>
 802798a:	b128      	cbz	r0, 8027998 <__smakebuf_r+0x70>
 802798c:	89a3      	ldrh	r3, [r4, #12]
 802798e:	f023 0303 	bic.w	r3, r3, #3
 8027992:	f043 0301 	orr.w	r3, r3, #1
 8027996:	81a3      	strh	r3, [r4, #12]
 8027998:	89a3      	ldrh	r3, [r4, #12]
 802799a:	431d      	orrs	r5, r3
 802799c:	81a5      	strh	r5, [r4, #12]
 802799e:	e7cf      	b.n	8027940 <__smakebuf_r+0x18>

080279a0 <_putc_r>:
 80279a0:	b570      	push	{r4, r5, r6, lr}
 80279a2:	460d      	mov	r5, r1
 80279a4:	4614      	mov	r4, r2
 80279a6:	4606      	mov	r6, r0
 80279a8:	b118      	cbz	r0, 80279b2 <_putc_r+0x12>
 80279aa:	6a03      	ldr	r3, [r0, #32]
 80279ac:	b90b      	cbnz	r3, 80279b2 <_putc_r+0x12>
 80279ae:	f7fd f83f 	bl	8024a30 <__sinit>
 80279b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80279b4:	07d8      	lsls	r0, r3, #31
 80279b6:	d405      	bmi.n	80279c4 <_putc_r+0x24>
 80279b8:	89a3      	ldrh	r3, [r4, #12]
 80279ba:	0599      	lsls	r1, r3, #22
 80279bc:	d402      	bmi.n	80279c4 <_putc_r+0x24>
 80279be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80279c0:	f7fd fb8d 	bl	80250de <__retarget_lock_acquire_recursive>
 80279c4:	68a3      	ldr	r3, [r4, #8]
 80279c6:	3b01      	subs	r3, #1
 80279c8:	2b00      	cmp	r3, #0
 80279ca:	60a3      	str	r3, [r4, #8]
 80279cc:	da05      	bge.n	80279da <_putc_r+0x3a>
 80279ce:	69a2      	ldr	r2, [r4, #24]
 80279d0:	4293      	cmp	r3, r2
 80279d2:	db12      	blt.n	80279fa <_putc_r+0x5a>
 80279d4:	b2eb      	uxtb	r3, r5
 80279d6:	2b0a      	cmp	r3, #10
 80279d8:	d00f      	beq.n	80279fa <_putc_r+0x5a>
 80279da:	6823      	ldr	r3, [r4, #0]
 80279dc:	1c5a      	adds	r2, r3, #1
 80279de:	6022      	str	r2, [r4, #0]
 80279e0:	701d      	strb	r5, [r3, #0]
 80279e2:	b2ed      	uxtb	r5, r5
 80279e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80279e6:	07da      	lsls	r2, r3, #31
 80279e8:	d405      	bmi.n	80279f6 <_putc_r+0x56>
 80279ea:	89a3      	ldrh	r3, [r4, #12]
 80279ec:	059b      	lsls	r3, r3, #22
 80279ee:	d402      	bmi.n	80279f6 <_putc_r+0x56>
 80279f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80279f2:	f7fd fb75 	bl	80250e0 <__retarget_lock_release_recursive>
 80279f6:	4628      	mov	r0, r5
 80279f8:	bd70      	pop	{r4, r5, r6, pc}
 80279fa:	4629      	mov	r1, r5
 80279fc:	4622      	mov	r2, r4
 80279fe:	4630      	mov	r0, r6
 8027a00:	f7fd f96d 	bl	8024cde <__swbuf_r>
 8027a04:	4605      	mov	r5, r0
 8027a06:	e7ed      	b.n	80279e4 <_putc_r+0x44>

08027a08 <_raise_r>:
 8027a08:	291f      	cmp	r1, #31
 8027a0a:	b538      	push	{r3, r4, r5, lr}
 8027a0c:	4605      	mov	r5, r0
 8027a0e:	460c      	mov	r4, r1
 8027a10:	d904      	bls.n	8027a1c <_raise_r+0x14>
 8027a12:	2316      	movs	r3, #22
 8027a14:	6003      	str	r3, [r0, #0]
 8027a16:	f04f 30ff 	mov.w	r0, #4294967295
 8027a1a:	bd38      	pop	{r3, r4, r5, pc}
 8027a1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8027a1e:	b112      	cbz	r2, 8027a26 <_raise_r+0x1e>
 8027a20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027a24:	b94b      	cbnz	r3, 8027a3a <_raise_r+0x32>
 8027a26:	4628      	mov	r0, r5
 8027a28:	f000 f852 	bl	8027ad0 <_getpid_r>
 8027a2c:	4622      	mov	r2, r4
 8027a2e:	4601      	mov	r1, r0
 8027a30:	4628      	mov	r0, r5
 8027a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027a36:	f000 b839 	b.w	8027aac <_kill_r>
 8027a3a:	2b01      	cmp	r3, #1
 8027a3c:	d00a      	beq.n	8027a54 <_raise_r+0x4c>
 8027a3e:	1c59      	adds	r1, r3, #1
 8027a40:	d103      	bne.n	8027a4a <_raise_r+0x42>
 8027a42:	2316      	movs	r3, #22
 8027a44:	6003      	str	r3, [r0, #0]
 8027a46:	2001      	movs	r0, #1
 8027a48:	e7e7      	b.n	8027a1a <_raise_r+0x12>
 8027a4a:	2100      	movs	r1, #0
 8027a4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8027a50:	4620      	mov	r0, r4
 8027a52:	4798      	blx	r3
 8027a54:	2000      	movs	r0, #0
 8027a56:	e7e0      	b.n	8027a1a <_raise_r+0x12>

08027a58 <raise>:
 8027a58:	4b02      	ldr	r3, [pc, #8]	@ (8027a64 <raise+0xc>)
 8027a5a:	4601      	mov	r1, r0
 8027a5c:	6818      	ldr	r0, [r3, #0]
 8027a5e:	f7ff bfd3 	b.w	8027a08 <_raise_r>
 8027a62:	bf00      	nop
 8027a64:	240007b0 	.word	0x240007b0

08027a68 <_fstat_r>:
 8027a68:	b538      	push	{r3, r4, r5, lr}
 8027a6a:	4d07      	ldr	r5, [pc, #28]	@ (8027a88 <_fstat_r+0x20>)
 8027a6c:	2300      	movs	r3, #0
 8027a6e:	4604      	mov	r4, r0
 8027a70:	4608      	mov	r0, r1
 8027a72:	4611      	mov	r1, r2
 8027a74:	602b      	str	r3, [r5, #0]
 8027a76:	f7f3 fc7d 	bl	801b374 <_fstat>
 8027a7a:	1c43      	adds	r3, r0, #1
 8027a7c:	d102      	bne.n	8027a84 <_fstat_r+0x1c>
 8027a7e:	682b      	ldr	r3, [r5, #0]
 8027a80:	b103      	cbz	r3, 8027a84 <_fstat_r+0x1c>
 8027a82:	6023      	str	r3, [r4, #0]
 8027a84:	bd38      	pop	{r3, r4, r5, pc}
 8027a86:	bf00      	nop
 8027a88:	24008b00 	.word	0x24008b00

08027a8c <_isatty_r>:
 8027a8c:	b538      	push	{r3, r4, r5, lr}
 8027a8e:	4d06      	ldr	r5, [pc, #24]	@ (8027aa8 <_isatty_r+0x1c>)
 8027a90:	2300      	movs	r3, #0
 8027a92:	4604      	mov	r4, r0
 8027a94:	4608      	mov	r0, r1
 8027a96:	602b      	str	r3, [r5, #0]
 8027a98:	f7f3 fc7c 	bl	801b394 <_isatty>
 8027a9c:	1c43      	adds	r3, r0, #1
 8027a9e:	d102      	bne.n	8027aa6 <_isatty_r+0x1a>
 8027aa0:	682b      	ldr	r3, [r5, #0]
 8027aa2:	b103      	cbz	r3, 8027aa6 <_isatty_r+0x1a>
 8027aa4:	6023      	str	r3, [r4, #0]
 8027aa6:	bd38      	pop	{r3, r4, r5, pc}
 8027aa8:	24008b00 	.word	0x24008b00

08027aac <_kill_r>:
 8027aac:	b538      	push	{r3, r4, r5, lr}
 8027aae:	4d07      	ldr	r5, [pc, #28]	@ (8027acc <_kill_r+0x20>)
 8027ab0:	2300      	movs	r3, #0
 8027ab2:	4604      	mov	r4, r0
 8027ab4:	4608      	mov	r0, r1
 8027ab6:	4611      	mov	r1, r2
 8027ab8:	602b      	str	r3, [r5, #0]
 8027aba:	f7f3 fc17 	bl	801b2ec <_kill>
 8027abe:	1c43      	adds	r3, r0, #1
 8027ac0:	d102      	bne.n	8027ac8 <_kill_r+0x1c>
 8027ac2:	682b      	ldr	r3, [r5, #0]
 8027ac4:	b103      	cbz	r3, 8027ac8 <_kill_r+0x1c>
 8027ac6:	6023      	str	r3, [r4, #0]
 8027ac8:	bd38      	pop	{r3, r4, r5, pc}
 8027aca:	bf00      	nop
 8027acc:	24008b00 	.word	0x24008b00

08027ad0 <_getpid_r>:
 8027ad0:	f7f3 bc04 	b.w	801b2dc <_getpid>
 8027ad4:	0000      	movs	r0, r0
	...

08027ad8 <nan>:
 8027ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8027ae0 <nan+0x8>
 8027adc:	4770      	bx	lr
 8027ade:	bf00      	nop
 8027ae0:	00000000 	.word	0x00000000
 8027ae4:	7ff80000 	.word	0x7ff80000

08027ae8 <rshift>:
 8027ae8:	6903      	ldr	r3, [r0, #16]
 8027aea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8027aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027af2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8027af6:	f100 0414 	add.w	r4, r0, #20
 8027afa:	dd45      	ble.n	8027b88 <rshift+0xa0>
 8027afc:	f011 011f 	ands.w	r1, r1, #31
 8027b00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8027b04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8027b08:	d10c      	bne.n	8027b24 <rshift+0x3c>
 8027b0a:	f100 0710 	add.w	r7, r0, #16
 8027b0e:	4629      	mov	r1, r5
 8027b10:	42b1      	cmp	r1, r6
 8027b12:	d334      	bcc.n	8027b7e <rshift+0x96>
 8027b14:	1a9b      	subs	r3, r3, r2
 8027b16:	009b      	lsls	r3, r3, #2
 8027b18:	1eea      	subs	r2, r5, #3
 8027b1a:	4296      	cmp	r6, r2
 8027b1c:	bf38      	it	cc
 8027b1e:	2300      	movcc	r3, #0
 8027b20:	4423      	add	r3, r4
 8027b22:	e015      	b.n	8027b50 <rshift+0x68>
 8027b24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8027b28:	f1c1 0820 	rsb	r8, r1, #32
 8027b2c:	40cf      	lsrs	r7, r1
 8027b2e:	f105 0e04 	add.w	lr, r5, #4
 8027b32:	46a1      	mov	r9, r4
 8027b34:	4576      	cmp	r6, lr
 8027b36:	46f4      	mov	ip, lr
 8027b38:	d815      	bhi.n	8027b66 <rshift+0x7e>
 8027b3a:	1a9a      	subs	r2, r3, r2
 8027b3c:	0092      	lsls	r2, r2, #2
 8027b3e:	3a04      	subs	r2, #4
 8027b40:	3501      	adds	r5, #1
 8027b42:	42ae      	cmp	r6, r5
 8027b44:	bf38      	it	cc
 8027b46:	2200      	movcc	r2, #0
 8027b48:	18a3      	adds	r3, r4, r2
 8027b4a:	50a7      	str	r7, [r4, r2]
 8027b4c:	b107      	cbz	r7, 8027b50 <rshift+0x68>
 8027b4e:	3304      	adds	r3, #4
 8027b50:	1b1a      	subs	r2, r3, r4
 8027b52:	42a3      	cmp	r3, r4
 8027b54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8027b58:	bf08      	it	eq
 8027b5a:	2300      	moveq	r3, #0
 8027b5c:	6102      	str	r2, [r0, #16]
 8027b5e:	bf08      	it	eq
 8027b60:	6143      	streq	r3, [r0, #20]
 8027b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027b66:	f8dc c000 	ldr.w	ip, [ip]
 8027b6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8027b6e:	ea4c 0707 	orr.w	r7, ip, r7
 8027b72:	f849 7b04 	str.w	r7, [r9], #4
 8027b76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027b7a:	40cf      	lsrs	r7, r1
 8027b7c:	e7da      	b.n	8027b34 <rshift+0x4c>
 8027b7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8027b82:	f847 cf04 	str.w	ip, [r7, #4]!
 8027b86:	e7c3      	b.n	8027b10 <rshift+0x28>
 8027b88:	4623      	mov	r3, r4
 8027b8a:	e7e1      	b.n	8027b50 <rshift+0x68>

08027b8c <__hexdig_fun>:
 8027b8c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8027b90:	2b09      	cmp	r3, #9
 8027b92:	d802      	bhi.n	8027b9a <__hexdig_fun+0xe>
 8027b94:	3820      	subs	r0, #32
 8027b96:	b2c0      	uxtb	r0, r0
 8027b98:	4770      	bx	lr
 8027b9a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8027b9e:	2b05      	cmp	r3, #5
 8027ba0:	d801      	bhi.n	8027ba6 <__hexdig_fun+0x1a>
 8027ba2:	3847      	subs	r0, #71	@ 0x47
 8027ba4:	e7f7      	b.n	8027b96 <__hexdig_fun+0xa>
 8027ba6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8027baa:	2b05      	cmp	r3, #5
 8027bac:	d801      	bhi.n	8027bb2 <__hexdig_fun+0x26>
 8027bae:	3827      	subs	r0, #39	@ 0x27
 8027bb0:	e7f1      	b.n	8027b96 <__hexdig_fun+0xa>
 8027bb2:	2000      	movs	r0, #0
 8027bb4:	4770      	bx	lr
	...

08027bb8 <__gethex>:
 8027bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bbc:	b085      	sub	sp, #20
 8027bbe:	468a      	mov	sl, r1
 8027bc0:	9302      	str	r3, [sp, #8]
 8027bc2:	680b      	ldr	r3, [r1, #0]
 8027bc4:	9001      	str	r0, [sp, #4]
 8027bc6:	4690      	mov	r8, r2
 8027bc8:	1c9c      	adds	r4, r3, #2
 8027bca:	46a1      	mov	r9, r4
 8027bcc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8027bd0:	2830      	cmp	r0, #48	@ 0x30
 8027bd2:	d0fa      	beq.n	8027bca <__gethex+0x12>
 8027bd4:	eba9 0303 	sub.w	r3, r9, r3
 8027bd8:	f1a3 0b02 	sub.w	fp, r3, #2
 8027bdc:	f7ff ffd6 	bl	8027b8c <__hexdig_fun>
 8027be0:	4605      	mov	r5, r0
 8027be2:	2800      	cmp	r0, #0
 8027be4:	d168      	bne.n	8027cb8 <__gethex+0x100>
 8027be6:	49a0      	ldr	r1, [pc, #640]	@ (8027e68 <__gethex+0x2b0>)
 8027be8:	2201      	movs	r2, #1
 8027bea:	4648      	mov	r0, r9
 8027bec:	f7fd f94b 	bl	8024e86 <strncmp>
 8027bf0:	4607      	mov	r7, r0
 8027bf2:	2800      	cmp	r0, #0
 8027bf4:	d167      	bne.n	8027cc6 <__gethex+0x10e>
 8027bf6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8027bfa:	4626      	mov	r6, r4
 8027bfc:	f7ff ffc6 	bl	8027b8c <__hexdig_fun>
 8027c00:	2800      	cmp	r0, #0
 8027c02:	d062      	beq.n	8027cca <__gethex+0x112>
 8027c04:	4623      	mov	r3, r4
 8027c06:	7818      	ldrb	r0, [r3, #0]
 8027c08:	2830      	cmp	r0, #48	@ 0x30
 8027c0a:	4699      	mov	r9, r3
 8027c0c:	f103 0301 	add.w	r3, r3, #1
 8027c10:	d0f9      	beq.n	8027c06 <__gethex+0x4e>
 8027c12:	f7ff ffbb 	bl	8027b8c <__hexdig_fun>
 8027c16:	fab0 f580 	clz	r5, r0
 8027c1a:	096d      	lsrs	r5, r5, #5
 8027c1c:	f04f 0b01 	mov.w	fp, #1
 8027c20:	464a      	mov	r2, r9
 8027c22:	4616      	mov	r6, r2
 8027c24:	3201      	adds	r2, #1
 8027c26:	7830      	ldrb	r0, [r6, #0]
 8027c28:	f7ff ffb0 	bl	8027b8c <__hexdig_fun>
 8027c2c:	2800      	cmp	r0, #0
 8027c2e:	d1f8      	bne.n	8027c22 <__gethex+0x6a>
 8027c30:	498d      	ldr	r1, [pc, #564]	@ (8027e68 <__gethex+0x2b0>)
 8027c32:	2201      	movs	r2, #1
 8027c34:	4630      	mov	r0, r6
 8027c36:	f7fd f926 	bl	8024e86 <strncmp>
 8027c3a:	2800      	cmp	r0, #0
 8027c3c:	d13f      	bne.n	8027cbe <__gethex+0x106>
 8027c3e:	b944      	cbnz	r4, 8027c52 <__gethex+0x9a>
 8027c40:	1c74      	adds	r4, r6, #1
 8027c42:	4622      	mov	r2, r4
 8027c44:	4616      	mov	r6, r2
 8027c46:	3201      	adds	r2, #1
 8027c48:	7830      	ldrb	r0, [r6, #0]
 8027c4a:	f7ff ff9f 	bl	8027b8c <__hexdig_fun>
 8027c4e:	2800      	cmp	r0, #0
 8027c50:	d1f8      	bne.n	8027c44 <__gethex+0x8c>
 8027c52:	1ba4      	subs	r4, r4, r6
 8027c54:	00a7      	lsls	r7, r4, #2
 8027c56:	7833      	ldrb	r3, [r6, #0]
 8027c58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8027c5c:	2b50      	cmp	r3, #80	@ 0x50
 8027c5e:	d13e      	bne.n	8027cde <__gethex+0x126>
 8027c60:	7873      	ldrb	r3, [r6, #1]
 8027c62:	2b2b      	cmp	r3, #43	@ 0x2b
 8027c64:	d033      	beq.n	8027cce <__gethex+0x116>
 8027c66:	2b2d      	cmp	r3, #45	@ 0x2d
 8027c68:	d034      	beq.n	8027cd4 <__gethex+0x11c>
 8027c6a:	1c71      	adds	r1, r6, #1
 8027c6c:	2400      	movs	r4, #0
 8027c6e:	7808      	ldrb	r0, [r1, #0]
 8027c70:	f7ff ff8c 	bl	8027b8c <__hexdig_fun>
 8027c74:	1e43      	subs	r3, r0, #1
 8027c76:	b2db      	uxtb	r3, r3
 8027c78:	2b18      	cmp	r3, #24
 8027c7a:	d830      	bhi.n	8027cde <__gethex+0x126>
 8027c7c:	f1a0 0210 	sub.w	r2, r0, #16
 8027c80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8027c84:	f7ff ff82 	bl	8027b8c <__hexdig_fun>
 8027c88:	f100 3cff 	add.w	ip, r0, #4294967295
 8027c8c:	fa5f fc8c 	uxtb.w	ip, ip
 8027c90:	f1bc 0f18 	cmp.w	ip, #24
 8027c94:	f04f 030a 	mov.w	r3, #10
 8027c98:	d91e      	bls.n	8027cd8 <__gethex+0x120>
 8027c9a:	b104      	cbz	r4, 8027c9e <__gethex+0xe6>
 8027c9c:	4252      	negs	r2, r2
 8027c9e:	4417      	add	r7, r2
 8027ca0:	f8ca 1000 	str.w	r1, [sl]
 8027ca4:	b1ed      	cbz	r5, 8027ce2 <__gethex+0x12a>
 8027ca6:	f1bb 0f00 	cmp.w	fp, #0
 8027caa:	bf0c      	ite	eq
 8027cac:	2506      	moveq	r5, #6
 8027cae:	2500      	movne	r5, #0
 8027cb0:	4628      	mov	r0, r5
 8027cb2:	b005      	add	sp, #20
 8027cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027cb8:	2500      	movs	r5, #0
 8027cba:	462c      	mov	r4, r5
 8027cbc:	e7b0      	b.n	8027c20 <__gethex+0x68>
 8027cbe:	2c00      	cmp	r4, #0
 8027cc0:	d1c7      	bne.n	8027c52 <__gethex+0x9a>
 8027cc2:	4627      	mov	r7, r4
 8027cc4:	e7c7      	b.n	8027c56 <__gethex+0x9e>
 8027cc6:	464e      	mov	r6, r9
 8027cc8:	462f      	mov	r7, r5
 8027cca:	2501      	movs	r5, #1
 8027ccc:	e7c3      	b.n	8027c56 <__gethex+0x9e>
 8027cce:	2400      	movs	r4, #0
 8027cd0:	1cb1      	adds	r1, r6, #2
 8027cd2:	e7cc      	b.n	8027c6e <__gethex+0xb6>
 8027cd4:	2401      	movs	r4, #1
 8027cd6:	e7fb      	b.n	8027cd0 <__gethex+0x118>
 8027cd8:	fb03 0002 	mla	r0, r3, r2, r0
 8027cdc:	e7ce      	b.n	8027c7c <__gethex+0xc4>
 8027cde:	4631      	mov	r1, r6
 8027ce0:	e7de      	b.n	8027ca0 <__gethex+0xe8>
 8027ce2:	eba6 0309 	sub.w	r3, r6, r9
 8027ce6:	3b01      	subs	r3, #1
 8027ce8:	4629      	mov	r1, r5
 8027cea:	2b07      	cmp	r3, #7
 8027cec:	dc0a      	bgt.n	8027d04 <__gethex+0x14c>
 8027cee:	9801      	ldr	r0, [sp, #4]
 8027cf0:	f7fe f846 	bl	8025d80 <_Balloc>
 8027cf4:	4604      	mov	r4, r0
 8027cf6:	b940      	cbnz	r0, 8027d0a <__gethex+0x152>
 8027cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8027e6c <__gethex+0x2b4>)
 8027cfa:	4602      	mov	r2, r0
 8027cfc:	21e4      	movs	r1, #228	@ 0xe4
 8027cfe:	485c      	ldr	r0, [pc, #368]	@ (8027e70 <__gethex+0x2b8>)
 8027d00:	f7fb fdda 	bl	80238b8 <__assert_func>
 8027d04:	3101      	adds	r1, #1
 8027d06:	105b      	asrs	r3, r3, #1
 8027d08:	e7ef      	b.n	8027cea <__gethex+0x132>
 8027d0a:	f100 0a14 	add.w	sl, r0, #20
 8027d0e:	2300      	movs	r3, #0
 8027d10:	4655      	mov	r5, sl
 8027d12:	469b      	mov	fp, r3
 8027d14:	45b1      	cmp	r9, r6
 8027d16:	d337      	bcc.n	8027d88 <__gethex+0x1d0>
 8027d18:	f845 bb04 	str.w	fp, [r5], #4
 8027d1c:	eba5 050a 	sub.w	r5, r5, sl
 8027d20:	10ad      	asrs	r5, r5, #2
 8027d22:	6125      	str	r5, [r4, #16]
 8027d24:	4658      	mov	r0, fp
 8027d26:	f7fe f91d 	bl	8025f64 <__hi0bits>
 8027d2a:	016d      	lsls	r5, r5, #5
 8027d2c:	f8d8 6000 	ldr.w	r6, [r8]
 8027d30:	1a2d      	subs	r5, r5, r0
 8027d32:	42b5      	cmp	r5, r6
 8027d34:	dd54      	ble.n	8027de0 <__gethex+0x228>
 8027d36:	1bad      	subs	r5, r5, r6
 8027d38:	4629      	mov	r1, r5
 8027d3a:	4620      	mov	r0, r4
 8027d3c:	f7fe fcae 	bl	802669c <__any_on>
 8027d40:	4681      	mov	r9, r0
 8027d42:	b178      	cbz	r0, 8027d64 <__gethex+0x1ac>
 8027d44:	1e6b      	subs	r3, r5, #1
 8027d46:	1159      	asrs	r1, r3, #5
 8027d48:	f003 021f 	and.w	r2, r3, #31
 8027d4c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8027d50:	f04f 0901 	mov.w	r9, #1
 8027d54:	fa09 f202 	lsl.w	r2, r9, r2
 8027d58:	420a      	tst	r2, r1
 8027d5a:	d003      	beq.n	8027d64 <__gethex+0x1ac>
 8027d5c:	454b      	cmp	r3, r9
 8027d5e:	dc36      	bgt.n	8027dce <__gethex+0x216>
 8027d60:	f04f 0902 	mov.w	r9, #2
 8027d64:	4629      	mov	r1, r5
 8027d66:	4620      	mov	r0, r4
 8027d68:	f7ff febe 	bl	8027ae8 <rshift>
 8027d6c:	442f      	add	r7, r5
 8027d6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027d72:	42bb      	cmp	r3, r7
 8027d74:	da42      	bge.n	8027dfc <__gethex+0x244>
 8027d76:	9801      	ldr	r0, [sp, #4]
 8027d78:	4621      	mov	r1, r4
 8027d7a:	f7fe f841 	bl	8025e00 <_Bfree>
 8027d7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027d80:	2300      	movs	r3, #0
 8027d82:	6013      	str	r3, [r2, #0]
 8027d84:	25a3      	movs	r5, #163	@ 0xa3
 8027d86:	e793      	b.n	8027cb0 <__gethex+0xf8>
 8027d88:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8027d8c:	2a2e      	cmp	r2, #46	@ 0x2e
 8027d8e:	d012      	beq.n	8027db6 <__gethex+0x1fe>
 8027d90:	2b20      	cmp	r3, #32
 8027d92:	d104      	bne.n	8027d9e <__gethex+0x1e6>
 8027d94:	f845 bb04 	str.w	fp, [r5], #4
 8027d98:	f04f 0b00 	mov.w	fp, #0
 8027d9c:	465b      	mov	r3, fp
 8027d9e:	7830      	ldrb	r0, [r6, #0]
 8027da0:	9303      	str	r3, [sp, #12]
 8027da2:	f7ff fef3 	bl	8027b8c <__hexdig_fun>
 8027da6:	9b03      	ldr	r3, [sp, #12]
 8027da8:	f000 000f 	and.w	r0, r0, #15
 8027dac:	4098      	lsls	r0, r3
 8027dae:	ea4b 0b00 	orr.w	fp, fp, r0
 8027db2:	3304      	adds	r3, #4
 8027db4:	e7ae      	b.n	8027d14 <__gethex+0x15c>
 8027db6:	45b1      	cmp	r9, r6
 8027db8:	d8ea      	bhi.n	8027d90 <__gethex+0x1d8>
 8027dba:	492b      	ldr	r1, [pc, #172]	@ (8027e68 <__gethex+0x2b0>)
 8027dbc:	9303      	str	r3, [sp, #12]
 8027dbe:	2201      	movs	r2, #1
 8027dc0:	4630      	mov	r0, r6
 8027dc2:	f7fd f860 	bl	8024e86 <strncmp>
 8027dc6:	9b03      	ldr	r3, [sp, #12]
 8027dc8:	2800      	cmp	r0, #0
 8027dca:	d1e1      	bne.n	8027d90 <__gethex+0x1d8>
 8027dcc:	e7a2      	b.n	8027d14 <__gethex+0x15c>
 8027dce:	1ea9      	subs	r1, r5, #2
 8027dd0:	4620      	mov	r0, r4
 8027dd2:	f7fe fc63 	bl	802669c <__any_on>
 8027dd6:	2800      	cmp	r0, #0
 8027dd8:	d0c2      	beq.n	8027d60 <__gethex+0x1a8>
 8027dda:	f04f 0903 	mov.w	r9, #3
 8027dde:	e7c1      	b.n	8027d64 <__gethex+0x1ac>
 8027de0:	da09      	bge.n	8027df6 <__gethex+0x23e>
 8027de2:	1b75      	subs	r5, r6, r5
 8027de4:	4621      	mov	r1, r4
 8027de6:	9801      	ldr	r0, [sp, #4]
 8027de8:	462a      	mov	r2, r5
 8027dea:	f7fe fa21 	bl	8026230 <__lshift>
 8027dee:	1b7f      	subs	r7, r7, r5
 8027df0:	4604      	mov	r4, r0
 8027df2:	f100 0a14 	add.w	sl, r0, #20
 8027df6:	f04f 0900 	mov.w	r9, #0
 8027dfa:	e7b8      	b.n	8027d6e <__gethex+0x1b6>
 8027dfc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027e00:	42bd      	cmp	r5, r7
 8027e02:	dd6f      	ble.n	8027ee4 <__gethex+0x32c>
 8027e04:	1bed      	subs	r5, r5, r7
 8027e06:	42ae      	cmp	r6, r5
 8027e08:	dc34      	bgt.n	8027e74 <__gethex+0x2bc>
 8027e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027e0e:	2b02      	cmp	r3, #2
 8027e10:	d022      	beq.n	8027e58 <__gethex+0x2a0>
 8027e12:	2b03      	cmp	r3, #3
 8027e14:	d024      	beq.n	8027e60 <__gethex+0x2a8>
 8027e16:	2b01      	cmp	r3, #1
 8027e18:	d115      	bne.n	8027e46 <__gethex+0x28e>
 8027e1a:	42ae      	cmp	r6, r5
 8027e1c:	d113      	bne.n	8027e46 <__gethex+0x28e>
 8027e1e:	2e01      	cmp	r6, #1
 8027e20:	d10b      	bne.n	8027e3a <__gethex+0x282>
 8027e22:	9a02      	ldr	r2, [sp, #8]
 8027e24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8027e28:	6013      	str	r3, [r2, #0]
 8027e2a:	2301      	movs	r3, #1
 8027e2c:	6123      	str	r3, [r4, #16]
 8027e2e:	f8ca 3000 	str.w	r3, [sl]
 8027e32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027e34:	2562      	movs	r5, #98	@ 0x62
 8027e36:	601c      	str	r4, [r3, #0]
 8027e38:	e73a      	b.n	8027cb0 <__gethex+0xf8>
 8027e3a:	1e71      	subs	r1, r6, #1
 8027e3c:	4620      	mov	r0, r4
 8027e3e:	f7fe fc2d 	bl	802669c <__any_on>
 8027e42:	2800      	cmp	r0, #0
 8027e44:	d1ed      	bne.n	8027e22 <__gethex+0x26a>
 8027e46:	9801      	ldr	r0, [sp, #4]
 8027e48:	4621      	mov	r1, r4
 8027e4a:	f7fd ffd9 	bl	8025e00 <_Bfree>
 8027e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027e50:	2300      	movs	r3, #0
 8027e52:	6013      	str	r3, [r2, #0]
 8027e54:	2550      	movs	r5, #80	@ 0x50
 8027e56:	e72b      	b.n	8027cb0 <__gethex+0xf8>
 8027e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027e5a:	2b00      	cmp	r3, #0
 8027e5c:	d1f3      	bne.n	8027e46 <__gethex+0x28e>
 8027e5e:	e7e0      	b.n	8027e22 <__gethex+0x26a>
 8027e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	d1dd      	bne.n	8027e22 <__gethex+0x26a>
 8027e66:	e7ee      	b.n	8027e46 <__gethex+0x28e>
 8027e68:	080387d8 	.word	0x080387d8
 8027e6c:	0803866e 	.word	0x0803866e
 8027e70:	08038849 	.word	0x08038849
 8027e74:	1e6f      	subs	r7, r5, #1
 8027e76:	f1b9 0f00 	cmp.w	r9, #0
 8027e7a:	d130      	bne.n	8027ede <__gethex+0x326>
 8027e7c:	b127      	cbz	r7, 8027e88 <__gethex+0x2d0>
 8027e7e:	4639      	mov	r1, r7
 8027e80:	4620      	mov	r0, r4
 8027e82:	f7fe fc0b 	bl	802669c <__any_on>
 8027e86:	4681      	mov	r9, r0
 8027e88:	117a      	asrs	r2, r7, #5
 8027e8a:	2301      	movs	r3, #1
 8027e8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8027e90:	f007 071f 	and.w	r7, r7, #31
 8027e94:	40bb      	lsls	r3, r7
 8027e96:	4213      	tst	r3, r2
 8027e98:	4629      	mov	r1, r5
 8027e9a:	4620      	mov	r0, r4
 8027e9c:	bf18      	it	ne
 8027e9e:	f049 0902 	orrne.w	r9, r9, #2
 8027ea2:	f7ff fe21 	bl	8027ae8 <rshift>
 8027ea6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8027eaa:	1b76      	subs	r6, r6, r5
 8027eac:	2502      	movs	r5, #2
 8027eae:	f1b9 0f00 	cmp.w	r9, #0
 8027eb2:	d047      	beq.n	8027f44 <__gethex+0x38c>
 8027eb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027eb8:	2b02      	cmp	r3, #2
 8027eba:	d015      	beq.n	8027ee8 <__gethex+0x330>
 8027ebc:	2b03      	cmp	r3, #3
 8027ebe:	d017      	beq.n	8027ef0 <__gethex+0x338>
 8027ec0:	2b01      	cmp	r3, #1
 8027ec2:	d109      	bne.n	8027ed8 <__gethex+0x320>
 8027ec4:	f019 0f02 	tst.w	r9, #2
 8027ec8:	d006      	beq.n	8027ed8 <__gethex+0x320>
 8027eca:	f8da 3000 	ldr.w	r3, [sl]
 8027ece:	ea49 0903 	orr.w	r9, r9, r3
 8027ed2:	f019 0f01 	tst.w	r9, #1
 8027ed6:	d10e      	bne.n	8027ef6 <__gethex+0x33e>
 8027ed8:	f045 0510 	orr.w	r5, r5, #16
 8027edc:	e032      	b.n	8027f44 <__gethex+0x38c>
 8027ede:	f04f 0901 	mov.w	r9, #1
 8027ee2:	e7d1      	b.n	8027e88 <__gethex+0x2d0>
 8027ee4:	2501      	movs	r5, #1
 8027ee6:	e7e2      	b.n	8027eae <__gethex+0x2f6>
 8027ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027eea:	f1c3 0301 	rsb	r3, r3, #1
 8027eee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027ef2:	2b00      	cmp	r3, #0
 8027ef4:	d0f0      	beq.n	8027ed8 <__gethex+0x320>
 8027ef6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8027efa:	f104 0314 	add.w	r3, r4, #20
 8027efe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8027f02:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8027f06:	f04f 0c00 	mov.w	ip, #0
 8027f0a:	4618      	mov	r0, r3
 8027f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f10:	f1b2 3fff 	cmp.w	r2, #4294967295
 8027f14:	d01b      	beq.n	8027f4e <__gethex+0x396>
 8027f16:	3201      	adds	r2, #1
 8027f18:	6002      	str	r2, [r0, #0]
 8027f1a:	2d02      	cmp	r5, #2
 8027f1c:	f104 0314 	add.w	r3, r4, #20
 8027f20:	d13c      	bne.n	8027f9c <__gethex+0x3e4>
 8027f22:	f8d8 2000 	ldr.w	r2, [r8]
 8027f26:	3a01      	subs	r2, #1
 8027f28:	42b2      	cmp	r2, r6
 8027f2a:	d109      	bne.n	8027f40 <__gethex+0x388>
 8027f2c:	1171      	asrs	r1, r6, #5
 8027f2e:	2201      	movs	r2, #1
 8027f30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027f34:	f006 061f 	and.w	r6, r6, #31
 8027f38:	fa02 f606 	lsl.w	r6, r2, r6
 8027f3c:	421e      	tst	r6, r3
 8027f3e:	d13a      	bne.n	8027fb6 <__gethex+0x3fe>
 8027f40:	f045 0520 	orr.w	r5, r5, #32
 8027f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027f46:	601c      	str	r4, [r3, #0]
 8027f48:	9b02      	ldr	r3, [sp, #8]
 8027f4a:	601f      	str	r7, [r3, #0]
 8027f4c:	e6b0      	b.n	8027cb0 <__gethex+0xf8>
 8027f4e:	4299      	cmp	r1, r3
 8027f50:	f843 cc04 	str.w	ip, [r3, #-4]
 8027f54:	d8d9      	bhi.n	8027f0a <__gethex+0x352>
 8027f56:	68a3      	ldr	r3, [r4, #8]
 8027f58:	459b      	cmp	fp, r3
 8027f5a:	db17      	blt.n	8027f8c <__gethex+0x3d4>
 8027f5c:	6861      	ldr	r1, [r4, #4]
 8027f5e:	9801      	ldr	r0, [sp, #4]
 8027f60:	3101      	adds	r1, #1
 8027f62:	f7fd ff0d 	bl	8025d80 <_Balloc>
 8027f66:	4681      	mov	r9, r0
 8027f68:	b918      	cbnz	r0, 8027f72 <__gethex+0x3ba>
 8027f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8027fd4 <__gethex+0x41c>)
 8027f6c:	4602      	mov	r2, r0
 8027f6e:	2184      	movs	r1, #132	@ 0x84
 8027f70:	e6c5      	b.n	8027cfe <__gethex+0x146>
 8027f72:	6922      	ldr	r2, [r4, #16]
 8027f74:	3202      	adds	r2, #2
 8027f76:	f104 010c 	add.w	r1, r4, #12
 8027f7a:	0092      	lsls	r2, r2, #2
 8027f7c:	300c      	adds	r0, #12
 8027f7e:	f7fd f8b8 	bl	80250f2 <memcpy>
 8027f82:	4621      	mov	r1, r4
 8027f84:	9801      	ldr	r0, [sp, #4]
 8027f86:	f7fd ff3b 	bl	8025e00 <_Bfree>
 8027f8a:	464c      	mov	r4, r9
 8027f8c:	6923      	ldr	r3, [r4, #16]
 8027f8e:	1c5a      	adds	r2, r3, #1
 8027f90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027f94:	6122      	str	r2, [r4, #16]
 8027f96:	2201      	movs	r2, #1
 8027f98:	615a      	str	r2, [r3, #20]
 8027f9a:	e7be      	b.n	8027f1a <__gethex+0x362>
 8027f9c:	6922      	ldr	r2, [r4, #16]
 8027f9e:	455a      	cmp	r2, fp
 8027fa0:	dd0b      	ble.n	8027fba <__gethex+0x402>
 8027fa2:	2101      	movs	r1, #1
 8027fa4:	4620      	mov	r0, r4
 8027fa6:	f7ff fd9f 	bl	8027ae8 <rshift>
 8027faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027fae:	3701      	adds	r7, #1
 8027fb0:	42bb      	cmp	r3, r7
 8027fb2:	f6ff aee0 	blt.w	8027d76 <__gethex+0x1be>
 8027fb6:	2501      	movs	r5, #1
 8027fb8:	e7c2      	b.n	8027f40 <__gethex+0x388>
 8027fba:	f016 061f 	ands.w	r6, r6, #31
 8027fbe:	d0fa      	beq.n	8027fb6 <__gethex+0x3fe>
 8027fc0:	4453      	add	r3, sl
 8027fc2:	f1c6 0620 	rsb	r6, r6, #32
 8027fc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8027fca:	f7fd ffcb 	bl	8025f64 <__hi0bits>
 8027fce:	42b0      	cmp	r0, r6
 8027fd0:	dbe7      	blt.n	8027fa2 <__gethex+0x3ea>
 8027fd2:	e7f0      	b.n	8027fb6 <__gethex+0x3fe>
 8027fd4:	0803866e 	.word	0x0803866e

08027fd8 <L_shift>:
 8027fd8:	f1c2 0208 	rsb	r2, r2, #8
 8027fdc:	0092      	lsls	r2, r2, #2
 8027fde:	b570      	push	{r4, r5, r6, lr}
 8027fe0:	f1c2 0620 	rsb	r6, r2, #32
 8027fe4:	6843      	ldr	r3, [r0, #4]
 8027fe6:	6804      	ldr	r4, [r0, #0]
 8027fe8:	fa03 f506 	lsl.w	r5, r3, r6
 8027fec:	432c      	orrs	r4, r5
 8027fee:	40d3      	lsrs	r3, r2
 8027ff0:	6004      	str	r4, [r0, #0]
 8027ff2:	f840 3f04 	str.w	r3, [r0, #4]!
 8027ff6:	4288      	cmp	r0, r1
 8027ff8:	d3f4      	bcc.n	8027fe4 <L_shift+0xc>
 8027ffa:	bd70      	pop	{r4, r5, r6, pc}

08027ffc <__match>:
 8027ffc:	b530      	push	{r4, r5, lr}
 8027ffe:	6803      	ldr	r3, [r0, #0]
 8028000:	3301      	adds	r3, #1
 8028002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028006:	b914      	cbnz	r4, 802800e <__match+0x12>
 8028008:	6003      	str	r3, [r0, #0]
 802800a:	2001      	movs	r0, #1
 802800c:	bd30      	pop	{r4, r5, pc}
 802800e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028012:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8028016:	2d19      	cmp	r5, #25
 8028018:	bf98      	it	ls
 802801a:	3220      	addls	r2, #32
 802801c:	42a2      	cmp	r2, r4
 802801e:	d0f0      	beq.n	8028002 <__match+0x6>
 8028020:	2000      	movs	r0, #0
 8028022:	e7f3      	b.n	802800c <__match+0x10>

08028024 <__hexnan>:
 8028024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028028:	680b      	ldr	r3, [r1, #0]
 802802a:	6801      	ldr	r1, [r0, #0]
 802802c:	115e      	asrs	r6, r3, #5
 802802e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028032:	f013 031f 	ands.w	r3, r3, #31
 8028036:	b087      	sub	sp, #28
 8028038:	bf18      	it	ne
 802803a:	3604      	addne	r6, #4
 802803c:	2500      	movs	r5, #0
 802803e:	1f37      	subs	r7, r6, #4
 8028040:	4682      	mov	sl, r0
 8028042:	4690      	mov	r8, r2
 8028044:	9301      	str	r3, [sp, #4]
 8028046:	f846 5c04 	str.w	r5, [r6, #-4]
 802804a:	46b9      	mov	r9, r7
 802804c:	463c      	mov	r4, r7
 802804e:	9502      	str	r5, [sp, #8]
 8028050:	46ab      	mov	fp, r5
 8028052:	784a      	ldrb	r2, [r1, #1]
 8028054:	1c4b      	adds	r3, r1, #1
 8028056:	9303      	str	r3, [sp, #12]
 8028058:	b342      	cbz	r2, 80280ac <__hexnan+0x88>
 802805a:	4610      	mov	r0, r2
 802805c:	9105      	str	r1, [sp, #20]
 802805e:	9204      	str	r2, [sp, #16]
 8028060:	f7ff fd94 	bl	8027b8c <__hexdig_fun>
 8028064:	2800      	cmp	r0, #0
 8028066:	d151      	bne.n	802810c <__hexnan+0xe8>
 8028068:	9a04      	ldr	r2, [sp, #16]
 802806a:	9905      	ldr	r1, [sp, #20]
 802806c:	2a20      	cmp	r2, #32
 802806e:	d818      	bhi.n	80280a2 <__hexnan+0x7e>
 8028070:	9b02      	ldr	r3, [sp, #8]
 8028072:	459b      	cmp	fp, r3
 8028074:	dd13      	ble.n	802809e <__hexnan+0x7a>
 8028076:	454c      	cmp	r4, r9
 8028078:	d206      	bcs.n	8028088 <__hexnan+0x64>
 802807a:	2d07      	cmp	r5, #7
 802807c:	dc04      	bgt.n	8028088 <__hexnan+0x64>
 802807e:	462a      	mov	r2, r5
 8028080:	4649      	mov	r1, r9
 8028082:	4620      	mov	r0, r4
 8028084:	f7ff ffa8 	bl	8027fd8 <L_shift>
 8028088:	4544      	cmp	r4, r8
 802808a:	d952      	bls.n	8028132 <__hexnan+0x10e>
 802808c:	2300      	movs	r3, #0
 802808e:	f1a4 0904 	sub.w	r9, r4, #4
 8028092:	f844 3c04 	str.w	r3, [r4, #-4]
 8028096:	f8cd b008 	str.w	fp, [sp, #8]
 802809a:	464c      	mov	r4, r9
 802809c:	461d      	mov	r5, r3
 802809e:	9903      	ldr	r1, [sp, #12]
 80280a0:	e7d7      	b.n	8028052 <__hexnan+0x2e>
 80280a2:	2a29      	cmp	r2, #41	@ 0x29
 80280a4:	d157      	bne.n	8028156 <__hexnan+0x132>
 80280a6:	3102      	adds	r1, #2
 80280a8:	f8ca 1000 	str.w	r1, [sl]
 80280ac:	f1bb 0f00 	cmp.w	fp, #0
 80280b0:	d051      	beq.n	8028156 <__hexnan+0x132>
 80280b2:	454c      	cmp	r4, r9
 80280b4:	d206      	bcs.n	80280c4 <__hexnan+0xa0>
 80280b6:	2d07      	cmp	r5, #7
 80280b8:	dc04      	bgt.n	80280c4 <__hexnan+0xa0>
 80280ba:	462a      	mov	r2, r5
 80280bc:	4649      	mov	r1, r9
 80280be:	4620      	mov	r0, r4
 80280c0:	f7ff ff8a 	bl	8027fd8 <L_shift>
 80280c4:	4544      	cmp	r4, r8
 80280c6:	d936      	bls.n	8028136 <__hexnan+0x112>
 80280c8:	f1a8 0204 	sub.w	r2, r8, #4
 80280cc:	4623      	mov	r3, r4
 80280ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80280d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80280d6:	429f      	cmp	r7, r3
 80280d8:	d2f9      	bcs.n	80280ce <__hexnan+0xaa>
 80280da:	1b3b      	subs	r3, r7, r4
 80280dc:	f023 0303 	bic.w	r3, r3, #3
 80280e0:	3304      	adds	r3, #4
 80280e2:	3401      	adds	r4, #1
 80280e4:	3e03      	subs	r6, #3
 80280e6:	42b4      	cmp	r4, r6
 80280e8:	bf88      	it	hi
 80280ea:	2304      	movhi	r3, #4
 80280ec:	4443      	add	r3, r8
 80280ee:	2200      	movs	r2, #0
 80280f0:	f843 2b04 	str.w	r2, [r3], #4
 80280f4:	429f      	cmp	r7, r3
 80280f6:	d2fb      	bcs.n	80280f0 <__hexnan+0xcc>
 80280f8:	683b      	ldr	r3, [r7, #0]
 80280fa:	b91b      	cbnz	r3, 8028104 <__hexnan+0xe0>
 80280fc:	4547      	cmp	r7, r8
 80280fe:	d128      	bne.n	8028152 <__hexnan+0x12e>
 8028100:	2301      	movs	r3, #1
 8028102:	603b      	str	r3, [r7, #0]
 8028104:	2005      	movs	r0, #5
 8028106:	b007      	add	sp, #28
 8028108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802810c:	3501      	adds	r5, #1
 802810e:	2d08      	cmp	r5, #8
 8028110:	f10b 0b01 	add.w	fp, fp, #1
 8028114:	dd06      	ble.n	8028124 <__hexnan+0x100>
 8028116:	4544      	cmp	r4, r8
 8028118:	d9c1      	bls.n	802809e <__hexnan+0x7a>
 802811a:	2300      	movs	r3, #0
 802811c:	f844 3c04 	str.w	r3, [r4, #-4]
 8028120:	2501      	movs	r5, #1
 8028122:	3c04      	subs	r4, #4
 8028124:	6822      	ldr	r2, [r4, #0]
 8028126:	f000 000f 	and.w	r0, r0, #15
 802812a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802812e:	6020      	str	r0, [r4, #0]
 8028130:	e7b5      	b.n	802809e <__hexnan+0x7a>
 8028132:	2508      	movs	r5, #8
 8028134:	e7b3      	b.n	802809e <__hexnan+0x7a>
 8028136:	9b01      	ldr	r3, [sp, #4]
 8028138:	2b00      	cmp	r3, #0
 802813a:	d0dd      	beq.n	80280f8 <__hexnan+0xd4>
 802813c:	f1c3 0320 	rsb	r3, r3, #32
 8028140:	f04f 32ff 	mov.w	r2, #4294967295
 8028144:	40da      	lsrs	r2, r3
 8028146:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802814a:	4013      	ands	r3, r2
 802814c:	f846 3c04 	str.w	r3, [r6, #-4]
 8028150:	e7d2      	b.n	80280f8 <__hexnan+0xd4>
 8028152:	3f04      	subs	r7, #4
 8028154:	e7d0      	b.n	80280f8 <__hexnan+0xd4>
 8028156:	2004      	movs	r0, #4
 8028158:	e7d5      	b.n	8028106 <__hexnan+0xe2>

0802815a <__ascii_mbtowc>:
 802815a:	b082      	sub	sp, #8
 802815c:	b901      	cbnz	r1, 8028160 <__ascii_mbtowc+0x6>
 802815e:	a901      	add	r1, sp, #4
 8028160:	b142      	cbz	r2, 8028174 <__ascii_mbtowc+0x1a>
 8028162:	b14b      	cbz	r3, 8028178 <__ascii_mbtowc+0x1e>
 8028164:	7813      	ldrb	r3, [r2, #0]
 8028166:	600b      	str	r3, [r1, #0]
 8028168:	7812      	ldrb	r2, [r2, #0]
 802816a:	1e10      	subs	r0, r2, #0
 802816c:	bf18      	it	ne
 802816e:	2001      	movne	r0, #1
 8028170:	b002      	add	sp, #8
 8028172:	4770      	bx	lr
 8028174:	4610      	mov	r0, r2
 8028176:	e7fb      	b.n	8028170 <__ascii_mbtowc+0x16>
 8028178:	f06f 0001 	mvn.w	r0, #1
 802817c:	e7f8      	b.n	8028170 <__ascii_mbtowc+0x16>

0802817e <_realloc_r>:
 802817e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028182:	4680      	mov	r8, r0
 8028184:	4615      	mov	r5, r2
 8028186:	460c      	mov	r4, r1
 8028188:	b921      	cbnz	r1, 8028194 <_realloc_r+0x16>
 802818a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802818e:	4611      	mov	r1, r2
 8028190:	f7fb bc02 	b.w	8023998 <_malloc_r>
 8028194:	b92a      	cbnz	r2, 80281a2 <_realloc_r+0x24>
 8028196:	f7fd fda9 	bl	8025cec <_free_r>
 802819a:	2400      	movs	r4, #0
 802819c:	4620      	mov	r0, r4
 802819e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80281a2:	f000 f827 	bl	80281f4 <_malloc_usable_size_r>
 80281a6:	4285      	cmp	r5, r0
 80281a8:	4606      	mov	r6, r0
 80281aa:	d802      	bhi.n	80281b2 <_realloc_r+0x34>
 80281ac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80281b0:	d8f4      	bhi.n	802819c <_realloc_r+0x1e>
 80281b2:	4629      	mov	r1, r5
 80281b4:	4640      	mov	r0, r8
 80281b6:	f7fb fbef 	bl	8023998 <_malloc_r>
 80281ba:	4607      	mov	r7, r0
 80281bc:	2800      	cmp	r0, #0
 80281be:	d0ec      	beq.n	802819a <_realloc_r+0x1c>
 80281c0:	42b5      	cmp	r5, r6
 80281c2:	462a      	mov	r2, r5
 80281c4:	4621      	mov	r1, r4
 80281c6:	bf28      	it	cs
 80281c8:	4632      	movcs	r2, r6
 80281ca:	f7fc ff92 	bl	80250f2 <memcpy>
 80281ce:	4621      	mov	r1, r4
 80281d0:	4640      	mov	r0, r8
 80281d2:	f7fd fd8b 	bl	8025cec <_free_r>
 80281d6:	463c      	mov	r4, r7
 80281d8:	e7e0      	b.n	802819c <_realloc_r+0x1e>

080281da <__ascii_wctomb>:
 80281da:	4603      	mov	r3, r0
 80281dc:	4608      	mov	r0, r1
 80281de:	b141      	cbz	r1, 80281f2 <__ascii_wctomb+0x18>
 80281e0:	2aff      	cmp	r2, #255	@ 0xff
 80281e2:	d904      	bls.n	80281ee <__ascii_wctomb+0x14>
 80281e4:	228a      	movs	r2, #138	@ 0x8a
 80281e6:	601a      	str	r2, [r3, #0]
 80281e8:	f04f 30ff 	mov.w	r0, #4294967295
 80281ec:	4770      	bx	lr
 80281ee:	700a      	strb	r2, [r1, #0]
 80281f0:	2001      	movs	r0, #1
 80281f2:	4770      	bx	lr

080281f4 <_malloc_usable_size_r>:
 80281f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80281f8:	1f18      	subs	r0, r3, #4
 80281fa:	2b00      	cmp	r3, #0
 80281fc:	bfbc      	itt	lt
 80281fe:	580b      	ldrlt	r3, [r1, r0]
 8028200:	18c0      	addlt	r0, r0, r3
 8028202:	4770      	bx	lr

08028204 <_init>:
 8028204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028206:	bf00      	nop
 8028208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802820a:	bc08      	pop	{r3}
 802820c:	469e      	mov	lr, r3
 802820e:	4770      	bx	lr

08028210 <_fini>:
 8028210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028212:	bf00      	nop
 8028214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028216:	bc08      	pop	{r3}
 8028218:	469e      	mov	lr, r3
 802821a:	4770      	bx	lr

Disassembly of section .iram:

0802821c <mg_ota_boot>:
MG_IRAM void mg_ota_boot(void) {
 802821c:	b580      	push	{r7, lr}
 802821e:	b088      	sub	sp, #32
 8028220:	af00      	add	r7, sp, #0
  MG_INFO(("Booting. Flash bank: %d", mg_flash_bank()));
 8028222:	4b2d      	ldr	r3, [pc, #180]	@ (80282d8 <mg_ota_boot+0xbc>)
 8028224:	681b      	ldr	r3, [r3, #0]
 8028226:	2b01      	cmp	r3, #1
 8028228:	dd0d      	ble.n	8028246 <mg_ota_boot+0x2a>
 802822a:	4b2c      	ldr	r3, [pc, #176]	@ (80282dc <mg_ota_boot+0xc0>)
 802822c:	f641 12ac 	movw	r2, #6572	@ 0x19ac
 8028230:	492b      	ldr	r1, [pc, #172]	@ (80282e0 <mg_ota_boot+0xc4>)
 8028232:	2002      	movs	r0, #2
 8028234:	f7df fef8 	bl	8008028 <mg_log_prefix>
 8028238:	f000 f881 	bl	802833e <mg_flash_bank>
 802823c:	4603      	mov	r3, r0
 802823e:	4619      	mov	r1, r3
 8028240:	4828      	ldr	r0, [pc, #160]	@ (80282e4 <mg_ota_boot+0xc8>)
 8028242:	f7df ff41 	bl	80080c8 <mg_log>
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 8028246:	f107 0310 	add.w	r3, r7, #16
 802824a:	2100      	movs	r1, #0
 802824c:	4618      	mov	r0, r3
 802824e:	f000 fb41 	bl	80288d4 <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 8028252:	463b      	mov	r3, r7
 8028254:	2101      	movs	r1, #1
 8028256:	4618      	mov	r0, r3
 8028258:	f000 fb3c 	bl	80288d4 <mg_otadata>
  if (curr.status == MG_OTA_FIRST_BOOT) {
 802825c:	69fb      	ldr	r3, [r7, #28]
 802825e:	2b01      	cmp	r3, #1
 8028260:	d135      	bne.n	80282ce <mg_ota_boot+0xb2>
    if (prev.status == MG_OTA_UNAVAILABLE) {
 8028262:	68fb      	ldr	r3, [r7, #12]
 8028264:	2b00      	cmp	r3, #0
 8028266:	d118      	bne.n	802829a <mg_ota_boot+0x7e>
      MG_INFO(("Setting previous firmware state to committed"));
 8028268:	4b1b      	ldr	r3, [pc, #108]	@ (80282d8 <mg_ota_boot+0xbc>)
 802826a:	681b      	ldr	r3, [r3, #0]
 802826c:	2b01      	cmp	r3, #1
 802826e:	dd09      	ble.n	8028284 <mg_ota_boot+0x68>
 8028270:	4b1a      	ldr	r3, [pc, #104]	@ (80282dc <mg_ota_boot+0xc0>)
 8028272:	f641 12b2 	movw	r2, #6578	@ 0x19b2
 8028276:	491a      	ldr	r1, [pc, #104]	@ (80282e0 <mg_ota_boot+0xc4>)
 8028278:	2002      	movs	r0, #2
 802827a:	f7df fed5 	bl	8008028 <mg_log_prefix>
 802827e:	481a      	ldr	r0, [pc, #104]	@ (80282e8 <mg_ota_boot+0xcc>)
 8028280:	f7df ff22 	bl	80080c8 <mg_log>
      prev.status = MG_OTA_COMMITTED;
 8028284:	2303      	movs	r3, #3
 8028286:	60fb      	str	r3, [r7, #12]
      mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_PREVIOUS), &prev, sizeof(prev));
 8028288:	2001      	movs	r0, #1
 802828a:	f000 faff 	bl	802888c <mg_fwkey>
 802828e:	4601      	mov	r1, r0
 8028290:	463a      	mov	r2, r7
 8028292:	2310      	movs	r3, #16
 8028294:	2000      	movs	r0, #0
 8028296:	f7d9 fc07 	bl	8001aa8 <mg_flash_save>
    curr.status = MG_OTA_UNCOMMITTED;
 802829a:	2302      	movs	r3, #2
 802829c:	61fb      	str	r3, [r7, #28]
    MG_INFO(("First boot, setting status to UNCOMMITTED"));
 802829e:	4b0e      	ldr	r3, [pc, #56]	@ (80282d8 <mg_ota_boot+0xbc>)
 80282a0:	681b      	ldr	r3, [r3, #0]
 80282a2:	2b01      	cmp	r3, #1
 80282a4:	dd09      	ble.n	80282ba <mg_ota_boot+0x9e>
 80282a6:	4b0d      	ldr	r3, [pc, #52]	@ (80282dc <mg_ota_boot+0xc0>)
 80282a8:	f641 12b7 	movw	r2, #6583	@ 0x19b7
 80282ac:	490c      	ldr	r1, [pc, #48]	@ (80282e0 <mg_ota_boot+0xc4>)
 80282ae:	2002      	movs	r0, #2
 80282b0:	f7df feba 	bl	8008028 <mg_log_prefix>
 80282b4:	480d      	ldr	r0, [pc, #52]	@ (80282ec <mg_ota_boot+0xd0>)
 80282b6:	f7df ff07 	bl	80080c8 <mg_log>
    mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &curr, sizeof(curr));
 80282ba:	2000      	movs	r0, #0
 80282bc:	f000 fae6 	bl	802888c <mg_fwkey>
 80282c0:	4601      	mov	r1, r0
 80282c2:	f107 0210 	add.w	r2, r7, #16
 80282c6:	2310      	movs	r3, #16
 80282c8:	2000      	movs	r0, #0
 80282ca:	f7d9 fbed 	bl	8001aa8 <mg_flash_save>
}
 80282ce:	bf00      	nop
 80282d0:	3720      	adds	r7, #32
 80282d2:	46bd      	mov	sp, r7
 80282d4:	bd80      	pop	{r7, pc}
 80282d6:	bf00      	nop
 80282d8:	24000240 	.word	0x24000240
 80282dc:	0802c02c 	.word	0x0802c02c
 80282e0:	08028ac4 	.word	0x08028ac4
 80282e4:	08028adc 	.word	0x08028adc
 80282e8:	08028af4 	.word	0x08028af4
 80282ec:	08028b24 	.word	0x08028b24

080282f0 <mg_flash_start>:
MG_IRAM void *mg_flash_start(void) {
 80282f0:	b480      	push	{r7}
 80282f2:	af00      	add	r7, sp, #0
  return (void *) 0x08000000;
 80282f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
}
 80282f8:	4618      	mov	r0, r3
 80282fa:	46bd      	mov	sp, r7
 80282fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028300:	4770      	bx	lr

08028302 <mg_flash_size>:
MG_IRAM size_t mg_flash_size(void) {
 8028302:	b480      	push	{r7}
 8028304:	af00      	add	r7, sp, #0
  return MG_REG(FLASH_SIZE_REG) * 1024;
 8028306:	4b04      	ldr	r3, [pc, #16]	@ (8028318 <mg_flash_size+0x16>)
 8028308:	681b      	ldr	r3, [r3, #0]
 802830a:	029b      	lsls	r3, r3, #10
}
 802830c:	4618      	mov	r0, r3
 802830e:	46bd      	mov	sp, r7
 8028310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028314:	4770      	bx	lr
 8028316:	bf00      	nop
 8028318:	1ff1e880 	.word	0x1ff1e880

0802831c <mg_flash_sector_size>:
MG_IRAM size_t mg_flash_sector_size(void) {
 802831c:	b480      	push	{r7}
 802831e:	af00      	add	r7, sp, #0
  return 128 * 1024;  // 128k
 8028320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
}
 8028324:	4618      	mov	r0, r3
 8028326:	46bd      	mov	sp, r7
 8028328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802832c:	4770      	bx	lr

0802832e <mg_flash_write_align>:
MG_IRAM size_t mg_flash_write_align(void) {
 802832e:	b480      	push	{r7}
 8028330:	af00      	add	r7, sp, #0
  return 32;  // 256 bit
 8028332:	2320      	movs	r3, #32
}
 8028334:	4618      	mov	r0, r3
 8028336:	46bd      	mov	sp, r7
 8028338:	f85d 7b04 	ldr.w	r7, [sp], #4
 802833c:	4770      	bx	lr

0802833e <mg_flash_bank>:
MG_IRAM int mg_flash_bank(void) {
 802833e:	b580      	push	{r7, lr}
 8028340:	af00      	add	r7, sp, #0
  if (mg_flash_size() < 2 * 1024 * 1024) return 0;  // No dual bank support
 8028342:	f7ff ffde 	bl	8028302 <mg_flash_size>
 8028346:	4603      	mov	r3, r0
 8028348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802834c:	d201      	bcs.n	8028352 <mg_flash_bank+0x14>
 802834e:	2300      	movs	r3, #0
 8028350:	e006      	b.n	8028360 <mg_flash_bank+0x22>
  return MG_REG(FLASH_BASE1 + FLASH_OPTCR) & MG_BIT(31) ? 2 : 1;
 8028352:	4b04      	ldr	r3, [pc, #16]	@ (8028364 <mg_flash_bank+0x26>)
 8028354:	681b      	ldr	r3, [r3, #0]
 8028356:	2b00      	cmp	r3, #0
 8028358:	da01      	bge.n	802835e <mg_flash_bank+0x20>
 802835a:	2302      	movs	r3, #2
 802835c:	e000      	b.n	8028360 <mg_flash_bank+0x22>
 802835e:	2301      	movs	r3, #1
}
 8028360:	4618      	mov	r0, r3
 8028362:	bd80      	pop	{r7, pc}
 8028364:	52002018 	.word	0x52002018

08028368 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
 8028368:	b580      	push	{r7, lr}
 802836a:	af00      	add	r7, sp, #0
  if (unlocked == false) {
 802836c:	4b11      	ldr	r3, [pc, #68]	@ (80283b4 <flash_unlock+0x4c>)
 802836e:	781b      	ldrb	r3, [r3, #0]
 8028370:	f083 0301 	eor.w	r3, r3, #1
 8028374:	b2db      	uxtb	r3, r3
 8028376:	2b00      	cmp	r3, #0
 8028378:	d019      	beq.n	80283ae <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
 802837a:	4b0f      	ldr	r3, [pc, #60]	@ (80283b8 <flash_unlock+0x50>)
 802837c:	4a0f      	ldr	r2, [pc, #60]	@ (80283bc <flash_unlock+0x54>)
 802837e:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
 8028380:	4b0d      	ldr	r3, [pc, #52]	@ (80283b8 <flash_unlock+0x50>)
 8028382:	4a0f      	ldr	r2, [pc, #60]	@ (80283c0 <flash_unlock+0x58>)
 8028384:	601a      	str	r2, [r3, #0]
    if (mg_flash_bank() > 0) {
 8028386:	f7ff ffda 	bl	802833e <mg_flash_bank>
 802838a:	4603      	mov	r3, r0
 802838c:	2b00      	cmp	r3, #0
 802838e:	dd05      	ble.n	802839c <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
 8028390:	4b0c      	ldr	r3, [pc, #48]	@ (80283c4 <flash_unlock+0x5c>)
 8028392:	4a0a      	ldr	r2, [pc, #40]	@ (80283bc <flash_unlock+0x54>)
 8028394:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
 8028396:	4b0b      	ldr	r3, [pc, #44]	@ (80283c4 <flash_unlock+0x5c>)
 8028398:	4a09      	ldr	r2, [pc, #36]	@ (80283c0 <flash_unlock+0x58>)
 802839a:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
 802839c:	4b0a      	ldr	r3, [pc, #40]	@ (80283c8 <flash_unlock+0x60>)
 802839e:	4a0b      	ldr	r2, [pc, #44]	@ (80283cc <flash_unlock+0x64>)
 80283a0:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
 80283a2:	4b09      	ldr	r3, [pc, #36]	@ (80283c8 <flash_unlock+0x60>)
 80283a4:	4a0a      	ldr	r2, [pc, #40]	@ (80283d0 <flash_unlock+0x68>)
 80283a6:	601a      	str	r2, [r3, #0]
    unlocked = true;
 80283a8:	4b02      	ldr	r3, [pc, #8]	@ (80283b4 <flash_unlock+0x4c>)
 80283aa:	2201      	movs	r2, #1
 80283ac:	701a      	strb	r2, [r3, #0]
}
 80283ae:	bf00      	nop
 80283b0:	bd80      	pop	{r7, pc}
 80283b2:	bf00      	nop
 80283b4:	24003e88 	.word	0x24003e88
 80283b8:	52002004 	.word	0x52002004
 80283bc:	45670123 	.word	0x45670123
 80283c0:	cdef89ab 	.word	0xcdef89ab
 80283c4:	52002104 	.word	0x52002104
 80283c8:	52002008 	.word	0x52002008
 80283cc:	08192a3b 	.word	0x08192a3b
 80283d0:	4c5d6e7f 	.word	0x4c5d6e7f

080283d4 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
 80283d4:	b590      	push	{r4, r7, lr}
 80283d6:	b087      	sub	sp, #28
 80283d8:	af00      	add	r7, sp, #0
 80283da:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *end = base + mg_flash_size();
 80283dc:	f7ff ff88 	bl	80282f0 <mg_flash_start>
 80283e0:	6178      	str	r0, [r7, #20]
 80283e2:	f7ff ff8e 	bl	8028302 <mg_flash_size>
 80283e6:	4602      	mov	r2, r0
 80283e8:	697b      	ldr	r3, [r7, #20]
 80283ea:	4413      	add	r3, r2
 80283ec:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
 80283ee:	687b      	ldr	r3, [r7, #4]
 80283f0:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % mg_flash_sector_size()) == 0;
 80283f2:	68fa      	ldr	r2, [r7, #12]
 80283f4:	697b      	ldr	r3, [r7, #20]
 80283f6:	429a      	cmp	r2, r3
 80283f8:	d313      	bcc.n	8028422 <flash_page_start+0x4e>
 80283fa:	68fa      	ldr	r2, [r7, #12]
 80283fc:	693b      	ldr	r3, [r7, #16]
 80283fe:	429a      	cmp	r2, r3
 8028400:	d20f      	bcs.n	8028422 <flash_page_start+0x4e>
 8028402:	68fa      	ldr	r2, [r7, #12]
 8028404:	697b      	ldr	r3, [r7, #20]
 8028406:	1ad3      	subs	r3, r2, r3
 8028408:	461c      	mov	r4, r3
 802840a:	f7ff ff87 	bl	802831c <mg_flash_sector_size>
 802840e:	4603      	mov	r3, r0
 8028410:	fbb4 f2f3 	udiv	r2, r4, r3
 8028414:	fb02 f303 	mul.w	r3, r2, r3
 8028418:	1ae3      	subs	r3, r4, r3
 802841a:	2b00      	cmp	r3, #0
 802841c:	d101      	bne.n	8028422 <flash_page_start+0x4e>
 802841e:	2301      	movs	r3, #1
 8028420:	e000      	b.n	8028424 <flash_page_start+0x50>
 8028422:	2300      	movs	r3, #0
 8028424:	f003 0301 	and.w	r3, r3, #1
 8028428:	b2db      	uxtb	r3, r3
}
 802842a:	4618      	mov	r0, r3
 802842c:	371c      	adds	r7, #28
 802842e:	46bd      	mov	sp, r7
 8028430:	bd90      	pop	{r4, r7, pc}

08028432 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
 8028432:	b480      	push	{r7}
 8028434:	b083      	sub	sp, #12
 8028436:	af00      	add	r7, sp, #0
 8028438:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
 802843a:	687b      	ldr	r3, [r7, #4]
 802843c:	3310      	adds	r3, #16
 802843e:	681a      	ldr	r2, [r3, #0]
 8028440:	4b06      	ldr	r3, [pc, #24]	@ (802845c <flash_is_err+0x2a>)
 8028442:	4013      	ands	r3, r2
 8028444:	2b00      	cmp	r3, #0
 8028446:	bf14      	ite	ne
 8028448:	2301      	movne	r3, #1
 802844a:	2300      	moveq	r3, #0
 802844c:	b2db      	uxtb	r3, r3
}
 802844e:	4618      	mov	r0, r3
 8028450:	370c      	adds	r7, #12
 8028452:	46bd      	mov	sp, r7
 8028454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028458:	4770      	bx	lr
 802845a:	bf00      	nop
 802845c:	0ffe0000 	.word	0x0ffe0000

08028460 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
 8028460:	b480      	push	{r7}
 8028462:	b083      	sub	sp, #12
 8028464:	af00      	add	r7, sp, #0
 8028466:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
 8028468:	bf00      	nop
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	3310      	adds	r3, #16
 802846e:	681b      	ldr	r3, [r3, #0]
 8028470:	f003 0305 	and.w	r3, r3, #5
 8028474:	2b00      	cmp	r3, #0
 8028476:	d1f8      	bne.n	802846a <flash_wait+0xa>
}
 8028478:	bf00      	nop
 802847a:	bf00      	nop
 802847c:	370c      	adds	r7, #12
 802847e:	46bd      	mov	sp, r7
 8028480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028484:	4770      	bx	lr

08028486 <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
 8028486:	b580      	push	{r7, lr}
 8028488:	b082      	sub	sp, #8
 802848a:	af00      	add	r7, sp, #0
 802848c:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
 802848e:	6878      	ldr	r0, [r7, #4]
 8028490:	f7ff ffe6 	bl	8028460 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
 8028494:	687b      	ldr	r3, [r7, #4]
 8028496:	3314      	adds	r3, #20
 8028498:	461a      	mov	r2, r3
 802849a:	4b03      	ldr	r3, [pc, #12]	@ (80284a8 <flash_clear_err+0x22>)
 802849c:	6013      	str	r3, [r2, #0]
}
 802849e:	bf00      	nop
 80284a0:	3708      	adds	r7, #8
 80284a2:	46bd      	mov	sp, r7
 80284a4:	bd80      	pop	{r7, pc}
 80284a6:	bf00      	nop
 80284a8:	07ff0000 	.word	0x07ff0000

080284ac <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
 80284ac:	b480      	push	{r7}
 80284ae:	b083      	sub	sp, #12
 80284b0:	af00      	add	r7, sp, #0
 80284b2:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
 80284b4:	687b      	ldr	r3, [r7, #4]
 80284b6:	3318      	adds	r3, #24
 80284b8:	681b      	ldr	r3, [r3, #0]
 80284ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80284be:	2b00      	cmp	r3, #0
 80284c0:	bf14      	ite	ne
 80284c2:	2301      	movne	r3, #1
 80284c4:	2300      	moveq	r3, #0
 80284c6:	b2db      	uxtb	r3, r3
}
 80284c8:	4618      	mov	r0, r3
 80284ca:	370c      	adds	r7, #12
 80284cc:	46bd      	mov	sp, r7
 80284ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284d2:	4770      	bx	lr

080284d4 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
 80284d4:	b580      	push	{r7, lr}
 80284d6:	b084      	sub	sp, #16
 80284d8:	af00      	add	r7, sp, #0
 80284da:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) mg_flash_start();
 80284dc:	f7ff ff08 	bl	80282f0 <mg_flash_start>
 80284e0:	4602      	mov	r2, r0
 80284e2:	687b      	ldr	r3, [r7, #4]
 80284e4:	1a9b      	subs	r3, r3, r2
 80284e6:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 0) return FLASH_BASE1;
 80284e8:	f7ff ff29 	bl	802833e <mg_flash_bank>
 80284ec:	4603      	mov	r3, r0
 80284ee:	2b00      	cmp	r3, #0
 80284f0:	d101      	bne.n	80284f6 <flash_bank+0x22>
 80284f2:	4b08      	ldr	r3, [pc, #32]	@ (8028514 <flash_bank+0x40>)
 80284f4:	e009      	b.n	802850a <flash_bank+0x36>
  return ofs < mg_flash_size() / 2 ? FLASH_BASE1 : FLASH_BASE2;
 80284f6:	f7ff ff04 	bl	8028302 <mg_flash_size>
 80284fa:	4603      	mov	r3, r0
 80284fc:	085b      	lsrs	r3, r3, #1
 80284fe:	68fa      	ldr	r2, [r7, #12]
 8028500:	429a      	cmp	r2, r3
 8028502:	d201      	bcs.n	8028508 <flash_bank+0x34>
 8028504:	4b03      	ldr	r3, [pc, #12]	@ (8028514 <flash_bank+0x40>)
 8028506:	e000      	b.n	802850a <flash_bank+0x36>
 8028508:	4b03      	ldr	r3, [pc, #12]	@ (8028518 <flash_bank+0x44>)
}
 802850a:	4618      	mov	r0, r3
 802850c:	3710      	adds	r7, #16
 802850e:	46bd      	mov	sp, r7
 8028510:	bd80      	pop	{r7, pc}
 8028512:	bf00      	nop
 8028514:	52002000 	.word	0x52002000
 8028518:	52002100 	.word	0x52002100

0802851c <mg_flash_erase>:
MG_IRAM bool mg_flash_erase(void *addr) {
 802851c:	b580      	push	{r7, lr}
 802851e:	b08a      	sub	sp, #40	@ 0x28
 8028520:	af02      	add	r7, sp, #8
 8028522:	6078      	str	r0, [r7, #4]
  bool ok = false;
 8028524:	2300      	movs	r3, #0
 8028526:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
 8028528:	6878      	ldr	r0, [r7, #4]
 802852a:	f7ff ff53 	bl	80283d4 <flash_page_start>
 802852e:	4603      	mov	r3, r0
 8028530:	f083 0301 	eor.w	r3, r3, #1
 8028534:	b2db      	uxtb	r3, r3
 8028536:	2b00      	cmp	r3, #0
 8028538:	d010      	beq.n	802855c <mg_flash_erase+0x40>
    MG_ERROR(("%p is not on a sector boundary", addr));
 802853a:	4b45      	ldr	r3, [pc, #276]	@ (8028650 <mg_flash_erase+0x134>)
 802853c:	681b      	ldr	r3, [r3, #0]
 802853e:	2b00      	cmp	r3, #0
 8028540:	f340 8081 	ble.w	8028646 <mg_flash_erase+0x12a>
 8028544:	4b43      	ldr	r3, [pc, #268]	@ (8028654 <mg_flash_erase+0x138>)
 8028546:	f240 428e 	movw	r2, #1166	@ 0x48e
 802854a:	4943      	ldr	r1, [pc, #268]	@ (8028658 <mg_flash_erase+0x13c>)
 802854c:	2001      	movs	r0, #1
 802854e:	f7df fd6b 	bl	8008028 <mg_log_prefix>
 8028552:	6879      	ldr	r1, [r7, #4]
 8028554:	4841      	ldr	r0, [pc, #260]	@ (802865c <mg_flash_erase+0x140>)
 8028556:	f7df fdb7 	bl	80080c8 <mg_log>
 802855a:	e074      	b.n	8028646 <mg_flash_erase+0x12a>
    uintptr_t diff = (char *) addr - (char *) mg_flash_start();
 802855c:	f7ff fec8 	bl	80282f0 <mg_flash_start>
 8028560:	4602      	mov	r2, r0
 8028562:	687b      	ldr	r3, [r7, #4]
 8028564:	1a9b      	subs	r3, r3, r2
 8028566:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / mg_flash_sector_size();
 8028568:	f7ff fed8 	bl	802831c <mg_flash_sector_size>
 802856c:	4602      	mov	r2, r0
 802856e:	697b      	ldr	r3, [r7, #20]
 8028570:	fbb3 f3f2 	udiv	r3, r3, r2
 8028574:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
 8028576:	6878      	ldr	r0, [r7, #4]
 8028578:	f7ff ffac 	bl	80284d4 <flash_bank>
 802857c:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
 802857e:	693b      	ldr	r3, [r7, #16]
 8028580:	330c      	adds	r3, #12
 8028582:	681b      	ldr	r3, [r3, #0]
 8028584:	60fb      	str	r3, [r7, #12]
    flash_unlock();
 8028586:	f7ff feef 	bl	8028368 <flash_unlock>
    if (sector > 7) sector -= 8;
 802858a:	69bb      	ldr	r3, [r7, #24]
 802858c:	2b07      	cmp	r3, #7
 802858e:	d902      	bls.n	8028596 <mg_flash_erase+0x7a>
 8028590:	69bb      	ldr	r3, [r7, #24]
 8028592:	3b08      	subs	r3, #8
 8028594:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
 8028596:	6938      	ldr	r0, [r7, #16]
 8028598:	f7ff ff75 	bl	8028486 <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
 802859c:	693b      	ldr	r3, [r7, #16]
 802859e:	330c      	adds	r3, #12
 80285a0:	461a      	mov	r2, r3
 80285a2:	2320      	movs	r3, #32
 80285a4:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
 80285a6:	693b      	ldr	r3, [r7, #16]
 80285a8:	330c      	adds	r3, #12
 80285aa:	681a      	ldr	r2, [r3, #0]
 80285ac:	69bb      	ldr	r3, [r7, #24]
 80285ae:	021b      	lsls	r3, r3, #8
 80285b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80285b4:	6939      	ldr	r1, [r7, #16]
 80285b6:	310c      	adds	r1, #12
 80285b8:	4313      	orrs	r3, r2
 80285ba:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
 80285bc:	693b      	ldr	r3, [r7, #16]
 80285be:	330c      	adds	r3, #12
 80285c0:	681b      	ldr	r3, [r3, #0]
 80285c2:	693a      	ldr	r2, [r7, #16]
 80285c4:	320c      	adds	r2, #12
 80285c6:	f043 0304 	orr.w	r3, r3, #4
 80285ca:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
 80285cc:	693b      	ldr	r3, [r7, #16]
 80285ce:	330c      	adds	r3, #12
 80285d0:	681b      	ldr	r3, [r3, #0]
 80285d2:	693a      	ldr	r2, [r7, #16]
 80285d4:	320c      	adds	r2, #12
 80285d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80285da:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
 80285dc:	6938      	ldr	r0, [r7, #16]
 80285de:	f7ff ff28 	bl	8028432 <flash_is_err>
 80285e2:	4603      	mov	r3, r0
 80285e4:	2b00      	cmp	r3, #0
 80285e6:	bf14      	ite	ne
 80285e8:	2301      	movne	r3, #1
 80285ea:	2300      	moveq	r3, #0
 80285ec:	b2db      	uxtb	r3, r3
 80285ee:	f083 0301 	eor.w	r3, r3, #1
 80285f2:	b2db      	uxtb	r3, r3
 80285f4:	77fb      	strb	r3, [r7, #31]
 80285f6:	7ffb      	ldrb	r3, [r7, #31]
 80285f8:	f003 0301 	and.w	r3, r3, #1
 80285fc:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
 80285fe:	4b14      	ldr	r3, [pc, #80]	@ (8028650 <mg_flash_erase+0x134>)
 8028600:	681b      	ldr	r3, [r3, #0]
 8028602:	2b02      	cmp	r3, #2
 8028604:	dd1a      	ble.n	802863c <mg_flash_erase+0x120>
 8028606:	4b13      	ldr	r3, [pc, #76]	@ (8028654 <mg_flash_erase+0x138>)
 8028608:	f240 429e 	movw	r2, #1182	@ 0x49e
 802860c:	4912      	ldr	r1, [pc, #72]	@ (8028658 <mg_flash_erase+0x13c>)
 802860e:	2003      	movs	r0, #3
 8028610:	f7df fd0a 	bl	8008028 <mg_log_prefix>
 8028614:	7ffb      	ldrb	r3, [r7, #31]
 8028616:	2b00      	cmp	r3, #0
 8028618:	d001      	beq.n	802861e <mg_flash_erase+0x102>
 802861a:	4911      	ldr	r1, [pc, #68]	@ (8028660 <mg_flash_erase+0x144>)
 802861c:	e000      	b.n	8028620 <mg_flash_erase+0x104>
 802861e:	4911      	ldr	r1, [pc, #68]	@ (8028664 <mg_flash_erase+0x148>)
 8028620:	693b      	ldr	r3, [r7, #16]
 8028622:	330c      	adds	r3, #12
 8028624:	681b      	ldr	r3, [r3, #0]
 8028626:	693a      	ldr	r2, [r7, #16]
 8028628:	3210      	adds	r2, #16
 802862a:	6812      	ldr	r2, [r2, #0]
 802862c:	9201      	str	r2, [sp, #4]
 802862e:	9300      	str	r3, [sp, #0]
 8028630:	460b      	mov	r3, r1
 8028632:	687a      	ldr	r2, [r7, #4]
 8028634:	69b9      	ldr	r1, [r7, #24]
 8028636:	480c      	ldr	r0, [pc, #48]	@ (8028668 <mg_flash_erase+0x14c>)
 8028638:	f7df fd46 	bl	80080c8 <mg_log>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
 802863c:	693b      	ldr	r3, [r7, #16]
 802863e:	330c      	adds	r3, #12
 8028640:	461a      	mov	r2, r3
 8028642:	68fb      	ldr	r3, [r7, #12]
 8028644:	6013      	str	r3, [r2, #0]
  return ok;
 8028646:	7ffb      	ldrb	r3, [r7, #31]
}
 8028648:	4618      	mov	r0, r3
 802864a:	3720      	adds	r7, #32
 802864c:	46bd      	mov	sp, r7
 802864e:	bd80      	pop	{r7, pc}
 8028650:	24000240 	.word	0x24000240
 8028654:	0802c070 	.word	0x0802c070
 8028658:	08028ac4 	.word	0x08028ac4
 802865c:	08028c5c 	.word	0x08028c5c
 8028660:	08028c7c 	.word	0x08028c7c
 8028664:	08028c80 	.word	0x08028c80
 8028668:	08028c88 	.word	0x08028c88

0802866c <mg_flash_swap_bank>:
MG_IRAM bool mg_flash_swap_bank(size_t size) {
 802866c:	b580      	push	{r7, lr}
 802866e:	b084      	sub	sp, #16
 8028670:	af00      	add	r7, sp, #0
 8028672:	6078      	str	r0, [r7, #4]
  if (mg_flash_bank() == 0) return true;
 8028674:	f7ff fe63 	bl	802833e <mg_flash_bank>
 8028678:	4603      	mov	r3, r0
 802867a:	2b00      	cmp	r3, #0
 802867c:	d101      	bne.n	8028682 <mg_flash_swap_bank+0x16>
 802867e:	2301      	movs	r3, #1
 8028680:	e02e      	b.n	80286e0 <mg_flash_swap_bank+0x74>
  uint32_t bank = FLASH_BASE1;
 8028682:	4b19      	ldr	r3, [pc, #100]	@ (80286e8 <mg_flash_swap_bank+0x7c>)
 8028684:	60fb      	str	r3, [r7, #12]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
 8028686:	68f8      	ldr	r0, [r7, #12]
 8028688:	f7ff ff10 	bl	80284ac <flash_bank_is_swapped>
 802868c:	4603      	mov	r3, r0
 802868e:	2b00      	cmp	r3, #0
 8028690:	d001      	beq.n	8028696 <mg_flash_swap_bank+0x2a>
 8028692:	2300      	movs	r3, #0
 8028694:	e001      	b.n	802869a <mg_flash_swap_bank+0x2e>
 8028696:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802869a:	60bb      	str	r3, [r7, #8]
  flash_unlock();
 802869c:	f7ff fe64 	bl	8028368 <flash_unlock>
  flash_clear_err(bank);
 80286a0:	68f8      	ldr	r0, [r7, #12]
 80286a2:	f7ff fef0 	bl	8028486 <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
 80286a6:	68fb      	ldr	r3, [r7, #12]
 80286a8:	3320      	adds	r3, #32
 80286aa:	681b      	ldr	r3, [r3, #0]
 80286ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80286b0:	68fb      	ldr	r3, [r7, #12]
 80286b2:	3320      	adds	r3, #32
 80286b4:	4619      	mov	r1, r3
 80286b6:	68bb      	ldr	r3, [r7, #8]
 80286b8:	4313      	orrs	r3, r2
 80286ba:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
 80286bc:	68fb      	ldr	r3, [r7, #12]
 80286be:	3318      	adds	r3, #24
 80286c0:	681b      	ldr	r3, [r3, #0]
 80286c2:	68fa      	ldr	r2, [r7, #12]
 80286c4:	3218      	adds	r2, #24
 80286c6:	f043 0302 	orr.w	r3, r3, #2
 80286ca:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
 80286cc:	bf00      	nop
 80286ce:	68fb      	ldr	r3, [r7, #12]
 80286d0:	331c      	adds	r3, #28
 80286d2:	681b      	ldr	r3, [r3, #0]
 80286d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80286d8:	68ba      	ldr	r2, [r7, #8]
 80286da:	429a      	cmp	r2, r3
 80286dc:	d1f7      	bne.n	80286ce <mg_flash_swap_bank+0x62>
  return true;
 80286de:	2301      	movs	r3, #1
}
 80286e0:	4618      	mov	r0, r3
 80286e2:	3710      	adds	r7, #16
 80286e4:	46bd      	mov	sp, r7
 80286e6:	bd80      	pop	{r7, pc}
 80286e8:	52002000 	.word	0x52002000

080286ec <mg_flash_write>:
MG_IRAM bool mg_flash_write(void *addr, const void *buf, size_t len) {
 80286ec:	b580      	push	{r7, lr}
 80286ee:	b08c      	sub	sp, #48	@ 0x30
 80286f0:	af02      	add	r7, sp, #8
 80286f2:	60f8      	str	r0, [r7, #12]
 80286f4:	60b9      	str	r1, [r7, #8]
 80286f6:	607a      	str	r2, [r7, #4]
  if ((len % mg_flash_write_align()) != 0) {
 80286f8:	f7ff fe19 	bl	802832e <mg_flash_write_align>
 80286fc:	4602      	mov	r2, r0
 80286fe:	687b      	ldr	r3, [r7, #4]
 8028700:	fbb3 f1f2 	udiv	r1, r3, r2
 8028704:	fb01 f202 	mul.w	r2, r1, r2
 8028708:	1a9b      	subs	r3, r3, r2
 802870a:	2b00      	cmp	r3, #0
 802870c:	d014      	beq.n	8028738 <mg_flash_write+0x4c>
    MG_ERROR(("%lu is not aligned to %lu", len, mg_flash_write_align()));
 802870e:	4b50      	ldr	r3, [pc, #320]	@ (8028850 <mg_flash_write+0x164>)
 8028710:	681b      	ldr	r3, [r3, #0]
 8028712:	2b00      	cmp	r3, #0
 8028714:	dd0e      	ble.n	8028734 <mg_flash_write+0x48>
 8028716:	4b4f      	ldr	r3, [pc, #316]	@ (8028854 <mg_flash_write+0x168>)
 8028718:	f240 42b7 	movw	r2, #1207	@ 0x4b7
 802871c:	494e      	ldr	r1, [pc, #312]	@ (8028858 <mg_flash_write+0x16c>)
 802871e:	2001      	movs	r0, #1
 8028720:	f7df fc82 	bl	8008028 <mg_log_prefix>
 8028724:	f7ff fe03 	bl	802832e <mg_flash_write_align>
 8028728:	4603      	mov	r3, r0
 802872a:	461a      	mov	r2, r3
 802872c:	6879      	ldr	r1, [r7, #4]
 802872e:	484b      	ldr	r0, [pc, #300]	@ (802885c <mg_flash_write+0x170>)
 8028730:	f7df fcca 	bl	80080c8 <mg_log>
    return false;
 8028734:	2300      	movs	r3, #0
 8028736:	e086      	b.n	8028846 <mg_flash_write+0x15a>
  uint32_t bank = flash_bank(addr);
 8028738:	68f8      	ldr	r0, [r7, #12]
 802873a:	f7ff fecb 	bl	80284d4 <flash_bank>
 802873e:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
 8028740:	68fb      	ldr	r3, [r7, #12]
 8028742:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
 8028744:	68bb      	ldr	r3, [r7, #8]
 8028746:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
 8028748:	68ba      	ldr	r2, [r7, #8]
 802874a:	687b      	ldr	r3, [r7, #4]
 802874c:	4413      	add	r3, r2
 802874e:	617b      	str	r3, [r7, #20]
  bool ok = true;
 8028750:	2301      	movs	r3, #1
 8028752:	77fb      	strb	r3, [r7, #31]
  flash_unlock();
 8028754:	f7ff fe08 	bl	8028368 <flash_unlock>
  flash_clear_err(bank);
 8028758:	69b8      	ldr	r0, [r7, #24]
 802875a:	f7ff fe94 	bl	8028486 <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
 802875e:	69bb      	ldr	r3, [r7, #24]
 8028760:	330c      	adds	r3, #12
 8028762:	461a      	mov	r2, r3
 8028764:	2302      	movs	r3, #2
 8028766:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
 8028768:	69bb      	ldr	r3, [r7, #24]
 802876a:	330c      	adds	r3, #12
 802876c:	681b      	ldr	r3, [r3, #0]
 802876e:	69ba      	ldr	r2, [r7, #24]
 8028770:	320c      	adds	r2, #12
 8028772:	f043 0320 	orr.w	r3, r3, #32
 8028776:	6013      	str	r3, [r2, #0]
  MG_DEBUG(("Writing flash @ %p, %lu bytes", addr, len));
 8028778:	4b35      	ldr	r3, [pc, #212]	@ (8028850 <mg_flash_write+0x164>)
 802877a:	681b      	ldr	r3, [r3, #0]
 802877c:	2b02      	cmp	r3, #2
 802877e:	dd0b      	ble.n	8028798 <mg_flash_write+0xac>
 8028780:	4b34      	ldr	r3, [pc, #208]	@ (8028854 <mg_flash_write+0x168>)
 8028782:	f240 42c3 	movw	r2, #1219	@ 0x4c3
 8028786:	4934      	ldr	r1, [pc, #208]	@ (8028858 <mg_flash_write+0x16c>)
 8028788:	2003      	movs	r0, #3
 802878a:	f7df fc4d 	bl	8008028 <mg_log_prefix>
 802878e:	687a      	ldr	r2, [r7, #4]
 8028790:	68f9      	ldr	r1, [r7, #12]
 8028792:	4833      	ldr	r0, [pc, #204]	@ (8028860 <mg_flash_write+0x174>)
 8028794:	f7df fc98 	bl	80080c8 <mg_log>
  MG_ARM_DISABLE_IRQ();
 8028798:	b672      	cpsid	i
  while (ok && src < end) {
 802879a:	e024      	b.n	80287e6 <mg_flash_write+0xfa>
    if (flash_page_start(dst) && mg_flash_erase(dst) == false) {
 802879c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802879e:	f7ff fe19 	bl	80283d4 <flash_page_start>
 80287a2:	4603      	mov	r3, r0
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	d00b      	beq.n	80287c0 <mg_flash_write+0xd4>
 80287a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80287aa:	f7ff feb7 	bl	802851c <mg_flash_erase>
 80287ae:	4603      	mov	r3, r0
 80287b0:	f083 0301 	eor.w	r3, r3, #1
 80287b4:	b2db      	uxtb	r3, r3
 80287b6:	2b00      	cmp	r3, #0
 80287b8:	d002      	beq.n	80287c0 <mg_flash_write+0xd4>
      ok = false;
 80287ba:	2300      	movs	r3, #0
 80287bc:	77fb      	strb	r3, [r7, #31]
      break;
 80287be:	e019      	b.n	80287f4 <mg_flash_write+0x108>
    *(volatile uint32_t *) dst++ = *src++;
 80287c0:	6a3a      	ldr	r2, [r7, #32]
 80287c2:	1d13      	adds	r3, r2, #4
 80287c4:	623b      	str	r3, [r7, #32]
 80287c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80287c8:	1d19      	adds	r1, r3, #4
 80287ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80287cc:	6812      	ldr	r2, [r2, #0]
 80287ce:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
 80287d0:	69b8      	ldr	r0, [r7, #24]
 80287d2:	f7ff fe45 	bl	8028460 <flash_wait>
    if (flash_is_err(bank)) ok = false;
 80287d6:	69b8      	ldr	r0, [r7, #24]
 80287d8:	f7ff fe2b 	bl	8028432 <flash_is_err>
 80287dc:	4603      	mov	r3, r0
 80287de:	2b00      	cmp	r3, #0
 80287e0:	d001      	beq.n	80287e6 <mg_flash_write+0xfa>
 80287e2:	2300      	movs	r3, #0
 80287e4:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
 80287e6:	7ffb      	ldrb	r3, [r7, #31]
 80287e8:	2b00      	cmp	r3, #0
 80287ea:	d003      	beq.n	80287f4 <mg_flash_write+0x108>
 80287ec:	6a3a      	ldr	r2, [r7, #32]
 80287ee:	697b      	ldr	r3, [r7, #20]
 80287f0:	429a      	cmp	r2, r3
 80287f2:	d3d3      	bcc.n	802879c <mg_flash_write+0xb0>
  MG_ARM_ENABLE_IRQ();
 80287f4:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
 80287f6:	4b16      	ldr	r3, [pc, #88]	@ (8028850 <mg_flash_write+0x164>)
 80287f8:	681b      	ldr	r3, [r3, #0]
 80287fa:	2b02      	cmp	r3, #2
 80287fc:	dd1a      	ble.n	8028834 <mg_flash_write+0x148>
 80287fe:	4b15      	ldr	r3, [pc, #84]	@ (8028854 <mg_flash_write+0x168>)
 8028800:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8028804:	4914      	ldr	r1, [pc, #80]	@ (8028858 <mg_flash_write+0x16c>)
 8028806:	2003      	movs	r0, #3
 8028808:	f7df fc0e 	bl	8008028 <mg_log_prefix>
 802880c:	7ffb      	ldrb	r3, [r7, #31]
 802880e:	2b00      	cmp	r3, #0
 8028810:	d001      	beq.n	8028816 <mg_flash_write+0x12a>
 8028812:	4914      	ldr	r1, [pc, #80]	@ (8028864 <mg_flash_write+0x178>)
 8028814:	e000      	b.n	8028818 <mg_flash_write+0x12c>
 8028816:	4914      	ldr	r1, [pc, #80]	@ (8028868 <mg_flash_write+0x17c>)
 8028818:	69bb      	ldr	r3, [r7, #24]
 802881a:	330c      	adds	r3, #12
 802881c:	681b      	ldr	r3, [r3, #0]
 802881e:	69ba      	ldr	r2, [r7, #24]
 8028820:	3210      	adds	r2, #16
 8028822:	6812      	ldr	r2, [r2, #0]
 8028824:	9201      	str	r2, [sp, #4]
 8028826:	9300      	str	r3, [sp, #0]
 8028828:	460b      	mov	r3, r1
 802882a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802882c:	6879      	ldr	r1, [r7, #4]
 802882e:	480f      	ldr	r0, [pc, #60]	@ (802886c <mg_flash_write+0x180>)
 8028830:	f7df fc4a 	bl	80080c8 <mg_log>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
 8028834:	69bb      	ldr	r3, [r7, #24]
 8028836:	330c      	adds	r3, #12
 8028838:	681b      	ldr	r3, [r3, #0]
 802883a:	69ba      	ldr	r2, [r7, #24]
 802883c:	320c      	adds	r2, #12
 802883e:	f023 0302 	bic.w	r3, r3, #2
 8028842:	6013      	str	r3, [r2, #0]
  return ok;
 8028844:	7ffb      	ldrb	r3, [r7, #31]
}
 8028846:	4618      	mov	r0, r3
 8028848:	3728      	adds	r7, #40	@ 0x28
 802884a:	46bd      	mov	sp, r7
 802884c:	bd80      	pop	{r7, pc}
 802884e:	bf00      	nop
 8028850:	24000240 	.word	0x24000240
 8028854:	0802c080 	.word	0x0802c080
 8028858:	08028ac4 	.word	0x08028ac4
 802885c:	08028cb4 	.word	0x08028cb4
 8028860:	08028cd0 	.word	0x08028cd0
 8028864:	08028c7c 	.word	0x08028c7c
 8028868:	08028c80 	.word	0x08028c80
 802886c:	08028cf0 	.word	0x08028cf0

08028870 <mg_device_reset>:
MG_IRAM void mg_device_reset(void) {
 8028870:	b480      	push	{r7}
 8028872:	af00      	add	r7, sp, #0
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 8028874:	4b03      	ldr	r3, [pc, #12]	@ (8028884 <mg_device_reset+0x14>)
 8028876:	4a04      	ldr	r2, [pc, #16]	@ (8028888 <mg_device_reset+0x18>)
 8028878:	601a      	str	r2, [r3, #0]
}
 802887a:	bf00      	nop
 802887c:	46bd      	mov	sp, r7
 802887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028882:	4770      	bx	lr
 8028884:	e000ed0c 	.word	0xe000ed0c
 8028888:	05fa0004 	.word	0x05fa0004

0802888c <mg_fwkey>:
MG_IRAM static uint32_t mg_fwkey(int fw) {
 802888c:	b580      	push	{r7, lr}
 802888e:	b084      	sub	sp, #16
 8028890:	af00      	add	r7, sp, #0
 8028892:	6078      	str	r0, [r7, #4]
  uint32_t key = MG_OTADATA_KEY + fw;
 8028894:	687a      	ldr	r2, [r7, #4]
 8028896:	4b0e      	ldr	r3, [pc, #56]	@ (80288d0 <mg_fwkey+0x44>)
 8028898:	4413      	add	r3, r2
 802889a:	60fb      	str	r3, [r7, #12]
  int bank = mg_flash_bank();
 802889c:	f7ff fd4f 	bl	802833e <mg_flash_bank>
 80288a0:	60b8      	str	r0, [r7, #8]
  if (bank == 2 && fw == MG_FIRMWARE_PREVIOUS) key--;
 80288a2:	68bb      	ldr	r3, [r7, #8]
 80288a4:	2b02      	cmp	r3, #2
 80288a6:	d105      	bne.n	80288b4 <mg_fwkey+0x28>
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	2b01      	cmp	r3, #1
 80288ac:	d102      	bne.n	80288b4 <mg_fwkey+0x28>
 80288ae:	68fb      	ldr	r3, [r7, #12]
 80288b0:	3b01      	subs	r3, #1
 80288b2:	60fb      	str	r3, [r7, #12]
  if (bank == 2 && fw == MG_FIRMWARE_CURRENT) key++;
 80288b4:	68bb      	ldr	r3, [r7, #8]
 80288b6:	2b02      	cmp	r3, #2
 80288b8:	d105      	bne.n	80288c6 <mg_fwkey+0x3a>
 80288ba:	687b      	ldr	r3, [r7, #4]
 80288bc:	2b00      	cmp	r3, #0
 80288be:	d102      	bne.n	80288c6 <mg_fwkey+0x3a>
 80288c0:	68fb      	ldr	r3, [r7, #12]
 80288c2:	3301      	adds	r3, #1
 80288c4:	60fb      	str	r3, [r7, #12]
  return key;
 80288c6:	68fb      	ldr	r3, [r7, #12]
}
 80288c8:	4618      	mov	r0, r3
 80288ca:	3710      	adds	r7, #16
 80288cc:	46bd      	mov	sp, r7
 80288ce:	bd80      	pop	{r7, pc}
 80288d0:	b07afed0 	.word	0xb07afed0

080288d4 <mg_otadata>:
MG_IRAM static struct mg_otadata mg_otadata(int fw) {
 80288d4:	b590      	push	{r4, r7, lr}
 80288d6:	b089      	sub	sp, #36	@ 0x24
 80288d8:	af00      	add	r7, sp, #0
 80288da:	6078      	str	r0, [r7, #4]
 80288dc:	6039      	str	r1, [r7, #0]
  uint32_t key = mg_fwkey(fw);
 80288de:	6838      	ldr	r0, [r7, #0]
 80288e0:	f7ff ffd4 	bl	802888c <mg_fwkey>
 80288e4:	61f8      	str	r0, [r7, #28]
  struct mg_otadata od = {};
 80288e6:	f107 030c 	add.w	r3, r7, #12
 80288ea:	2200      	movs	r2, #0
 80288ec:	601a      	str	r2, [r3, #0]
 80288ee:	605a      	str	r2, [r3, #4]
 80288f0:	609a      	str	r2, [r3, #8]
 80288f2:	60da      	str	r2, [r3, #12]
  MG_INFO(("Loading %s OTA data", fw == MG_FIRMWARE_CURRENT ? "curr" : "prev"));
 80288f4:	4b13      	ldr	r3, [pc, #76]	@ (8028944 <mg_otadata+0x70>)
 80288f6:	681b      	ldr	r3, [r3, #0]
 80288f8:	2b01      	cmp	r3, #1
 80288fa:	dd10      	ble.n	802891e <mg_otadata+0x4a>
 80288fc:	4b12      	ldr	r3, [pc, #72]	@ (8028948 <mg_otadata+0x74>)
 80288fe:	f641 1273 	movw	r2, #6515	@ 0x1973
 8028902:	4912      	ldr	r1, [pc, #72]	@ (802894c <mg_otadata+0x78>)
 8028904:	2002      	movs	r0, #2
 8028906:	f7df fb8f 	bl	8008028 <mg_log_prefix>
 802890a:	683b      	ldr	r3, [r7, #0]
 802890c:	2b00      	cmp	r3, #0
 802890e:	d101      	bne.n	8028914 <mg_otadata+0x40>
 8028910:	4b0f      	ldr	r3, [pc, #60]	@ (8028950 <mg_otadata+0x7c>)
 8028912:	e000      	b.n	8028916 <mg_otadata+0x42>
 8028914:	4b0f      	ldr	r3, [pc, #60]	@ (8028954 <mg_otadata+0x80>)
 8028916:	4619      	mov	r1, r3
 8028918:	480f      	ldr	r0, [pc, #60]	@ (8028958 <mg_otadata+0x84>)
 802891a:	f7df fbd5 	bl	80080c8 <mg_log>
  mg_flash_load(NULL, key, &od, sizeof(od));
 802891e:	f107 020c 	add.w	r2, r7, #12
 8028922:	2310      	movs	r3, #16
 8028924:	69f9      	ldr	r1, [r7, #28]
 8028926:	2000      	movs	r0, #0
 8028928:	f7d8 ff74 	bl	8001814 <mg_flash_load>
  return od;
 802892c:	687b      	ldr	r3, [r7, #4]
 802892e:	461c      	mov	r4, r3
 8028930:	f107 030c 	add.w	r3, r7, #12
 8028934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802893a:	6878      	ldr	r0, [r7, #4]
 802893c:	3724      	adds	r7, #36	@ 0x24
 802893e:	46bd      	mov	sp, r7
 8028940:	bd90      	pop	{r4, r7, pc}
 8028942:	bf00      	nop
 8028944:	24000240 	.word	0x24000240
 8028948:	0802c258 	.word	0x0802c258
 802894c:	08028ac4 	.word	0x08028ac4
 8028950:	0802a24c 	.word	0x0802a24c
 8028954:	0802a254 	.word	0x0802a254
 8028958:	0802a25c 	.word	0x0802a25c

0802895c <mg_ota_commit>:
MG_IRAM bool mg_ota_commit(void) {
 802895c:	b580      	push	{r7, lr}
 802895e:	b086      	sub	sp, #24
 8028960:	af00      	add	r7, sp, #0
  bool ok = true;
 8028962:	2301      	movs	r3, #1
 8028964:	75fb      	strb	r3, [r7, #23]
  struct mg_otadata od = mg_otadata(MG_FIRMWARE_CURRENT);
 8028966:	1d3b      	adds	r3, r7, #4
 8028968:	2100      	movs	r1, #0
 802896a:	4618      	mov	r0, r3
 802896c:	f7ff ffb2 	bl	80288d4 <mg_otadata>
  if (od.status != MG_OTA_COMMITTED) {
 8028970:	693b      	ldr	r3, [r7, #16]
 8028972:	2b03      	cmp	r3, #3
 8028974:	d01b      	beq.n	80289ae <mg_ota_commit+0x52>
    od.status = MG_OTA_COMMITTED;
 8028976:	2303      	movs	r3, #3
 8028978:	613b      	str	r3, [r7, #16]
    MG_INFO(("Committing current firmware, OD size %lu", sizeof(od)));
 802897a:	4b0f      	ldr	r3, [pc, #60]	@ (80289b8 <mg_ota_commit+0x5c>)
 802897c:	681b      	ldr	r3, [r3, #0]
 802897e:	2b01      	cmp	r3, #1
 8028980:	dd0a      	ble.n	8028998 <mg_ota_commit+0x3c>
 8028982:	4b0e      	ldr	r3, [pc, #56]	@ (80289bc <mg_ota_commit+0x60>)
 8028984:	f641 129b 	movw	r2, #6555	@ 0x199b
 8028988:	490d      	ldr	r1, [pc, #52]	@ (80289c0 <mg_ota_commit+0x64>)
 802898a:	2002      	movs	r0, #2
 802898c:	f7df fb4c 	bl	8008028 <mg_log_prefix>
 8028990:	2110      	movs	r1, #16
 8028992:	480c      	ldr	r0, [pc, #48]	@ (80289c4 <mg_ota_commit+0x68>)
 8028994:	f7df fb98 	bl	80080c8 <mg_log>
    ok = mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &od, sizeof(od));
 8028998:	2000      	movs	r0, #0
 802899a:	f7ff ff77 	bl	802888c <mg_fwkey>
 802899e:	4601      	mov	r1, r0
 80289a0:	1d3a      	adds	r2, r7, #4
 80289a2:	2310      	movs	r3, #16
 80289a4:	2000      	movs	r0, #0
 80289a6:	f7d9 f87f 	bl	8001aa8 <mg_flash_save>
 80289aa:	4603      	mov	r3, r0
 80289ac:	75fb      	strb	r3, [r7, #23]
  return ok;
 80289ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80289b0:	4618      	mov	r0, r3
 80289b2:	3718      	adds	r7, #24
 80289b4:	46bd      	mov	sp, r7
 80289b6:	bd80      	pop	{r7, pc}
 80289b8:	24000240 	.word	0x24000240
 80289bc:	0802c264 	.word	0x0802c264
 80289c0:	08028ac4 	.word	0x08028ac4
 80289c4:	0802a270 	.word	0x0802a270
