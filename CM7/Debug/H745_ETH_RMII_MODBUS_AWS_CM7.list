
H745_ETH_RMII_MODBUS_AWS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800a97c  0800a97c  0000b97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab40  0800ab40  0000c130  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab40  0800ab40  0000bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab48  0800ab48  0000c130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab48  0800ab48  0000bb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab4c  0800ab4c  0000bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800ab50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000070  0800abc0  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d0  0800ac20  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004ecc  24000130  0800ac80  0000c130  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24004ffc  0800ac80  0000cffc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY
 14 .debug_info   000272e1  00000000  00000000  0000c15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004448  00000000  00000000  0003343f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b48  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001539  00000000  00000000  000393d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003dab4  00000000  00000000  0003a909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024115  00000000  00000000  000783bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196cf9  00000000  00000000  0009c4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002331cb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007c54  00000000  00000000  00233210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  0023ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000130 	.word	0x24000130
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a964 	.word	0x0800a964

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000134 	.word	0x24000134
 80002dc:	0800a964 	.word	0x0800a964

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <ModbusMaster_Init>:
Modbus_MasterFrame ModbusFrame;
extern UART_HandleTypeDef huart1;

/* Initialize Modbus USART and GPIO */
void ModbusMaster_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
    /* Initialize GPIO for RS-485 */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007be:	2302      	movs	r3, #2
 80007c0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4814      	ldr	r0, [pc, #80]	@ (8000818 <ModbusMaster_Init+0x7c>)
 80007c8:	f001 fcc6 	bl	8002158 <HAL_GPIO_Init>
    /* Initialize UART1 for Modbus communication */
    huart1.Instance = USART1;
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <ModbusMaster_Init+0x80>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <ModbusMaster_Init+0x84>)
 80007d0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <ModbusMaster_Init+0x80>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <ModbusMaster_Init+0x80>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <ModbusMaster_Init+0x80>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <ModbusMaster_Init+0x80>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <ModbusMaster_Init+0x80>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <ModbusMaster_Init+0x80>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <ModbusMaster_Init+0x80>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4807      	ldr	r0, [pc, #28]	@ (800081c <ModbusMaster_Init+0x80>)
 8000800:	f004 fff0 	bl	80057e4 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <ModbusMaster_Init+0x74>
    {
        printf("UART1 initialization failed!\n");
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <ModbusMaster_Init+0x88>)
 800080c:	f009 f9ae 	bl	8009b6c <puts>
    }
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58020000 	.word	0x58020000
 800081c:	2400033c 	.word	0x2400033c
 8000820:	40011000 	.word	0x40011000
 8000824:	0800a97c 	.word	0x0800a97c

08000828 <ModbusMaster_CalculateCRC>:

/* Calculate CRC for Modbus frame */
unsigned short ModbusMaster_CalculateCRC(unsigned char *buffer, unsigned short length)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000838:	81fb      	strh	r3, [r7, #14]
    for (unsigned short pos = 0; pos < length; pos++)
 800083a:	2300      	movs	r3, #0
 800083c:	81bb      	strh	r3, [r7, #12]
 800083e:	e022      	b.n	8000886 <ModbusMaster_CalculateCRC+0x5e>
    {
        crc ^= buffer[pos];
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	89fb      	ldrh	r3, [r7, #14]
 800084c:	4053      	eors	r3, r2
 800084e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	e011      	b.n	800087a <ModbusMaster_CalculateCRC+0x52>
        {
            if (crc & 1)
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d006      	beq.n	800086e <ModbusMaster_CalculateCRC+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	085b      	lsrs	r3, r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <ModbusMaster_CalculateCRC+0x74>)
 8000868:	4053      	eors	r3, r2
 800086a:	81fb      	strh	r3, [r7, #14]
 800086c:	e002      	b.n	8000874 <ModbusMaster_CalculateCRC+0x4c>
            else
                crc >>= 1;
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b07      	cmp	r3, #7
 800087e:	ddea      	ble.n	8000856 <ModbusMaster_CalculateCRC+0x2e>
    for (unsigned short pos = 0; pos < length; pos++)
 8000880:	89bb      	ldrh	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	81bb      	strh	r3, [r7, #12]
 8000886:	89ba      	ldrh	r2, [r7, #12]
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	429a      	cmp	r2, r3
 800088c:	d3d8      	bcc.n	8000840 <ModbusMaster_CalculateCRC+0x18>
        }
    }
    return crc;
 800088e:	89fb      	ldrh	r3, [r7, #14]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	ffffa001 	.word	0xffffa001

080008a0 <ModbusMaster_SendRequest>:

/* Send a Modbus request */
void ModbusMaster_SendRequest(unsigned char slave_id, unsigned char function_code, unsigned short start_address, unsigned short data_length, unsigned short *data)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	4613      	mov	r3, r2
 80008bc:	807b      	strh	r3, [r7, #2]
    ModbusMaster_Tx_index = 0;
 80008be:	4b4c      	ldr	r3, [pc, #304]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]

    /* Construct the Modbus frame */
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = slave_id;
 80008c4:	4b4a      	ldr	r3, [pc, #296]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	b291      	uxth	r1, r2
 80008cc:	4a48      	ldr	r2, [pc, #288]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008ce:	8011      	strh	r1, [r2, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4a48      	ldr	r2, [pc, #288]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = function_code;
 80008d8:	4b45      	ldr	r3, [pc, #276]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	b291      	uxth	r1, r2
 80008e0:	4a43      	ldr	r2, [pc, #268]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008e2:	8011      	strh	r1, [r2, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4a43      	ldr	r2, [pc, #268]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (start_address >> 8) & 0xFF;
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b299      	uxth	r1, r3
 80008f2:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	b290      	uxth	r0, r2
 80008fa:	4a3d      	ldr	r2, [pc, #244]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80008fc:	8010      	strh	r0, [r2, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	4b3c      	ldr	r3, [pc, #240]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 8000904:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = start_address & 0xFF;
 8000906:	4b3a      	ldr	r3, [pc, #232]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	b291      	uxth	r1, r2
 800090e:	4a38      	ldr	r2, [pc, #224]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000910:	8011      	strh	r1, [r2, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	b2d9      	uxtb	r1, r3
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 800091a:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (data_length >> 8) & 0xFF;
 800091c:	887b      	ldrh	r3, [r7, #2]
 800091e:	0a1b      	lsrs	r3, r3, #8
 8000920:	b299      	uxth	r1, r3
 8000922:	4b33      	ldr	r3, [pc, #204]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	b290      	uxth	r0, r2
 800092a:	4a31      	ldr	r2, [pc, #196]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 800092c:	8010      	strh	r0, [r2, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	b2c9      	uxtb	r1, r1
 8000932:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 8000934:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = data_length & 0xFF;
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	b291      	uxth	r1, r2
 800093e:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000940:	8011      	strh	r1, [r2, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	b2d9      	uxtb	r1, r3
 8000948:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 800094a:	5499      	strb	r1, [r3, r2]

    /* Calculate CRC */
    unsigned short crc = ModbusMaster_CalculateCRC(ModbusMaster_outbox, ModbusMaster_Tx_index);
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4828      	ldr	r0, [pc, #160]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 8000954:	f7ff ff68 	bl	8000828 <ModbusMaster_CalculateCRC>
 8000958:	4603      	mov	r3, r0
 800095a:	817b      	strh	r3, [r7, #10]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = crc & 0xFF;
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	b291      	uxth	r1, r2
 8000964:	4a22      	ldr	r2, [pc, #136]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000966:	8011      	strh	r1, [r2, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	897b      	ldrh	r3, [r7, #10]
 800096c:	b2d9      	uxtb	r1, r3
 800096e:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 8000970:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (crc >> 8) & 0xFF;
 8000972:	897b      	ldrh	r3, [r7, #10]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b299      	uxth	r1, r3
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	b290      	uxth	r0, r2
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 8000982:	8010      	strh	r0, [r2, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	b2c9      	uxtb	r1, r1
 8000988:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 800098a:	5499      	strb	r1, [r3, r2]

    // Debug
    printf("Modbus Request: ");
 800098c:	481a      	ldr	r0, [pc, #104]	@ (80009f8 <ModbusMaster_SendRequest+0x158>)
 800098e:	f009 f87d 	bl	8009a8c <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e00a      	b.n	80009ae <ModbusMaster_SendRequest+0x10e>
    {
        printf("%02X ", ModbusMaster_outbox[i]);
 8000998:	4a16      	ldr	r2, [pc, #88]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4816      	ldr	r0, [pc, #88]	@ (80009fc <ModbusMaster_SendRequest+0x15c>)
 80009a4:	f009 f872 	bl	8009a8c <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	dbee      	blt.n	8000998 <ModbusMaster_SendRequest+0xf8>
    }
    printf("\n");
 80009ba:	200a      	movs	r0, #10
 80009bc:	f009 f878 	bl	8009ab0 <putchar>

    /* Enable TX and send the frame */
    RS485_TX_ENABLE();
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c6:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <ModbusMaster_SendRequest+0x160>)
 80009c8:	f001 fd76 	bl	80024b8 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, ModbusMaster_outbox, ModbusMaster_Tx_index, HAL_MAX_DELAY);
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <ModbusMaster_SendRequest+0x150>)
 80009ce:	881a      	ldrh	r2, [r3, #0]
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	4907      	ldr	r1, [pc, #28]	@ (80009f4 <ModbusMaster_SendRequest+0x154>)
 80009d6:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <ModbusMaster_SendRequest+0x164>)
 80009d8:	f004 ff54 	bl	8005884 <HAL_UART_Transmit>
    RS485_RX_ENABLE();
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <ModbusMaster_SendRequest+0x160>)
 80009e4:	f001 fd68 	bl	80024b8 <HAL_GPIO_WritePin>
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	2400014c 	.word	0x2400014c
 80009f4:	24000154 	.word	0x24000154
 80009f8:	0800a99c 	.word	0x0800a99c
 80009fc:	0800a9b0 	.word	0x0800a9b0
 8000a00:	58020000 	.word	0x58020000
 8000a04:	2400033c 	.word	0x2400033c

08000a08 <ModbusMaster_ReceiveResponse>:

unsigned short ModbusMaster_ReceiveResponse(unsigned char *buffer, unsigned short length)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Receive(&huart1, buffer, length, MODBUS_MASTER_TIMEOUT_MS) == HAL_OK)
 8000a14:	887a      	ldrh	r2, [r7, #2]
 8000a16:	2364      	movs	r3, #100	@ 0x64
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	4827      	ldr	r0, [pc, #156]	@ (8000ab8 <ModbusMaster_ReceiveResponse+0xb0>)
 8000a1c:	f004 ffc0 	bl	80059a0 <HAL_UART_Receive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d13f      	bne.n	8000aa6 <ModbusMaster_ReceiveResponse+0x9e>
    {
        // Debug: Print the received buffer
        printf("Received Buffer: ");
 8000a26:	4825      	ldr	r0, [pc, #148]	@ (8000abc <ModbusMaster_ReceiveResponse+0xb4>)
 8000a28:	f009 f830 	bl	8009a8c <iprintf>
        for (int i = 0; i < length; i++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e00a      	b.n	8000a48 <ModbusMaster_ReceiveResponse+0x40>
            printf("%02X ", buffer[i]);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4820      	ldr	r0, [pc, #128]	@ (8000ac0 <ModbusMaster_ReceiveResponse+0xb8>)
 8000a3e:	f009 f825 	bl	8009a8c <iprintf>
        for (int i = 0; i < length; i++) {
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf0      	blt.n	8000a32 <ModbusMaster_ReceiveResponse+0x2a>
        }
        printf("\n");
 8000a50:	200a      	movs	r0, #10
 8000a52:	f009 f82d 	bl	8009ab0 <putchar>

        // Validate CRC
        unsigned short crc_received = (buffer[length - 2] << 8) | buffer[length - 1];
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	3b02      	subs	r3, #2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	440b      	add	r3, r1
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	817b      	strh	r3, [r7, #10]
        unsigned short crc_calculated = ModbusMaster_CalculateCRC(buffer, length - 2);
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fed2 	bl	8000828 <ModbusMaster_CalculateCRC>
 8000a84:	4603      	mov	r3, r0
 8000a86:	813b      	strh	r3, [r7, #8]

        // Debug: Print the CRC values
        printf("CRC Received: 0x%04X, CRC Calculated: 0x%04X\n", crc_received, crc_calculated);
 8000a88:	897b      	ldrh	r3, [r7, #10]
 8000a8a:	893a      	ldrh	r2, [r7, #8]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <ModbusMaster_ReceiveResponse+0xbc>)
 8000a90:	f008 fffc 	bl	8009a8c <iprintf>

        if (crc_received == crc_calculated)
 8000a94:	897a      	ldrh	r2, [r7, #10]
 8000a96:	893b      	ldrh	r3, [r7, #8]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d104      	bne.n	8000aa6 <ModbusMaster_ReceiveResponse+0x9e>
        {
            ModbusMaster_FrameComplete_Flag = 1;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <ModbusMaster_ReceiveResponse+0xc0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	801a      	strh	r2, [r3, #0]
            return length;
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	e003      	b.n	8000aae <ModbusMaster_ReceiveResponse+0xa6>
        }
    }

    ModbusMaster_TimeoutFlag = 1;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <ModbusMaster_ReceiveResponse+0xc4>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	801a      	strh	r2, [r3, #0]
    return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2400033c 	.word	0x2400033c
 8000abc:	0800a9b8 	.word	0x0800a9b8
 8000ac0:	0800a9b0 	.word	0x0800a9b0
 8000ac4:	0800a9cc 	.word	0x0800a9cc
 8000ac8:	24000150 	.word	0x24000150
 8000acc:	2400014e 	.word	0x2400014e

08000ad0 <ModbusMaster_ReadInputRegisters>:

/* Read Input Registers */
void ModbusMaster_ReadInputRegisters(unsigned char slave_id, unsigned short start_address, unsigned short data_length)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	460b      	mov	r3, r1
 8000adc:	80bb      	strh	r3, [r7, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	807b      	strh	r3, [r7, #2]
     ModbusMaster_SendRequest(slave_id, MODBUS_FC_READ_INPUT_REGISTERS, start_address, data_length, NULL);
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	88ba      	ldrh	r2, [r7, #4]
 8000ae6:	79f8      	ldrb	r0, [r7, #7]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	9100      	str	r1, [sp, #0]
 8000aec:	2104      	movs	r1, #4
 8000aee:	f7ff fed7 	bl	80008a0 <ModbusMaster_SendRequest>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fd9a 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f82c 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 f98c 	bl	8000e24 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b0c:	f000 f8a2 	bl	8000c54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b10:	f000 f93c 	bl	8000d8c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000b14:	f000 f8ea 	bl	8000cec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ModbusMaster_Init();
 8000b18:	f7ff fe40 	bl	800079c <ModbusMaster_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b1c:	f006 f942 	bl	8006da4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b20:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <main+0x4c>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <main+0x50>)
 8000b26:	f006 f987 	bl	8006e38 <osThreadNew>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <main+0x54>)
 8000b2e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <main+0x58>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <main+0x5c>)
 8000b36:	f006 f97f 	bl	8006e38 <osThreadNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <main+0x60>)
 8000b3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b40:	f006 f954 	bl	8006dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <main+0x48>
 8000b48:	0800aa9c 	.word	0x0800aa9c
 8000b4c:	08000f55 	.word	0x08000f55
 8000b50:	24000464 	.word	0x24000464
 8000b54:	0800aac0 	.word	0x0800aac0
 8000b58:	08000fe5 	.word	0x08000fe5
 8000b5c:	24000468 	.word	0x24000468

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09c      	sub	sp, #112	@ 0x70
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6a:	224c      	movs	r2, #76	@ 0x4c
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f009 f8dc 	bl	8009d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2220      	movs	r2, #32
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f009 f8d6 	bl	8009d2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b80:	2004      	movs	r0, #4
 8000b82:	f001 fcb3 	bl	80024ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b30      	ldr	r3, [pc, #192]	@ (8000c4c <SystemClock_Config+0xec>)
 8000b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c4c <SystemClock_Config+0xec>)
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b96:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <SystemClock_Config+0xec>)
 8000b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <SystemClock_Config+0xf0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c50 <SystemClock_Config+0xf0>)
 8000ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <SystemClock_Config+0xf0>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bb8:	bf00      	nop
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <SystemClock_Config+0xf0>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bc6:	d1f8      	bne.n	8000bba <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000bde:	2364      	movs	r3, #100	@ 0x64
 8000be0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bee:	230c      	movs	r3, #12
 8000bf0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fcce 	bl	80025a0 <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c0a:	f000 fa0d 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	233f      	movs	r3, #63	@ 0x3f
 8000c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2303      	movs	r3, #3
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c1e:	2340      	movs	r3, #64	@ 0x40
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c22:	2340      	movs	r3, #64	@ 0x40
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c2a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c2c:	2340      	movs	r3, #64	@ 0x40
 8000c2e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2102      	movs	r1, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 f90d 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c40:	f000 f9f2 	bl	8001028 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3770      	adds	r7, #112	@ 0x70
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024800 	.word	0x58024800

08000c54 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd8 <MX_ETH_Init+0x84>)
 8000c5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c66:	2280      	movs	r2, #128	@ 0x80
 8000c68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c6c:	22e1      	movs	r2, #225	@ 0xe1
 8000c6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000c84:	4a15      	ldr	r2, [pc, #84]	@ (8000cdc <MX_ETH_Init+0x88>)
 8000c86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000c90:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_ETH_Init+0x8c>)
 8000c92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000c96:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <MX_ETH_Init+0x90>)
 8000c98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000c9c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000ca0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ca2:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_ETH_Init+0x80>)
 8000ca4:	f000 fe24 	bl	80018f0 <HAL_ETH_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cae:	f000 f9bb 	bl	8001028 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cb2:	2238      	movs	r2, #56	@ 0x38
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <MX_ETH_Init+0x94>)
 8000cb8:	f009 f838 	bl	8009d2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_ETH_Init+0x94>)
 8000cbe:	2221      	movs	r2, #33	@ 0x21
 8000cc0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_ETH_Init+0x94>)
 8000cc4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cc8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <MX_ETH_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2400028c 	.word	0x2400028c
 8000cd8:	40028000 	.word	0x40028000
 8000cdc:	2400046c 	.word	0x2400046c
 8000ce0:	240000d0 	.word	0x240000d0
 8000ce4:	24000070 	.word	0x24000070
 8000ce8:	24000254 	.word	0x24000254

08000cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000cf2:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <MX_USART1_UART_Init+0x9c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000d34:	2300      	movs	r3, #0
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4812      	ldr	r0, [pc, #72]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d3c:	f005 fe80 	bl	8006a40 <HAL_RS485Ex_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000d46:	f000 f96f 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d4e:	f005 ff1a 	bl	8006b86 <HAL_UARTEx_SetTxFifoThreshold>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000d58:	f000 f966 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d60:	f005 ff4f 	bl	8006c02 <HAL_UARTEx_SetRxFifoThreshold>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000d6a:	f000 f95d 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART1_UART_Init+0x98>)
 8000d70:	f005 fed0 	bl	8006b14 <HAL_UARTEx_DisableFifoMode>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000d7a:	f000 f955 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2400033c 	.word	0x2400033c
 8000d88:	40011000 	.word	0x40011000

08000d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d92:	4a23      	ldr	r2, [pc, #140]	@ (8000e20 <MX_USART3_UART_Init+0x94>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd4:	4811      	ldr	r0, [pc, #68]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd6:	f004 fd05 	bl	80057e4 <HAL_UART_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000de0:	f000 f922 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000de8:	f005 fecd 	bl	8006b86 <HAL_UARTEx_SetTxFifoThreshold>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000df2:	f000 f919 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dfa:	f005 ff02 	bl	8006c02 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e04:	f000 f910 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000e0a:	f005 fe83 	bl	8006b14 <HAL_UARTEx_DisableFifoMode>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f908 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	240003d0 	.word	0x240003d0
 8000e20:	40004800 	.word	0x40004800

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	@ 0x30
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b43      	ldr	r3, [pc, #268]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e40:	4a41      	ldr	r2, [pc, #260]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e68:	4b37      	ldr	r3, [pc, #220]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b34      	ldr	r3, [pc, #208]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	4a32      	ldr	r2, [pc, #200]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea4:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	4a23      	ldr	r2, [pc, #140]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_GPIO_Init+0x124>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ef4:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0x128>)
 8000ef6:	f001 fadf 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <MX_GPIO_Init+0x12c>)
 8000f00:	f001 fada 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000f04:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <MX_GPIO_Init+0x128>)
 8000f1e:	f001 f91b 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_GPIO_Init+0x12c>)
 8000f3a:	f001 f90d 	bl	8002158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	@ 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020400 	.word	0x58020400
 8000f50:	58021000 	.word	0x58021000

08000f54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	      printf("Task1\r\n");
 8000f5c:	481b      	ldr	r0, [pc, #108]	@ (8000fcc <StartDefaultTask+0x78>)
 8000f5e:	f008 fe05 	bl	8009b6c <puts>
	      // Send Modbus query: Slave ID 1, Function Code 4, Address 0, Length 1
	      ModbusMaster_ReadInputRegisters(1,0x0000, 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f7ff fdb2 	bl	8000ad0 <ModbusMaster_ReadInputRegisters>

	      // Receive response buffer (7 bytes expected)
	      uint8_t responseBuffer[7];
	      unsigned short responseLength = ModbusMaster_ReceiveResponse(responseBuffer, sizeof(responseBuffer));
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2107      	movs	r1, #7
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fd48 	bl	8000a08 <ModbusMaster_ReceiveResponse>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	82fb      	strh	r3, [r7, #22]

	      // Check response status
	      if (ModbusMaster_FrameComplete_Flag)
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <StartDefaultTask+0x7c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d010      	beq.n	8000fa6 <StartDefaultTask+0x52>
	      {
	        // Extract the 16-bit register value (big-endian)
	        uint16_t registerValue = (responseBuffer[3] << 8) | responseBuffer[4];
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7c3b      	ldrb	r3, [r7, #16]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	82bb      	strh	r3, [r7, #20]
	        printf("Input Register Value: %u\r\n", registerValue);
 8000f94:	8abb      	ldrh	r3, [r7, #20]
 8000f96:	4619      	mov	r1, r3
 8000f98:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <StartDefaultTask+0x80>)
 8000f9a:	f008 fd77 	bl	8009a8c <iprintf>
	        ModbusMaster_FrameComplete_Flag = 0; // Reset flag
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <StartDefaultTask+0x7c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	e00d      	b.n	8000fc2 <StartDefaultTask+0x6e>
	      }
	      else if (ModbusMaster_TimeoutFlag)
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <StartDefaultTask+0x84>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <StartDefaultTask+0x68>
	      {
	        printf("Modbus Timeout!\r\n");
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <StartDefaultTask+0x88>)
 8000fb0:	f008 fddc 	bl	8009b6c <puts>
	        ModbusMaster_TimeoutFlag = 0; // Reset flag
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <StartDefaultTask+0x84>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	e002      	b.n	8000fc2 <StartDefaultTask+0x6e>
	      }
	      else
	      {
	        printf("Invalid Response (CRC Error)\r\n");
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <StartDefaultTask+0x8c>)
 8000fbe:	f008 fdd5 	bl	8009b6c <puts>
	      }

	      osDelay(1000); // Wait 1 second before next query
 8000fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc6:	f005 ffc9 	bl	8006f5c <osDelay>
  {
 8000fca:	e7c7      	b.n	8000f5c <StartDefaultTask+0x8>
 8000fcc:	0800aa14 	.word	0x0800aa14
 8000fd0:	24000150 	.word	0x24000150
 8000fd4:	0800aa1c 	.word	0x0800aa1c
 8000fd8:	2400014e 	.word	0x2400014e
 8000fdc:	0800aa38 	.word	0x0800aa38
 8000fe0:	0800aa4c 	.word	0x0800aa4c

08000fe4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task2\r\n");
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <StartTask02+0x1c>)
 8000fee:	f008 fdbd 	bl	8009b6c <puts>
    osDelay(1000);
 8000ff2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff6:	f005 ffb1 	bl	8006f5c <osDelay>
	printf("Task2\r\n");
 8000ffa:	bf00      	nop
 8000ffc:	e7f6      	b.n	8000fec <StartTask02+0x8>
 8000ffe:	bf00      	nop
 8001000:	0800aa6c 	.word	0x0800aa6c

08001004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001016:	f000 fb4b 	bl	80016b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40001000 	.word	0x40001000

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_MspInit+0x38>)
 800103c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_MspInit+0x38>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_MspInit+0x38>)
 800104c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	210f      	movs	r1, #15
 800105c:	f06f 0001 	mvn.w	r0, #1
 8001060:	f000 fc1e 	bl	80018a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400

08001070 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a59      	ldr	r2, [pc, #356]	@ (80011f4 <HAL_ETH_MspInit+0x184>)
 800108e:	4293      	cmp	r3, r2
 8001090:	f040 80ab 	bne.w	80011ea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001094:	4b58      	ldr	r3, [pc, #352]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 8001096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800109a:	4a57      	ldr	r2, [pc, #348]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800109c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010a4:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010b2:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b8:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010c2:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010d0:	4b49      	ldr	r3, [pc, #292]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d6:	4a48      	ldr	r2, [pc, #288]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010dc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010e0:	4b45      	ldr	r3, [pc, #276]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b42      	ldr	r3, [pc, #264]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f4:	4a40      	ldr	r2, [pc, #256]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010fe:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	4a39      	ldr	r2, [pc, #228]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800111c:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	4a31      	ldr	r2, [pc, #196]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	4a2a      	ldr	r2, [pc, #168]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <HAL_ETH_MspInit+0x188>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001166:	2332      	movs	r3, #50	@ 0x32
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001176:	230b      	movs	r3, #11
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	481e      	ldr	r0, [pc, #120]	@ (80011fc <HAL_ETH_MspInit+0x18c>)
 8001182:	f000 ffe9 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001186:	2386      	movs	r3, #134	@ 0x86
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001196:	230b      	movs	r3, #11
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <HAL_ETH_MspInit+0x190>)
 80011a2:	f000 ffd9 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b8:	230b      	movs	r3, #11
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4810      	ldr	r0, [pc, #64]	@ (8001204 <HAL_ETH_MspInit+0x194>)
 80011c4:	f000 ffc8 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011c8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011da:	230b      	movs	r3, #11
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <HAL_ETH_MspInit+0x198>)
 80011e6:	f000 ffb7 	bl	8002158 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80011ea:	bf00      	nop
 80011ec:	3738      	adds	r7, #56	@ 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40028000 	.word	0x40028000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020800 	.word	0x58020800
 8001200:	58020000 	.word	0x58020000
 8001204:	58020400 	.word	0x58020400
 8001208:	58021800 	.word	0x58021800

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0bc      	sub	sp, #240	@ 0xf0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	22c0      	movs	r2, #192	@ 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fd7d 	bl	8009d2c <memset>
  if(huart->Instance==USART1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a4d      	ldr	r2, [pc, #308]	@ (800136c <HAL_UART_MspInit+0x160>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d147      	bne.n	80012cc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800123c:	f04f 0201 	mov.w	r2, #1
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f9cc 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f7ff fee3 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001262:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001268:	4a41      	ldr	r2, [pc, #260]	@ (8001370 <HAL_UART_MspInit+0x164>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001272:	4b3f      	ldr	r3, [pc, #252]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	4a3a      	ldr	r2, [pc, #232]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800129e:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b8:	2307      	movs	r3, #7
 80012ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012c2:	4619      	mov	r1, r3
 80012c4:	482b      	ldr	r0, [pc, #172]	@ (8001374 <HAL_UART_MspInit+0x168>)
 80012c6:	f000 ff47 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ca:	e04b      	b.n	8001364 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <HAL_UART_MspInit+0x16c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d146      	bne.n	8001364 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d6:	f04f 0202 	mov.w	r2, #2
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 f97f 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80012f8:	f7ff fe96 	bl	8001028 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <HAL_UART_MspInit+0x164>)
 80012fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001302:	4a1b      	ldr	r2, [pc, #108]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001308:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_UART_MspInit+0x164>)
 800130e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001312:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_UART_MspInit+0x164>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	4a13      	ldr	r2, [pc, #76]	@ (8001370 <HAL_UART_MspInit+0x164>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_UART_MspInit+0x164>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001338:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800133c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001352:	2307      	movs	r3, #7
 8001354:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <HAL_UART_MspInit+0x170>)
 8001360:	f000 fefa 	bl	8002158 <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	37f0      	adds	r7, #240	@ 0xf0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40011000 	.word	0x40011000
 8001370:	58024400 	.word	0x58024400
 8001374:	58020000 	.word	0x58020000
 8001378:	40004800 	.word	0x40004800
 800137c:	58020c00 	.word	0x58020c00

08001380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b090      	sub	sp, #64	@ 0x40
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	d827      	bhi.n	80013de <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800138e:	2200      	movs	r2, #0
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	2036      	movs	r0, #54	@ 0x36
 8001394:	f000 fa84 	bl	80018a0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001398:	2036      	movs	r0, #54	@ 0x36
 800139a:	f000 fa9b 	bl	80018d4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800139e:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_InitTick+0xc4>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_InitTick+0xc8>)
 80013a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013aa:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <HAL_InitTick+0xc8>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b4:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <HAL_InitTick+0xc8>)
 80013b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c2:	f107 0210 	add.w	r2, r7, #16
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f8cd 	bl	800356c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <HAL_InitTick+0x6a>
 80013dc:	e001      	b.n	80013e2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e02b      	b.n	800143a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013e2:	f002 f897 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 80013e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80013e8:	e004      	b.n	80013f4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ea:	f002 f893 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 80013ee:	4603      	mov	r3, r0
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013f6:	4a15      	ldr	r2, [pc, #84]	@ (800144c <HAL_InitTick+0xcc>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	3b01      	subs	r3, #1
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <HAL_InitTick+0xd0>)
 8001404:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <HAL_InitTick+0xd4>)
 8001406:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_InitTick+0xd0>)
 800140a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800140e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001410:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <HAL_InitTick+0xd0>)
 8001412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001414:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_InitTick+0xd0>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_InitTick+0xd0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001422:	480b      	ldr	r0, [pc, #44]	@ (8001450 <HAL_InitTick+0xd0>)
 8001424:	f003 ff10 	bl	8005248 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d104      	bne.n	8001438 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800142e:	4808      	ldr	r0, [pc, #32]	@ (8001450 <HAL_InitTick+0xd0>)
 8001430:	f003 ff6c 	bl	800530c <HAL_TIM_Base_Start_IT>
 8001434:	4603      	mov	r3, r0
 8001436:	e000      	b.n	800143a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	3740      	adds	r7, #64	@ 0x40
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	24000008 	.word	0x24000008
 8001448:	58024400 	.word	0x58024400
 800144c:	431bde83 	.word	0x431bde83
 8001450:	24000474 	.word	0x24000474
 8001454:	40001000 	.word	0x40001000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <TIM6_DAC_IRQHandler+0x10>)
 8001496:	f003 ffb1 	bl	80053fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000474 	.word	0x24000474

080014a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b6:	f3af 8000 	nop.w
 80014ba:	4601      	mov	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf0      	blt.n	80014b6 <_read+0x12>
  }

  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if(file == 1){
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <_write+0x22>
		HAL_UART_Transmit(&huart3,ptr,len,1000);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <_write+0x2c>)
 80014fe:	f004 f9c1 	bl	8005884 <HAL_UART_Transmit>
	}
  return len;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	240003d0 	.word	0x240003d0

08001510 <_close>:

int _close(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001538:	605a      	str	r2, [r3, #4]
  return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_isatty>:

int _isatty(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f008 fc64 	bl	8009e74 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24080000 	.word	0x24080000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	240004c0 	.word	0x240004c0
 80015e0:	24005000 	.word	0x24005000

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800161c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e8:	f7ff f842 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	@ (8001630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f008 fc35 	bl	8009e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fa71 	bl	8000afc <main>
  bx  lr
 800161a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001620:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001624:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001628:	0800ab50 	.word	0x0800ab50
  ldr r2, =_sbss
 800162c:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 8001630:	24004ffc 	.word	0x24004ffc

08001634 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC3_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f923 	bl	800188a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001644:	f001 fdbc 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_Init+0x68>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	4913      	ldr	r1, [pc, #76]	@ (80016a4 <HAL_Init+0x6c>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
 8001660:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_Init+0x68>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <HAL_Init+0x6c>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_Init+0x70>)
 800167a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800167c:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <HAL_Init+0x74>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	200f      	movs	r0, #15
 8001684:	f7ff fe7c 	bl	8001380 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e002      	b.n	8001698 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001692:	f7ff fccf 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58024400 	.word	0x58024400
 80016a4:	0800aa8c 	.word	0x0800aa8c
 80016a8:	24000004 	.word	0x24000004
 80016ac:	24000000 	.word	0x24000000

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2400000c 	.word	0x2400000c
 80016d4:	240004c4 	.word	0x240004c4

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	240004c4 	.word	0x240004c4

080016f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_GetREVID+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0c1b      	lsrs	r3, r3, #16
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	5c001000 	.word	0x5c001000

08001708 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001718:	4904      	ldr	r1, [pc, #16]	@ (800172c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	58000400 	.word	0x58000400

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	4313      	orrs	r3, r2
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	05fa0000 	.word	0x05fa0000

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	@ (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff4c 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ae:	f7ff ff63 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	6978      	ldr	r0, [r7, #20]
 80018ba:	f7ff ffb3 	bl	8001824 <NVIC_EncodePriority>
 80018be:	4602      	mov	r2, r0
 80018c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff82 	bl	80017d0 <__NVIC_SetPriority>
}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff56 	bl	8001794 <__NVIC_EnableIRQ>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0e3      	b.n	8001aca <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001908:	2b00      	cmp	r3, #0
 800190a:	d106      	bne.n	800191a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2223      	movs	r2, #35	@ 0x23
 8001910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fbab 	bl	8001070 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad4 <HAL_ETH_Init+0x1e4>)
 800191c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001920:	4a6c      	ldr	r2, [pc, #432]	@ (8001ad4 <HAL_ETH_Init+0x1e4>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800192a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <HAL_ETH_Init+0x1e4>)
 800192c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7a1b      	ldrb	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fee1 	bl	8001708 <HAL_SYSCFG_ETHInterfaceSelect>
 8001946:	e003      	b.n	8001950 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001948:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800194c:	f7ff fedc 	bl	8001708 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001950:	4b61      	ldr	r3, [pc, #388]	@ (8001ad8 <HAL_ETH_Init+0x1e8>)
 8001952:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800196a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800196c:	f7ff feb4 	bl	80016d8 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001972:	e011      	b.n	8001998 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001974:	f7ff feb0 	bl	80016d8 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001982:	d909      	bls.n	8001998 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	22e0      	movs	r2, #224	@ 0xe0
 8001990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e098      	b.n	8001aca <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1e4      	bne.n	8001974 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f89e 	bl	8001aec <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80019b0:	f001 fd80 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_ETH_Init+0x1ec>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	0c9a      	lsrs	r2, r3, #18
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3a01      	subs	r2, #1
 80019c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fa81 	bl	8001ed0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80019da:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019ea:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	22e0      	movs	r2, #224	@ 0xe0
 8001a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e05d      	b.n	8001aca <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a16:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <HAL_ETH_Init+0x1f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6952      	ldr	r2, [r2, #20]
 8001a22:	0051      	lsls	r1, r2, #1
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fae9 	bl	800200a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fb2f 	bl	800209c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	3305      	adds	r3, #5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	021a      	lsls	r2, r3, #8
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	3303      	adds	r3, #3
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	061a      	lsls	r2, r3, #24
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	041b      	lsls	r3, r3, #16
 8001a70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a8a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a8c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_ETH_Init+0x1f4>)
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_ETH_Init+0x1f8>)
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58000400 	.word	0x58000400
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	ffff8001 	.word	0xffff8001
 8001ae4:	0c020060 	.word	0x0c020060
 8001ae8:	0c20c000 	.word	0x0c20c000

08001aec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b06:	f001 fcd5 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8001b0a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001b78 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d804      	bhi.n	8001b1e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e022      	b.n	8001b64 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d204      	bcs.n	8001b30 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e019      	b.n	8001b64 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d915      	bls.n	8001b64 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d804      	bhi.n	8001b4a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e00c      	b.n	8001b64 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d804      	bhi.n	8001b5c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e003      	b.n	8001b64 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	02160ebf 	.word	0x02160ebf
 8001b7c:	03938700 	.word	0x03938700
 8001b80:	05f5e0ff 	.word	0x05f5e0ff
 8001b84:	08f0d17f 	.word	0x08f0d17f
 8001b88:	0ee6b27f 	.word	0x0ee6b27f

08001b8c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001b9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001ba6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
 8001bac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7b5b      	ldrb	r3, [r3, #13]
 8001bb4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7b9b      	ldrb	r3, [r3, #14]
 8001bbc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7bdb      	ldrb	r3, [r3, #15]
 8001bc4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	7c12      	ldrb	r2, [r2, #16]
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d102      	bne.n	8001bd6 <ETH_SetMACConfig+0x4a>
 8001bd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bd4:	e000      	b.n	8001bd8 <ETH_SetMACConfig+0x4c>
 8001bd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	7c52      	ldrb	r2, [r2, #17]
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d102      	bne.n	8001be8 <ETH_SetMACConfig+0x5c>
 8001be2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001be6:	e000      	b.n	8001bea <ETH_SetMACConfig+0x5e>
 8001be8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7c9b      	ldrb	r3, [r3, #18]
 8001bf0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bf2:	431a      	orrs	r2, r3
               macconf->Speed |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001bf8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001bfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	7f1b      	ldrb	r3, [r3, #28]
 8001c04:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001c06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7f5b      	ldrb	r3, [r3, #29]
 8001c0c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	7f92      	ldrb	r2, [r2, #30]
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	d102      	bne.n	8001c1e <ETH_SetMACConfig+0x92>
 8001c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c1c:	e000      	b.n	8001c20 <ETH_SetMACConfig+0x94>
 8001c1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7fdb      	ldrb	r3, [r3, #31]
 8001c26:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c30:	2a00      	cmp	r2, #0
 8001c32:	d102      	bne.n	8001c3a <ETH_SetMACConfig+0xae>
 8001c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c38:	e000      	b.n	8001c3c <ETH_SetMACConfig+0xb0>
 8001c3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c3c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c4a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001c4c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <ETH_SetMACConfig+0x22c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c76:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c80:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001c8a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d102      	bne.n	8001c9e <ETH_SetMACConfig+0x112>
 8001c98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c9c:	e000      	b.n	8001ca0 <ETH_SetMACConfig+0x114>
 8001c9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ca0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <ETH_SetMACConfig+0x230>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cc4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <ETH_SetMACConfig+0x234>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ce8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d101      	bne.n	8001cfe <ETH_SetMACConfig+0x172>
 8001cfa:	2280      	movs	r2, #128	@ 0x80
 8001cfc:	e000      	b.n	8001d00 <ETH_SetMACConfig+0x174>
 8001cfe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d00:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d12:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001d28:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001d30:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3e:	f023 0103 	bic.w	r1, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001d56:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d101      	bne.n	8001d7a <ETH_SetMACConfig+0x1ee>
 8001d76:	2240      	movs	r2, #64	@ 0x40
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0x1f0>
 8001d7a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001d84:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001d8e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001d9c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	00048083 	.word	0x00048083
 8001dbc:	c0f88000 	.word	0xc0f88000
 8001dc0:	fffffef0 	.word	0xfffffef0

08001dc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b38      	ldr	r3, [pc, #224]	@ (8001ebc <ETH_SetDMAConfig+0xf8>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	6811      	ldr	r1, [r2, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001df6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	7b1b      	ldrb	r3, [r3, #12]
 8001dfc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <ETH_SetDMAConfig+0xfc>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	430b      	orrs	r3, r1
 8001e18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e1c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	7b5b      	ldrb	r3, [r3, #13]
 8001e22:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e34:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <ETH_SetDMAConfig+0x100>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	430b      	orrs	r3, r1
 8001e44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e48:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7d1b      	ldrb	r3, [r3, #20]
 8001e54:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7f5b      	ldrb	r3, [r3, #29]
 8001e5c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <ETH_SetDMAConfig+0x104>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e7e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7f1b      	ldrb	r3, [r3, #28]
 8001e86:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <ETH_SetDMAConfig+0x108>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	ffff87fd 	.word	0xffff87fd
 8001ec0:	ffff2ffe 	.word	0xffff2ffe
 8001ec4:	fffec000 	.word	0xfffec000
 8001ec8:	ffc0efef 	.word	0xffc0efef
 8001ecc:	7fc0ffff 	.word	0x7fc0ffff

08001ed0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0a4      	sub	sp, #144	@ 0x90
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001f28:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f52:	2300      	movs	r3, #0
 8001f54:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f7a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f84:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001faa:	2300      	movs	r3, #0
 8001fac:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fde6 	bl	8001b8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fda:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fde:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fe4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fe8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ff0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fee1 	bl	8001dc4 <ETH_SetDMAConfig>
}
 8002002:	bf00      	nop
 8002004:	3790      	adds	r7, #144	@ 0x90
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e01d      	b.n	8002054 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68d9      	ldr	r1, [r3, #12]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	3206      	adds	r2, #6
 800204a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d9de      	bls.n	8002018 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	2303      	movs	r3, #3
 800206c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e023      	b.n	80020f2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	3212      	adds	r2, #18
 80020e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d9d8      	bls.n	80020aa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211e:	461a      	mov	r2, r3
 8002120:	2303      	movs	r3, #3
 8002122:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002132:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002146:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002166:	4b89      	ldr	r3, [pc, #548]	@ (800238c <HAL_GPIO_Init+0x234>)
 8002168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800216a:	e194      	b.n	8002496 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8186 	beq.w	8002490 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d005      	beq.n	800219c <HAL_GPIO_Init+0x44>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d130      	bne.n	80021fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021d2:	2201      	movs	r2, #1
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 0201 	and.w	r2, r3, #1
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b03      	cmp	r3, #3
 8002208:	d017      	beq.n	800223a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d123      	bne.n	800228e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80e0 	beq.w	8002490 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_GPIO_Init+0x238>)
 80022d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002390 <HAL_GPIO_Init+0x238>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_GPIO_Init+0x238>)
 80022e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ee:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <HAL_GPIO_Init+0x23c>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a20      	ldr	r2, [pc, #128]	@ (8002398 <HAL_GPIO_Init+0x240>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d052      	beq.n	80023c0 <HAL_GPIO_Init+0x268>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <HAL_GPIO_Init+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d031      	beq.n	8002386 <HAL_GPIO_Init+0x22e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_GPIO_Init+0x248>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02b      	beq.n	8002382 <HAL_GPIO_Init+0x22a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1d      	ldr	r2, [pc, #116]	@ (80023a4 <HAL_GPIO_Init+0x24c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x226>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <HAL_GPIO_Init+0x250>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x222>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <HAL_GPIO_Init+0x254>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x21e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1a      	ldr	r2, [pc, #104]	@ (80023b0 <HAL_GPIO_Init+0x258>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_GPIO_Init+0x25c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <HAL_GPIO_Init+0x260>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_GPIO_Init+0x264>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x20e>
 8002362:	2309      	movs	r3, #9
 8002364:	e02d      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 8002366:	230a      	movs	r3, #10
 8002368:	e02b      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 800236a:	2308      	movs	r3, #8
 800236c:	e029      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 800236e:	2307      	movs	r3, #7
 8002370:	e027      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 8002372:	2306      	movs	r3, #6
 8002374:	e025      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 8002376:	2305      	movs	r3, #5
 8002378:	e023      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 800237a:	2304      	movs	r3, #4
 800237c:	e021      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 800237e:	2303      	movs	r3, #3
 8002380:	e01f      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 8002382:	2302      	movs	r3, #2
 8002384:	e01d      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 8002386:	2301      	movs	r3, #1
 8002388:	e01b      	b.n	80023c2 <HAL_GPIO_Init+0x26a>
 800238a:	bf00      	nop
 800238c:	58000080 	.word	0x58000080
 8002390:	58024400 	.word	0x58024400
 8002394:	58000400 	.word	0x58000400
 8002398:	58020000 	.word	0x58020000
 800239c:	58020400 	.word	0x58020400
 80023a0:	58020800 	.word	0x58020800
 80023a4:	58020c00 	.word	0x58020c00
 80023a8:	58021000 	.word	0x58021000
 80023ac:	58021400 	.word	0x58021400
 80023b0:	58021800 	.word	0x58021800
 80023b4:	58021c00 	.word	0x58021c00
 80023b8:	58022000 	.word	0x58022000
 80023bc:	58022400 	.word	0x58022400
 80023c0:	2300      	movs	r3, #0
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	f002 0203 	and.w	r2, r2, #3
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	4093      	lsls	r3, r2
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d2:	4938      	ldr	r1, [pc, #224]	@ (80024b4 <HAL_GPIO_Init+0x35c>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002434:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f47f ae63 	bne.w	800216c <HAL_GPIO_Init+0x14>
  }
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3724      	adds	r7, #36	@ 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	58000400 	.word	0x58000400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024f4:	4b29      	ldr	r3, [pc, #164]	@ (800259c <HAL_PWREx_ConfigSupply+0xb0>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d00a      	beq.n	8002516 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002500:	4b26      	ldr	r3, [pc, #152]	@ (800259c <HAL_PWREx_ConfigSupply+0xb0>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e040      	b.n	8002594 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e03e      	b.n	8002594 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002516:	4b21      	ldr	r3, [pc, #132]	@ (800259c <HAL_PWREx_ConfigSupply+0xb0>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800251e:	491f      	ldr	r1, [pc, #124]	@ (800259c <HAL_PWREx_ConfigSupply+0xb0>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002526:	f7ff f8d7 	bl	80016d8 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800252c:	e009      	b.n	8002542 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800252e:	f7ff f8d3 	bl	80016d8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800253c:	d901      	bls.n	8002542 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e028      	b.n	8002594 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_PWREx_ConfigSupply+0xb0>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800254e:	d1ee      	bne.n	800252e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b1e      	cmp	r3, #30
 8002554:	d008      	beq.n	8002568 <HAL_PWREx_ConfigSupply+0x7c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b2e      	cmp	r3, #46	@ 0x2e
 800255a:	d005      	beq.n	8002568 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b1d      	cmp	r3, #29
 8002560:	d002      	beq.n	8002568 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b2d      	cmp	r3, #45	@ 0x2d
 8002566:	d114      	bne.n	8002592 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002568:	f7ff f8b6 	bl	80016d8 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800256e:	e009      	b.n	8002584 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002570:	f7ff f8b2 	bl	80016d8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800257e:	d901      	bls.n	8002584 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_PWREx_ConfigSupply+0xb0>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d1ee      	bne.n	8002570 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	58024800 	.word	0x58024800

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	@ 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f000 bc48 	b.w	8002e44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8088 	beq.w	80026d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b99      	ldr	r3, [pc, #612]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025cc:	4b96      	ldr	r3, [pc, #600]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d007      	beq.n	80025e8 <HAL_RCC_OscConfig+0x48>
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	2b18      	cmp	r3, #24
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0x62>
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06d      	beq.n	80026d0 <HAL_RCC_OscConfig+0x130>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d169      	bne.n	80026d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f000 bc21 	b.w	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x7a>
 800260c:	4b86      	ldr	r3, [pc, #536]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a85      	ldr	r2, [pc, #532]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x9c>
 8002622:	4b81      	ldr	r3, [pc, #516]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a80      	ldr	r2, [pc, #512]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b7e      	ldr	r3, [pc, #504]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7d      	ldr	r2, [pc, #500]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0xc0>
 8002646:	4b78      	ldr	r3, [pc, #480]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a77      	ldr	r2, [pc, #476]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b75      	ldr	r3, [pc, #468]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a74      	ldr	r2, [pc, #464]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 8002660:	4b71      	ldr	r3, [pc, #452]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a70      	ldr	r2, [pc, #448]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b6e      	ldr	r3, [pc, #440]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6d      	ldr	r2, [pc, #436]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff f82a 	bl	80016d8 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff f826 	bl	80016d8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e3d4      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xe8>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7ff f816 	bl	80016d8 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff f812 	bl	80016d8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e3c0      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c2:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x110>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80ca 	beq.w	8002874 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e0:	4b51      	ldr	r3, [pc, #324]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_RCC_OscConfig+0x166>
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b18      	cmp	r3, #24
 80026fa:	d156      	bne.n	80027aa <HAL_RCC_OscConfig+0x20a>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d151      	bne.n	80027aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002706:	4b48      	ldr	r3, [pc, #288]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x17e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e392      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800271e:	4b42      	ldr	r3, [pc, #264]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0219 	bic.w	r2, r3, #25
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	493f      	ldr	r1, [pc, #252]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe ffd2 	bl	80016d8 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe ffce 	bl	80016d8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e37c      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	f7fe ffcb 	bl	80016f0 <HAL_GetREVID>
 800275a:	4603      	mov	r3, r0
 800275c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002760:	4293      	cmp	r3, r2
 8002762:	d817      	bhi.n	8002794 <HAL_RCC_OscConfig+0x1f4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	d108      	bne.n	800277e <HAL_RCC_OscConfig+0x1de>
 800276c:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002774:	4a2c      	ldr	r2, [pc, #176]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800277a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277c:	e07a      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b2a      	ldr	r3, [pc, #168]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	4926      	ldr	r1, [pc, #152]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002792:	e06f      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4921      	ldr	r1, [pc, #132]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	e064      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d047      	beq.n	8002842 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0219 	bic.w	r2, r3, #25
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	491a      	ldr	r1, [pc, #104]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe ff88 	bl	80016d8 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe ff84 	bl	80016d8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e332      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	f7fe ff81 	bl	80016f0 <HAL_GetREVID>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d819      	bhi.n	800282c <HAL_RCC_OscConfig+0x28c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b40      	cmp	r3, #64	@ 0x40
 80027fe:	d108      	bne.n	8002812 <HAL_RCC_OscConfig+0x272>
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002808:	4a07      	ldr	r2, [pc, #28]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280e:	6053      	str	r3, [r2, #4]
 8002810:	e030      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
 8002812:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	031b      	lsls	r3, r3, #12
 8002820:	4901      	ldr	r1, [pc, #4]	@ (8002828 <HAL_RCC_OscConfig+0x288>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
 8002826:	e025      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
 8002828:	58024400 	.word	0x58024400
 800282c:	4b9a      	ldr	r3, [pc, #616]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4997      	ldr	r1, [pc, #604]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	e018      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002842:	4b95      	ldr	r3, [pc, #596]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a94      	ldr	r2, [pc, #592]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe ff43 	bl	80016d8 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe ff3f 	bl	80016d8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e2ed      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002868:	4b8b      	ldr	r3, [pc, #556]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a9 	beq.w	80029d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002882:	4b85      	ldr	r3, [pc, #532]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800288a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800288c:	4b82      	ldr	r3, [pc, #520]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d007      	beq.n	80028a8 <HAL_RCC_OscConfig+0x308>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b18      	cmp	r3, #24
 800289c:	d13a      	bne.n	8002914 <HAL_RCC_OscConfig+0x374>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d135      	bne.n	8002914 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x320>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b80      	cmp	r3, #128	@ 0x80
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e2c1      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c0:	f7fe ff16 	bl	80016f0 <HAL_GetREVID>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d817      	bhi.n	80028fe <HAL_RCC_OscConfig+0x35e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_OscConfig+0x348>
 80028d6:	4b70      	ldr	r3, [pc, #448]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028de:	4a6e      	ldr	r2, [pc, #440]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e6:	e075      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	069b      	lsls	r3, r3, #26
 80028f6:	4968      	ldr	r1, [pc, #416]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fc:	e06a      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fe:	4b66      	ldr	r3, [pc, #408]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	4962      	ldr	r1, [pc, #392]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002912:	e05f      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d042      	beq.n	80029a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800291c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5d      	ldr	r2, [pc, #372]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fed6 	bl	80016d8 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002930:	f7fe fed2 	bl	80016d8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e280      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002942:	4b55      	ldr	r3, [pc, #340]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294e:	f7fe fecf 	bl	80016f0 <HAL_GetREVID>
 8002952:	4603      	mov	r3, r0
 8002954:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002958:	4293      	cmp	r3, r2
 800295a:	d817      	bhi.n	800298c <HAL_RCC_OscConfig+0x3ec>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	2b20      	cmp	r3, #32
 8002962:	d108      	bne.n	8002976 <HAL_RCC_OscConfig+0x3d6>
 8002964:	4b4c      	ldr	r3, [pc, #304]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800296c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002972:	6053      	str	r3, [r2, #4]
 8002974:	e02e      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
 8002976:	4b48      	ldr	r3, [pc, #288]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	069b      	lsls	r3, r3, #26
 8002984:	4944      	ldr	r1, [pc, #272]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
 800298a:	e023      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
 800298c:	4b42      	ldr	r3, [pc, #264]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	493f      	ldr	r1, [pc, #252]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fe93 	bl	80016d8 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029b6:	f7fe fe8f 	bl	80016d8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e23d      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029c8:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d036      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d019      	beq.n	8002a1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fe70 	bl	80016d8 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fe fe6c 	bl	80016d8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e21a      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a0e:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x45c>
 8002a1a:	e018      	b.n	8002a4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fe56 	bl	80016d8 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe fe52 	bl	80016d8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e200      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d039      	beq.n	8002ace <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fe33 	bl	80016d8 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a76:	f7fe fe2f 	bl	80016d8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1dd      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4d6>
 8002a94:	e01b      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a9c:	4b9b      	ldr	r3, [pc, #620]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a9a      	ldr	r2, [pc, #616]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fe16 	bl	80016d8 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab0:	f7fe fe12 	bl	80016d8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1c0      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac2:	4b92      	ldr	r3, [pc, #584]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8081 	beq.w	8002bde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002adc:	4b8c      	ldr	r3, [pc, #560]	@ (8002d10 <HAL_RCC_OscConfig+0x770>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a8b      	ldr	r2, [pc, #556]	@ (8002d10 <HAL_RCC_OscConfig+0x770>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fdf6 	bl	80016d8 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe fdf2 	bl	80016d8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	@ 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1a0      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b02:	4b83      	ldr	r3, [pc, #524]	@ (8002d10 <HAL_RCC_OscConfig+0x770>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x584>
 8002b16:	4b7d      	ldr	r3, [pc, #500]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b22:	e02d      	b.n	8002b80 <HAL_RCC_OscConfig+0x5e0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5a6>
 8002b2c:	4b77      	ldr	r3, [pc, #476]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a76      	ldr	r2, [pc, #472]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b38:	4b74      	ldr	r3, [pc, #464]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4a73      	ldr	r2, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x5e0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c8>
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x5e0>
 8002b68:	4b68      	ldr	r3, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a67      	ldr	r2, [pc, #412]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b74:	4b65      	ldr	r3, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a64      	ldr	r2, [pc, #400]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fda6 	bl	80016d8 <HAL_GetTick>
 8002b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe fda2 	bl	80016d8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e14e      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba6:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x5f0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fd90 	bl	80016d8 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fd8c 	bl	80016d8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e138      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 812d 	beq.w	8002e42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002be8:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bf0:	2b18      	cmp	r3, #24
 8002bf2:	f000 80bd 	beq.w	8002d70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 809e 	bne.w	8002d3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a41      	ldr	r2, [pc, #260]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fd64 	bl	80016d8 <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fd60 	bl	80016d8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e10e      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c26:	4b39      	ldr	r3, [pc, #228]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c32:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c36:	4b37      	ldr	r3, [pc, #220]	@ (8002d14 <HAL_RCC_OscConfig+0x774>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	4931      	ldr	r1, [pc, #196]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	3b01      	subs	r3, #1
 8002c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	3b01      	subs	r3, #1
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	3b01      	subs	r3, #1
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c7c:	4923      	ldr	r1, [pc, #140]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c82:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c92:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_RCC_OscConfig+0x778>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c9a:	00d2      	lsls	r2, r2, #3
 8002c9c:	491b      	ldr	r1, [pc, #108]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f023 020c 	bic.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	4917      	ldr	r1, [pc, #92]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	f023 0202 	bic.w	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	4912      	ldr	r1, [pc, #72]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	4a10      	ldr	r2, [pc, #64]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cde:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf6:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fce9 	bl	80016d8 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d08:	e011      	b.n	8002d2e <HAL_RCC_OscConfig+0x78e>
 8002d0a:	bf00      	nop
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	58024800 	.word	0x58024800
 8002d14:	fffffc0c 	.word	0xfffffc0c
 8002d18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fcdc 	bl	80016d8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e08a      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x77c>
 8002d3a:	e082      	b.n	8002e42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b43      	ldr	r3, [pc, #268]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a42      	ldr	r2, [pc, #264]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fcc6 	bl	80016d8 <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fcc2 	bl	80016d8 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e070      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d62:	4b3a      	ldr	r3, [pc, #232]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x7b0>
 8002d6e:	e068      	b.n	8002e42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d70:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d76:	4b35      	ldr	r3, [pc, #212]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d031      	beq.n	8002de8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d12a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d122      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d11a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0a5b      	lsrs	r3, r3, #9
 8002db6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d111      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d108      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	0e1b      	lsrs	r3, r3, #24
 8002dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e02b      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d01f      	beq.n	8002e42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e0e:	f7fe fc63 	bl	80016d8 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e14:	bf00      	nop
 8002e16:	f7fe fc5f 	bl	80016d8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d0f9      	beq.n	8002e16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_OscConfig+0x8b0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e2e:	00d2      	lsls	r2, r2, #3
 8002e30:	4906      	ldr	r1, [pc, #24]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3730      	adds	r7, #48	@ 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	ffff0007 	.word	0xffff0007

08002e54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e19c      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b8a      	ldr	r3, [pc, #552]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b87      	ldr	r3, [pc, #540]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	4985      	ldr	r1, [pc, #532]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b83      	ldr	r3, [pc, #524]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e184      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	4b7b      	ldr	r3, [pc, #492]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb4:	4b78      	ldr	r3, [pc, #480]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4975      	ldr	r1, [pc, #468]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b70      	ldr	r3, [pc, #448]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d908      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	496a      	ldr	r1, [pc, #424]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b64      	ldr	r3, [pc, #400]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d908      	bls.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f10:	4b61      	ldr	r3, [pc, #388]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	495e      	ldr	r1, [pc, #376]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b59      	ldr	r3, [pc, #356]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d908      	bls.n	8002f50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3e:	4b56      	ldr	r3, [pc, #344]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4953      	ldr	r1, [pc, #332]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b4d      	ldr	r3, [pc, #308]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d908      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f023 020f 	bic.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4947      	ldr	r1, [pc, #284]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d055      	beq.n	8003036 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f8a:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4940      	ldr	r1, [pc, #256]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d121      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0f6      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0ea      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0de      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0d6      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f023 0207 	bic.w	r2, r3, #7
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4925      	ldr	r1, [pc, #148]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fe fb67 	bl	80016d8 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	e00a      	b.n	8003024 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fe fb63 	bl	80016d8 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0be      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	429a      	cmp	r2, r3
 8003034:	d1eb      	bne.n	800300e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	429a      	cmp	r2, r3
 8003050:	d208      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f023 020f 	bic.w	r2, r3, #15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	490e      	ldr	r1, [pc, #56]	@ (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003060:	4313      	orrs	r3, r2
 8003062:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003064:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d214      	bcs.n	800309c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 020f 	bic.w	r2, r3, #15
 800307a:	4906      	ldr	r1, [pc, #24]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <HAL_RCC_ClockConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e086      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
 8003094:	52002000 	.word	0x52002000
 8003098:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d010      	beq.n	80030ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4b3f      	ldr	r3, [pc, #252]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d208      	bcs.n	80030ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030b8:	4b3c      	ldr	r3, [pc, #240]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	4939      	ldr	r1, [pc, #228]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	4b34      	ldr	r3, [pc, #208]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d208      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030e6:	4b31      	ldr	r3, [pc, #196]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	492e      	ldr	r1, [pc, #184]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003110:	429a      	cmp	r2, r3
 8003112:	d208      	bcs.n	8003126 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4922      	ldr	r1, [pc, #136]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003122:	4313      	orrs	r3, r2
 8003124:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d010      	beq.n	8003154 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800313e:	429a      	cmp	r2, r3
 8003140:	d208      	bcs.n	8003154 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4917      	ldr	r1, [pc, #92]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003150:	4313      	orrs	r3, r2
 8003152:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003154:	f000 f834 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	4912      	ldr	r1, [pc, #72]	@ (80031b0 <HAL_RCC_ClockConfig+0x35c>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003172:	4b0e      	ldr	r3, [pc, #56]	@ (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a0d      	ldr	r2, [pc, #52]	@ (80031b0 <HAL_RCC_ClockConfig+0x35c>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_RCC_ClockConfig+0x360>)
 800318a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800318c:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <HAL_RCC_ClockConfig+0x364>)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <HAL_RCC_ClockConfig+0x368>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe f8f2 	bl	8001380 <HAL_InitTick>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400
 80031b0:	0800aa8c 	.word	0x0800aa8c
 80031b4:	24000004 	.word	0x24000004
 80031b8:	24000000 	.word	0x24000000
 80031bc:	24000008 	.word	0x24000008

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c6:	4bb3      	ldr	r3, [pc, #716]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	f200 8155 	bhi.w	800347e <HAL_RCC_GetSysClockFreq+0x2be>
 80031d4:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003241 	.word	0x08003241
 80031e0:	0800347f 	.word	0x0800347f
 80031e4:	0800347f 	.word	0x0800347f
 80031e8:	0800347f 	.word	0x0800347f
 80031ec:	0800347f 	.word	0x0800347f
 80031f0:	0800347f 	.word	0x0800347f
 80031f4:	0800347f 	.word	0x0800347f
 80031f8:	0800347f 	.word	0x0800347f
 80031fc:	08003267 	.word	0x08003267
 8003200:	0800347f 	.word	0x0800347f
 8003204:	0800347f 	.word	0x0800347f
 8003208:	0800347f 	.word	0x0800347f
 800320c:	0800347f 	.word	0x0800347f
 8003210:	0800347f 	.word	0x0800347f
 8003214:	0800347f 	.word	0x0800347f
 8003218:	0800347f 	.word	0x0800347f
 800321c:	0800326d 	.word	0x0800326d
 8003220:	0800347f 	.word	0x0800347f
 8003224:	0800347f 	.word	0x0800347f
 8003228:	0800347f 	.word	0x0800347f
 800322c:	0800347f 	.word	0x0800347f
 8003230:	0800347f 	.word	0x0800347f
 8003234:	0800347f 	.word	0x0800347f
 8003238:	0800347f 	.word	0x0800347f
 800323c:	08003273 	.word	0x08003273
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003240:	4b94      	ldr	r3, [pc, #592]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800324c:	4b91      	ldr	r3, [pc, #580]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	4a90      	ldr	r2, [pc, #576]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800325e:	e111      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003260:	4b8d      	ldr	r3, [pc, #564]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003262:	61bb      	str	r3, [r7, #24]
      break;
 8003264:	e10e      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003266:	4b8d      	ldr	r3, [pc, #564]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003268:	61bb      	str	r3, [r7, #24]
      break;
 800326a:	e10b      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800326c:	4b8c      	ldr	r3, [pc, #560]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800326e:	61bb      	str	r3, [r7, #24]
      break;
 8003270:	e108      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003272:	4b88      	ldr	r3, [pc, #544]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800327c:	4b85      	ldr	r3, [pc, #532]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003286:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003288:	4b82      	ldr	r3, [pc, #520]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003292:	4b80      	ldr	r3, [pc, #512]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	08db      	lsrs	r3, r3, #3
 8003298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80e1 	beq.w	8003478 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	f000 8083 	beq.w	80033c4 <HAL_RCC_GetSysClockFreq+0x204>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	f200 80a1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x248>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x114>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d056      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032d2:	e099      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02d      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	08db      	lsrs	r3, r3, #3
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330a:	4b62      	ldr	r3, [pc, #392]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331a:	ed97 6a02 	vldr	s12, [r7, #8]
 800331e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800332e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800333a:	e087      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003362:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800337e:	e065      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b40      	ldr	r3, [pc, #256]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033c2:	e043      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003406:	e021      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341a:	4b1e      	ldr	r3, [pc, #120]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 6a02 	vldr	s12, [r7, #8]
 800342e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800344a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800344c:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	0a5b      	lsrs	r3, r3, #9
 8003452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003456:	3301      	adds	r3, #1
 8003458:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003464:	edd7 6a07 	vldr	s13, [r7, #28]
 8003468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003470:	ee17 3a90 	vmov	r3, s15
 8003474:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800347e:	4b07      	ldr	r3, [pc, #28]	@ (800349c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003480:	61bb      	str	r3, [r7, #24]
      break;
 8003482:	bf00      	nop
  }

  return sysclockfreq;
 8003484:	69bb      	ldr	r3, [r7, #24]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	@ 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	58024400 	.word	0x58024400
 8003498:	03d09000 	.word	0x03d09000
 800349c:	003d0900 	.word	0x003d0900
 80034a0:	007a1200 	.word	0x007a1200
 80034a4:	46000000 	.word	0x46000000
 80034a8:	4c742400 	.word	0x4c742400
 80034ac:	4a742400 	.word	0x4a742400
 80034b0:	4af42400 	.word	0x4af42400

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ba:	f7ff fe81 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <HAL_RCC_GetHCLKFreq+0x50>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	490f      	ldr	r1, [pc, #60]	@ (8003508 <HAL_RCC_GetHCLKFreq+0x54>)
 80034cc:	5ccb      	ldrb	r3, [r1, r3]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_RCC_GetHCLKFreq+0x50>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <HAL_RCC_GetHCLKFreq+0x54>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a07      	ldr	r2, [pc, #28]	@ (800350c <HAL_RCC_GetHCLKFreq+0x58>)
 80034f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <HAL_RCC_GetHCLKFreq+0x58>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	58024400 	.word	0x58024400
 8003508:	0800aa8c 	.word	0x0800aa8c
 800350c:	24000004 	.word	0x24000004
 8003510:	24000000 	.word	0x24000000

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003518:	f7ff ffcc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	58024400 	.word	0x58024400
 800353c:	0800aa8c 	.word	0x0800aa8c

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003544:	f7ff ffb6 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	58024400 	.word	0x58024400
 8003568:	0800aa8c 	.word	0x0800aa8c

0800356c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	223f      	movs	r2, #63	@ 0x3f
 800357a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800357c:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0207 	and.w	r2, r3, #7
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003588:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80035ac:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <HAL_RCC_GetClockConfig+0x80>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	58024400 	.word	0x58024400
 80035ec:	52002000 	.word	0x52002000

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b0ca      	sub	sp, #296	@ 0x128
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003602:	2300      	movs	r3, #0
 8003604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003614:	2500      	movs	r5, #0
 8003616:	ea54 0305 	orrs.w	r3, r4, r5
 800361a:	d049      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003622:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003626:	d02f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003628:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800362c:	d828      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800362e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003632:	d01a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003638:	d822      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800363e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003642:	d007      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003644:	e01c      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003646:	4bb8      	ldr	r3, [pc, #736]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	4ab7      	ldr	r2, [pc, #732]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003652:	e01a      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	3308      	adds	r3, #8
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fc8f 	bl	8004f80 <RCCEx_PLL2_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	3328      	adds	r3, #40	@ 0x28
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fd36 	bl	80050e4 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003692:	4ba5      	ldr	r3, [pc, #660]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003696:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a0:	4aa1      	ldr	r2, [pc, #644]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036bc:	f04f 0900 	mov.w	r9, #0
 80036c0:	ea58 0309 	orrs.w	r3, r8, r9
 80036c4:	d047      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d82a      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036d0:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036ed 	.word	0x080036ed
 80036dc:	080036fb 	.word	0x080036fb
 80036e0:	08003711 	.word	0x08003711
 80036e4:	0800372f 	.word	0x0800372f
 80036e8:	0800372f 	.word	0x0800372f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	4a8d      	ldr	r2, [pc, #564]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f8:	e01a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	3308      	adds	r3, #8
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fc3c 	bl	8004f80 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800370e:	e00f      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	3328      	adds	r3, #40	@ 0x28
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fce3 	bl	80050e4 <RCCEx_PLL3_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800372e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003738:	4b7b      	ldr	r3, [pc, #492]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	f023 0107 	bic.w	r1, r3, #7
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	4a78      	ldr	r2, [pc, #480]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6513      	str	r3, [r2, #80]	@ 0x50
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003762:	f04f 0b00 	mov.w	fp, #0
 8003766:	ea5a 030b 	orrs.w	r3, sl, fp
 800376a:	d04c      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003776:	d030      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377c:	d829      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800377e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003780:	d02d      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003782:	2bc0      	cmp	r3, #192	@ 0xc0
 8003784:	d825      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003786:	2b80      	cmp	r3, #128	@ 0x80
 8003788:	d018      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800378a:	2b80      	cmp	r3, #128	@ 0x80
 800378c:	d821      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003792:	2b40      	cmp	r3, #64	@ 0x40
 8003794:	d007      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003796:	e01c      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b63      	ldr	r3, [pc, #396]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4a62      	ldr	r2, [pc, #392]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037a4:	e01c      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	3308      	adds	r3, #8
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fbe6 	bl	8004f80 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037ba:	e011      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	3328      	adds	r3, #40	@ 0x28
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fc8d 	bl	80050e4 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003812:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800381c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d053      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800382e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003832:	d035      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003834:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003838:	d82e      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800383a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800383e:	d031      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003840:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003844:	d828      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384a:	d01a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003850:	d822      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800385a:	d007      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800385c:	e01c      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385e:	4b32      	ldr	r3, [pc, #200]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	4a31      	ldr	r2, [pc, #196]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800386a:	e01c      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	3308      	adds	r3, #8
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fb83 	bl	8004f80 <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003880:	e011      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	3328      	adds	r3, #40	@ 0x28
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 fc2a 	bl	80050e4 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003896:	e006      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389e:	e002      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038be:	4a1a      	ldr	r2, [pc, #104]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80038e8:	460b      	mov	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	d056      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038fa:	d038      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003900:	d831      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003902:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003906:	d034      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003908:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800390c:	d82b      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800390e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003912:	d01d      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003918:	d825      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800391e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003924:	e01f      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4ba2      	ldr	r3, [pc, #648]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	4aa1      	ldr	r2, [pc, #644]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003938:	e01c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393e:	3308      	adds	r3, #8
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fb1c 	bl	8004f80 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	3328      	adds	r3, #40	@ 0x28
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fbc3 	bl	80050e4 <RCCEx_PLL3_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800397c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800398c:	4a8a      	ldr	r2, [pc, #552]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398e:	430b      	orrs	r3, r1
 8003990:	6593      	str	r3, [r2, #88]	@ 0x58
 8003992:	e003      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d03a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	2b30      	cmp	r3, #48	@ 0x30
 80039c4:	d01f      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039c6:	2b30      	cmp	r3, #48	@ 0x30
 80039c8:	d819      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d00c      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d815      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d019      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d111      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039da:	4b77      	ldr	r3, [pc, #476]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	4a76      	ldr	r2, [pc, #472]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039e6:	e011      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	3308      	adds	r3, #8
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fac5 	bl	8004f80 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a14:	4b68      	ldr	r3, [pc, #416]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	4a65      	ldr	r2, [pc, #404]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d051      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5c:	d035      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a62:	d82e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a68:	d031      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a6e:	d828      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a74:	d01a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7a:	d822      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a84:	d007      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a86:	e01c      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fa6e 	bl	8004f80 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aaa:	e011      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	3328      	adds	r3, #40	@ 0x28
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fb15 	bl	80050e4 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ad8:	4b37      	ldr	r3, [pc, #220]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003adc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae6:	4a34      	ldr	r2, [pc, #208]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b10:	460b      	mov	r3, r1
 8003b12:	4313      	orrs	r3, r2
 8003b14:	d056      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d033      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b26:	d82c      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b2c:	d02f      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b32:	d826      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b38:	d02b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b3e:	d820      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b44:	d012      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b4a:	d81a      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d115      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fa0e 	bl	8004f80 <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b6a:	e015      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	3328      	adds	r3, #40	@ 0x28
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 fab5 	bl	80050e4 <RCCEx_PLL3_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b80:	e00a      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e004      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bae:	4a02      	ldr	r2, [pc, #8]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bb6:	bf00      	nop
 8003bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d055      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf0:	d033      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf6:	d82c      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfc:	d02f      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c02:	d826      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c08:	d02b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c0e:	d820      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c14:	d012      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1a:	d81a      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d022      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c24:	d115      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f9a6 	bl	8004f80 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e015      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	3328      	adds	r3, #40	@ 0x28
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fa4d 	bl	80050e4 <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c50:	e00a      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e004      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c70:	4ba3      	ldr	r3, [pc, #652]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c80:	4a9f      	ldr	r2, [pc, #636]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	d037      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cba:	d00e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc0:	d816      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cca:	d111      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	4a8b      	ldr	r2, [pc, #556]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cd8:	e00f      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	3308      	adds	r3, #8
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f94c 	bl	8004f80 <RCCEx_PLL2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cee:	e004      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d10:	4a7b      	ldr	r2, [pc, #492]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d16:	e003      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d039      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d81c      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d61 	.word	0x08003d61
 8003d58:	08003d6f 	.word	0x08003d6f
 8003d5c:	08003d8d 	.word	0x08003d8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4b67      	ldr	r3, [pc, #412]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	4a66      	ldr	r2, [pc, #408]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d6c:	e00f      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	3308      	adds	r3, #8
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 f902 	bl	8004f80 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d96:	4b5a      	ldr	r3, [pc, #360]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	f023 0103 	bic.w	r1, r3, #3
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	4a56      	ldr	r2, [pc, #344]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f000 809f 	beq.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4a      	ldr	r2, [pc, #296]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de2:	f7fd fc79 	bl	80016d8 <HAL_GetTick>
 8003de6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dea:	e00b      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd fc74 	bl	80016d8 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	@ 0x64
 8003dfa:	d903      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e02:	e005      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e04:	4b3f      	ldr	r3, [pc, #252]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ed      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d179      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e18:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e24:	4053      	eors	r3, r2
 8003e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d015      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e2e:	4b34      	ldr	r3, [pc, #208]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e3a:	4b31      	ldr	r3, [pc, #196]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b2e      	ldr	r3, [pc, #184]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e52:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e58:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e66:	d118      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fc36 	bl	80016d8 <HAL_GetTick>
 8003e6c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e70:	e00d      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fd fc31 	bl	80016d8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e7c:	1ad2      	subs	r2, r2, r3
 8003e7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e8c:	e005      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0eb      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d129      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ec4:	091a      	lsrs	r2, r3, #4
 8003ec6:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6113      	str	r3, [r2, #16]
 8003ed0:	e005      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003edc:	6113      	str	r3, [r2, #16]
 8003ede:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eee:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	e00e      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003efe:	e009      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f00:	58024400 	.word	0x58024400
 8003f04:	58024800 	.word	0x58024800
 8003f08:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 0301 	and.w	r3, r2, #1
 8003f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f000 8089 	beq.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3c:	2b28      	cmp	r3, #40	@ 0x28
 8003f3e:	d86b      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08004021 	.word	0x08004021
 8003f4c:	08004019 	.word	0x08004019
 8003f50:	08004019 	.word	0x08004019
 8003f54:	08004019 	.word	0x08004019
 8003f58:	08004019 	.word	0x08004019
 8003f5c:	08004019 	.word	0x08004019
 8003f60:	08004019 	.word	0x08004019
 8003f64:	08004019 	.word	0x08004019
 8003f68:	08003fed 	.word	0x08003fed
 8003f6c:	08004019 	.word	0x08004019
 8003f70:	08004019 	.word	0x08004019
 8003f74:	08004019 	.word	0x08004019
 8003f78:	08004019 	.word	0x08004019
 8003f7c:	08004019 	.word	0x08004019
 8003f80:	08004019 	.word	0x08004019
 8003f84:	08004019 	.word	0x08004019
 8003f88:	08004003 	.word	0x08004003
 8003f8c:	08004019 	.word	0x08004019
 8003f90:	08004019 	.word	0x08004019
 8003f94:	08004019 	.word	0x08004019
 8003f98:	08004019 	.word	0x08004019
 8003f9c:	08004019 	.word	0x08004019
 8003fa0:	08004019 	.word	0x08004019
 8003fa4:	08004019 	.word	0x08004019
 8003fa8:	08004021 	.word	0x08004021
 8003fac:	08004019 	.word	0x08004019
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	08004019 	.word	0x08004019
 8003fbc:	08004019 	.word	0x08004019
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004019 	.word	0x08004019
 8003fd0:	08004019 	.word	0x08004019
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	08004019 	.word	0x08004019
 8003fdc:	08004019 	.word	0x08004019
 8003fe0:	08004019 	.word	0x08004019
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004021 	.word	0x08004021
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 ffc3 	bl	8004f80 <RCCEx_PLL2_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3328      	adds	r3, #40	@ 0x28
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f001 f86a 	bl	80050e4 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800402a:	4bbf      	ldr	r3, [pc, #764]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004038:	4abb      	ldr	r2, [pc, #748]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6553      	str	r3, [r2, #84]	@ 0x54
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 0302 	and.w	r3, r2, #2
 8004054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800405e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d041      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800406e:	2b05      	cmp	r3, #5
 8004070:	d824      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040c5 	.word	0x080040c5
 800407c:	08004091 	.word	0x08004091
 8004080:	080040a7 	.word	0x080040a7
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040c5 	.word	0x080040c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	3308      	adds	r3, #8
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ff71 	bl	8004f80 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f818 	bl	80050e4 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040ce:	4b96      	ldr	r3, [pc, #600]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d2:	f023 0107 	bic.w	r1, r3, #7
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040dc:	4a92      	ldr	r2, [pc, #584]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0304 	and.w	r3, r2, #4
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004102:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d044      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004114:	2b05      	cmp	r3, #5
 8004116:	d825      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	0800416d 	.word	0x0800416d
 8004124:	08004139 	.word	0x08004139
 8004128:	0800414f 	.word	0x0800414f
 800412c:	0800416d 	.word	0x0800416d
 8004130:	0800416d 	.word	0x0800416d
 8004134:	0800416d 	.word	0x0800416d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	3308      	adds	r3, #8
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 ff1d 	bl	8004f80 <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800414c:	e00f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	3328      	adds	r3, #40	@ 0x28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f000 ffc4 	bl	80050e4 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004176:	4b6c      	ldr	r3, [pc, #432]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	f023 0107 	bic.w	r1, r3, #7
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	4a68      	ldr	r2, [pc, #416]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6593      	str	r3, [r2, #88]	@ 0x58
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f002 0320 	and.w	r3, r2, #32
 80041a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d055      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c2:	d033      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c8:	d82c      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ce:	d02f      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d4:	d826      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041da:	d02b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041e0:	d820      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e6:	d012      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ec:	d81a      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d022      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041f6:	d115      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	3308      	adds	r3, #8
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 febd 	bl	8004f80 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800420c:	e015      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	3328      	adds	r3, #40	@ 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 ff64 	bl	80050e4 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004222:	e00a      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800422a:	e006      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800422c:	bf00      	nop
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004230:	bf00      	nop
 8004232:	e002      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004242:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a35      	ldr	r2, [pc, #212]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6553      	str	r3, [r2, #84]	@ 0x54
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800426e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004278:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d058      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800428a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800428e:	d033      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004290:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004294:	d82c      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a0:	d826      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042a6:	d02b      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042ac:	d820      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b2:	d012      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b8:	d81a      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d022      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d115      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	3308      	adds	r3, #8
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fe57 	bl	8004f80 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042d8:	e015      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	3328      	adds	r3, #40	@ 0x28
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fefe 	bl	80050e4 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042ee:	e00a      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f6:	e006      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042f8:	bf00      	nop
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10e      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004312:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800431e:	4a02      	ldr	r2, [pc, #8]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004320:	430b      	orrs	r3, r1
 8004322:	6593      	str	r3, [r2, #88]	@ 0x58
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800434a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d055      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800435c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004360:	d033      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004362:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004366:	d82c      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800436c:	d02f      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004372:	d826      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004374:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004378:	d02b      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800437a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800437e:	d820      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004384:	d012      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800438a:	d81a      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d022      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004394:	d115      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3308      	adds	r3, #8
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fdee 	bl	8004f80 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043aa:	e015      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	3328      	adds	r3, #40	@ 0x28
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fe95 	bl	80050e4 <RCCEx_PLL3_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043c0:	e00a      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043f0:	4a9d      	ldr	r2, [pc, #628]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 0308 	and.w	r3, r2, #8
 800440c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004416:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d01e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442c:	d10c      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	3328      	adds	r3, #40	@ 0x28
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fe54 	bl	80050e4 <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004448:	4b87      	ldr	r3, [pc, #540]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004458:	4a83      	ldr	r2, [pc, #524]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f002 0310 	and.w	r3, r2, #16
 800446a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800446e:	2300      	movs	r3, #0
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004474:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d01e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	3328      	adds	r3, #40	@ 0x28
 8004492:	2102      	movs	r1, #2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fe25 	bl	80050e4 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044a6:	4b70      	ldr	r3, [pc, #448]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d03e      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044e8:	d022      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ee:	d81b      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f8:	d00b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044fa:	e015      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	3308      	adds	r3, #8
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fd3b 	bl	8004f80 <RCCEx_PLL2_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004510:	e00f      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	3328      	adds	r3, #40	@ 0x28
 8004518:	2102      	movs	r1, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fde2 	bl	80050e4 <RCCEx_PLL3_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004526:	e004      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800452e:	e000      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800453a:	4b4b      	ldr	r3, [pc, #300]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800454a:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004566:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004568:	2300      	movs	r3, #0
 800456a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800456c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d03b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004582:	d01f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004584:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004588:	d818      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004594:	d007      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004596:	e011      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004598:	4b33      	ldr	r3, [pc, #204]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	4a32      	ldr	r2, [pc, #200]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045a4:	e00f      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	3328      	adds	r3, #40	@ 0x28
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fd98 	bl	80050e4 <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045ba:	e004      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045c2:	e000      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ce:	4b26      	ldr	r3, [pc, #152]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80045fc:	2300      	movs	r3, #0
 80045fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004600:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d034      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004618:	d007      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	4a11      	ldr	r2, [pc, #68]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004628:	e00e      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	3308      	adds	r3, #8
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fca4 	bl	8004f80 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800463e:	e003      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004654:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	4a02      	ldr	r2, [pc, #8]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004660:	430b      	orrs	r3, r1
 8004662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004682:	2300      	movs	r3, #0
 8004684:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004686:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d00c      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	3328      	adds	r3, #40	@ 0x28
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fd23 	bl	80050e4 <RCCEx_PLL3_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80046b8:	2300      	movs	r3, #0
 80046ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80046bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d038      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d2:	d018      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d8:	d811      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046de:	d014      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d80b      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ee:	d106      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f0:	4bc3      	ldr	r3, [pc, #780]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	4ac2      	ldr	r2, [pc, #776]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004704:	e004      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800470e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004718:	4bb9      	ldr	r3, [pc, #740]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004728:	4ab5      	ldr	r2, [pc, #724]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472a:	430b      	orrs	r3, r1
 800472c:	6553      	str	r3, [r2, #84]	@ 0x54
 800472e:	e003      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004744:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004746:	2300      	movs	r3, #0
 8004748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800474a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004754:	4baa      	ldr	r3, [pc, #680]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004758:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	4aa7      	ldr	r2, [pc, #668]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004764:	430b      	orrs	r3, r1
 8004766:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004774:	653b      	str	r3, [r7, #80]	@ 0x50
 8004776:	2300      	movs	r3, #0
 8004778:	657b      	str	r3, [r7, #84]	@ 0x54
 800477a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004784:	4b9e      	ldr	r3, [pc, #632]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004794:	4a9a      	ldr	r2, [pc, #616]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a8:	2300      	movs	r3, #0
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047b6:	4b92      	ldr	r3, [pc, #584]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80047d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d8:	2300      	movs	r3, #0
 80047da:	647b      	str	r3, [r7, #68]	@ 0x44
 80047dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047e6:	4b86      	ldr	r3, [pc, #536]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	4a85      	ldr	r2, [pc, #532]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047f0:	6113      	str	r3, [r2, #16]
 80047f2:	4b83      	ldr	r3, [pc, #524]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f4:	6919      	ldr	r1, [r3, #16]
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047fe:	4a80      	ldr	r2, [pc, #512]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004800:	430b      	orrs	r3, r1
 8004802:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004812:	2300      	movs	r3, #0
 8004814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004816:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004820:	4b77      	ldr	r3, [pc, #476]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004824:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	4a74      	ldr	r2, [pc, #464]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004830:	430b      	orrs	r3, r1
 8004832:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004840:	633b      	str	r3, [r7, #48]	@ 0x30
 8004842:	2300      	movs	r3, #0
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
 8004846:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004850:	4b6b      	ldr	r3, [pc, #428]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004854:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004860:	4a67      	ldr	r2, [pc, #412]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004862:	430b      	orrs	r3, r1
 8004864:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	2100      	movs	r1, #0
 8004870:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004878:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800487c:	460b      	mov	r3, r1
 800487e:	4313      	orrs	r3, r2
 8004880:	d011      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	3308      	adds	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb78 	bl	8004f80 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	2100      	movs	r1, #0
 80048b0:	6239      	str	r1, [r7, #32]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	3308      	adds	r3, #8
 80048c8:	2101      	movs	r1, #1
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb58 	bl	8004f80 <RCCEx_PLL2_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	2100      	movs	r1, #0
 80048f0:	61b9      	str	r1, [r7, #24]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d011      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	3308      	adds	r3, #8
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb38 	bl	8004f80 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	2100      	movs	r1, #0
 8004930:	6139      	str	r1, [r7, #16]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d011      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	3328      	adds	r3, #40	@ 0x28
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fbca 	bl	80050e4 <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	2100      	movs	r1, #0
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d011      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	3328      	adds	r3, #40	@ 0x28
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fbaa 	bl	80050e4 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	2100      	movs	r1, #0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	607b      	str	r3, [r7, #4]
 80049b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049bc:	460b      	mov	r3, r1
 80049be:	4313      	orrs	r3, r2
 80049c0:	d011      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	3328      	adds	r3, #40	@ 0x28
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb8a 	bl	80050e4 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80049e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80049fa:	46bd      	mov	sp, r7
 80049fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a00:	58024400 	.word	0x58024400

08004a04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a08:	f7fe fd54 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	@ (8004a2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	0800aa8c 	.word	0x0800aa8c

08004a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	@ 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a38:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a42:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	0b1b      	lsrs	r3, r3, #12
 8004a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a5a:	4b99      	ldr	r3, [pc, #612]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8111 	beq.w	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	f000 8083 	beq.w	8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	f200 80a1 	bhi.w	8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d056      	beq.n	8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a9a:	e099      	b.n	8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02d      	beq.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aa8:	4b85      	ldr	r3, [pc, #532]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	4a84      	ldr	r2, [pc, #528]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b02:	e087      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b46:	e065      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8a:	e043      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9e:	4b48      	ldr	r3, [pc, #288]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bce:	e021      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c14:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	0a5b      	lsrs	r3, r3, #9
 8004c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c42:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	ee17 2a90 	vmov	r2, s15
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c70:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c96:	ee17 2a90 	vmov	r2, s15
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	03d09000 	.word	0x03d09000
 8004cc8:	46000000 	.word	0x46000000
 8004ccc:	4c742400 	.word	0x4c742400
 8004cd0:	4a742400 	.word	0x4a742400
 8004cd4:	4af42400 	.word	0x4af42400

08004cd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	@ 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ce0:	4ba1      	ldr	r3, [pc, #644]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cea:	4b9f      	ldr	r3, [pc, #636]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	0d1b      	lsrs	r3, r3, #20
 8004cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cf6:	4b9c      	ldr	r3, [pc, #624]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d02:	4b99      	ldr	r3, [pc, #612]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8111 	beq.w	8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f000 8083 	beq.w	8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	f200 80a1 	bhi.w	8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d056      	beq.n	8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d42:	e099      	b.n	8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d44:	4b88      	ldr	r3, [pc, #544]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02d      	beq.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d50:	4b85      	ldr	r3, [pc, #532]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	08db      	lsrs	r3, r3, #3
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	4a84      	ldr	r2, [pc, #528]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004daa:	e087      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dee:	e065      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e02:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e32:	e043      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e46:	4b48      	ldr	r3, [pc, #288]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e76:	e021      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8a:	4b37      	ldr	r3, [pc, #220]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	0a5b      	lsrs	r3, r3, #9
 8004ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee2:	ee17 2a90 	vmov	r2, s15
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eea:	4b1f      	ldr	r3, [pc, #124]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f10:	ee17 2a90 	vmov	r2, s15
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f18:	4b13      	ldr	r3, [pc, #76]	@ (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3e:	ee17 2a90 	vmov	r2, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f46:	e008      	b.n	8004f5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
}
 8004f5a:	bf00      	nop
 8004f5c:	3724      	adds	r7, #36	@ 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	03d09000 	.word	0x03d09000
 8004f70:	46000000 	.word	0x46000000
 8004f74:	4c742400 	.word	0x4c742400
 8004f78:	4a742400 	.word	0x4a742400
 8004f7c:	4af42400 	.word	0x4af42400

08004f80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f8e:	4b53      	ldr	r3, [pc, #332]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d101      	bne.n	8004f9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e099      	b.n	80050d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004faa:	f7fc fb95 	bl	80016d8 <HAL_GetTick>
 8004fae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fb2:	f7fc fb91 	bl	80016d8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e086      	b.n	80050d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fc4:	4b45      	ldr	r3, [pc, #276]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fd0:	4b42      	ldr	r3, [pc, #264]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	493f      	ldr	r1, [pc, #252]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	025b      	lsls	r3, r3, #9
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	3b01      	subs	r3, #1
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005014:	4931      	ldr	r1, [pc, #196]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800501a:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	492d      	ldr	r1, [pc, #180]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005028:	4313      	orrs	r3, r2
 800502a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800502c:	4b2b      	ldr	r3, [pc, #172]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	f023 0220 	bic.w	r2, r3, #32
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	4928      	ldr	r1, [pc, #160]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800503e:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	4a26      	ldr	r2, [pc, #152]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005044:	f023 0310 	bic.w	r3, r3, #16
 8005048:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 800504c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800504e:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <RCCEx_PLL2_Config+0x160>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	69d2      	ldr	r2, [r2, #28]
 8005056:	00d2      	lsls	r2, r2, #3
 8005058:	4920      	ldr	r1, [pc, #128]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 800505a:	4313      	orrs	r3, r2
 800505c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800505e:	4b1f      	ldr	r3, [pc, #124]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005064:	f043 0310 	orr.w	r3, r3, #16
 8005068:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	4a19      	ldr	r2, [pc, #100]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005076:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800507a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800507c:	e00f      	b.n	800509e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005084:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 800508a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800508e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005090:	e005      	b.n	800509e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005092:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a11      	ldr	r2, [pc, #68]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800509e:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a0e      	ldr	r2, [pc, #56]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fc fb15 	bl	80016d8 <HAL_GetTick>
 80050ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050b2:	f7fc fb11 	bl	80016d8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e006      	b.n	80050d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050c4:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <RCCEx_PLL2_Config+0x15c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	58024400 	.word	0x58024400
 80050e0:	ffff0007 	.word	0xffff0007

080050e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050f2:	4b53      	ldr	r3, [pc, #332]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d101      	bne.n	8005102 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e099      	b.n	8005236 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005102:	4b4f      	ldr	r3, [pc, #316]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4e      	ldr	r2, [pc, #312]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800510c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510e:	f7fc fae3 	bl	80016d8 <HAL_GetTick>
 8005112:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005114:	e008      	b.n	8005128 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005116:	f7fc fadf 	bl	80016d8 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e086      	b.n	8005236 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005128:	4b45      	ldr	r3, [pc, #276]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005134:	4b42      	ldr	r3, [pc, #264]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	051b      	lsls	r3, r3, #20
 8005142:	493f      	ldr	r1, [pc, #252]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	628b      	str	r3, [r1, #40]	@ 0x28
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	3b01      	subs	r3, #1
 800514e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	3b01      	subs	r3, #1
 8005158:	025b      	lsls	r3, r3, #9
 800515a:	b29b      	uxth	r3, r3
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	3b01      	subs	r3, #1
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	3b01      	subs	r3, #1
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005178:	4931      	ldr	r1, [pc, #196]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800517e:	4b30      	ldr	r3, [pc, #192]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	492d      	ldr	r1, [pc, #180]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 800518c:	4313      	orrs	r3, r2
 800518e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005190:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	4928      	ldr	r1, [pc, #160]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051a2:	4b27      	ldr	r3, [pc, #156]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	4a26      	ldr	r2, [pc, #152]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ae:	4b24      	ldr	r3, [pc, #144]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <RCCEx_PLL3_Config+0x160>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	69d2      	ldr	r2, [r2, #28]
 80051ba:	00d2      	lsls	r2, r2, #3
 80051bc:	4920      	ldr	r1, [pc, #128]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	4a19      	ldr	r2, [pc, #100]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051e0:	e00f      	b.n	8005202 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051e8:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051f4:	e005      	b.n	8005202 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051f6:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	4a11      	ldr	r2, [pc, #68]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005200:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005202:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a0e      	ldr	r2, [pc, #56]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800520c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fc fa63 	bl	80016d8 <HAL_GetTick>
 8005212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005214:	e008      	b.n	8005228 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005216:	f7fc fa5f 	bl	80016d8 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e006      	b.n	8005236 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005228:	4b05      	ldr	r3, [pc, #20]	@ (8005240 <RCCEx_PLL3_Config+0x15c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	ffff0007 	.word	0xffff0007

08005248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e049      	b.n	80052ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f841 	bl	80052f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 f9e8 	bl	800565c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d001      	beq.n	8005324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e054      	b.n	80053ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a26      	ldr	r2, [pc, #152]	@ (80053dc <HAL_TIM_Base_Start_IT+0xd0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d022      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534e:	d01d      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a22      	ldr	r2, [pc, #136]	@ (80053e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d018      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a21      	ldr	r2, [pc, #132]	@ (80053e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1f      	ldr	r2, [pc, #124]	@ (80053e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1e      	ldr	r2, [pc, #120]	@ (80053ec <HAL_TIM_Base_Start_IT+0xe0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1c      	ldr	r2, [pc, #112]	@ (80053f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x80>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1b      	ldr	r2, [pc, #108]	@ (80053f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d115      	bne.n	80053b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <HAL_TIM_Base_Start_IT+0xec>)
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b06      	cmp	r3, #6
 800539c:	d015      	beq.n	80053ca <HAL_TIM_Base_Start_IT+0xbe>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a4:	d011      	beq.n	80053ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	e008      	b.n	80053ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e000      	b.n	80053cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40010400 	.word	0x40010400
 80053f0:	40001800 	.word	0x40001800
 80053f4:	40014000 	.word	0x40014000
 80053f8:	00010007 	.word	0x00010007

080053fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d020      	beq.n	8005460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01b      	beq.n	8005460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0202 	mvn.w	r2, #2
 8005430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8e9 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8db 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8ec 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d020      	beq.n	80054ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01b      	beq.n	80054ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0204 	mvn.w	r2, #4
 800547c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8c3 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8b5 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8c6 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d020      	beq.n	80054f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0208 	mvn.w	r2, #8
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f89d 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f88f 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8a0 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d020      	beq.n	8005544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01b      	beq.n	8005544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0210 	mvn.w	r2, #16
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2208      	movs	r2, #8
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f877 	bl	800561e <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f869 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f87a 	bl	8005632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0201 	mvn.w	r2, #1
 8005560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fb fd4e 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00c      	beq.n	8005596 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f913 	bl	80057bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00c      	beq.n	80055ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f90b 	bl	80057d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00c      	beq.n	80055de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f834 	bl	8005646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0220 	mvn.w	r2, #32
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8d3 	bl	80057a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a46      	ldr	r2, [pc, #280]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a43      	ldr	r2, [pc, #268]	@ (800578c <TIM_Base_SetConfig+0x130>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a42      	ldr	r2, [pc, #264]	@ (8005790 <TIM_Base_SetConfig+0x134>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a41      	ldr	r2, [pc, #260]	@ (8005794 <TIM_Base_SetConfig+0x138>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a40      	ldr	r2, [pc, #256]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a35      	ldr	r2, [pc, #212]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01f      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d01b      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a32      	ldr	r2, [pc, #200]	@ (800578c <TIM_Base_SetConfig+0x130>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d017      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a31      	ldr	r2, [pc, #196]	@ (8005790 <TIM_Base_SetConfig+0x134>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a30      	ldr	r2, [pc, #192]	@ (8005794 <TIM_Base_SetConfig+0x138>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2e      	ldr	r2, [pc, #184]	@ (800579c <TIM_Base_SetConfig+0x140>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2d      	ldr	r2, [pc, #180]	@ (80057a0 <TIM_Base_SetConfig+0x144>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	@ (80057a4 <TIM_Base_SetConfig+0x148>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d108      	bne.n	8005708 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a16      	ldr	r2, [pc, #88]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00f      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a18      	ldr	r2, [pc, #96]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a17      	ldr	r2, [pc, #92]	@ (800579c <TIM_Base_SetConfig+0x140>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a16      	ldr	r2, [pc, #88]	@ (80057a0 <TIM_Base_SetConfig+0x144>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a15      	ldr	r2, [pc, #84]	@ (80057a4 <TIM_Base_SetConfig+0x148>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d103      	bne.n	800575c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f023 0201 	bic.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	611a      	str	r2, [r3, #16]
  }
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800

080057a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e042      	b.n	800587c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb fcff 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2224      	movs	r2, #36	@ 0x24
 8005812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fee6 	bl	8006600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f97b 	bl	8005b30 <UART_SetConfig>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e01b      	b.n	800587c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 ff65 	bl	8006744 <UART_CheckIdleState>
 800587a:	4603      	mov	r3, r0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	@ 0x28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589a:	2b20      	cmp	r3, #32
 800589c:	d17b      	bne.n	8005996 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_UART_Transmit+0x26>
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e074      	b.n	8005998 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2221      	movs	r2, #33	@ 0x21
 80058ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058be:	f7fb ff0b 	bl	80016d8 <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	88fa      	ldrh	r2, [r7, #6]
 80058c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058dc:	d108      	bne.n	80058f0 <HAL_UART_Transmit+0x6c>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	e003      	b.n	80058f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058f8:	e030      	b.n	800595c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	2180      	movs	r1, #128	@ 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 ffc7 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e03d      	b.n	8005998 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005930:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	3302      	adds	r3, #2
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	e007      	b.n	800594a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1c8      	bne.n	80058fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	2140      	movs	r1, #64	@ 0x40
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 ff90 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e006      	b.n	8005998 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	f040 80b5 	bne.w	8005b26 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive+0x28>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0ad      	b.n	8005b28 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2222      	movs	r2, #34	@ 0x22
 80059d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059e2:	f7fb fe79 	bl	80016d8 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a00:	d10e      	bne.n	8005a20 <HAL_UART_Receive+0x80>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <HAL_UART_Receive+0x76>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a14:	e02d      	b.n	8005a72 <HAL_UART_Receive+0xd2>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	22ff      	movs	r2, #255	@ 0xff
 8005a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a1e:	e028      	b.n	8005a72 <HAL_UART_Receive+0xd2>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10d      	bne.n	8005a44 <HAL_UART_Receive+0xa4>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <HAL_UART_Receive+0x9a>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	22ff      	movs	r2, #255	@ 0xff
 8005a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a38:	e01b      	b.n	8005a72 <HAL_UART_Receive+0xd2>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	227f      	movs	r2, #127	@ 0x7f
 8005a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a42:	e016      	b.n	8005a72 <HAL_UART_Receive+0xd2>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a4c:	d10d      	bne.n	8005a6a <HAL_UART_Receive+0xca>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_UART_Receive+0xc0>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	227f      	movs	r2, #127	@ 0x7f
 8005a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a5e:	e008      	b.n	8005a72 <HAL_UART_Receive+0xd2>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	223f      	movs	r2, #63	@ 0x3f
 8005a64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a68:	e003      	b.n	8005a72 <HAL_UART_Receive+0xd2>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a82:	d108      	bne.n	8005a96 <HAL_UART_Receive+0xf6>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e003      	b.n	8005a9e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a9e:	e036      	b.n	8005b0e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fef4 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e032      	b.n	8005b28 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10c      	bne.n	8005ae2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	8a7b      	ldrh	r3, [r7, #18]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	3302      	adds	r3, #2
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	e00c      	b.n	8005afc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	8a7b      	ldrh	r3, [r7, #18]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4013      	ands	r3, r2
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1c2      	bne.n	8005aa0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b34:	b092      	sub	sp, #72	@ 0x48
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e58 <UART_SetConfig+0x328>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4ab3      	ldr	r2, [pc, #716]	@ (8005e5c <UART_SetConfig+0x32c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	4baf      	ldr	r3, [pc, #700]	@ (8005e60 <UART_SetConfig+0x330>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bac:	430b      	orrs	r3, r1
 8005bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	f023 010f 	bic.w	r1, r3, #15
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4aa6      	ldr	r2, [pc, #664]	@ (8005e64 <UART_SetConfig+0x334>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d177      	bne.n	8005cc0 <UART_SetConfig+0x190>
 8005bd0:	4ba5      	ldr	r3, [pc, #660]	@ (8005e68 <UART_SetConfig+0x338>)
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd8:	2b28      	cmp	r3, #40	@ 0x28
 8005bda:	d86d      	bhi.n	8005cb8 <UART_SetConfig+0x188>
 8005bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <UART_SetConfig+0xb4>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c89 	.word	0x08005c89
 8005be8:	08005cb9 	.word	0x08005cb9
 8005bec:	08005cb9 	.word	0x08005cb9
 8005bf0:	08005cb9 	.word	0x08005cb9
 8005bf4:	08005cb9 	.word	0x08005cb9
 8005bf8:	08005cb9 	.word	0x08005cb9
 8005bfc:	08005cb9 	.word	0x08005cb9
 8005c00:	08005cb9 	.word	0x08005cb9
 8005c04:	08005c91 	.word	0x08005c91
 8005c08:	08005cb9 	.word	0x08005cb9
 8005c0c:	08005cb9 	.word	0x08005cb9
 8005c10:	08005cb9 	.word	0x08005cb9
 8005c14:	08005cb9 	.word	0x08005cb9
 8005c18:	08005cb9 	.word	0x08005cb9
 8005c1c:	08005cb9 	.word	0x08005cb9
 8005c20:	08005cb9 	.word	0x08005cb9
 8005c24:	08005c99 	.word	0x08005c99
 8005c28:	08005cb9 	.word	0x08005cb9
 8005c2c:	08005cb9 	.word	0x08005cb9
 8005c30:	08005cb9 	.word	0x08005cb9
 8005c34:	08005cb9 	.word	0x08005cb9
 8005c38:	08005cb9 	.word	0x08005cb9
 8005c3c:	08005cb9 	.word	0x08005cb9
 8005c40:	08005cb9 	.word	0x08005cb9
 8005c44:	08005ca1 	.word	0x08005ca1
 8005c48:	08005cb9 	.word	0x08005cb9
 8005c4c:	08005cb9 	.word	0x08005cb9
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005cb9 	.word	0x08005cb9
 8005c58:	08005cb9 	.word	0x08005cb9
 8005c5c:	08005cb9 	.word	0x08005cb9
 8005c60:	08005cb9 	.word	0x08005cb9
 8005c64:	08005ca9 	.word	0x08005ca9
 8005c68:	08005cb9 	.word	0x08005cb9
 8005c6c:	08005cb9 	.word	0x08005cb9
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005cb9 	.word	0x08005cb9
 8005c78:	08005cb9 	.word	0x08005cb9
 8005c7c:	08005cb9 	.word	0x08005cb9
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e222      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e21e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e21a      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e216      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005ca8:	2320      	movs	r3, #32
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e212      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005cb0:	2340      	movs	r3, #64	@ 0x40
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e20e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e20a      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a69      	ldr	r2, [pc, #420]	@ (8005e6c <UART_SetConfig+0x33c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d130      	bne.n	8005d2c <UART_SetConfig+0x1fc>
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <UART_SetConfig+0x338>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d826      	bhi.n	8005d24 <UART_SetConfig+0x1f4>
 8005cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <UART_SetConfig+0x1ac>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	08005d05 	.word	0x08005d05
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d15 	.word	0x08005d15
 8005cf0:	08005d1d 	.word	0x08005d1d
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e1ec      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e1e8      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e1e4      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1e0      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d14:	2320      	movs	r3, #32
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e1dc      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d1c:	2340      	movs	r3, #64	@ 0x40
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e1d8      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e1d4      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a4f      	ldr	r2, [pc, #316]	@ (8005e70 <UART_SetConfig+0x340>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d130      	bne.n	8005d98 <UART_SetConfig+0x268>
 8005d36:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <UART_SetConfig+0x338>)
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d826      	bhi.n	8005d90 <UART_SetConfig+0x260>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0x218>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e1b6      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e1b2      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1ae      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e1aa      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d80:	2320      	movs	r3, #32
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e1a6      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d88:	2340      	movs	r3, #64	@ 0x40
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e1a2      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d90:	2380      	movs	r3, #128	@ 0x80
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e19e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a35      	ldr	r2, [pc, #212]	@ (8005e74 <UART_SetConfig+0x344>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d130      	bne.n	8005e04 <UART_SetConfig+0x2d4>
 8005da2:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <UART_SetConfig+0x338>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	d826      	bhi.n	8005dfc <UART_SetConfig+0x2cc>
 8005dae:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0x284>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	08005ddd 	.word	0x08005ddd
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005ded 	.word	0x08005ded
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e180      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e17c      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e178      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e174      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005dec:	2320      	movs	r3, #32
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e170      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005df4:	2340      	movs	r3, #64	@ 0x40
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e16c      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e168      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1b      	ldr	r2, [pc, #108]	@ (8005e78 <UART_SetConfig+0x348>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d142      	bne.n	8005e94 <UART_SetConfig+0x364>
 8005e0e:	4b16      	ldr	r3, [pc, #88]	@ (8005e68 <UART_SetConfig+0x338>)
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d838      	bhi.n	8005e8c <UART_SetConfig+0x35c>
 8005e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <UART_SetConfig+0x2f0>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e39 	.word	0x08005e39
 8005e24:	08005e41 	.word	0x08005e41
 8005e28:	08005e49 	.word	0x08005e49
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e85 	.word	0x08005e85
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e14a      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e146      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e142      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e13e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e58:	cfff69f3 	.word	0xcfff69f3
 8005e5c:	58000c00 	.word	0x58000c00
 8005e60:	11fff4ff 	.word	0x11fff4ff
 8005e64:	40011000 	.word	0x40011000
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	40004400 	.word	0x40004400
 8005e70:	40004800 	.word	0x40004800
 8005e74:	40004c00 	.word	0x40004c00
 8005e78:	40005000 	.word	0x40005000
 8005e7c:	2320      	movs	r3, #32
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e128      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e84:	2340      	movs	r3, #64	@ 0x40
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e124      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e8c:	2380      	movs	r3, #128	@ 0x80
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e120      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4acb      	ldr	r2, [pc, #812]	@ (80061c8 <UART_SetConfig+0x698>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d176      	bne.n	8005f8c <UART_SetConfig+0x45c>
 8005e9e:	4bcb      	ldr	r3, [pc, #812]	@ (80061cc <UART_SetConfig+0x69c>)
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea6:	2b28      	cmp	r3, #40	@ 0x28
 8005ea8:	d86c      	bhi.n	8005f84 <UART_SetConfig+0x454>
 8005eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <UART_SetConfig+0x380>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005f55 	.word	0x08005f55
 8005eb4:	08005f85 	.word	0x08005f85
 8005eb8:	08005f85 	.word	0x08005f85
 8005ebc:	08005f85 	.word	0x08005f85
 8005ec0:	08005f85 	.word	0x08005f85
 8005ec4:	08005f85 	.word	0x08005f85
 8005ec8:	08005f85 	.word	0x08005f85
 8005ecc:	08005f85 	.word	0x08005f85
 8005ed0:	08005f5d 	.word	0x08005f5d
 8005ed4:	08005f85 	.word	0x08005f85
 8005ed8:	08005f85 	.word	0x08005f85
 8005edc:	08005f85 	.word	0x08005f85
 8005ee0:	08005f85 	.word	0x08005f85
 8005ee4:	08005f85 	.word	0x08005f85
 8005ee8:	08005f85 	.word	0x08005f85
 8005eec:	08005f85 	.word	0x08005f85
 8005ef0:	08005f65 	.word	0x08005f65
 8005ef4:	08005f85 	.word	0x08005f85
 8005ef8:	08005f85 	.word	0x08005f85
 8005efc:	08005f85 	.word	0x08005f85
 8005f00:	08005f85 	.word	0x08005f85
 8005f04:	08005f85 	.word	0x08005f85
 8005f08:	08005f85 	.word	0x08005f85
 8005f0c:	08005f85 	.word	0x08005f85
 8005f10:	08005f6d 	.word	0x08005f6d
 8005f14:	08005f85 	.word	0x08005f85
 8005f18:	08005f85 	.word	0x08005f85
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f85 	.word	0x08005f85
 8005f24:	08005f85 	.word	0x08005f85
 8005f28:	08005f85 	.word	0x08005f85
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005f75 	.word	0x08005f75
 8005f34:	08005f85 	.word	0x08005f85
 8005f38:	08005f85 	.word	0x08005f85
 8005f3c:	08005f85 	.word	0x08005f85
 8005f40:	08005f85 	.word	0x08005f85
 8005f44:	08005f85 	.word	0x08005f85
 8005f48:	08005f85 	.word	0x08005f85
 8005f4c:	08005f85 	.word	0x08005f85
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e0bc      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e0b8      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e0b4      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e0b0      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f74:	2320      	movs	r3, #32
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e0ac      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f7c:	2340      	movs	r3, #64	@ 0x40
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e0a8      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f84:	2380      	movs	r3, #128	@ 0x80
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e0a4      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a8f      	ldr	r2, [pc, #572]	@ (80061d0 <UART_SetConfig+0x6a0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d130      	bne.n	8005ff8 <UART_SetConfig+0x4c8>
 8005f96:	4b8d      	ldr	r3, [pc, #564]	@ (80061cc <UART_SetConfig+0x69c>)
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d826      	bhi.n	8005ff0 <UART_SetConfig+0x4c0>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x478>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fc1 	.word	0x08005fc1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fd1 	.word	0x08005fd1
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e086      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e082      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e07e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e07a      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e076      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005fe8:	2340      	movs	r3, #64	@ 0x40
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e072      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005ff0:	2380      	movs	r3, #128	@ 0x80
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e06e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a75      	ldr	r2, [pc, #468]	@ (80061d4 <UART_SetConfig+0x6a4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d130      	bne.n	8006064 <UART_SetConfig+0x534>
 8006002:	4b72      	ldr	r3, [pc, #456]	@ (80061cc <UART_SetConfig+0x69c>)
 8006004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b05      	cmp	r3, #5
 800600c:	d826      	bhi.n	800605c <UART_SetConfig+0x52c>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x4e4>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	0800602d 	.word	0x0800602d
 8006018:	08006035 	.word	0x08006035
 800601c:	0800603d 	.word	0x0800603d
 8006020:	08006045 	.word	0x08006045
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006055 	.word	0x08006055
 800602c:	2300      	movs	r3, #0
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e050      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e04c      	b.n	80060d6 <UART_SetConfig+0x5a6>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e048      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e044      	b.n	80060d6 <UART_SetConfig+0x5a6>
 800604c:	2320      	movs	r3, #32
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e040      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8006054:	2340      	movs	r3, #64	@ 0x40
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e03c      	b.n	80060d6 <UART_SetConfig+0x5a6>
 800605c:	2380      	movs	r3, #128	@ 0x80
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e038      	b.n	80060d6 <UART_SetConfig+0x5a6>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5b      	ldr	r2, [pc, #364]	@ (80061d8 <UART_SetConfig+0x6a8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d130      	bne.n	80060d0 <UART_SetConfig+0x5a0>
 800606e:	4b57      	ldr	r3, [pc, #348]	@ (80061cc <UART_SetConfig+0x69c>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b05      	cmp	r3, #5
 8006078:	d826      	bhi.n	80060c8 <UART_SetConfig+0x598>
 800607a:	a201      	add	r2, pc, #4	@ (adr r2, 8006080 <UART_SetConfig+0x550>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006099 	.word	0x08006099
 8006084:	080060a1 	.word	0x080060a1
 8006088:	080060a9 	.word	0x080060a9
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060b9 	.word	0x080060b9
 8006094:	080060c1 	.word	0x080060c1
 8006098:	2302      	movs	r3, #2
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e01a      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e016      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e012      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e00e      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060b8:	2320      	movs	r3, #32
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e00a      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060c0:	2340      	movs	r3, #64	@ 0x40
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e006      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060c8:	2380      	movs	r3, #128	@ 0x80
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e002      	b.n	80060d6 <UART_SetConfig+0x5a6>
 80060d0:	2380      	movs	r3, #128	@ 0x80
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	@ (80061d8 <UART_SetConfig+0x6a8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	f040 80f8 	bne.w	80062d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	dc46      	bgt.n	8006178 <UART_SetConfig+0x648>
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	f2c0 8082 	blt.w	80061f4 <UART_SetConfig+0x6c4>
 80060f0:	3b02      	subs	r3, #2
 80060f2:	2b1e      	cmp	r3, #30
 80060f4:	d87e      	bhi.n	80061f4 <UART_SetConfig+0x6c4>
 80060f6:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <UART_SetConfig+0x5cc>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	080061f5 	.word	0x080061f5
 8006104:	08006187 	.word	0x08006187
 8006108:	080061f5 	.word	0x080061f5
 800610c:	080061f5 	.word	0x080061f5
 8006110:	080061f5 	.word	0x080061f5
 8006114:	08006197 	.word	0x08006197
 8006118:	080061f5 	.word	0x080061f5
 800611c:	080061f5 	.word	0x080061f5
 8006120:	080061f5 	.word	0x080061f5
 8006124:	080061f5 	.word	0x080061f5
 8006128:	080061f5 	.word	0x080061f5
 800612c:	080061f5 	.word	0x080061f5
 8006130:	080061f5 	.word	0x080061f5
 8006134:	080061a7 	.word	0x080061a7
 8006138:	080061f5 	.word	0x080061f5
 800613c:	080061f5 	.word	0x080061f5
 8006140:	080061f5 	.word	0x080061f5
 8006144:	080061f5 	.word	0x080061f5
 8006148:	080061f5 	.word	0x080061f5
 800614c:	080061f5 	.word	0x080061f5
 8006150:	080061f5 	.word	0x080061f5
 8006154:	080061f5 	.word	0x080061f5
 8006158:	080061f5 	.word	0x080061f5
 800615c:	080061f5 	.word	0x080061f5
 8006160:	080061f5 	.word	0x080061f5
 8006164:	080061f5 	.word	0x080061f5
 8006168:	080061f5 	.word	0x080061f5
 800616c:	080061f5 	.word	0x080061f5
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061e7 	.word	0x080061e7
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d037      	beq.n	80061ec <UART_SetConfig+0x6bc>
 800617c:	e03a      	b.n	80061f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800617e:	f7fe fc41 	bl	8004a04 <HAL_RCCEx_GetD3PCLK1Freq>
 8006182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006184:	e03c      	b.n	8006200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fc50 	bl	8004a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006194:	e034      	b.n	8006200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006196:	f107 0318 	add.w	r3, r7, #24
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fd9c 	bl	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a4:	e02c      	b.n	8006200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <UART_SetConfig+0x69c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <UART_SetConfig+0x69c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	4a07      	ldr	r2, [pc, #28]	@ (80061dc <UART_SetConfig+0x6ac>)
 80061be:	fa22 f303 	lsr.w	r3, r2, r3
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061c4:	e01c      	b.n	8006200 <UART_SetConfig+0x6d0>
 80061c6:	bf00      	nop
 80061c8:	40011400 	.word	0x40011400
 80061cc:	58024400 	.word	0x58024400
 80061d0:	40007800 	.word	0x40007800
 80061d4:	40007c00 	.word	0x40007c00
 80061d8:	58000c00 	.word	0x58000c00
 80061dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061e0:	4b9d      	ldr	r3, [pc, #628]	@ (8006458 <UART_SetConfig+0x928>)
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e4:	e00c      	b.n	8006200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061e6:	4b9d      	ldr	r3, [pc, #628]	@ (800645c <UART_SetConfig+0x92c>)
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ea:	e009      	b.n	8006200 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f2:	e005      	b.n	8006200 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 81de 	beq.w	80065c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	4a94      	ldr	r2, [pc, #592]	@ (8006460 <UART_SetConfig+0x930>)
 800620e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006212:	461a      	mov	r2, r3
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	fbb3 f3f2 	udiv	r3, r3, r2
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006228:	429a      	cmp	r2, r3
 800622a:	d305      	bcc.n	8006238 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006234:	429a      	cmp	r2, r3
 8006236:	d903      	bls.n	8006240 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800623e:	e1c1      	b.n	80065c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006242:	2200      	movs	r2, #0
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	60fa      	str	r2, [r7, #12]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	4a84      	ldr	r2, [pc, #528]	@ (8006460 <UART_SetConfig+0x930>)
 800624e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006252:	b29b      	uxth	r3, r3
 8006254:	2200      	movs	r2, #0
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	607a      	str	r2, [r7, #4]
 800625a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006262:	f7fa f88d 	bl	8000380 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	020b      	lsls	r3, r1, #8
 8006278:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800627c:	0202      	lsls	r2, r0, #8
 800627e:	6979      	ldr	r1, [r7, #20]
 8006280:	6849      	ldr	r1, [r1, #4]
 8006282:	0849      	lsrs	r1, r1, #1
 8006284:	2000      	movs	r0, #0
 8006286:	460c      	mov	r4, r1
 8006288:	4605      	mov	r5, r0
 800628a:	eb12 0804 	adds.w	r8, r2, r4
 800628e:	eb43 0905 	adc.w	r9, r3, r5
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	469a      	mov	sl, r3
 800629a:	4693      	mov	fp, r2
 800629c:	4652      	mov	r2, sl
 800629e:	465b      	mov	r3, fp
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa f86c 	bl	8000380 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4613      	mov	r3, r2
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b6:	d308      	bcc.n	80062ca <UART_SetConfig+0x79a>
 80062b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062be:	d204      	bcs.n	80062ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e17c      	b.n	80065c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062d0:	e178      	b.n	80065c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062da:	f040 80c5 	bne.w	8006468 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	dc48      	bgt.n	8006378 <UART_SetConfig+0x848>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	db7b      	blt.n	80063e2 <UART_SetConfig+0x8b2>
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d879      	bhi.n	80063e2 <UART_SetConfig+0x8b2>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x7c4>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	0800637f 	.word	0x0800637f
 80062f8:	08006387 	.word	0x08006387
 80062fc:	080063e3 	.word	0x080063e3
 8006300:	080063e3 	.word	0x080063e3
 8006304:	0800638f 	.word	0x0800638f
 8006308:	080063e3 	.word	0x080063e3
 800630c:	080063e3 	.word	0x080063e3
 8006310:	080063e3 	.word	0x080063e3
 8006314:	0800639f 	.word	0x0800639f
 8006318:	080063e3 	.word	0x080063e3
 800631c:	080063e3 	.word	0x080063e3
 8006320:	080063e3 	.word	0x080063e3
 8006324:	080063e3 	.word	0x080063e3
 8006328:	080063e3 	.word	0x080063e3
 800632c:	080063e3 	.word	0x080063e3
 8006330:	080063e3 	.word	0x080063e3
 8006334:	080063af 	.word	0x080063af
 8006338:	080063e3 	.word	0x080063e3
 800633c:	080063e3 	.word	0x080063e3
 8006340:	080063e3 	.word	0x080063e3
 8006344:	080063e3 	.word	0x080063e3
 8006348:	080063e3 	.word	0x080063e3
 800634c:	080063e3 	.word	0x080063e3
 8006350:	080063e3 	.word	0x080063e3
 8006354:	080063e3 	.word	0x080063e3
 8006358:	080063e3 	.word	0x080063e3
 800635c:	080063e3 	.word	0x080063e3
 8006360:	080063e3 	.word	0x080063e3
 8006364:	080063e3 	.word	0x080063e3
 8006368:	080063e3 	.word	0x080063e3
 800636c:	080063e3 	.word	0x080063e3
 8006370:	080063e3 	.word	0x080063e3
 8006374:	080063d5 	.word	0x080063d5
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d02e      	beq.n	80063da <UART_SetConfig+0x8aa>
 800637c:	e031      	b.n	80063e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637e:	f7fd f8c9 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8006382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006384:	e033      	b.n	80063ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006386:	f7fd f8db 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 800638a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800638c:	e02f      	b.n	80063ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800638e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fb4c 	bl	8004a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800639c:	e027      	b.n	80063ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639e:	f107 0318 	add.w	r3, r7, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fc98 	bl	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ac:	e01f      	b.n	80063ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006464 <UART_SetConfig+0x934>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006464 <UART_SetConfig+0x934>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <UART_SetConfig+0x928>)
 80063c6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063cc:	e00f      	b.n	80063ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063ce:	4b22      	ldr	r3, [pc, #136]	@ (8006458 <UART_SetConfig+0x928>)
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d2:	e00c      	b.n	80063ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063d4:	4b21      	ldr	r3, [pc, #132]	@ (800645c <UART_SetConfig+0x92c>)
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e009      	b.n	80063ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e0:	e005      	b.n	80063ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80e7 	beq.w	80065c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fa:	4a19      	ldr	r2, [pc, #100]	@ (8006460 <UART_SetConfig+0x930>)
 80063fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006400:	461a      	mov	r2, r3
 8006402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006404:	fbb3 f3f2 	udiv	r3, r3, r2
 8006408:	005a      	lsls	r2, r3, #1
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	441a      	add	r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	2b0f      	cmp	r3, #15
 8006420:	d916      	bls.n	8006450 <UART_SetConfig+0x920>
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006428:	d212      	bcs.n	8006450 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	b29b      	uxth	r3, r3
 800642e:	f023 030f 	bic.w	r3, r3, #15
 8006432:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	b29a      	uxth	r2, r3
 8006440:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006442:	4313      	orrs	r3, r2
 8006444:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	e0b9      	b.n	80065c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006456:	e0b5      	b.n	80065c4 <UART_SetConfig+0xa94>
 8006458:	03d09000 	.word	0x03d09000
 800645c:	003d0900 	.word	0x003d0900
 8006460:	0800aae4 	.word	0x0800aae4
 8006464:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006468:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800646c:	2b20      	cmp	r3, #32
 800646e:	dc49      	bgt.n	8006504 <UART_SetConfig+0x9d4>
 8006470:	2b00      	cmp	r3, #0
 8006472:	db7c      	blt.n	800656e <UART_SetConfig+0xa3e>
 8006474:	2b20      	cmp	r3, #32
 8006476:	d87a      	bhi.n	800656e <UART_SetConfig+0xa3e>
 8006478:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <UART_SetConfig+0x950>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	0800650b 	.word	0x0800650b
 8006484:	08006513 	.word	0x08006513
 8006488:	0800656f 	.word	0x0800656f
 800648c:	0800656f 	.word	0x0800656f
 8006490:	0800651b 	.word	0x0800651b
 8006494:	0800656f 	.word	0x0800656f
 8006498:	0800656f 	.word	0x0800656f
 800649c:	0800656f 	.word	0x0800656f
 80064a0:	0800652b 	.word	0x0800652b
 80064a4:	0800656f 	.word	0x0800656f
 80064a8:	0800656f 	.word	0x0800656f
 80064ac:	0800656f 	.word	0x0800656f
 80064b0:	0800656f 	.word	0x0800656f
 80064b4:	0800656f 	.word	0x0800656f
 80064b8:	0800656f 	.word	0x0800656f
 80064bc:	0800656f 	.word	0x0800656f
 80064c0:	0800653b 	.word	0x0800653b
 80064c4:	0800656f 	.word	0x0800656f
 80064c8:	0800656f 	.word	0x0800656f
 80064cc:	0800656f 	.word	0x0800656f
 80064d0:	0800656f 	.word	0x0800656f
 80064d4:	0800656f 	.word	0x0800656f
 80064d8:	0800656f 	.word	0x0800656f
 80064dc:	0800656f 	.word	0x0800656f
 80064e0:	0800656f 	.word	0x0800656f
 80064e4:	0800656f 	.word	0x0800656f
 80064e8:	0800656f 	.word	0x0800656f
 80064ec:	0800656f 	.word	0x0800656f
 80064f0:	0800656f 	.word	0x0800656f
 80064f4:	0800656f 	.word	0x0800656f
 80064f8:	0800656f 	.word	0x0800656f
 80064fc:	0800656f 	.word	0x0800656f
 8006500:	08006561 	.word	0x08006561
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	d02e      	beq.n	8006566 <UART_SetConfig+0xa36>
 8006508:	e031      	b.n	800656e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650a:	f7fd f803 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 800650e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006510:	e033      	b.n	800657a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006512:	f7fd f815 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 8006516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006518:	e02f      	b.n	800657a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe fa86 	bl	8004a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006528:	e027      	b.n	800657a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652a:	f107 0318 	add.w	r3, r7, #24
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fbd2 	bl	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006538:	e01f      	b.n	800657a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800653a:	4b2d      	ldr	r3, [pc, #180]	@ (80065f0 <UART_SetConfig+0xac0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006546:	4b2a      	ldr	r3, [pc, #168]	@ (80065f0 <UART_SetConfig+0xac0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	4a28      	ldr	r2, [pc, #160]	@ (80065f4 <UART_SetConfig+0xac4>)
 8006552:	fa22 f303 	lsr.w	r3, r2, r3
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006558:	e00f      	b.n	800657a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800655a:	4b26      	ldr	r3, [pc, #152]	@ (80065f4 <UART_SetConfig+0xac4>)
 800655c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655e:	e00c      	b.n	800657a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006560:	4b25      	ldr	r3, [pc, #148]	@ (80065f8 <UART_SetConfig+0xac8>)
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e009      	b.n	800657a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656c:	e005      	b.n	800657a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006578:	bf00      	nop
    }

    if (pclk != 0U)
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d021      	beq.n	80065c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	4a1d      	ldr	r2, [pc, #116]	@ (80065fc <UART_SetConfig+0xacc>)
 8006586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800658a:	461a      	mov	r2, r3
 800658c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	441a      	add	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d909      	bls.n	80065be <UART_SetConfig+0xa8e>
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b0:	d205      	bcs.n	80065be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60da      	str	r2, [r3, #12]
 80065bc:	e002      	b.n	80065c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2200      	movs	r2, #0
 80065d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3748      	adds	r7, #72	@ 0x48
 80065e8:	46bd      	mov	sp, r7
 80065ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ee:	bf00      	nop
 80065f0:	58024400 	.word	0x58024400
 80065f4:	03d09000 	.word	0x03d09000
 80065f8:	003d0900 	.word	0x003d0900
 80065fc:	0800aae4 	.word	0x0800aae4

08006600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01a      	beq.n	8006716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066fe:	d10a      	bne.n	8006716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
  }
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b098      	sub	sp, #96	@ 0x60
 8006748:	af02      	add	r7, sp, #8
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006754:	f7fa ffc0 	bl	80016d8 <HAL_GetTick>
 8006758:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b08      	cmp	r3, #8
 8006766:	d12f      	bne.n	80067c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006768:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006770:	2200      	movs	r2, #0
 8006772:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f88e 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d022      	beq.n	80067c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006796:	653b      	str	r3, [r7, #80]	@ 0x50
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e6      	bne.n	8006782 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e063      	b.n	8006890 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d149      	bne.n	800686a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067de:	2200      	movs	r2, #0
 80067e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f857 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d03c      	beq.n	800686a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	623b      	str	r3, [r7, #32]
   return(result);
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800680e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006810:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	60fb      	str	r3, [r7, #12]
   return(result);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006842:	61fa      	str	r2, [r7, #28]
 8006844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	69b9      	ldr	r1, [r7, #24]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	617b      	str	r3, [r7, #20]
   return(result);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e012      	b.n	8006890 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3758      	adds	r7, #88	@ 0x58
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a8:	e04f      	b.n	800694a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d04b      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fa ff11 	bl	80016d8 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e04e      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d037      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b80      	cmp	r3, #128	@ 0x80
 80068de:	d034      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d031      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d110      	bne.n	8006916 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2208      	movs	r2, #8
 80068fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f839 	bl	8006974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2208      	movs	r2, #8
 8006906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e029      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006924:	d111      	bne.n	800694a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800692e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f81f 	bl	8006974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e00f      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69da      	ldr	r2, [r3, #28]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4013      	ands	r3, r2
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	429a      	cmp	r2, r3
 8006966:	d0a0      	beq.n	80068aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b095      	sub	sp, #84	@ 0x54
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800699a:	643b      	str	r3, [r7, #64]	@ 0x40
 800699c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e6      	bne.n	800697c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a3c <UART_EndRxTransfer+0xc8>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e5      	bne.n	80069ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d118      	bne.n	8006a1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0310 	bic.w	r3, r3, #16
 80069fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6979      	ldr	r1, [r7, #20]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	613b      	str	r3, [r7, #16]
   return(result);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a30:	bf00      	nop
 8006a32:	3754      	adds	r7, #84	@ 0x54
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	effffffe 	.word	0xeffffffe

08006a40 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e056      	b.n	8006b06 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7fa fbce 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2224      	movs	r2, #36	@ 0x24
 8006a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fdb5 	bl	8006600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff f84a 	bl	8005b30 <UART_SetConfig>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e02f      	b.n	8006b06 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ab4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	055b      	lsls	r3, r3, #21
 8006ace:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	041b      	lsls	r3, r3, #16
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <HAL_RS485Ex_Init+0xd0>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	430b      	orrs	r3, r1
 8006aec:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fe20 	bl	8006744 <UART_CheckIdleState>
 8006b04:	4603      	mov	r3, r0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	fc00ffff 	.word	0xfc00ffff

08006b14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e027      	b.n	8006b7a <HAL_UARTEx_DisableFifoMode+0x66>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2224      	movs	r2, #36	@ 0x24
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e02d      	b.n	8006bfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2224      	movs	r2, #36	@ 0x24
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f850 	bl	8006c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e02d      	b.n	8006c76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2224      	movs	r2, #36	@ 0x24
 8006c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f812 	bl	8006c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d108      	bne.n	8006ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ca0:	e031      	b.n	8006d06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	0e5b      	lsrs	r3, r3, #25
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	0f5b      	lsrs	r3, r3, #29
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	7b3a      	ldrb	r2, [r7, #12]
 8006cce:	4911      	ldr	r1, [pc, #68]	@ (8006d14 <UARTEx_SetNbDataToProcess+0x94>)
 8006cd0:	5c8a      	ldrb	r2, [r1, r2]
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cd6:	7b3a      	ldrb	r2, [r7, #12]
 8006cd8:	490f      	ldr	r1, [pc, #60]	@ (8006d18 <UARTEx_SetNbDataToProcess+0x98>)
 8006cda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	7b7a      	ldrb	r2, [r7, #13]
 8006cec:	4909      	ldr	r1, [pc, #36]	@ (8006d14 <UARTEx_SetNbDataToProcess+0x94>)
 8006cee:	5c8a      	ldrb	r2, [r1, r2]
 8006cf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cf4:	7b7a      	ldrb	r2, [r7, #13]
 8006cf6:	4908      	ldr	r1, [pc, #32]	@ (8006d18 <UARTEx_SetNbDataToProcess+0x98>)
 8006cf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	0800aafc 	.word	0x0800aafc
 8006d18:	0800ab04 	.word	0x0800ab04

08006d1c <__NVIC_SetPriority>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	db0a      	blt.n	8006d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	490c      	ldr	r1, [pc, #48]	@ (8006d68 <__NVIC_SetPriority+0x4c>)
 8006d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d3a:	0112      	lsls	r2, r2, #4
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	440b      	add	r3, r1
 8006d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d44:	e00a      	b.n	8006d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	4908      	ldr	r1, [pc, #32]	@ (8006d6c <__NVIC_SetPriority+0x50>)
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	3b04      	subs	r3, #4
 8006d54:	0112      	lsls	r2, r2, #4
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	440b      	add	r3, r1
 8006d5a:	761a      	strb	r2, [r3, #24]
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	e000e100 	.word	0xe000e100
 8006d6c:	e000ed00 	.word	0xe000ed00

08006d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d74:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <SysTick_Handler+0x1c>)
 8006d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d78:	f002 f98a 	bl	8009090 <xTaskGetSchedulerState>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d001      	beq.n	8006d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d82:	f000 fda1 	bl	80078c8 <xPortSysTickHandler>
  }
}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	e000e010 	.word	0xe000e010

08006d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d94:	2100      	movs	r1, #0
 8006d96:	f06f 0004 	mvn.w	r0, #4
 8006d9a:	f7ff ffbf 	bl	8006d1c <__NVIC_SetPriority>
#endif
}
 8006d9e:	bf00      	nop
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006daa:	f3ef 8305 	mrs	r3, IPSR
 8006dae:	603b      	str	r3, [r7, #0]
  return(result);
 8006db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006db6:	f06f 0305 	mvn.w	r3, #5
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	e00c      	b.n	8006dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <osKernelInitialize+0x44>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d105      	bne.n	8006dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006dc6:	4b08      	ldr	r3, [pc, #32]	@ (8006de8 <osKernelInitialize+0x44>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	e002      	b.n	8006dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dd8:	687b      	ldr	r3, [r7, #4]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	240004c8 	.word	0x240004c8

08006dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df2:	f3ef 8305 	mrs	r3, IPSR
 8006df6:	603b      	str	r3, [r7, #0]
  return(result);
 8006df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006dfe:	f06f 0305 	mvn.w	r3, #5
 8006e02:	607b      	str	r3, [r7, #4]
 8006e04:	e010      	b.n	8006e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e06:	4b0b      	ldr	r3, [pc, #44]	@ (8006e34 <osKernelStart+0x48>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d109      	bne.n	8006e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e0e:	f7ff ffbf 	bl	8006d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e12:	4b08      	ldr	r3, [pc, #32]	@ (8006e34 <osKernelStart+0x48>)
 8006e14:	2202      	movs	r2, #2
 8006e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e18:	f001 fcd6 	bl	80087c8 <vTaskStartScheduler>
      stat = osOK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	e002      	b.n	8006e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e22:	f04f 33ff 	mov.w	r3, #4294967295
 8006e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e28:	687b      	ldr	r3, [r7, #4]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	240004c8 	.word	0x240004c8

08006e38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08e      	sub	sp, #56	@ 0x38
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e48:	f3ef 8305 	mrs	r3, IPSR
 8006e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d17e      	bne.n	8006f52 <osThreadNew+0x11a>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d07b      	beq.n	8006f52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e5a:	2380      	movs	r3, #128	@ 0x80
 8006e5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e5e:	2318      	movs	r3, #24
 8006e60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d045      	beq.n	8006efe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <osThreadNew+0x48>
        name = attr->name;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <osThreadNew+0x6e>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b38      	cmp	r3, #56	@ 0x38
 8006e98:	d805      	bhi.n	8006ea6 <osThreadNew+0x6e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <osThreadNew+0x72>
        return (NULL);
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e054      	b.n	8006f54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	089b      	lsrs	r3, r3, #2
 8006eb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00e      	beq.n	8006ee0 <osThreadNew+0xa8>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2ba7      	cmp	r3, #167	@ 0xa7
 8006ec8:	d90a      	bls.n	8006ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <osThreadNew+0xa8>
        mem = 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e010      	b.n	8006f02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10c      	bne.n	8006f02 <osThreadNew+0xca>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d108      	bne.n	8006f02 <osThreadNew+0xca>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <osThreadNew+0xca>
          mem = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e001      	b.n	8006f02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d110      	bne.n	8006f2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6a3a      	ldr	r2, [r7, #32]
 8006f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f001 fa5e 	bl	80083e0 <xTaskCreateStatic>
 8006f24:	4603      	mov	r3, r0
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	e013      	b.n	8006f52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d110      	bne.n	8006f52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f107 0310 	add.w	r3, r7, #16
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f001 faac 	bl	80084a0 <xTaskCreate>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <osThreadNew+0x11a>
            hTask = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f52:	693b      	ldr	r3, [r7, #16]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3728      	adds	r7, #40	@ 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f64:	f3ef 8305 	mrs	r3, IPSR
 8006f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <osDelay+0x1c>
    stat = osErrorISR;
 8006f70:	f06f 0305 	mvn.w	r3, #5
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e007      	b.n	8006f88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fbea 	bl	800875c <vTaskDelay>
    }
  }

  return (stat);
 8006f88:	68fb      	ldr	r3, [r7, #12]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a07      	ldr	r2, [pc, #28]	@ (8006fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4a06      	ldr	r2, [pc, #24]	@ (8006fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8006faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2280      	movs	r2, #128	@ 0x80
 8006fb0:	601a      	str	r2, [r3, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	240004cc 	.word	0x240004cc
 8006fc4:	24000574 	.word	0x24000574

08006fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a07      	ldr	r2, [pc, #28]	@ (8006ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4a06      	ldr	r2, [pc, #24]	@ (8006ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8006fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fe6:	601a      	str	r2, [r3, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	24000774 	.word	0x24000774
 8006ff8:	2400081c 	.word	0x2400081c

08006ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	@ 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007008:	f001 fc4e 	bl	80088a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800700c:	4b5c      	ldr	r3, [pc, #368]	@ (8007180 <pvPortMalloc+0x184>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007014:	f000 f924 	bl	8007260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007018:	4b5a      	ldr	r3, [pc, #360]	@ (8007184 <pvPortMalloc+0x188>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4013      	ands	r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 8095 	bne.w	8007150 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01e      	beq.n	800706a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800702c:	2208      	movs	r2, #8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d015      	beq.n	800706a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f023 0307 	bic.w	r3, r3, #7
 8007044:	3308      	adds	r3, #8
 8007046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d06f      	beq.n	8007150 <pvPortMalloc+0x154>
 8007070:	4b45      	ldr	r3, [pc, #276]	@ (8007188 <pvPortMalloc+0x18c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	429a      	cmp	r2, r3
 8007078:	d86a      	bhi.n	8007150 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800707a:	4b44      	ldr	r3, [pc, #272]	@ (800718c <pvPortMalloc+0x190>)
 800707c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800707e:	4b43      	ldr	r3, [pc, #268]	@ (800718c <pvPortMalloc+0x190>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007084:	e004      	b.n	8007090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d903      	bls.n	80070a2 <pvPortMalloc+0xa6>
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f1      	bne.n	8007086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070a2:	4b37      	ldr	r3, [pc, #220]	@ (8007180 <pvPortMalloc+0x184>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d051      	beq.n	8007150 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2208      	movs	r2, #8
 80070b2:	4413      	add	r3, r2
 80070b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	1ad2      	subs	r2, r2, r3
 80070c6:	2308      	movs	r3, #8
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d920      	bls.n	8007110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <pvPortMalloc+0xfc>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800710a:	69b8      	ldr	r0, [r7, #24]
 800710c:	f000 f90a 	bl	8007324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007110:	4b1d      	ldr	r3, [pc, #116]	@ (8007188 <pvPortMalloc+0x18c>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	4a1b      	ldr	r2, [pc, #108]	@ (8007188 <pvPortMalloc+0x18c>)
 800711c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800711e:	4b1a      	ldr	r3, [pc, #104]	@ (8007188 <pvPortMalloc+0x18c>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b1b      	ldr	r3, [pc, #108]	@ (8007190 <pvPortMalloc+0x194>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d203      	bcs.n	8007132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800712a:	4b17      	ldr	r3, [pc, #92]	@ (8007188 <pvPortMalloc+0x18c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <pvPortMalloc+0x194>)
 8007130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	4b13      	ldr	r3, [pc, #76]	@ (8007184 <pvPortMalloc+0x188>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	431a      	orrs	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007146:	4b13      	ldr	r3, [pc, #76]	@ (8007194 <pvPortMalloc+0x198>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <pvPortMalloc+0x198>)
 800714e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007150:	f001 fbb8 	bl	80088c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <pvPortMalloc+0x17a>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	60fb      	str	r3, [r7, #12]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <pvPortMalloc+0x176>
	return pvReturn;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3728      	adds	r7, #40	@ 0x28
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	24004824 	.word	0x24004824
 8007184:	24004838 	.word	0x24004838
 8007188:	24004828 	.word	0x24004828
 800718c:	2400481c 	.word	0x2400481c
 8007190:	2400482c 	.word	0x2400482c
 8007194:	24004830 	.word	0x24004830

08007198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d04f      	beq.n	800724a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071aa:	2308      	movs	r3, #8
 80071ac:	425b      	negs	r3, r3
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4413      	add	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	4b25      	ldr	r3, [pc, #148]	@ (8007254 <vPortFree+0xbc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <vPortFree+0x46>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60fb      	str	r3, [r7, #12]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <vPortFree+0x66>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60bb      	str	r3, [r7, #8]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	4b14      	ldr	r3, [pc, #80]	@ (8007254 <vPortFree+0xbc>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11a      	bne.n	800724a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	4b0e      	ldr	r3, [pc, #56]	@ (8007254 <vPortFree+0xbc>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	43db      	mvns	r3, r3
 800721e:	401a      	ands	r2, r3
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007224:	f001 fb40 	bl	80088a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <vPortFree+0xc0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4413      	add	r3, r2
 8007232:	4a09      	ldr	r2, [pc, #36]	@ (8007258 <vPortFree+0xc0>)
 8007234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007236:	6938      	ldr	r0, [r7, #16]
 8007238:	f000 f874 	bl	8007324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800723c:	4b07      	ldr	r3, [pc, #28]	@ (800725c <vPortFree+0xc4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a06      	ldr	r2, [pc, #24]	@ (800725c <vPortFree+0xc4>)
 8007244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007246:	f001 fb3d 	bl	80088c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800724a:	bf00      	nop
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	24004838 	.word	0x24004838
 8007258:	24004828 	.word	0x24004828
 800725c:	24004834 	.word	0x24004834

08007260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007266:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800726a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800726c:	4b27      	ldr	r3, [pc, #156]	@ (800730c <prvHeapInit+0xac>)
 800726e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3307      	adds	r3, #7
 800727e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0307 	bic.w	r3, r3, #7
 8007286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	4a1f      	ldr	r2, [pc, #124]	@ (800730c <prvHeapInit+0xac>)
 8007290:	4413      	add	r3, r2
 8007292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007298:	4a1d      	ldr	r2, [pc, #116]	@ (8007310 <prvHeapInit+0xb0>)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800729e:	4b1c      	ldr	r3, [pc, #112]	@ (8007310 <prvHeapInit+0xb0>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4413      	add	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072ac:	2208      	movs	r2, #8
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1a9b      	subs	r3, r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <prvHeapInit+0xb4>)
 80072c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072c2:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <prvHeapInit+0xb4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ca:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <prvHeapInit+0xb4>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007314 <prvHeapInit+0xb4>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007318 <prvHeapInit+0xb8>)
 80072ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4a09      	ldr	r2, [pc, #36]	@ (800731c <prvHeapInit+0xbc>)
 80072f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072f8:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <prvHeapInit+0xc0>)
 80072fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072fe:	601a      	str	r2, [r3, #0]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	24000c1c 	.word	0x24000c1c
 8007310:	2400481c 	.word	0x2400481c
 8007314:	24004824 	.word	0x24004824
 8007318:	2400482c 	.word	0x2400482c
 800731c:	24004828 	.word	0x24004828
 8007320:	24004838 	.word	0x24004838

08007324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800732c:	4b28      	ldr	r3, [pc, #160]	@ (80073d0 <prvInsertBlockIntoFreeList+0xac>)
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e002      	b.n	8007338 <prvInsertBlockIntoFreeList+0x14>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d8f7      	bhi.n	8007332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d108      	bne.n	8007366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	441a      	add	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	441a      	add	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d118      	bne.n	80073ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b15      	ldr	r3, [pc, #84]	@ (80073d4 <prvInsertBlockIntoFreeList+0xb0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d00d      	beq.n	80073a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	441a      	add	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e008      	b.n	80073b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073a2:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <prvInsertBlockIntoFreeList+0xb0>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e003      	b.n	80073b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d002      	beq.n	80073c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	2400481c 	.word	0x2400481c
 80073d4:	24004824 	.word	0x24004824

080073d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 0208 	add.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295
 80073f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f103 0208 	add.w	r2, r3, #8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f103 0208 	add.w	r2, r3, #8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	601a      	str	r2, [r3, #0]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d103      	bne.n	800749a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e00c      	b.n	80074b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3308      	adds	r3, #8
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e002      	b.n	80074a8 <vListInsert+0x2e>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d2f6      	bcs.n	80074a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	601a      	str	r2, [r3, #0]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6892      	ldr	r2, [r2, #8]
 8007502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6852      	ldr	r2, [r2, #4]
 800750c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d103      	bne.n	8007520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	1e5a      	subs	r2, r3, #1
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3b04      	subs	r3, #4
 8007550:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3b04      	subs	r3, #4
 800755e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f023 0201 	bic.w	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b04      	subs	r3, #4
 800756e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007570:	4a0c      	ldr	r2, [pc, #48]	@ (80075a4 <pxPortInitialiseStack+0x64>)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3b14      	subs	r3, #20
 800757a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3b04      	subs	r3, #4
 8007586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f06f 0202 	mvn.w	r2, #2
 800758e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3b20      	subs	r3, #32
 8007594:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	080075a9 	.word	0x080075a9

080075a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075b2:	4b13      	ldr	r3, [pc, #76]	@ (8007600 <prvTaskExitError+0x58>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d00b      	beq.n	80075d4 <prvTaskExitError+0x2c>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60fb      	str	r3, [r7, #12]
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <prvTaskExitError+0x28>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	60bb      	str	r3, [r7, #8]
}
 80075e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075e8:	bf00      	nop
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0fc      	beq.n	80075ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	24000010 	.word	0x24000010
	...

08007610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <pxCurrentTCBConst2>)
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	6808      	ldr	r0, [r1, #0]
 8007616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	f380 8809 	msr	PSP, r0
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8811 	msr	BASEPRI, r0
 800762a:	4770      	bx	lr
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst2>:
 8007630:	24004884 	.word	0x24004884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007638:	4808      	ldr	r0, [pc, #32]	@ (800765c <prvPortStartFirstTask+0x24>)
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	6800      	ldr	r0, [r0, #0]
 800763e:	f380 8808 	msr	MSP, r0
 8007642:	f04f 0000 	mov.w	r0, #0
 8007646:	f380 8814 	msr	CONTROL, r0
 800764a:	b662      	cpsie	i
 800764c:	b661      	cpsie	f
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	df00      	svc	0
 8007658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800765a:	bf00      	nop
 800765c:	e000ed08 	.word	0xe000ed08

08007660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007666:	4b47      	ldr	r3, [pc, #284]	@ (8007784 <xPortStartScheduler+0x124>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a47      	ldr	r2, [pc, #284]	@ (8007788 <xPortStartScheduler+0x128>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10b      	bne.n	8007688 <xPortStartScheduler+0x28>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	613b      	str	r3, [r7, #16]
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007688:	4b3e      	ldr	r3, [pc, #248]	@ (8007784 <xPortStartScheduler+0x124>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a3f      	ldr	r2, [pc, #252]	@ (800778c <xPortStartScheduler+0x12c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d10b      	bne.n	80076aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60fb      	str	r3, [r7, #12]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076aa:	4b39      	ldr	r3, [pc, #228]	@ (8007790 <xPortStartScheduler+0x130>)
 80076ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	22ff      	movs	r2, #255	@ 0xff
 80076ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	4b31      	ldr	r3, [pc, #196]	@ (8007794 <xPortStartScheduler+0x134>)
 80076d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076d2:	4b31      	ldr	r3, [pc, #196]	@ (8007798 <xPortStartScheduler+0x138>)
 80076d4:	2207      	movs	r2, #7
 80076d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076d8:	e009      	b.n	80076ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80076da:	4b2f      	ldr	r3, [pc, #188]	@ (8007798 <xPortStartScheduler+0x138>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3b01      	subs	r3, #1
 80076e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007798 <xPortStartScheduler+0x138>)
 80076e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076e4:	78fb      	ldrb	r3, [r7, #3]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f6:	2b80      	cmp	r3, #128	@ 0x80
 80076f8:	d0ef      	beq.n	80076da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076fa:	4b27      	ldr	r3, [pc, #156]	@ (8007798 <xPortStartScheduler+0x138>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f1c3 0307 	rsb	r3, r3, #7
 8007702:	2b04      	cmp	r3, #4
 8007704:	d00b      	beq.n	800771e <xPortStartScheduler+0xbe>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800771e:	4b1e      	ldr	r3, [pc, #120]	@ (8007798 <xPortStartScheduler+0x138>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	4a1c      	ldr	r2, [pc, #112]	@ (8007798 <xPortStartScheduler+0x138>)
 8007726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007728:	4b1b      	ldr	r3, [pc, #108]	@ (8007798 <xPortStartScheduler+0x138>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007730:	4a19      	ldr	r2, [pc, #100]	@ (8007798 <xPortStartScheduler+0x138>)
 8007732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	b2da      	uxtb	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800773c:	4b17      	ldr	r3, [pc, #92]	@ (800779c <xPortStartScheduler+0x13c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a16      	ldr	r2, [pc, #88]	@ (800779c <xPortStartScheduler+0x13c>)
 8007742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007748:	4b14      	ldr	r3, [pc, #80]	@ (800779c <xPortStartScheduler+0x13c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a13      	ldr	r2, [pc, #76]	@ (800779c <xPortStartScheduler+0x13c>)
 800774e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007754:	f000 f8da 	bl	800790c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007758:	4b11      	ldr	r3, [pc, #68]	@ (80077a0 <xPortStartScheduler+0x140>)
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800775e:	f000 f8f9 	bl	8007954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <xPortStartScheduler+0x144>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a0f      	ldr	r2, [pc, #60]	@ (80077a4 <xPortStartScheduler+0x144>)
 8007768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800776c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800776e:	f7ff ff63 	bl	8007638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007772:	f001 fa0f 	bl	8008b94 <vTaskSwitchContext>
	prvTaskExitError();
 8007776:	f7ff ff17 	bl	80075a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed00 	.word	0xe000ed00
 8007788:	410fc271 	.word	0x410fc271
 800778c:	410fc270 	.word	0x410fc270
 8007790:	e000e400 	.word	0xe000e400
 8007794:	2400483c 	.word	0x2400483c
 8007798:	24004840 	.word	0x24004840
 800779c:	e000ed20 	.word	0xe000ed20
 80077a0:	24000010 	.word	0x24000010
 80077a4:	e000ef34 	.word	0xe000ef34

080077a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <vPortEnterCritical+0x5c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007804 <vPortEnterCritical+0x5c>)
 80077ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007804 <vPortEnterCritical+0x5c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d110      	bne.n	80077f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <vPortEnterCritical+0x60>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	603b      	str	r3, [r7, #0]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <vPortEnterCritical+0x4a>
	}
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	24000010 	.word	0x24000010
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007812:	4b12      	ldr	r3, [pc, #72]	@ (800785c <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <vPortExitCritical+0x26>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007832:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <vPortExitCritical+0x50>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3b01      	subs	r3, #1
 8007838:	4a08      	ldr	r2, [pc, #32]	@ (800785c <vPortExitCritical+0x50>)
 800783a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800783c:	4b07      	ldr	r3, [pc, #28]	@ (800785c <vPortExitCritical+0x50>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <vPortExitCritical+0x44>
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800784e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	24000010 	.word	0x24000010

08007860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007860:	f3ef 8009 	mrs	r0, PSP
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4b15      	ldr	r3, [pc, #84]	@ (80078c0 <pxCurrentTCBConst>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	f01e 0f10 	tst.w	lr, #16
 8007870:	bf08      	it	eq
 8007872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787a:	6010      	str	r0, [r2, #0]
 800787c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007884:	f380 8811 	msr	BASEPRI, r0
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f001 f980 	bl	8008b94 <vTaskSwitchContext>
 8007894:	f04f 0000 	mov.w	r0, #0
 8007898:	f380 8811 	msr	BASEPRI, r0
 800789c:	bc09      	pop	{r0, r3}
 800789e:	6819      	ldr	r1, [r3, #0]
 80078a0:	6808      	ldr	r0, [r1, #0]
 80078a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a6:	f01e 0f10 	tst.w	lr, #16
 80078aa:	bf08      	it	eq
 80078ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078b0:	f380 8809 	msr	PSP, r0
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	f3af 8000 	nop.w

080078c0 <pxCurrentTCBConst>:
 80078c0:	24004884 	.word	0x24004884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop

080078c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	607b      	str	r3, [r7, #4]
}
 80078e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078e2:	f001 f89d 	bl	8008a20 <xTaskIncrementTick>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078ec:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <xPortSysTickHandler+0x40>)
 80078ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	2300      	movs	r3, #0
 80078f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f383 8811 	msr	BASEPRI, r3
}
 80078fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	e000ed04 	.word	0xe000ed04

0800790c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007910:	4b0b      	ldr	r3, [pc, #44]	@ (8007940 <vPortSetupTimerInterrupt+0x34>)
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007916:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <vPortSetupTimerInterrupt+0x38>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800791c:	4b0a      	ldr	r3, [pc, #40]	@ (8007948 <vPortSetupTimerInterrupt+0x3c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a0a      	ldr	r2, [pc, #40]	@ (800794c <vPortSetupTimerInterrupt+0x40>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	099b      	lsrs	r3, r3, #6
 8007928:	4a09      	ldr	r2, [pc, #36]	@ (8007950 <vPortSetupTimerInterrupt+0x44>)
 800792a:	3b01      	subs	r3, #1
 800792c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800792e:	4b04      	ldr	r3, [pc, #16]	@ (8007940 <vPortSetupTimerInterrupt+0x34>)
 8007930:	2207      	movs	r2, #7
 8007932:	601a      	str	r2, [r3, #0]
}
 8007934:	bf00      	nop
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	e000e010 	.word	0xe000e010
 8007944:	e000e018 	.word	0xe000e018
 8007948:	24000000 	.word	0x24000000
 800794c:	10624dd3 	.word	0x10624dd3
 8007950:	e000e014 	.word	0xe000e014

08007954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007964 <vPortEnableVFP+0x10>
 8007958:	6801      	ldr	r1, [r0, #0]
 800795a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800795e:	6001      	str	r1, [r0, #0]
 8007960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007962:	bf00      	nop
 8007964:	e000ed88 	.word	0xe000ed88

08007968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800796e:	f3ef 8305 	mrs	r3, IPSR
 8007972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b0f      	cmp	r3, #15
 8007978:	d915      	bls.n	80079a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800797a:	4a18      	ldr	r2, [pc, #96]	@ (80079dc <vPortValidateInterruptPriority+0x74>)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007984:	4b16      	ldr	r3, [pc, #88]	@ (80079e0 <vPortValidateInterruptPriority+0x78>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	7afa      	ldrb	r2, [r7, #11]
 800798a:	429a      	cmp	r2, r3
 800798c:	d20b      	bcs.n	80079a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	607b      	str	r3, [r7, #4]
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	e7fd      	b.n	80079a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079a6:	4b0f      	ldr	r3, [pc, #60]	@ (80079e4 <vPortValidateInterruptPriority+0x7c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079ae:	4b0e      	ldr	r3, [pc, #56]	@ (80079e8 <vPortValidateInterruptPriority+0x80>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d90b      	bls.n	80079ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	603b      	str	r3, [r7, #0]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <vPortValidateInterruptPriority+0x62>
	}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	e000e3f0 	.word	0xe000e3f0
 80079e0:	2400483c 	.word	0x2400483c
 80079e4:	e000ed0c 	.word	0xe000ed0c
 80079e8:	24004840 	.word	0x24004840

080079ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGenericReset+0x2c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60bb      	str	r3, [r7, #8]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a18:	f7ff fec6 	bl	80077a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	441a      	add	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	22ff      	movs	r2, #255	@ 0xff
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	22ff      	movs	r2, #255	@ 0xff
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d114      	bne.n	8007a98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01a      	beq.n	8007aac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3310      	adds	r3, #16
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 f942 	bl	8008d04 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d012      	beq.n	8007aac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <xQueueGenericReset+0xd0>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	e009      	b.n	8007aac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3310      	adds	r3, #16
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fc9b 	bl	80073d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3324      	adds	r3, #36	@ 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fc96 	bl	80073d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aac:	f7ff feae 	bl	800780c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ab0:	2301      	movs	r3, #1
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	@ 0x38
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10b      	bne.n	8007b0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <xQueueGenericCreateStatic+0x56>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <xQueueGenericCreateStatic+0x5a>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <xQueueGenericCreateStatic+0x5c>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10b      	bne.n	8007b38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	623b      	str	r3, [r7, #32]
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <xQueueGenericCreateStatic+0x84>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <xQueueGenericCreateStatic+0x88>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <xQueueGenericCreateStatic+0x8a>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	61fb      	str	r3, [r7, #28]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b66:	2350      	movs	r3, #80	@ 0x50
 8007b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b50      	cmp	r3, #80	@ 0x50
 8007b6e:	d00b      	beq.n	8007b88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	61bb      	str	r3, [r7, #24]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f805 	bl	8007bba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3730      	adds	r7, #48	@ 0x30
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e002      	b.n	8007bdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007be8:	2101      	movs	r1, #1
 8007bea:	69b8      	ldr	r0, [r7, #24]
 8007bec:	f7ff fefe 	bl	80079ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08e      	sub	sp, #56	@ 0x38
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <xQueueGenericSend+0x34>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <xQueueGenericSend+0x42>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <xQueueGenericSend+0x46>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <xQueueGenericSend+0x48>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10b      	bne.n	8007c64 <xQueueGenericSend+0x64>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d103      	bne.n	8007c72 <xQueueGenericSend+0x72>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <xQueueGenericSend+0x76>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueGenericSend+0x78>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10b      	bne.n	8007c94 <xQueueGenericSend+0x94>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	623b      	str	r3, [r7, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	e7fd      	b.n	8007c90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c94:	f001 f9fc 	bl	8009090 <xTaskGetSchedulerState>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <xQueueGenericSend+0xa4>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <xQueueGenericSend+0xa8>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <xQueueGenericSend+0xaa>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xQueueGenericSend+0xc6>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	61fb      	str	r3, [r7, #28]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc6:	f7ff fd6f 	bl	80077a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d302      	bcc.n	8007cdc <xQueueGenericSend+0xdc>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d129      	bne.n	8007d30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ce2:	f000 fa0f 	bl	8008104 <prvCopyDataToQueue>
 8007ce6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d010      	beq.n	8007d12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf2:	3324      	adds	r3, #36	@ 0x24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 f805 	bl	8008d04 <xTaskRemoveFromEventList>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d013      	beq.n	8007d28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d00:	4b3f      	ldr	r3, [pc, #252]	@ (8007e00 <xQueueGenericSend+0x200>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	e00a      	b.n	8007d28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d18:	4b39      	ldr	r3, [pc, #228]	@ (8007e00 <xQueueGenericSend+0x200>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d28:	f7ff fd70 	bl	800780c <vPortExitCritical>
				return pdPASS;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e063      	b.n	8007df8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d103      	bne.n	8007d3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d36:	f7ff fd69 	bl	800780c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e05c      	b.n	8007df8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 f83f 	bl	8008dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d52:	f7ff fd5b 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d56:	f000 fda7 	bl	80088a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d5a:	f7ff fd25 	bl	80077a8 <vPortEnterCritical>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d103      	bne.n	8007d74 <xQueueGenericSend+0x174>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d103      	bne.n	8007d8a <xQueueGenericSend+0x18a>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d8a:	f7ff fd3f 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d8e:	1d3a      	adds	r2, r7, #4
 8007d90:	f107 0314 	add.w	r3, r7, #20
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 f82e 	bl	8008df8 <xTaskCheckForTimeOut>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d124      	bne.n	8007dec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007da2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007da4:	f000 faa6 	bl	80082f4 <prvIsQueueFull>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d018      	beq.n	8007de0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	3310      	adds	r3, #16
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 ff52 	bl	8008c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dbe:	f000 fa31 	bl	8008224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dc2:	f000 fd7f 	bl	80088c4 <xTaskResumeAll>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f af7c 	bne.w	8007cc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007dce:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <xQueueGenericSend+0x200>)
 8007dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	e772      	b.n	8007cc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007de2:	f000 fa1f 	bl	8008224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de6:	f000 fd6d 	bl	80088c4 <xTaskResumeAll>
 8007dea:	e76c      	b.n	8007cc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dee:	f000 fa19 	bl	8008224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007df2:	f000 fd67 	bl	80088c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007df6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3738      	adds	r7, #56	@ 0x38
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b090      	sub	sp, #64	@ 0x40
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10b      	bne.n	8007e34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <xQueueGenericSendFromISR+0x3e>
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <xQueueGenericSendFromISR+0x42>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueGenericSendFromISR+0x44>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	e7fd      	b.n	8007e60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d103      	bne.n	8007e72 <xQueueGenericSendFromISR+0x6e>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <xQueueGenericSendFromISR+0x72>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <xQueueGenericSendFromISR+0x74>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	623b      	str	r3, [r7, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e94:	f7ff fd68 	bl	8007968 <vPortValidateInterruptPriority>
	__asm volatile
 8007e98:	f3ef 8211 	mrs	r2, BASEPRI
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	61fa      	str	r2, [r7, #28]
 8007eae:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007eb2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d302      	bcc.n	8007ec6 <xQueueGenericSendFromISR+0xc2>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d12f      	bne.n	8007f26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ecc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007edc:	f000 f912 	bl	8008104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ee0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee8:	d112      	bne.n	8007f10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	3324      	adds	r3, #36	@ 0x24
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 ff04 	bl	8008d04 <xTaskRemoveFromEventList>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e007      	b.n	8007f20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f14:	3301      	adds	r3, #1
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	b25a      	sxtb	r2, r3
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f20:	2301      	movs	r3, #1
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f24:	e001      	b.n	8007f2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f383 8811 	msr	BASEPRI, r3
}
 8007f34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3740      	adds	r7, #64	@ 0x40
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08c      	sub	sp, #48	@ 0x30
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <xQueueReceive+0x32>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	623b      	str	r3, [r7, #32]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <xQueueReceive+0x40>
 8007f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <xQueueReceive+0x44>
 8007f80:	2301      	movs	r3, #1
 8007f82:	e000      	b.n	8007f86 <xQueueReceive+0x46>
 8007f84:	2300      	movs	r3, #0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <xQueueReceive+0x62>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	61fb      	str	r3, [r7, #28]
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	e7fd      	b.n	8007f9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fa2:	f001 f875 	bl	8009090 <xTaskGetSchedulerState>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d102      	bne.n	8007fb2 <xQueueReceive+0x72>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <xQueueReceive+0x76>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <xQueueReceive+0x78>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10b      	bne.n	8007fd4 <xQueueReceive+0x94>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	61bb      	str	r3, [r7, #24]
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	e7fd      	b.n	8007fd0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fd4:	f7ff fbe8 	bl	80077a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01f      	beq.n	8008024 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe8:	f000 f8f6 	bl	80081d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	1e5a      	subs	r2, r3, #1
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00f      	beq.n	800801c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffe:	3310      	adds	r3, #16
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fe7f 	bl	8008d04 <xTaskRemoveFromEventList>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800800c:	4b3c      	ldr	r3, [pc, #240]	@ (8008100 <xQueueReceive+0x1c0>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800801c:	f7ff fbf6 	bl	800780c <vPortExitCritical>
				return pdPASS;
 8008020:	2301      	movs	r3, #1
 8008022:	e069      	b.n	80080f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800802a:	f7ff fbef 	bl	800780c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800802e:	2300      	movs	r3, #0
 8008030:	e062      	b.n	80080f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008038:	f107 0310 	add.w	r3, r7, #16
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fec5 	bl	8008dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008042:	2301      	movs	r3, #1
 8008044:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008046:	f7ff fbe1 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800804a:	f000 fc2d 	bl	80088a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800804e:	f7ff fbab 	bl	80077a8 <vPortEnterCritical>
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008058:	b25b      	sxtb	r3, r3
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805e:	d103      	bne.n	8008068 <xQueueReceive+0x128>
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800806e:	b25b      	sxtb	r3, r3
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d103      	bne.n	800807e <xQueueReceive+0x13e>
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800807e:	f7ff fbc5 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008082:	1d3a      	adds	r2, r7, #4
 8008084:	f107 0310 	add.w	r3, r7, #16
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f000 feb4 	bl	8008df8 <xTaskCheckForTimeOut>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d123      	bne.n	80080de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008098:	f000 f916 	bl	80082c8 <prvIsQueueEmpty>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d017      	beq.n	80080d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a4:	3324      	adds	r3, #36	@ 0x24
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4611      	mov	r1, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fdd8 	bl	8008c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080b2:	f000 f8b7 	bl	8008224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080b6:	f000 fc05 	bl	80088c4 <xTaskResumeAll>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d189      	bne.n	8007fd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80080c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008100 <xQueueReceive+0x1c0>)
 80080c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	e780      	b.n	8007fd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080d4:	f000 f8a6 	bl	8008224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080d8:	f000 fbf4 	bl	80088c4 <xTaskResumeAll>
 80080dc:	e77a      	b.n	8007fd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e0:	f000 f8a0 	bl	8008224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080e4:	f000 fbee 	bl	80088c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080ea:	f000 f8ed 	bl	80082c8 <prvIsQueueEmpty>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f43f af6f 	beq.w	8007fd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3730      	adds	r7, #48	@ 0x30
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10d      	bne.n	800813e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d14d      	bne.n	80081c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 ffcc 	bl	80090cc <xTaskPriorityDisinherit>
 8008134:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
 800813c:	e043      	b.n	80081c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d119      	bne.n	8008178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6858      	ldr	r0, [r3, #4]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814c:	461a      	mov	r2, r3
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	f001 febd 	bl	8009ece <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815c:	441a      	add	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	d32b      	bcc.n	80081c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	e026      	b.n	80081c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68d8      	ldr	r0, [r3, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008180:	461a      	mov	r2, r3
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	f001 fea3 	bl	8009ece <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008190:	425b      	negs	r3, r3
 8008192:	441a      	add	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d207      	bcs.n	80081b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	425b      	negs	r3, r3
 80081ae:	441a      	add	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d105      	bne.n	80081c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80081ce:	697b      	ldr	r3, [r7, #20]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d018      	beq.n	800821c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f2:	441a      	add	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68da      	ldr	r2, [r3, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	429a      	cmp	r2, r3
 8008202:	d303      	bcc.n	800820c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68d9      	ldr	r1, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008214:	461a      	mov	r2, r3
 8008216:	6838      	ldr	r0, [r7, #0]
 8008218:	f001 fe59 	bl	8009ece <memcpy>
	}
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800822c:	f7ff fabc 	bl	80077a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008238:	e011      	b.n	800825e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	d012      	beq.n	8008268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3324      	adds	r3, #36	@ 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fd5c 	bl	8008d04 <xTaskRemoveFromEventList>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008252:	f000 fe35 	bl	8008ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	3b01      	subs	r3, #1
 800825a:	b2db      	uxtb	r3, r3
 800825c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800825e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008262:	2b00      	cmp	r3, #0
 8008264:	dce9      	bgt.n	800823a <prvUnlockQueue+0x16>
 8008266:	e000      	b.n	800826a <prvUnlockQueue+0x46>
					break;
 8008268:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	22ff      	movs	r2, #255	@ 0xff
 800826e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008272:	f7ff facb 	bl	800780c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008276:	f7ff fa97 	bl	80077a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008282:	e011      	b.n	80082a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d012      	beq.n	80082b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3310      	adds	r3, #16
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fd37 	bl	8008d04 <xTaskRemoveFromEventList>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800829c:	f000 fe10 	bl	8008ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dce9      	bgt.n	8008284 <prvUnlockQueue+0x60>
 80082b0:	e000      	b.n	80082b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	22ff      	movs	r2, #255	@ 0xff
 80082b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80082bc:	f7ff faa6 	bl	800780c <vPortExitCritical>
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082d0:	f7ff fa6a 	bl	80077a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082dc:	2301      	movs	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e001      	b.n	80082e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082e6:	f7ff fa91 	bl	800780c <vPortExitCritical>

	return xReturn;
 80082ea:	68fb      	ldr	r3, [r7, #12]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082fc:	f7ff fa54 	bl	80077a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	429a      	cmp	r2, r3
 800830a:	d102      	bne.n	8008312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800830c:	2301      	movs	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e001      	b.n	8008316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008316:	f7ff fa79 	bl	800780c <vPortExitCritical>

	return xReturn;
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e014      	b.n	800835e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008334:	4a0f      	ldr	r2, [pc, #60]	@ (8008374 <vQueueAddToRegistry+0x50>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008340:	490c      	ldr	r1, [pc, #48]	@ (8008374 <vQueueAddToRegistry+0x50>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800834a:	4a0a      	ldr	r2, [pc, #40]	@ (8008374 <vQueueAddToRegistry+0x50>)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4413      	add	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008356:	e006      	b.n	8008366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b07      	cmp	r3, #7
 8008362:	d9e7      	bls.n	8008334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	24004844 	.word	0x24004844

08008378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008388:	f7ff fa0e 	bl	80077a8 <vPortEnterCritical>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008392:	b25b      	sxtb	r3, r3
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d103      	bne.n	80083a2 <vQueueWaitForMessageRestricted+0x2a>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083a8:	b25b      	sxtb	r3, r3
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d103      	bne.n	80083b8 <vQueueWaitForMessageRestricted+0x40>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083b8:	f7ff fa28 	bl	800780c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	3324      	adds	r3, #36	@ 0x24
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fc6d 	bl	8008cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083d2:	6978      	ldr	r0, [r7, #20]
 80083d4:	f7ff ff26 	bl	8008224 <prvUnlockQueue>
	}
 80083d8:	bf00      	nop
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	@ 0x38
 80083e4:	af04      	add	r7, sp, #16
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10b      	bne.n	800840c <xTaskCreateStatic+0x2c>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	623b      	str	r3, [r7, #32]
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800840c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	61fb      	str	r3, [r7, #28]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800842a:	23a8      	movs	r3, #168	@ 0xa8
 800842c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2ba8      	cmp	r3, #168	@ 0xa8
 8008432:	d00b      	beq.n	800844c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	61bb      	str	r3, [r7, #24]
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800844c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800844e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01e      	beq.n	8008492 <xTaskCreateStatic+0xb2>
 8008454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01b      	beq.n	8008492 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800845a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	2202      	movs	r2, #2
 8008468:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800846c:	2300      	movs	r3, #0
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	f107 0314 	add.w	r3, r7, #20
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f851 	bl	800852c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800848a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800848c:	f000 f8f6 	bl	800867c <prvAddNewTaskToReadyList>
 8008490:	e001      	b.n	8008496 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008496:	697b      	ldr	r3, [r7, #20]
	}
 8008498:	4618      	mov	r0, r3
 800849a:	3728      	adds	r7, #40	@ 0x28
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08c      	sub	sp, #48	@ 0x30
 80084a4:	af04      	add	r7, sp, #16
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fda1 	bl	8006ffc <pvPortMalloc>
 80084ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084c2:	20a8      	movs	r0, #168	@ 0xa8
 80084c4:	f7fe fd9a 	bl	8006ffc <pvPortMalloc>
 80084c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80084d6:	e005      	b.n	80084e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084d8:	6978      	ldr	r0, [r7, #20]
 80084da:	f7fe fe5d 	bl	8007198 <vPortFree>
 80084de:	e001      	b.n	80084e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d017      	beq.n	800851a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	2300      	movs	r3, #0
 80084f6:	9303      	str	r3, [sp, #12]
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	9302      	str	r3, [sp, #8]
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f80f 	bl	800852c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800850e:	69f8      	ldr	r0, [r7, #28]
 8008510:	f000 f8b4 	bl	800867c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008514:	2301      	movs	r3, #1
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	e002      	b.n	8008520 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008520:	69bb      	ldr	r3, [r7, #24]
	}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	461a      	mov	r2, r3
 8008544:	21a5      	movs	r1, #165	@ 0xa5
 8008546:	f001 fbf1 	bl	8009d2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008554:	440b      	add	r3, r1
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f023 0307 	bic.w	r3, r3, #7
 8008562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	617b      	str	r3, [r7, #20]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01f      	beq.n	80085cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800858c:	2300      	movs	r3, #0
 800858e:	61fb      	str	r3, [r7, #28]
 8008590:	e012      	b.n	80085b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	7819      	ldrb	r1, [r3, #0]
 800859a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	4413      	add	r3, r2
 80085a0:	3334      	adds	r3, #52	@ 0x34
 80085a2:	460a      	mov	r2, r1
 80085a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	3301      	adds	r3, #1
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	2b0f      	cmp	r3, #15
 80085bc:	d9e9      	bls.n	8008592 <prvInitialiseNewTask+0x66>
 80085be:	e000      	b.n	80085c2 <prvInitialiseNewTask+0x96>
			{
				break;
 80085c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085ca:	e003      	b.n	80085d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	2b37      	cmp	r3, #55	@ 0x37
 80085d8:	d901      	bls.n	80085de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085da:	2337      	movs	r3, #55	@ 0x37
 80085dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	2200      	movs	r2, #0
 80085ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	3304      	adds	r3, #4
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe ff0f 	bl	8007418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	3318      	adds	r3, #24
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe ff0a 	bl	8007418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008608:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008618:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	2200      	movs	r2, #0
 800861e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	2200      	movs	r2, #0
 8008626:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	3354      	adds	r3, #84	@ 0x54
 800862e:	224c      	movs	r2, #76	@ 0x4c
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fb7a 	bl	8009d2c <memset>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	4a0d      	ldr	r2, [pc, #52]	@ (8008670 <prvInitialiseNewTask+0x144>)
 800863c:	659a      	str	r2, [r3, #88]	@ 0x58
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	4a0c      	ldr	r2, [pc, #48]	@ (8008674 <prvInitialiseNewTask+0x148>)
 8008642:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	4a0c      	ldr	r2, [pc, #48]	@ (8008678 <prvInitialiseNewTask+0x14c>)
 8008648:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	68f9      	ldr	r1, [r7, #12]
 800864e:	69b8      	ldr	r0, [r7, #24]
 8008650:	f7fe ff76 	bl	8007540 <pxPortInitialiseStack>
 8008654:	4602      	mov	r2, r0
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008666:	bf00      	nop
 8008668:	3720      	adds	r7, #32
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	24004eb0 	.word	0x24004eb0
 8008674:	24004f18 	.word	0x24004f18
 8008678:	24004f80 	.word	0x24004f80

0800867c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008684:	f7ff f890 	bl	80077a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008688:	4b2d      	ldr	r3, [pc, #180]	@ (8008740 <prvAddNewTaskToReadyList+0xc4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	4a2c      	ldr	r2, [pc, #176]	@ (8008740 <prvAddNewTaskToReadyList+0xc4>)
 8008690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008692:	4b2c      	ldr	r3, [pc, #176]	@ (8008744 <prvAddNewTaskToReadyList+0xc8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d109      	bne.n	80086ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800869a:	4a2a      	ldr	r2, [pc, #168]	@ (8008744 <prvAddNewTaskToReadyList+0xc8>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086a0:	4b27      	ldr	r3, [pc, #156]	@ (8008740 <prvAddNewTaskToReadyList+0xc4>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d110      	bne.n	80086ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086a8:	f000 fc2e 	bl	8008f08 <prvInitialiseTaskLists>
 80086ac:	e00d      	b.n	80086ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086ae:	4b26      	ldr	r3, [pc, #152]	@ (8008748 <prvAddNewTaskToReadyList+0xcc>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086b6:	4b23      	ldr	r3, [pc, #140]	@ (8008744 <prvAddNewTaskToReadyList+0xc8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d802      	bhi.n	80086ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008744 <prvAddNewTaskToReadyList+0xc8>)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ca:	4b20      	ldr	r3, [pc, #128]	@ (800874c <prvAddNewTaskToReadyList+0xd0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4a1e      	ldr	r2, [pc, #120]	@ (800874c <prvAddNewTaskToReadyList+0xd0>)
 80086d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086d4:	4b1d      	ldr	r3, [pc, #116]	@ (800874c <prvAddNewTaskToReadyList+0xd0>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008750 <prvAddNewTaskToReadyList+0xd4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d903      	bls.n	80086f0 <prvAddNewTaskToReadyList+0x74>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	4a18      	ldr	r2, [pc, #96]	@ (8008750 <prvAddNewTaskToReadyList+0xd4>)
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <prvAddNewTaskToReadyList+0xd8>)
 80086fe:	441a      	add	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fe93 	bl	8007432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800870c:	f7ff f87e 	bl	800780c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008710:	4b0d      	ldr	r3, [pc, #52]	@ (8008748 <prvAddNewTaskToReadyList+0xcc>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00e      	beq.n	8008736 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008718:	4b0a      	ldr	r3, [pc, #40]	@ (8008744 <prvAddNewTaskToReadyList+0xc8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	429a      	cmp	r2, r3
 8008724:	d207      	bcs.n	8008736 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008726:	4b0c      	ldr	r3, [pc, #48]	@ (8008758 <prvAddNewTaskToReadyList+0xdc>)
 8008728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	24004d58 	.word	0x24004d58
 8008744:	24004884 	.word	0x24004884
 8008748:	24004d64 	.word	0x24004d64
 800874c:	24004d74 	.word	0x24004d74
 8008750:	24004d60 	.word	0x24004d60
 8008754:	24004888 	.word	0x24004888
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d018      	beq.n	80087a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800876e:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <vTaskDelay+0x64>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <vTaskDelay+0x32>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	60bb      	str	r3, [r7, #8]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800878e:	f000 f88b 	bl	80088a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008792:	2100      	movs	r1, #0
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fd09 	bl	80091ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800879a:	f000 f893 	bl	80088c4 <xTaskResumeAll>
 800879e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d107      	bne.n	80087b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087a6:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <vTaskDelay+0x68>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	24004d80 	.word	0x24004d80
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087d6:	463a      	mov	r2, r7
 80087d8:	1d39      	adds	r1, r7, #4
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fbd8 	bl	8006f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	9202      	str	r2, [sp, #8]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	460a      	mov	r2, r1
 80087f6:	4924      	ldr	r1, [pc, #144]	@ (8008888 <vTaskStartScheduler+0xc0>)
 80087f8:	4824      	ldr	r0, [pc, #144]	@ (800888c <vTaskStartScheduler+0xc4>)
 80087fa:	f7ff fdf1 	bl	80083e0 <xTaskCreateStatic>
 80087fe:	4603      	mov	r3, r0
 8008800:	4a23      	ldr	r2, [pc, #140]	@ (8008890 <vTaskStartScheduler+0xc8>)
 8008802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008804:	4b22      	ldr	r3, [pc, #136]	@ (8008890 <vTaskStartScheduler+0xc8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800880c:	2301      	movs	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e001      	b.n	8008816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d102      	bne.n	8008822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800881c:	f000 fd1a 	bl	8009254 <xTimerCreateTimerTask>
 8008820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d11b      	bne.n	8008860 <vTaskStartScheduler+0x98>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800883c:	4b15      	ldr	r3, [pc, #84]	@ (8008894 <vTaskStartScheduler+0xcc>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3354      	adds	r3, #84	@ 0x54
 8008842:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <vTaskStartScheduler+0xd0>)
 8008844:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008846:	4b15      	ldr	r3, [pc, #84]	@ (800889c <vTaskStartScheduler+0xd4>)
 8008848:	f04f 32ff 	mov.w	r2, #4294967295
 800884c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800884e:	4b14      	ldr	r3, [pc, #80]	@ (80088a0 <vTaskStartScheduler+0xd8>)
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008854:	4b13      	ldr	r3, [pc, #76]	@ (80088a4 <vTaskStartScheduler+0xdc>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800885a:	f7fe ff01 	bl	8007660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800885e:	e00f      	b.n	8008880 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d10b      	bne.n	8008880 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	60fb      	str	r3, [r7, #12]
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <vTaskStartScheduler+0xb4>
}
 8008880:	bf00      	nop
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	0800aa74 	.word	0x0800aa74
 800888c:	08008ed9 	.word	0x08008ed9
 8008890:	24004d7c 	.word	0x24004d7c
 8008894:	24004884 	.word	0x24004884
 8008898:	24000020 	.word	0x24000020
 800889c:	24004d78 	.word	0x24004d78
 80088a0:	24004d64 	.word	0x24004d64
 80088a4:	24004d5c 	.word	0x24004d5c

080088a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088ac:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <vTaskSuspendAll+0x18>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	4a03      	ldr	r2, [pc, #12]	@ (80088c0 <vTaskSuspendAll+0x18>)
 80088b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088b6:	bf00      	nop
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	24004d80 	.word	0x24004d80

080088c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088d2:	4b42      	ldr	r3, [pc, #264]	@ (80089dc <xTaskResumeAll+0x118>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	603b      	str	r3, [r7, #0]
}
 80088ec:	bf00      	nop
 80088ee:	bf00      	nop
 80088f0:	e7fd      	b.n	80088ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088f2:	f7fe ff59 	bl	80077a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088f6:	4b39      	ldr	r3, [pc, #228]	@ (80089dc <xTaskResumeAll+0x118>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a37      	ldr	r2, [pc, #220]	@ (80089dc <xTaskResumeAll+0x118>)
 80088fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008900:	4b36      	ldr	r3, [pc, #216]	@ (80089dc <xTaskResumeAll+0x118>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d162      	bne.n	80089ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008908:	4b35      	ldr	r3, [pc, #212]	@ (80089e0 <xTaskResumeAll+0x11c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d05e      	beq.n	80089ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008910:	e02f      	b.n	8008972 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008912:	4b34      	ldr	r3, [pc, #208]	@ (80089e4 <xTaskResumeAll+0x120>)
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3318      	adds	r3, #24
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fde4 	bl	80074ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fddf 	bl	80074ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008932:	4b2d      	ldr	r3, [pc, #180]	@ (80089e8 <xTaskResumeAll+0x124>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d903      	bls.n	8008942 <xTaskResumeAll+0x7e>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	4a2a      	ldr	r2, [pc, #168]	@ (80089e8 <xTaskResumeAll+0x124>)
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a27      	ldr	r2, [pc, #156]	@ (80089ec <xTaskResumeAll+0x128>)
 8008950:	441a      	add	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3304      	adds	r3, #4
 8008956:	4619      	mov	r1, r3
 8008958:	4610      	mov	r0, r2
 800895a:	f7fe fd6a 	bl	8007432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008962:	4b23      	ldr	r3, [pc, #140]	@ (80089f0 <xTaskResumeAll+0x12c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d302      	bcc.n	8008972 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800896c:	4b21      	ldr	r3, [pc, #132]	@ (80089f4 <xTaskResumeAll+0x130>)
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008972:	4b1c      	ldr	r3, [pc, #112]	@ (80089e4 <xTaskResumeAll+0x120>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1cb      	bne.n	8008912 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008980:	f000 fb66 	bl	8009050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008984:	4b1c      	ldr	r3, [pc, #112]	@ (80089f8 <xTaskResumeAll+0x134>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d010      	beq.n	80089b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008990:	f000 f846 	bl	8008a20 <xTaskIncrementTick>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800899a:	4b16      	ldr	r3, [pc, #88]	@ (80089f4 <xTaskResumeAll+0x130>)
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f1      	bne.n	8008990 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80089ac:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <xTaskResumeAll+0x134>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089b2:	4b10      	ldr	r3, [pc, #64]	@ (80089f4 <xTaskResumeAll+0x130>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089be:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <xTaskResumeAll+0x138>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089ce:	f7fe ff1d 	bl	800780c <vPortExitCritical>

	return xAlreadyYielded;
 80089d2:	68bb      	ldr	r3, [r7, #8]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	24004d80 	.word	0x24004d80
 80089e0:	24004d58 	.word	0x24004d58
 80089e4:	24004d18 	.word	0x24004d18
 80089e8:	24004d60 	.word	0x24004d60
 80089ec:	24004888 	.word	0x24004888
 80089f0:	24004884 	.word	0x24004884
 80089f4:	24004d6c 	.word	0x24004d6c
 80089f8:	24004d68 	.word	0x24004d68
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a06:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <xTaskGetTickCount+0x1c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a0c:	687b      	ldr	r3, [r7, #4]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	24004d5c 	.word	0x24004d5c

08008a20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b68 <xTaskIncrementTick+0x148>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f040 8090 	bne.w	8008b54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a34:	4b4d      	ldr	r3, [pc, #308]	@ (8008b6c <xTaskIncrementTick+0x14c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8008b6c <xTaskIncrementTick+0x14c>)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d121      	bne.n	8008a8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a48:	4b49      	ldr	r3, [pc, #292]	@ (8008b70 <xTaskIncrementTick+0x150>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	603b      	str	r3, [r7, #0]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <xTaskIncrementTick+0x46>
 8008a6a:	4b41      	ldr	r3, [pc, #260]	@ (8008b70 <xTaskIncrementTick+0x150>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	4b40      	ldr	r3, [pc, #256]	@ (8008b74 <xTaskIncrementTick+0x154>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a3e      	ldr	r2, [pc, #248]	@ (8008b70 <xTaskIncrementTick+0x150>)
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	4a3e      	ldr	r2, [pc, #248]	@ (8008b74 <xTaskIncrementTick+0x154>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b78 <xTaskIncrementTick+0x158>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	4a3c      	ldr	r2, [pc, #240]	@ (8008b78 <xTaskIncrementTick+0x158>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	f000 fae2 	bl	8009050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8008b7c <xTaskIncrementTick+0x15c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d349      	bcc.n	8008b2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a96:	4b36      	ldr	r3, [pc, #216]	@ (8008b70 <xTaskIncrementTick+0x150>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa0:	4b36      	ldr	r3, [pc, #216]	@ (8008b7c <xTaskIncrementTick+0x15c>)
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa6:	601a      	str	r2, [r3, #0]
					break;
 8008aa8:	e03f      	b.n	8008b2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aaa:	4b31      	ldr	r3, [pc, #196]	@ (8008b70 <xTaskIncrementTick+0x150>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d203      	bcs.n	8008aca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8008b7c <xTaskIncrementTick+0x15c>)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ac8:	e02f      	b.n	8008b2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe fd0c 	bl	80074ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3318      	adds	r3, #24
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe fd03 	bl	80074ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aea:	4b25      	ldr	r3, [pc, #148]	@ (8008b80 <xTaskIncrementTick+0x160>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d903      	bls.n	8008afa <xTaskIncrementTick+0xda>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af6:	4a22      	ldr	r2, [pc, #136]	@ (8008b80 <xTaskIncrementTick+0x160>)
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4a1f      	ldr	r2, [pc, #124]	@ (8008b84 <xTaskIncrementTick+0x164>)
 8008b08:	441a      	add	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7fe fc8e 	bl	8007432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008b88 <xTaskIncrementTick+0x168>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d3b8      	bcc.n	8008a96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b28:	e7b5      	b.n	8008a96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b2a:	4b17      	ldr	r3, [pc, #92]	@ (8008b88 <xTaskIncrementTick+0x168>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b30:	4914      	ldr	r1, [pc, #80]	@ (8008b84 <xTaskIncrementTick+0x164>)
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d901      	bls.n	8008b46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b46:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <xTaskIncrementTick+0x16c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e004      	b.n	8008b5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b54:	4b0e      	ldr	r3, [pc, #56]	@ (8008b90 <xTaskIncrementTick+0x170>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8008b90 <xTaskIncrementTick+0x170>)
 8008b5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b5e:	697b      	ldr	r3, [r7, #20]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	24004d80 	.word	0x24004d80
 8008b6c:	24004d5c 	.word	0x24004d5c
 8008b70:	24004d10 	.word	0x24004d10
 8008b74:	24004d14 	.word	0x24004d14
 8008b78:	24004d70 	.word	0x24004d70
 8008b7c:	24004d78 	.word	0x24004d78
 8008b80:	24004d60 	.word	0x24004d60
 8008b84:	24004888 	.word	0x24004888
 8008b88:	24004884 	.word	0x24004884
 8008b8c:	24004d6c 	.word	0x24004d6c
 8008b90:	24004d68 	.word	0x24004d68

08008b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8008c48 <vTaskSwitchContext+0xb4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c4c <vTaskSwitchContext+0xb8>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ba8:	e047      	b.n	8008c3a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008baa:	4b28      	ldr	r3, [pc, #160]	@ (8008c4c <vTaskSwitchContext+0xb8>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb0:	4b27      	ldr	r3, [pc, #156]	@ (8008c50 <vTaskSwitchContext+0xbc>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	e011      	b.n	8008bdc <vTaskSwitchContext+0x48>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10b      	bne.n	8008bd6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <vTaskSwitchContext+0x3e>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	491d      	ldr	r1, [pc, #116]	@ (8008c54 <vTaskSwitchContext+0xc0>)
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0e3      	beq.n	8008bb8 <vTaskSwitchContext+0x24>
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4a16      	ldr	r2, [pc, #88]	@ (8008c54 <vTaskSwitchContext+0xc0>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	60bb      	str	r3, [r7, #8]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	3308      	adds	r3, #8
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d104      	bne.n	8008c20 <vTaskSwitchContext+0x8c>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	605a      	str	r2, [r3, #4]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	4a0c      	ldr	r2, [pc, #48]	@ (8008c58 <vTaskSwitchContext+0xc4>)
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4a09      	ldr	r2, [pc, #36]	@ (8008c50 <vTaskSwitchContext+0xbc>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <vTaskSwitchContext+0xc4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3354      	adds	r3, #84	@ 0x54
 8008c36:	4a09      	ldr	r2, [pc, #36]	@ (8008c5c <vTaskSwitchContext+0xc8>)
 8008c38:	6013      	str	r3, [r2, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	24004d80 	.word	0x24004d80
 8008c4c:	24004d6c 	.word	0x24004d6c
 8008c50:	24004d60 	.word	0x24004d60
 8008c54:	24004888 	.word	0x24004888
 8008c58:	24004884 	.word	0x24004884
 8008c5c:	24000020 	.word	0x24000020

08008c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c88:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <vTaskPlaceOnEventList+0x48>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3318      	adds	r3, #24
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe fbf2 	bl	800747a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c96:	2101      	movs	r1, #1
 8008c98:	6838      	ldr	r0, [r7, #0]
 8008c9a:	f000 fa87 	bl	80091ac <prvAddCurrentTaskToDelayedList>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	24004884 	.word	0x24004884

08008cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	617b      	str	r3, [r7, #20]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3318      	adds	r3, #24
 8008cdc:	4619      	mov	r1, r3
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7fe fba7 	bl	8007432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
 8008cee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	68b8      	ldr	r0, [r7, #8]
 8008cf4:	f000 fa5a 	bl	80091ac <prvAddCurrentTaskToDelayedList>
	}
 8008cf8:	bf00      	nop
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	24004884 	.word	0x24004884

08008d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10b      	bne.n	8008d32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	60fb      	str	r3, [r7, #12]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3318      	adds	r3, #24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fbd8 	bl	80074ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008db4 <xTaskRemoveFromEventList+0xb0>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d11d      	bne.n	8008d80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fbcf 	bl	80074ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d52:	4b19      	ldr	r3, [pc, #100]	@ (8008db8 <xTaskRemoveFromEventList+0xb4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d903      	bls.n	8008d62 <xTaskRemoveFromEventList+0x5e>
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	4a16      	ldr	r2, [pc, #88]	@ (8008db8 <xTaskRemoveFromEventList+0xb4>)
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a13      	ldr	r2, [pc, #76]	@ (8008dbc <xTaskRemoveFromEventList+0xb8>)
 8008d70:	441a      	add	r2, r3
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f7fe fb5a 	bl	8007432 <vListInsertEnd>
 8008d7e:	e005      	b.n	8008d8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	3318      	adds	r3, #24
 8008d84:	4619      	mov	r1, r3
 8008d86:	480e      	ldr	r0, [pc, #56]	@ (8008dc0 <xTaskRemoveFromEventList+0xbc>)
 8008d88:	f7fe fb53 	bl	8007432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d90:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc4 <xTaskRemoveFromEventList+0xc0>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d905      	bls.n	8008da6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc8 <xTaskRemoveFromEventList+0xc4>)
 8008da0:	2201      	movs	r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e001      	b.n	8008daa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008daa:	697b      	ldr	r3, [r7, #20]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	24004d80 	.word	0x24004d80
 8008db8:	24004d60 	.word	0x24004d60
 8008dbc:	24004888 	.word	0x24004888
 8008dc0:	24004d18 	.word	0x24004d18
 8008dc4:	24004884 	.word	0x24004884
 8008dc8:	24004d6c 	.word	0x24004d6c

08008dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <vTaskInternalSetTimeOutState+0x24>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ddc:	4b05      	ldr	r3, [pc, #20]	@ (8008df4 <vTaskInternalSetTimeOutState+0x28>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	605a      	str	r2, [r3, #4]
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	24004d70 	.word	0x24004d70
 8008df4:	24004d5c 	.word	0x24004d5c

08008df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10b      	bne.n	8008e20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	613b      	str	r3, [r7, #16]
}
 8008e1a:	bf00      	nop
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10b      	bne.n	8008e3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	60fb      	str	r3, [r7, #12]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008e3e:	f7fe fcb3 	bl	80077a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e42:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb8 <xTaskCheckForTimeOut+0xc0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d102      	bne.n	8008e62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61fb      	str	r3, [r7, #28]
 8008e60:	e023      	b.n	8008eaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b15      	ldr	r3, [pc, #84]	@ (8008ebc <xTaskCheckForTimeOut+0xc4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d007      	beq.n	8008e7e <xTaskCheckForTimeOut+0x86>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d302      	bcc.n	8008e7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e015      	b.n	8008eaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d20b      	bcs.n	8008ea0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff ff99 	bl	8008dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	e004      	b.n	8008eaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008eaa:	f7fe fcaf 	bl	800780c <vPortExitCritical>

	return xReturn;
 8008eae:	69fb      	ldr	r3, [r7, #28]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	24004d5c 	.word	0x24004d5c
 8008ebc:	24004d70 	.word	0x24004d70

08008ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ec4:	4b03      	ldr	r3, [pc, #12]	@ (8008ed4 <vTaskMissedYield+0x14>)
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
}
 8008eca:	bf00      	nop
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	24004d6c 	.word	0x24004d6c

08008ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ee0:	f000 f852 	bl	8008f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ee4:	4b06      	ldr	r3, [pc, #24]	@ (8008f00 <prvIdleTask+0x28>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d9f9      	bls.n	8008ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008eec:	4b05      	ldr	r3, [pc, #20]	@ (8008f04 <prvIdleTask+0x2c>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008efc:	e7f0      	b.n	8008ee0 <prvIdleTask+0x8>
 8008efe:	bf00      	nop
 8008f00:	24004888 	.word	0x24004888
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f0e:	2300      	movs	r3, #0
 8008f10:	607b      	str	r3, [r7, #4]
 8008f12:	e00c      	b.n	8008f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4a12      	ldr	r2, [pc, #72]	@ (8008f68 <prvInitialiseTaskLists+0x60>)
 8008f20:	4413      	add	r3, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fa58 	bl	80073d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	607b      	str	r3, [r7, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b37      	cmp	r3, #55	@ 0x37
 8008f32:	d9ef      	bls.n	8008f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f34:	480d      	ldr	r0, [pc, #52]	@ (8008f6c <prvInitialiseTaskLists+0x64>)
 8008f36:	f7fe fa4f 	bl	80073d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f3a:	480d      	ldr	r0, [pc, #52]	@ (8008f70 <prvInitialiseTaskLists+0x68>)
 8008f3c:	f7fe fa4c 	bl	80073d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f40:	480c      	ldr	r0, [pc, #48]	@ (8008f74 <prvInitialiseTaskLists+0x6c>)
 8008f42:	f7fe fa49 	bl	80073d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f46:	480c      	ldr	r0, [pc, #48]	@ (8008f78 <prvInitialiseTaskLists+0x70>)
 8008f48:	f7fe fa46 	bl	80073d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f4c:	480b      	ldr	r0, [pc, #44]	@ (8008f7c <prvInitialiseTaskLists+0x74>)
 8008f4e:	f7fe fa43 	bl	80073d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f52:	4b0b      	ldr	r3, [pc, #44]	@ (8008f80 <prvInitialiseTaskLists+0x78>)
 8008f54:	4a05      	ldr	r2, [pc, #20]	@ (8008f6c <prvInitialiseTaskLists+0x64>)
 8008f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f58:	4b0a      	ldr	r3, [pc, #40]	@ (8008f84 <prvInitialiseTaskLists+0x7c>)
 8008f5a:	4a05      	ldr	r2, [pc, #20]	@ (8008f70 <prvInitialiseTaskLists+0x68>)
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	24004888 	.word	0x24004888
 8008f6c:	24004ce8 	.word	0x24004ce8
 8008f70:	24004cfc 	.word	0x24004cfc
 8008f74:	24004d18 	.word	0x24004d18
 8008f78:	24004d2c 	.word	0x24004d2c
 8008f7c:	24004d44 	.word	0x24004d44
 8008f80:	24004d10 	.word	0x24004d10
 8008f84:	24004d14 	.word	0x24004d14

08008f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f8e:	e019      	b.n	8008fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f90:	f7fe fc0a 	bl	80077a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f94:	4b10      	ldr	r3, [pc, #64]	@ (8008fd8 <prvCheckTasksWaitingTermination+0x50>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe faa3 	bl	80074ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fdc <prvCheckTasksWaitingTermination+0x54>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4a0b      	ldr	r2, [pc, #44]	@ (8008fdc <prvCheckTasksWaitingTermination+0x54>)
 8008fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe0 <prvCheckTasksWaitingTermination+0x58>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe0 <prvCheckTasksWaitingTermination+0x58>)
 8008fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fba:	f7fe fc27 	bl	800780c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f810 	bl	8008fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fc4:	4b06      	ldr	r3, [pc, #24]	@ (8008fe0 <prvCheckTasksWaitingTermination+0x58>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e1      	bne.n	8008f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fcc:	bf00      	nop
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	24004d2c 	.word	0x24004d2c
 8008fdc:	24004d58 	.word	0x24004d58
 8008fe0:	24004d40 	.word	0x24004d40

08008fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3354      	adds	r3, #84	@ 0x54
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 feb3 	bl	8009d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d108      	bne.n	8009012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe f8c7 	bl	8007198 <vPortFree>
				vPortFree( pxTCB );
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fe f8c4 	bl	8007198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009010:	e019      	b.n	8009046 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009018:	2b01      	cmp	r3, #1
 800901a:	d103      	bne.n	8009024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fe f8bb 	bl	8007198 <vPortFree>
	}
 8009022:	e010      	b.n	8009046 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800902a:	2b02      	cmp	r3, #2
 800902c:	d00b      	beq.n	8009046 <prvDeleteTCB+0x62>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60fb      	str	r3, [r7, #12]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <prvDeleteTCB+0x5e>
	}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009056:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <prvResetNextTaskUnblockTime+0x38>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009060:	4b0a      	ldr	r3, [pc, #40]	@ (800908c <prvResetNextTaskUnblockTime+0x3c>)
 8009062:	f04f 32ff 	mov.w	r2, #4294967295
 8009066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009068:	e008      	b.n	800907c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b07      	ldr	r3, [pc, #28]	@ (8009088 <prvResetNextTaskUnblockTime+0x38>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a04      	ldr	r2, [pc, #16]	@ (800908c <prvResetNextTaskUnblockTime+0x3c>)
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	24004d10 	.word	0x24004d10
 800908c:	24004d78 	.word	0x24004d78

08009090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009096:	4b0b      	ldr	r3, [pc, #44]	@ (80090c4 <xTaskGetSchedulerState+0x34>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800909e:	2301      	movs	r3, #1
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	e008      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a4:	4b08      	ldr	r3, [pc, #32]	@ (80090c8 <xTaskGetSchedulerState+0x38>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090ac:	2302      	movs	r3, #2
 80090ae:	607b      	str	r3, [r7, #4]
 80090b0:	e001      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090b6:	687b      	ldr	r3, [r7, #4]
	}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	24004d64 	.word	0x24004d64
 80090c8:	24004d80 	.word	0x24004d80

080090cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d058      	beq.n	8009194 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090e2:	4b2f      	ldr	r3, [pc, #188]	@ (80091a0 <xTaskPriorityDisinherit+0xd4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d00b      	beq.n	8009104 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10b      	bne.n	8009124 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	60bb      	str	r3, [r7, #8]
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	e7fd      	b.n	8009120 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009128:	1e5a      	subs	r2, r3, #1
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009136:	429a      	cmp	r2, r3
 8009138:	d02c      	beq.n	8009194 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913e:	2b00      	cmp	r3, #0
 8009140:	d128      	bne.n	8009194 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	3304      	adds	r3, #4
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f9d0 	bl	80074ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009164:	4b0f      	ldr	r3, [pc, #60]	@ (80091a4 <xTaskPriorityDisinherit+0xd8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <xTaskPriorityDisinherit+0xa8>
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	4a0c      	ldr	r2, [pc, #48]	@ (80091a4 <xTaskPriorityDisinherit+0xd8>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a09      	ldr	r2, [pc, #36]	@ (80091a8 <xTaskPriorityDisinherit+0xdc>)
 8009182:	441a      	add	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7fe f951 	bl	8007432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009194:	697b      	ldr	r3, [r7, #20]
	}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	24004884 	.word	0x24004884
 80091a4:	24004d60 	.word	0x24004d60
 80091a8:	24004888 	.word	0x24004888

080091ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091b6:	4b21      	ldr	r3, [pc, #132]	@ (800923c <prvAddCurrentTaskToDelayedList+0x90>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091bc:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe f992 	bl	80074ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d10a      	bne.n	80091e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3304      	adds	r3, #4
 80091dc:	4619      	mov	r1, r3
 80091de:	4819      	ldr	r0, [pc, #100]	@ (8009244 <prvAddCurrentTaskToDelayedList+0x98>)
 80091e0:	f7fe f927 	bl	8007432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091e4:	e026      	b.n	8009234 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4413      	add	r3, r2
 80091ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091ee:	4b14      	ldr	r3, [pc, #80]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d209      	bcs.n	8009212 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091fe:	4b12      	ldr	r3, [pc, #72]	@ (8009248 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b0f      	ldr	r3, [pc, #60]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe f935 	bl	800747a <vListInsert>
}
 8009210:	e010      	b.n	8009234 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009212:	4b0e      	ldr	r3, [pc, #56]	@ (800924c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b0a      	ldr	r3, [pc, #40]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe f92b 	bl	800747a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009224:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	429a      	cmp	r2, r3
 800922c:	d202      	bcs.n	8009234 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800922e:	4a08      	ldr	r2, [pc, #32]	@ (8009250 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	6013      	str	r3, [r2, #0]
}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	24004d5c 	.word	0x24004d5c
 8009240:	24004884 	.word	0x24004884
 8009244:	24004d44 	.word	0x24004d44
 8009248:	24004d14 	.word	0x24004d14
 800924c:	24004d10 	.word	0x24004d10
 8009250:	24004d78 	.word	0x24004d78

08009254 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	@ 0x28
 8009258:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800925a:	2300      	movs	r3, #0
 800925c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800925e:	f000 fb13 	bl	8009888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009262:	4b1d      	ldr	r3, [pc, #116]	@ (80092d8 <xTimerCreateTimerTask+0x84>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d021      	beq.n	80092ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009272:	1d3a      	adds	r2, r7, #4
 8009274:	f107 0108 	add.w	r1, r7, #8
 8009278:	f107 030c 	add.w	r3, r7, #12
 800927c:	4618      	mov	r0, r3
 800927e:	f7fd fea3 	bl	8006fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	9202      	str	r2, [sp, #8]
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	2302      	movs	r3, #2
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	2300      	movs	r3, #0
 8009292:	460a      	mov	r2, r1
 8009294:	4911      	ldr	r1, [pc, #68]	@ (80092dc <xTimerCreateTimerTask+0x88>)
 8009296:	4812      	ldr	r0, [pc, #72]	@ (80092e0 <xTimerCreateTimerTask+0x8c>)
 8009298:	f7ff f8a2 	bl	80083e0 <xTaskCreateStatic>
 800929c:	4603      	mov	r3, r0
 800929e:	4a11      	ldr	r2, [pc, #68]	@ (80092e4 <xTimerCreateTimerTask+0x90>)
 80092a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <xTimerCreateTimerTask+0x90>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092aa:	2301      	movs	r3, #1
 80092ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	613b      	str	r3, [r7, #16]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092cc:	697b      	ldr	r3, [r7, #20]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	24004db4 	.word	0x24004db4
 80092dc:	0800aa7c 	.word	0x0800aa7c
 80092e0:	08009421 	.word	0x08009421
 80092e4:	24004db8 	.word	0x24004db8

080092e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	@ 0x28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10b      	bne.n	8009318 <xTimerGenericCommand+0x30>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	623b      	str	r3, [r7, #32]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009318:	4b19      	ldr	r3, [pc, #100]	@ (8009380 <xTimerGenericCommand+0x98>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d02a      	beq.n	8009376 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b05      	cmp	r3, #5
 8009330:	dc18      	bgt.n	8009364 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009332:	f7ff fead 	bl	8009090 <xTaskGetSchedulerState>
 8009336:	4603      	mov	r3, r0
 8009338:	2b02      	cmp	r3, #2
 800933a:	d109      	bne.n	8009350 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800933c:	4b10      	ldr	r3, [pc, #64]	@ (8009380 <xTimerGenericCommand+0x98>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f107 0110 	add.w	r1, r7, #16
 8009344:	2300      	movs	r3, #0
 8009346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009348:	f7fe fc5a 	bl	8007c00 <xQueueGenericSend>
 800934c:	6278      	str	r0, [r7, #36]	@ 0x24
 800934e:	e012      	b.n	8009376 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009350:	4b0b      	ldr	r3, [pc, #44]	@ (8009380 <xTimerGenericCommand+0x98>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f107 0110 	add.w	r1, r7, #16
 8009358:	2300      	movs	r3, #0
 800935a:	2200      	movs	r2, #0
 800935c:	f7fe fc50 	bl	8007c00 <xQueueGenericSend>
 8009360:	6278      	str	r0, [r7, #36]	@ 0x24
 8009362:	e008      	b.n	8009376 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009364:	4b06      	ldr	r3, [pc, #24]	@ (8009380 <xTimerGenericCommand+0x98>)
 8009366:	6818      	ldr	r0, [r3, #0]
 8009368:	f107 0110 	add.w	r1, r7, #16
 800936c:	2300      	movs	r3, #0
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	f7fe fd48 	bl	8007e04 <xQueueGenericSendFromISR>
 8009374:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009378:	4618      	mov	r0, r3
 800937a:	3728      	adds	r7, #40	@ 0x28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	24004db4 	.word	0x24004db4

08009384 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938e:	4b23      	ldr	r3, [pc, #140]	@ (800941c <prvProcessExpiredTimer+0x98>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f8a5 	bl	80074ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d023      	beq.n	80093f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	699a      	ldr	r2, [r3, #24]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	18d1      	adds	r1, r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	f000 f8d5 	bl	800956c <prvInsertTimerInActiveList>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d020      	beq.n	800940a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093c8:	2300      	movs	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	2300      	movs	r3, #0
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	2100      	movs	r1, #0
 80093d2:	6978      	ldr	r0, [r7, #20]
 80093d4:	f7ff ff88 	bl	80092e8 <xTimerGenericCommand>
 80093d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d114      	bne.n	800940a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	6978      	ldr	r0, [r7, #20]
 8009410:	4798      	blx	r3
}
 8009412:	bf00      	nop
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	24004dac 	.word	0x24004dac

08009420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009428:	f107 0308 	add.w	r3, r7, #8
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f859 	bl	80094e4 <prvGetNextExpireTime>
 8009432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4619      	mov	r1, r3
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f805 	bl	8009448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800943e:	f000 f8d7 	bl	80095f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009442:	bf00      	nop
 8009444:	e7f0      	b.n	8009428 <prvTimerTask+0x8>
	...

08009448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009452:	f7ff fa29 	bl	80088a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f866 	bl	800952c <prvSampleTimeNow>
 8009460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d130      	bne.n	80094ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <prvProcessTimerOrBlockTask+0x3c>
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	429a      	cmp	r2, r3
 8009474:	d806      	bhi.n	8009484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009476:	f7ff fa25 	bl	80088c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff81 	bl	8009384 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009482:	e024      	b.n	80094ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800948a:	4b13      	ldr	r3, [pc, #76]	@ (80094d8 <prvProcessTimerOrBlockTask+0x90>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <prvProcessTimerOrBlockTask+0x50>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <prvProcessTimerOrBlockTask+0x52>
 8009498:	2300      	movs	r3, #0
 800949a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800949c:	4b0f      	ldr	r3, [pc, #60]	@ (80094dc <prvProcessTimerOrBlockTask+0x94>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7fe ff65 	bl	8008378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094ae:	f7ff fa09 	bl	80088c4 <xTaskResumeAll>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <prvProcessTimerOrBlockTask+0x98>)
 80094ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	f3bf 8f6f 	isb	sy
}
 80094c8:	e001      	b.n	80094ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094ca:	f7ff f9fb 	bl	80088c4 <xTaskResumeAll>
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	24004db0 	.word	0x24004db0
 80094dc:	24004db4 	.word	0x24004db4
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <prvGetNextExpireTime+0x44>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <prvGetNextExpireTime+0x16>
 80094f6:	2201      	movs	r2, #1
 80094f8:	e000      	b.n	80094fc <prvGetNextExpireTime+0x18>
 80094fa:	2200      	movs	r2, #0
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d105      	bne.n	8009514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009508:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <prvGetNextExpireTime+0x44>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e001      	b.n	8009518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009518:	68fb      	ldr	r3, [r7, #12]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	24004dac 	.word	0x24004dac

0800952c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009534:	f7ff fa64 	bl	8008a00 <xTaskGetTickCount>
 8009538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800953a:	4b0b      	ldr	r3, [pc, #44]	@ (8009568 <prvSampleTimeNow+0x3c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	429a      	cmp	r2, r3
 8009542:	d205      	bcs.n	8009550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009544:	f000 f93a 	bl	80097bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e002      	b.n	8009556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009556:	4a04      	ldr	r2, [pc, #16]	@ (8009568 <prvSampleTimeNow+0x3c>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800955c:	68fb      	ldr	r3, [r7, #12]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	24004dbc 	.word	0x24004dbc

0800956c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d812      	bhi.n	80095b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e01b      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095a6:	4b10      	ldr	r3, [pc, #64]	@ (80095e8 <prvInsertTimerInActiveList+0x7c>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fd ff62 	bl	800747a <vListInsert>
 80095b6:	e012      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d206      	bcs.n	80095ce <prvInsertTimerInActiveList+0x62>
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d302      	bcc.n	80095ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095c8:	2301      	movs	r3, #1
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e007      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ce:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <prvInsertTimerInActiveList+0x80>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7fd ff4e 	bl	800747a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095de:	697b      	ldr	r3, [r7, #20]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	24004db0 	.word	0x24004db0
 80095ec:	24004dac 	.word	0x24004dac

080095f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	@ 0x38
 80095f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095f6:	e0ce      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da19      	bge.n	8009632 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	3304      	adds	r3, #4
 8009602:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	61fb      	str	r3, [r7, #28]
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	e7fd      	b.n	800961e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009628:	6850      	ldr	r0, [r2, #4]
 800962a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962c:	6892      	ldr	r2, [r2, #8]
 800962e:	4611      	mov	r1, r2
 8009630:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f2c0 80ae 	blt.w	8009796 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	3304      	adds	r3, #4
 800964a:	4618      	mov	r0, r3
 800964c:	f7fd ff4e 	bl	80074ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009650:	463b      	mov	r3, r7
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff ff6a 	bl	800952c <prvSampleTimeNow>
 8009658:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b09      	cmp	r3, #9
 800965e:	f200 8097 	bhi.w	8009790 <prvProcessReceivedCommands+0x1a0>
 8009662:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <prvProcessReceivedCommands+0x78>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009691 	.word	0x08009691
 800966c:	08009691 	.word	0x08009691
 8009670:	08009691 	.word	0x08009691
 8009674:	08009707 	.word	0x08009707
 8009678:	0800971b 	.word	0x0800971b
 800967c:	08009767 	.word	0x08009767
 8009680:	08009691 	.word	0x08009691
 8009684:	08009691 	.word	0x08009691
 8009688:	08009707 	.word	0x08009707
 800968c:	0800971b 	.word	0x0800971b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	18d1      	adds	r1, r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096b0:	f7ff ff5c 	bl	800956c <prvInsertTimerInActiveList>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d06c      	beq.n	8009794 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d061      	beq.n	8009794 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	441a      	add	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	2300      	movs	r3, #0
 80096de:	2100      	movs	r1, #0
 80096e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e2:	f7ff fe01 	bl	80092e8 <xTimerGenericCommand>
 80096e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d152      	bne.n	8009794 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	61bb      	str	r3, [r7, #24]
}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	e7fd      	b.n	8009702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800970c:	f023 0301 	bic.w	r3, r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009718:	e03d      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	b2da      	uxtb	r2, r3
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009730:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10b      	bne.n	8009752 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	617b      	str	r3, [r7, #20]
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	18d1      	adds	r1, r2, r3
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800975e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009760:	f7ff ff04 	bl	800956c <prvInsertTimerInActiveList>
					break;
 8009764:	e017      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009776:	f7fd fd0f 	bl	8007198 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800977a:	e00c      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800978e:	e002      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009790:	bf00      	nop
 8009792:	e000      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
					break;
 8009794:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009796:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <prvProcessReceivedCommands+0x1c8>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1d39      	adds	r1, r7, #4
 800979c:	2200      	movs	r2, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fbce 	bl	8007f40 <xQueueReceive>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f47f af26 	bne.w	80095f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	3730      	adds	r7, #48	@ 0x30
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	24004db4 	.word	0x24004db4

080097bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097c2:	e049      	b.n	8009858 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3304      	adds	r3, #4
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fd fe85 	bl	80074ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d02f      	beq.n	8009858 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4413      	add	r3, r2
 8009800:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	429a      	cmp	r2, r3
 8009808:	d90e      	bls.n	8009828 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009816:	4b1a      	ldr	r3, [pc, #104]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3304      	adds	r3, #4
 800981e:	4619      	mov	r1, r3
 8009820:	4610      	mov	r0, r2
 8009822:	f7fd fe2a 	bl	800747a <vListInsert>
 8009826:	e017      	b.n	8009858 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009828:	2300      	movs	r3, #0
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	2300      	movs	r3, #0
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	2100      	movs	r1, #0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fd58 	bl	80092e8 <xTimerGenericCommand>
 8009838:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	603b      	str	r3, [r7, #0]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009858:	4b09      	ldr	r3, [pc, #36]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1b0      	bne.n	80097c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009862:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009868:	4b06      	ldr	r3, [pc, #24]	@ (8009884 <prvSwitchTimerLists+0xc8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a04      	ldr	r2, [pc, #16]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 800986e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009870:	4a04      	ldr	r2, [pc, #16]	@ (8009884 <prvSwitchTimerLists+0xc8>)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	6013      	str	r3, [r2, #0]
}
 8009876:	bf00      	nop
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	24004dac 	.word	0x24004dac
 8009884:	24004db0 	.word	0x24004db0

08009888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800988e:	f7fd ff8b 	bl	80077a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009892:	4b15      	ldr	r3, [pc, #84]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d120      	bne.n	80098dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800989a:	4814      	ldr	r0, [pc, #80]	@ (80098ec <prvCheckForValidListAndQueue+0x64>)
 800989c:	f7fd fd9c 	bl	80073d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098a0:	4813      	ldr	r0, [pc, #76]	@ (80098f0 <prvCheckForValidListAndQueue+0x68>)
 80098a2:	f7fd fd99 	bl	80073d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098a6:	4b13      	ldr	r3, [pc, #76]	@ (80098f4 <prvCheckForValidListAndQueue+0x6c>)
 80098a8:	4a10      	ldr	r2, [pc, #64]	@ (80098ec <prvCheckForValidListAndQueue+0x64>)
 80098aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098ac:	4b12      	ldr	r3, [pc, #72]	@ (80098f8 <prvCheckForValidListAndQueue+0x70>)
 80098ae:	4a10      	ldr	r2, [pc, #64]	@ (80098f0 <prvCheckForValidListAndQueue+0x68>)
 80098b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <prvCheckForValidListAndQueue+0x74>)
 80098b8:	4a11      	ldr	r2, [pc, #68]	@ (8009900 <prvCheckForValidListAndQueue+0x78>)
 80098ba:	2110      	movs	r1, #16
 80098bc:	200a      	movs	r0, #10
 80098be:	f7fe f8ff 	bl	8007ac0 <xQueueGenericCreateStatic>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4a08      	ldr	r2, [pc, #32]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098c8:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	490b      	ldr	r1, [pc, #44]	@ (8009904 <prvCheckForValidListAndQueue+0x7c>)
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fd24 	bl	8008324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098dc:	f7fd ff96 	bl	800780c <vPortExitCritical>
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	24004db4 	.word	0x24004db4
 80098ec:	24004d84 	.word	0x24004d84
 80098f0:	24004d98 	.word	0x24004d98
 80098f4:	24004dac 	.word	0x24004dac
 80098f8:	24004db0 	.word	0x24004db0
 80098fc:	24004e60 	.word	0x24004e60
 8009900:	24004dc0 	.word	0x24004dc0
 8009904:	0800aa84 	.word	0x0800aa84

08009908 <std>:
 8009908:	2300      	movs	r3, #0
 800990a:	b510      	push	{r4, lr}
 800990c:	4604      	mov	r4, r0
 800990e:	e9c0 3300 	strd	r3, r3, [r0]
 8009912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009916:	6083      	str	r3, [r0, #8]
 8009918:	8181      	strh	r1, [r0, #12]
 800991a:	6643      	str	r3, [r0, #100]	@ 0x64
 800991c:	81c2      	strh	r2, [r0, #14]
 800991e:	6183      	str	r3, [r0, #24]
 8009920:	4619      	mov	r1, r3
 8009922:	2208      	movs	r2, #8
 8009924:	305c      	adds	r0, #92	@ 0x5c
 8009926:	f000 fa01 	bl	8009d2c <memset>
 800992a:	4b0d      	ldr	r3, [pc, #52]	@ (8009960 <std+0x58>)
 800992c:	6263      	str	r3, [r4, #36]	@ 0x24
 800992e:	4b0d      	ldr	r3, [pc, #52]	@ (8009964 <std+0x5c>)
 8009930:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009932:	4b0d      	ldr	r3, [pc, #52]	@ (8009968 <std+0x60>)
 8009934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009936:	4b0d      	ldr	r3, [pc, #52]	@ (800996c <std+0x64>)
 8009938:	6323      	str	r3, [r4, #48]	@ 0x30
 800993a:	4b0d      	ldr	r3, [pc, #52]	@ (8009970 <std+0x68>)
 800993c:	6224      	str	r4, [r4, #32]
 800993e:	429c      	cmp	r4, r3
 8009940:	d006      	beq.n	8009950 <std+0x48>
 8009942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009946:	4294      	cmp	r4, r2
 8009948:	d002      	beq.n	8009950 <std+0x48>
 800994a:	33d0      	adds	r3, #208	@ 0xd0
 800994c:	429c      	cmp	r4, r3
 800994e:	d105      	bne.n	800995c <std+0x54>
 8009950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009958:	f000 bab6 	b.w	8009ec8 <__retarget_lock_init_recursive>
 800995c:	bd10      	pop	{r4, pc}
 800995e:	bf00      	nop
 8009960:	08009b7d 	.word	0x08009b7d
 8009964:	08009b9f 	.word	0x08009b9f
 8009968:	08009bd7 	.word	0x08009bd7
 800996c:	08009bfb 	.word	0x08009bfb
 8009970:	24004eb0 	.word	0x24004eb0

08009974 <stdio_exit_handler>:
 8009974:	4a02      	ldr	r2, [pc, #8]	@ (8009980 <stdio_exit_handler+0xc>)
 8009976:	4903      	ldr	r1, [pc, #12]	@ (8009984 <stdio_exit_handler+0x10>)
 8009978:	4803      	ldr	r0, [pc, #12]	@ (8009988 <stdio_exit_handler+0x14>)
 800997a:	f000 b869 	b.w	8009a50 <_fwalk_sglue>
 800997e:	bf00      	nop
 8009980:	24000014 	.word	0x24000014
 8009984:	0800a785 	.word	0x0800a785
 8009988:	24000024 	.word	0x24000024

0800998c <cleanup_stdio>:
 800998c:	6841      	ldr	r1, [r0, #4]
 800998e:	4b0c      	ldr	r3, [pc, #48]	@ (80099c0 <cleanup_stdio+0x34>)
 8009990:	4299      	cmp	r1, r3
 8009992:	b510      	push	{r4, lr}
 8009994:	4604      	mov	r4, r0
 8009996:	d001      	beq.n	800999c <cleanup_stdio+0x10>
 8009998:	f000 fef4 	bl	800a784 <_fflush_r>
 800999c:	68a1      	ldr	r1, [r4, #8]
 800999e:	4b09      	ldr	r3, [pc, #36]	@ (80099c4 <cleanup_stdio+0x38>)
 80099a0:	4299      	cmp	r1, r3
 80099a2:	d002      	beq.n	80099aa <cleanup_stdio+0x1e>
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 feed 	bl	800a784 <_fflush_r>
 80099aa:	68e1      	ldr	r1, [r4, #12]
 80099ac:	4b06      	ldr	r3, [pc, #24]	@ (80099c8 <cleanup_stdio+0x3c>)
 80099ae:	4299      	cmp	r1, r3
 80099b0:	d004      	beq.n	80099bc <cleanup_stdio+0x30>
 80099b2:	4620      	mov	r0, r4
 80099b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b8:	f000 bee4 	b.w	800a784 <_fflush_r>
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	bf00      	nop
 80099c0:	24004eb0 	.word	0x24004eb0
 80099c4:	24004f18 	.word	0x24004f18
 80099c8:	24004f80 	.word	0x24004f80

080099cc <global_stdio_init.part.0>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4b0b      	ldr	r3, [pc, #44]	@ (80099fc <global_stdio_init.part.0+0x30>)
 80099d0:	4c0b      	ldr	r4, [pc, #44]	@ (8009a00 <global_stdio_init.part.0+0x34>)
 80099d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009a04 <global_stdio_init.part.0+0x38>)
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	4620      	mov	r0, r4
 80099d8:	2200      	movs	r2, #0
 80099da:	2104      	movs	r1, #4
 80099dc:	f7ff ff94 	bl	8009908 <std>
 80099e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099e4:	2201      	movs	r2, #1
 80099e6:	2109      	movs	r1, #9
 80099e8:	f7ff ff8e 	bl	8009908 <std>
 80099ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099f0:	2202      	movs	r2, #2
 80099f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f6:	2112      	movs	r1, #18
 80099f8:	f7ff bf86 	b.w	8009908 <std>
 80099fc:	24004fe8 	.word	0x24004fe8
 8009a00:	24004eb0 	.word	0x24004eb0
 8009a04:	08009975 	.word	0x08009975

08009a08 <__sfp_lock_acquire>:
 8009a08:	4801      	ldr	r0, [pc, #4]	@ (8009a10 <__sfp_lock_acquire+0x8>)
 8009a0a:	f000 ba5e 	b.w	8009eca <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	24004ff1 	.word	0x24004ff1

08009a14 <__sfp_lock_release>:
 8009a14:	4801      	ldr	r0, [pc, #4]	@ (8009a1c <__sfp_lock_release+0x8>)
 8009a16:	f000 ba59 	b.w	8009ecc <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	24004ff1 	.word	0x24004ff1

08009a20 <__sinit>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	f7ff fff0 	bl	8009a08 <__sfp_lock_acquire>
 8009a28:	6a23      	ldr	r3, [r4, #32]
 8009a2a:	b11b      	cbz	r3, 8009a34 <__sinit+0x14>
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f7ff bff0 	b.w	8009a14 <__sfp_lock_release>
 8009a34:	4b04      	ldr	r3, [pc, #16]	@ (8009a48 <__sinit+0x28>)
 8009a36:	6223      	str	r3, [r4, #32]
 8009a38:	4b04      	ldr	r3, [pc, #16]	@ (8009a4c <__sinit+0x2c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f5      	bne.n	8009a2c <__sinit+0xc>
 8009a40:	f7ff ffc4 	bl	80099cc <global_stdio_init.part.0>
 8009a44:	e7f2      	b.n	8009a2c <__sinit+0xc>
 8009a46:	bf00      	nop
 8009a48:	0800998d 	.word	0x0800998d
 8009a4c:	24004fe8 	.word	0x24004fe8

08009a50 <_fwalk_sglue>:
 8009a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4607      	mov	r7, r0
 8009a56:	4688      	mov	r8, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	2600      	movs	r6, #0
 8009a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a60:	f1b9 0901 	subs.w	r9, r9, #1
 8009a64:	d505      	bpl.n	8009a72 <_fwalk_sglue+0x22>
 8009a66:	6824      	ldr	r4, [r4, #0]
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	d1f7      	bne.n	8009a5c <_fwalk_sglue+0xc>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a72:	89ab      	ldrh	r3, [r5, #12]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d907      	bls.n	8009a88 <_fwalk_sglue+0x38>
 8009a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	d003      	beq.n	8009a88 <_fwalk_sglue+0x38>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4638      	mov	r0, r7
 8009a84:	47c0      	blx	r8
 8009a86:	4306      	orrs	r6, r0
 8009a88:	3568      	adds	r5, #104	@ 0x68
 8009a8a:	e7e9      	b.n	8009a60 <_fwalk_sglue+0x10>

08009a8c <iprintf>:
 8009a8c:	b40f      	push	{r0, r1, r2, r3}
 8009a8e:	b507      	push	{r0, r1, r2, lr}
 8009a90:	4906      	ldr	r1, [pc, #24]	@ (8009aac <iprintf+0x20>)
 8009a92:	ab04      	add	r3, sp, #16
 8009a94:	6808      	ldr	r0, [r1, #0]
 8009a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9a:	6881      	ldr	r1, [r0, #8]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	f000 fb47 	bl	800a130 <_vfiprintf_r>
 8009aa2:	b003      	add	sp, #12
 8009aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aa8:	b004      	add	sp, #16
 8009aaa:	4770      	bx	lr
 8009aac:	24000020 	.word	0x24000020

08009ab0 <putchar>:
 8009ab0:	4b02      	ldr	r3, [pc, #8]	@ (8009abc <putchar+0xc>)
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	6882      	ldr	r2, [r0, #8]
 8009ab8:	f000 beee 	b.w	800a898 <_putc_r>
 8009abc:	24000020 	.word	0x24000020

08009ac0 <_puts_r>:
 8009ac0:	6a03      	ldr	r3, [r0, #32]
 8009ac2:	b570      	push	{r4, r5, r6, lr}
 8009ac4:	6884      	ldr	r4, [r0, #8]
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	460e      	mov	r6, r1
 8009aca:	b90b      	cbnz	r3, 8009ad0 <_puts_r+0x10>
 8009acc:	f7ff ffa8 	bl	8009a20 <__sinit>
 8009ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ad2:	07db      	lsls	r3, r3, #31
 8009ad4:	d405      	bmi.n	8009ae2 <_puts_r+0x22>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	0598      	lsls	r0, r3, #22
 8009ada:	d402      	bmi.n	8009ae2 <_puts_r+0x22>
 8009adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ade:	f000 f9f4 	bl	8009eca <__retarget_lock_acquire_recursive>
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	0719      	lsls	r1, r3, #28
 8009ae6:	d502      	bpl.n	8009aee <_puts_r+0x2e>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d135      	bne.n	8009b5a <_puts_r+0x9a>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4628      	mov	r0, r5
 8009af2:	f000 f8c5 	bl	8009c80 <__swsetup_r>
 8009af6:	b380      	cbz	r0, 8009b5a <_puts_r+0x9a>
 8009af8:	f04f 35ff 	mov.w	r5, #4294967295
 8009afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009afe:	07da      	lsls	r2, r3, #31
 8009b00:	d405      	bmi.n	8009b0e <_puts_r+0x4e>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	059b      	lsls	r3, r3, #22
 8009b06:	d402      	bmi.n	8009b0e <_puts_r+0x4e>
 8009b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b0a:	f000 f9df 	bl	8009ecc <__retarget_lock_release_recursive>
 8009b0e:	4628      	mov	r0, r5
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da04      	bge.n	8009b20 <_puts_r+0x60>
 8009b16:	69a2      	ldr	r2, [r4, #24]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	dc17      	bgt.n	8009b4c <_puts_r+0x8c>
 8009b1c:	290a      	cmp	r1, #10
 8009b1e:	d015      	beq.n	8009b4c <_puts_r+0x8c>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	7019      	strb	r1, [r3, #0]
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	60a3      	str	r3, [r4, #8]
 8009b32:	2900      	cmp	r1, #0
 8009b34:	d1ed      	bne.n	8009b12 <_puts_r+0x52>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da11      	bge.n	8009b5e <_puts_r+0x9e>
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	210a      	movs	r1, #10
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f000 f85f 	bl	8009c02 <__swbuf_r>
 8009b44:	3001      	adds	r0, #1
 8009b46:	d0d7      	beq.n	8009af8 <_puts_r+0x38>
 8009b48:	250a      	movs	r5, #10
 8009b4a:	e7d7      	b.n	8009afc <_puts_r+0x3c>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f000 f857 	bl	8009c02 <__swbuf_r>
 8009b54:	3001      	adds	r0, #1
 8009b56:	d1e7      	bne.n	8009b28 <_puts_r+0x68>
 8009b58:	e7ce      	b.n	8009af8 <_puts_r+0x38>
 8009b5a:	3e01      	subs	r6, #1
 8009b5c:	e7e4      	b.n	8009b28 <_puts_r+0x68>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	6022      	str	r2, [r4, #0]
 8009b64:	220a      	movs	r2, #10
 8009b66:	701a      	strb	r2, [r3, #0]
 8009b68:	e7ee      	b.n	8009b48 <_puts_r+0x88>
	...

08009b6c <puts>:
 8009b6c:	4b02      	ldr	r3, [pc, #8]	@ (8009b78 <puts+0xc>)
 8009b6e:	4601      	mov	r1, r0
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	f7ff bfa5 	b.w	8009ac0 <_puts_r>
 8009b76:	bf00      	nop
 8009b78:	24000020 	.word	0x24000020

08009b7c <__sread>:
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	460c      	mov	r4, r1
 8009b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b84:	f000 f952 	bl	8009e2c <_read_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	bfab      	itete	ge
 8009b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b90:	181b      	addge	r3, r3, r0
 8009b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b96:	bfac      	ite	ge
 8009b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b9a:	81a3      	strhlt	r3, [r4, #12]
 8009b9c:	bd10      	pop	{r4, pc}

08009b9e <__swrite>:
 8009b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba2:	461f      	mov	r7, r3
 8009ba4:	898b      	ldrh	r3, [r1, #12]
 8009ba6:	05db      	lsls	r3, r3, #23
 8009ba8:	4605      	mov	r5, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4616      	mov	r6, r2
 8009bae:	d505      	bpl.n	8009bbc <__swrite+0x1e>
 8009bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f000 f926 	bl	8009e08 <_lseek_r>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	4632      	mov	r2, r6
 8009bca:	463b      	mov	r3, r7
 8009bcc:	4628      	mov	r0, r5
 8009bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd2:	f000 b93d 	b.w	8009e50 <_write_r>

08009bd6 <__sseek>:
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	460c      	mov	r4, r1
 8009bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bde:	f000 f913 	bl	8009e08 <_lseek_r>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	bf15      	itete	ne
 8009be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bf2:	81a3      	strheq	r3, [r4, #12]
 8009bf4:	bf18      	it	ne
 8009bf6:	81a3      	strhne	r3, [r4, #12]
 8009bf8:	bd10      	pop	{r4, pc}

08009bfa <__sclose>:
 8009bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfe:	f000 b89d 	b.w	8009d3c <_close_r>

08009c02 <__swbuf_r>:
 8009c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c04:	460e      	mov	r6, r1
 8009c06:	4614      	mov	r4, r2
 8009c08:	4605      	mov	r5, r0
 8009c0a:	b118      	cbz	r0, 8009c14 <__swbuf_r+0x12>
 8009c0c:	6a03      	ldr	r3, [r0, #32]
 8009c0e:	b90b      	cbnz	r3, 8009c14 <__swbuf_r+0x12>
 8009c10:	f7ff ff06 	bl	8009a20 <__sinit>
 8009c14:	69a3      	ldr	r3, [r4, #24]
 8009c16:	60a3      	str	r3, [r4, #8]
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	071a      	lsls	r2, r3, #28
 8009c1c:	d501      	bpl.n	8009c22 <__swbuf_r+0x20>
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	b943      	cbnz	r3, 8009c34 <__swbuf_r+0x32>
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 f82b 	bl	8009c80 <__swsetup_r>
 8009c2a:	b118      	cbz	r0, 8009c34 <__swbuf_r+0x32>
 8009c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c30:	4638      	mov	r0, r7
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	6922      	ldr	r2, [r4, #16]
 8009c38:	1a98      	subs	r0, r3, r2
 8009c3a:	6963      	ldr	r3, [r4, #20]
 8009c3c:	b2f6      	uxtb	r6, r6
 8009c3e:	4283      	cmp	r3, r0
 8009c40:	4637      	mov	r7, r6
 8009c42:	dc05      	bgt.n	8009c50 <__swbuf_r+0x4e>
 8009c44:	4621      	mov	r1, r4
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 fd9c 	bl	800a784 <_fflush_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d1ed      	bne.n	8009c2c <__swbuf_r+0x2a>
 8009c50:	68a3      	ldr	r3, [r4, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	701e      	strb	r6, [r3, #0]
 8009c5e:	6962      	ldr	r2, [r4, #20]
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d004      	beq.n	8009c70 <__swbuf_r+0x6e>
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	07db      	lsls	r3, r3, #31
 8009c6a:	d5e1      	bpl.n	8009c30 <__swbuf_r+0x2e>
 8009c6c:	2e0a      	cmp	r6, #10
 8009c6e:	d1df      	bne.n	8009c30 <__swbuf_r+0x2e>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 fd86 	bl	800a784 <_fflush_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d0d9      	beq.n	8009c30 <__swbuf_r+0x2e>
 8009c7c:	e7d6      	b.n	8009c2c <__swbuf_r+0x2a>
	...

08009c80 <__swsetup_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4b29      	ldr	r3, [pc, #164]	@ (8009d28 <__swsetup_r+0xa8>)
 8009c84:	4605      	mov	r5, r0
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	460c      	mov	r4, r1
 8009c8a:	b118      	cbz	r0, 8009c94 <__swsetup_r+0x14>
 8009c8c:	6a03      	ldr	r3, [r0, #32]
 8009c8e:	b90b      	cbnz	r3, 8009c94 <__swsetup_r+0x14>
 8009c90:	f7ff fec6 	bl	8009a20 <__sinit>
 8009c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c98:	0719      	lsls	r1, r3, #28
 8009c9a:	d422      	bmi.n	8009ce2 <__swsetup_r+0x62>
 8009c9c:	06da      	lsls	r2, r3, #27
 8009c9e:	d407      	bmi.n	8009cb0 <__swsetup_r+0x30>
 8009ca0:	2209      	movs	r2, #9
 8009ca2:	602a      	str	r2, [r5, #0]
 8009ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cae:	e033      	b.n	8009d18 <__swsetup_r+0x98>
 8009cb0:	0758      	lsls	r0, r3, #29
 8009cb2:	d512      	bpl.n	8009cda <__swsetup_r+0x5a>
 8009cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cb6:	b141      	cbz	r1, 8009cca <__swsetup_r+0x4a>
 8009cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <__swsetup_r+0x46>
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f000 f913 	bl	8009eec <_free_r>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	6923      	ldr	r3, [r4, #16]
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f043 0308 	orr.w	r3, r3, #8
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	b94b      	cbnz	r3, 8009cfa <__swsetup_r+0x7a>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf0:	d003      	beq.n	8009cfa <__swsetup_r+0x7a>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 fd93 	bl	800a820 <__smakebuf_r>
 8009cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cfe:	f013 0201 	ands.w	r2, r3, #1
 8009d02:	d00a      	beq.n	8009d1a <__swsetup_r+0x9a>
 8009d04:	2200      	movs	r2, #0
 8009d06:	60a2      	str	r2, [r4, #8]
 8009d08:	6962      	ldr	r2, [r4, #20]
 8009d0a:	4252      	negs	r2, r2
 8009d0c:	61a2      	str	r2, [r4, #24]
 8009d0e:	6922      	ldr	r2, [r4, #16]
 8009d10:	b942      	cbnz	r2, 8009d24 <__swsetup_r+0xa4>
 8009d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d16:	d1c5      	bne.n	8009ca4 <__swsetup_r+0x24>
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	0799      	lsls	r1, r3, #30
 8009d1c:	bf58      	it	pl
 8009d1e:	6962      	ldrpl	r2, [r4, #20]
 8009d20:	60a2      	str	r2, [r4, #8]
 8009d22:	e7f4      	b.n	8009d0e <__swsetup_r+0x8e>
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7f7      	b.n	8009d18 <__swsetup_r+0x98>
 8009d28:	24000020 	.word	0x24000020

08009d2c <memset>:
 8009d2c:	4402      	add	r2, r0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d100      	bne.n	8009d36 <memset+0xa>
 8009d34:	4770      	bx	lr
 8009d36:	f803 1b01 	strb.w	r1, [r3], #1
 8009d3a:	e7f9      	b.n	8009d30 <memset+0x4>

08009d3c <_close_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d06      	ldr	r5, [pc, #24]	@ (8009d58 <_close_r+0x1c>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	602b      	str	r3, [r5, #0]
 8009d48:	f7f7 fbe2 	bl	8001510 <_close>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_close_r+0x1a>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_close_r+0x1a>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	24004fec 	.word	0x24004fec

08009d5c <_reclaim_reent>:
 8009d5c:	4b29      	ldr	r3, [pc, #164]	@ (8009e04 <_reclaim_reent+0xa8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4283      	cmp	r3, r0
 8009d62:	b570      	push	{r4, r5, r6, lr}
 8009d64:	4604      	mov	r4, r0
 8009d66:	d04b      	beq.n	8009e00 <_reclaim_reent+0xa4>
 8009d68:	69c3      	ldr	r3, [r0, #28]
 8009d6a:	b1ab      	cbz	r3, 8009d98 <_reclaim_reent+0x3c>
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	b16b      	cbz	r3, 8009d8c <_reclaim_reent+0x30>
 8009d70:	2500      	movs	r5, #0
 8009d72:	69e3      	ldr	r3, [r4, #28]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	5959      	ldr	r1, [r3, r5]
 8009d78:	2900      	cmp	r1, #0
 8009d7a:	d13b      	bne.n	8009df4 <_reclaim_reent+0x98>
 8009d7c:	3504      	adds	r5, #4
 8009d7e:	2d80      	cmp	r5, #128	@ 0x80
 8009d80:	d1f7      	bne.n	8009d72 <_reclaim_reent+0x16>
 8009d82:	69e3      	ldr	r3, [r4, #28]
 8009d84:	4620      	mov	r0, r4
 8009d86:	68d9      	ldr	r1, [r3, #12]
 8009d88:	f000 f8b0 	bl	8009eec <_free_r>
 8009d8c:	69e3      	ldr	r3, [r4, #28]
 8009d8e:	6819      	ldr	r1, [r3, #0]
 8009d90:	b111      	cbz	r1, 8009d98 <_reclaim_reent+0x3c>
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 f8aa 	bl	8009eec <_free_r>
 8009d98:	6961      	ldr	r1, [r4, #20]
 8009d9a:	b111      	cbz	r1, 8009da2 <_reclaim_reent+0x46>
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 f8a5 	bl	8009eec <_free_r>
 8009da2:	69e1      	ldr	r1, [r4, #28]
 8009da4:	b111      	cbz	r1, 8009dac <_reclaim_reent+0x50>
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 f8a0 	bl	8009eec <_free_r>
 8009dac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009dae:	b111      	cbz	r1, 8009db6 <_reclaim_reent+0x5a>
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 f89b 	bl	8009eec <_free_r>
 8009db6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009db8:	b111      	cbz	r1, 8009dc0 <_reclaim_reent+0x64>
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 f896 	bl	8009eec <_free_r>
 8009dc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009dc2:	b111      	cbz	r1, 8009dca <_reclaim_reent+0x6e>
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 f891 	bl	8009eec <_free_r>
 8009dca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009dcc:	b111      	cbz	r1, 8009dd4 <_reclaim_reent+0x78>
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 f88c 	bl	8009eec <_free_r>
 8009dd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009dd6:	b111      	cbz	r1, 8009dde <_reclaim_reent+0x82>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 f887 	bl	8009eec <_free_r>
 8009dde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009de0:	b111      	cbz	r1, 8009de8 <_reclaim_reent+0x8c>
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 f882 	bl	8009eec <_free_r>
 8009de8:	6a23      	ldr	r3, [r4, #32]
 8009dea:	b14b      	cbz	r3, 8009e00 <_reclaim_reent+0xa4>
 8009dec:	4620      	mov	r0, r4
 8009dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009df2:	4718      	bx	r3
 8009df4:	680e      	ldr	r6, [r1, #0]
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 f878 	bl	8009eec <_free_r>
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	e7bb      	b.n	8009d78 <_reclaim_reent+0x1c>
 8009e00:	bd70      	pop	{r4, r5, r6, pc}
 8009e02:	bf00      	nop
 8009e04:	24000020 	.word	0x24000020

08009e08 <_lseek_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	@ (8009e28 <_lseek_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f7 fba1 	bl	800155e <_lseek>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_lseek_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_lseek_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	24004fec 	.word	0x24004fec

08009e2c <_read_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	@ (8009e4c <_read_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f7f7 fb32 	bl	80014a4 <_read>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_read_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_read_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	24004fec 	.word	0x24004fec

08009e50 <_write_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	@ (8009e70 <_write_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7f7 fb3e 	bl	80014e0 <_write>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_write_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_write_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	24004fec 	.word	0x24004fec

08009e74 <__errno>:
 8009e74:	4b01      	ldr	r3, [pc, #4]	@ (8009e7c <__errno+0x8>)
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	24000020 	.word	0x24000020

08009e80 <__libc_init_array>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	4d0d      	ldr	r5, [pc, #52]	@ (8009eb8 <__libc_init_array+0x38>)
 8009e84:	4c0d      	ldr	r4, [pc, #52]	@ (8009ebc <__libc_init_array+0x3c>)
 8009e86:	1b64      	subs	r4, r4, r5
 8009e88:	10a4      	asrs	r4, r4, #2
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	42a6      	cmp	r6, r4
 8009e8e:	d109      	bne.n	8009ea4 <__libc_init_array+0x24>
 8009e90:	4d0b      	ldr	r5, [pc, #44]	@ (8009ec0 <__libc_init_array+0x40>)
 8009e92:	4c0c      	ldr	r4, [pc, #48]	@ (8009ec4 <__libc_init_array+0x44>)
 8009e94:	f000 fd66 	bl	800a964 <_init>
 8009e98:	1b64      	subs	r4, r4, r5
 8009e9a:	10a4      	asrs	r4, r4, #2
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	42a6      	cmp	r6, r4
 8009ea0:	d105      	bne.n	8009eae <__libc_init_array+0x2e>
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea8:	4798      	blx	r3
 8009eaa:	3601      	adds	r6, #1
 8009eac:	e7ee      	b.n	8009e8c <__libc_init_array+0xc>
 8009eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb2:	4798      	blx	r3
 8009eb4:	3601      	adds	r6, #1
 8009eb6:	e7f2      	b.n	8009e9e <__libc_init_array+0x1e>
 8009eb8:	0800ab48 	.word	0x0800ab48
 8009ebc:	0800ab48 	.word	0x0800ab48
 8009ec0:	0800ab48 	.word	0x0800ab48
 8009ec4:	0800ab4c 	.word	0x0800ab4c

08009ec8 <__retarget_lock_init_recursive>:
 8009ec8:	4770      	bx	lr

08009eca <__retarget_lock_acquire_recursive>:
 8009eca:	4770      	bx	lr

08009ecc <__retarget_lock_release_recursive>:
 8009ecc:	4770      	bx	lr

08009ece <memcpy>:
 8009ece:	440a      	add	r2, r1
 8009ed0:	4291      	cmp	r1, r2
 8009ed2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ed6:	d100      	bne.n	8009eda <memcpy+0xc>
 8009ed8:	4770      	bx	lr
 8009eda:	b510      	push	{r4, lr}
 8009edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee4:	4291      	cmp	r1, r2
 8009ee6:	d1f9      	bne.n	8009edc <memcpy+0xe>
 8009ee8:	bd10      	pop	{r4, pc}
	...

08009eec <_free_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4605      	mov	r5, r0
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	d041      	beq.n	8009f78 <_free_r+0x8c>
 8009ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef8:	1f0c      	subs	r4, r1, #4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfb8      	it	lt
 8009efe:	18e4      	addlt	r4, r4, r3
 8009f00:	f000 f8e0 	bl	800a0c4 <__malloc_lock>
 8009f04:	4a1d      	ldr	r2, [pc, #116]	@ (8009f7c <_free_r+0x90>)
 8009f06:	6813      	ldr	r3, [r2, #0]
 8009f08:	b933      	cbnz	r3, 8009f18 <_free_r+0x2c>
 8009f0a:	6063      	str	r3, [r4, #4]
 8009f0c:	6014      	str	r4, [r2, #0]
 8009f0e:	4628      	mov	r0, r5
 8009f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f14:	f000 b8dc 	b.w	800a0d0 <__malloc_unlock>
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d908      	bls.n	8009f2e <_free_r+0x42>
 8009f1c:	6820      	ldr	r0, [r4, #0]
 8009f1e:	1821      	adds	r1, r4, r0
 8009f20:	428b      	cmp	r3, r1
 8009f22:	bf01      	itttt	eq
 8009f24:	6819      	ldreq	r1, [r3, #0]
 8009f26:	685b      	ldreq	r3, [r3, #4]
 8009f28:	1809      	addeq	r1, r1, r0
 8009f2a:	6021      	streq	r1, [r4, #0]
 8009f2c:	e7ed      	b.n	8009f0a <_free_r+0x1e>
 8009f2e:	461a      	mov	r2, r3
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	b10b      	cbz	r3, 8009f38 <_free_r+0x4c>
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	d9fa      	bls.n	8009f2e <_free_r+0x42>
 8009f38:	6811      	ldr	r1, [r2, #0]
 8009f3a:	1850      	adds	r0, r2, r1
 8009f3c:	42a0      	cmp	r0, r4
 8009f3e:	d10b      	bne.n	8009f58 <_free_r+0x6c>
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	4401      	add	r1, r0
 8009f44:	1850      	adds	r0, r2, r1
 8009f46:	4283      	cmp	r3, r0
 8009f48:	6011      	str	r1, [r2, #0]
 8009f4a:	d1e0      	bne.n	8009f0e <_free_r+0x22>
 8009f4c:	6818      	ldr	r0, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	6053      	str	r3, [r2, #4]
 8009f52:	4408      	add	r0, r1
 8009f54:	6010      	str	r0, [r2, #0]
 8009f56:	e7da      	b.n	8009f0e <_free_r+0x22>
 8009f58:	d902      	bls.n	8009f60 <_free_r+0x74>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	e7d6      	b.n	8009f0e <_free_r+0x22>
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	1821      	adds	r1, r4, r0
 8009f64:	428b      	cmp	r3, r1
 8009f66:	bf04      	itt	eq
 8009f68:	6819      	ldreq	r1, [r3, #0]
 8009f6a:	685b      	ldreq	r3, [r3, #4]
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	bf04      	itt	eq
 8009f70:	1809      	addeq	r1, r1, r0
 8009f72:	6021      	streq	r1, [r4, #0]
 8009f74:	6054      	str	r4, [r2, #4]
 8009f76:	e7ca      	b.n	8009f0e <_free_r+0x22>
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	bf00      	nop
 8009f7c:	24004ff8 	.word	0x24004ff8

08009f80 <sbrk_aligned>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	4e0f      	ldr	r6, [pc, #60]	@ (8009fc0 <sbrk_aligned+0x40>)
 8009f84:	460c      	mov	r4, r1
 8009f86:	6831      	ldr	r1, [r6, #0]
 8009f88:	4605      	mov	r5, r0
 8009f8a:	b911      	cbnz	r1, 8009f92 <sbrk_aligned+0x12>
 8009f8c:	f000 fcda 	bl	800a944 <_sbrk_r>
 8009f90:	6030      	str	r0, [r6, #0]
 8009f92:	4621      	mov	r1, r4
 8009f94:	4628      	mov	r0, r5
 8009f96:	f000 fcd5 	bl	800a944 <_sbrk_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d103      	bne.n	8009fa6 <sbrk_aligned+0x26>
 8009f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
 8009fa6:	1cc4      	adds	r4, r0, #3
 8009fa8:	f024 0403 	bic.w	r4, r4, #3
 8009fac:	42a0      	cmp	r0, r4
 8009fae:	d0f8      	beq.n	8009fa2 <sbrk_aligned+0x22>
 8009fb0:	1a21      	subs	r1, r4, r0
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 fcc6 	bl	800a944 <_sbrk_r>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d1f2      	bne.n	8009fa2 <sbrk_aligned+0x22>
 8009fbc:	e7ef      	b.n	8009f9e <sbrk_aligned+0x1e>
 8009fbe:	bf00      	nop
 8009fc0:	24004ff4 	.word	0x24004ff4

08009fc4 <_malloc_r>:
 8009fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc8:	1ccd      	adds	r5, r1, #3
 8009fca:	f025 0503 	bic.w	r5, r5, #3
 8009fce:	3508      	adds	r5, #8
 8009fd0:	2d0c      	cmp	r5, #12
 8009fd2:	bf38      	it	cc
 8009fd4:	250c      	movcc	r5, #12
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	4606      	mov	r6, r0
 8009fda:	db01      	blt.n	8009fe0 <_malloc_r+0x1c>
 8009fdc:	42a9      	cmp	r1, r5
 8009fde:	d904      	bls.n	8009fea <_malloc_r+0x26>
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0c0 <_malloc_r+0xfc>
 8009fee:	f000 f869 	bl	800a0c4 <__malloc_lock>
 8009ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff6:	461c      	mov	r4, r3
 8009ff8:	bb44      	cbnz	r4, 800a04c <_malloc_r+0x88>
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff ffbf 	bl	8009f80 <sbrk_aligned>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	4604      	mov	r4, r0
 800a006:	d158      	bne.n	800a0ba <_malloc_r+0xf6>
 800a008:	f8d8 4000 	ldr.w	r4, [r8]
 800a00c:	4627      	mov	r7, r4
 800a00e:	2f00      	cmp	r7, #0
 800a010:	d143      	bne.n	800a09a <_malloc_r+0xd6>
 800a012:	2c00      	cmp	r4, #0
 800a014:	d04b      	beq.n	800a0ae <_malloc_r+0xea>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	4639      	mov	r1, r7
 800a01a:	4630      	mov	r0, r6
 800a01c:	eb04 0903 	add.w	r9, r4, r3
 800a020:	f000 fc90 	bl	800a944 <_sbrk_r>
 800a024:	4581      	cmp	r9, r0
 800a026:	d142      	bne.n	800a0ae <_malloc_r+0xea>
 800a028:	6821      	ldr	r1, [r4, #0]
 800a02a:	1a6d      	subs	r5, r5, r1
 800a02c:	4629      	mov	r1, r5
 800a02e:	4630      	mov	r0, r6
 800a030:	f7ff ffa6 	bl	8009f80 <sbrk_aligned>
 800a034:	3001      	adds	r0, #1
 800a036:	d03a      	beq.n	800a0ae <_malloc_r+0xea>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	442b      	add	r3, r5
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	f8d8 3000 	ldr.w	r3, [r8]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	bb62      	cbnz	r2, 800a0a0 <_malloc_r+0xdc>
 800a046:	f8c8 7000 	str.w	r7, [r8]
 800a04a:	e00f      	b.n	800a06c <_malloc_r+0xa8>
 800a04c:	6822      	ldr	r2, [r4, #0]
 800a04e:	1b52      	subs	r2, r2, r5
 800a050:	d420      	bmi.n	800a094 <_malloc_r+0xd0>
 800a052:	2a0b      	cmp	r2, #11
 800a054:	d917      	bls.n	800a086 <_malloc_r+0xc2>
 800a056:	1961      	adds	r1, r4, r5
 800a058:	42a3      	cmp	r3, r4
 800a05a:	6025      	str	r5, [r4, #0]
 800a05c:	bf18      	it	ne
 800a05e:	6059      	strne	r1, [r3, #4]
 800a060:	6863      	ldr	r3, [r4, #4]
 800a062:	bf08      	it	eq
 800a064:	f8c8 1000 	streq.w	r1, [r8]
 800a068:	5162      	str	r2, [r4, r5]
 800a06a:	604b      	str	r3, [r1, #4]
 800a06c:	4630      	mov	r0, r6
 800a06e:	f000 f82f 	bl	800a0d0 <__malloc_unlock>
 800a072:	f104 000b 	add.w	r0, r4, #11
 800a076:	1d23      	adds	r3, r4, #4
 800a078:	f020 0007 	bic.w	r0, r0, #7
 800a07c:	1ac2      	subs	r2, r0, r3
 800a07e:	bf1c      	itt	ne
 800a080:	1a1b      	subne	r3, r3, r0
 800a082:	50a3      	strne	r3, [r4, r2]
 800a084:	e7af      	b.n	8009fe6 <_malloc_r+0x22>
 800a086:	6862      	ldr	r2, [r4, #4]
 800a088:	42a3      	cmp	r3, r4
 800a08a:	bf0c      	ite	eq
 800a08c:	f8c8 2000 	streq.w	r2, [r8]
 800a090:	605a      	strne	r2, [r3, #4]
 800a092:	e7eb      	b.n	800a06c <_malloc_r+0xa8>
 800a094:	4623      	mov	r3, r4
 800a096:	6864      	ldr	r4, [r4, #4]
 800a098:	e7ae      	b.n	8009ff8 <_malloc_r+0x34>
 800a09a:	463c      	mov	r4, r7
 800a09c:	687f      	ldr	r7, [r7, #4]
 800a09e:	e7b6      	b.n	800a00e <_malloc_r+0x4a>
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	d1fb      	bne.n	800a0a0 <_malloc_r+0xdc>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	6053      	str	r3, [r2, #4]
 800a0ac:	e7de      	b.n	800a06c <_malloc_r+0xa8>
 800a0ae:	230c      	movs	r3, #12
 800a0b0:	6033      	str	r3, [r6, #0]
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f000 f80c 	bl	800a0d0 <__malloc_unlock>
 800a0b8:	e794      	b.n	8009fe4 <_malloc_r+0x20>
 800a0ba:	6005      	str	r5, [r0, #0]
 800a0bc:	e7d6      	b.n	800a06c <_malloc_r+0xa8>
 800a0be:	bf00      	nop
 800a0c0:	24004ff8 	.word	0x24004ff8

0800a0c4 <__malloc_lock>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	@ (800a0cc <__malloc_lock+0x8>)
 800a0c6:	f7ff bf00 	b.w	8009eca <__retarget_lock_acquire_recursive>
 800a0ca:	bf00      	nop
 800a0cc:	24004ff0 	.word	0x24004ff0

0800a0d0 <__malloc_unlock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__malloc_unlock+0x8>)
 800a0d2:	f7ff befb 	b.w	8009ecc <__retarget_lock_release_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	24004ff0 	.word	0x24004ff0

0800a0dc <__sfputc_r>:
 800a0dc:	6893      	ldr	r3, [r2, #8]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	b410      	push	{r4}
 800a0e4:	6093      	str	r3, [r2, #8]
 800a0e6:	da08      	bge.n	800a0fa <__sfputc_r+0x1e>
 800a0e8:	6994      	ldr	r4, [r2, #24]
 800a0ea:	42a3      	cmp	r3, r4
 800a0ec:	db01      	blt.n	800a0f2 <__sfputc_r+0x16>
 800a0ee:	290a      	cmp	r1, #10
 800a0f0:	d103      	bne.n	800a0fa <__sfputc_r+0x1e>
 800a0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f6:	f7ff bd84 	b.w	8009c02 <__swbuf_r>
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	1c58      	adds	r0, r3, #1
 800a0fe:	6010      	str	r0, [r2, #0]
 800a100:	7019      	strb	r1, [r3, #0]
 800a102:	4608      	mov	r0, r1
 800a104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <__sfputs_r>:
 800a10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	4614      	mov	r4, r2
 800a112:	18d5      	adds	r5, r2, r3
 800a114:	42ac      	cmp	r4, r5
 800a116:	d101      	bne.n	800a11c <__sfputs_r+0x12>
 800a118:	2000      	movs	r0, #0
 800a11a:	e007      	b.n	800a12c <__sfputs_r+0x22>
 800a11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a120:	463a      	mov	r2, r7
 800a122:	4630      	mov	r0, r6
 800a124:	f7ff ffda 	bl	800a0dc <__sfputc_r>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d1f3      	bne.n	800a114 <__sfputs_r+0xa>
 800a12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a130 <_vfiprintf_r>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	460d      	mov	r5, r1
 800a136:	b09d      	sub	sp, #116	@ 0x74
 800a138:	4614      	mov	r4, r2
 800a13a:	4698      	mov	r8, r3
 800a13c:	4606      	mov	r6, r0
 800a13e:	b118      	cbz	r0, 800a148 <_vfiprintf_r+0x18>
 800a140:	6a03      	ldr	r3, [r0, #32]
 800a142:	b90b      	cbnz	r3, 800a148 <_vfiprintf_r+0x18>
 800a144:	f7ff fc6c 	bl	8009a20 <__sinit>
 800a148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a14a:	07d9      	lsls	r1, r3, #31
 800a14c:	d405      	bmi.n	800a15a <_vfiprintf_r+0x2a>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	059a      	lsls	r2, r3, #22
 800a152:	d402      	bmi.n	800a15a <_vfiprintf_r+0x2a>
 800a154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a156:	f7ff feb8 	bl	8009eca <__retarget_lock_acquire_recursive>
 800a15a:	89ab      	ldrh	r3, [r5, #12]
 800a15c:	071b      	lsls	r3, r3, #28
 800a15e:	d501      	bpl.n	800a164 <_vfiprintf_r+0x34>
 800a160:	692b      	ldr	r3, [r5, #16]
 800a162:	b99b      	cbnz	r3, 800a18c <_vfiprintf_r+0x5c>
 800a164:	4629      	mov	r1, r5
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff fd8a 	bl	8009c80 <__swsetup_r>
 800a16c:	b170      	cbz	r0, 800a18c <_vfiprintf_r+0x5c>
 800a16e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a170:	07dc      	lsls	r4, r3, #31
 800a172:	d504      	bpl.n	800a17e <_vfiprintf_r+0x4e>
 800a174:	f04f 30ff 	mov.w	r0, #4294967295
 800a178:	b01d      	add	sp, #116	@ 0x74
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	0598      	lsls	r0, r3, #22
 800a182:	d4f7      	bmi.n	800a174 <_vfiprintf_r+0x44>
 800a184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a186:	f7ff fea1 	bl	8009ecc <__retarget_lock_release_recursive>
 800a18a:	e7f3      	b.n	800a174 <_vfiprintf_r+0x44>
 800a18c:	2300      	movs	r3, #0
 800a18e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a190:	2320      	movs	r3, #32
 800a192:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a196:	f8cd 800c 	str.w	r8, [sp, #12]
 800a19a:	2330      	movs	r3, #48	@ 0x30
 800a19c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a34c <_vfiprintf_r+0x21c>
 800a1a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1a4:	f04f 0901 	mov.w	r9, #1
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	469a      	mov	sl, r3
 800a1ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b0:	b10a      	cbz	r2, 800a1b6 <_vfiprintf_r+0x86>
 800a1b2:	2a25      	cmp	r2, #37	@ 0x25
 800a1b4:	d1f9      	bne.n	800a1aa <_vfiprintf_r+0x7a>
 800a1b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ba:	d00b      	beq.n	800a1d4 <_vfiprintf_r+0xa4>
 800a1bc:	465b      	mov	r3, fp
 800a1be:	4622      	mov	r2, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7ff ffa1 	bl	800a10a <__sfputs_r>
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f000 80a7 	beq.w	800a31c <_vfiprintf_r+0x1ec>
 800a1ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1d0:	445a      	add	r2, fp
 800a1d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 809f 	beq.w	800a31c <_vfiprintf_r+0x1ec>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	9307      	str	r3, [sp, #28]
 800a1f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1f6:	4654      	mov	r4, sl
 800a1f8:	2205      	movs	r2, #5
 800a1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fe:	4853      	ldr	r0, [pc, #332]	@ (800a34c <_vfiprintf_r+0x21c>)
 800a200:	f7f6 f86e 	bl	80002e0 <memchr>
 800a204:	9a04      	ldr	r2, [sp, #16]
 800a206:	b9d8      	cbnz	r0, 800a240 <_vfiprintf_r+0x110>
 800a208:	06d1      	lsls	r1, r2, #27
 800a20a:	bf44      	itt	mi
 800a20c:	2320      	movmi	r3, #32
 800a20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a212:	0713      	lsls	r3, r2, #28
 800a214:	bf44      	itt	mi
 800a216:	232b      	movmi	r3, #43	@ 0x2b
 800a218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a21c:	f89a 3000 	ldrb.w	r3, [sl]
 800a220:	2b2a      	cmp	r3, #42	@ 0x2a
 800a222:	d015      	beq.n	800a250 <_vfiprintf_r+0x120>
 800a224:	9a07      	ldr	r2, [sp, #28]
 800a226:	4654      	mov	r4, sl
 800a228:	2000      	movs	r0, #0
 800a22a:	f04f 0c0a 	mov.w	ip, #10
 800a22e:	4621      	mov	r1, r4
 800a230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a234:	3b30      	subs	r3, #48	@ 0x30
 800a236:	2b09      	cmp	r3, #9
 800a238:	d94b      	bls.n	800a2d2 <_vfiprintf_r+0x1a2>
 800a23a:	b1b0      	cbz	r0, 800a26a <_vfiprintf_r+0x13a>
 800a23c:	9207      	str	r2, [sp, #28]
 800a23e:	e014      	b.n	800a26a <_vfiprintf_r+0x13a>
 800a240:	eba0 0308 	sub.w	r3, r0, r8
 800a244:	fa09 f303 	lsl.w	r3, r9, r3
 800a248:	4313      	orrs	r3, r2
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	46a2      	mov	sl, r4
 800a24e:	e7d2      	b.n	800a1f6 <_vfiprintf_r+0xc6>
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	1d19      	adds	r1, r3, #4
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	9103      	str	r1, [sp, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfbb      	ittet	lt
 800a25c:	425b      	neglt	r3, r3
 800a25e:	f042 0202 	orrlt.w	r2, r2, #2
 800a262:	9307      	strge	r3, [sp, #28]
 800a264:	9307      	strlt	r3, [sp, #28]
 800a266:	bfb8      	it	lt
 800a268:	9204      	strlt	r2, [sp, #16]
 800a26a:	7823      	ldrb	r3, [r4, #0]
 800a26c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a26e:	d10a      	bne.n	800a286 <_vfiprintf_r+0x156>
 800a270:	7863      	ldrb	r3, [r4, #1]
 800a272:	2b2a      	cmp	r3, #42	@ 0x2a
 800a274:	d132      	bne.n	800a2dc <_vfiprintf_r+0x1ac>
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	1d1a      	adds	r2, r3, #4
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	9203      	str	r2, [sp, #12]
 800a27e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a282:	3402      	adds	r4, #2
 800a284:	9305      	str	r3, [sp, #20]
 800a286:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a35c <_vfiprintf_r+0x22c>
 800a28a:	7821      	ldrb	r1, [r4, #0]
 800a28c:	2203      	movs	r2, #3
 800a28e:	4650      	mov	r0, sl
 800a290:	f7f6 f826 	bl	80002e0 <memchr>
 800a294:	b138      	cbz	r0, 800a2a6 <_vfiprintf_r+0x176>
 800a296:	9b04      	ldr	r3, [sp, #16]
 800a298:	eba0 000a 	sub.w	r0, r0, sl
 800a29c:	2240      	movs	r2, #64	@ 0x40
 800a29e:	4082      	lsls	r2, r0
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	3401      	adds	r4, #1
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2aa:	4829      	ldr	r0, [pc, #164]	@ (800a350 <_vfiprintf_r+0x220>)
 800a2ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2b0:	2206      	movs	r2, #6
 800a2b2:	f7f6 f815 	bl	80002e0 <memchr>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d03f      	beq.n	800a33a <_vfiprintf_r+0x20a>
 800a2ba:	4b26      	ldr	r3, [pc, #152]	@ (800a354 <_vfiprintf_r+0x224>)
 800a2bc:	bb1b      	cbnz	r3, 800a306 <_vfiprintf_r+0x1d6>
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	3307      	adds	r3, #7
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2cc:	443b      	add	r3, r7
 800a2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d0:	e76a      	b.n	800a1a8 <_vfiprintf_r+0x78>
 800a2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	2001      	movs	r0, #1
 800a2da:	e7a8      	b.n	800a22e <_vfiprintf_r+0xfe>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	3401      	adds	r4, #1
 800a2e0:	9305      	str	r3, [sp, #20]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	f04f 0c0a 	mov.w	ip, #10
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ee:	3a30      	subs	r2, #48	@ 0x30
 800a2f0:	2a09      	cmp	r2, #9
 800a2f2:	d903      	bls.n	800a2fc <_vfiprintf_r+0x1cc>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0c6      	beq.n	800a286 <_vfiprintf_r+0x156>
 800a2f8:	9105      	str	r1, [sp, #20]
 800a2fa:	e7c4      	b.n	800a286 <_vfiprintf_r+0x156>
 800a2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a300:	4604      	mov	r4, r0
 800a302:	2301      	movs	r3, #1
 800a304:	e7f0      	b.n	800a2e8 <_vfiprintf_r+0x1b8>
 800a306:	ab03      	add	r3, sp, #12
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	462a      	mov	r2, r5
 800a30c:	4b12      	ldr	r3, [pc, #72]	@ (800a358 <_vfiprintf_r+0x228>)
 800a30e:	a904      	add	r1, sp, #16
 800a310:	4630      	mov	r0, r6
 800a312:	f3af 8000 	nop.w
 800a316:	4607      	mov	r7, r0
 800a318:	1c78      	adds	r0, r7, #1
 800a31a:	d1d6      	bne.n	800a2ca <_vfiprintf_r+0x19a>
 800a31c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a31e:	07d9      	lsls	r1, r3, #31
 800a320:	d405      	bmi.n	800a32e <_vfiprintf_r+0x1fe>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	059a      	lsls	r2, r3, #22
 800a326:	d402      	bmi.n	800a32e <_vfiprintf_r+0x1fe>
 800a328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a32a:	f7ff fdcf 	bl	8009ecc <__retarget_lock_release_recursive>
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	065b      	lsls	r3, r3, #25
 800a332:	f53f af1f 	bmi.w	800a174 <_vfiprintf_r+0x44>
 800a336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a338:	e71e      	b.n	800a178 <_vfiprintf_r+0x48>
 800a33a:	ab03      	add	r3, sp, #12
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	462a      	mov	r2, r5
 800a340:	4b05      	ldr	r3, [pc, #20]	@ (800a358 <_vfiprintf_r+0x228>)
 800a342:	a904      	add	r1, sp, #16
 800a344:	4630      	mov	r0, r6
 800a346:	f000 f879 	bl	800a43c <_printf_i>
 800a34a:	e7e4      	b.n	800a316 <_vfiprintf_r+0x1e6>
 800a34c:	0800ab0c 	.word	0x0800ab0c
 800a350:	0800ab16 	.word	0x0800ab16
 800a354:	00000000 	.word	0x00000000
 800a358:	0800a10b 	.word	0x0800a10b
 800a35c:	0800ab12 	.word	0x0800ab12

0800a360 <_printf_common>:
 800a360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	4616      	mov	r6, r2
 800a366:	4698      	mov	r8, r3
 800a368:	688a      	ldr	r2, [r1, #8]
 800a36a:	690b      	ldr	r3, [r1, #16]
 800a36c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a370:	4293      	cmp	r3, r2
 800a372:	bfb8      	it	lt
 800a374:	4613      	movlt	r3, r2
 800a376:	6033      	str	r3, [r6, #0]
 800a378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a37c:	4607      	mov	r7, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	b10a      	cbz	r2, 800a386 <_printf_common+0x26>
 800a382:	3301      	adds	r3, #1
 800a384:	6033      	str	r3, [r6, #0]
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	0699      	lsls	r1, r3, #26
 800a38a:	bf42      	ittt	mi
 800a38c:	6833      	ldrmi	r3, [r6, #0]
 800a38e:	3302      	addmi	r3, #2
 800a390:	6033      	strmi	r3, [r6, #0]
 800a392:	6825      	ldr	r5, [r4, #0]
 800a394:	f015 0506 	ands.w	r5, r5, #6
 800a398:	d106      	bne.n	800a3a8 <_printf_common+0x48>
 800a39a:	f104 0a19 	add.w	sl, r4, #25
 800a39e:	68e3      	ldr	r3, [r4, #12]
 800a3a0:	6832      	ldr	r2, [r6, #0]
 800a3a2:	1a9b      	subs	r3, r3, r2
 800a3a4:	42ab      	cmp	r3, r5
 800a3a6:	dc26      	bgt.n	800a3f6 <_printf_common+0x96>
 800a3a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3ac:	6822      	ldr	r2, [r4, #0]
 800a3ae:	3b00      	subs	r3, #0
 800a3b0:	bf18      	it	ne
 800a3b2:	2301      	movne	r3, #1
 800a3b4:	0692      	lsls	r2, r2, #26
 800a3b6:	d42b      	bmi.n	800a410 <_printf_common+0xb0>
 800a3b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3bc:	4641      	mov	r1, r8
 800a3be:	4638      	mov	r0, r7
 800a3c0:	47c8      	blx	r9
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	d01e      	beq.n	800a404 <_printf_common+0xa4>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	6922      	ldr	r2, [r4, #16]
 800a3ca:	f003 0306 	and.w	r3, r3, #6
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	bf02      	ittt	eq
 800a3d2:	68e5      	ldreq	r5, [r4, #12]
 800a3d4:	6833      	ldreq	r3, [r6, #0]
 800a3d6:	1aed      	subeq	r5, r5, r3
 800a3d8:	68a3      	ldr	r3, [r4, #8]
 800a3da:	bf0c      	ite	eq
 800a3dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3e0:	2500      	movne	r5, #0
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	bfc4      	itt	gt
 800a3e6:	1a9b      	subgt	r3, r3, r2
 800a3e8:	18ed      	addgt	r5, r5, r3
 800a3ea:	2600      	movs	r6, #0
 800a3ec:	341a      	adds	r4, #26
 800a3ee:	42b5      	cmp	r5, r6
 800a3f0:	d11a      	bne.n	800a428 <_printf_common+0xc8>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	e008      	b.n	800a408 <_printf_common+0xa8>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	4641      	mov	r1, r8
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	47c8      	blx	r9
 800a400:	3001      	adds	r0, #1
 800a402:	d103      	bne.n	800a40c <_printf_common+0xac>
 800a404:	f04f 30ff 	mov.w	r0, #4294967295
 800a408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40c:	3501      	adds	r5, #1
 800a40e:	e7c6      	b.n	800a39e <_printf_common+0x3e>
 800a410:	18e1      	adds	r1, r4, r3
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	2030      	movs	r0, #48	@ 0x30
 800a416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a41a:	4422      	add	r2, r4
 800a41c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a424:	3302      	adds	r3, #2
 800a426:	e7c7      	b.n	800a3b8 <_printf_common+0x58>
 800a428:	2301      	movs	r3, #1
 800a42a:	4622      	mov	r2, r4
 800a42c:	4641      	mov	r1, r8
 800a42e:	4638      	mov	r0, r7
 800a430:	47c8      	blx	r9
 800a432:	3001      	adds	r0, #1
 800a434:	d0e6      	beq.n	800a404 <_printf_common+0xa4>
 800a436:	3601      	adds	r6, #1
 800a438:	e7d9      	b.n	800a3ee <_printf_common+0x8e>
	...

0800a43c <_printf_i>:
 800a43c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	7e0f      	ldrb	r7, [r1, #24]
 800a442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a444:	2f78      	cmp	r7, #120	@ 0x78
 800a446:	4691      	mov	r9, r2
 800a448:	4680      	mov	r8, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	469a      	mov	sl, r3
 800a44e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a452:	d807      	bhi.n	800a464 <_printf_i+0x28>
 800a454:	2f62      	cmp	r7, #98	@ 0x62
 800a456:	d80a      	bhi.n	800a46e <_printf_i+0x32>
 800a458:	2f00      	cmp	r7, #0
 800a45a:	f000 80d2 	beq.w	800a602 <_printf_i+0x1c6>
 800a45e:	2f58      	cmp	r7, #88	@ 0x58
 800a460:	f000 80b9 	beq.w	800a5d6 <_printf_i+0x19a>
 800a464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a46c:	e03a      	b.n	800a4e4 <_printf_i+0xa8>
 800a46e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a472:	2b15      	cmp	r3, #21
 800a474:	d8f6      	bhi.n	800a464 <_printf_i+0x28>
 800a476:	a101      	add	r1, pc, #4	@ (adr r1, 800a47c <_printf_i+0x40>)
 800a478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a47c:	0800a4d5 	.word	0x0800a4d5
 800a480:	0800a4e9 	.word	0x0800a4e9
 800a484:	0800a465 	.word	0x0800a465
 800a488:	0800a465 	.word	0x0800a465
 800a48c:	0800a465 	.word	0x0800a465
 800a490:	0800a465 	.word	0x0800a465
 800a494:	0800a4e9 	.word	0x0800a4e9
 800a498:	0800a465 	.word	0x0800a465
 800a49c:	0800a465 	.word	0x0800a465
 800a4a0:	0800a465 	.word	0x0800a465
 800a4a4:	0800a465 	.word	0x0800a465
 800a4a8:	0800a5e9 	.word	0x0800a5e9
 800a4ac:	0800a513 	.word	0x0800a513
 800a4b0:	0800a5a3 	.word	0x0800a5a3
 800a4b4:	0800a465 	.word	0x0800a465
 800a4b8:	0800a465 	.word	0x0800a465
 800a4bc:	0800a60b 	.word	0x0800a60b
 800a4c0:	0800a465 	.word	0x0800a465
 800a4c4:	0800a513 	.word	0x0800a513
 800a4c8:	0800a465 	.word	0x0800a465
 800a4cc:	0800a465 	.word	0x0800a465
 800a4d0:	0800a5ab 	.word	0x0800a5ab
 800a4d4:	6833      	ldr	r3, [r6, #0]
 800a4d6:	1d1a      	adds	r2, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6032      	str	r2, [r6, #0]
 800a4dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e09d      	b.n	800a624 <_printf_i+0x1e8>
 800a4e8:	6833      	ldr	r3, [r6, #0]
 800a4ea:	6820      	ldr	r0, [r4, #0]
 800a4ec:	1d19      	adds	r1, r3, #4
 800a4ee:	6031      	str	r1, [r6, #0]
 800a4f0:	0606      	lsls	r6, r0, #24
 800a4f2:	d501      	bpl.n	800a4f8 <_printf_i+0xbc>
 800a4f4:	681d      	ldr	r5, [r3, #0]
 800a4f6:	e003      	b.n	800a500 <_printf_i+0xc4>
 800a4f8:	0645      	lsls	r5, r0, #25
 800a4fa:	d5fb      	bpl.n	800a4f4 <_printf_i+0xb8>
 800a4fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a500:	2d00      	cmp	r5, #0
 800a502:	da03      	bge.n	800a50c <_printf_i+0xd0>
 800a504:	232d      	movs	r3, #45	@ 0x2d
 800a506:	426d      	negs	r5, r5
 800a508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a50c:	4859      	ldr	r0, [pc, #356]	@ (800a674 <_printf_i+0x238>)
 800a50e:	230a      	movs	r3, #10
 800a510:	e011      	b.n	800a536 <_printf_i+0xfa>
 800a512:	6821      	ldr	r1, [r4, #0]
 800a514:	6833      	ldr	r3, [r6, #0]
 800a516:	0608      	lsls	r0, r1, #24
 800a518:	f853 5b04 	ldr.w	r5, [r3], #4
 800a51c:	d402      	bmi.n	800a524 <_printf_i+0xe8>
 800a51e:	0649      	lsls	r1, r1, #25
 800a520:	bf48      	it	mi
 800a522:	b2ad      	uxthmi	r5, r5
 800a524:	2f6f      	cmp	r7, #111	@ 0x6f
 800a526:	4853      	ldr	r0, [pc, #332]	@ (800a674 <_printf_i+0x238>)
 800a528:	6033      	str	r3, [r6, #0]
 800a52a:	bf14      	ite	ne
 800a52c:	230a      	movne	r3, #10
 800a52e:	2308      	moveq	r3, #8
 800a530:	2100      	movs	r1, #0
 800a532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a536:	6866      	ldr	r6, [r4, #4]
 800a538:	60a6      	str	r6, [r4, #8]
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	bfa2      	ittt	ge
 800a53e:	6821      	ldrge	r1, [r4, #0]
 800a540:	f021 0104 	bicge.w	r1, r1, #4
 800a544:	6021      	strge	r1, [r4, #0]
 800a546:	b90d      	cbnz	r5, 800a54c <_printf_i+0x110>
 800a548:	2e00      	cmp	r6, #0
 800a54a:	d04b      	beq.n	800a5e4 <_printf_i+0x1a8>
 800a54c:	4616      	mov	r6, r2
 800a54e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a552:	fb03 5711 	mls	r7, r3, r1, r5
 800a556:	5dc7      	ldrb	r7, [r0, r7]
 800a558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a55c:	462f      	mov	r7, r5
 800a55e:	42bb      	cmp	r3, r7
 800a560:	460d      	mov	r5, r1
 800a562:	d9f4      	bls.n	800a54e <_printf_i+0x112>
 800a564:	2b08      	cmp	r3, #8
 800a566:	d10b      	bne.n	800a580 <_printf_i+0x144>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	07df      	lsls	r7, r3, #31
 800a56c:	d508      	bpl.n	800a580 <_printf_i+0x144>
 800a56e:	6923      	ldr	r3, [r4, #16]
 800a570:	6861      	ldr	r1, [r4, #4]
 800a572:	4299      	cmp	r1, r3
 800a574:	bfde      	ittt	le
 800a576:	2330      	movle	r3, #48	@ 0x30
 800a578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a57c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a580:	1b92      	subs	r2, r2, r6
 800a582:	6122      	str	r2, [r4, #16]
 800a584:	f8cd a000 	str.w	sl, [sp]
 800a588:	464b      	mov	r3, r9
 800a58a:	aa03      	add	r2, sp, #12
 800a58c:	4621      	mov	r1, r4
 800a58e:	4640      	mov	r0, r8
 800a590:	f7ff fee6 	bl	800a360 <_printf_common>
 800a594:	3001      	adds	r0, #1
 800a596:	d14a      	bne.n	800a62e <_printf_i+0x1f2>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	b004      	add	sp, #16
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	f043 0320 	orr.w	r3, r3, #32
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	4833      	ldr	r0, [pc, #204]	@ (800a678 <_printf_i+0x23c>)
 800a5ac:	2778      	movs	r7, #120	@ 0x78
 800a5ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	6831      	ldr	r1, [r6, #0]
 800a5b6:	061f      	lsls	r7, r3, #24
 800a5b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5bc:	d402      	bmi.n	800a5c4 <_printf_i+0x188>
 800a5be:	065f      	lsls	r7, r3, #25
 800a5c0:	bf48      	it	mi
 800a5c2:	b2ad      	uxthmi	r5, r5
 800a5c4:	6031      	str	r1, [r6, #0]
 800a5c6:	07d9      	lsls	r1, r3, #31
 800a5c8:	bf44      	itt	mi
 800a5ca:	f043 0320 	orrmi.w	r3, r3, #32
 800a5ce:	6023      	strmi	r3, [r4, #0]
 800a5d0:	b11d      	cbz	r5, 800a5da <_printf_i+0x19e>
 800a5d2:	2310      	movs	r3, #16
 800a5d4:	e7ac      	b.n	800a530 <_printf_i+0xf4>
 800a5d6:	4827      	ldr	r0, [pc, #156]	@ (800a674 <_printf_i+0x238>)
 800a5d8:	e7e9      	b.n	800a5ae <_printf_i+0x172>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	f023 0320 	bic.w	r3, r3, #32
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	e7f6      	b.n	800a5d2 <_printf_i+0x196>
 800a5e4:	4616      	mov	r6, r2
 800a5e6:	e7bd      	b.n	800a564 <_printf_i+0x128>
 800a5e8:	6833      	ldr	r3, [r6, #0]
 800a5ea:	6825      	ldr	r5, [r4, #0]
 800a5ec:	6961      	ldr	r1, [r4, #20]
 800a5ee:	1d18      	adds	r0, r3, #4
 800a5f0:	6030      	str	r0, [r6, #0]
 800a5f2:	062e      	lsls	r6, r5, #24
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	d501      	bpl.n	800a5fc <_printf_i+0x1c0>
 800a5f8:	6019      	str	r1, [r3, #0]
 800a5fa:	e002      	b.n	800a602 <_printf_i+0x1c6>
 800a5fc:	0668      	lsls	r0, r5, #25
 800a5fe:	d5fb      	bpl.n	800a5f8 <_printf_i+0x1bc>
 800a600:	8019      	strh	r1, [r3, #0]
 800a602:	2300      	movs	r3, #0
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	4616      	mov	r6, r2
 800a608:	e7bc      	b.n	800a584 <_printf_i+0x148>
 800a60a:	6833      	ldr	r3, [r6, #0]
 800a60c:	1d1a      	adds	r2, r3, #4
 800a60e:	6032      	str	r2, [r6, #0]
 800a610:	681e      	ldr	r6, [r3, #0]
 800a612:	6862      	ldr	r2, [r4, #4]
 800a614:	2100      	movs	r1, #0
 800a616:	4630      	mov	r0, r6
 800a618:	f7f5 fe62 	bl	80002e0 <memchr>
 800a61c:	b108      	cbz	r0, 800a622 <_printf_i+0x1e6>
 800a61e:	1b80      	subs	r0, r0, r6
 800a620:	6060      	str	r0, [r4, #4]
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	6123      	str	r3, [r4, #16]
 800a626:	2300      	movs	r3, #0
 800a628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a62c:	e7aa      	b.n	800a584 <_printf_i+0x148>
 800a62e:	6923      	ldr	r3, [r4, #16]
 800a630:	4632      	mov	r2, r6
 800a632:	4649      	mov	r1, r9
 800a634:	4640      	mov	r0, r8
 800a636:	47d0      	blx	sl
 800a638:	3001      	adds	r0, #1
 800a63a:	d0ad      	beq.n	800a598 <_printf_i+0x15c>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	079b      	lsls	r3, r3, #30
 800a640:	d413      	bmi.n	800a66a <_printf_i+0x22e>
 800a642:	68e0      	ldr	r0, [r4, #12]
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	4298      	cmp	r0, r3
 800a648:	bfb8      	it	lt
 800a64a:	4618      	movlt	r0, r3
 800a64c:	e7a6      	b.n	800a59c <_printf_i+0x160>
 800a64e:	2301      	movs	r3, #1
 800a650:	4632      	mov	r2, r6
 800a652:	4649      	mov	r1, r9
 800a654:	4640      	mov	r0, r8
 800a656:	47d0      	blx	sl
 800a658:	3001      	adds	r0, #1
 800a65a:	d09d      	beq.n	800a598 <_printf_i+0x15c>
 800a65c:	3501      	adds	r5, #1
 800a65e:	68e3      	ldr	r3, [r4, #12]
 800a660:	9903      	ldr	r1, [sp, #12]
 800a662:	1a5b      	subs	r3, r3, r1
 800a664:	42ab      	cmp	r3, r5
 800a666:	dcf2      	bgt.n	800a64e <_printf_i+0x212>
 800a668:	e7eb      	b.n	800a642 <_printf_i+0x206>
 800a66a:	2500      	movs	r5, #0
 800a66c:	f104 0619 	add.w	r6, r4, #25
 800a670:	e7f5      	b.n	800a65e <_printf_i+0x222>
 800a672:	bf00      	nop
 800a674:	0800ab1d 	.word	0x0800ab1d
 800a678:	0800ab2e 	.word	0x0800ab2e

0800a67c <__sflush_r>:
 800a67c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	0716      	lsls	r6, r2, #28
 800a686:	4605      	mov	r5, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	d454      	bmi.n	800a736 <__sflush_r+0xba>
 800a68c:	684b      	ldr	r3, [r1, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dc02      	bgt.n	800a698 <__sflush_r+0x1c>
 800a692:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	dd48      	ble.n	800a72a <__sflush_r+0xae>
 800a698:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	d045      	beq.n	800a72a <__sflush_r+0xae>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6a4:	682f      	ldr	r7, [r5, #0]
 800a6a6:	6a21      	ldr	r1, [r4, #32]
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	d030      	beq.n	800a70e <__sflush_r+0x92>
 800a6ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	0759      	lsls	r1, r3, #29
 800a6b2:	d505      	bpl.n	800a6c0 <__sflush_r+0x44>
 800a6b4:	6863      	ldr	r3, [r4, #4]
 800a6b6:	1ad2      	subs	r2, r2, r3
 800a6b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6ba:	b10b      	cbz	r3, 800a6c0 <__sflush_r+0x44>
 800a6bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6be:	1ad2      	subs	r2, r2, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6c4:	6a21      	ldr	r1, [r4, #32]
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b0      	blx	r6
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	d106      	bne.n	800a6de <__sflush_r+0x62>
 800a6d0:	6829      	ldr	r1, [r5, #0]
 800a6d2:	291d      	cmp	r1, #29
 800a6d4:	d82b      	bhi.n	800a72e <__sflush_r+0xb2>
 800a6d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a780 <__sflush_r+0x104>)
 800a6d8:	410a      	asrs	r2, r1
 800a6da:	07d6      	lsls	r6, r2, #31
 800a6dc:	d427      	bmi.n	800a72e <__sflush_r+0xb2>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	6062      	str	r2, [r4, #4]
 800a6e2:	04d9      	lsls	r1, r3, #19
 800a6e4:	6922      	ldr	r2, [r4, #16]
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	d504      	bpl.n	800a6f4 <__sflush_r+0x78>
 800a6ea:	1c42      	adds	r2, r0, #1
 800a6ec:	d101      	bne.n	800a6f2 <__sflush_r+0x76>
 800a6ee:	682b      	ldr	r3, [r5, #0]
 800a6f0:	b903      	cbnz	r3, 800a6f4 <__sflush_r+0x78>
 800a6f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6f6:	602f      	str	r7, [r5, #0]
 800a6f8:	b1b9      	cbz	r1, 800a72a <__sflush_r+0xae>
 800a6fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6fe:	4299      	cmp	r1, r3
 800a700:	d002      	beq.n	800a708 <__sflush_r+0x8c>
 800a702:	4628      	mov	r0, r5
 800a704:	f7ff fbf2 	bl	8009eec <_free_r>
 800a708:	2300      	movs	r3, #0
 800a70a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a70c:	e00d      	b.n	800a72a <__sflush_r+0xae>
 800a70e:	2301      	movs	r3, #1
 800a710:	4628      	mov	r0, r5
 800a712:	47b0      	blx	r6
 800a714:	4602      	mov	r2, r0
 800a716:	1c50      	adds	r0, r2, #1
 800a718:	d1c9      	bne.n	800a6ae <__sflush_r+0x32>
 800a71a:	682b      	ldr	r3, [r5, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0c6      	beq.n	800a6ae <__sflush_r+0x32>
 800a720:	2b1d      	cmp	r3, #29
 800a722:	d001      	beq.n	800a728 <__sflush_r+0xac>
 800a724:	2b16      	cmp	r3, #22
 800a726:	d11e      	bne.n	800a766 <__sflush_r+0xea>
 800a728:	602f      	str	r7, [r5, #0]
 800a72a:	2000      	movs	r0, #0
 800a72c:	e022      	b.n	800a774 <__sflush_r+0xf8>
 800a72e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a732:	b21b      	sxth	r3, r3
 800a734:	e01b      	b.n	800a76e <__sflush_r+0xf2>
 800a736:	690f      	ldr	r7, [r1, #16]
 800a738:	2f00      	cmp	r7, #0
 800a73a:	d0f6      	beq.n	800a72a <__sflush_r+0xae>
 800a73c:	0793      	lsls	r3, r2, #30
 800a73e:	680e      	ldr	r6, [r1, #0]
 800a740:	bf08      	it	eq
 800a742:	694b      	ldreq	r3, [r1, #20]
 800a744:	600f      	str	r7, [r1, #0]
 800a746:	bf18      	it	ne
 800a748:	2300      	movne	r3, #0
 800a74a:	eba6 0807 	sub.w	r8, r6, r7
 800a74e:	608b      	str	r3, [r1, #8]
 800a750:	f1b8 0f00 	cmp.w	r8, #0
 800a754:	dde9      	ble.n	800a72a <__sflush_r+0xae>
 800a756:	6a21      	ldr	r1, [r4, #32]
 800a758:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a75a:	4643      	mov	r3, r8
 800a75c:	463a      	mov	r2, r7
 800a75e:	4628      	mov	r0, r5
 800a760:	47b0      	blx	r6
 800a762:	2800      	cmp	r0, #0
 800a764:	dc08      	bgt.n	800a778 <__sflush_r+0xfc>
 800a766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a778:	4407      	add	r7, r0
 800a77a:	eba8 0800 	sub.w	r8, r8, r0
 800a77e:	e7e7      	b.n	800a750 <__sflush_r+0xd4>
 800a780:	dfbffffe 	.word	0xdfbffffe

0800a784 <_fflush_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	690b      	ldr	r3, [r1, #16]
 800a788:	4605      	mov	r5, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	b913      	cbnz	r3, 800a794 <_fflush_r+0x10>
 800a78e:	2500      	movs	r5, #0
 800a790:	4628      	mov	r0, r5
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	b118      	cbz	r0, 800a79e <_fflush_r+0x1a>
 800a796:	6a03      	ldr	r3, [r0, #32]
 800a798:	b90b      	cbnz	r3, 800a79e <_fflush_r+0x1a>
 800a79a:	f7ff f941 	bl	8009a20 <__sinit>
 800a79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0f3      	beq.n	800a78e <_fflush_r+0xa>
 800a7a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7a8:	07d0      	lsls	r0, r2, #31
 800a7aa:	d404      	bmi.n	800a7b6 <_fflush_r+0x32>
 800a7ac:	0599      	lsls	r1, r3, #22
 800a7ae:	d402      	bmi.n	800a7b6 <_fflush_r+0x32>
 800a7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7b2:	f7ff fb8a 	bl	8009eca <__retarget_lock_acquire_recursive>
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	f7ff ff5f 	bl	800a67c <__sflush_r>
 800a7be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7c0:	07da      	lsls	r2, r3, #31
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	d4e4      	bmi.n	800a790 <_fflush_r+0xc>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	059b      	lsls	r3, r3, #22
 800a7ca:	d4e1      	bmi.n	800a790 <_fflush_r+0xc>
 800a7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7ce:	f7ff fb7d 	bl	8009ecc <__retarget_lock_release_recursive>
 800a7d2:	e7dd      	b.n	800a790 <_fflush_r+0xc>

0800a7d4 <__swhatbuf_r>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7dc:	2900      	cmp	r1, #0
 800a7de:	b096      	sub	sp, #88	@ 0x58
 800a7e0:	4615      	mov	r5, r2
 800a7e2:	461e      	mov	r6, r3
 800a7e4:	da0d      	bge.n	800a802 <__swhatbuf_r+0x2e>
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7ec:	f04f 0100 	mov.w	r1, #0
 800a7f0:	bf14      	ite	ne
 800a7f2:	2340      	movne	r3, #64	@ 0x40
 800a7f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	6031      	str	r1, [r6, #0]
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	b016      	add	sp, #88	@ 0x58
 800a800:	bd70      	pop	{r4, r5, r6, pc}
 800a802:	466a      	mov	r2, sp
 800a804:	f000 f87c 	bl	800a900 <_fstat_r>
 800a808:	2800      	cmp	r0, #0
 800a80a:	dbec      	blt.n	800a7e6 <__swhatbuf_r+0x12>
 800a80c:	9901      	ldr	r1, [sp, #4]
 800a80e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a816:	4259      	negs	r1, r3
 800a818:	4159      	adcs	r1, r3
 800a81a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a81e:	e7eb      	b.n	800a7f8 <__swhatbuf_r+0x24>

0800a820 <__smakebuf_r>:
 800a820:	898b      	ldrh	r3, [r1, #12]
 800a822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a824:	079d      	lsls	r5, r3, #30
 800a826:	4606      	mov	r6, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	d507      	bpl.n	800a83c <__smakebuf_r+0x1c>
 800a82c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	2301      	movs	r3, #1
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	b003      	add	sp, #12
 800a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a83c:	ab01      	add	r3, sp, #4
 800a83e:	466a      	mov	r2, sp
 800a840:	f7ff ffc8 	bl	800a7d4 <__swhatbuf_r>
 800a844:	9f00      	ldr	r7, [sp, #0]
 800a846:	4605      	mov	r5, r0
 800a848:	4639      	mov	r1, r7
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7ff fbba 	bl	8009fc4 <_malloc_r>
 800a850:	b948      	cbnz	r0, 800a866 <__smakebuf_r+0x46>
 800a852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a856:	059a      	lsls	r2, r3, #22
 800a858:	d4ee      	bmi.n	800a838 <__smakebuf_r+0x18>
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	f043 0302 	orr.w	r3, r3, #2
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	e7e2      	b.n	800a82c <__smakebuf_r+0xc>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	6020      	str	r0, [r4, #0]
 800a86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a876:	b15b      	cbz	r3, 800a890 <__smakebuf_r+0x70>
 800a878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a87c:	4630      	mov	r0, r6
 800a87e:	f000 f851 	bl	800a924 <_isatty_r>
 800a882:	b128      	cbz	r0, 800a890 <__smakebuf_r+0x70>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f023 0303 	bic.w	r3, r3, #3
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	431d      	orrs	r5, r3
 800a894:	81a5      	strh	r5, [r4, #12]
 800a896:	e7cf      	b.n	800a838 <__smakebuf_r+0x18>

0800a898 <_putc_r>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	460d      	mov	r5, r1
 800a89c:	4614      	mov	r4, r2
 800a89e:	4606      	mov	r6, r0
 800a8a0:	b118      	cbz	r0, 800a8aa <_putc_r+0x12>
 800a8a2:	6a03      	ldr	r3, [r0, #32]
 800a8a4:	b90b      	cbnz	r3, 800a8aa <_putc_r+0x12>
 800a8a6:	f7ff f8bb 	bl	8009a20 <__sinit>
 800a8aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8ac:	07d8      	lsls	r0, r3, #31
 800a8ae:	d405      	bmi.n	800a8bc <_putc_r+0x24>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	0599      	lsls	r1, r3, #22
 800a8b4:	d402      	bmi.n	800a8bc <_putc_r+0x24>
 800a8b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8b8:	f7ff fb07 	bl	8009eca <__retarget_lock_acquire_recursive>
 800a8bc:	68a3      	ldr	r3, [r4, #8]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	da05      	bge.n	800a8d2 <_putc_r+0x3a>
 800a8c6:	69a2      	ldr	r2, [r4, #24]
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	db12      	blt.n	800a8f2 <_putc_r+0x5a>
 800a8cc:	b2eb      	uxtb	r3, r5
 800a8ce:	2b0a      	cmp	r3, #10
 800a8d0:	d00f      	beq.n	800a8f2 <_putc_r+0x5a>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	701d      	strb	r5, [r3, #0]
 800a8da:	b2ed      	uxtb	r5, r5
 800a8dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8de:	07da      	lsls	r2, r3, #31
 800a8e0:	d405      	bmi.n	800a8ee <_putc_r+0x56>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	059b      	lsls	r3, r3, #22
 800a8e6:	d402      	bmi.n	800a8ee <_putc_r+0x56>
 800a8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ea:	f7ff faef 	bl	8009ecc <__retarget_lock_release_recursive>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7ff f983 	bl	8009c02 <__swbuf_r>
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	e7ed      	b.n	800a8dc <_putc_r+0x44>

0800a900 <_fstat_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	@ (800a920 <_fstat_r+0x20>)
 800a904:	2300      	movs	r3, #0
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	4611      	mov	r1, r2
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	f7f6 fe0b 	bl	8001528 <_fstat>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d102      	bne.n	800a91c <_fstat_r+0x1c>
 800a916:	682b      	ldr	r3, [r5, #0]
 800a918:	b103      	cbz	r3, 800a91c <_fstat_r+0x1c>
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	bd38      	pop	{r3, r4, r5, pc}
 800a91e:	bf00      	nop
 800a920:	24004fec 	.word	0x24004fec

0800a924 <_isatty_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d06      	ldr	r5, [pc, #24]	@ (800a940 <_isatty_r+0x1c>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	602b      	str	r3, [r5, #0]
 800a930:	f7f6 fe0a 	bl	8001548 <_isatty>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_isatty_r+0x1a>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_isatty_r+0x1a>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	24004fec 	.word	0x24004fec

0800a944 <_sbrk_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d06      	ldr	r5, [pc, #24]	@ (800a960 <_sbrk_r+0x1c>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	f7f6 fe12 	bl	8001578 <_sbrk>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_sbrk_r+0x1a>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_sbrk_r+0x1a>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	24004fec 	.word	0x24004fec

0800a964 <_init>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	bf00      	nop
 800a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96a:	bc08      	pop	{r3}
 800a96c:	469e      	mov	lr, r3
 800a96e:	4770      	bx	lr

0800a970 <_fini>:
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	bf00      	nop
 800a974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a976:	bc08      	pop	{r3}
 800a978:	469e      	mov	lr, r3
 800a97a:	4770      	bx	lr
