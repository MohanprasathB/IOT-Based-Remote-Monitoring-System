
H745_ETH_RMII_MODBUS_AWS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e74c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ce4  0800e9f0  0800e9f0  0000f9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116d4  080116d4  0001329c  2**0
                  CONTENTS
  4 .ARM          00000008  080116d4  080116d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116dc  080116dc  0001329c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116dc  080116dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116e0  080116e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  24000000  080116e4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001dc  080118c0  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400023c  08011920  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006738  2400029c  08011980  0001329c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240069d4  08011980  000139d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001329c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003846c  00000000  00000000  000132ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004b11  00000000  00000000  0004b736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002bd0  00000000  00000000  00050248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000023aa  00000000  00000000  00052e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003fa35  00000000  00000000  000551c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003306b  00000000  00000000  00094bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a0938  00000000  00000000  000c7c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0026859a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d8f0  00000000  00000000  002685e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000a2  00000000  00000000  00275ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e9d4 	.word	0x0800e9d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	0800e9d4 	.word	0x0800e9d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <ModbusMaster_Init>:
extern UART_HandleTypeDef huart2;
unsigned char ModbusMaster_inbox[MODBUS_MASTER_INBOX_LENGTH];

/* Initialize Modbus USART and GPIO */
void ModbusMaster_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
    /* Initialize GPIO for RS-485 */
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

	    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4814      	ldr	r0, [pc, #80]	@ (8000c10 <ModbusMaster_Init+0x7c>)
 8000bbe:	f001 ff49 	bl	8002a54 <HAL_GPIO_Init>
    /* Initialize UART1 for Modbus communication */
    huart2.Instance = USART2;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bc4:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <ModbusMaster_Init+0x84>)
 8000bc6:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bce:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000be4:	220c      	movs	r2, #12
 8000be6:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf4:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <ModbusMaster_Init+0x80>)
 8000bf6:	f005 fad5 	bl	80061a4 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <ModbusMaster_Init+0x72>
    {
        printf("UART2 initialization failed!\n");
 8000c00:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <ModbusMaster_Init+0x88>)
 8000c02:	f00a fc4d 	bl	800b4a0 <puts>
    }
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	58020c00 	.word	0x58020c00
 8000c14:	240004bc 	.word	0x240004bc
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	0800e9f0 	.word	0x0800e9f0

08000c20 <ModbusMaster_CalculateCRC>:

/* Calculate CRC for Modbus frame */
unsigned short ModbusMaster_CalculateCRC(unsigned char *buffer, unsigned short length)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c30:	81fb      	strh	r3, [r7, #14]
    for (unsigned short pos = 0; pos < length; pos++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	81bb      	strh	r3, [r7, #12]
 8000c36:	e022      	b.n	8000c7e <ModbusMaster_CalculateCRC+0x5e>
    {
        crc ^= buffer[pos];
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	4053      	eors	r3, r2
 8000c46:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	e011      	b.n	8000c72 <ModbusMaster_CalculateCRC+0x52>
        {
            if (crc & 1)
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <ModbusMaster_CalculateCRC+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <ModbusMaster_CalculateCRC+0x74>)
 8000c60:	4053      	eors	r3, r2
 8000c62:	81fb      	strh	r3, [r7, #14]
 8000c64:	e002      	b.n	8000c6c <ModbusMaster_CalculateCRC+0x4c>
            else
                crc >>= 1;
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	085b      	lsrs	r3, r3, #1
 8000c6a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	ddea      	ble.n	8000c4e <ModbusMaster_CalculateCRC+0x2e>
    for (unsigned short pos = 0; pos < length; pos++)
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	81bb      	strh	r3, [r7, #12]
 8000c7e:	89ba      	ldrh	r2, [r7, #12]
 8000c80:	887b      	ldrh	r3, [r7, #2]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d3d8      	bcc.n	8000c38 <ModbusMaster_CalculateCRC+0x18>
        }
    }
    return crc;
 8000c86:	89fb      	ldrh	r3, [r7, #14]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	ffffa001 	.word	0xffffa001

08000c98 <ModbusMaster_SendRequest>:

/* Send a Modbus request */
void ModbusMaster_SendRequest(unsigned char slave_id, unsigned char function_code, unsigned short start_address, unsigned short data_length, unsigned short *data)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	4603      	mov	r3, r0
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	80bb      	strh	r3, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	807b      	strh	r3, [r7, #2]
    ModbusMaster_Tx_index = 0;
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	801a      	strh	r2, [r3, #0]

    /* Construct the Modbus frame */
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = slave_id;
 8000cbc:	4b49      	ldr	r3, [pc, #292]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	b291      	uxth	r1, r2
 8000cc4:	4a47      	ldr	r2, [pc, #284]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cc6:	8011      	strh	r1, [r2, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4a47      	ldr	r2, [pc, #284]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = function_code;
 8000cd0:	4b44      	ldr	r3, [pc, #272]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	b291      	uxth	r1, r2
 8000cd8:	4a42      	ldr	r2, [pc, #264]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cda:	8011      	strh	r1, [r2, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4a42      	ldr	r2, [pc, #264]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (start_address >> 8) & 0xFF;
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	b299      	uxth	r1, r3
 8000cea:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	b290      	uxth	r0, r2
 8000cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000cf4:	8010      	strh	r0, [r2, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	b2c9      	uxtb	r1, r1
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000cfc:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = start_address & 0xFF;
 8000cfe:	4b39      	ldr	r3, [pc, #228]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	b291      	uxth	r1, r2
 8000d06:	4a37      	ldr	r2, [pc, #220]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d08:	8011      	strh	r1, [r2, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	b2d9      	uxtb	r1, r3
 8000d10:	4b35      	ldr	r3, [pc, #212]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d12:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (data_length >> 8) & 0xFF;
 8000d14:	887b      	ldrh	r3, [r7, #2]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b299      	uxth	r1, r3
 8000d1a:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	b290      	uxth	r0, r2
 8000d22:	4a30      	ldr	r2, [pc, #192]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d24:	8010      	strh	r0, [r2, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	b2c9      	uxtb	r1, r1
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d2c:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = data_length & 0xFF;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	b291      	uxth	r1, r2
 8000d36:	4a2b      	ldr	r2, [pc, #172]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d38:	8011      	strh	r1, [r2, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	b2d9      	uxtb	r1, r3
 8000d40:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d42:	5499      	strb	r1, [r3, r2]

    /* Calculate CRC */
    unsigned short crc = ModbusMaster_CalculateCRC(ModbusMaster_outbox, ModbusMaster_Tx_index);
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4827      	ldr	r0, [pc, #156]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d4c:	f7ff ff68 	bl	8000c20 <ModbusMaster_CalculateCRC>
 8000d50:	4603      	mov	r3, r0
 8000d52:	817b      	strh	r3, [r7, #10]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = crc & 0xFF;
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	b291      	uxth	r1, r2
 8000d5c:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d5e:	8011      	strh	r1, [r2, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	897b      	ldrh	r3, [r7, #10]
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d68:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (crc >> 8) & 0xFF;
 8000d6a:	897b      	ldrh	r3, [r7, #10]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	b299      	uxth	r1, r3
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	b290      	uxth	r0, r2
 8000d78:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000d7a:	8010      	strh	r0, [r2, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	b2c9      	uxtb	r1, r1
 8000d80:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d82:	5499      	strb	r1, [r3, r2]

    // Debug
    printf("Modbus Request: ");
 8000d84:	4819      	ldr	r0, [pc, #100]	@ (8000dec <ModbusMaster_SendRequest+0x154>)
 8000d86:	f00a fb1b 	bl	800b3c0 <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e00a      	b.n	8000da6 <ModbusMaster_SendRequest+0x10e>
    {
        printf("%02X ", ModbusMaster_outbox[i]);
 8000d90:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4815      	ldr	r0, [pc, #84]	@ (8000df0 <ModbusMaster_SendRequest+0x158>)
 8000d9c:	f00a fb10 	bl	800b3c0 <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4293      	cmp	r3, r2
 8000db0:	dbee      	blt.n	8000d90 <ModbusMaster_SendRequest+0xf8>
    }
    printf("\n");
 8000db2:	200a      	movs	r0, #10
 8000db4:	f00a fb16 	bl	800b3e4 <putchar>

    /* Enable TX and send the frame */
    RS485_TX_ENABLE();
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <ModbusMaster_SendRequest+0x15c>)
 8000dbe:	f001 fff9 	bl	8002db4 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart2, ModbusMaster_outbox, ModbusMaster_Tx_index, HAL_MAX_DELAY);
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <ModbusMaster_SendRequest+0x14c>)
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <ModbusMaster_SendRequest+0x150>)
 8000dcc:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <ModbusMaster_SendRequest+0x160>)
 8000dce:	f005 fa39 	bl	8006244 <HAL_UART_Transmit>
    RS485_RX_ENABLE();
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <ModbusMaster_SendRequest+0x15c>)
 8000dd8:	f001 ffec 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	240002b8 	.word	0x240002b8
 8000de8:	240002c0 	.word	0x240002c0
 8000dec:	0800ea10 	.word	0x0800ea10
 8000df0:	0800ea24 	.word	0x0800ea24
 8000df4:	58020c00 	.word	0x58020c00
 8000df8:	240004bc 	.word	0x240004bc

08000dfc <ModbusMaster_ReceiveResponse>:

unsigned short ModbusMaster_ReceiveResponse(unsigned char *buffer, unsigned short length)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Receive(&huart2, buffer, length, MODBUS_MASTER_TIMEOUT_MS) == HAL_OK)
 8000e08:	887a      	ldrh	r2, [r7, #2]
 8000e0a:	2364      	movs	r3, #100	@ 0x64
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	4827      	ldr	r0, [pc, #156]	@ (8000eac <ModbusMaster_ReceiveResponse+0xb0>)
 8000e10:	f005 faa6 	bl	8006360 <HAL_UART_Receive>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d13f      	bne.n	8000e9a <ModbusMaster_ReceiveResponse+0x9e>
    {
        // Debug: Print the received buffer
        printf("Received Buffer: ");
 8000e1a:	4825      	ldr	r0, [pc, #148]	@ (8000eb0 <ModbusMaster_ReceiveResponse+0xb4>)
 8000e1c:	f00a fad0 	bl	800b3c0 <iprintf>
        for (int i = 0; i < length; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e00a      	b.n	8000e3c <ModbusMaster_ReceiveResponse+0x40>
            printf("%02X ", buffer[i]);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4820      	ldr	r0, [pc, #128]	@ (8000eb4 <ModbusMaster_ReceiveResponse+0xb8>)
 8000e32:	f00a fac5 	bl	800b3c0 <iprintf>
        for (int i = 0; i < length; i++) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <ModbusMaster_ReceiveResponse+0x2a>
        }
        printf("\n");
 8000e44:	200a      	movs	r0, #10
 8000e46:	f00a facd 	bl	800b3e4 <putchar>

        // Validate CRC
        unsigned short crc_received = (buffer[length - 1] << 8) | buffer[length - 2];
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	440b      	add	r3, r1
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	817b      	strh	r3, [r7, #10]
        unsigned short crc_calculated = ModbusMaster_CalculateCRC(buffer, length - 2);
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fed4 	bl	8000c20 <ModbusMaster_CalculateCRC>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	813b      	strh	r3, [r7, #8]

        // Debug: Print the CRC values
        printf("CRC Received: 0x%04X, CRC Calculated: 0x%04X\n", crc_received, crc_calculated);
 8000e7c:	897b      	ldrh	r3, [r7, #10]
 8000e7e:	893a      	ldrh	r2, [r7, #8]
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <ModbusMaster_ReceiveResponse+0xbc>)
 8000e84:	f00a fa9c 	bl	800b3c0 <iprintf>

        if (crc_received == crc_calculated)
 8000e88:	897a      	ldrh	r2, [r7, #10]
 8000e8a:	893b      	ldrh	r3, [r7, #8]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d104      	bne.n	8000e9a <ModbusMaster_ReceiveResponse+0x9e>
        {
            ModbusMaster_FrameComplete_Flag = 1;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <ModbusMaster_ReceiveResponse+0xc0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	801a      	strh	r2, [r3, #0]
            return length;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	e003      	b.n	8000ea2 <ModbusMaster_ReceiveResponse+0xa6>
        }
    }

    ModbusMaster_TimeoutFlag = 1;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <ModbusMaster_ReceiveResponse+0xc4>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	801a      	strh	r2, [r3, #0]
    return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	240004bc 	.word	0x240004bc
 8000eb0:	0800ea2c 	.word	0x0800ea2c
 8000eb4:	0800ea24 	.word	0x0800ea24
 8000eb8:	0800ea40 	.word	0x0800ea40
 8000ebc:	240002bc 	.word	0x240002bc
 8000ec0:	240002ba 	.word	0x240002ba

08000ec4 <ModbusMaster_ReadInputRegisters>:

/* Read Input Registers */
void ModbusMaster_ReadInputRegisters(unsigned char slave_id, unsigned short start_address, unsigned short data_length)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	807b      	strh	r3, [r7, #2]
     ModbusMaster_SendRequest(slave_id, MODBUS_FC_READ_INPUT_REGISTERS, start_address, data_length, NULL);
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	79f8      	ldrb	r0, [r7, #7]
 8000edc:	2100      	movs	r1, #0
 8000ede:	9100      	str	r1, [sp, #0]
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	f7ff fed9 	bl	8000c98 <ModbusMaster_SendRequest>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <_write>:

uint64_t mg_millis(void) {
  return HAL_GetTick();
}

int _write(int fd, unsigned char *buf, int len) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d002      	beq.n	8000f08 <_write+0x18>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d107      	bne.n	8000f18 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <_write+0x34>)
 8000f14:	f005 f996 	bl	8006244 <HAL_UART_Transmit>
  }
  return len;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000550 	.word	0x24000550

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f001 f802 	bl	8001f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f82e 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f9a6 	bl	8001284 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f38:	f000 f8a6 	bl	8001088 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f3c:	f000 f956 	bl	80011ec <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 f904 	bl	800114c <MX_USART2_UART_Init>
  MX_RNG_Init();
 8000f44:	f000 f8ec 	bl	8001120 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ModbusMaster_Init();
 8000f48:	f7ff fe24 	bl	8000b94 <ModbusMaster_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4c:	f006 fc0a 	bl	8007764 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f50:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <main+0x50>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <main+0x54>)
 8000f56:	f006 fc4f 	bl	80077f8 <osThreadNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <main+0x58>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000f60:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <main+0x5c>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <main+0x60>)
 8000f66:	f006 fc47 	bl	80077f8 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <main+0x64>)
 8000f6e:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */

  osKernelStart();
 8000f70:	f006 fc1c 	bl	80077ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <main+0x4c>
 8000f78:	08011228 	.word	0x08011228
 8000f7c:	080013b5 	.word	0x080013b5
 8000f80:	240005e4 	.word	0x240005e4
 8000f84:	0801124c 	.word	0x0801124c
 8000f88:	0800146d 	.word	0x0800146d
 8000f8c:	240005e8 	.word	0x240005e8

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	@ 0x70
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	224c      	movs	r2, #76	@ 0x4c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00a fb98 	bl	800b6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00a fb92 	bl	800b6d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f001 ff19 	bl	8002de8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbe:	4a30      	ldr	r2, [pc, #192]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <SystemClock_Config+0xf0>)
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe8:	bf00      	nop
 8000fea:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <SystemClock_Config+0xf4>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ff6:	d1f8      	bne.n	8000fea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2321      	movs	r3, #33	@ 0x21
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	2302      	movs	r3, #2
 800100c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001012:	2364      	movs	r3, #100	@ 0x64
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001022:	230c      	movs	r3, #12
 8001024:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001026:	2300      	movs	r3, #0
 8001028:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4618      	mov	r0, r3
 8001034:	f001 ff32 	bl	8002e9c <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800103e:	f000 fa31 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	233f      	movs	r3, #63	@ 0x3f
 8001044:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2303      	movs	r3, #3
 8001048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800104e:	2308      	movs	r3, #8
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001052:	2340      	movs	r3, #64	@ 0x40
 8001054:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001056:	2340      	movs	r3, #64	@ 0x40
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800105a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001060:	2340      	movs	r3, #64	@ 0x40
 8001062:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fb71 	bl	8003750 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001074:	f000 fa16 	bl	80014a4 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3770      	adds	r7, #112	@ 0x70
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58000400 	.word	0x58000400
 8001084:	58024800 	.word	0x58024800

08001088 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <MX_ETH_Init+0x80>)
 800108e:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <MX_ETH_Init+0x84>)
 8001090:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_ETH_Init+0x88>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001098:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <MX_ETH_Init+0x88>)
 800109a:	2280      	movs	r2, #128	@ 0x80
 800109c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_ETH_Init+0x88>)
 80010a0:	22e1      	movs	r2, #225	@ 0xe1
 80010a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <MX_ETH_Init+0x88>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_ETH_Init+0x88>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_ETH_Init+0x88>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_ETH_Init+0x80>)
 80010b8:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <MX_ETH_Init+0x88>)
 80010ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_ETH_Init+0x80>)
 80010be:	2201      	movs	r2, #1
 80010c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_ETH_Init+0x80>)
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_ETH_Init+0x8c>)
 80010c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_ETH_Init+0x80>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <MX_ETH_Init+0x90>)
 80010cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_ETH_Init+0x80>)
 80010d0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80010d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010d6:	480c      	ldr	r0, [pc, #48]	@ (8001108 <MX_ETH_Init+0x80>)
 80010d8:	f001 f888 	bl	80021ec <HAL_ETH_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010e2:	f000 f9df 	bl	80014a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010e6:	2238      	movs	r2, #56	@ 0x38
 80010e8:	2100      	movs	r1, #0
 80010ea:	480c      	ldr	r0, [pc, #48]	@ (800111c <MX_ETH_Init+0x94>)
 80010ec:	f00a faf2 	bl	800b6d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_ETH_Init+0x94>)
 80010f2:	2221      	movs	r2, #33	@ 0x21
 80010f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_ETH_Init+0x94>)
 80010f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_ETH_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	240003f8 	.word	0x240003f8
 800110c:	40028000 	.word	0x40028000
 8001110:	240005ec 	.word	0x240005ec
 8001114:	2400023c 	.word	0x2400023c
 8001118:	240001dc 	.word	0x240001dc
 800111c:	240003c0 	.word	0x240003c0

08001120 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <MX_RNG_Init+0x24>)
 8001126:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <MX_RNG_Init+0x28>)
 8001128:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_RNG_Init+0x24>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_RNG_Init+0x24>)
 8001132:	f004 fd07 	bl	8005b44 <HAL_RNG_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800113c:	f000 f9b2 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	240004a8 	.word	0x240004a8
 8001148:	48021800 	.word	0x48021800

0800114c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001152:	4a25      	ldr	r2, [pc, #148]	@ (80011e8 <MX_USART2_UART_Init+0x9c>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001194:	2300      	movs	r3, #0
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 800119c:	f006 f930 	bl	8007400 <HAL_RS485Ex_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80011a6:	f000 f97d 	bl	80014a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 80011ae:	f006 f9ca 	bl	8007546 <HAL_UARTEx_SetTxFifoThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 80011b8:	f000 f974 	bl	80014a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 80011c0:	f006 f9ff 	bl	80075c2 <HAL_UARTEx_SetRxFifoThreshold>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80011ca:	f000 f96b 	bl	80014a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 80011d0:	f006 f980 	bl	80074d4 <HAL_UARTEx_DisableFifoMode>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 80011da:	f000 f963 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	240004bc 	.word	0x240004bc
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <MX_USART3_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	@ (8001280 <MX_USART3_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <MX_USART3_UART_Init+0x90>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001236:	f004 ffb5 	bl	80061a4 <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 f930 	bl	80014a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_USART3_UART_Init+0x90>)
 8001248:	f006 f97d 	bl	8007546 <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f000 f927 	bl	80014a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	@ (800127c <MX_USART3_UART_Init+0x90>)
 800125a:	f006 f9b2 	bl	80075c2 <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f000 f91e 	bl	80014a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_USART3_UART_Init+0x90>)
 800126a:	f006 f933 	bl	80074d4 <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 f916 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24000550 	.word	0x24000550
 8001280:	40004800 	.word	0x40004800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	@ 0x30
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <MX_GPIO_Init+0x124>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b3f      	ldr	r3, [pc, #252]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a3a      	ldr	r2, [pc, #232]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b34      	ldr	r3, [pc, #208]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b30      	ldr	r3, [pc, #192]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a2b      	ldr	r2, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0x124>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0x124>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <MX_GPIO_Init+0x124>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <MX_GPIO_Init+0x124>)
 800131a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_GPIO_Init+0x124>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_GPIO_Init+0x124>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a1c      	ldr	r2, [pc, #112]	@ (80013a8 <MX_GPIO_Init+0x124>)
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_GPIO_Init+0x124>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001354:	4815      	ldr	r0, [pc, #84]	@ (80013ac <MX_GPIO_Init+0x128>)
 8001356:	f001 fd2d 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2102      	movs	r1, #2
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <MX_GPIO_Init+0x12c>)
 8001360:	f001 fd28 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8001364:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <MX_GPIO_Init+0x128>)
 800137e:	f001 fb69 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_GPIO_Init+0x12c>)
 800139a:	f001 fb5b 	bl	8002a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	@ 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020400 	.word	0x58020400
 80013b0:	58021000 	.word	0x58021000

080013b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	      printf("Task1\r\n");
 80013bc:	4824      	ldr	r0, [pc, #144]	@ (8001450 <StartDefaultTask+0x9c>)
 80013be:	f00a f86f 	bl	800b4a0 <puts>
	      // Send Modbus query: Slave ID 1, Function Code 4, Address 0, Length 1
	      ModbusMaster_ReadInputRegisters(1,2058, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f640 010a 	movw	r1, #2058	@ 0x80a
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fd7b 	bl	8000ec4 <ModbusMaster_ReadInputRegisters>

	      // Receive response buffer (7 bytes expected)
	      uint8_t responseBuffer[7];
	      unsigned short responseLength = ModbusMaster_ReceiveResponse(responseBuffer, sizeof(responseBuffer));
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2107      	movs	r1, #7
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd11 	bl	8000dfc <ModbusMaster_ReceiveResponse>
 80013da:	4603      	mov	r3, r0
 80013dc:	82fb      	strh	r3, [r7, #22]

	      // Check response status
	      if (ModbusMaster_FrameComplete_Flag)
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <StartDefaultTask+0xa0>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d020      	beq.n	8001428 <StartDefaultTask+0x74>
	      {
	    	  uint16_t registerValue = (responseBuffer[3] << 8) | responseBuffer[4];
 80013e6:	7afb      	ldrb	r3, [r7, #11]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	82bb      	strh	r3, [r7, #20]
	    	  float scaledValue = registerValue * scaling_factor;
 80013f6:	8abb      	ldrh	r3, [r7, #20]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001400:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001458 <StartDefaultTask+0xa4>
 8001404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001408:	edc7 7a04 	vstr	s15, [r7, #16]
	    	  printf("Input Register Raw: %u, Scaled: %.2f\r\n", registerValue, scaledValue);
 800140c:	8ab9      	ldrh	r1, [r7, #20]
 800140e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001412:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001416:	ec53 2b17 	vmov	r2, r3, d7
 800141a:	4810      	ldr	r0, [pc, #64]	@ (800145c <StartDefaultTask+0xa8>)
 800141c:	f009 ffd0 	bl	800b3c0 <iprintf>
	    	  ModbusMaster_FrameComplete_Flag = 0;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <StartDefaultTask+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	801a      	strh	r2, [r3, #0]
 8001426:	e00d      	b.n	8001444 <StartDefaultTask+0x90>
	      }
	      else if (ModbusMaster_TimeoutFlag)
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <StartDefaultTask+0xac>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <StartDefaultTask+0x8a>
	      {
	        printf("Modbus Timeout!\r\n");
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <StartDefaultTask+0xb0>)
 8001432:	f00a f835 	bl	800b4a0 <puts>
	        ModbusMaster_TimeoutFlag = 0; // Reset flag
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <StartDefaultTask+0xac>)
 8001438:	2200      	movs	r2, #0
 800143a:	801a      	strh	r2, [r3, #0]
 800143c:	e002      	b.n	8001444 <StartDefaultTask+0x90>
	      }
	      else
	      {
	        printf("Invalid Response (CRC Error)\r\n");
 800143e:	480a      	ldr	r0, [pc, #40]	@ (8001468 <StartDefaultTask+0xb4>)
 8001440:	f00a f82e 	bl	800b4a0 <puts>
	      }

	      osDelay(1000); // Wait 1 second before next query
 8001444:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001448:	f006 fa68 	bl	800791c <osDelay>
  {
 800144c:	e7b6      	b.n	80013bc <StartDefaultTask+0x8>
 800144e:	bf00      	nop
 8001450:	0800ea88 	.word	0x0800ea88
 8001454:	240002bc 	.word	0x240002bc
 8001458:	3c23d70a 	.word	0x3c23d70a
 800145c:	0800ea90 	.word	0x0800ea90
 8001460:	240002ba 	.word	0x240002ba
 8001464:	0800eab8 	.word	0x0800eab8
 8001468:	0800eacc 	.word	0x0800eacc

0800146c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001478:	f006 fa50 	bl	800791c <osDelay>
 800147c:	e7fa      	b.n	8001474 <StartTask02+0x8>
	...

08001480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001492:	f000 fd8b 	bl	8001fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40001000 	.word	0x40001000

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <Error_Handler+0x8>

080014b0 <mg_tcpip_qwrite>:
}

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3334      	adds	r3, #52	@ 0x34
 80014c0:	f107 0114 	add.w	r1, r7, #20
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f835 	bl	8001536 <mg_queue_book>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d811      	bhi.n	80014f8 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	f00a f9f1 	bl	800b8c2 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3334      	adds	r3, #52	@ 0x34
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f87c 	bl	80015e4 <mg_queue_add>
    ifp->nrecv++;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	671a      	str	r2, [r3, #112]	@ 0x70
  } else {
    ifp->ndrop++;
  }
}
 80014f6:	e004      	b.n	8001502 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <mg_queue_write_len>:
  memcpy(&n, q->buf + q->tail, sizeof(n));
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
}

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4413      	add	r3, r2
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8001526:	f3bf 8f5b 	dmb	ish
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	2308      	movs	r3, #8
 8001548:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	d312      	bcc.n	800157c <mg_queue_book+0x46>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	441a      	add	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	441a      	add	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d808      	bhi.n	800157c <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	1ad2      	subs	r2, r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e011      	b.n	80015a0 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	429a      	cmp	r2, r3
 8001586:	d30b      	bcc.n	80015a0 <mg_queue_book+0x6a>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	429a      	cmp	r2, r3
 8001590:	d206      	bcs.n	80015a0 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8001592:	2100      	movs	r1, #0
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff ffb8 	bl	800150a <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	441a      	add	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	441a      	add	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <mg_queue_book+0x8e>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <mg_queue_book+0xa4>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	3304      	adds	r3, #4
 80015d4:	441a      	add	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	601a      	str	r2, [r3, #0]
  return space;
 80015da:	697b      	ldr	r3, [r7, #20]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <mg_queue_add>:
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
  assert(q->tail + len <= q->size);
  return len;
}

void mg_queue_add(struct mg_queue *q, size_t len) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <mg_queue_add+0x1e>
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <mg_queue_add+0x60>)
 80015f6:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <mg_queue_add+0x64>)
 80015f8:	f641 21ef 	movw	r1, #6895	@ 0x1aef
 80015fc:	4813      	ldr	r0, [pc, #76]	@ (800164c <mg_queue_add+0x68>)
 80015fe:	f008 fe63 	bl	800a2c8 <__assert_func>
  mg_queue_write_len(q, len);
 8001602:	6839      	ldr	r1, [r7, #0]
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff80 	bl	800150a <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	f103 0208 	add.w	r2, r3, #8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d906      	bls.n	800162c <mg_queue_add+0x48>
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <mg_queue_add+0x6c>)
 8001620:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <mg_queue_add+0x64>)
 8001622:	f641 21f1 	movw	r1, #6897	@ 0x1af1
 8001626:	4809      	ldr	r0, [pc, #36]	@ (800164c <mg_queue_add+0x68>)
 8001628:	f008 fe4e 	bl	800a2c8 <__assert_func>
  q->head += len + sizeof(uint32_t);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	1d1a      	adds	r2, r3, #4
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60da      	str	r2, [r3, #12]
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	080103b0 	.word	0x080103b0
 8001648:	08011270 	.word	0x08011270
 800164c:	0800eaec 	.word	0x0800eaec
 8001650:	080103b8 	.word	0x080103b8

08001654 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <eth_read_phy+0x70>)
 8001666:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <eth_read_phy+0x70>)
 800166c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001670:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <eth_read_phy+0x70>)
 8001676:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	0559      	lsls	r1, r3, #21
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	430b      	orrs	r3, r1
 8001684:	4313      	orrs	r3, r2
 8001686:	4a0f      	ldr	r2, [pc, #60]	@ (80016c4 <eth_read_phy+0x70>)
 8001688:	f043 030c 	orr.w	r3, r3, #12
 800168c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <eth_read_phy+0x70>)
 8001692:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001696:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <eth_read_phy+0x70>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 80016a0:	bf00      	nop
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <eth_read_phy+0x70>)
 80016a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f8      	bne.n	80016a2 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <eth_read_phy+0x70>)
 80016b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80016b6:	b29b      	uxth	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40028000 	.word	0x40028000

080016c8 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	460b      	mov	r3, r1
 80016d4:	71bb      	strb	r3, [r7, #6]
 80016d6:	4613      	mov	r3, r2
 80016d8:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 80016da:	4a18      	ldr	r2, [pc, #96]	@ (800173c <eth_write_phy+0x74>)
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <eth_write_phy+0x74>)
 80016e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016e8:	4a14      	ldr	r2, [pc, #80]	@ (800173c <eth_write_phy+0x74>)
 80016ea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80016ee:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <eth_write_phy+0x74>)
 80016f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	0559      	lsls	r1, r3, #21
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	430b      	orrs	r3, r1
 8001702:	4313      	orrs	r3, r2
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <eth_write_phy+0x74>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <eth_write_phy+0x74>)
 8001710:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001714:	4a09      	ldr	r2, [pc, #36]	@ (800173c <eth_write_phy+0x74>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 800171e:	bf00      	nop
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <eth_write_phy+0x74>)
 8001722:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f8      	bne.n	8001720 <eth_write_phy+0x58>
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40028000 	.word	0x40028000

08001740 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8001746:	4b40      	ldr	r3, [pc, #256]	@ (8001848 <ETH_IRQHandler+0x108>)
 8001748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	d065      	beq.n	8001824 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8001758:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <ETH_IRQHandler+0x108>)
 800175a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175e:	461a      	mov	r2, r3
 8001760:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001764:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	e055      	b.n	800181a <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 800176e:	4b37      	ldr	r3, [pc, #220]	@ (800184c <ETH_IRQHandler+0x10c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a37      	ldr	r2, [pc, #220]	@ (8001850 <ETH_IRQHandler+0x110>)
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	330c      	adds	r3, #12
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db50      	blt.n	8001822 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 8001780:	4b32      	ldr	r3, [pc, #200]	@ (800184c <ETH_IRQHandler+0x10c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <ETH_IRQHandler+0x110>)
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	330c      	adds	r3, #12
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001796:	d128      	bne.n	80017ea <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8001798:	4b2c      	ldr	r3, [pc, #176]	@ (800184c <ETH_IRQHandler+0x10c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2c      	ldr	r2, [pc, #176]	@ (8001850 <ETH_IRQHandler+0x110>)
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	330c      	adds	r3, #12
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d11d      	bne.n	80017ea <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <ETH_IRQHandler+0x10c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a27      	ldr	r2, [pc, #156]	@ (8001850 <ETH_IRQHandler+0x110>)
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	330c      	adds	r3, #12
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017c0:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <ETH_IRQHandler+0x10c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f240 6204 	movw	r2, #1540	@ 0x604
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <ETH_IRQHandler+0x114>)
 80017d0:	1898      	adds	r0, r3, r2
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d902      	bls.n	80017de <ETH_IRQHandler+0x9e>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3b04      	subs	r3, #4
 80017dc:	e000      	b.n	80017e0 <ETH_IRQHandler+0xa0>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <ETH_IRQHandler+0x118>)
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fe63 	bl	80014b0 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <ETH_IRQHandler+0x10c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <ETH_IRQHandler+0x110>)
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	330c      	adds	r3, #12
 80017f6:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80017fa:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <ETH_IRQHandler+0x10c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <ETH_IRQHandler+0x10c>)
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <ETH_IRQHandler+0x10c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d902      	bls.n	8001814 <ETH_IRQHandler+0xd4>
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <ETH_IRQHandler+0x10c>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d9a6      	bls.n	800176e <ETH_IRQHandler+0x2e>
 8001820:	e000      	b.n	8001824 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8001822:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <ETH_IRQHandler+0x108>)
 8001826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182a:	461a      	mov	r2, r3
 800182c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001830:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8001838:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800183c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40028000 	.word	0x40028000
 800184c:	24001e48 	.word	0x24001e48
 8001850:	240005f4 	.word	0x240005f4
 8001854:	24000634 	.word	0x24000634
 8001858:	24001e44 	.word	0x24001e44
 800185c:	24000624 	.word	0x24000624

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HAL_MspInit+0x38>)
 8001868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_MspInit+0x38>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001876:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_MspInit+0x38>)
 8001878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	210f      	movs	r1, #15
 8001888:	f06f 0001 	mvn.w	r0, #1
 800188c:	f000 fc86 	bl	800219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	58024400 	.word	0x58024400

0800189c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	@ 0x38
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a59      	ldr	r2, [pc, #356]	@ (8001a20 <HAL_ETH_MspInit+0x184>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 80ab 	bne.w	8001a16 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80018c0:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018c6:	4a57      	ldr	r2, [pc, #348]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018d0:	4b54      	ldr	r3, [pc, #336]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018da:	623b      	str	r3, [r7, #32]
 80018dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80018de:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018fc:	4b49      	ldr	r3, [pc, #292]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 80018fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001902:	4a48      	ldr	r2, [pc, #288]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001908:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800190c:	4b45      	ldr	r3, [pc, #276]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800190e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	4a40      	ldr	r2, [pc, #256]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800192a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	4a39      	ldr	r2, [pc, #228]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001948:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001966:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_ETH_MspInit+0x188>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001992:	2332      	movs	r3, #50	@ 0x32
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a2:	230b      	movs	r3, #11
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <HAL_ETH_MspInit+0x18c>)
 80019ae:	f001 f851 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80019b2:	2386      	movs	r3, #134	@ 0x86
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c2:	230b      	movs	r3, #11
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4817      	ldr	r0, [pc, #92]	@ (8001a2c <HAL_ETH_MspInit+0x190>)
 80019ce:	f001 f841 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e4:	230b      	movs	r3, #11
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4810      	ldr	r0, [pc, #64]	@ (8001a30 <HAL_ETH_MspInit+0x194>)
 80019f0:	f001 f830 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80019f4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a06:	230b      	movs	r3, #11
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4808      	ldr	r0, [pc, #32]	@ (8001a34 <HAL_ETH_MspInit+0x198>)
 8001a12:	f001 f81f 	bl	8002a54 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001a16:	bf00      	nop
 8001a18:	3738      	adds	r7, #56	@ 0x38
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40028000 	.word	0x40028000
 8001a24:	58024400 	.word	0x58024400
 8001a28:	58020800 	.word	0x58020800
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	58020400 	.word	0x58020400
 8001a34:	58021800 	.word	0x58021800

08001a38 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b4      	sub	sp, #208	@ 0xd0
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	22c0      	movs	r2, #192	@ 0xc0
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f009 fe43 	bl	800b6d4 <memset>
  if(hrng->Instance==RNG)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <HAL_RNG_MspInit+0x6c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d121      	bne.n	8001a9c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001a58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fa3c 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001a7a:	f7ff fd13 	bl	80014a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_RNG_MspInit+0x70>)
 8001a80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a84:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_RNG_MspInit+0x70>)
 8001a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a8a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_RNG_MspInit+0x70>)
 8001a90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001a9c:	bf00      	nop
 8001a9e:	37d0      	adds	r7, #208	@ 0xd0
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	48021800 	.word	0x48021800
 8001aa8:	58024400 	.word	0x58024400

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0be      	sub	sp, #248	@ 0xf8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	22c0      	movs	r2, #192	@ 0xc0
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f009 fe01 	bl	800b6d4 <memset>
  if(huart->Instance==USART2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5f      	ldr	r2, [pc, #380]	@ (8001c54 <HAL_UART_MspInit+0x1a8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d16a      	bne.n	8001bb2 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001adc:	f04f 0202 	mov.w	r2, #2
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 f9fa 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001afe:	f7ff fcd1 	bl	80014a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b02:	4b55      	ldr	r3, [pc, #340]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b12:	4b51      	ldr	r3, [pc, #324]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b4d      	ldr	r3, [pc, #308]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b26:	4a4c      	ldr	r2, [pc, #304]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b30:	4b49      	ldr	r3, [pc, #292]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	4b46      	ldr	r3, [pc, #280]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b44:	4a44      	ldr	r2, [pc, #272]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b4e:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD4     ------> USART2_DE
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b74:	2307      	movs	r3, #7
 8001b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4836      	ldr	r0, [pc, #216]	@ (8001c5c <HAL_UART_MspInit+0x1b0>)
 8001b82:	f000 ff67 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b86:	2330      	movs	r3, #48	@ 0x30
 8001b88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482d      	ldr	r0, [pc, #180]	@ (8001c60 <HAL_UART_MspInit+0x1b4>)
 8001bac:	f000 ff52 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bb0:	e04b      	b.n	8001c4a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <HAL_UART_MspInit+0x1b8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d146      	bne.n	8001c4a <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bbc:	f04f 0202 	mov.w	r2, #2
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 f98a 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001bde:	f7ff fc61 	bl	80014a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001bea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c00:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c06:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_UART_MspInit+0x1ac>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <HAL_UART_MspInit+0x1b4>)
 8001c46:	f000 ff05 	bl	8002a54 <HAL_GPIO_Init>
}
 8001c4a:	bf00      	nop
 8001c4c:	37f8      	adds	r7, #248	@ 0xf8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40004400 	.word	0x40004400
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020000 	.word	0x58020000
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	40004800 	.word	0x40004800

08001c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b090      	sub	sp, #64	@ 0x40
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	d827      	bhi.n	8001cc6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	2036      	movs	r0, #54	@ 0x36
 8001c7c:	f000 fa8e 	bl	800219c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c80:	2036      	movs	r0, #54	@ 0x36
 8001c82:	f000 faa5 	bl	80021d0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001c86:	4a29      	ldr	r2, [pc, #164]	@ (8001d2c <HAL_InitTick+0xc4>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <HAL_InitTick+0xc8>)
 8001c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c92:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <HAL_InitTick+0xc8>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_InitTick+0xc8>)
 8001c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001caa:	f107 0210 	add.w	r2, r7, #16
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 f8d7 	bl	8003e68 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d106      	bne.n	8001cd2 <HAL_InitTick+0x6a>
 8001cc4:	e001      	b.n	8001cca <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e02b      	b.n	8001d22 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cca:	f002 f8a1 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8001cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001cd0:	e004      	b.n	8001cdc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cd2:	f002 f89d 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cde:	4a15      	ldr	r2, [pc, #84]	@ (8001d34 <HAL_InitTick+0xcc>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001cec:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <HAL_InitTick+0xd4>)
 8001cee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001cf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cf6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d0a:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001d0c:	f003 ff7c 	bl	8005c08 <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d104      	bne.n	8001d20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d16:	4808      	ldr	r0, [pc, #32]	@ (8001d38 <HAL_InitTick+0xd0>)
 8001d18:	f003 ffd8 	bl	8005ccc <HAL_TIM_Base_Start_IT>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	e000      	b.n	8001d22 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3740      	adds	r7, #64	@ 0x40
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24000008 	.word	0x24000008
 8001d30:	58024400 	.word	0x58024400
 8001d34:	431bde83 	.word	0x431bde83
 8001d38:	24001e4c 	.word	0x24001e4c
 8001d3c:	40001000 	.word	0x40001000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <NMI_Handler+0x4>

08001d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <TIM6_DAC_IRQHandler+0x10>)
 8001d7e:	f004 f81d 	bl	8005dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24001e4c 	.word	0x24001e4c

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_kill>:

int _kill(int pid, int sig)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da6:	f009 fd5f 	bl	800b868 <__errno>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2216      	movs	r2, #22
 8001dae:	601a      	str	r2, [r3, #0]
  return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_exit>:

void _exit (int status)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffe7 	bl	8001d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dce:	bf00      	nop
 8001dd0:	e7fd      	b.n	8001dce <_exit+0x12>

08001dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e00a      	b.n	8001dfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de4:	f3af 8000 	nop.w
 8001de8:	4601      	mov	r1, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	60ba      	str	r2, [r7, #8]
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf0      	blt.n	8001de4 <_read+0x12>
  }

  return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_close>:
//	}
  return len;
}

int _close(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e34:	605a      	str	r2, [r3, #4]
  return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_isatty>:

int _isatty(int file)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f009 fce0 	bl	800b868 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	24080000 	.word	0x24080000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	24001e98 	.word	0x24001e98
 8001edc:	240069d8 	.word	0x240069d8

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee4:	f7fe fdc0 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eea:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f00:	4c0a      	ldr	r4, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f009 fcb1 	bl	800b874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7ff f809 	bl	8000f28 <main>
  bx  lr
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f20:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001f24:	080116e4 	.word	0x080116e4
  ldr r2, =_sbss
 8001f28:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 8001f2c:	240069d4 	.word	0x240069d4

08001f30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC3_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f000 f923 	bl	8002186 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f40:	f001 fdbc 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_Init+0x68>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	4913      	ldr	r1, [pc, #76]	@ (8001fa0 <HAL_Init+0x6c>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <HAL_Init+0x68>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <HAL_Init+0x6c>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <HAL_Init+0x70>)
 8001f76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f78:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_Init+0x74>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f7ff fe72 	bl	8001c68 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e002      	b.n	8001f94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8e:	f7ff fc67 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	08011218 	.word	0x08011218
 8001fa4:	24000004 	.word	0x24000004
 8001fa8:	24000000 	.word	0x24000000

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2400000c 	.word	0x2400000c
 8001fd0:	24001e9c 	.word	0x24001e9c

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	24001e9c 	.word	0x24001e9c

08001fec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_GetREVID+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	5c001000 	.word	0x5c001000

08002004 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002014:	4904      	ldr	r1, [pc, #16]	@ (8002028 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	58000400 	.word	0x58000400

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <__NVIC_SetPriorityGrouping+0x40>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	4313      	orrs	r3, r2
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	@ (800206c <__NVIC_SetPriorityGrouping+0x40>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00
 8002070:	05fa0000 	.word	0x05fa0000

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4c 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021aa:	f7ff ff63 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f7ff ffb3 	bl	8002120 <NVIC_EncodePriority>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff82 	bl	80020cc <__NVIC_SetPriority>
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff56 	bl	8002090 <__NVIC_EnableIRQ>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e3      	b.n	80023c6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2223      	movs	r2, #35	@ 0x23
 800220c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fb43 	bl	800189c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b6e      	ldr	r3, [pc, #440]	@ (80023d0 <HAL_ETH_Init+0x1e4>)
 8002218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221c:	4a6c      	ldr	r2, [pc, #432]	@ (80023d0 <HAL_ETH_Init+0x1e4>)
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002226:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <HAL_ETH_Init+0x1e4>)
 8002228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7a1b      	ldrb	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff fee1 	bl	8002004 <HAL_SYSCFG_ETHInterfaceSelect>
 8002242:	e003      	b.n	800224c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002244:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002248:	f7ff fedc 	bl	8002004 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800224c:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <HAL_ETH_Init+0x1e8>)
 800224e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002268:	f7ff feb4 	bl	8001fd4 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800226e:	e011      	b.n	8002294 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002270:	f7ff feb0 	bl	8001fd4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800227e:	d909      	bls.n	8002294 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2204      	movs	r2, #4
 8002284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	22e0      	movs	r2, #224	@ 0xe0
 800228c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e098      	b.n	80023c6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e4      	bne.n	8002270 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f89e 	bl	80023e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80022ac:	f001 fd80 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a49      	ldr	r2, [pc, #292]	@ (80023d8 <HAL_ETH_Init+0x1ec>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9a      	lsrs	r2, r3, #18
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3a01      	subs	r2, #1
 80022c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fa81 	bl	80027cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80022d6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	22e0      	movs	r2, #224	@ 0xe0
 8002302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e05d      	b.n	80023c6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002312:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002316:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_ETH_Init+0x1f0>)
 8002318:	4013      	ands	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6952      	ldr	r2, [r2, #20]
 800231e:	0051      	lsls	r1, r2, #1
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800232a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fae9 	bl	8002906 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fb2f 	bl	8002998 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	3305      	adds	r3, #5
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	021a      	lsls	r2, r3, #8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	3303      	adds	r3, #3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	3302      	adds	r3, #2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	3301      	adds	r3, #1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002378:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002386:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002388:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_ETH_Init+0x1f4>)
 800239a:	430b      	orrs	r3, r1
 800239c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_ETH_Init+0x1f8>)
 80023ae:	430b      	orrs	r3, r1
 80023b0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2210      	movs	r2, #16
 80023c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	58024400 	.word	0x58024400
 80023d4:	58000400 	.word	0x58000400
 80023d8:	431bde83 	.word	0x431bde83
 80023dc:	ffff8001 	.word	0xffff8001
 80023e0:	0c020060 	.word	0x0c020060
 80023e4:	0c20c000 	.word	0x0c20c000

080023e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002400:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002402:	f001 fcd5 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8002406:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4a1a      	ldr	r2, [pc, #104]	@ (8002474 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d804      	bhi.n	800241a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e022      	b.n	8002460 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4a16      	ldr	r2, [pc, #88]	@ (8002478 <HAL_ETH_SetMDIOClockRange+0x90>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d204      	bcs.n	800242c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	e019      	b.n	8002460 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4a13      	ldr	r2, [pc, #76]	@ (800247c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d915      	bls.n	8002460 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d804      	bhi.n	8002446 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e00c      	b.n	8002460 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4a0e      	ldr	r2, [pc, #56]	@ (8002484 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d804      	bhi.n	8002458 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e003      	b.n	8002460 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800245e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	02160ebf 	.word	0x02160ebf
 8002478:	03938700 	.word	0x03938700
 800247c:	05f5e0ff 	.word	0x05f5e0ff
 8002480:	08f0d17f 	.word	0x08f0d17f
 8002484:	0ee6b27f 	.word	0x0ee6b27f

08002488 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800249a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80024a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7b1b      	ldrb	r3, [r3, #12]
 80024a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7b5b      	ldrb	r3, [r3, #13]
 80024b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7b9b      	ldrb	r3, [r3, #14]
 80024b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	7bdb      	ldrb	r3, [r3, #15]
 80024c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	7c12      	ldrb	r2, [r2, #16]
 80024c8:	2a00      	cmp	r2, #0
 80024ca:	d102      	bne.n	80024d2 <ETH_SetMACConfig+0x4a>
 80024cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024d0:	e000      	b.n	80024d4 <ETH_SetMACConfig+0x4c>
 80024d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	7c52      	ldrb	r2, [r2, #17]
 80024da:	2a00      	cmp	r2, #0
 80024dc:	d102      	bne.n	80024e4 <ETH_SetMACConfig+0x5c>
 80024de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024e2:	e000      	b.n	80024e6 <ETH_SetMACConfig+0x5e>
 80024e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7c9b      	ldrb	r3, [r3, #18]
 80024ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80024f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80024fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	7f1b      	ldrb	r3, [r3, #28]
 8002500:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7f5b      	ldrb	r3, [r3, #29]
 8002508:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800250a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	7f92      	ldrb	r2, [r2, #30]
 8002510:	2a00      	cmp	r2, #0
 8002512:	d102      	bne.n	800251a <ETH_SetMACConfig+0x92>
 8002514:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002518:	e000      	b.n	800251c <ETH_SetMACConfig+0x94>
 800251a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800251c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7fdb      	ldrb	r3, [r3, #31]
 8002522:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002524:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	f892 2020 	ldrb.w	r2, [r2, #32]
 800252c:	2a00      	cmp	r2, #0
 800252e:	d102      	bne.n	8002536 <ETH_SetMACConfig+0xae>
 8002530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0xb0>
 8002536:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002538:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800253e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002546:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002548:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b56      	ldr	r3, [pc, #344]	@ (80026b4 <ETH_SetMACConfig+0x22c>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	430b      	orrs	r3, r1
 8002564:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002572:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002574:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800257c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800257e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002586:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002588:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0x112>
 8002594:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x114>
 800259a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800259c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4b42      	ldr	r3, [pc, #264]	@ (80026b8 <ETH_SetMACConfig+0x230>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b3a      	ldr	r3, [pc, #232]	@ (80026bc <ETH_SetMACConfig+0x234>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	430b      	orrs	r3, r1
 80025dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d101      	bne.n	80025fa <ETH_SetMACConfig+0x172>
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x174>
 80025fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800260e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	430b      	orrs	r3, r1
 800261c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002624:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800262c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263a:	f023 0103 	bic.w	r1, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	430a      	orrs	r2, r1
 8002646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002652:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800266e:	2a00      	cmp	r2, #0
 8002670:	d101      	bne.n	8002676 <ETH_SetMACConfig+0x1ee>
 8002672:	2240      	movs	r2, #64	@ 0x40
 8002674:	e000      	b.n	8002678 <ETH_SetMACConfig+0x1f0>
 8002676:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002678:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002680:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800268a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002698:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	00048083 	.word	0x00048083
 80026b8:	c0f88000 	.word	0xc0f88000
 80026bc:	fffffef0 	.word	0xfffffef0

080026c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b38      	ldr	r3, [pc, #224]	@ (80027b8 <ETH_SetDMAConfig+0xf8>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
 80026f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <ETH_SetDMAConfig+0xfc>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002718:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7b5b      	ldrb	r3, [r3, #13]
 800271e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002730:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002734:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <ETH_SetDMAConfig+0x100>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	430b      	orrs	r3, r1
 8002740:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002744:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7d1b      	ldrb	r3, [r3, #20]
 8002750:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002752:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7f5b      	ldrb	r3, [r3, #29]
 8002758:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002766:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <ETH_SetDMAConfig+0x104>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	68f9      	ldr	r1, [r7, #12]
 8002774:	430b      	orrs	r3, r1
 8002776:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800277a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7f1b      	ldrb	r3, [r3, #28]
 8002782:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002794:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <ETH_SetDMAConfig+0x108>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027a8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	ffff87fd 	.word	0xffff87fd
 80027bc:	ffff2ffe 	.word	0xffff2ffe
 80027c0:	fffec000 	.word	0xfffec000
 80027c4:	ffc0efef 	.word	0xffc0efef
 80027c8:	7fc0ffff 	.word	0x7fc0ffff

080027cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a4      	sub	sp, #144	@ 0x90
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027da:	2300      	movs	r3, #0
 80027dc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800280c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002814:	2300      	movs	r3, #0
 8002816:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002824:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002828:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002846:	2300      	movs	r3, #0
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800284a:	2300      	movs	r3, #0
 800284c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800284e:	2300      	movs	r3, #0
 8002850:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002864:	2320      	movs	r3, #32
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002876:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800287c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002880:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002888:	2302      	movs	r3, #2
 800288a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80028a6:	2300      	movs	r3, #0
 80028a8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fde6 	bl	8002488 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028bc:	2301      	movs	r3, #1
 80028be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028c0:	2301      	movs	r3, #1
 80028c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80028ec:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fee1 	bl	80026c0 <ETH_SetDMAConfig>
}
 80028fe:	bf00      	nop
 8002900:	3790      	adds	r7, #144	@ 0x90
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e01d      	b.n	8002950 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	3206      	adds	r2, #6
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3301      	adds	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d9de      	bls.n	8002914 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002964:	461a      	mov	r2, r3
 8002966:	2303      	movs	r3, #3
 8002968:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002978:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002988:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e023      	b.n	80029ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	3212      	adds	r2, #18
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3301      	adds	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d9d8      	bls.n	80029a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a42:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	@ 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a62:	4b89      	ldr	r3, [pc, #548]	@ (8002c88 <HAL_GPIO_Init+0x234>)
 8002a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a66:	e194      	b.n	8002d92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8186 	beq.w	8002d8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d005      	beq.n	8002a98 <HAL_GPIO_Init+0x44>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d130      	bne.n	8002afa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ace:	2201      	movs	r2, #1
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 0201 	and.w	r2, r3, #1
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d017      	beq.n	8002b36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	2203      	movs	r2, #3
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d123      	bne.n	8002b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	08da      	lsrs	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3208      	adds	r2, #8
 8002b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	69b9      	ldr	r1, [r7, #24]
 8002b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0203 	and.w	r2, r3, #3
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80e0 	beq.w	8002d8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <HAL_GPIO_Init+0x238>)
 8002bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c8c <HAL_GPIO_Init+0x238>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <HAL_GPIO_Init+0x238>)
 8002bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bea:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <HAL_GPIO_Init+0x23c>)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <HAL_GPIO_Init+0x240>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d052      	beq.n	8002cbc <HAL_GPIO_Init+0x268>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <HAL_GPIO_Init+0x244>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_GPIO_Init+0x22e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <HAL_GPIO_Init+0x248>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <HAL_GPIO_Init+0x22a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca0 <HAL_GPIO_Init+0x24c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d025      	beq.n	8002c7a <HAL_GPIO_Init+0x226>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <HAL_GPIO_Init+0x250>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <HAL_GPIO_Init+0x222>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <HAL_GPIO_Init+0x254>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x21e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_GPIO_Init+0x258>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x21a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_GPIO_Init+0x25c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x216>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a18      	ldr	r2, [pc, #96]	@ (8002cb4 <HAL_GPIO_Init+0x260>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x212>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_GPIO_Init+0x264>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x20e>
 8002c5e:	2309      	movs	r3, #9
 8002c60:	e02d      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c62:	230a      	movs	r3, #10
 8002c64:	e02b      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c66:	2308      	movs	r3, #8
 8002c68:	e029      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e027      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c6e:	2306      	movs	r3, #6
 8002c70:	e025      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c72:	2305      	movs	r3, #5
 8002c74:	e023      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e021      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e01f      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e01d      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e01b      	b.n	8002cbe <HAL_GPIO_Init+0x26a>
 8002c86:	bf00      	nop
 8002c88:	58000080 	.word	0x58000080
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	58000400 	.word	0x58000400
 8002c94:	58020000 	.word	0x58020000
 8002c98:	58020400 	.word	0x58020400
 8002c9c:	58020800 	.word	0x58020800
 8002ca0:	58020c00 	.word	0x58020c00
 8002ca4:	58021000 	.word	0x58021000
 8002ca8:	58021400 	.word	0x58021400
 8002cac:	58021800 	.word	0x58021800
 8002cb0:	58021c00 	.word	0x58021c00
 8002cb4:	58022000 	.word	0x58022000
 8002cb8:	58022400 	.word	0x58022400
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	f002 0203 	and.w	r2, r2, #3
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cce:	4938      	ldr	r1, [pc, #224]	@ (8002db0 <HAL_GPIO_Init+0x35c>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f ae63 	bne.w	8002a68 <HAL_GPIO_Init+0x14>
  }
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	3724      	adds	r7, #36	@ 0x24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	58000400 	.word	0x58000400

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	619a      	str	r2, [r3, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002df0:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d00a      	beq.n	8002e12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dfc:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e040      	b.n	8002e90 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e03e      	b.n	8002e90 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e12:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e1a:	491f      	ldr	r1, [pc, #124]	@ (8002e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e22:	f7ff f8d7 	bl	8001fd4 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e28:	e009      	b.n	8002e3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e2a:	f7ff f8d3 	bl	8001fd4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e38:	d901      	bls.n	8002e3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e028      	b.n	8002e90 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e3e:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4a:	d1ee      	bne.n	8002e2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b1e      	cmp	r3, #30
 8002e50:	d008      	beq.n	8002e64 <HAL_PWREx_ConfigSupply+0x7c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e56:	d005      	beq.n	8002e64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b1d      	cmp	r3, #29
 8002e5c:	d002      	beq.n	8002e64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e62:	d114      	bne.n	8002e8e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e64:	f7ff f8b6 	bl	8001fd4 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e6a:	e009      	b.n	8002e80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e6c:	f7ff f8b2 	bl	8001fd4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e7a:	d901      	bls.n	8002e80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e007      	b.n	8002e90 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58024800 	.word	0x58024800

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	@ 0x30
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f000 bc48 	b.w	8003740 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8088 	beq.w	8002fce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ebe:	4b99      	ldr	r3, [pc, #612]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ec8:	4b96      	ldr	r3, [pc, #600]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d007      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x48>
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	d111      	bne.n	8002efe <HAL_RCC_OscConfig+0x62>
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d06d      	beq.n	8002fcc <HAL_RCC_OscConfig+0x130>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d169      	bne.n	8002fcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f000 bc21 	b.w	8003740 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x7a>
 8002f08:	4b86      	ldr	r3, [pc, #536]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a85      	ldr	r2, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e02e      	b.n	8002f74 <HAL_RCC_OscConfig+0xd8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x9c>
 8002f1e:	4b81      	ldr	r3, [pc, #516]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a80      	ldr	r2, [pc, #512]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e01d      	b.n	8002f74 <HAL_RCC_OscConfig+0xd8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0xc0>
 8002f42:	4b78      	ldr	r3, [pc, #480]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a77      	ldr	r2, [pc, #476]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b75      	ldr	r3, [pc, #468]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a74      	ldr	r2, [pc, #464]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0xd8>
 8002f5c:	4b71      	ldr	r3, [pc, #452]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b6e      	ldr	r3, [pc, #440]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f82a 	bl	8001fd4 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7ff f826 	bl	8001fd4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e3d4      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0xe8>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f816 	bl	8001fd4 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7ff f812 	bl	8001fd4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	@ 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e3c0      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fbe:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x110>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80ca 	beq.w	8003170 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fdc:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fe4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_RCC_OscConfig+0x166>
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2b18      	cmp	r3, #24
 8002ff6:	d156      	bne.n	80030a6 <HAL_RCC_OscConfig+0x20a>
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d151      	bne.n	80030a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003002:	4b48      	ldr	r3, [pc, #288]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x17e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e392      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800301a:	4b42      	ldr	r3, [pc, #264]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0219 	bic.w	r2, r3, #25
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	493f      	ldr	r1, [pc, #252]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe ffd2 	bl	8001fd4 <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7fe ffce 	bl	8001fd4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e37c      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003046:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	f7fe ffcb 	bl	8001fec <HAL_GetREVID>
 8003056:	4603      	mov	r3, r0
 8003058:	f241 0203 	movw	r2, #4099	@ 0x1003
 800305c:	4293      	cmp	r3, r2
 800305e:	d817      	bhi.n	8003090 <HAL_RCC_OscConfig+0x1f4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d108      	bne.n	800307a <HAL_RCC_OscConfig+0x1de>
 8003068:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003070:	4a2c      	ldr	r2, [pc, #176]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	e07a      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b2a      	ldr	r3, [pc, #168]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	031b      	lsls	r3, r3, #12
 8003088:	4926      	ldr	r1, [pc, #152]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308e:	e06f      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	4921      	ldr	r1, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	e064      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d047      	beq.n	800313e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0219 	bic.w	r2, r3, #25
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	491a      	ldr	r1, [pc, #104]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe ff88 	bl	8001fd4 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe ff84 	bl	8001fd4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e332      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030da:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	f7fe ff81 	bl	8001fec <HAL_GetREVID>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d819      	bhi.n	8003128 <HAL_RCC_OscConfig+0x28c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d108      	bne.n	800310e <HAL_RCC_OscConfig+0x272>
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003104:	4a07      	ldr	r2, [pc, #28]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310a:	6053      	str	r3, [r2, #4]
 800310c:	e030      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
 800310e:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	4901      	ldr	r1, [pc, #4]	@ (8003124 <HAL_RCC_OscConfig+0x288>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
 8003122:	e025      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
 8003124:	58024400 	.word	0x58024400
 8003128:	4b9a      	ldr	r3, [pc, #616]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	4997      	ldr	r1, [pc, #604]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e018      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b95      	ldr	r3, [pc, #596]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a94      	ldr	r2, [pc, #592]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe ff43 	bl	8001fd4 <HAL_GetTick>
 800314e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe ff3f 	bl	8001fd4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e2ed      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003164:	4b8b      	ldr	r3, [pc, #556]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a9 	beq.w	80032d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b85      	ldr	r3, [pc, #532]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003186:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003188:	4b82      	ldr	r3, [pc, #520]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d007      	beq.n	80031a4 <HAL_RCC_OscConfig+0x308>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b18      	cmp	r3, #24
 8003198:	d13a      	bne.n	8003210 <HAL_RCC_OscConfig+0x374>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d135      	bne.n	8003210 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x320>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b80      	cmp	r3, #128	@ 0x80
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e2c1      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031bc:	f7fe ff16 	bl	8001fec <HAL_GetREVID>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d817      	bhi.n	80031fa <HAL_RCC_OscConfig+0x35e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x348>
 80031d2:	4b70      	ldr	r3, [pc, #448]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80031da:	4a6e      	ldr	r2, [pc, #440]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031e2:	e075      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	069b      	lsls	r3, r3, #26
 80031f2:	4968      	ldr	r1, [pc, #416]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031f8:	e06a      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031fa:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	4962      	ldr	r1, [pc, #392]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800320e:	e05f      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d042      	beq.n	800329e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003218:	4b5e      	ldr	r3, [pc, #376]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fed6 	bl	8001fd4 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800322c:	f7fe fed2 	bl	8001fd4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e280      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800323e:	4b55      	ldr	r3, [pc, #340]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800324a:	f7fe fecf 	bl	8001fec <HAL_GetREVID>
 800324e:	4603      	mov	r3, r0
 8003250:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003254:	4293      	cmp	r3, r2
 8003256:	d817      	bhi.n	8003288 <HAL_RCC_OscConfig+0x3ec>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	2b20      	cmp	r3, #32
 800325e:	d108      	bne.n	8003272 <HAL_RCC_OscConfig+0x3d6>
 8003260:	4b4c      	ldr	r3, [pc, #304]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003268:	4a4a      	ldr	r2, [pc, #296]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800326a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800326e:	6053      	str	r3, [r2, #4]
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
 8003272:	4b48      	ldr	r3, [pc, #288]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	4944      	ldr	r1, [pc, #272]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
 8003286:	e023      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
 8003288:	4b42      	ldr	r3, [pc, #264]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	493f      	ldr	r1, [pc, #252]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
 800329c:	e018      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800329e:	4b3d      	ldr	r3, [pc, #244]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fe93 	bl	8001fd4 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032b2:	f7fe fe8f 	bl	8001fd4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e23d      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032c4:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d036      	beq.n	800334a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d019      	beq.n	8003318 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fe70 	bl	8001fd4 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fe fe6c 	bl	8001fd4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e21a      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800330a:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800330c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x45c>
 8003316:	e018      	b.n	800334a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003318:	4b1e      	ldr	r3, [pc, #120]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331c:	4a1d      	ldr	r2, [pc, #116]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fe56 	bl	8001fd4 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fe52 	bl	8001fd4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e200      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d039      	beq.n	80033ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01c      	beq.n	8003398 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a0c      	ldr	r2, [pc, #48]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003364:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003368:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800336a:	f7fe fe33 	bl	8001fd4 <HAL_GetTick>
 800336e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003372:	f7fe fe2f 	bl	8001fd4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e1dd      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x4d6>
 8003390:	e01b      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
 8003392:	bf00      	nop
 8003394:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003398:	4b9b      	ldr	r3, [pc, #620]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a9a      	ldr	r2, [pc, #616]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800339e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033a4:	f7fe fe16 	bl	8001fd4 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ac:	f7fe fe12 	bl	8001fd4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1c0      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033be:	4b92      	ldr	r3, [pc, #584]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8081 	beq.w	80034da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033d8:	4b8c      	ldr	r3, [pc, #560]	@ (800360c <HAL_RCC_OscConfig+0x770>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a8b      	ldr	r2, [pc, #556]	@ (800360c <HAL_RCC_OscConfig+0x770>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fdf6 	bl	8001fd4 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fe fdf2 	bl	8001fd4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	@ 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1a0      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033fe:	4b83      	ldr	r3, [pc, #524]	@ (800360c <HAL_RCC_OscConfig+0x770>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x584>
 8003412:	4b7d      	ldr	r3, [pc, #500]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	4a7c      	ldr	r2, [pc, #496]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	@ 0x70
 800341e:	e02d      	b.n	800347c <HAL_RCC_OscConfig+0x5e0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x5a6>
 8003428:	4b77      	ldr	r3, [pc, #476]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342c:	4a76      	ldr	r2, [pc, #472]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	@ 0x70
 8003434:	4b74      	ldr	r3, [pc, #464]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	4a73      	ldr	r2, [pc, #460]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x5e0>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c8>
 800344a:	4b6f      	ldr	r3, [pc, #444]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	4a6e      	ldr	r2, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	@ 0x70
 8003456:	4b6c      	ldr	r3, [pc, #432]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	4a6b      	ldr	r2, [pc, #428]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	@ 0x70
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0x5e0>
 8003464:	4b68      	ldr	r3, [pc, #416]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003468:	4a67      	ldr	r2, [pc, #412]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003470:	4b65      	ldr	r3, [pc, #404]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	4a64      	ldr	r2, [pc, #400]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fda6 	bl	8001fd4 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe fda2 	bl	8001fd4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e14e      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a2:	4b59      	ldr	r3, [pc, #356]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ee      	beq.n	800348c <HAL_RCC_OscConfig+0x5f0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fd90 	bl	8001fd4 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fe fd8c 	bl	8001fd4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e138      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ee      	bne.n	80034b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 812d 	beq.w	800373e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034e4:	4b48      	ldr	r3, [pc, #288]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	f000 80bd 	beq.w	800366c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f040 809e 	bne.w	8003638 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b42      	ldr	r3, [pc, #264]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a41      	ldr	r2, [pc, #260]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fd64 	bl	8001fd4 <HAL_GetTick>
 800350c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fd60 	bl	8001fd4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e10e      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003522:	4b39      	ldr	r3, [pc, #228]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352e:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003532:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x774>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	430a      	orrs	r2, r1
 8003542:	4931      	ldr	r1, [pc, #196]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	628b      	str	r3, [r1, #40]	@ 0x28
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	3b01      	subs	r3, #1
 800354e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	3b01      	subs	r3, #1
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	b29b      	uxth	r3, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	3b01      	subs	r3, #1
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003578:	4923      	ldr	r1, [pc, #140]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800357e:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	4a21      	ldr	r2, [pc, #132]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800358a:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800358c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_RCC_OscConfig+0x778>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003596:	00d2      	lsls	r2, r2, #3
 8003598:	491b      	ldr	r1, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800359e:	4b1a      	ldr	r3, [pc, #104]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	f023 020c 	bic.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4917      	ldr	r1, [pc, #92]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035b0:	4b15      	ldr	r3, [pc, #84]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	f023 0202 	bic.w	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	4912      	ldr	r1, [pc, #72]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035c2:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	4a10      	ldr	r2, [pc, #64]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035da:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	4a0a      	ldr	r2, [pc, #40]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80035e6:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	4a07      	ldr	r2, [pc, #28]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fce9 	bl	8001fd4 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003604:	e011      	b.n	800362a <HAL_RCC_OscConfig+0x78e>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
 800360c:	58024800 	.word	0x58024800
 8003610:	fffffc0c 	.word	0xfffffc0c
 8003614:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fcdc 	bl	8001fd4 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e08a      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x77c>
 8003636:	e082      	b.n	800373e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b43      	ldr	r3, [pc, #268]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a42      	ldr	r2, [pc, #264]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fcc6 	bl	8001fd4 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fcc2 	bl	8001fd4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e070      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800365e:	4b3a      	ldr	r3, [pc, #232]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x7b0>
 800366a:	e068      	b.n	800373e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800366c:	4b36      	ldr	r3, [pc, #216]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003672:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	2b01      	cmp	r3, #1
 800367e:	d031      	beq.n	80036e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d12a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d122      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	0a5b      	lsrs	r3, r3, #9
 80036b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0c1b      	lsrs	r3, r3, #16
 80036c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0e1b      	lsrs	r3, r3, #24
 80036d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e02b      	b.n	8003740 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80036e8:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d01f      	beq.n	800373e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800370a:	f7fe fc63 	bl	8001fd4 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003710:	bf00      	nop
 8003712:	f7fe fc5f 	bl	8001fd4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	4293      	cmp	r3, r2
 800371c:	d0f9      	beq.n	8003712 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800371e:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <HAL_RCC_OscConfig+0x8b0>)
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800372a:	00d2      	lsls	r2, r2, #3
 800372c:	4906      	ldr	r1, [pc, #24]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 800372e:	4313      	orrs	r3, r2
 8003730:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003732:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_RCC_OscConfig+0x8ac>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3730      	adds	r7, #48	@ 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	58024400 	.word	0x58024400
 800374c:	ffff0007 	.word	0xffff0007

08003750 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e19c      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b8a      	ldr	r3, [pc, #552]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d910      	bls.n	8003794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b87      	ldr	r3, [pc, #540]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 020f 	bic.w	r2, r3, #15
 800377a:	4985      	ldr	r1, [pc, #532]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b83      	ldr	r3, [pc, #524]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e184      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d010      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d908      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037b0:	4b78      	ldr	r3, [pc, #480]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4975      	ldr	r1, [pc, #468]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d010      	beq.n	80037f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	4b70      	ldr	r3, [pc, #448]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037da:	429a      	cmp	r2, r3
 80037dc:	d908      	bls.n	80037f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037de:	4b6d      	ldr	r3, [pc, #436]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	496a      	ldr	r1, [pc, #424]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	4b64      	ldr	r3, [pc, #400]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003808:	429a      	cmp	r2, r3
 800380a:	d908      	bls.n	800381e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800380c:	4b61      	ldr	r3, [pc, #388]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	495e      	ldr	r1, [pc, #376]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 800381a:	4313      	orrs	r3, r2
 800381c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	4b59      	ldr	r3, [pc, #356]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003836:	429a      	cmp	r2, r3
 8003838:	d908      	bls.n	800384c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800383a:	4b56      	ldr	r3, [pc, #344]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	4953      	ldr	r1, [pc, #332]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003848:	4313      	orrs	r3, r2
 800384a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b4d      	ldr	r3, [pc, #308]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	429a      	cmp	r2, r3
 8003866:	d908      	bls.n	800387a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f023 020f 	bic.w	r2, r3, #15
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4947      	ldr	r1, [pc, #284]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003876:	4313      	orrs	r3, r2
 8003878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d055      	beq.n	8003932 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003886:	4b43      	ldr	r3, [pc, #268]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4940      	ldr	r1, [pc, #256]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003894:	4313      	orrs	r3, r2
 8003896:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d121      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0f6      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d115      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0ea      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d107      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038d0:	4b30      	ldr	r3, [pc, #192]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0de      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0d6      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f0:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f023 0207 	bic.w	r2, r3, #7
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4925      	ldr	r1, [pc, #148]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003902:	f7fe fb67 	bl	8001fd4 <HAL_GetTick>
 8003906:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003908:	e00a      	b.n	8003920 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390a:	f7fe fb63 	bl	8001fd4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0be      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003920:	4b1c      	ldr	r3, [pc, #112]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	429a      	cmp	r2, r3
 8003930:	d1eb      	bne.n	800390a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	429a      	cmp	r2, r3
 800394c:	d208      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	490e      	ldr	r1, [pc, #56]	@ (8003994 <HAL_RCC_ClockConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d214      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 020f 	bic.w	r2, r3, #15
 8003976:	4906      	ldr	r1, [pc, #24]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <HAL_RCC_ClockConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e086      	b.n	8003a9e <HAL_RCC_ClockConfig+0x34e>
 8003990:	52002000 	.word	0x52002000
 8003994:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d208      	bcs.n	80039c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039b4:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4939      	ldr	r1, [pc, #228]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039de:	429a      	cmp	r2, r3
 80039e0:	d208      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039e2:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	492e      	ldr	r1, [pc, #184]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d208      	bcs.n	8003a22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a10:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4922      	ldr	r1, [pc, #136]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d208      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4917      	ldr	r1, [pc, #92]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a50:	f000 f834 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	4912      	ldr	r1, [pc, #72]	@ (8003aac <HAL_RCC_ClockConfig+0x35c>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa8 <HAL_RCC_ClockConfig+0x358>)
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <HAL_RCC_ClockConfig+0x35c>)
 8003a78:	5cd3      	ldrb	r3, [r2, r3]
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
 8003a84:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <HAL_RCC_ClockConfig+0x360>)
 8003a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a88:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab4 <HAL_RCC_ClockConfig+0x364>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <HAL_RCC_ClockConfig+0x368>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe f8e8 	bl	8001c68 <HAL_InitTick>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	08011218 	.word	0x08011218
 8003ab0:	24000004 	.word	0x24000004
 8003ab4:	24000000 	.word	0x24000000
 8003ab8:	24000008 	.word	0x24000008

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	@ 0x24
 8003ac0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac2:	4bb3      	ldr	r3, [pc, #716]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aca:	2b18      	cmp	r3, #24
 8003acc:	f200 8155 	bhi.w	8003d7a <HAL_RCC_GetSysClockFreq+0x2be>
 8003ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b3d 	.word	0x08003b3d
 8003adc:	08003d7b 	.word	0x08003d7b
 8003ae0:	08003d7b 	.word	0x08003d7b
 8003ae4:	08003d7b 	.word	0x08003d7b
 8003ae8:	08003d7b 	.word	0x08003d7b
 8003aec:	08003d7b 	.word	0x08003d7b
 8003af0:	08003d7b 	.word	0x08003d7b
 8003af4:	08003d7b 	.word	0x08003d7b
 8003af8:	08003b63 	.word	0x08003b63
 8003afc:	08003d7b 	.word	0x08003d7b
 8003b00:	08003d7b 	.word	0x08003d7b
 8003b04:	08003d7b 	.word	0x08003d7b
 8003b08:	08003d7b 	.word	0x08003d7b
 8003b0c:	08003d7b 	.word	0x08003d7b
 8003b10:	08003d7b 	.word	0x08003d7b
 8003b14:	08003d7b 	.word	0x08003d7b
 8003b18:	08003b69 	.word	0x08003b69
 8003b1c:	08003d7b 	.word	0x08003d7b
 8003b20:	08003d7b 	.word	0x08003d7b
 8003b24:	08003d7b 	.word	0x08003d7b
 8003b28:	08003d7b 	.word	0x08003d7b
 8003b2c:	08003d7b 	.word	0x08003d7b
 8003b30:	08003d7b 	.word	0x08003d7b
 8003b34:	08003d7b 	.word	0x08003d7b
 8003b38:	08003b6f 	.word	0x08003b6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b3c:	4b94      	ldr	r3, [pc, #592]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b48:	4b91      	ldr	r3, [pc, #580]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	4a90      	ldr	r2, [pc, #576]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b5a:	e111      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b5e:	61bb      	str	r3, [r7, #24]
      break;
 8003b60:	e10e      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003b62:	4b8d      	ldr	r3, [pc, #564]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b64:	61bb      	str	r3, [r7, #24]
      break;
 8003b66:	e10b      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003b68:	4b8c      	ldr	r3, [pc, #560]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b6a:	61bb      	str	r3, [r7, #24]
      break;
 8003b6c:	e108      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b6e:	4b88      	ldr	r3, [pc, #544]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b78:	4b85      	ldr	r3, [pc, #532]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b84:	4b82      	ldr	r3, [pc, #520]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b8e:	4b80      	ldr	r3, [pc, #512]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	08db      	lsrs	r3, r3, #3
 8003b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80e1 	beq.w	8003d74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f000 8083 	beq.w	8003cc0 <HAL_RCC_GetSysClockFreq+0x204>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	f200 80a1 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x248>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x114>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d056      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003bce:	e099      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02d      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	4a6b      	ldr	r2, [pc, #428]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	ee07 3a90 	vmov	s15, r3
 8003bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b62      	ldr	r3, [pc, #392]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c36:	e087      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003da4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4a:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c7a:	e065      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b40      	ldr	r3, [pc, #256]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ca2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cbe:	e043      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003dac <HAL_RCC_GetSysClockFreq+0x2f0>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d02:	e021      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d48:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	0a5b      	lsrs	r3, r3, #9
 8003d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d52:	3301      	adds	r3, #1
 8003d54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6c:	ee17 3a90 	vmov	r3, s15
 8003d70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d72:	e005      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
      break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d7a:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d7c:	61bb      	str	r3, [r7, #24]
      break;
 8003d7e:	bf00      	nop
  }

  return sysclockfreq;
 8003d80:	69bb      	ldr	r3, [r7, #24]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
 8003d94:	03d09000 	.word	0x03d09000
 8003d98:	003d0900 	.word	0x003d0900
 8003d9c:	007a1200 	.word	0x007a1200
 8003da0:	46000000 	.word	0x46000000
 8003da4:	4c742400 	.word	0x4c742400
 8003da8:	4a742400 	.word	0x4a742400
 8003dac:	4af42400 	.word	0x4af42400

08003db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003db6:	f7ff fe81 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490f      	ldr	r1, [pc, #60]	@ (8003e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003dde:	5cd3      	ldrb	r3, [r2, r3]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	4a07      	ldr	r2, [pc, #28]	@ (8003e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003dec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dee:	4a07      	ldr	r2, [pc, #28]	@ (8003e0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003df4:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	58024400 	.word	0x58024400
 8003e04:	08011218 	.word	0x08011218
 8003e08:	24000004 	.word	0x24000004
 8003e0c:	24000000 	.word	0x24000000

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e14:	f7ff ffcc 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4904      	ldr	r1, [pc, #16]	@ (8003e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	58024400 	.word	0x58024400
 8003e38:	08011218 	.word	0x08011218

08003e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e40:	f7ff ffb6 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4904      	ldr	r1, [pc, #16]	@ (8003e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	58024400 	.word	0x58024400
 8003e64:	08011218 	.word	0x08011218

08003e68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223f      	movs	r2, #63	@ 0x3f
 8003e76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0207 	and.w	r2, r3, #7
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003e84:	4b17      	ldr	r3, [pc, #92]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003e90:	4b14      	ldr	r3, [pc, #80]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003e9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003ec0:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <HAL_RCC_GetClockConfig+0x7c>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_RCC_GetClockConfig+0x80>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	601a      	str	r2, [r3, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	58024400 	.word	0x58024400
 8003ee8:	52002000 	.word	0x52002000

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b0ca      	sub	sp, #296	@ 0x128
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003f10:	2500      	movs	r5, #0
 8003f12:	ea54 0305 	orrs.w	r3, r4, r5
 8003f16:	d049      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f22:	d02f      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f28:	d828      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f2e:	d01a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f34:	d822      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f3e:	d007      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f40:	e01c      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f42:	4bb8      	ldr	r3, [pc, #736]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	4ab7      	ldr	r2, [pc, #732]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f4e:	e01a      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	3308      	adds	r3, #8
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fc8f 	bl	800587c <RCCEx_PLL2_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f64:	e00f      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	3328      	adds	r3, #40	@ 0x28
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fd36 	bl	80059e0 <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f7a:	e004      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f8e:	4ba5      	ldr	r3, [pc, #660]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f9c:	4aa1      	ldr	r2, [pc, #644]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa2:	e003      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003fb8:	f04f 0900 	mov.w	r9, #0
 8003fbc:	ea58 0309 	orrs.w	r3, r8, r9
 8003fc0:	d047      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d82a      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	0800402b 	.word	0x0800402b
 8003fe4:	0800402b 	.word	0x0800402b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a8d      	ldr	r2, [pc, #564]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff4:	e01a      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 fc3c 	bl	800587c <RCCEx_PLL2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800400a:	e00f      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	3328      	adds	r3, #40	@ 0x28
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fce3 	bl	80059e0 <RCCEx_PLL3_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004020:	e004      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800402a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004034:	4b7b      	ldr	r3, [pc, #492]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004038:	f023 0107 	bic.w	r1, r3, #7
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004042:	4a78      	ldr	r2, [pc, #480]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004044:	430b      	orrs	r3, r1
 8004046:	6513      	str	r3, [r2, #80]	@ 0x50
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800405e:	f04f 0b00 	mov.w	fp, #0
 8004062:	ea5a 030b 	orrs.w	r3, sl, fp
 8004066:	d04c      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004072:	d030      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004078:	d829      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800407a:	2bc0      	cmp	r3, #192	@ 0xc0
 800407c:	d02d      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800407e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004080:	d825      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004082:	2b80      	cmp	r3, #128	@ 0x80
 8004084:	d018      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004086:	2b80      	cmp	r3, #128	@ 0x80
 8004088:	d821      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800408e:	2b40      	cmp	r3, #64	@ 0x40
 8004090:	d007      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004092:	e01c      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004094:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	4a62      	ldr	r2, [pc, #392]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800409a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040a0:	e01c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	3308      	adds	r3, #8
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fbe6 	bl	800587c <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040b6:	e011      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	3328      	adds	r3, #40	@ 0x28
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fc8d 	bl	80059e0 <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d4:	e002      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800410e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004118:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800411c:	460b      	mov	r3, r1
 800411e:	4313      	orrs	r3, r2
 8004120:	d053      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800412a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800412e:	d035      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004134:	d82e      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004136:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800413a:	d031      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800413c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004140:	d828      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004146:	d01a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414c:	d822      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004156:	d007      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004158:	e01c      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415a:	4b32      	ldr	r3, [pc, #200]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	4a31      	ldr	r2, [pc, #196]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004166:	e01c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	3308      	adds	r3, #8
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f001 fb83 	bl	800587c <RCCEx_PLL2_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800417c:	e011      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	3328      	adds	r3, #40	@ 0x28
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fc2a 	bl	80059e0 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004192:	e006      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c0:	e003      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80041d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80041e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d056      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041f6:	d038      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80041f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041fc:	d831      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004202:	d034      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004208:	d82b      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800420a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800420e:	d01d      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004210:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004214:	d825      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d006      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800421a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004220:	e01f      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004228:	4ba2      	ldr	r3, [pc, #648]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4aa1      	ldr	r2, [pc, #644]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800422e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004234:	e01c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	3308      	adds	r3, #8
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fb1c 	bl	800587c <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800424a:	e011      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004250:	3328      	adds	r3, #40	@ 0x28
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f001 fbc3 	bl	80059e0 <RCCEx_PLL3_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004278:	4b8e      	ldr	r3, [pc, #568]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004288:	4a8a      	ldr	r2, [pc, #552]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6593      	str	r3, [r2, #88]	@ 0x58
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80042a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d03a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	2b30      	cmp	r3, #48	@ 0x30
 80042c0:	d01f      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80042c2:	2b30      	cmp	r3, #48	@ 0x30
 80042c4:	d819      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d00c      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d815      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d019      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d111      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d6:	4b77      	ldr	r3, [pc, #476]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	4a76      	ldr	r2, [pc, #472]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	3308      	adds	r3, #8
 80042ea:	2102      	movs	r1, #2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 fac5 	bl	800587c <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042f8:	e006      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004300:	e002      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004314:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431e:	4a65      	ldr	r2, [pc, #404]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004320:	430b      	orrs	r3, r1
 8004322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004324:	e003      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800433a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004344:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d051      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004358:	d035      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800435a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800435e:	d82e      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004364:	d031      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004366:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800436a:	d828      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004370:	d01a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004376:	d822      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004380:	d007      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004382:	e01c      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004384:	4b4b      	ldr	r3, [pc, #300]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	4a4a      	ldr	r2, [pc, #296]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800438a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004390:	e01c      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	3308      	adds	r3, #8
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fa6e 	bl	800587c <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043a6:	e011      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3328      	adds	r3, #40	@ 0x28
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fb15 	bl	80059e0 <RCCEx_PLL3_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043d4:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e2:	4a34      	ldr	r2, [pc, #208]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80043e8:	e003      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004408:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d056      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800441c:	d033      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800441e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004422:	d82c      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004424:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004428:	d02f      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800442a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800442e:	d826      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004430:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004434:	d02b      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004436:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800443a:	d820      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004440:	d012      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004446:	d81a      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004450:	d115      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3308      	adds	r3, #8
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fa0e 	bl	800587c <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004466:	e015      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	3328      	adds	r3, #40	@ 0x28
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f001 fab5 	bl	80059e0 <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800447c:	e00a      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044aa:	4a02      	ldr	r2, [pc, #8]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044b2:	bf00      	nop
 80044b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d055      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044ec:	d033      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f2:	d82c      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f8:	d02f      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fe:	d826      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004500:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004504:	d02b      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800450a:	d820      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800450c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004510:	d012      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004516:	d81a      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d022      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800451c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004520:	d115      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	3308      	adds	r3, #8
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f9a6 	bl	800587c <RCCEx_PLL2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004536:	e015      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	3328      	adds	r3, #40	@ 0x28
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fa4d 	bl	80059e0 <RCCEx_PLL3_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800454c:	e00a      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004556:	bf00      	nop
 8004558:	e004      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800455a:	bf00      	nop
 800455c:	e002      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800456c:	4ba3      	ldr	r3, [pc, #652]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004570:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800457c:	4a9f      	ldr	r2, [pc, #636]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457e:	430b      	orrs	r3, r1
 8004580:	6593      	str	r3, [r2, #88]	@ 0x58
 8004582:	e003      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	d037      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045b6:	d00e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80045b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045bc:	d816      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d018      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045c6:	d111      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c8:	4b8c      	ldr	r3, [pc, #560]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	4a8b      	ldr	r2, [pc, #556]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045d4:	e00f      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3308      	adds	r3, #8
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f94c 	bl	800587c <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80045f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045fe:	4b7f      	ldr	r3, [pc, #508]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004602:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a7b      	ldr	r2, [pc, #492]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800460e:	430b      	orrs	r3, r1
 8004610:	6513      	str	r3, [r2, #80]	@ 0x50
 8004612:	e003      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004618:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004632:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d039      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004642:	2b03      	cmp	r3, #3
 8004644:	d81c      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004646:	a201      	add	r2, pc, #4	@ (adr r2, 800464c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	08004689 	.word	0x08004689
 8004650:	0800465d 	.word	0x0800465d
 8004654:	0800466b 	.word	0x0800466b
 8004658:	08004689 	.word	0x08004689
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b67      	ldr	r3, [pc, #412]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	4a66      	ldr	r2, [pc, #408]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004668:	e00f      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	3308      	adds	r3, #8
 8004670:	2102      	movs	r1, #2
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f902 	bl	800587c <RCCEx_PLL2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004692:	4b5a      	ldr	r3, [pc, #360]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004696:	f023 0103 	bic.w	r1, r3, #3
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a0:	4a56      	ldr	r2, [pc, #344]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a2:	430b      	orrs	r3, r1
 80046a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80046bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046ca:	460b      	mov	r3, r1
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f000 809f 	beq.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046de:	f7fd fc79 	bl	8001fd4 <HAL_GetTick>
 80046e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e6:	e00b      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd fc74 	bl	8001fd4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	@ 0x64
 80046f6:	d903      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046fe:	e005      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004700:	4b3f      	ldr	r3, [pc, #252]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ed      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004710:	2b00      	cmp	r3, #0
 8004712:	d179      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004714:	4b39      	ldr	r3, [pc, #228]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004716:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004720:	4053      	eors	r3, r2
 8004722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d015      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800472a:	4b34      	ldr	r3, [pc, #208]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004732:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004736:	4b31      	ldr	r3, [pc, #196]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	4a30      	ldr	r2, [pc, #192]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004740:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004742:	4b2e      	ldr	r3, [pc, #184]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	4a2d      	ldr	r2, [pc, #180]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800474e:	4a2b      	ldr	r2, [pc, #172]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004754:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800475e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004762:	d118      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd fc36 	bl	8001fd4 <HAL_GetTick>
 8004768:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800476c:	e00d      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd fc31 	bl	8001fd4 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004778:	1ad2      	subs	r2, r2, r3
 800477a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800477e:	429a      	cmp	r2, r3
 8004780:	d903      	bls.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004788:	e005      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800478a:	4b1c      	ldr	r3, [pc, #112]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0eb      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479a:	2b00      	cmp	r3, #0
 800479c:	d129      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ae:	d10e      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80047b0:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047c0:	091a      	lsrs	r2, r3, #4
 80047c2:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	4a0d      	ldr	r2, [pc, #52]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6113      	str	r3, [r2, #16]
 80047cc:	e005      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80047ce:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047d8:	6113      	str	r3, [r2, #16]
 80047da:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ea:	4a04      	ldr	r2, [pc, #16]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	e00e      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80047fa:	e009      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80047fc:	58024400 	.word	0x58024400
 8004800:	58024800 	.word	0x58024800
 8004804:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f002 0301 	and.w	r3, r2, #1
 800481c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004826:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	f000 8089 	beq.w	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004838:	2b28      	cmp	r3, #40	@ 0x28
 800483a:	d86b      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800483c:	a201      	add	r2, pc, #4	@ (adr r2, 8004844 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	0800491d 	.word	0x0800491d
 8004848:	08004915 	.word	0x08004915
 800484c:	08004915 	.word	0x08004915
 8004850:	08004915 	.word	0x08004915
 8004854:	08004915 	.word	0x08004915
 8004858:	08004915 	.word	0x08004915
 800485c:	08004915 	.word	0x08004915
 8004860:	08004915 	.word	0x08004915
 8004864:	080048e9 	.word	0x080048e9
 8004868:	08004915 	.word	0x08004915
 800486c:	08004915 	.word	0x08004915
 8004870:	08004915 	.word	0x08004915
 8004874:	08004915 	.word	0x08004915
 8004878:	08004915 	.word	0x08004915
 800487c:	08004915 	.word	0x08004915
 8004880:	08004915 	.word	0x08004915
 8004884:	080048ff 	.word	0x080048ff
 8004888:	08004915 	.word	0x08004915
 800488c:	08004915 	.word	0x08004915
 8004890:	08004915 	.word	0x08004915
 8004894:	08004915 	.word	0x08004915
 8004898:	08004915 	.word	0x08004915
 800489c:	08004915 	.word	0x08004915
 80048a0:	08004915 	.word	0x08004915
 80048a4:	0800491d 	.word	0x0800491d
 80048a8:	08004915 	.word	0x08004915
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004915 	.word	0x08004915
 80048b4:	08004915 	.word	0x08004915
 80048b8:	08004915 	.word	0x08004915
 80048bc:	08004915 	.word	0x08004915
 80048c0:	08004915 	.word	0x08004915
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	08004915 	.word	0x08004915
 80048cc:	08004915 	.word	0x08004915
 80048d0:	08004915 	.word	0x08004915
 80048d4:	08004915 	.word	0x08004915
 80048d8:	08004915 	.word	0x08004915
 80048dc:	08004915 	.word	0x08004915
 80048e0:	08004915 	.word	0x08004915
 80048e4:	0800491d 	.word	0x0800491d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	3308      	adds	r3, #8
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 ffc3 	bl	800587c <RCCEx_PLL2_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048fc:	e00f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	3328      	adds	r3, #40	@ 0x28
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f001 f86a 	bl	80059e0 <RCCEx_PLL3_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004912:	e004      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800491c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004926:	4bbf      	ldr	r3, [pc, #764]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004934:	4abb      	ldr	r2, [pc, #748]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004936:	430b      	orrs	r3, r1
 8004938:	6553      	str	r3, [r2, #84]	@ 0x54
 800493a:	e003      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f002 0302 	and.w	r3, r2, #2
 8004950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004954:	2300      	movs	r3, #0
 8004956:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800495a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d041      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800496a:	2b05      	cmp	r3, #5
 800496c:	d824      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800496e:	a201      	add	r2, pc, #4	@ (adr r2, 8004974 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	080049c1 	.word	0x080049c1
 8004978:	0800498d 	.word	0x0800498d
 800497c:	080049a3 	.word	0x080049a3
 8004980:	080049c1 	.word	0x080049c1
 8004984:	080049c1 	.word	0x080049c1
 8004988:	080049c1 	.word	0x080049c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	3308      	adds	r3, #8
 8004992:	2101      	movs	r1, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f000 ff71 	bl	800587c <RCCEx_PLL2_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049a0:	e00f      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	3328      	adds	r3, #40	@ 0x28
 80049a8:	2101      	movs	r1, #1
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f818 	bl	80059e0 <RCCEx_PLL3_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049b6:	e004      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80049c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049ca:	4b96      	ldr	r3, [pc, #600]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	f023 0107 	bic.w	r1, r3, #7
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049d8:	4a92      	ldr	r2, [pc, #584]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049da:	430b      	orrs	r3, r1
 80049dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80049de:	e003      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f002 0304 	and.w	r3, r2, #4
 80049f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	d044      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d825      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004a14:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a35 	.word	0x08004a35
 8004a24:	08004a4b 	.word	0x08004a4b
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a69 	.word	0x08004a69
 8004a30:	08004a69 	.word	0x08004a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	3308      	adds	r3, #8
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 ff1d 	bl	800587c <RCCEx_PLL2_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a48:	e00f      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	3328      	adds	r3, #40	@ 0x28
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 ffc4 	bl	80059e0 <RCCEx_PLL3_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a72:	4b6c      	ldr	r3, [pc, #432]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a76:	f023 0107 	bic.w	r1, r3, #7
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a82:	4a68      	ldr	r2, [pc, #416]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f002 0320 	and.w	r3, r2, #32
 8004a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d055      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004abe:	d033      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ac4:	d82c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d02f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad0:	d826      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ad2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ad6:	d02b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004ad8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004adc:	d820      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae2:	d012      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae8:	d81a      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d022      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004af2:	d115      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af8:	3308      	adds	r3, #8
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 febd 	bl	800587c <RCCEx_PLL2_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b08:	e015      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	3328      	adds	r3, #40	@ 0x28
 8004b10:	2102      	movs	r1, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 ff64 	bl	80059e0 <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b26:	e006      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	4a35      	ldr	r2, [pc, #212]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d058      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b8a:	d033      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b90:	d82c      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d02f      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9c:	d826      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba2:	d02b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004ba4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba8:	d820      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bae:	d012      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb4:	d81a      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d022      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bbe:	d115      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fe57 	bl	800587c <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e015      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	3328      	adds	r3, #40	@ 0x28
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fefe 	bl	80059e0 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bea:	e00a      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bf2:	e006      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e004      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bf8:	bf00      	nop
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10e      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c1a:	4a02      	ldr	r2, [pc, #8]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c20:	e006      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d055      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c5c:	d033      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004c5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c62:	d82c      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c68:	d02f      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6e:	d826      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c74:	d02b      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004c76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c7a:	d820      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c80:	d012      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c86:	d81a      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d022      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c90:	d115      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	3308      	adds	r3, #8
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fdee 	bl	800587c <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e015      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cac:	3328      	adds	r3, #40	@ 0x28
 8004cae:	2102      	movs	r1, #2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fe95 	bl	80059e0 <RCCEx_PLL3_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cdc:	4ba1      	ldr	r3, [pc, #644]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cec:	4a9d      	ldr	r2, [pc, #628]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f002 0308 	and.w	r3, r2, #8
 8004d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d16:	460b      	mov	r3, r1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	d01e      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	3328      	adds	r3, #40	@ 0x28
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fe54 	bl	80059e0 <RCCEx_PLL3_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d44:	4b87      	ldr	r3, [pc, #540]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d54:	4a83      	ldr	r2, [pc, #524]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f002 0310 	and.w	r3, r2, #16
 8004d66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d01e      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8c:	3328      	adds	r3, #40	@ 0x28
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fe25 	bl	80059e0 <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da2:	4b70      	ldr	r3, [pc, #448]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004db2:	4a6c      	ldr	r2, [pc, #432]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d03e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de4:	d022      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dea:	d81b      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df4:	d00b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004df6:	e015      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fd3b 	bl	800587c <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e0c:	e00f      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	3328      	adds	r3, #40	@ 0x28
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fde2 	bl	80059e0 <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e22:	e004      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e36:	4b4b      	ldr	r3, [pc, #300]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e46:	4a47      	ldr	r2, [pc, #284]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e64:	2300      	movs	r3, #0
 8004e66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	d03b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e7e:	d01f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e84:	d818      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e90:	d007      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e94:	4b33      	ldr	r3, [pc, #204]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	4a32      	ldr	r2, [pc, #200]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3328      	adds	r3, #40	@ 0x28
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fd98 	bl	80059e0 <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eca:	4b26      	ldr	r3, [pc, #152]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ece:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	4a22      	ldr	r2, [pc, #136]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ef6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ef8:	2300      	movs	r3, #0
 8004efa:	677b      	str	r3, [r7, #116]	@ 0x74
 8004efc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f00:	460b      	mov	r3, r1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	d034      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f14:	d007      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004f16:	e011      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f24:	e00e      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fca4 	bl	800587c <RCCEx_PLL2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10d      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5a:	4a02      	ldr	r2, [pc, #8]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f7e:	2300      	movs	r3, #0
 8004f80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	3328      	adds	r3, #40	@ 0x28
 8004f92:	2102      	movs	r1, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fd23 	bl	80059e0 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004fb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d038      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fce:	d018      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd4:	d811      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fda:	d014      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe0:	d80b      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fea:	d106      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fec:	4bc3      	ldr	r3, [pc, #780]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	4ac2      	ldr	r2, [pc, #776]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ff8:	e008      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005000:	e004      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800500a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005014:	4bb9      	ldr	r3, [pc, #740]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005024:	4ab5      	ldr	r2, [pc, #724]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005026:	430b      	orrs	r3, r1
 8005028:	6553      	str	r3, [r2, #84]	@ 0x54
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005042:	2300      	movs	r3, #0
 8005044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005050:	4baa      	ldr	r3, [pc, #680]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505e:	4aa7      	ldr	r2, [pc, #668]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005060:	430b      	orrs	r3, r1
 8005062:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005070:	653b      	str	r3, [r7, #80]	@ 0x50
 8005072:	2300      	movs	r3, #0
 8005074:	657b      	str	r3, [r7, #84]	@ 0x54
 8005076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800507a:	460b      	mov	r3, r1
 800507c:	4313      	orrs	r3, r2
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005080:	4b9e      	ldr	r3, [pc, #632]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005090:	4a9a      	ldr	r2, [pc, #616]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005092:	430b      	orrs	r3, r1
 8005094:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80050a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a4:	2300      	movs	r3, #0
 80050a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80050ac:	460b      	mov	r3, r1
 80050ae:	4313      	orrs	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050b2:	4b92      	ldr	r3, [pc, #584]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c0:	4a8e      	ldr	r2, [pc, #568]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050c2:	430b      	orrs	r3, r1
 80050c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80050d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80050d4:	2300      	movs	r3, #0
 80050d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d00e      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050e2:	4b86      	ldr	r3, [pc, #536]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	4a85      	ldr	r2, [pc, #532]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050ec:	6113      	str	r3, [r2, #16]
 80050ee:	4b83      	ldr	r3, [pc, #524]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050f0:	6919      	ldr	r1, [r3, #16]
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050fa:	4a80      	ldr	r2, [pc, #512]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800510c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005112:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800511c:	4b77      	ldr	r3, [pc, #476]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800511e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005120:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512a:	4a74      	ldr	r2, [pc, #464]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800512c:	430b      	orrs	r3, r1
 800512e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800513c:	633b      	str	r3, [r7, #48]	@ 0x30
 800513e:	2300      	movs	r3, #0
 8005140:	637b      	str	r3, [r7, #52]	@ 0x34
 8005142:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800514c:	4b6b      	ldr	r3, [pc, #428]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800514e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005150:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800515c:	4a67      	ldr	r2, [pc, #412]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800515e:	430b      	orrs	r3, r1
 8005160:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	2100      	movs	r1, #0
 800516c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005174:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005178:	460b      	mov	r3, r1
 800517a:	4313      	orrs	r3, r2
 800517c:	d011      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	3308      	adds	r3, #8
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fb78 	bl	800587c <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800519e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	2100      	movs	r1, #0
 80051ac:	6239      	str	r1, [r7, #32]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051b8:	460b      	mov	r3, r1
 80051ba:	4313      	orrs	r3, r2
 80051bc:	d011      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	3308      	adds	r3, #8
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb58 	bl	800587c <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	2100      	movs	r1, #0
 80051ec:	61b9      	str	r1, [r7, #24]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d011      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005202:	3308      	adds	r3, #8
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb38 	bl	800587c <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	2100      	movs	r1, #0
 800522c:	6139      	str	r1, [r7, #16]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d011      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005242:	3328      	adds	r3, #40	@ 0x28
 8005244:	2100      	movs	r1, #0
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fbca 	bl	80059e0 <RCCEx_PLL3_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	2100      	movs	r1, #0
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	d011      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005282:	3328      	adds	r3, #40	@ 0x28
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fbaa 	bl	80059e0 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800529e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	2100      	movs	r1, #0
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d011      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c2:	3328      	adds	r3, #40	@ 0x28
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fb8a 	bl	80059e0 <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80052e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80052f6:	46bd      	mov	sp, r7
 80052f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fc:	58024400 	.word	0x58024400

08005300 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005304:	f7fe fd54 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4904      	ldr	r1, [pc, #16]	@ (8005328 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	58024400 	.word	0x58024400
 8005328:	08011218 	.word	0x08011218

0800532c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	@ 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005334:	4ba1      	ldr	r3, [pc, #644]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800533e:	4b9f      	ldr	r3, [pc, #636]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	0b1b      	lsrs	r3, r3, #12
 8005344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005348:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800534a:	4b9c      	ldr	r3, [pc, #624]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005356:	4b99      	ldr	r3, [pc, #612]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8111 	beq.w	800559c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b02      	cmp	r3, #2
 800537e:	f000 8083 	beq.w	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b02      	cmp	r3, #2
 8005386:	f200 80a1 	bhi.w	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d056      	beq.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005396:	e099      	b.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005398:	4b88      	ldr	r3, [pc, #544]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02d      	beq.n	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a4:	4b85      	ldr	r3, [pc, #532]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	08db      	lsrs	r3, r3, #3
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	4a84      	ldr	r2, [pc, #528]	@ (80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b7b      	ldr	r3, [pc, #492]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053fe:	e087      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b6a      	ldr	r3, [pc, #424]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a03 	vldr	s12, [r7, #12]
 8005426:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005442:	e065      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b59      	ldr	r3, [pc, #356]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a03 	vldr	s12, [r7, #12]
 800546a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005486:	e043      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b48      	ldr	r3, [pc, #288]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ca:	e021      	b.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b37      	ldr	r3, [pc, #220]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800550e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005510:	4b2a      	ldr	r3, [pc, #168]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	0a5b      	lsrs	r3, r3, #9
 8005516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552a:	edd7 6a07 	vldr	s13, [r7, #28]
 800552e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005536:	ee17 2a90 	vmov	r2, s15
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800553e:	4b1f      	ldr	r3, [pc, #124]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005558:	edd7 6a07 	vldr	s13, [r7, #28]
 800555c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005564:	ee17 2a90 	vmov	r2, s15
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800556c:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005586:	edd7 6a07 	vldr	s13, [r7, #28]
 800558a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005592:	ee17 2a90 	vmov	r2, s15
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800559a:	e008      	b.n	80055ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
}
 80055ae:	bf00      	nop
 80055b0:	3724      	adds	r7, #36	@ 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	58024400 	.word	0x58024400
 80055c0:	03d09000 	.word	0x03d09000
 80055c4:	46000000 	.word	0x46000000
 80055c8:	4c742400 	.word	0x4c742400
 80055cc:	4a742400 	.word	0x4a742400
 80055d0:	4af42400 	.word	0x4af42400

080055d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	@ 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055dc:	4ba1      	ldr	r3, [pc, #644]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055e6:	4b9f      	ldr	r3, [pc, #636]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	0d1b      	lsrs	r3, r3, #20
 80055ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055fe:	4b99      	ldr	r3, [pc, #612]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	08db      	lsrs	r3, r3, #3
 8005604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8111 	beq.w	8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b02      	cmp	r3, #2
 8005626:	f000 8083 	beq.w	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b02      	cmp	r3, #2
 800562e:	f200 80a1 	bhi.w	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d056      	beq.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800563e:	e099      	b.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005640:	4b88      	ldr	r3, [pc, #544]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02d      	beq.n	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800564c:	4b85      	ldr	r3, [pc, #532]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	08db      	lsrs	r3, r3, #3
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	4a84      	ldr	r2, [pc, #528]	@ (8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b7b      	ldr	r3, [pc, #492]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a03 	vldr	s12, [r7, #12]
 800568a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80056a6:	e087      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ea:	e065      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b59      	ldr	r3, [pc, #356]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005712:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800572e:	e043      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b48      	ldr	r3, [pc, #288]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a03 	vldr	s12, [r7, #12]
 8005756:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005772:	e021      	b.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b37      	ldr	r3, [pc, #220]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800586c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80057b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	0a5b      	lsrs	r3, r3, #9
 80057be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057de:	ee17 2a90 	vmov	r2, s15
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80057e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005800:	edd7 6a07 	vldr	s13, [r7, #28]
 8005804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580c:	ee17 2a90 	vmov	r2, s15
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005814:	4b13      	ldr	r3, [pc, #76]	@ (8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	0e1b      	lsrs	r3, r3, #24
 800581a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800582a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800582e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800583a:	ee17 2a90 	vmov	r2, s15
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005842:	e008      	b.n	8005856 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
}
 8005856:	bf00      	nop
 8005858:	3724      	adds	r7, #36	@ 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
 8005868:	03d09000 	.word	0x03d09000
 800586c:	46000000 	.word	0x46000000
 8005870:	4c742400 	.word	0x4c742400
 8005874:	4a742400 	.word	0x4a742400
 8005878:	4af42400 	.word	0x4af42400

0800587c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800588a:	4b53      	ldr	r3, [pc, #332]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b03      	cmp	r3, #3
 8005894:	d101      	bne.n	800589a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e099      	b.n	80059ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800589a:	4b4f      	ldr	r3, [pc, #316]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4e      	ldr	r2, [pc, #312]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a6:	f7fc fb95 	bl	8001fd4 <HAL_GetTick>
 80058aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058ac:	e008      	b.n	80058c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058ae:	f7fc fb91 	bl	8001fd4 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e086      	b.n	80059ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058c0:	4b45      	ldr	r3, [pc, #276]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f0      	bne.n	80058ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058cc:	4b42      	ldr	r3, [pc, #264]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	493f      	ldr	r1, [pc, #252]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	628b      	str	r3, [r1, #40]	@ 0x28
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	025b      	lsls	r3, r3, #9
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	3b01      	subs	r3, #1
 800590a:	061b      	lsls	r3, r3, #24
 800590c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005910:	4931      	ldr	r1, [pc, #196]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005916:	4b30      	ldr	r3, [pc, #192]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	492d      	ldr	r1, [pc, #180]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005928:	4b2b      	ldr	r3, [pc, #172]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	f023 0220 	bic.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	4928      	ldr	r1, [pc, #160]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800593a:	4b27      	ldr	r3, [pc, #156]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	4a26      	ldr	r2, [pc, #152]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005940:	f023 0310 	bic.w	r3, r3, #16
 8005944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005946:	4b24      	ldr	r3, [pc, #144]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800594a:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <RCCEx_PLL2_Config+0x160>)
 800594c:	4013      	ands	r3, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	69d2      	ldr	r2, [r2, #28]
 8005952:	00d2      	lsls	r2, r2, #3
 8005954:	4920      	ldr	r1, [pc, #128]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005956:	4313      	orrs	r3, r2
 8005958:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	4a1e      	ldr	r2, [pc, #120]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005960:	f043 0310 	orr.w	r3, r3, #16
 8005964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800596c:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005978:	e00f      	b.n	800599a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d106      	bne.n	800598e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005980:	4b15      	ldr	r3, [pc, #84]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	4a14      	ldr	r2, [pc, #80]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800598a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800598c:	e005      	b.n	800599a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800598e:	4b12      	ldr	r3, [pc, #72]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	4a11      	ldr	r2, [pc, #68]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 8005994:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005998:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800599a:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a0e      	ldr	r2, [pc, #56]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80059a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a6:	f7fc fb15 	bl	8001fd4 <HAL_GetTick>
 80059aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059ac:	e008      	b.n	80059c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059ae:	f7fc fb11 	bl	8001fd4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e006      	b.n	80059ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059c0:	4b05      	ldr	r3, [pc, #20]	@ (80059d8 <RCCEx_PLL2_Config+0x15c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	ffff0007 	.word	0xffff0007

080059e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ee:	4b53      	ldr	r3, [pc, #332]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d101      	bne.n	80059fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e099      	b.n	8005b32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059fe:	4b4f      	ldr	r3, [pc, #316]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a4e      	ldr	r2, [pc, #312]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fc fae3 	bl	8001fd4 <HAL_GetTick>
 8005a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a10:	e008      	b.n	8005a24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a12:	f7fc fadf 	bl	8001fd4 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e086      	b.n	8005b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a24:	4b45      	ldr	r3, [pc, #276]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f0      	bne.n	8005a12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a30:	4b42      	ldr	r3, [pc, #264]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	051b      	lsls	r3, r3, #20
 8005a3e:	493f      	ldr	r1, [pc, #252]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	025b      	lsls	r3, r3, #9
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a74:	4931      	ldr	r1, [pc, #196]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a7a:	4b30      	ldr	r3, [pc, #192]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	492d      	ldr	r1, [pc, #180]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	4928      	ldr	r1, [pc, #160]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a9e:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa2:	4a26      	ldr	r2, [pc, #152]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005aaa:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aae:	4b24      	ldr	r3, [pc, #144]	@ (8005b40 <RCCEx_PLL3_Config+0x160>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	69d2      	ldr	r2, [r2, #28]
 8005ab6:	00d2      	lsls	r2, r2, #3
 8005ab8:	4920      	ldr	r1, [pc, #128]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005abe:	4b1f      	ldr	r3, [pc, #124]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	4a19      	ldr	r2, [pc, #100]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ad6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ada:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005adc:	e00f      	b.n	8005afe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ae4:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	4a14      	ldr	r2, [pc, #80]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005aea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005af0:	e005      	b.n	8005afe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005af2:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005afe:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a0e      	ldr	r2, [pc, #56]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0a:	f7fc fa63 	bl	8001fd4 <HAL_GetTick>
 8005b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b10:	e008      	b.n	8005b24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b12:	f7fc fa5f 	bl	8001fd4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e006      	b.n	8005b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b24:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <RCCEx_PLL3_Config+0x15c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	ffff0007 	.word	0xffff0007

08005b44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e054      	b.n	8005c00 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	7a5b      	ldrb	r3, [r3, #9]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fb ff66 	bl	8001a38 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 0120 	bic.w	r1, r3, #32
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0204 	orr.w	r2, r2, #4
 8005b96:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba2:	2b40      	cmp	r3, #64	@ 0x40
 8005ba4:	d104      	bne.n	8005bb0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e027      	b.n	8005c00 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb0:	f7fc fa10 	bl	8001fd4 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005bb6:	e015      	b.n	8005be4 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005bb8:	f7fc fa0c 	bl	8001fd4 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d90e      	bls.n	8005be4 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d107      	bne.n	8005be4 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e00d      	b.n	8005c00 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d0e2      	beq.n	8005bb8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e049      	b.n	8005cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f841 	bl	8005cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 f9e8 	bl	800601c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d001      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e054      	b.n	8005d8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d01d      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a22      	ldr	r2, [pc, #136]	@ (8005da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a21      	ldr	r2, [pc, #132]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	@ (8005dac <HAL_TIM_Base_Start_IT+0xe0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1b      	ldr	r2, [pc, #108]	@ (8005db4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d115      	bne.n	8005d78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	4b19      	ldr	r3, [pc, #100]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xec>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d015      	beq.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d64:	d011      	beq.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	e008      	b.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40001800 	.word	0x40001800
 8005db4:	40014000 	.word	0x40014000
 8005db8:	00010007 	.word	0x00010007

08005dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d020      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0202 	mvn.w	r2, #2
 8005df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f8e9 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f8db 	bl	8005fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f8ec 	bl	8005ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d020      	beq.n	8005e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01b      	beq.n	8005e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0204 	mvn.w	r2, #4
 8005e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8c3 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8b5 	bl	8005fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8c6 	bl	8005ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d020      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01b      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0208 	mvn.w	r2, #8
 8005e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f89d 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f88f 	bl	8005fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f8a0 	bl	8005ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d020      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0210 	mvn.w	r2, #16
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f877 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f869 	bl	8005fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f87a 	bl	8005ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0201 	mvn.w	r2, #1
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb faac 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d104      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00c      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f913 	bl	800617c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00c      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f90b 	bl	8006190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00c      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f834 	bl	8006006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00c      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f06f 0220 	mvn.w	r2, #32
 8005fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f8d3 	bl	8006168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a46      	ldr	r2, [pc, #280]	@ (8006148 <TIM_Base_SetConfig+0x12c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603a:	d00f      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a43      	ldr	r2, [pc, #268]	@ (800614c <TIM_Base_SetConfig+0x130>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a42      	ldr	r2, [pc, #264]	@ (8006150 <TIM_Base_SetConfig+0x134>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a41      	ldr	r2, [pc, #260]	@ (8006154 <TIM_Base_SetConfig+0x138>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a40      	ldr	r2, [pc, #256]	@ (8006158 <TIM_Base_SetConfig+0x13c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a35      	ldr	r2, [pc, #212]	@ (8006148 <TIM_Base_SetConfig+0x12c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607c:	d01b      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a32      	ldr	r2, [pc, #200]	@ (800614c <TIM_Base_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d017      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a31      	ldr	r2, [pc, #196]	@ (8006150 <TIM_Base_SetConfig+0x134>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a30      	ldr	r2, [pc, #192]	@ (8006154 <TIM_Base_SetConfig+0x138>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2f      	ldr	r2, [pc, #188]	@ (8006158 <TIM_Base_SetConfig+0x13c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	@ (800615c <TIM_Base_SetConfig+0x140>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006160 <TIM_Base_SetConfig+0x144>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006164 <TIM_Base_SetConfig+0x148>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d108      	bne.n	80060c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a16      	ldr	r2, [pc, #88]	@ (8006148 <TIM_Base_SetConfig+0x12c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00f      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <TIM_Base_SetConfig+0x13c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00b      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a17      	ldr	r2, [pc, #92]	@ (800615c <TIM_Base_SetConfig+0x140>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d007      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <TIM_Base_SetConfig+0x144>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_Base_SetConfig+0xf8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <TIM_Base_SetConfig+0x148>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	611a      	str	r2, [r3, #16]
  }
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40010400 	.word	0x40010400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e042      	b.n	800623c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fb fc6f 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2224      	movs	r2, #36	@ 0x24
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fee6 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f97b 	bl	80064f0 <UART_SetConfig>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e01b      	b.n	800623c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 ff65 	bl	8007104 <UART_CheckIdleState>
 800623a:	4603      	mov	r3, r0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	@ 0x28
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	4613      	mov	r3, r2
 8006252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625a:	2b20      	cmp	r3, #32
 800625c:	d17b      	bne.n	8006356 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_UART_Transmit+0x26>
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e074      	b.n	8006358 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2221      	movs	r2, #33	@ 0x21
 800627a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800627e:	f7fb fea9 	bl	8001fd4 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629c:	d108      	bne.n	80062b0 <HAL_UART_Transmit+0x6c>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e003      	b.n	80062b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062b8:	e030      	b.n	800631c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2180      	movs	r1, #128	@ 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 ffc7 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e03d      	b.n	8006358 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	3302      	adds	r3, #2
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e007      	b.n	800630a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	3301      	adds	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1c8      	bne.n	80062ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	2140      	movs	r1, #64	@ 0x40
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 ff90 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e006      	b.n	8006358 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	@ 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006376:	2b20      	cmp	r3, #32
 8006378:	f040 80b5 	bne.w	80064e6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_UART_Receive+0x28>
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0ad      	b.n	80064e8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2222      	movs	r2, #34	@ 0x22
 8006398:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063a2:	f7fb fe17 	bl	8001fd4 <HAL_GetTick>
 80063a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c0:	d10e      	bne.n	80063e0 <HAL_UART_Receive+0x80>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <HAL_UART_Receive+0x76>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063d4:	e02d      	b.n	8006432 <HAL_UART_Receive+0xd2>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	22ff      	movs	r2, #255	@ 0xff
 80063da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063de:	e028      	b.n	8006432 <HAL_UART_Receive+0xd2>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <HAL_UART_Receive+0xa4>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <HAL_UART_Receive+0x9a>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	22ff      	movs	r2, #255	@ 0xff
 80063f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063f8:	e01b      	b.n	8006432 <HAL_UART_Receive+0xd2>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	227f      	movs	r2, #127	@ 0x7f
 80063fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006402:	e016      	b.n	8006432 <HAL_UART_Receive+0xd2>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800640c:	d10d      	bne.n	800642a <HAL_UART_Receive+0xca>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Receive+0xc0>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	227f      	movs	r2, #127	@ 0x7f
 800641a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800641e:	e008      	b.n	8006432 <HAL_UART_Receive+0xd2>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	223f      	movs	r2, #63	@ 0x3f
 8006424:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006428:	e003      	b.n	8006432 <HAL_UART_Receive+0xd2>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006438:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006442:	d108      	bne.n	8006456 <HAL_UART_Receive+0xf6>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e003      	b.n	800645e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800645e:	e036      	b.n	80064ce <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2200      	movs	r2, #0
 8006468:	2120      	movs	r1, #32
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fef4 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e032      	b.n	80064e8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10c      	bne.n	80064a2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	b29a      	uxth	r2, r3
 8006490:	8a7b      	ldrh	r3, [r7, #18]
 8006492:	4013      	ands	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	3302      	adds	r3, #2
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e00c      	b.n	80064bc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8a7b      	ldrh	r3, [r7, #18]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	4013      	ands	r3, r2
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1c2      	bne.n	8006460 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b092      	sub	sp, #72	@ 0x48
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4bbe      	ldr	r3, [pc, #760]	@ (8006818 <UART_SetConfig+0x328>)
 8006520:	4013      	ands	r3, r2
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4ab3      	ldr	r2, [pc, #716]	@ (800681c <UART_SetConfig+0x32c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006558:	4313      	orrs	r3, r2
 800655a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	4baf      	ldr	r3, [pc, #700]	@ (8006820 <UART_SetConfig+0x330>)
 8006564:	4013      	ands	r3, r2
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800656c:	430b      	orrs	r3, r1
 800656e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006576:	f023 010f 	bic.w	r1, r3, #15
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4aa6      	ldr	r2, [pc, #664]	@ (8006824 <UART_SetConfig+0x334>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d177      	bne.n	8006680 <UART_SetConfig+0x190>
 8006590:	4ba5      	ldr	r3, [pc, #660]	@ (8006828 <UART_SetConfig+0x338>)
 8006592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006594:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006598:	2b28      	cmp	r3, #40	@ 0x28
 800659a:	d86d      	bhi.n	8006678 <UART_SetConfig+0x188>
 800659c:	a201      	add	r2, pc, #4	@ (adr r2, 80065a4 <UART_SetConfig+0xb4>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	08006649 	.word	0x08006649
 80065a8:	08006679 	.word	0x08006679
 80065ac:	08006679 	.word	0x08006679
 80065b0:	08006679 	.word	0x08006679
 80065b4:	08006679 	.word	0x08006679
 80065b8:	08006679 	.word	0x08006679
 80065bc:	08006679 	.word	0x08006679
 80065c0:	08006679 	.word	0x08006679
 80065c4:	08006651 	.word	0x08006651
 80065c8:	08006679 	.word	0x08006679
 80065cc:	08006679 	.word	0x08006679
 80065d0:	08006679 	.word	0x08006679
 80065d4:	08006679 	.word	0x08006679
 80065d8:	08006679 	.word	0x08006679
 80065dc:	08006679 	.word	0x08006679
 80065e0:	08006679 	.word	0x08006679
 80065e4:	08006659 	.word	0x08006659
 80065e8:	08006679 	.word	0x08006679
 80065ec:	08006679 	.word	0x08006679
 80065f0:	08006679 	.word	0x08006679
 80065f4:	08006679 	.word	0x08006679
 80065f8:	08006679 	.word	0x08006679
 80065fc:	08006679 	.word	0x08006679
 8006600:	08006679 	.word	0x08006679
 8006604:	08006661 	.word	0x08006661
 8006608:	08006679 	.word	0x08006679
 800660c:	08006679 	.word	0x08006679
 8006610:	08006679 	.word	0x08006679
 8006614:	08006679 	.word	0x08006679
 8006618:	08006679 	.word	0x08006679
 800661c:	08006679 	.word	0x08006679
 8006620:	08006679 	.word	0x08006679
 8006624:	08006669 	.word	0x08006669
 8006628:	08006679 	.word	0x08006679
 800662c:	08006679 	.word	0x08006679
 8006630:	08006679 	.word	0x08006679
 8006634:	08006679 	.word	0x08006679
 8006638:	08006679 	.word	0x08006679
 800663c:	08006679 	.word	0x08006679
 8006640:	08006679 	.word	0x08006679
 8006644:	08006671 	.word	0x08006671
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e222      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006650:	2304      	movs	r3, #4
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e21e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006658:	2308      	movs	r3, #8
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e21a      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006660:	2310      	movs	r3, #16
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e216      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006668:	2320      	movs	r3, #32
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e212      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006670:	2340      	movs	r3, #64	@ 0x40
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e20e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006678:	2380      	movs	r3, #128	@ 0x80
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e20a      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a69      	ldr	r2, [pc, #420]	@ (800682c <UART_SetConfig+0x33c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d130      	bne.n	80066ec <UART_SetConfig+0x1fc>
 800668a:	4b67      	ldr	r3, [pc, #412]	@ (8006828 <UART_SetConfig+0x338>)
 800668c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	2b05      	cmp	r3, #5
 8006694:	d826      	bhi.n	80066e4 <UART_SetConfig+0x1f4>
 8006696:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <UART_SetConfig+0x1ac>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066b5 	.word	0x080066b5
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066c5 	.word	0x080066c5
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066d5 	.word	0x080066d5
 80066b0:	080066dd 	.word	0x080066dd
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e1ec      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066bc:	2304      	movs	r3, #4
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e1e8      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066c4:	2308      	movs	r3, #8
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e1e4      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e1e0      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066d4:	2320      	movs	r3, #32
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e1dc      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066dc:	2340      	movs	r3, #64	@ 0x40
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e1d8      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066e4:	2380      	movs	r3, #128	@ 0x80
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e1d4      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a4f      	ldr	r2, [pc, #316]	@ (8006830 <UART_SetConfig+0x340>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d130      	bne.n	8006758 <UART_SetConfig+0x268>
 80066f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006828 <UART_SetConfig+0x338>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	2b05      	cmp	r3, #5
 8006700:	d826      	bhi.n	8006750 <UART_SetConfig+0x260>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <UART_SetConfig+0x218>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006721 	.word	0x08006721
 800670c:	08006729 	.word	0x08006729
 8006710:	08006731 	.word	0x08006731
 8006714:	08006739 	.word	0x08006739
 8006718:	08006741 	.word	0x08006741
 800671c:	08006749 	.word	0x08006749
 8006720:	2300      	movs	r3, #0
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e1b6      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e1b2      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e1ae      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e1aa      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006740:	2320      	movs	r3, #32
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e1a6      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006748:	2340      	movs	r3, #64	@ 0x40
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e1a2      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006750:	2380      	movs	r3, #128	@ 0x80
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e19e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a35      	ldr	r2, [pc, #212]	@ (8006834 <UART_SetConfig+0x344>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d130      	bne.n	80067c4 <UART_SetConfig+0x2d4>
 8006762:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <UART_SetConfig+0x338>)
 8006764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b05      	cmp	r3, #5
 800676c:	d826      	bhi.n	80067bc <UART_SetConfig+0x2cc>
 800676e:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <UART_SetConfig+0x284>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	0800678d 	.word	0x0800678d
 8006778:	08006795 	.word	0x08006795
 800677c:	0800679d 	.word	0x0800679d
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067b5 	.word	0x080067b5
 800678c:	2300      	movs	r3, #0
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e180      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e17c      	b.n	8006a96 <UART_SetConfig+0x5a6>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e178      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e174      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80067ac:	2320      	movs	r3, #32
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e170      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80067b4:	2340      	movs	r3, #64	@ 0x40
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e16c      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80067bc:	2380      	movs	r3, #128	@ 0x80
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e168      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <UART_SetConfig+0x348>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d142      	bne.n	8006854 <UART_SetConfig+0x364>
 80067ce:	4b16      	ldr	r3, [pc, #88]	@ (8006828 <UART_SetConfig+0x338>)
 80067d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	2b05      	cmp	r3, #5
 80067d8:	d838      	bhi.n	800684c <UART_SetConfig+0x35c>
 80067da:	a201      	add	r2, pc, #4	@ (adr r2, 80067e0 <UART_SetConfig+0x2f0>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	080067f9 	.word	0x080067f9
 80067e4:	08006801 	.word	0x08006801
 80067e8:	08006809 	.word	0x08006809
 80067ec:	08006811 	.word	0x08006811
 80067f0:	0800683d 	.word	0x0800683d
 80067f4:	08006845 	.word	0x08006845
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e14a      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006800:	2304      	movs	r3, #4
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e146      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006808:	2308      	movs	r3, #8
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e142      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006810:	2310      	movs	r3, #16
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e13e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006818:	cfff69f3 	.word	0xcfff69f3
 800681c:	58000c00 	.word	0x58000c00
 8006820:	11fff4ff 	.word	0x11fff4ff
 8006824:	40011000 	.word	0x40011000
 8006828:	58024400 	.word	0x58024400
 800682c:	40004400 	.word	0x40004400
 8006830:	40004800 	.word	0x40004800
 8006834:	40004c00 	.word	0x40004c00
 8006838:	40005000 	.word	0x40005000
 800683c:	2320      	movs	r3, #32
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e128      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006844:	2340      	movs	r3, #64	@ 0x40
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e124      	b.n	8006a96 <UART_SetConfig+0x5a6>
 800684c:	2380      	movs	r3, #128	@ 0x80
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e120      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4acb      	ldr	r2, [pc, #812]	@ (8006b88 <UART_SetConfig+0x698>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d176      	bne.n	800694c <UART_SetConfig+0x45c>
 800685e:	4bcb      	ldr	r3, [pc, #812]	@ (8006b8c <UART_SetConfig+0x69c>)
 8006860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006866:	2b28      	cmp	r3, #40	@ 0x28
 8006868:	d86c      	bhi.n	8006944 <UART_SetConfig+0x454>
 800686a:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <UART_SetConfig+0x380>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006915 	.word	0x08006915
 8006874:	08006945 	.word	0x08006945
 8006878:	08006945 	.word	0x08006945
 800687c:	08006945 	.word	0x08006945
 8006880:	08006945 	.word	0x08006945
 8006884:	08006945 	.word	0x08006945
 8006888:	08006945 	.word	0x08006945
 800688c:	08006945 	.word	0x08006945
 8006890:	0800691d 	.word	0x0800691d
 8006894:	08006945 	.word	0x08006945
 8006898:	08006945 	.word	0x08006945
 800689c:	08006945 	.word	0x08006945
 80068a0:	08006945 	.word	0x08006945
 80068a4:	08006945 	.word	0x08006945
 80068a8:	08006945 	.word	0x08006945
 80068ac:	08006945 	.word	0x08006945
 80068b0:	08006925 	.word	0x08006925
 80068b4:	08006945 	.word	0x08006945
 80068b8:	08006945 	.word	0x08006945
 80068bc:	08006945 	.word	0x08006945
 80068c0:	08006945 	.word	0x08006945
 80068c4:	08006945 	.word	0x08006945
 80068c8:	08006945 	.word	0x08006945
 80068cc:	08006945 	.word	0x08006945
 80068d0:	0800692d 	.word	0x0800692d
 80068d4:	08006945 	.word	0x08006945
 80068d8:	08006945 	.word	0x08006945
 80068dc:	08006945 	.word	0x08006945
 80068e0:	08006945 	.word	0x08006945
 80068e4:	08006945 	.word	0x08006945
 80068e8:	08006945 	.word	0x08006945
 80068ec:	08006945 	.word	0x08006945
 80068f0:	08006935 	.word	0x08006935
 80068f4:	08006945 	.word	0x08006945
 80068f8:	08006945 	.word	0x08006945
 80068fc:	08006945 	.word	0x08006945
 8006900:	08006945 	.word	0x08006945
 8006904:	08006945 	.word	0x08006945
 8006908:	08006945 	.word	0x08006945
 800690c:	08006945 	.word	0x08006945
 8006910:	0800693d 	.word	0x0800693d
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e0bc      	b.n	8006a96 <UART_SetConfig+0x5a6>
 800691c:	2304      	movs	r3, #4
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e0b8      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006924:	2308      	movs	r3, #8
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e0b4      	b.n	8006a96 <UART_SetConfig+0x5a6>
 800692c:	2310      	movs	r3, #16
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e0b0      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006934:	2320      	movs	r3, #32
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e0ac      	b.n	8006a96 <UART_SetConfig+0x5a6>
 800693c:	2340      	movs	r3, #64	@ 0x40
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e0a8      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006944:	2380      	movs	r3, #128	@ 0x80
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e0a4      	b.n	8006a96 <UART_SetConfig+0x5a6>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a8f      	ldr	r2, [pc, #572]	@ (8006b90 <UART_SetConfig+0x6a0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d130      	bne.n	80069b8 <UART_SetConfig+0x4c8>
 8006956:	4b8d      	ldr	r3, [pc, #564]	@ (8006b8c <UART_SetConfig+0x69c>)
 8006958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	2b05      	cmp	r3, #5
 8006960:	d826      	bhi.n	80069b0 <UART_SetConfig+0x4c0>
 8006962:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <UART_SetConfig+0x478>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	08006981 	.word	0x08006981
 800696c:	08006989 	.word	0x08006989
 8006970:	08006991 	.word	0x08006991
 8006974:	08006999 	.word	0x08006999
 8006978:	080069a1 	.word	0x080069a1
 800697c:	080069a9 	.word	0x080069a9
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e086      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006988:	2304      	movs	r3, #4
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e082      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006990:	2308      	movs	r3, #8
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e07e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006998:	2310      	movs	r3, #16
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e07a      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80069a0:	2320      	movs	r3, #32
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e076      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80069a8:	2340      	movs	r3, #64	@ 0x40
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e072      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80069b0:	2380      	movs	r3, #128	@ 0x80
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e06e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a75      	ldr	r2, [pc, #468]	@ (8006b94 <UART_SetConfig+0x6a4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d130      	bne.n	8006a24 <UART_SetConfig+0x534>
 80069c2:	4b72      	ldr	r3, [pc, #456]	@ (8006b8c <UART_SetConfig+0x69c>)
 80069c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d826      	bhi.n	8006a1c <UART_SetConfig+0x52c>
 80069ce:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <UART_SetConfig+0x4e4>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069ed 	.word	0x080069ed
 80069d8:	080069f5 	.word	0x080069f5
 80069dc:	080069fd 	.word	0x080069fd
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a0d 	.word	0x08006a0d
 80069e8:	08006a15 	.word	0x08006a15
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e050      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80069f4:	2304      	movs	r3, #4
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e04c      	b.n	8006a96 <UART_SetConfig+0x5a6>
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e048      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e044      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e040      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a14:	2340      	movs	r3, #64	@ 0x40
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e03c      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a1c:	2380      	movs	r3, #128	@ 0x80
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e038      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5b      	ldr	r2, [pc, #364]	@ (8006b98 <UART_SetConfig+0x6a8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d130      	bne.n	8006a90 <UART_SetConfig+0x5a0>
 8006a2e:	4b57      	ldr	r3, [pc, #348]	@ (8006b8c <UART_SetConfig+0x69c>)
 8006a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	2b05      	cmp	r3, #5
 8006a38:	d826      	bhi.n	8006a88 <UART_SetConfig+0x598>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <UART_SetConfig+0x550>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	08006a69 	.word	0x08006a69
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	2302      	movs	r3, #2
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e01a      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a60:	2304      	movs	r3, #4
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e016      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e012      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a70:	2310      	movs	r3, #16
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e00e      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a78:	2320      	movs	r3, #32
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e00a      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a80:	2340      	movs	r3, #64	@ 0x40
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a86:	e006      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a88:	2380      	movs	r3, #128	@ 0x80
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e002      	b.n	8006a96 <UART_SetConfig+0x5a6>
 8006a90:	2380      	movs	r3, #128	@ 0x80
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b98 <UART_SetConfig+0x6a8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	f040 80f8 	bne.w	8006c92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aa2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	dc46      	bgt.n	8006b38 <UART_SetConfig+0x648>
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	f2c0 8082 	blt.w	8006bb4 <UART_SetConfig+0x6c4>
 8006ab0:	3b02      	subs	r3, #2
 8006ab2:	2b1e      	cmp	r3, #30
 8006ab4:	d87e      	bhi.n	8006bb4 <UART_SetConfig+0x6c4>
 8006ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <UART_SetConfig+0x5cc>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006b3f 	.word	0x08006b3f
 8006ac0:	08006bb5 	.word	0x08006bb5
 8006ac4:	08006b47 	.word	0x08006b47
 8006ac8:	08006bb5 	.word	0x08006bb5
 8006acc:	08006bb5 	.word	0x08006bb5
 8006ad0:	08006bb5 	.word	0x08006bb5
 8006ad4:	08006b57 	.word	0x08006b57
 8006ad8:	08006bb5 	.word	0x08006bb5
 8006adc:	08006bb5 	.word	0x08006bb5
 8006ae0:	08006bb5 	.word	0x08006bb5
 8006ae4:	08006bb5 	.word	0x08006bb5
 8006ae8:	08006bb5 	.word	0x08006bb5
 8006aec:	08006bb5 	.word	0x08006bb5
 8006af0:	08006bb5 	.word	0x08006bb5
 8006af4:	08006b67 	.word	0x08006b67
 8006af8:	08006bb5 	.word	0x08006bb5
 8006afc:	08006bb5 	.word	0x08006bb5
 8006b00:	08006bb5 	.word	0x08006bb5
 8006b04:	08006bb5 	.word	0x08006bb5
 8006b08:	08006bb5 	.word	0x08006bb5
 8006b0c:	08006bb5 	.word	0x08006bb5
 8006b10:	08006bb5 	.word	0x08006bb5
 8006b14:	08006bb5 	.word	0x08006bb5
 8006b18:	08006bb5 	.word	0x08006bb5
 8006b1c:	08006bb5 	.word	0x08006bb5
 8006b20:	08006bb5 	.word	0x08006bb5
 8006b24:	08006bb5 	.word	0x08006bb5
 8006b28:	08006bb5 	.word	0x08006bb5
 8006b2c:	08006bb5 	.word	0x08006bb5
 8006b30:	08006bb5 	.word	0x08006bb5
 8006b34:	08006ba7 	.word	0x08006ba7
 8006b38:	2b40      	cmp	r3, #64	@ 0x40
 8006b3a:	d037      	beq.n	8006bac <UART_SetConfig+0x6bc>
 8006b3c:	e03a      	b.n	8006bb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b3e:	f7fe fbdf 	bl	8005300 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b44:	e03c      	b.n	8006bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe fbee 	bl	800532c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b54:	e034      	b.n	8006bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b56:	f107 0318 	add.w	r3, r7, #24
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe fd3a 	bl	80055d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b64:	e02c      	b.n	8006bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <UART_SetConfig+0x69c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b72:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <UART_SetConfig+0x69c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	08db      	lsrs	r3, r3, #3
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	4a07      	ldr	r2, [pc, #28]	@ (8006b9c <UART_SetConfig+0x6ac>)
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b84:	e01c      	b.n	8006bc0 <UART_SetConfig+0x6d0>
 8006b86:	bf00      	nop
 8006b88:	40011400 	.word	0x40011400
 8006b8c:	58024400 	.word	0x58024400
 8006b90:	40007800 	.word	0x40007800
 8006b94:	40007c00 	.word	0x40007c00
 8006b98:	58000c00 	.word	0x58000c00
 8006b9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ba0:	4b9d      	ldr	r3, [pc, #628]	@ (8006e18 <UART_SetConfig+0x928>)
 8006ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba4:	e00c      	b.n	8006bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ba6:	4b9d      	ldr	r3, [pc, #628]	@ (8006e1c <UART_SetConfig+0x92c>)
 8006ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006baa:	e009      	b.n	8006bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb2:	e005      	b.n	8006bc0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 81de 	beq.w	8006f84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	4a94      	ldr	r2, [pc, #592]	@ (8006e20 <UART_SetConfig+0x930>)
 8006bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bda:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4613      	mov	r3, r2
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4413      	add	r3, r2
 8006be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d305      	bcc.n	8006bf8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d903      	bls.n	8006c00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bfe:	e1c1      	b.n	8006f84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c02:	2200      	movs	r2, #0
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	60fa      	str	r2, [r7, #12]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0c:	4a84      	ldr	r2, [pc, #528]	@ (8006e20 <UART_SetConfig+0x930>)
 8006c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2200      	movs	r2, #0
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c22:	f7f9 fd71 	bl	8000708 <__aeabi_uldivmod>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	020b      	lsls	r3, r1, #8
 8006c38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c3c:	0202      	lsls	r2, r0, #8
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	6849      	ldr	r1, [r1, #4]
 8006c42:	0849      	lsrs	r1, r1, #1
 8006c44:	2000      	movs	r0, #0
 8006c46:	460c      	mov	r4, r1
 8006c48:	4605      	mov	r5, r0
 8006c4a:	eb12 0804 	adds.w	r8, r2, r4
 8006c4e:	eb43 0905 	adc.w	r9, r3, r5
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	469a      	mov	sl, r3
 8006c5a:	4693      	mov	fp, r2
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	465b      	mov	r3, fp
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7f9 fd50 	bl	8000708 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c76:	d308      	bcc.n	8006c8a <UART_SetConfig+0x79a>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c7e:	d204      	bcs.n	8006c8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	e17c      	b.n	8006f84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c90:	e178      	b.n	8006f84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9a:	f040 80c5 	bne.w	8006e28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006c9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	dc48      	bgt.n	8006d38 <UART_SetConfig+0x848>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	db7b      	blt.n	8006da2 <UART_SetConfig+0x8b2>
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d879      	bhi.n	8006da2 <UART_SetConfig+0x8b2>
 8006cae:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <UART_SetConfig+0x7c4>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006d3f 	.word	0x08006d3f
 8006cb8:	08006d47 	.word	0x08006d47
 8006cbc:	08006da3 	.word	0x08006da3
 8006cc0:	08006da3 	.word	0x08006da3
 8006cc4:	08006d4f 	.word	0x08006d4f
 8006cc8:	08006da3 	.word	0x08006da3
 8006ccc:	08006da3 	.word	0x08006da3
 8006cd0:	08006da3 	.word	0x08006da3
 8006cd4:	08006d5f 	.word	0x08006d5f
 8006cd8:	08006da3 	.word	0x08006da3
 8006cdc:	08006da3 	.word	0x08006da3
 8006ce0:	08006da3 	.word	0x08006da3
 8006ce4:	08006da3 	.word	0x08006da3
 8006ce8:	08006da3 	.word	0x08006da3
 8006cec:	08006da3 	.word	0x08006da3
 8006cf0:	08006da3 	.word	0x08006da3
 8006cf4:	08006d6f 	.word	0x08006d6f
 8006cf8:	08006da3 	.word	0x08006da3
 8006cfc:	08006da3 	.word	0x08006da3
 8006d00:	08006da3 	.word	0x08006da3
 8006d04:	08006da3 	.word	0x08006da3
 8006d08:	08006da3 	.word	0x08006da3
 8006d0c:	08006da3 	.word	0x08006da3
 8006d10:	08006da3 	.word	0x08006da3
 8006d14:	08006da3 	.word	0x08006da3
 8006d18:	08006da3 	.word	0x08006da3
 8006d1c:	08006da3 	.word	0x08006da3
 8006d20:	08006da3 	.word	0x08006da3
 8006d24:	08006da3 	.word	0x08006da3
 8006d28:	08006da3 	.word	0x08006da3
 8006d2c:	08006da3 	.word	0x08006da3
 8006d30:	08006da3 	.word	0x08006da3
 8006d34:	08006d95 	.word	0x08006d95
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d02e      	beq.n	8006d9a <UART_SetConfig+0x8aa>
 8006d3c:	e031      	b.n	8006da2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3e:	f7fd f867 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8006d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d44:	e033      	b.n	8006dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d46:	f7fd f879 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8006d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d4c:	e02f      	b.n	8006dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe faea 	bl	800532c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5c:	e027      	b.n	8006dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5e:	f107 0318 	add.w	r3, r7, #24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fc36 	bl	80055d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d6c:	e01f      	b.n	8006dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e24 <UART_SetConfig+0x934>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006e24 <UART_SetConfig+0x934>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	08db      	lsrs	r3, r3, #3
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	4a24      	ldr	r2, [pc, #144]	@ (8006e18 <UART_SetConfig+0x928>)
 8006d86:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d8c:	e00f      	b.n	8006dae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d8e:	4b22      	ldr	r3, [pc, #136]	@ (8006e18 <UART_SetConfig+0x928>)
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d92:	e00c      	b.n	8006dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d94:	4b21      	ldr	r3, [pc, #132]	@ (8006e1c <UART_SetConfig+0x92c>)
 8006d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d98:	e009      	b.n	8006dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da0:	e005      	b.n	8006dae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80e7 	beq.w	8006f84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <UART_SetConfig+0x930>)
 8006dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc8:	005a      	lsls	r2, r3, #1
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	441a      	add	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dde:	2b0f      	cmp	r3, #15
 8006de0:	d916      	bls.n	8006e10 <UART_SetConfig+0x920>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de8:	d212      	bcs.n	8006e10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f023 030f 	bic.w	r3, r3, #15
 8006df2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	085b      	lsrs	r3, r3, #1
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e02:	4313      	orrs	r3, r2
 8006e04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	e0b9      	b.n	8006f84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e16:	e0b5      	b.n	8006f84 <UART_SetConfig+0xa94>
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	08011280 	.word	0x08011280
 8006e24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	dc49      	bgt.n	8006ec4 <UART_SetConfig+0x9d4>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	db7c      	blt.n	8006f2e <UART_SetConfig+0xa3e>
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d87a      	bhi.n	8006f2e <UART_SetConfig+0xa3e>
 8006e38:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <UART_SetConfig+0x950>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006ecb 	.word	0x08006ecb
 8006e44:	08006ed3 	.word	0x08006ed3
 8006e48:	08006f2f 	.word	0x08006f2f
 8006e4c:	08006f2f 	.word	0x08006f2f
 8006e50:	08006edb 	.word	0x08006edb
 8006e54:	08006f2f 	.word	0x08006f2f
 8006e58:	08006f2f 	.word	0x08006f2f
 8006e5c:	08006f2f 	.word	0x08006f2f
 8006e60:	08006eeb 	.word	0x08006eeb
 8006e64:	08006f2f 	.word	0x08006f2f
 8006e68:	08006f2f 	.word	0x08006f2f
 8006e6c:	08006f2f 	.word	0x08006f2f
 8006e70:	08006f2f 	.word	0x08006f2f
 8006e74:	08006f2f 	.word	0x08006f2f
 8006e78:	08006f2f 	.word	0x08006f2f
 8006e7c:	08006f2f 	.word	0x08006f2f
 8006e80:	08006efb 	.word	0x08006efb
 8006e84:	08006f2f 	.word	0x08006f2f
 8006e88:	08006f2f 	.word	0x08006f2f
 8006e8c:	08006f2f 	.word	0x08006f2f
 8006e90:	08006f2f 	.word	0x08006f2f
 8006e94:	08006f2f 	.word	0x08006f2f
 8006e98:	08006f2f 	.word	0x08006f2f
 8006e9c:	08006f2f 	.word	0x08006f2f
 8006ea0:	08006f2f 	.word	0x08006f2f
 8006ea4:	08006f2f 	.word	0x08006f2f
 8006ea8:	08006f2f 	.word	0x08006f2f
 8006eac:	08006f2f 	.word	0x08006f2f
 8006eb0:	08006f2f 	.word	0x08006f2f
 8006eb4:	08006f2f 	.word	0x08006f2f
 8006eb8:	08006f2f 	.word	0x08006f2f
 8006ebc:	08006f2f 	.word	0x08006f2f
 8006ec0:	08006f21 	.word	0x08006f21
 8006ec4:	2b40      	cmp	r3, #64	@ 0x40
 8006ec6:	d02e      	beq.n	8006f26 <UART_SetConfig+0xa36>
 8006ec8:	e031      	b.n	8006f2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eca:	f7fc ffa1 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8006ece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ed0:	e033      	b.n	8006f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed2:	f7fc ffb3 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8006ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ed8:	e02f      	b.n	8006f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fa24 	bl	800532c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee8:	e027      	b.n	8006f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eea:	f107 0318 	add.w	r3, r7, #24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fb70 	bl	80055d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef8:	e01f      	b.n	8006f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efa:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb0 <UART_SetConfig+0xac0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f06:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb0 <UART_SetConfig+0xac0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	08db      	lsrs	r3, r3, #3
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	4a28      	ldr	r2, [pc, #160]	@ (8006fb4 <UART_SetConfig+0xac4>)
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f18:	e00f      	b.n	8006f3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f1a:	4b26      	ldr	r3, [pc, #152]	@ (8006fb4 <UART_SetConfig+0xac4>)
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1e:	e00c      	b.n	8006f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f20:	4b25      	ldr	r3, [pc, #148]	@ (8006fb8 <UART_SetConfig+0xac8>)
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f24:	e009      	b.n	8006f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f2c:	e005      	b.n	8006f3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f38:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d021      	beq.n	8006f84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f44:	4a1d      	ldr	r2, [pc, #116]	@ (8006fbc <UART_SetConfig+0xacc>)
 8006f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	441a      	add	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	2b0f      	cmp	r3, #15
 8006f68:	d909      	bls.n	8006f7e <UART_SetConfig+0xa8e>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f70:	d205      	bcs.n	8006f7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
 8006f7c:	e002      	b.n	8006f84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fa0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3748      	adds	r7, #72	@ 0x48
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	03d09000 	.word	0x03d09000
 8006fb8:	003d0900 	.word	0x003d0900
 8006fbc:	08011280 	.word	0x08011280

08006fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070be:	d10a      	bne.n	80070d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b098      	sub	sp, #96	@ 0x60
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007114:	f7fa ff5e 	bl	8001fd4 <HAL_GetTick>
 8007118:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b08      	cmp	r3, #8
 8007126:	d12f      	bne.n	8007188 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007128:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007130:	2200      	movs	r2, #0
 8007132:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f88e 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d022      	beq.n	8007188 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007156:	653b      	str	r3, [r7, #80]	@ 0x50
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007160:	647b      	str	r3, [r7, #68]	@ 0x44
 8007162:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800716e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e063      	b.n	8007250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b04      	cmp	r3, #4
 8007194:	d149      	bne.n	800722a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007196:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800719e:	2200      	movs	r2, #0
 80071a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f857 	bl	8007258 <UART_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d03c      	beq.n	800722a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	623b      	str	r3, [r7, #32]
   return(result);
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007202:	61fa      	str	r2, [r7, #28]
 8007204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	69b9      	ldr	r1, [r7, #24]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	617b      	str	r3, [r7, #20]
   return(result);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e012      	b.n	8007250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3758      	adds	r7, #88	@ 0x58
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007268:	e04f      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d04b      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fa feaf 	bl	8001fd4 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <UART_WaitOnFlagUntilTimeout+0x30>
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e04e      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d037      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b80      	cmp	r3, #128	@ 0x80
 800729e:	d034      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b40      	cmp	r3, #64	@ 0x40
 80072a4:	d031      	beq.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d110      	bne.n	80072d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2208      	movs	r2, #8
 80072ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f839 	bl	8007334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2208      	movs	r2, #8
 80072c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e029      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e4:	d111      	bne.n	800730a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f81f 	bl	8007334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e00f      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4013      	ands	r3, r2
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	429a      	cmp	r2, r3
 8007326:	d0a0      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b095      	sub	sp, #84	@ 0x54
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800735a:	643b      	str	r3, [r7, #64]	@ 0x40
 800735c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e6      	bne.n	800733c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	61fb      	str	r3, [r7, #28]
   return(result);
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <UART_EndRxTransfer+0xc8>)
 8007382:	4013      	ands	r3, r2
 8007384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800738e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007390:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d118      	bne.n	80073dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f023 0310 	bic.w	r3, r3, #16
 80073be:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6979      	ldr	r1, [r7, #20]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073f0:	bf00      	nop
 80073f2:	3754      	adds	r7, #84	@ 0x54
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	effffffe 	.word	0xeffffffe

08007400 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e056      	b.n	80074c6 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7fa fb3e 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2224      	movs	r2, #36	@ 0x24
 8007434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff fdb5 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff f84a 	bl	80064f0 <UART_SetConfig>
 800745c:	4603      	mov	r3, r0
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e02f      	b.n	80074c6 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007474:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	055b      	lsls	r3, r3, #21
 800748e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	041b      	lsls	r3, r3, #16
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <HAL_RS485Ex_Init+0xd0>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	6979      	ldr	r1, [r7, #20]
 80074aa:	430b      	orrs	r3, r1
 80074ac:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff fe20 	bl	8007104 <UART_CheckIdleState>
 80074c4:	4603      	mov	r3, r0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	fc00ffff 	.word	0xfc00ffff

080074d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <HAL_UARTEx_DisableFifoMode+0x16>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e027      	b.n	800753a <HAL_UARTEx_DisableFifoMode+0x66>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2224      	movs	r2, #36	@ 0x24
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800755a:	2302      	movs	r3, #2
 800755c:	e02d      	b.n	80075ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2224      	movs	r2, #36	@ 0x24
 800756a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f850 	bl	8007640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e02d      	b.n	8007636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2224      	movs	r2, #36	@ 0x24
 80075e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f812 	bl	8007640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800764c:	2b00      	cmp	r3, #0
 800764e:	d108      	bne.n	8007662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007660:	e031      	b.n	80076c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007662:	2310      	movs	r3, #16
 8007664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007666:	2310      	movs	r3, #16
 8007668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	0e5b      	lsrs	r3, r3, #25
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	0f5b      	lsrs	r3, r3, #29
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	7b3a      	ldrb	r2, [r7, #12]
 800768e:	4911      	ldr	r1, [pc, #68]	@ (80076d4 <UARTEx_SetNbDataToProcess+0x94>)
 8007690:	5c8a      	ldrb	r2, [r1, r2]
 8007692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007696:	7b3a      	ldrb	r2, [r7, #12]
 8007698:	490f      	ldr	r1, [pc, #60]	@ (80076d8 <UARTEx_SetNbDataToProcess+0x98>)
 800769a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800769c:	fb93 f3f2 	sdiv	r3, r3, r2
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	7b7a      	ldrb	r2, [r7, #13]
 80076ac:	4909      	ldr	r1, [pc, #36]	@ (80076d4 <UARTEx_SetNbDataToProcess+0x94>)
 80076ae:	5c8a      	ldrb	r2, [r1, r2]
 80076b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076b4:	7b7a      	ldrb	r2, [r7, #13]
 80076b6:	4908      	ldr	r1, [pc, #32]	@ (80076d8 <UARTEx_SetNbDataToProcess+0x98>)
 80076b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076c6:	bf00      	nop
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	08011298 	.word	0x08011298
 80076d8:	080112a0 	.word	0x080112a0

080076dc <__NVIC_SetPriority>:
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80076e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	db0a      	blt.n	8007706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	490c      	ldr	r1, [pc, #48]	@ (8007728 <__NVIC_SetPriority+0x4c>)
 80076f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076fa:	0112      	lsls	r2, r2, #4
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	440b      	add	r3, r1
 8007700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007704:	e00a      	b.n	800771c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4908      	ldr	r1, [pc, #32]	@ (800772c <__NVIC_SetPriority+0x50>)
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	3b04      	subs	r3, #4
 8007714:	0112      	lsls	r2, r2, #4
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	440b      	add	r3, r1
 800771a:	761a      	strb	r2, [r3, #24]
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	e000e100 	.word	0xe000e100
 800772c:	e000ed00 	.word	0xe000ed00

08007730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <SysTick_Handler+0x1c>)
 8007736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007738:	f002 f98a 	bl	8009a50 <xTaskGetSchedulerState>
 800773c:	4603      	mov	r3, r0
 800773e:	2b01      	cmp	r3, #1
 8007740:	d001      	beq.n	8007746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007742:	f000 fda1 	bl	8008288 <xPortSysTickHandler>
  }
}
 8007746:	bf00      	nop
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	e000e010 	.word	0xe000e010

08007750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007754:	2100      	movs	r1, #0
 8007756:	f06f 0004 	mvn.w	r0, #4
 800775a:	f7ff ffbf 	bl	80076dc <__NVIC_SetPriority>
#endif
}
 800775e:	bf00      	nop
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776a:	f3ef 8305 	mrs	r3, IPSR
 800776e:	603b      	str	r3, [r7, #0]
  return(result);
 8007770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007776:	f06f 0305 	mvn.w	r3, #5
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e00c      	b.n	8007798 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800777e:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <osKernelInitialize+0x44>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007786:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <osKernelInitialize+0x44>)
 8007788:	2201      	movs	r2, #1
 800778a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800778c:	2300      	movs	r3, #0
 800778e:	607b      	str	r3, [r7, #4]
 8007790:	e002      	b.n	8007798 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295
 8007796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007798:	687b      	ldr	r3, [r7, #4]
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	24001ea0 	.word	0x24001ea0

080077ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077b2:	f3ef 8305 	mrs	r3, IPSR
 80077b6:	603b      	str	r3, [r7, #0]
  return(result);
 80077b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80077be:	f06f 0305 	mvn.w	r3, #5
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	e010      	b.n	80077e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077c6:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <osKernelStart+0x48>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d109      	bne.n	80077e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077ce:	f7ff ffbf 	bl	8007750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077d2:	4b08      	ldr	r3, [pc, #32]	@ (80077f4 <osKernelStart+0x48>)
 80077d4:	2202      	movs	r2, #2
 80077d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077d8:	f001 fcd6 	bl	8009188 <vTaskStartScheduler>
      stat = osOK;
 80077dc:	2300      	movs	r3, #0
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	e002      	b.n	80077e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077e2:	f04f 33ff 	mov.w	r3, #4294967295
 80077e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077e8:	687b      	ldr	r3, [r7, #4]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	24001ea0 	.word	0x24001ea0

080077f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08e      	sub	sp, #56	@ 0x38
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007808:	f3ef 8305 	mrs	r3, IPSR
 800780c:	617b      	str	r3, [r7, #20]
  return(result);
 800780e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007810:	2b00      	cmp	r3, #0
 8007812:	d17e      	bne.n	8007912 <osThreadNew+0x11a>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d07b      	beq.n	8007912 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800781a:	2380      	movs	r3, #128	@ 0x80
 800781c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800781e:	2318      	movs	r3, #24
 8007820:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007826:	f04f 33ff 	mov.w	r3, #4294967295
 800782a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d045      	beq.n	80078be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <osThreadNew+0x48>
        name = attr->name;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d008      	beq.n	8007866 <osThreadNew+0x6e>
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b38      	cmp	r3, #56	@ 0x38
 8007858:	d805      	bhi.n	8007866 <osThreadNew+0x6e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <osThreadNew+0x72>
        return (NULL);
 8007866:	2300      	movs	r3, #0
 8007868:	e054      	b.n	8007914 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	089b      	lsrs	r3, r3, #2
 8007878:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00e      	beq.n	80078a0 <osThreadNew+0xa8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2ba7      	cmp	r3, #167	@ 0xa7
 8007888:	d90a      	bls.n	80078a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800788e:	2b00      	cmp	r3, #0
 8007890:	d006      	beq.n	80078a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <osThreadNew+0xa8>
        mem = 1;
 800789a:	2301      	movs	r3, #1
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	e010      	b.n	80078c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10c      	bne.n	80078c2 <osThreadNew+0xca>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d108      	bne.n	80078c2 <osThreadNew+0xca>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <osThreadNew+0xca>
          mem = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e001      	b.n	80078c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d110      	bne.n	80078ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078d0:	9202      	str	r2, [sp, #8]
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f001 fa5e 	bl	8008da0 <xTaskCreateStatic>
 80078e4:	4603      	mov	r3, r0
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	e013      	b.n	8007912 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d110      	bne.n	8007912 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	f107 0310 	add.w	r3, r7, #16
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f001 faac 	bl	8008e60 <xTaskCreate>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <osThreadNew+0x11a>
            hTask = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007912:	693b      	ldr	r3, [r7, #16]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	@ 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007924:	f3ef 8305 	mrs	r3, IPSR
 8007928:	60bb      	str	r3, [r7, #8]
  return(result);
 800792a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <osDelay+0x1c>
    stat = osErrorISR;
 8007930:	f06f 0305 	mvn.w	r3, #5
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	e007      	b.n	8007948 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fbea 	bl	800911c <vTaskDelay>
    }
  }

  return (stat);
 8007948:	68fb      	ldr	r3, [r7, #12]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a07      	ldr	r2, [pc, #28]	@ (8007980 <vApplicationGetIdleTaskMemory+0x2c>)
 8007964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4a06      	ldr	r2, [pc, #24]	@ (8007984 <vApplicationGetIdleTaskMemory+0x30>)
 800796a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2280      	movs	r2, #128	@ 0x80
 8007970:	601a      	str	r2, [r3, #0]
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	24001ea4 	.word	0x24001ea4
 8007984:	24001f4c 	.word	0x24001f4c

08007988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4a07      	ldr	r2, [pc, #28]	@ (80079b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4a06      	ldr	r2, [pc, #24]	@ (80079b8 <vApplicationGetTimerTaskMemory+0x30>)
 800799e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079a6:	601a      	str	r2, [r3, #0]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	2400214c 	.word	0x2400214c
 80079b8:	240021f4 	.word	0x240021f4

080079bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	@ 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079c8:	f001 fc4e 	bl	8009268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007b40 <pvPortMalloc+0x184>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079d4:	f000 f924 	bl	8007c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b44 <pvPortMalloc+0x188>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4013      	ands	r3, r2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f040 8095 	bne.w	8007b10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01e      	beq.n	8007a2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80079ec:	2208      	movs	r2, #8
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d015      	beq.n	8007a2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	3308      	adds	r3, #8
 8007a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d06f      	beq.n	8007b10 <pvPortMalloc+0x154>
 8007a30:	4b45      	ldr	r3, [pc, #276]	@ (8007b48 <pvPortMalloc+0x18c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d86a      	bhi.n	8007b10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a3a:	4b44      	ldr	r3, [pc, #272]	@ (8007b4c <pvPortMalloc+0x190>)
 8007a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a3e:	4b43      	ldr	r3, [pc, #268]	@ (8007b4c <pvPortMalloc+0x190>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a44:	e004      	b.n	8007a50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d903      	bls.n	8007a62 <pvPortMalloc+0xa6>
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f1      	bne.n	8007a46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a62:	4b37      	ldr	r3, [pc, #220]	@ (8007b40 <pvPortMalloc+0x184>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d051      	beq.n	8007b10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2208      	movs	r2, #8
 8007a72:	4413      	add	r3, r2
 8007a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	1ad2      	subs	r2, r2, r3
 8007a86:	2308      	movs	r3, #8
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d920      	bls.n	8007ad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <pvPortMalloc+0xfc>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007aca:	69b8      	ldr	r0, [r7, #24]
 8007acc:	f000 f90a 	bl	8007ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b48 <pvPortMalloc+0x18c>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	4a1b      	ldr	r2, [pc, #108]	@ (8007b48 <pvPortMalloc+0x18c>)
 8007adc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ade:	4b1a      	ldr	r3, [pc, #104]	@ (8007b48 <pvPortMalloc+0x18c>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b50 <pvPortMalloc+0x194>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d203      	bcs.n	8007af2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007aea:	4b17      	ldr	r3, [pc, #92]	@ (8007b48 <pvPortMalloc+0x18c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a18      	ldr	r2, [pc, #96]	@ (8007b50 <pvPortMalloc+0x194>)
 8007af0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	4b13      	ldr	r3, [pc, #76]	@ (8007b44 <pvPortMalloc+0x188>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b06:	4b13      	ldr	r3, [pc, #76]	@ (8007b54 <pvPortMalloc+0x198>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	4a11      	ldr	r2, [pc, #68]	@ (8007b54 <pvPortMalloc+0x198>)
 8007b0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b10:	f001 fbb8 	bl	8009284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <pvPortMalloc+0x17a>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	60fb      	str	r3, [r7, #12]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <pvPortMalloc+0x176>
	return pvReturn;
 8007b36:	69fb      	ldr	r3, [r7, #28]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3728      	adds	r7, #40	@ 0x28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	240061fc 	.word	0x240061fc
 8007b44:	24006210 	.word	0x24006210
 8007b48:	24006200 	.word	0x24006200
 8007b4c:	240061f4 	.word	0x240061f4
 8007b50:	24006204 	.word	0x24006204
 8007b54:	24006208 	.word	0x24006208

08007b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d04f      	beq.n	8007c0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	425b      	negs	r3, r3
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4413      	add	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	4b25      	ldr	r3, [pc, #148]	@ (8007c14 <vPortFree+0xbc>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4013      	ands	r3, r2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10b      	bne.n	8007b9e <vPortFree+0x46>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60fb      	str	r3, [r7, #12]
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	e7fd      	b.n	8007b9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <vPortFree+0x66>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60bb      	str	r3, [r7, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <vPortFree+0xbc>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01e      	beq.n	8007c0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11a      	bne.n	8007c0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c14 <vPortFree+0xbc>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	401a      	ands	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007be4:	f001 fb40 	bl	8009268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <vPortFree+0xc0>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	4a09      	ldr	r2, [pc, #36]	@ (8007c18 <vPortFree+0xc0>)
 8007bf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bf6:	6938      	ldr	r0, [r7, #16]
 8007bf8:	f000 f874 	bl	8007ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bfc:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <vPortFree+0xc4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3301      	adds	r3, #1
 8007c02:	4a06      	ldr	r2, [pc, #24]	@ (8007c1c <vPortFree+0xc4>)
 8007c04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c06:	f001 fb3d 	bl	8009284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c0a:	bf00      	nop
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	24006210 	.word	0x24006210
 8007c18:	24006200 	.word	0x24006200
 8007c1c:	2400620c 	.word	0x2400620c

08007c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c2c:	4b27      	ldr	r3, [pc, #156]	@ (8007ccc <prvHeapInit+0xac>)
 8007c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00c      	beq.n	8007c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3307      	adds	r3, #7
 8007c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ccc <prvHeapInit+0xac>)
 8007c50:	4413      	add	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c58:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd0 <prvHeapInit+0xb0>)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd0 <prvHeapInit+0xb0>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	4413      	add	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0307 	bic.w	r3, r3, #7
 8007c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4a15      	ldr	r2, [pc, #84]	@ (8007cd4 <prvHeapInit+0xb4>)
 8007c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c82:	4b14      	ldr	r3, [pc, #80]	@ (8007cd4 <prvHeapInit+0xb4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c8a:	4b12      	ldr	r3, [pc, #72]	@ (8007cd4 <prvHeapInit+0xb4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	1ad2      	subs	r2, r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd4 <prvHeapInit+0xb4>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd8 <prvHeapInit+0xb8>)
 8007cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4a09      	ldr	r2, [pc, #36]	@ (8007cdc <prvHeapInit+0xbc>)
 8007cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cb8:	4b09      	ldr	r3, [pc, #36]	@ (8007ce0 <prvHeapInit+0xc0>)
 8007cba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cbe:	601a      	str	r2, [r3, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	240025f4 	.word	0x240025f4
 8007cd0:	240061f4 	.word	0x240061f4
 8007cd4:	240061fc 	.word	0x240061fc
 8007cd8:	24006204 	.word	0x24006204
 8007cdc:	24006200 	.word	0x24006200
 8007ce0:	24006210 	.word	0x24006210

08007ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cec:	4b28      	ldr	r3, [pc, #160]	@ (8007d90 <prvInsertBlockIntoFreeList+0xac>)
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e002      	b.n	8007cf8 <prvInsertBlockIntoFreeList+0x14>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d8f7      	bhi.n	8007cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d108      	bne.n	8007d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d118      	bne.n	8007d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b15      	ldr	r3, [pc, #84]	@ (8007d94 <prvInsertBlockIntoFreeList+0xb0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d00d      	beq.n	8007d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	441a      	add	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e008      	b.n	8007d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <prvInsertBlockIntoFreeList+0xb0>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e003      	b.n	8007d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d002      	beq.n	8007d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d82:	bf00      	nop
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	240061f4 	.word	0x240061f4
 8007d94:	240061fc 	.word	0x240061fc

08007d98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f103 0208 	add.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f04f 32ff 	mov.w	r2, #4294967295
 8007db0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f103 0208 	add.w	r2, r3, #8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f103 0208 	add.w	r2, r3, #8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d103      	bne.n	8007e5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e00c      	b.n	8007e74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e002      	b.n	8007e68 <vListInsert+0x2e>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d2f6      	bcs.n	8007e62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6892      	ldr	r2, [r2, #8]
 8007ec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6852      	ldr	r2, [r2, #4]
 8007ecc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d103      	bne.n	8007ee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	1e5a      	subs	r2, r3, #1
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3b04      	subs	r3, #4
 8007f10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f023 0201 	bic.w	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3b04      	subs	r3, #4
 8007f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f30:	4a0c      	ldr	r2, [pc, #48]	@ (8007f64 <pxPortInitialiseStack+0x64>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3b14      	subs	r3, #20
 8007f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3b04      	subs	r3, #4
 8007f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f06f 0202 	mvn.w	r2, #2
 8007f4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3b20      	subs	r3, #32
 8007f54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f56:	68fb      	ldr	r3, [r7, #12]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	08007f69 	.word	0x08007f69

08007f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f72:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <prvTaskExitError+0x58>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7a:	d00b      	beq.n	8007f94 <prvTaskExitError+0x2c>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60fb      	str	r3, [r7, #12]
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <prvTaskExitError+0x28>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60bb      	str	r3, [r7, #8]
}
 8007fa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fa8:	bf00      	nop
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0fc      	beq.n	8007faa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	24000010 	.word	0x24000010
	...

08007fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fd0:	4b07      	ldr	r3, [pc, #28]	@ (8007ff0 <pxCurrentTCBConst2>)
 8007fd2:	6819      	ldr	r1, [r3, #0]
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f380 8809 	msr	PSP, r0
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	4770      	bx	lr
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst2>:
 8007ff0:	2400625c 	.word	0x2400625c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ff8:	4808      	ldr	r0, [pc, #32]	@ (800801c <prvPortStartFirstTask+0x24>)
 8007ffa:	6800      	ldr	r0, [r0, #0]
 8007ffc:	6800      	ldr	r0, [r0, #0]
 8007ffe:	f380 8808 	msr	MSP, r0
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8814 	msr	CONTROL, r0
 800800a:	b662      	cpsie	i
 800800c:	b661      	cpsie	f
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	df00      	svc	0
 8008018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800801a:	bf00      	nop
 800801c:	e000ed08 	.word	0xe000ed08

08008020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008026:	4b47      	ldr	r3, [pc, #284]	@ (8008144 <xPortStartScheduler+0x124>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a47      	ldr	r2, [pc, #284]	@ (8008148 <xPortStartScheduler+0x128>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10b      	bne.n	8008048 <xPortStartScheduler+0x28>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008048:	4b3e      	ldr	r3, [pc, #248]	@ (8008144 <xPortStartScheduler+0x124>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a3f      	ldr	r2, [pc, #252]	@ (800814c <xPortStartScheduler+0x12c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d10b      	bne.n	800806a <xPortStartScheduler+0x4a>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60fb      	str	r3, [r7, #12]
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	e7fd      	b.n	8008066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800806a:	4b39      	ldr	r3, [pc, #228]	@ (8008150 <xPortStartScheduler+0x130>)
 800806c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	22ff      	movs	r2, #255	@ 0xff
 800807a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800808c:	b2da      	uxtb	r2, r3
 800808e:	4b31      	ldr	r3, [pc, #196]	@ (8008154 <xPortStartScheduler+0x134>)
 8008090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008092:	4b31      	ldr	r3, [pc, #196]	@ (8008158 <xPortStartScheduler+0x138>)
 8008094:	2207      	movs	r2, #7
 8008096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008098:	e009      	b.n	80080ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800809a:	4b2f      	ldr	r3, [pc, #188]	@ (8008158 <xPortStartScheduler+0x138>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3b01      	subs	r3, #1
 80080a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008158 <xPortStartScheduler+0x138>)
 80080a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b6:	2b80      	cmp	r3, #128	@ 0x80
 80080b8:	d0ef      	beq.n	800809a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080ba:	4b27      	ldr	r3, [pc, #156]	@ (8008158 <xPortStartScheduler+0x138>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1c3 0307 	rsb	r3, r3, #7
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d00b      	beq.n	80080de <xPortStartScheduler+0xbe>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	60bb      	str	r3, [r7, #8]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080de:	4b1e      	ldr	r3, [pc, #120]	@ (8008158 <xPortStartScheduler+0x138>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008158 <xPortStartScheduler+0x138>)
 80080e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008158 <xPortStartScheduler+0x138>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080f0:	4a19      	ldr	r2, [pc, #100]	@ (8008158 <xPortStartScheduler+0x138>)
 80080f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080fc:	4b17      	ldr	r3, [pc, #92]	@ (800815c <xPortStartScheduler+0x13c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a16      	ldr	r2, [pc, #88]	@ (800815c <xPortStartScheduler+0x13c>)
 8008102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008108:	4b14      	ldr	r3, [pc, #80]	@ (800815c <xPortStartScheduler+0x13c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a13      	ldr	r2, [pc, #76]	@ (800815c <xPortStartScheduler+0x13c>)
 800810e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008114:	f000 f8da 	bl	80082cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008118:	4b11      	ldr	r3, [pc, #68]	@ (8008160 <xPortStartScheduler+0x140>)
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800811e:	f000 f8f9 	bl	8008314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <xPortStartScheduler+0x144>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a0f      	ldr	r2, [pc, #60]	@ (8008164 <xPortStartScheduler+0x144>)
 8008128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800812c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800812e:	f7ff ff63 	bl	8007ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008132:	f001 fa0f 	bl	8009554 <vTaskSwitchContext>
	prvTaskExitError();
 8008136:	f7ff ff17 	bl	8007f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	e000ed00 	.word	0xe000ed00
 8008148:	410fc271 	.word	0x410fc271
 800814c:	410fc270 	.word	0x410fc270
 8008150:	e000e400 	.word	0xe000e400
 8008154:	24006214 	.word	0x24006214
 8008158:	24006218 	.word	0x24006218
 800815c:	e000ed20 	.word	0xe000ed20
 8008160:	24000010 	.word	0x24000010
 8008164:	e000ef34 	.word	0xe000ef34

08008168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	607b      	str	r3, [r7, #4]
}
 8008180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008182:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <vPortEnterCritical+0x5c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	4a0e      	ldr	r2, [pc, #56]	@ (80081c4 <vPortEnterCritical+0x5c>)
 800818a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800818c:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <vPortEnterCritical+0x5c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d110      	bne.n	80081b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008194:	4b0c      	ldr	r3, [pc, #48]	@ (80081c8 <vPortEnterCritical+0x60>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	603b      	str	r3, [r7, #0]
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	e7fd      	b.n	80081b2 <vPortEnterCritical+0x4a>
	}
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	24000010 	.word	0x24000010
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081d2:	4b12      	ldr	r3, [pc, #72]	@ (800821c <vPortExitCritical+0x50>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10b      	bne.n	80081f2 <vPortExitCritical+0x26>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	607b      	str	r3, [r7, #4]
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	e7fd      	b.n	80081ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081f2:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <vPortExitCritical+0x50>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	4a08      	ldr	r2, [pc, #32]	@ (800821c <vPortExitCritical+0x50>)
 80081fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081fc:	4b07      	ldr	r3, [pc, #28]	@ (800821c <vPortExitCritical+0x50>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <vPortExitCritical+0x44>
 8008204:	2300      	movs	r3, #0
 8008206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800820e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	24000010 	.word	0x24000010

08008220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008220:	f3ef 8009 	mrs	r0, PSP
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4b15      	ldr	r3, [pc, #84]	@ (8008280 <pxCurrentTCBConst>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f01e 0f10 	tst.w	lr, #16
 8008230:	bf08      	it	eq
 8008232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008244:	f380 8811 	msr	BASEPRI, r0
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f001 f980 	bl	8009554 <vTaskSwitchContext>
 8008254:	f04f 0000 	mov.w	r0, #0
 8008258:	f380 8811 	msr	BASEPRI, r0
 800825c:	bc09      	pop	{r0, r3}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008266:	f01e 0f10 	tst.w	lr, #16
 800826a:	bf08      	it	eq
 800826c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008270:	f380 8809 	msr	PSP, r0
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst>:
 8008280:	2400625c 	.word	0x2400625c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082a2:	f001 f89d 	bl	80093e0 <xTaskIncrementTick>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <xPortSysTickHandler+0x40>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	2300      	movs	r3, #0
 80082b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f383 8811 	msr	BASEPRI, r3
}
 80082be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008300 <vPortSetupTimerInterrupt+0x34>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008304 <vPortSetupTimerInterrupt+0x38>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <vPortSetupTimerInterrupt+0x3c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0a      	ldr	r2, [pc, #40]	@ (800830c <vPortSetupTimerInterrupt+0x40>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	099b      	lsrs	r3, r3, #6
 80082e8:	4a09      	ldr	r2, [pc, #36]	@ (8008310 <vPortSetupTimerInterrupt+0x44>)
 80082ea:	3b01      	subs	r3, #1
 80082ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ee:	4b04      	ldr	r3, [pc, #16]	@ (8008300 <vPortSetupTimerInterrupt+0x34>)
 80082f0:	2207      	movs	r2, #7
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e010 	.word	0xe000e010
 8008304:	e000e018 	.word	0xe000e018
 8008308:	24000000 	.word	0x24000000
 800830c:	10624dd3 	.word	0x10624dd3
 8008310:	e000e014 	.word	0xe000e014

08008314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008324 <vPortEnableVFP+0x10>
 8008318:	6801      	ldr	r1, [r0, #0]
 800831a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800831e:	6001      	str	r1, [r0, #0]
 8008320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008322:	bf00      	nop
 8008324:	e000ed88 	.word	0xe000ed88

08008328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800832e:	f3ef 8305 	mrs	r3, IPSR
 8008332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b0f      	cmp	r3, #15
 8008338:	d915      	bls.n	8008366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800833a:	4a18      	ldr	r2, [pc, #96]	@ (800839c <vPortValidateInterruptPriority+0x74>)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008344:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <vPortValidateInterruptPriority+0x78>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	7afa      	ldrb	r2, [r7, #11]
 800834a:	429a      	cmp	r2, r3
 800834c:	d20b      	bcs.n	8008366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	e7fd      	b.n	8008362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008366:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <vPortValidateInterruptPriority+0x7c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800836e:	4b0e      	ldr	r3, [pc, #56]	@ (80083a8 <vPortValidateInterruptPriority+0x80>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d90b      	bls.n	800838e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	603b      	str	r3, [r7, #0]
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	e7fd      	b.n	800838a <vPortValidateInterruptPriority+0x62>
	}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	e000e3f0 	.word	0xe000e3f0
 80083a0:	24006214 	.word	0x24006214
 80083a4:	e000ed0c 	.word	0xe000ed0c
 80083a8:	24006218 	.word	0x24006218

080083ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10b      	bne.n	80083d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60bb      	str	r3, [r7, #8]
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	e7fd      	b.n	80083d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083d8:	f7ff fec6 	bl	8008168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e4:	68f9      	ldr	r1, [r7, #12]
 80083e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	441a      	add	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008408:	3b01      	subs	r3, #1
 800840a:	68f9      	ldr	r1, [r7, #12]
 800840c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800840e:	fb01 f303 	mul.w	r3, r1, r3
 8008412:	441a      	add	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	22ff      	movs	r2, #255	@ 0xff
 800841c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	22ff      	movs	r2, #255	@ 0xff
 8008424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d114      	bne.n	8008458 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01a      	beq.n	800846c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3310      	adds	r3, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f001 f942 	bl	80096c4 <xTaskRemoveFromEventList>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d012      	beq.n	800846c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008446:	4b0d      	ldr	r3, [pc, #52]	@ (800847c <xQueueGenericReset+0xd0>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	e009      	b.n	800846c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3310      	adds	r3, #16
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fc9b 	bl	8007d98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3324      	adds	r3, #36	@ 0x24
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fc96 	bl	8007d98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800846c:	f7ff feae 	bl	80081cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008470:	2301      	movs	r3, #1
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08e      	sub	sp, #56	@ 0x38
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <xQueueGenericCreateStatic+0x56>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <xQueueGenericCreateStatic+0x5a>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <xQueueGenericCreateStatic+0x5c>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	623b      	str	r3, [r7, #32]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xQueueGenericCreateStatic+0x84>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <xQueueGenericCreateStatic+0x88>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <xQueueGenericCreateStatic+0x8a>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	61fb      	str	r3, [r7, #28]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008526:	2350      	movs	r3, #80	@ 0x50
 8008528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2b50      	cmp	r3, #80	@ 0x50
 800852e:	d00b      	beq.n	8008548 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	61bb      	str	r3, [r7, #24]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008548:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800854e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00d      	beq.n	8008570 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800855c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f805 	bl	800857a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008572:	4618      	mov	r0, r3
 8008574:	3730      	adds	r7, #48	@ 0x30
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
 8008586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e002      	b.n	800859c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085a8:	2101      	movs	r1, #1
 80085aa:	69b8      	ldr	r0, [r7, #24]
 80085ac:	f7ff fefe 	bl	80083ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08e      	sub	sp, #56	@ 0x38
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085ce:	2300      	movs	r3, #0
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <xQueueGenericSend+0x34>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085ee:	bf00      	nop
 80085f0:	bf00      	nop
 80085f2:	e7fd      	b.n	80085f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <xQueueGenericSend+0x42>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <xQueueGenericSend+0x46>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <xQueueGenericSend+0x48>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <xQueueGenericSend+0x64>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	e7fd      	b.n	8008620 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d103      	bne.n	8008632 <xQueueGenericSend+0x72>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <xQueueGenericSend+0x76>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <xQueueGenericSend+0x78>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <xQueueGenericSend+0x94>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	623b      	str	r3, [r7, #32]
}
 800864e:	bf00      	nop
 8008650:	bf00      	nop
 8008652:	e7fd      	b.n	8008650 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008654:	f001 f9fc 	bl	8009a50 <xTaskGetSchedulerState>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d102      	bne.n	8008664 <xQueueGenericSend+0xa4>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <xQueueGenericSend+0xa8>
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <xQueueGenericSend+0xaa>
 8008668:	2300      	movs	r3, #0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <xQueueGenericSend+0xc6>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	61fb      	str	r3, [r7, #28]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008686:	f7ff fd6f 	bl	8008168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <xQueueGenericSend+0xdc>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d129      	bne.n	80086f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086a2:	f000 fa0f 	bl	8008ac4 <prvCopyDataToQueue>
 80086a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d010      	beq.n	80086d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	3324      	adds	r3, #36	@ 0x24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 f805 	bl	80096c4 <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d013      	beq.n	80086e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086c0:	4b3f      	ldr	r3, [pc, #252]	@ (80087c0 <xQueueGenericSend+0x200>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	e00a      	b.n	80086e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086d8:	4b39      	ldr	r3, [pc, #228]	@ (80087c0 <xQueueGenericSend+0x200>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086e8:	f7ff fd70 	bl	80081cc <vPortExitCritical>
				return pdPASS;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e063      	b.n	80087b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086f6:	f7ff fd69 	bl	80081cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e05c      	b.n	80087b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f83f 	bl	800978c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008712:	f7ff fd5b 	bl	80081cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008716:	f000 fda7 	bl	8009268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800871a:	f7ff fd25 	bl	8008168 <vPortEnterCritical>
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008724:	b25b      	sxtb	r3, r3
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d103      	bne.n	8008734 <xQueueGenericSend+0x174>
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873a:	b25b      	sxtb	r3, r3
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008740:	d103      	bne.n	800874a <xQueueGenericSend+0x18a>
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800874a:	f7ff fd3f 	bl	80081cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800874e:	1d3a      	adds	r2, r7, #4
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f82e 	bl	80097b8 <xTaskCheckForTimeOut>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d124      	bne.n	80087ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008762:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008764:	f000 faa6 	bl	8008cb4 <prvIsQueueFull>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d018      	beq.n	80087a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	3310      	adds	r3, #16
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f000 ff52 	bl	8009620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800877c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800877e:	f000 fa31 	bl	8008be4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f000 fd7f 	bl	8009284 <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	f47f af7c 	bne.w	8008686 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800878e:	4b0c      	ldr	r3, [pc, #48]	@ (80087c0 <xQueueGenericSend+0x200>)
 8008790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	e772      	b.n	8008686 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087a2:	f000 fa1f 	bl	8008be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a6:	f000 fd6d 	bl	8009284 <xTaskResumeAll>
 80087aa:	e76c      	b.n	8008686 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ae:	f000 fa19 	bl	8008be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b2:	f000 fd67 	bl	8009284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3738      	adds	r7, #56	@ 0x38
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b090      	sub	sp, #64	@ 0x40
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10b      	bne.n	80087f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	e7fd      	b.n	80087f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <xQueueGenericSendFromISR+0x3e>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <xQueueGenericSendFromISR+0x42>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <xQueueGenericSendFromISR+0x44>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10b      	bne.n	8008824 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800881e:	bf00      	nop
 8008820:	bf00      	nop
 8008822:	e7fd      	b.n	8008820 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d103      	bne.n	8008832 <xQueueGenericSendFromISR+0x6e>
 800882a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <xQueueGenericSendFromISR+0x72>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueGenericSendFromISR+0x74>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	623b      	str	r3, [r7, #32]
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008854:	f7ff fd68 	bl	8008328 <vPortValidateInterruptPriority>
	__asm volatile
 8008858:	f3ef 8211 	mrs	r2, BASEPRI
 800885c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	61fa      	str	r2, [r7, #28]
 800886e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008870:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887c:	429a      	cmp	r2, r3
 800887e:	d302      	bcc.n	8008886 <xQueueGenericSendFromISR+0xc2>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d12f      	bne.n	80088e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800888c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008894:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800889c:	f000 f912 	bl	8008ac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d112      	bne.n	80088d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d016      	beq.n	80088e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	3324      	adds	r3, #36	@ 0x24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 ff04 	bl	80096c4 <xTaskRemoveFromEventList>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00e      	beq.n	80088e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e007      	b.n	80088e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80088d4:	3301      	adds	r3, #1
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	b25a      	sxtb	r2, r3
 80088da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80088e0:	2301      	movs	r3, #1
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80088e4:	e001      	b.n	80088ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ec:	617b      	str	r3, [r7, #20]
	__asm volatile
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f383 8811 	msr	BASEPRI, r3
}
 80088f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3740      	adds	r7, #64	@ 0x40
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	@ 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800890c:	2300      	movs	r3, #0
 800890e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <xQueueReceive+0x32>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	623b      	str	r3, [r7, #32]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <xQueueReceive+0x40>
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <xQueueReceive+0x44>
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <xQueueReceive+0x46>
 8008944:	2300      	movs	r3, #0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <xQueueReceive+0x62>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	61fb      	str	r3, [r7, #28]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008962:	f001 f875 	bl	8009a50 <xTaskGetSchedulerState>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <xQueueReceive+0x72>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <xQueueReceive+0x76>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueReceive+0x78>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <xQueueReceive+0x94>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	61bb      	str	r3, [r7, #24]
}
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008994:	f7ff fbe8 	bl	8008168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01f      	beq.n	80089e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a8:	f000 f8f6 	bl	8008b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	1e5a      	subs	r2, r3, #1
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00f      	beq.n	80089dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	3310      	adds	r3, #16
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fe7f 	bl	80096c4 <xTaskRemoveFromEventList>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089cc:	4b3c      	ldr	r3, [pc, #240]	@ (8008ac0 <xQueueReceive+0x1c0>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089dc:	f7ff fbf6 	bl	80081cc <vPortExitCritical>
				return pdPASS;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e069      	b.n	8008ab8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ea:	f7ff fbef 	bl	80081cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e062      	b.n	8008ab8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d106      	bne.n	8008a06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089f8:	f107 0310 	add.w	r3, r7, #16
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fec5 	bl	800978c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a02:	2301      	movs	r3, #1
 8008a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a06:	f7ff fbe1 	bl	80081cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a0a:	f000 fc2d 	bl	8009268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a0e:	f7ff fbab 	bl	8008168 <vPortEnterCritical>
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d103      	bne.n	8008a28 <xQueueReceive+0x128>
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d103      	bne.n	8008a3e <xQueueReceive+0x13e>
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a3e:	f7ff fbc5 	bl	80081cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a42:	1d3a      	adds	r2, r7, #4
 8008a44:	f107 0310 	add.w	r3, r7, #16
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 feb4 	bl	80097b8 <xTaskCheckForTimeOut>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d123      	bne.n	8008a9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a58:	f000 f916 	bl	8008c88 <prvIsQueueEmpty>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d017      	beq.n	8008a92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	3324      	adds	r3, #36	@ 0x24
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fdd8 	bl	8009620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a72:	f000 f8b7 	bl	8008be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a76:	f000 fc05 	bl	8009284 <xTaskResumeAll>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d189      	bne.n	8008994 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008a80:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac0 <xQueueReceive+0x1c0>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	e780      	b.n	8008994 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a94:	f000 f8a6 	bl	8008be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a98:	f000 fbf4 	bl	8009284 <xTaskResumeAll>
 8008a9c:	e77a      	b.n	8008994 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aa0:	f000 f8a0 	bl	8008be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aa4:	f000 fbee 	bl	8009284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aaa:	f000 f8ed 	bl	8008c88 <prvIsQueueEmpty>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f43f af6f 	beq.w	8008994 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ab6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3730      	adds	r7, #48	@ 0x30
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d14d      	bne.n	8008b86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 ffcc 	bl	8009a8c <xTaskPriorityDisinherit>
 8008af4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	609a      	str	r2, [r3, #8]
 8008afc:	e043      	b.n	8008b86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d119      	bne.n	8008b38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6858      	ldr	r0, [r3, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	f002 fed7 	bl	800b8c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d32b      	bcc.n	8008b86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	605a      	str	r2, [r3, #4]
 8008b36:	e026      	b.n	8008b86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68d8      	ldr	r0, [r3, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b40:	461a      	mov	r2, r3
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	f002 febd 	bl	800b8c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b50:	425b      	negs	r3, r3
 8008b52:	441a      	add	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d207      	bcs.n	8008b74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	441a      	add	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d105      	bne.n	8008b86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b8e:	697b      	ldr	r3, [r7, #20]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	441a      	add	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d303      	bcc.n	8008bcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68d9      	ldr	r1, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6838      	ldr	r0, [r7, #0]
 8008bd8:	f002 fe73 	bl	800b8c2 <memcpy>
	}
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bec:	f7ff fabc 	bl	8008168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bf8:	e011      	b.n	8008c1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d012      	beq.n	8008c28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3324      	adds	r3, #36	@ 0x24
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fd5c 	bl	80096c4 <xTaskRemoveFromEventList>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c12:	f000 fe35 	bl	8009880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dce9      	bgt.n	8008bfa <prvUnlockQueue+0x16>
 8008c26:	e000      	b.n	8008c2a <prvUnlockQueue+0x46>
					break;
 8008c28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	22ff      	movs	r2, #255	@ 0xff
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c32:	f7ff facb 	bl	80081cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c36:	f7ff fa97 	bl	8008168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c42:	e011      	b.n	8008c68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d012      	beq.n	8008c72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3310      	adds	r3, #16
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fd37 	bl	80096c4 <xTaskRemoveFromEventList>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c5c:	f000 fe10 	bl	8009880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	dce9      	bgt.n	8008c44 <prvUnlockQueue+0x60>
 8008c70:	e000      	b.n	8008c74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	22ff      	movs	r2, #255	@ 0xff
 8008c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c7c:	f7ff faa6 	bl	80081cc <vPortExitCritical>
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c90:	f7ff fa6a 	bl	8008168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e001      	b.n	8008ca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ca6:	f7ff fa91 	bl	80081cc <vPortExitCritical>

	return xReturn;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cbc:	f7ff fa54 	bl	8008168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d102      	bne.n	8008cd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e001      	b.n	8008cd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cd6:	f7ff fa79 	bl	80081cc <vPortExitCritical>

	return xReturn;
 8008cda:	68fb      	ldr	r3, [r7, #12]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	e014      	b.n	8008d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8008d34 <vQueueAddToRegistry+0x50>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d00:	490c      	ldr	r1, [pc, #48]	@ (8008d34 <vQueueAddToRegistry+0x50>)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d34 <vQueueAddToRegistry+0x50>)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4413      	add	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d16:	e006      	b.n	8008d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b07      	cmp	r3, #7
 8008d22:	d9e7      	bls.n	8008cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	2400621c 	.word	0x2400621c

08008d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d48:	f7ff fa0e 	bl	8008168 <vPortEnterCritical>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d52:	b25b      	sxtb	r3, r3
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d103      	bne.n	8008d62 <vQueueWaitForMessageRestricted+0x2a>
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d103      	bne.n	8008d78 <vQueueWaitForMessageRestricted+0x40>
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d78:	f7ff fa28 	bl	80081cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d106      	bne.n	8008d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	3324      	adds	r3, #36	@ 0x24
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fc6d 	bl	800966c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f7ff ff26 	bl	8008be4 <prvUnlockQueue>
	}
 8008d98:	bf00      	nop
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08e      	sub	sp, #56	@ 0x38
 8008da4:	af04      	add	r7, sp, #16
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10b      	bne.n	8008dcc <xTaskCreateStatic+0x2c>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	623b      	str	r3, [r7, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	e7fd      	b.n	8008dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <xTaskCreateStatic+0x4a>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	61fb      	str	r3, [r7, #28]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008dea:	23a8      	movs	r3, #168	@ 0xa8
 8008dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2ba8      	cmp	r3, #168	@ 0xa8
 8008df2:	d00b      	beq.n	8008e0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	61bb      	str	r3, [r7, #24]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01e      	beq.n	8008e52 <xTaskCreateStatic+0xb2>
 8008e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01b      	beq.n	8008e52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f851 	bl	8008eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e4c:	f000 f8f6 	bl	800903c <prvAddNewTaskToReadyList>
 8008e50:	e001      	b.n	8008e56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e56:	697b      	ldr	r3, [r7, #20]
	}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3728      	adds	r7, #40	@ 0x28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08c      	sub	sp, #48	@ 0x30
 8008e64:	af04      	add	r7, sp, #16
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fda1 	bl	80079bc <pvPortMalloc>
 8008e7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00e      	beq.n	8008ea0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e82:	20a8      	movs	r0, #168	@ 0xa8
 8008e84:	f7fe fd9a 	bl	80079bc <pvPortMalloc>
 8008e88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e96:	e005      	b.n	8008ea4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e98:	6978      	ldr	r0, [r7, #20]
 8008e9a:	f7fe fe5d 	bl	8007b58 <vPortFree>
 8008e9e:	e001      	b.n	8008ea4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d017      	beq.n	8008eda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eb2:	88fa      	ldrh	r2, [r7, #6]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 f80f 	bl	8008eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ece:	69f8      	ldr	r0, [r7, #28]
 8008ed0:	f000 f8b4 	bl	800903c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	e002      	b.n	8008ee0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008eda:	f04f 33ff 	mov.w	r3, #4294967295
 8008ede:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	461a      	mov	r2, r3
 8008f04:	21a5      	movs	r1, #165	@ 0xa5
 8008f06:	f002 fbe5 	bl	800b6d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008f14:	440b      	add	r3, r1
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	f023 0307 	bic.w	r3, r3, #7
 8008f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	617b      	str	r3, [r7, #20]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01f      	beq.n	8008f8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	e012      	b.n	8008f78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	7819      	ldrb	r1, [r3, #0]
 8008f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	3334      	adds	r3, #52	@ 0x34
 8008f62:	460a      	mov	r2, r1
 8008f64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d006      	beq.n	8008f80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b0f      	cmp	r3, #15
 8008f7c:	d9e9      	bls.n	8008f52 <prvInitialiseNewTask+0x66>
 8008f7e:	e000      	b.n	8008f82 <prvInitialiseNewTask+0x96>
			{
				break;
 8008f80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f8a:	e003      	b.n	8008f94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f96:	2b37      	cmp	r3, #55	@ 0x37
 8008f98:	d901      	bls.n	8008f9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f9a:	2337      	movs	r3, #55	@ 0x37
 8008f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	2200      	movs	r2, #0
 8008fae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe ff0f 	bl	8007dd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	3318      	adds	r3, #24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe ff0a 	bl	8007dd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	3354      	adds	r3, #84	@ 0x54
 8008fee:	224c      	movs	r2, #76	@ 0x4c
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 fb6e 	bl	800b6d4 <memset>
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8009030 <prvInitialiseNewTask+0x144>)
 8008ffc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	4a0c      	ldr	r2, [pc, #48]	@ (8009034 <prvInitialiseNewTask+0x148>)
 8009002:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	4a0c      	ldr	r2, [pc, #48]	@ (8009038 <prvInitialiseNewTask+0x14c>)
 8009008:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	68f9      	ldr	r1, [r7, #12]
 800900e:	69b8      	ldr	r0, [r7, #24]
 8009010:	f7fe ff76 	bl	8007f00 <pxPortInitialiseStack>
 8009014:	4602      	mov	r2, r0
 8009016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800901a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009026:	bf00      	nop
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	24006890 	.word	0x24006890
 8009034:	240068f8 	.word	0x240068f8
 8009038:	24006960 	.word	0x24006960

0800903c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009044:	f7ff f890 	bl	8008168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009048:	4b2d      	ldr	r3, [pc, #180]	@ (8009100 <prvAddNewTaskToReadyList+0xc4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <prvAddNewTaskToReadyList+0xc4>)
 8009050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009052:	4b2c      	ldr	r3, [pc, #176]	@ (8009104 <prvAddNewTaskToReadyList+0xc8>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d109      	bne.n	800906e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800905a:	4a2a      	ldr	r2, [pc, #168]	@ (8009104 <prvAddNewTaskToReadyList+0xc8>)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009060:	4b27      	ldr	r3, [pc, #156]	@ (8009100 <prvAddNewTaskToReadyList+0xc4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d110      	bne.n	800908a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009068:	f000 fc2e 	bl	80098c8 <prvInitialiseTaskLists>
 800906c:	e00d      	b.n	800908a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800906e:	4b26      	ldr	r3, [pc, #152]	@ (8009108 <prvAddNewTaskToReadyList+0xcc>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009076:	4b23      	ldr	r3, [pc, #140]	@ (8009104 <prvAddNewTaskToReadyList+0xc8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009080:	429a      	cmp	r2, r3
 8009082:	d802      	bhi.n	800908a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009084:	4a1f      	ldr	r2, [pc, #124]	@ (8009104 <prvAddNewTaskToReadyList+0xc8>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800908a:	4b20      	ldr	r3, [pc, #128]	@ (800910c <prvAddNewTaskToReadyList+0xd0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3301      	adds	r3, #1
 8009090:	4a1e      	ldr	r2, [pc, #120]	@ (800910c <prvAddNewTaskToReadyList+0xd0>)
 8009092:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009094:	4b1d      	ldr	r3, [pc, #116]	@ (800910c <prvAddNewTaskToReadyList+0xd0>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009110 <prvAddNewTaskToReadyList+0xd4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d903      	bls.n	80090b0 <prvAddNewTaskToReadyList+0x74>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ac:	4a18      	ldr	r2, [pc, #96]	@ (8009110 <prvAddNewTaskToReadyList+0xd4>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4a15      	ldr	r2, [pc, #84]	@ (8009114 <prvAddNewTaskToReadyList+0xd8>)
 80090be:	441a      	add	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7fe fe93 	bl	8007df2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090cc:	f7ff f87e 	bl	80081cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009108 <prvAddNewTaskToReadyList+0xcc>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00e      	beq.n	80090f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009104 <prvAddNewTaskToReadyList+0xc8>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d207      	bcs.n	80090f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009118 <prvAddNewTaskToReadyList+0xdc>)
 80090e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	24006730 	.word	0x24006730
 8009104:	2400625c 	.word	0x2400625c
 8009108:	2400673c 	.word	0x2400673c
 800910c:	2400674c 	.word	0x2400674c
 8009110:	24006738 	.word	0x24006738
 8009114:	24006260 	.word	0x24006260
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800912e:	4b14      	ldr	r3, [pc, #80]	@ (8009180 <vTaskDelay+0x64>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00b      	beq.n	800914e <vTaskDelay+0x32>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60bb      	str	r3, [r7, #8]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800914e:	f000 f88b 	bl	8009268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fd09 	bl	8009b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800915a:	f000 f893 	bl	8009284 <xTaskResumeAll>
 800915e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009166:	4b07      	ldr	r3, [pc, #28]	@ (8009184 <vTaskDelay+0x68>)
 8009168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	24006758 	.word	0x24006758
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	@ 0x28
 800918c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009196:	463a      	mov	r2, r7
 8009198:	1d39      	adds	r1, r7, #4
 800919a:	f107 0308 	add.w	r3, r7, #8
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fbd8 	bl	8007954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	9202      	str	r2, [sp, #8]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	2300      	movs	r3, #0
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	2300      	movs	r3, #0
 80091b4:	460a      	mov	r2, r1
 80091b6:	4924      	ldr	r1, [pc, #144]	@ (8009248 <vTaskStartScheduler+0xc0>)
 80091b8:	4824      	ldr	r0, [pc, #144]	@ (800924c <vTaskStartScheduler+0xc4>)
 80091ba:	f7ff fdf1 	bl	8008da0 <xTaskCreateStatic>
 80091be:	4603      	mov	r3, r0
 80091c0:	4a23      	ldr	r2, [pc, #140]	@ (8009250 <vTaskStartScheduler+0xc8>)
 80091c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091c4:	4b22      	ldr	r3, [pc, #136]	@ (8009250 <vTaskStartScheduler+0xc8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091cc:	2301      	movs	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e001      	b.n	80091d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d102      	bne.n	80091e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091dc:	f000 fd1a 	bl	8009c14 <xTimerCreateTimerTask>
 80091e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11b      	bne.n	8009220 <vTaskStartScheduler+0x98>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	613b      	str	r3, [r7, #16]
}
 80091fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091fc:	4b15      	ldr	r3, [pc, #84]	@ (8009254 <vTaskStartScheduler+0xcc>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3354      	adds	r3, #84	@ 0x54
 8009202:	4a15      	ldr	r2, [pc, #84]	@ (8009258 <vTaskStartScheduler+0xd0>)
 8009204:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009206:	4b15      	ldr	r3, [pc, #84]	@ (800925c <vTaskStartScheduler+0xd4>)
 8009208:	f04f 32ff 	mov.w	r2, #4294967295
 800920c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800920e:	4b14      	ldr	r3, [pc, #80]	@ (8009260 <vTaskStartScheduler+0xd8>)
 8009210:	2201      	movs	r2, #1
 8009212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009214:	4b13      	ldr	r3, [pc, #76]	@ (8009264 <vTaskStartScheduler+0xdc>)
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800921a:	f7fe ff01 	bl	8008020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800921e:	e00f      	b.n	8009240 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d10b      	bne.n	8009240 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	60fb      	str	r3, [r7, #12]
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <vTaskStartScheduler+0xb4>
}
 8009240:	bf00      	nop
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	08011200 	.word	0x08011200
 800924c:	08009899 	.word	0x08009899
 8009250:	24006754 	.word	0x24006754
 8009254:	2400625c 	.word	0x2400625c
 8009258:	24000020 	.word	0x24000020
 800925c:	24006750 	.word	0x24006750
 8009260:	2400673c 	.word	0x2400673c
 8009264:	24006734 	.word	0x24006734

08009268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800926c:	4b04      	ldr	r3, [pc, #16]	@ (8009280 <vTaskSuspendAll+0x18>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	4a03      	ldr	r2, [pc, #12]	@ (8009280 <vTaskSuspendAll+0x18>)
 8009274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009276:	bf00      	nop
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	24006758 	.word	0x24006758

08009284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009292:	4b42      	ldr	r3, [pc, #264]	@ (800939c <xTaskResumeAll+0x118>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10b      	bne.n	80092b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	603b      	str	r3, [r7, #0]
}
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
 80092b0:	e7fd      	b.n	80092ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092b2:	f7fe ff59 	bl	8008168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092b6:	4b39      	ldr	r3, [pc, #228]	@ (800939c <xTaskResumeAll+0x118>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a37      	ldr	r2, [pc, #220]	@ (800939c <xTaskResumeAll+0x118>)
 80092be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c0:	4b36      	ldr	r3, [pc, #216]	@ (800939c <xTaskResumeAll+0x118>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d162      	bne.n	800938e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092c8:	4b35      	ldr	r3, [pc, #212]	@ (80093a0 <xTaskResumeAll+0x11c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d05e      	beq.n	800938e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092d0:	e02f      	b.n	8009332 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d2:	4b34      	ldr	r3, [pc, #208]	@ (80093a4 <xTaskResumeAll+0x120>)
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3318      	adds	r3, #24
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fde4 	bl	8007eac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fddf 	bl	8007eac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f2:	4b2d      	ldr	r3, [pc, #180]	@ (80093a8 <xTaskResumeAll+0x124>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d903      	bls.n	8009302 <xTaskResumeAll+0x7e>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	4a2a      	ldr	r2, [pc, #168]	@ (80093a8 <xTaskResumeAll+0x124>)
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4a27      	ldr	r2, [pc, #156]	@ (80093ac <xTaskResumeAll+0x128>)
 8009310:	441a      	add	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3304      	adds	r3, #4
 8009316:	4619      	mov	r1, r3
 8009318:	4610      	mov	r0, r2
 800931a:	f7fe fd6a 	bl	8007df2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009322:	4b23      	ldr	r3, [pc, #140]	@ (80093b0 <xTaskResumeAll+0x12c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009328:	429a      	cmp	r2, r3
 800932a:	d302      	bcc.n	8009332 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800932c:	4b21      	ldr	r3, [pc, #132]	@ (80093b4 <xTaskResumeAll+0x130>)
 800932e:	2201      	movs	r2, #1
 8009330:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009332:	4b1c      	ldr	r3, [pc, #112]	@ (80093a4 <xTaskResumeAll+0x120>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1cb      	bne.n	80092d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009340:	f000 fb66 	bl	8009a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009344:	4b1c      	ldr	r3, [pc, #112]	@ (80093b8 <xTaskResumeAll+0x134>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d010      	beq.n	8009372 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009350:	f000 f846 	bl	80093e0 <xTaskIncrementTick>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800935a:	4b16      	ldr	r3, [pc, #88]	@ (80093b4 <xTaskResumeAll+0x130>)
 800935c:	2201      	movs	r2, #1
 800935e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3b01      	subs	r3, #1
 8009364:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f1      	bne.n	8009350 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800936c:	4b12      	ldr	r3, [pc, #72]	@ (80093b8 <xTaskResumeAll+0x134>)
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009372:	4b10      	ldr	r3, [pc, #64]	@ (80093b4 <xTaskResumeAll+0x130>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800937a:	2301      	movs	r3, #1
 800937c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800937e:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <xTaskResumeAll+0x138>)
 8009380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800938e:	f7fe ff1d 	bl	80081cc <vPortExitCritical>

	return xAlreadyYielded;
 8009392:	68bb      	ldr	r3, [r7, #8]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	24006758 	.word	0x24006758
 80093a0:	24006730 	.word	0x24006730
 80093a4:	240066f0 	.word	0x240066f0
 80093a8:	24006738 	.word	0x24006738
 80093ac:	24006260 	.word	0x24006260
 80093b0:	2400625c 	.word	0x2400625c
 80093b4:	24006744 	.word	0x24006744
 80093b8:	24006740 	.word	0x24006740
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093c6:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <xTaskGetTickCount+0x1c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093cc:	687b      	ldr	r3, [r7, #4]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	24006734 	.word	0x24006734

080093e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009528 <xTaskIncrementTick+0x148>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 8090 	bne.w	8009514 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093f4:	4b4d      	ldr	r3, [pc, #308]	@ (800952c <xTaskIncrementTick+0x14c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093fc:	4a4b      	ldr	r2, [pc, #300]	@ (800952c <xTaskIncrementTick+0x14c>)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d121      	bne.n	800944c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009408:	4b49      	ldr	r3, [pc, #292]	@ (8009530 <xTaskIncrementTick+0x150>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00b      	beq.n	800942a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	603b      	str	r3, [r7, #0]
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	e7fd      	b.n	8009426 <xTaskIncrementTick+0x46>
 800942a:	4b41      	ldr	r3, [pc, #260]	@ (8009530 <xTaskIncrementTick+0x150>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	4b40      	ldr	r3, [pc, #256]	@ (8009534 <xTaskIncrementTick+0x154>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a3e      	ldr	r2, [pc, #248]	@ (8009530 <xTaskIncrementTick+0x150>)
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	4a3e      	ldr	r2, [pc, #248]	@ (8009534 <xTaskIncrementTick+0x154>)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	4b3e      	ldr	r3, [pc, #248]	@ (8009538 <xTaskIncrementTick+0x158>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3301      	adds	r3, #1
 8009444:	4a3c      	ldr	r2, [pc, #240]	@ (8009538 <xTaskIncrementTick+0x158>)
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	f000 fae2 	bl	8009a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800944c:	4b3b      	ldr	r3, [pc, #236]	@ (800953c <xTaskIncrementTick+0x15c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	429a      	cmp	r2, r3
 8009454:	d349      	bcc.n	80094ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009456:	4b36      	ldr	r3, [pc, #216]	@ (8009530 <xTaskIncrementTick+0x150>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009460:	4b36      	ldr	r3, [pc, #216]	@ (800953c <xTaskIncrementTick+0x15c>)
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	601a      	str	r2, [r3, #0]
					break;
 8009468:	e03f      	b.n	80094ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946a:	4b31      	ldr	r3, [pc, #196]	@ (8009530 <xTaskIncrementTick+0x150>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009482:	4a2e      	ldr	r2, [pc, #184]	@ (800953c <xTaskIncrementTick+0x15c>)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009488:	e02f      	b.n	80094ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	3304      	adds	r3, #4
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fd0c 	bl	8007eac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	3318      	adds	r3, #24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fd03 	bl	8007eac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094aa:	4b25      	ldr	r3, [pc, #148]	@ (8009540 <xTaskIncrementTick+0x160>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d903      	bls.n	80094ba <xTaskIncrementTick+0xda>
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	4a22      	ldr	r2, [pc, #136]	@ (8009540 <xTaskIncrementTick+0x160>)
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009544 <xTaskIncrementTick+0x164>)
 80094c8:	441a      	add	r2, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7fe fc8e 	bl	8007df2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094da:	4b1b      	ldr	r3, [pc, #108]	@ (8009548 <xTaskIncrementTick+0x168>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d3b8      	bcc.n	8009456 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e8:	e7b5      	b.n	8009456 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094ea:	4b17      	ldr	r3, [pc, #92]	@ (8009548 <xTaskIncrementTick+0x168>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f0:	4914      	ldr	r1, [pc, #80]	@ (8009544 <xTaskIncrementTick+0x164>)
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d901      	bls.n	8009506 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009502:	2301      	movs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009506:	4b11      	ldr	r3, [pc, #68]	@ (800954c <xTaskIncrementTick+0x16c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	617b      	str	r3, [r7, #20]
 8009512:	e004      	b.n	800951e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009514:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <xTaskIncrementTick+0x170>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	4a0d      	ldr	r2, [pc, #52]	@ (8009550 <xTaskIncrementTick+0x170>)
 800951c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800951e:	697b      	ldr	r3, [r7, #20]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	24006758 	.word	0x24006758
 800952c:	24006734 	.word	0x24006734
 8009530:	240066e8 	.word	0x240066e8
 8009534:	240066ec 	.word	0x240066ec
 8009538:	24006748 	.word	0x24006748
 800953c:	24006750 	.word	0x24006750
 8009540:	24006738 	.word	0x24006738
 8009544:	24006260 	.word	0x24006260
 8009548:	2400625c 	.word	0x2400625c
 800954c:	24006744 	.word	0x24006744
 8009550:	24006740 	.word	0x24006740

08009554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800955a:	4b2b      	ldr	r3, [pc, #172]	@ (8009608 <vTaskSwitchContext+0xb4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009562:	4b2a      	ldr	r3, [pc, #168]	@ (800960c <vTaskSwitchContext+0xb8>)
 8009564:	2201      	movs	r2, #1
 8009566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009568:	e047      	b.n	80095fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800956a:	4b28      	ldr	r3, [pc, #160]	@ (800960c <vTaskSwitchContext+0xb8>)
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009570:	4b27      	ldr	r3, [pc, #156]	@ (8009610 <vTaskSwitchContext+0xbc>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	e011      	b.n	800959c <vTaskSwitchContext+0x48>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10b      	bne.n	8009596 <vTaskSwitchContext+0x42>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	607b      	str	r3, [r7, #4]
}
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	e7fd      	b.n	8009592 <vTaskSwitchContext+0x3e>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3b01      	subs	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	491d      	ldr	r1, [pc, #116]	@ (8009614 <vTaskSwitchContext+0xc0>)
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0e3      	beq.n	8009578 <vTaskSwitchContext+0x24>
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a16      	ldr	r2, [pc, #88]	@ (8009614 <vTaskSwitchContext+0xc0>)
 80095bc:	4413      	add	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	3308      	adds	r3, #8
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d104      	bne.n	80095e0 <vTaskSwitchContext+0x8c>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	605a      	str	r2, [r3, #4]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009618 <vTaskSwitchContext+0xc4>)
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	4a09      	ldr	r2, [pc, #36]	@ (8009610 <vTaskSwitchContext+0xbc>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095f0:	4b09      	ldr	r3, [pc, #36]	@ (8009618 <vTaskSwitchContext+0xc4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3354      	adds	r3, #84	@ 0x54
 80095f6:	4a09      	ldr	r2, [pc, #36]	@ (800961c <vTaskSwitchContext+0xc8>)
 80095f8:	6013      	str	r3, [r2, #0]
}
 80095fa:	bf00      	nop
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	24006758 	.word	0x24006758
 800960c:	24006744 	.word	0x24006744
 8009610:	24006738 	.word	0x24006738
 8009614:	24006260 	.word	0x24006260
 8009618:	2400625c 	.word	0x2400625c
 800961c:	24000020 	.word	0x24000020

08009620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	60fb      	str	r3, [r7, #12]
}
 8009642:	bf00      	nop
 8009644:	bf00      	nop
 8009646:	e7fd      	b.n	8009644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009648:	4b07      	ldr	r3, [pc, #28]	@ (8009668 <vTaskPlaceOnEventList+0x48>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3318      	adds	r3, #24
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7fe fbf2 	bl	8007e3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009656:	2101      	movs	r1, #1
 8009658:	6838      	ldr	r0, [r7, #0]
 800965a:	f000 fa87 	bl	8009b6c <prvAddCurrentTaskToDelayedList>
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	2400625c 	.word	0x2400625c

0800966c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	617b      	str	r3, [r7, #20]
}
 8009690:	bf00      	nop
 8009692:	bf00      	nop
 8009694:	e7fd      	b.n	8009692 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009696:	4b0a      	ldr	r3, [pc, #40]	@ (80096c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3318      	adds	r3, #24
 800969c:	4619      	mov	r1, r3
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7fe fba7 	bl	8007df2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	68b8      	ldr	r0, [r7, #8]
 80096b4:	f000 fa5a 	bl	8009b6c <prvAddCurrentTaskToDelayedList>
	}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	2400625c 	.word	0x2400625c

080096c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	60fb      	str	r3, [r7, #12]
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	e7fd      	b.n	80096ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	3318      	adds	r3, #24
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fbd8 	bl	8007eac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009774 <xTaskRemoveFromEventList+0xb0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d11d      	bne.n	8009740 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fbcf 	bl	8007eac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009712:	4b19      	ldr	r3, [pc, #100]	@ (8009778 <xTaskRemoveFromEventList+0xb4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d903      	bls.n	8009722 <xTaskRemoveFromEventList+0x5e>
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	4a16      	ldr	r2, [pc, #88]	@ (8009778 <xTaskRemoveFromEventList+0xb4>)
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4a13      	ldr	r2, [pc, #76]	@ (800977c <xTaskRemoveFromEventList+0xb8>)
 8009730:	441a      	add	r2, r3
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	3304      	adds	r3, #4
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f7fe fb5a 	bl	8007df2 <vListInsertEnd>
 800973e:	e005      	b.n	800974c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	3318      	adds	r3, #24
 8009744:	4619      	mov	r1, r3
 8009746:	480e      	ldr	r0, [pc, #56]	@ (8009780 <xTaskRemoveFromEventList+0xbc>)
 8009748:	f7fe fb53 	bl	8007df2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009750:	4b0c      	ldr	r3, [pc, #48]	@ (8009784 <xTaskRemoveFromEventList+0xc0>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009756:	429a      	cmp	r2, r3
 8009758:	d905      	bls.n	8009766 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800975a:	2301      	movs	r3, #1
 800975c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800975e:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <xTaskRemoveFromEventList+0xc4>)
 8009760:	2201      	movs	r2, #1
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	e001      	b.n	800976a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800976a:	697b      	ldr	r3, [r7, #20]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	24006758 	.word	0x24006758
 8009778:	24006738 	.word	0x24006738
 800977c:	24006260 	.word	0x24006260
 8009780:	240066f0 	.word	0x240066f0
 8009784:	2400625c 	.word	0x2400625c
 8009788:	24006744 	.word	0x24006744

0800978c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009794:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <vTaskInternalSetTimeOutState+0x24>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800979c:	4b05      	ldr	r3, [pc, #20]	@ (80097b4 <vTaskInternalSetTimeOutState+0x28>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	605a      	str	r2, [r3, #4]
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	24006748 	.word	0x24006748
 80097b4:	24006734 	.word	0x24006734

080097b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10b      	bne.n	80097e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	613b      	str	r3, [r7, #16]
}
 80097da:	bf00      	nop
 80097dc:	bf00      	nop
 80097de:	e7fd      	b.n	80097dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60fb      	str	r3, [r7, #12]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80097fe:	f7fe fcb3 	bl	8008168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009802:	4b1d      	ldr	r3, [pc, #116]	@ (8009878 <xTaskCheckForTimeOut+0xc0>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d102      	bne.n	8009822 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	e023      	b.n	800986a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	4b15      	ldr	r3, [pc, #84]	@ (800987c <xTaskCheckForTimeOut+0xc4>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d007      	beq.n	800983e <xTaskCheckForTimeOut+0x86>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	429a      	cmp	r2, r3
 8009836:	d302      	bcc.n	800983e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009838:	2301      	movs	r3, #1
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	e015      	b.n	800986a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	429a      	cmp	r2, r3
 8009846:	d20b      	bcs.n	8009860 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ff99 	bl	800978c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	e004      	b.n	800986a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009866:	2301      	movs	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800986a:	f7fe fcaf 	bl	80081cc <vPortExitCritical>

	return xReturn;
 800986e:	69fb      	ldr	r3, [r7, #28]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	24006734 	.word	0x24006734
 800987c:	24006748 	.word	0x24006748

08009880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009884:	4b03      	ldr	r3, [pc, #12]	@ (8009894 <vTaskMissedYield+0x14>)
 8009886:	2201      	movs	r2, #1
 8009888:	601a      	str	r2, [r3, #0]
}
 800988a:	bf00      	nop
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	24006744 	.word	0x24006744

08009898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098a0:	f000 f852 	bl	8009948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098a4:	4b06      	ldr	r3, [pc, #24]	@ (80098c0 <prvIdleTask+0x28>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d9f9      	bls.n	80098a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <prvIdleTask+0x2c>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098bc:	e7f0      	b.n	80098a0 <prvIdleTask+0x8>
 80098be:	bf00      	nop
 80098c0:	24006260 	.word	0x24006260
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	e00c      	b.n	80098ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4a12      	ldr	r2, [pc, #72]	@ (8009928 <prvInitialiseTaskLists+0x60>)
 80098e0:	4413      	add	r3, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fa58 	bl	8007d98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3301      	adds	r3, #1
 80098ec:	607b      	str	r3, [r7, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b37      	cmp	r3, #55	@ 0x37
 80098f2:	d9ef      	bls.n	80098d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098f4:	480d      	ldr	r0, [pc, #52]	@ (800992c <prvInitialiseTaskLists+0x64>)
 80098f6:	f7fe fa4f 	bl	8007d98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098fa:	480d      	ldr	r0, [pc, #52]	@ (8009930 <prvInitialiseTaskLists+0x68>)
 80098fc:	f7fe fa4c 	bl	8007d98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009900:	480c      	ldr	r0, [pc, #48]	@ (8009934 <prvInitialiseTaskLists+0x6c>)
 8009902:	f7fe fa49 	bl	8007d98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009906:	480c      	ldr	r0, [pc, #48]	@ (8009938 <prvInitialiseTaskLists+0x70>)
 8009908:	f7fe fa46 	bl	8007d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800990c:	480b      	ldr	r0, [pc, #44]	@ (800993c <prvInitialiseTaskLists+0x74>)
 800990e:	f7fe fa43 	bl	8007d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009912:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <prvInitialiseTaskLists+0x78>)
 8009914:	4a05      	ldr	r2, [pc, #20]	@ (800992c <prvInitialiseTaskLists+0x64>)
 8009916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009918:	4b0a      	ldr	r3, [pc, #40]	@ (8009944 <prvInitialiseTaskLists+0x7c>)
 800991a:	4a05      	ldr	r2, [pc, #20]	@ (8009930 <prvInitialiseTaskLists+0x68>)
 800991c:	601a      	str	r2, [r3, #0]
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	24006260 	.word	0x24006260
 800992c:	240066c0 	.word	0x240066c0
 8009930:	240066d4 	.word	0x240066d4
 8009934:	240066f0 	.word	0x240066f0
 8009938:	24006704 	.word	0x24006704
 800993c:	2400671c 	.word	0x2400671c
 8009940:	240066e8 	.word	0x240066e8
 8009944:	240066ec 	.word	0x240066ec

08009948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800994e:	e019      	b.n	8009984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009950:	f7fe fc0a 	bl	8008168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009954:	4b10      	ldr	r3, [pc, #64]	@ (8009998 <prvCheckTasksWaitingTermination+0x50>)
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe faa3 	bl	8007eac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009966:	4b0d      	ldr	r3, [pc, #52]	@ (800999c <prvCheckTasksWaitingTermination+0x54>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3b01      	subs	r3, #1
 800996c:	4a0b      	ldr	r2, [pc, #44]	@ (800999c <prvCheckTasksWaitingTermination+0x54>)
 800996e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009970:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <prvCheckTasksWaitingTermination+0x58>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3b01      	subs	r3, #1
 8009976:	4a0a      	ldr	r2, [pc, #40]	@ (80099a0 <prvCheckTasksWaitingTermination+0x58>)
 8009978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800997a:	f7fe fc27 	bl	80081cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f810 	bl	80099a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009984:	4b06      	ldr	r3, [pc, #24]	@ (80099a0 <prvCheckTasksWaitingTermination+0x58>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e1      	bne.n	8009950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	24006704 	.word	0x24006704
 800999c:	24006730 	.word	0x24006730
 80099a0:	24006718 	.word	0x24006718

080099a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3354      	adds	r3, #84	@ 0x54
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 febd 	bl	800b730 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d108      	bne.n	80099d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe f8c7 	bl	8007b58 <vPortFree>
				vPortFree( pxTCB );
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe f8c4 	bl	8007b58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099d0:	e019      	b.n	8009a06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d103      	bne.n	80099e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7fe f8bb 	bl	8007b58 <vPortFree>
	}
 80099e2:	e010      	b.n	8009a06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d00b      	beq.n	8009a06 <prvDeleteTCB+0x62>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60fb      	str	r3, [r7, #12]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <prvDeleteTCB+0x5e>
	}
 8009a06:	bf00      	nop
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a16:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <prvResetNextTaskUnblockTime+0x38>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <prvResetNextTaskUnblockTime+0x3c>)
 8009a22:	f04f 32ff 	mov.w	r2, #4294967295
 8009a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a28:	e008      	b.n	8009a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2a:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <prvResetNextTaskUnblockTime+0x38>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4a04      	ldr	r2, [pc, #16]	@ (8009a4c <prvResetNextTaskUnblockTime+0x3c>)
 8009a3a:	6013      	str	r3, [r2, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	240066e8 	.word	0x240066e8
 8009a4c:	24006750 	.word	0x24006750

08009a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a56:	4b0b      	ldr	r3, [pc, #44]	@ (8009a84 <xTaskGetSchedulerState+0x34>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	607b      	str	r3, [r7, #4]
 8009a62:	e008      	b.n	8009a76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a64:	4b08      	ldr	r3, [pc, #32]	@ (8009a88 <xTaskGetSchedulerState+0x38>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	e001      	b.n	8009a76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a72:	2300      	movs	r3, #0
 8009a74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a76:	687b      	ldr	r3, [r7, #4]
	}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	2400673c 	.word	0x2400673c
 8009a88:	24006758 	.word	0x24006758

08009a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d058      	beq.n	8009b54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8009b60 <xTaskPriorityDisinherit+0xd4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d00b      	beq.n	8009ac4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10b      	bne.n	8009ae4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	60bb      	str	r3, [r7, #8]
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	e7fd      	b.n	8009ae0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ae8:	1e5a      	subs	r2, r3, #1
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d02c      	beq.n	8009b54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d128      	bne.n	8009b54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe f9d0 	bl	8007eac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b24:	4b0f      	ldr	r3, [pc, #60]	@ (8009b64 <xTaskPriorityDisinherit+0xd8>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d903      	bls.n	8009b34 <xTaskPriorityDisinherit+0xa8>
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b30:	4a0c      	ldr	r2, [pc, #48]	@ (8009b64 <xTaskPriorityDisinherit+0xd8>)
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4a09      	ldr	r2, [pc, #36]	@ (8009b68 <xTaskPriorityDisinherit+0xdc>)
 8009b42:	441a      	add	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f7fe f951 	bl	8007df2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b54:	697b      	ldr	r3, [r7, #20]
	}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	2400625c 	.word	0x2400625c
 8009b64:	24006738 	.word	0x24006738
 8009b68:	24006260 	.word	0x24006260

08009b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b76:	4b21      	ldr	r3, [pc, #132]	@ (8009bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b7c:	4b20      	ldr	r3, [pc, #128]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe f992 	bl	8007eac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8e:	d10a      	bne.n	8009ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b96:	4b1a      	ldr	r3, [pc, #104]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4819      	ldr	r0, [pc, #100]	@ (8009c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ba0:	f7fe f927 	bl	8007df2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ba4:	e026      	b.n	8009bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4413      	add	r3, r2
 8009bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bae:	4b14      	ldr	r3, [pc, #80]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d209      	bcs.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bbe:	4b12      	ldr	r3, [pc, #72]	@ (8009c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7fe f935 	bl	8007e3a <vListInsert>
}
 8009bd0:	e010      	b.n	8009bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f7fe f92b 	bl	8007e3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009be4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d202      	bcs.n	8009bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bee:	4a08      	ldr	r2, [pc, #32]	@ (8009c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6013      	str	r3, [r2, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	24006734 	.word	0x24006734
 8009c00:	2400625c 	.word	0x2400625c
 8009c04:	2400671c 	.word	0x2400671c
 8009c08:	240066ec 	.word	0x240066ec
 8009c0c:	240066e8 	.word	0x240066e8
 8009c10:	24006750 	.word	0x24006750

08009c14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	@ 0x28
 8009c18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c1e:	f000 fb13 	bl	800a248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c22:	4b1d      	ldr	r3, [pc, #116]	@ (8009c98 <xTimerCreateTimerTask+0x84>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d021      	beq.n	8009c6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c32:	1d3a      	adds	r2, r7, #4
 8009c34:	f107 0108 	add.w	r1, r7, #8
 8009c38:	f107 030c 	add.w	r3, r7, #12
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fd fea3 	bl	8007988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	9202      	str	r2, [sp, #8]
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	460a      	mov	r2, r1
 8009c54:	4911      	ldr	r1, [pc, #68]	@ (8009c9c <xTimerCreateTimerTask+0x88>)
 8009c56:	4812      	ldr	r0, [pc, #72]	@ (8009ca0 <xTimerCreateTimerTask+0x8c>)
 8009c58:	f7ff f8a2 	bl	8008da0 <xTaskCreateStatic>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	4a11      	ldr	r2, [pc, #68]	@ (8009ca4 <xTimerCreateTimerTask+0x90>)
 8009c60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c62:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <xTimerCreateTimerTask+0x90>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	613b      	str	r3, [r7, #16]
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	e7fd      	b.n	8009c88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c8c:	697b      	ldr	r3, [r7, #20]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	2400678c 	.word	0x2400678c
 8009c9c:	08011208 	.word	0x08011208
 8009ca0:	08009de1 	.word	0x08009de1
 8009ca4:	24006790 	.word	0x24006790

08009ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10b      	bne.n	8009cd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	623b      	str	r3, [r7, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cd8:	4b19      	ldr	r3, [pc, #100]	@ (8009d40 <xTimerGenericCommand+0x98>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d02a      	beq.n	8009d36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b05      	cmp	r3, #5
 8009cf0:	dc18      	bgt.n	8009d24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cf2:	f7ff fead 	bl	8009a50 <xTaskGetSchedulerState>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d109      	bne.n	8009d10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cfc:	4b10      	ldr	r3, [pc, #64]	@ (8009d40 <xTimerGenericCommand+0x98>)
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	f107 0110 	add.w	r1, r7, #16
 8009d04:	2300      	movs	r3, #0
 8009d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d08:	f7fe fc5a 	bl	80085c0 <xQueueGenericSend>
 8009d0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d0e:	e012      	b.n	8009d36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d10:	4b0b      	ldr	r3, [pc, #44]	@ (8009d40 <xTimerGenericCommand+0x98>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	f107 0110 	add.w	r1, r7, #16
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f7fe fc50 	bl	80085c0 <xQueueGenericSend>
 8009d20:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d22:	e008      	b.n	8009d36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d24:	4b06      	ldr	r3, [pc, #24]	@ (8009d40 <xTimerGenericCommand+0x98>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	f107 0110 	add.w	r1, r7, #16
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	f7fe fd48 	bl	80087c4 <xQueueGenericSendFromISR>
 8009d34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3728      	adds	r7, #40	@ 0x28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	2400678c 	.word	0x2400678c

08009d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4e:	4b23      	ldr	r3, [pc, #140]	@ (8009ddc <prvProcessExpiredTimer+0x98>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe f8a5 	bl	8007eac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d023      	beq.n	8009db8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	699a      	ldr	r2, [r3, #24]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	18d1      	adds	r1, r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	6978      	ldr	r0, [r7, #20]
 8009d7e:	f000 f8d5 	bl	8009f2c <prvInsertTimerInActiveList>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d020      	beq.n	8009dca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	2100      	movs	r1, #0
 8009d92:	6978      	ldr	r0, [r7, #20]
 8009d94:	f7ff ff88 	bl	8009ca8 <xTimerGenericCommand>
 8009d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d114      	bne.n	8009dca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60fb      	str	r3, [r7, #12]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dbe:	f023 0301 	bic.w	r3, r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	6978      	ldr	r0, [r7, #20]
 8009dd0:	4798      	blx	r3
}
 8009dd2:	bf00      	nop
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	24006784 	.word	0x24006784

08009de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 f859 	bl	8009ea4 <prvGetNextExpireTime>
 8009df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4619      	mov	r1, r3
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f805 	bl	8009e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dfe:	f000 f8d7 	bl	8009fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e02:	bf00      	nop
 8009e04:	e7f0      	b.n	8009de8 <prvTimerTask+0x8>
	...

08009e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e12:	f7ff fa29 	bl	8009268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e16:	f107 0308 	add.w	r3, r7, #8
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 f866 	bl	8009eec <prvSampleTimeNow>
 8009e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d130      	bne.n	8009e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <prvProcessTimerOrBlockTask+0x3c>
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d806      	bhi.n	8009e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e36:	f7ff fa25 	bl	8009284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e3a:	68f9      	ldr	r1, [r7, #12]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7ff ff81 	bl	8009d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e42:	e024      	b.n	8009e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d008      	beq.n	8009e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e4a:	4b13      	ldr	r3, [pc, #76]	@ (8009e98 <prvProcessTimerOrBlockTask+0x90>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <prvProcessTimerOrBlockTask+0x50>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e000      	b.n	8009e5a <prvProcessTimerOrBlockTask+0x52>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e9c <prvProcessTimerOrBlockTask+0x94>)
 8009e5e:	6818      	ldr	r0, [r3, #0]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f7fe ff65 	bl	8008d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e6e:	f7ff fa09 	bl	8009284 <xTaskResumeAll>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e78:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <prvProcessTimerOrBlockTask+0x98>)
 8009e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	f3bf 8f6f 	isb	sy
}
 8009e88:	e001      	b.n	8009e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e8a:	f7ff f9fb 	bl	8009284 <xTaskResumeAll>
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	24006788 	.word	0x24006788
 8009e9c:	2400678c 	.word	0x2400678c
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009eac:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee8 <prvGetNextExpireTime+0x44>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <prvGetNextExpireTime+0x16>
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	e000      	b.n	8009ebc <prvGetNextExpireTime+0x18>
 8009eba:	2200      	movs	r2, #0
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d105      	bne.n	8009ed4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ec8:	4b07      	ldr	r3, [pc, #28]	@ (8009ee8 <prvGetNextExpireTime+0x44>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e001      	b.n	8009ed8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	24006784 	.word	0x24006784

08009eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ef4:	f7ff fa64 	bl	80093c0 <xTaskGetTickCount>
 8009ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009efa:	4b0b      	ldr	r3, [pc, #44]	@ (8009f28 <prvSampleTimeNow+0x3c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d205      	bcs.n	8009f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f04:	f000 f93a 	bl	800a17c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e002      	b.n	8009f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f16:	4a04      	ldr	r2, [pc, #16]	@ (8009f28 <prvSampleTimeNow+0x3c>)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	24006794 	.word	0x24006794

08009f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d812      	bhi.n	8009f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	1ad2      	subs	r2, r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d302      	bcc.n	8009f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e01b      	b.n	8009f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f66:	4b10      	ldr	r3, [pc, #64]	@ (8009fa8 <prvInsertTimerInActiveList+0x7c>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4610      	mov	r0, r2
 8009f72:	f7fd ff62 	bl	8007e3a <vListInsert>
 8009f76:	e012      	b.n	8009f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d206      	bcs.n	8009f8e <prvInsertTimerInActiveList+0x62>
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d302      	bcc.n	8009f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	e007      	b.n	8009f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f8e:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <prvInsertTimerInActiveList+0x80>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3304      	adds	r3, #4
 8009f96:	4619      	mov	r1, r3
 8009f98:	4610      	mov	r0, r2
 8009f9a:	f7fd ff4e 	bl	8007e3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f9e:	697b      	ldr	r3, [r7, #20]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	24006788 	.word	0x24006788
 8009fac:	24006784 	.word	0x24006784

08009fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08e      	sub	sp, #56	@ 0x38
 8009fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fb6:	e0ce      	b.n	800a156 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	da19      	bge.n	8009ff2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fbe:	1d3b      	adds	r3, r7, #4
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10b      	bne.n	8009fe2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	61fb      	str	r3, [r7, #28]
}
 8009fdc:	bf00      	nop
 8009fde:	bf00      	nop
 8009fe0:	e7fd      	b.n	8009fde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fe8:	6850      	ldr	r0, [r2, #4]
 8009fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fec:	6892      	ldr	r2, [r2, #8]
 8009fee:	4611      	mov	r1, r2
 8009ff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f2c0 80ae 	blt.w	800a156 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	3304      	adds	r3, #4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fd ff4e 	bl	8007eac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a010:	463b      	mov	r3, r7
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff ff6a 	bl	8009eec <prvSampleTimeNow>
 800a018:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b09      	cmp	r3, #9
 800a01e:	f200 8097 	bhi.w	800a150 <prvProcessReceivedCommands+0x1a0>
 800a022:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <prvProcessReceivedCommands+0x78>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a051 	.word	0x0800a051
 800a02c:	0800a051 	.word	0x0800a051
 800a030:	0800a051 	.word	0x0800a051
 800a034:	0800a0c7 	.word	0x0800a0c7
 800a038:	0800a0db 	.word	0x0800a0db
 800a03c:	0800a127 	.word	0x0800a127
 800a040:	0800a051 	.word	0x0800a051
 800a044:	0800a051 	.word	0x0800a051
 800a048:	0800a0c7 	.word	0x0800a0c7
 800a04c:	0800a0db 	.word	0x0800a0db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	18d1      	adds	r1, r2, r3
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a06e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a070:	f7ff ff5c 	bl	8009f2c <prvInsertTimerInActiveList>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d06c      	beq.n	800a154 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d061      	beq.n	800a154 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	441a      	add	r2, r3
 800a098:	2300      	movs	r3, #0
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	2300      	movs	r3, #0
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0a2:	f7ff fe01 	bl	8009ca8 <xTimerGenericCommand>
 800a0a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d152      	bne.n	800a154 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	61bb      	str	r3, [r7, #24]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0cc:	f023 0301 	bic.w	r3, r3, #1
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a0d8:	e03d      	b.n	800a156 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e0:	f043 0301 	orr.w	r3, r3, #1
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	617b      	str	r3, [r7, #20]
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	e7fd      	b.n	800a10e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a114:	699a      	ldr	r2, [r3, #24]
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	18d1      	adds	r1, r2, r3
 800a11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a11e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a120:	f7ff ff04 	bl	8009f2c <prvInsertTimerInActiveList>
					break;
 800a124:	e017      	b.n	800a156 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d103      	bne.n	800a13c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a136:	f7fd fd0f 	bl	8007b58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a13a:	e00c      	b.n	800a156 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a142:	f023 0301 	bic.w	r3, r3, #1
 800a146:	b2da      	uxtb	r2, r3
 800a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a14e:	e002      	b.n	800a156 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a150:	bf00      	nop
 800a152:	e000      	b.n	800a156 <prvProcessReceivedCommands+0x1a6>
					break;
 800a154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a156:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <prvProcessReceivedCommands+0x1c8>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1d39      	adds	r1, r7, #4
 800a15c:	2200      	movs	r2, #0
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fbce 	bl	8008900 <xQueueReceive>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	f47f af26 	bne.w	8009fb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a16c:	bf00      	nop
 800a16e:	bf00      	nop
 800a170:	3730      	adds	r7, #48	@ 0x30
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	2400678c 	.word	0x2400678c

0800a17c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a182:	e049      	b.n	800a218 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a184:	4b2e      	ldr	r3, [pc, #184]	@ (800a240 <prvSwitchTimerLists+0xc4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a18e:	4b2c      	ldr	r3, [pc, #176]	@ (800a240 <prvSwitchTimerLists+0xc4>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd fe85 	bl	8007eac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d02f      	beq.n	800a218 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d90e      	bls.n	800a1e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a240 <prvSwitchTimerLists+0xc4>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fd fe2a 	bl	8007e3a <vListInsert>
 800a1e6:	e017      	b.n	800a218 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff fd58 	bl	8009ca8 <xTimerGenericCommand>
 800a1f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10b      	bne.n	800a218 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	603b      	str	r3, [r7, #0]
}
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	e7fd      	b.n	800a214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a218:	4b09      	ldr	r3, [pc, #36]	@ (800a240 <prvSwitchTimerLists+0xc4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1b0      	bne.n	800a184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a222:	4b07      	ldr	r3, [pc, #28]	@ (800a240 <prvSwitchTimerLists+0xc4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a228:	4b06      	ldr	r3, [pc, #24]	@ (800a244 <prvSwitchTimerLists+0xc8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a04      	ldr	r2, [pc, #16]	@ (800a240 <prvSwitchTimerLists+0xc4>)
 800a22e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a230:	4a04      	ldr	r2, [pc, #16]	@ (800a244 <prvSwitchTimerLists+0xc8>)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	6013      	str	r3, [r2, #0]
}
 800a236:	bf00      	nop
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	24006784 	.word	0x24006784
 800a244:	24006788 	.word	0x24006788

0800a248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a24e:	f7fd ff8b 	bl	8008168 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a252:	4b15      	ldr	r3, [pc, #84]	@ (800a2a8 <prvCheckForValidListAndQueue+0x60>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d120      	bne.n	800a29c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a25a:	4814      	ldr	r0, [pc, #80]	@ (800a2ac <prvCheckForValidListAndQueue+0x64>)
 800a25c:	f7fd fd9c 	bl	8007d98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a260:	4813      	ldr	r0, [pc, #76]	@ (800a2b0 <prvCheckForValidListAndQueue+0x68>)
 800a262:	f7fd fd99 	bl	8007d98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a266:	4b13      	ldr	r3, [pc, #76]	@ (800a2b4 <prvCheckForValidListAndQueue+0x6c>)
 800a268:	4a10      	ldr	r2, [pc, #64]	@ (800a2ac <prvCheckForValidListAndQueue+0x64>)
 800a26a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a26c:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <prvCheckForValidListAndQueue+0x70>)
 800a26e:	4a10      	ldr	r2, [pc, #64]	@ (800a2b0 <prvCheckForValidListAndQueue+0x68>)
 800a270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a272:	2300      	movs	r3, #0
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	4b11      	ldr	r3, [pc, #68]	@ (800a2bc <prvCheckForValidListAndQueue+0x74>)
 800a278:	4a11      	ldr	r2, [pc, #68]	@ (800a2c0 <prvCheckForValidListAndQueue+0x78>)
 800a27a:	2110      	movs	r1, #16
 800a27c:	200a      	movs	r0, #10
 800a27e:	f7fe f8ff 	bl	8008480 <xQueueGenericCreateStatic>
 800a282:	4603      	mov	r3, r0
 800a284:	4a08      	ldr	r2, [pc, #32]	@ (800a2a8 <prvCheckForValidListAndQueue+0x60>)
 800a286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a288:	4b07      	ldr	r3, [pc, #28]	@ (800a2a8 <prvCheckForValidListAndQueue+0x60>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a290:	4b05      	ldr	r3, [pc, #20]	@ (800a2a8 <prvCheckForValidListAndQueue+0x60>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	490b      	ldr	r1, [pc, #44]	@ (800a2c4 <prvCheckForValidListAndQueue+0x7c>)
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fd24 	bl	8008ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a29c:	f7fd ff96 	bl	80081cc <vPortExitCritical>
}
 800a2a0:	bf00      	nop
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	2400678c 	.word	0x2400678c
 800a2ac:	2400675c 	.word	0x2400675c
 800a2b0:	24006770 	.word	0x24006770
 800a2b4:	24006784 	.word	0x24006784
 800a2b8:	24006788 	.word	0x24006788
 800a2bc:	24006838 	.word	0x24006838
 800a2c0:	24006798 	.word	0x24006798
 800a2c4:	08011210 	.word	0x08011210

0800a2c8 <__assert_func>:
 800a2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ca:	4614      	mov	r4, r2
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <__assert_func+0x2c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	68d8      	ldr	r0, [r3, #12]
 800a2d6:	b954      	cbnz	r4, 800a2ee <__assert_func+0x26>
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <__assert_func+0x30>)
 800a2da:	461c      	mov	r4, r3
 800a2dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e0:	9100      	str	r1, [sp, #0]
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	4905      	ldr	r1, [pc, #20]	@ (800a2fc <__assert_func+0x34>)
 800a2e6:	f001 f83b 	bl	800b360 <fiprintf>
 800a2ea:	f001 faff 	bl	800b8ec <abort>
 800a2ee:	4b04      	ldr	r3, [pc, #16]	@ (800a300 <__assert_func+0x38>)
 800a2f0:	e7f4      	b.n	800a2dc <__assert_func+0x14>
 800a2f2:	bf00      	nop
 800a2f4:	24000020 	.word	0x24000020
 800a2f8:	080112e3 	.word	0x080112e3
 800a2fc:	080112b5 	.word	0x080112b5
 800a300:	080112a8 	.word	0x080112a8

0800a304 <_calloc_r>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	fba1 5402 	umull	r5, r4, r1, r2
 800a30a:	b93c      	cbnz	r4, 800a31c <_calloc_r+0x18>
 800a30c:	4629      	mov	r1, r5
 800a30e:	f000 f837 	bl	800a380 <_malloc_r>
 800a312:	4606      	mov	r6, r0
 800a314:	b928      	cbnz	r0, 800a322 <_calloc_r+0x1e>
 800a316:	2600      	movs	r6, #0
 800a318:	4630      	mov	r0, r6
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	220c      	movs	r2, #12
 800a31e:	6002      	str	r2, [r0, #0]
 800a320:	e7f9      	b.n	800a316 <_calloc_r+0x12>
 800a322:	462a      	mov	r2, r5
 800a324:	4621      	mov	r1, r4
 800a326:	f001 f9d5 	bl	800b6d4 <memset>
 800a32a:	e7f5      	b.n	800a318 <_calloc_r+0x14>

0800a32c <malloc>:
 800a32c:	4b02      	ldr	r3, [pc, #8]	@ (800a338 <malloc+0xc>)
 800a32e:	4601      	mov	r1, r0
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f000 b825 	b.w	800a380 <_malloc_r>
 800a336:	bf00      	nop
 800a338:	24000020 	.word	0x24000020

0800a33c <sbrk_aligned>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	4e0f      	ldr	r6, [pc, #60]	@ (800a37c <sbrk_aligned+0x40>)
 800a340:	460c      	mov	r4, r1
 800a342:	6831      	ldr	r1, [r6, #0]
 800a344:	4605      	mov	r5, r0
 800a346:	b911      	cbnz	r1, 800a34e <sbrk_aligned+0x12>
 800a348:	f001 fa6c 	bl	800b824 <_sbrk_r>
 800a34c:	6030      	str	r0, [r6, #0]
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f001 fa67 	bl	800b824 <_sbrk_r>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	d103      	bne.n	800a362 <sbrk_aligned+0x26>
 800a35a:	f04f 34ff 	mov.w	r4, #4294967295
 800a35e:	4620      	mov	r0, r4
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	1cc4      	adds	r4, r0, #3
 800a364:	f024 0403 	bic.w	r4, r4, #3
 800a368:	42a0      	cmp	r0, r4
 800a36a:	d0f8      	beq.n	800a35e <sbrk_aligned+0x22>
 800a36c:	1a21      	subs	r1, r4, r0
 800a36e:	4628      	mov	r0, r5
 800a370:	f001 fa58 	bl	800b824 <_sbrk_r>
 800a374:	3001      	adds	r0, #1
 800a376:	d1f2      	bne.n	800a35e <sbrk_aligned+0x22>
 800a378:	e7ef      	b.n	800a35a <sbrk_aligned+0x1e>
 800a37a:	bf00      	nop
 800a37c:	24006888 	.word	0x24006888

0800a380 <_malloc_r>:
 800a380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a384:	1ccd      	adds	r5, r1, #3
 800a386:	f025 0503 	bic.w	r5, r5, #3
 800a38a:	3508      	adds	r5, #8
 800a38c:	2d0c      	cmp	r5, #12
 800a38e:	bf38      	it	cc
 800a390:	250c      	movcc	r5, #12
 800a392:	2d00      	cmp	r5, #0
 800a394:	4606      	mov	r6, r0
 800a396:	db01      	blt.n	800a39c <_malloc_r+0x1c>
 800a398:	42a9      	cmp	r1, r5
 800a39a:	d904      	bls.n	800a3a6 <_malloc_r+0x26>
 800a39c:	230c      	movs	r3, #12
 800a39e:	6033      	str	r3, [r6, #0]
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a47c <_malloc_r+0xfc>
 800a3aa:	f000 f869 	bl	800a480 <__malloc_lock>
 800a3ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b2:	461c      	mov	r4, r3
 800a3b4:	bb44      	cbnz	r4, 800a408 <_malloc_r+0x88>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ffbf 	bl	800a33c <sbrk_aligned>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	d158      	bne.n	800a476 <_malloc_r+0xf6>
 800a3c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3c8:	4627      	mov	r7, r4
 800a3ca:	2f00      	cmp	r7, #0
 800a3cc:	d143      	bne.n	800a456 <_malloc_r+0xd6>
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d04b      	beq.n	800a46a <_malloc_r+0xea>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	eb04 0903 	add.w	r9, r4, r3
 800a3dc:	f001 fa22 	bl	800b824 <_sbrk_r>
 800a3e0:	4581      	cmp	r9, r0
 800a3e2:	d142      	bne.n	800a46a <_malloc_r+0xea>
 800a3e4:	6821      	ldr	r1, [r4, #0]
 800a3e6:	1a6d      	subs	r5, r5, r1
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ffa6 	bl	800a33c <sbrk_aligned>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d03a      	beq.n	800a46a <_malloc_r+0xea>
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	442b      	add	r3, r5
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	bb62      	cbnz	r2, 800a45c <_malloc_r+0xdc>
 800a402:	f8c8 7000 	str.w	r7, [r8]
 800a406:	e00f      	b.n	800a428 <_malloc_r+0xa8>
 800a408:	6822      	ldr	r2, [r4, #0]
 800a40a:	1b52      	subs	r2, r2, r5
 800a40c:	d420      	bmi.n	800a450 <_malloc_r+0xd0>
 800a40e:	2a0b      	cmp	r2, #11
 800a410:	d917      	bls.n	800a442 <_malloc_r+0xc2>
 800a412:	1961      	adds	r1, r4, r5
 800a414:	42a3      	cmp	r3, r4
 800a416:	6025      	str	r5, [r4, #0]
 800a418:	bf18      	it	ne
 800a41a:	6059      	strne	r1, [r3, #4]
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	bf08      	it	eq
 800a420:	f8c8 1000 	streq.w	r1, [r8]
 800a424:	5162      	str	r2, [r4, r5]
 800a426:	604b      	str	r3, [r1, #4]
 800a428:	4630      	mov	r0, r6
 800a42a:	f000 f82f 	bl	800a48c <__malloc_unlock>
 800a42e:	f104 000b 	add.w	r0, r4, #11
 800a432:	1d23      	adds	r3, r4, #4
 800a434:	f020 0007 	bic.w	r0, r0, #7
 800a438:	1ac2      	subs	r2, r0, r3
 800a43a:	bf1c      	itt	ne
 800a43c:	1a1b      	subne	r3, r3, r0
 800a43e:	50a3      	strne	r3, [r4, r2]
 800a440:	e7af      	b.n	800a3a2 <_malloc_r+0x22>
 800a442:	6862      	ldr	r2, [r4, #4]
 800a444:	42a3      	cmp	r3, r4
 800a446:	bf0c      	ite	eq
 800a448:	f8c8 2000 	streq.w	r2, [r8]
 800a44c:	605a      	strne	r2, [r3, #4]
 800a44e:	e7eb      	b.n	800a428 <_malloc_r+0xa8>
 800a450:	4623      	mov	r3, r4
 800a452:	6864      	ldr	r4, [r4, #4]
 800a454:	e7ae      	b.n	800a3b4 <_malloc_r+0x34>
 800a456:	463c      	mov	r4, r7
 800a458:	687f      	ldr	r7, [r7, #4]
 800a45a:	e7b6      	b.n	800a3ca <_malloc_r+0x4a>
 800a45c:	461a      	mov	r2, r3
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	42a3      	cmp	r3, r4
 800a462:	d1fb      	bne.n	800a45c <_malloc_r+0xdc>
 800a464:	2300      	movs	r3, #0
 800a466:	6053      	str	r3, [r2, #4]
 800a468:	e7de      	b.n	800a428 <_malloc_r+0xa8>
 800a46a:	230c      	movs	r3, #12
 800a46c:	6033      	str	r3, [r6, #0]
 800a46e:	4630      	mov	r0, r6
 800a470:	f000 f80c 	bl	800a48c <__malloc_unlock>
 800a474:	e794      	b.n	800a3a0 <_malloc_r+0x20>
 800a476:	6005      	str	r5, [r0, #0]
 800a478:	e7d6      	b.n	800a428 <_malloc_r+0xa8>
 800a47a:	bf00      	nop
 800a47c:	2400688c 	.word	0x2400688c

0800a480 <__malloc_lock>:
 800a480:	4801      	ldr	r0, [pc, #4]	@ (800a488 <__malloc_lock+0x8>)
 800a482:	f001 ba1c 	b.w	800b8be <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	240069d0 	.word	0x240069d0

0800a48c <__malloc_unlock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	@ (800a494 <__malloc_unlock+0x8>)
 800a48e:	f001 ba17 	b.w	800b8c0 <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	240069d0 	.word	0x240069d0

0800a498 <_strtol_l.constprop.0>:
 800a498:	2b24      	cmp	r3, #36	@ 0x24
 800a49a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49e:	4686      	mov	lr, r0
 800a4a0:	4690      	mov	r8, r2
 800a4a2:	d801      	bhi.n	800a4a8 <_strtol_l.constprop.0+0x10>
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d106      	bne.n	800a4b6 <_strtol_l.constprop.0+0x1e>
 800a4a8:	f001 f9de 	bl	800b868 <__errno>
 800a4ac:	2316      	movs	r3, #22
 800a4ae:	6003      	str	r3, [r0, #0]
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	4834      	ldr	r0, [pc, #208]	@ (800a588 <_strtol_l.constprop.0+0xf0>)
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4c0:	5d06      	ldrb	r6, [r0, r4]
 800a4c2:	f016 0608 	ands.w	r6, r6, #8
 800a4c6:	d1f8      	bne.n	800a4ba <_strtol_l.constprop.0+0x22>
 800a4c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a4ca:	d12d      	bne.n	800a528 <_strtol_l.constprop.0+0x90>
 800a4cc:	782c      	ldrb	r4, [r5, #0]
 800a4ce:	2601      	movs	r6, #1
 800a4d0:	1c95      	adds	r5, r2, #2
 800a4d2:	f033 0210 	bics.w	r2, r3, #16
 800a4d6:	d109      	bne.n	800a4ec <_strtol_l.constprop.0+0x54>
 800a4d8:	2c30      	cmp	r4, #48	@ 0x30
 800a4da:	d12a      	bne.n	800a532 <_strtol_l.constprop.0+0x9a>
 800a4dc:	782a      	ldrb	r2, [r5, #0]
 800a4de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4e2:	2a58      	cmp	r2, #88	@ 0x58
 800a4e4:	d125      	bne.n	800a532 <_strtol_l.constprop.0+0x9a>
 800a4e6:	786c      	ldrb	r4, [r5, #1]
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	3502      	adds	r5, #2
 800a4ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a4f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	fbbc f9f3 	udiv	r9, ip, r3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	fb03 ca19 	mls	sl, r3, r9, ip
 800a500:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a504:	2f09      	cmp	r7, #9
 800a506:	d81b      	bhi.n	800a540 <_strtol_l.constprop.0+0xa8>
 800a508:	463c      	mov	r4, r7
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	dd27      	ble.n	800a55e <_strtol_l.constprop.0+0xc6>
 800a50e:	1c57      	adds	r7, r2, #1
 800a510:	d007      	beq.n	800a522 <_strtol_l.constprop.0+0x8a>
 800a512:	4581      	cmp	r9, r0
 800a514:	d320      	bcc.n	800a558 <_strtol_l.constprop.0+0xc0>
 800a516:	d101      	bne.n	800a51c <_strtol_l.constprop.0+0x84>
 800a518:	45a2      	cmp	sl, r4
 800a51a:	db1d      	blt.n	800a558 <_strtol_l.constprop.0+0xc0>
 800a51c:	fb00 4003 	mla	r0, r0, r3, r4
 800a520:	2201      	movs	r2, #1
 800a522:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a526:	e7eb      	b.n	800a500 <_strtol_l.constprop.0+0x68>
 800a528:	2c2b      	cmp	r4, #43	@ 0x2b
 800a52a:	bf04      	itt	eq
 800a52c:	782c      	ldrbeq	r4, [r5, #0]
 800a52e:	1c95      	addeq	r5, r2, #2
 800a530:	e7cf      	b.n	800a4d2 <_strtol_l.constprop.0+0x3a>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1da      	bne.n	800a4ec <_strtol_l.constprop.0+0x54>
 800a536:	2c30      	cmp	r4, #48	@ 0x30
 800a538:	bf0c      	ite	eq
 800a53a:	2308      	moveq	r3, #8
 800a53c:	230a      	movne	r3, #10
 800a53e:	e7d5      	b.n	800a4ec <_strtol_l.constprop.0+0x54>
 800a540:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a544:	2f19      	cmp	r7, #25
 800a546:	d801      	bhi.n	800a54c <_strtol_l.constprop.0+0xb4>
 800a548:	3c37      	subs	r4, #55	@ 0x37
 800a54a:	e7de      	b.n	800a50a <_strtol_l.constprop.0+0x72>
 800a54c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a550:	2f19      	cmp	r7, #25
 800a552:	d804      	bhi.n	800a55e <_strtol_l.constprop.0+0xc6>
 800a554:	3c57      	subs	r4, #87	@ 0x57
 800a556:	e7d8      	b.n	800a50a <_strtol_l.constprop.0+0x72>
 800a558:	f04f 32ff 	mov.w	r2, #4294967295
 800a55c:	e7e1      	b.n	800a522 <_strtol_l.constprop.0+0x8a>
 800a55e:	1c53      	adds	r3, r2, #1
 800a560:	d108      	bne.n	800a574 <_strtol_l.constprop.0+0xdc>
 800a562:	2322      	movs	r3, #34	@ 0x22
 800a564:	f8ce 3000 	str.w	r3, [lr]
 800a568:	4660      	mov	r0, ip
 800a56a:	f1b8 0f00 	cmp.w	r8, #0
 800a56e:	d0a0      	beq.n	800a4b2 <_strtol_l.constprop.0+0x1a>
 800a570:	1e69      	subs	r1, r5, #1
 800a572:	e006      	b.n	800a582 <_strtol_l.constprop.0+0xea>
 800a574:	b106      	cbz	r6, 800a578 <_strtol_l.constprop.0+0xe0>
 800a576:	4240      	negs	r0, r0
 800a578:	f1b8 0f00 	cmp.w	r8, #0
 800a57c:	d099      	beq.n	800a4b2 <_strtol_l.constprop.0+0x1a>
 800a57e:	2a00      	cmp	r2, #0
 800a580:	d1f6      	bne.n	800a570 <_strtol_l.constprop.0+0xd8>
 800a582:	f8c8 1000 	str.w	r1, [r8]
 800a586:	e794      	b.n	800a4b2 <_strtol_l.constprop.0+0x1a>
 800a588:	080112e5 	.word	0x080112e5

0800a58c <_strtol_r>:
 800a58c:	f7ff bf84 	b.w	800a498 <_strtol_l.constprop.0>

0800a590 <__cvt>:
 800a590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a592:	ed2d 8b02 	vpush	{d8}
 800a596:	eeb0 8b40 	vmov.f64	d8, d0
 800a59a:	b085      	sub	sp, #20
 800a59c:	4617      	mov	r7, r2
 800a59e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a5a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5a2:	ee18 2a90 	vmov	r2, s17
 800a5a6:	f025 0520 	bic.w	r5, r5, #32
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	bfb6      	itet	lt
 800a5ae:	222d      	movlt	r2, #45	@ 0x2d
 800a5b0:	2200      	movge	r2, #0
 800a5b2:	eeb1 8b40 	vneglt.f64	d8, d0
 800a5b6:	2d46      	cmp	r5, #70	@ 0x46
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	d004      	beq.n	800a5c8 <__cvt+0x38>
 800a5be:	2d45      	cmp	r5, #69	@ 0x45
 800a5c0:	d100      	bne.n	800a5c4 <__cvt+0x34>
 800a5c2:	3401      	adds	r4, #1
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	e000      	b.n	800a5ca <__cvt+0x3a>
 800a5c8:	2103      	movs	r1, #3
 800a5ca:	ab03      	add	r3, sp, #12
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	ab02      	add	r3, sp, #8
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	4633      	mov	r3, r6
 800a5d6:	eeb0 0b48 	vmov.f64	d0, d8
 800a5da:	f001 fa19 	bl	800ba10 <_dtoa_r>
 800a5de:	2d47      	cmp	r5, #71	@ 0x47
 800a5e0:	d114      	bne.n	800a60c <__cvt+0x7c>
 800a5e2:	07fb      	lsls	r3, r7, #31
 800a5e4:	d50a      	bpl.n	800a5fc <__cvt+0x6c>
 800a5e6:	1902      	adds	r2, r0, r4
 800a5e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f0:	bf08      	it	eq
 800a5f2:	9203      	streq	r2, [sp, #12]
 800a5f4:	2130      	movs	r1, #48	@ 0x30
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d319      	bcc.n	800a630 <__cvt+0xa0>
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a600:	1a1b      	subs	r3, r3, r0
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	b005      	add	sp, #20
 800a606:	ecbd 8b02 	vpop	{d8}
 800a60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60c:	2d46      	cmp	r5, #70	@ 0x46
 800a60e:	eb00 0204 	add.w	r2, r0, r4
 800a612:	d1e9      	bne.n	800a5e8 <__cvt+0x58>
 800a614:	7803      	ldrb	r3, [r0, #0]
 800a616:	2b30      	cmp	r3, #48	@ 0x30
 800a618:	d107      	bne.n	800a62a <__cvt+0x9a>
 800a61a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	bf1c      	itt	ne
 800a624:	f1c4 0401 	rsbne	r4, r4, #1
 800a628:	6034      	strne	r4, [r6, #0]
 800a62a:	6833      	ldr	r3, [r6, #0]
 800a62c:	441a      	add	r2, r3
 800a62e:	e7db      	b.n	800a5e8 <__cvt+0x58>
 800a630:	1c5c      	adds	r4, r3, #1
 800a632:	9403      	str	r4, [sp, #12]
 800a634:	7019      	strb	r1, [r3, #0]
 800a636:	e7de      	b.n	800a5f6 <__cvt+0x66>

0800a638 <__exponent>:
 800a638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a63a:	2900      	cmp	r1, #0
 800a63c:	bfba      	itte	lt
 800a63e:	4249      	neglt	r1, r1
 800a640:	232d      	movlt	r3, #45	@ 0x2d
 800a642:	232b      	movge	r3, #43	@ 0x2b
 800a644:	2909      	cmp	r1, #9
 800a646:	7002      	strb	r2, [r0, #0]
 800a648:	7043      	strb	r3, [r0, #1]
 800a64a:	dd29      	ble.n	800a6a0 <__exponent+0x68>
 800a64c:	f10d 0307 	add.w	r3, sp, #7
 800a650:	461d      	mov	r5, r3
 800a652:	270a      	movs	r7, #10
 800a654:	461a      	mov	r2, r3
 800a656:	fbb1 f6f7 	udiv	r6, r1, r7
 800a65a:	fb07 1416 	mls	r4, r7, r6, r1
 800a65e:	3430      	adds	r4, #48	@ 0x30
 800a660:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a664:	460c      	mov	r4, r1
 800a666:	2c63      	cmp	r4, #99	@ 0x63
 800a668:	f103 33ff 	add.w	r3, r3, #4294967295
 800a66c:	4631      	mov	r1, r6
 800a66e:	dcf1      	bgt.n	800a654 <__exponent+0x1c>
 800a670:	3130      	adds	r1, #48	@ 0x30
 800a672:	1e94      	subs	r4, r2, #2
 800a674:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a678:	1c41      	adds	r1, r0, #1
 800a67a:	4623      	mov	r3, r4
 800a67c:	42ab      	cmp	r3, r5
 800a67e:	d30a      	bcc.n	800a696 <__exponent+0x5e>
 800a680:	f10d 0309 	add.w	r3, sp, #9
 800a684:	1a9b      	subs	r3, r3, r2
 800a686:	42ac      	cmp	r4, r5
 800a688:	bf88      	it	hi
 800a68a:	2300      	movhi	r3, #0
 800a68c:	3302      	adds	r3, #2
 800a68e:	4403      	add	r3, r0
 800a690:	1a18      	subs	r0, r3, r0
 800a692:	b003      	add	sp, #12
 800a694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a696:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a69a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a69e:	e7ed      	b.n	800a67c <__exponent+0x44>
 800a6a0:	2330      	movs	r3, #48	@ 0x30
 800a6a2:	3130      	adds	r1, #48	@ 0x30
 800a6a4:	7083      	strb	r3, [r0, #2]
 800a6a6:	70c1      	strb	r1, [r0, #3]
 800a6a8:	1d03      	adds	r3, r0, #4
 800a6aa:	e7f1      	b.n	800a690 <__exponent+0x58>
 800a6ac:	0000      	movs	r0, r0
	...

0800a6b0 <_printf_float>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	b08d      	sub	sp, #52	@ 0x34
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6bc:	4616      	mov	r6, r2
 800a6be:	461f      	mov	r7, r3
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	f001 f821 	bl	800b708 <_localeconv_r>
 800a6c6:	f8d0 b000 	ldr.w	fp, [r0]
 800a6ca:	4658      	mov	r0, fp
 800a6cc:	f7f5 fe58 	bl	8000380 <strlen>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a6dc:	6822      	ldr	r2, [r4, #0]
 800a6de:	9005      	str	r0, [sp, #20]
 800a6e0:	3307      	adds	r3, #7
 800a6e2:	f023 0307 	bic.w	r3, r3, #7
 800a6e6:	f103 0108 	add.w	r1, r3, #8
 800a6ea:	f8c8 1000 	str.w	r1, [r8]
 800a6ee:	ed93 0b00 	vldr	d0, [r3]
 800a6f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a950 <_printf_float+0x2a0>
 800a6f6:	eeb0 7bc0 	vabs.f64	d7, d0
 800a6fa:	eeb4 7b46 	vcmp.f64	d7, d6
 800a6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a702:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a706:	dd24      	ble.n	800a752 <_printf_float+0xa2>
 800a708:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a710:	d502      	bpl.n	800a718 <_printf_float+0x68>
 800a712:	232d      	movs	r3, #45	@ 0x2d
 800a714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a718:	498f      	ldr	r1, [pc, #572]	@ (800a958 <_printf_float+0x2a8>)
 800a71a:	4b90      	ldr	r3, [pc, #576]	@ (800a95c <_printf_float+0x2ac>)
 800a71c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a720:	bf94      	ite	ls
 800a722:	4688      	movls	r8, r1
 800a724:	4698      	movhi	r8, r3
 800a726:	f022 0204 	bic.w	r2, r2, #4
 800a72a:	2303      	movs	r3, #3
 800a72c:	6123      	str	r3, [r4, #16]
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	9700      	str	r7, [sp, #0]
 800a736:	4633      	mov	r3, r6
 800a738:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 f9d1 	bl	800aae4 <_printf_common>
 800a742:	3001      	adds	r0, #1
 800a744:	f040 8089 	bne.w	800a85a <_printf_float+0x1aa>
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	b00d      	add	sp, #52	@ 0x34
 800a74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a752:	eeb4 0b40 	vcmp.f64	d0, d0
 800a756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75a:	d709      	bvc.n	800a770 <_printf_float+0xc0>
 800a75c:	ee10 3a90 	vmov	r3, s1
 800a760:	2b00      	cmp	r3, #0
 800a762:	bfbc      	itt	lt
 800a764:	232d      	movlt	r3, #45	@ 0x2d
 800a766:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a76a:	497d      	ldr	r1, [pc, #500]	@ (800a960 <_printf_float+0x2b0>)
 800a76c:	4b7d      	ldr	r3, [pc, #500]	@ (800a964 <_printf_float+0x2b4>)
 800a76e:	e7d5      	b.n	800a71c <_printf_float+0x6c>
 800a770:	6863      	ldr	r3, [r4, #4]
 800a772:	1c59      	adds	r1, r3, #1
 800a774:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a778:	d139      	bne.n	800a7ee <_printf_float+0x13e>
 800a77a:	2306      	movs	r3, #6
 800a77c:	6063      	str	r3, [r4, #4]
 800a77e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a782:	2300      	movs	r3, #0
 800a784:	6022      	str	r2, [r4, #0]
 800a786:	9303      	str	r3, [sp, #12]
 800a788:	ab0a      	add	r3, sp, #40	@ 0x28
 800a78a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a78e:	ab09      	add	r3, sp, #36	@ 0x24
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	6861      	ldr	r1, [r4, #4]
 800a794:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a798:	4628      	mov	r0, r5
 800a79a:	f7ff fef9 	bl	800a590 <__cvt>
 800a79e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	d129      	bne.n	800a7fc <_printf_float+0x14c>
 800a7a8:	1cc8      	adds	r0, r1, #3
 800a7aa:	db02      	blt.n	800a7b2 <_printf_float+0x102>
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	dd41      	ble.n	800a836 <_printf_float+0x186>
 800a7b2:	f1a9 0902 	sub.w	r9, r9, #2
 800a7b6:	fa5f f989 	uxtb.w	r9, r9
 800a7ba:	3901      	subs	r1, #1
 800a7bc:	464a      	mov	r2, r9
 800a7be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a7c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7c4:	f7ff ff38 	bl	800a638 <__exponent>
 800a7c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7ca:	1813      	adds	r3, r2, r0
 800a7cc:	2a01      	cmp	r2, #1
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	dc02      	bgt.n	800a7da <_printf_float+0x12a>
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	07d2      	lsls	r2, r2, #31
 800a7d8:	d501      	bpl.n	800a7de <_printf_float+0x12e>
 800a7da:	3301      	adds	r3, #1
 800a7dc:	6123      	str	r3, [r4, #16]
 800a7de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0a6      	beq.n	800a734 <_printf_float+0x84>
 800a7e6:	232d      	movs	r3, #45	@ 0x2d
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ec:	e7a2      	b.n	800a734 <_printf_float+0x84>
 800a7ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7f2:	d1c4      	bne.n	800a77e <_printf_float+0xce>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1c2      	bne.n	800a77e <_printf_float+0xce>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7bf      	b.n	800a77c <_printf_float+0xcc>
 800a7fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a800:	d9db      	bls.n	800a7ba <_printf_float+0x10a>
 800a802:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a806:	d118      	bne.n	800a83a <_printf_float+0x18a>
 800a808:	2900      	cmp	r1, #0
 800a80a:	6863      	ldr	r3, [r4, #4]
 800a80c:	dd0b      	ble.n	800a826 <_printf_float+0x176>
 800a80e:	6121      	str	r1, [r4, #16]
 800a810:	b913      	cbnz	r3, 800a818 <_printf_float+0x168>
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	07d0      	lsls	r0, r2, #31
 800a816:	d502      	bpl.n	800a81e <_printf_float+0x16e>
 800a818:	3301      	adds	r3, #1
 800a81a:	440b      	add	r3, r1
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a820:	f04f 0a00 	mov.w	sl, #0
 800a824:	e7db      	b.n	800a7de <_printf_float+0x12e>
 800a826:	b913      	cbnz	r3, 800a82e <_printf_float+0x17e>
 800a828:	6822      	ldr	r2, [r4, #0]
 800a82a:	07d2      	lsls	r2, r2, #31
 800a82c:	d501      	bpl.n	800a832 <_printf_float+0x182>
 800a82e:	3302      	adds	r3, #2
 800a830:	e7f4      	b.n	800a81c <_printf_float+0x16c>
 800a832:	2301      	movs	r3, #1
 800a834:	e7f2      	b.n	800a81c <_printf_float+0x16c>
 800a836:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a83a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a83c:	4299      	cmp	r1, r3
 800a83e:	db05      	blt.n	800a84c <_printf_float+0x19c>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	6121      	str	r1, [r4, #16]
 800a844:	07d8      	lsls	r0, r3, #31
 800a846:	d5ea      	bpl.n	800a81e <_printf_float+0x16e>
 800a848:	1c4b      	adds	r3, r1, #1
 800a84a:	e7e7      	b.n	800a81c <_printf_float+0x16c>
 800a84c:	2900      	cmp	r1, #0
 800a84e:	bfd4      	ite	le
 800a850:	f1c1 0202 	rsble	r2, r1, #2
 800a854:	2201      	movgt	r2, #1
 800a856:	4413      	add	r3, r2
 800a858:	e7e0      	b.n	800a81c <_printf_float+0x16c>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	055a      	lsls	r2, r3, #21
 800a85e:	d407      	bmi.n	800a870 <_printf_float+0x1c0>
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	4642      	mov	r2, r8
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	d12a      	bne.n	800a8c4 <_printf_float+0x214>
 800a86e:	e76b      	b.n	800a748 <_printf_float+0x98>
 800a870:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a874:	f240 80e0 	bls.w	800aa38 <_printf_float+0x388>
 800a878:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a87c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a884:	d133      	bne.n	800a8ee <_printf_float+0x23e>
 800a886:	4a38      	ldr	r2, [pc, #224]	@ (800a968 <_printf_float+0x2b8>)
 800a888:	2301      	movs	r3, #1
 800a88a:	4631      	mov	r1, r6
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	f43f af59 	beq.w	800a748 <_printf_float+0x98>
 800a896:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a89a:	4543      	cmp	r3, r8
 800a89c:	db02      	blt.n	800a8a4 <_printf_float+0x1f4>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	07d8      	lsls	r0, r3, #31
 800a8a2:	d50f      	bpl.n	800a8c4 <_printf_float+0x214>
 800a8a4:	9b05      	ldr	r3, [sp, #20]
 800a8a6:	465a      	mov	r2, fp
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af4a 	beq.w	800a748 <_printf_float+0x98>
 800a8b4:	f04f 0900 	mov.w	r9, #0
 800a8b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8bc:	f104 0a1a 	add.w	sl, r4, #26
 800a8c0:	45c8      	cmp	r8, r9
 800a8c2:	dc09      	bgt.n	800a8d8 <_printf_float+0x228>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	079b      	lsls	r3, r3, #30
 800a8c8:	f100 8107 	bmi.w	800aada <_printf_float+0x42a>
 800a8cc:	68e0      	ldr	r0, [r4, #12]
 800a8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8d0:	4298      	cmp	r0, r3
 800a8d2:	bfb8      	it	lt
 800a8d4:	4618      	movlt	r0, r3
 800a8d6:	e739      	b.n	800a74c <_printf_float+0x9c>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4652      	mov	r2, sl
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af30 	beq.w	800a748 <_printf_float+0x98>
 800a8e8:	f109 0901 	add.w	r9, r9, #1
 800a8ec:	e7e8      	b.n	800a8c0 <_printf_float+0x210>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc3b      	bgt.n	800a96c <_printf_float+0x2bc>
 800a8f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a968 <_printf_float+0x2b8>)
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f af22 	beq.w	800a748 <_printf_float+0x98>
 800a904:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a908:	ea59 0303 	orrs.w	r3, r9, r3
 800a90c:	d102      	bne.n	800a914 <_printf_float+0x264>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	07d9      	lsls	r1, r3, #31
 800a912:	d5d7      	bpl.n	800a8c4 <_printf_float+0x214>
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	465a      	mov	r2, fp
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	f43f af12 	beq.w	800a748 <_printf_float+0x98>
 800a924:	f04f 0a00 	mov.w	sl, #0
 800a928:	f104 0b1a 	add.w	fp, r4, #26
 800a92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a92e:	425b      	negs	r3, r3
 800a930:	4553      	cmp	r3, sl
 800a932:	dc01      	bgt.n	800a938 <_printf_float+0x288>
 800a934:	464b      	mov	r3, r9
 800a936:	e794      	b.n	800a862 <_printf_float+0x1b2>
 800a938:	2301      	movs	r3, #1
 800a93a:	465a      	mov	r2, fp
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f af00 	beq.w	800a748 <_printf_float+0x98>
 800a948:	f10a 0a01 	add.w	sl, sl, #1
 800a94c:	e7ee      	b.n	800a92c <_printf_float+0x27c>
 800a94e:	bf00      	nop
 800a950:	ffffffff 	.word	0xffffffff
 800a954:	7fefffff 	.word	0x7fefffff
 800a958:	080113e5 	.word	0x080113e5
 800a95c:	080113e9 	.word	0x080113e9
 800a960:	080113ed 	.word	0x080113ed
 800a964:	080113f1 	.word	0x080113f1
 800a968:	080113f5 	.word	0x080113f5
 800a96c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a96e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a972:	4553      	cmp	r3, sl
 800a974:	bfa8      	it	ge
 800a976:	4653      	movge	r3, sl
 800a978:	2b00      	cmp	r3, #0
 800a97a:	4699      	mov	r9, r3
 800a97c:	dc37      	bgt.n	800a9ee <_printf_float+0x33e>
 800a97e:	2300      	movs	r3, #0
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a986:	f104 021a 	add.w	r2, r4, #26
 800a98a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a98c:	9907      	ldr	r1, [sp, #28]
 800a98e:	9306      	str	r3, [sp, #24]
 800a990:	eba3 0309 	sub.w	r3, r3, r9
 800a994:	428b      	cmp	r3, r1
 800a996:	dc31      	bgt.n	800a9fc <_printf_float+0x34c>
 800a998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99a:	459a      	cmp	sl, r3
 800a99c:	dc3b      	bgt.n	800aa16 <_printf_float+0x366>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	07da      	lsls	r2, r3, #31
 800a9a2:	d438      	bmi.n	800aa16 <_printf_float+0x366>
 800a9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a6:	ebaa 0903 	sub.w	r9, sl, r3
 800a9aa:	9b06      	ldr	r3, [sp, #24]
 800a9ac:	ebaa 0303 	sub.w	r3, sl, r3
 800a9b0:	4599      	cmp	r9, r3
 800a9b2:	bfa8      	it	ge
 800a9b4:	4699      	movge	r9, r3
 800a9b6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ba:	dc34      	bgt.n	800aa26 <_printf_float+0x376>
 800a9bc:	f04f 0800 	mov.w	r8, #0
 800a9c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9c4:	f104 0b1a 	add.w	fp, r4, #26
 800a9c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ca:	ebaa 0303 	sub.w	r3, sl, r3
 800a9ce:	eba3 0309 	sub.w	r3, r3, r9
 800a9d2:	4543      	cmp	r3, r8
 800a9d4:	f77f af76 	ble.w	800a8c4 <_printf_float+0x214>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	465a      	mov	r2, fp
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f aeb0 	beq.w	800a748 <_printf_float+0x98>
 800a9e8:	f108 0801 	add.w	r8, r8, #1
 800a9ec:	e7ec      	b.n	800a9c8 <_printf_float+0x318>
 800a9ee:	4642      	mov	r2, r8
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	d1c1      	bne.n	800a97e <_printf_float+0x2ce>
 800a9fa:	e6a5      	b.n	800a748 <_printf_float+0x98>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	9206      	str	r2, [sp, #24]
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f ae9e 	beq.w	800a748 <_printf_float+0x98>
 800aa0c:	9b07      	ldr	r3, [sp, #28]
 800aa0e:	9a06      	ldr	r2, [sp, #24]
 800aa10:	3301      	adds	r3, #1
 800aa12:	9307      	str	r3, [sp, #28]
 800aa14:	e7b9      	b.n	800a98a <_printf_float+0x2da>
 800aa16:	9b05      	ldr	r3, [sp, #20]
 800aa18:	465a      	mov	r2, fp
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b8      	blx	r7
 800aa20:	3001      	adds	r0, #1
 800aa22:	d1bf      	bne.n	800a9a4 <_printf_float+0x2f4>
 800aa24:	e690      	b.n	800a748 <_printf_float+0x98>
 800aa26:	9a06      	ldr	r2, [sp, #24]
 800aa28:	464b      	mov	r3, r9
 800aa2a:	4442      	add	r2, r8
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	d1c2      	bne.n	800a9bc <_printf_float+0x30c>
 800aa36:	e687      	b.n	800a748 <_printf_float+0x98>
 800aa38:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aa3c:	f1b9 0f01 	cmp.w	r9, #1
 800aa40:	dc01      	bgt.n	800aa46 <_printf_float+0x396>
 800aa42:	07db      	lsls	r3, r3, #31
 800aa44:	d536      	bpl.n	800aab4 <_printf_float+0x404>
 800aa46:	2301      	movs	r3, #1
 800aa48:	4642      	mov	r2, r8
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	f43f ae79 	beq.w	800a748 <_printf_float+0x98>
 800aa56:	9b05      	ldr	r3, [sp, #20]
 800aa58:	465a      	mov	r2, fp
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f ae71 	beq.w	800a748 <_printf_float+0x98>
 800aa66:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aa6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa72:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa76:	d018      	beq.n	800aaaa <_printf_float+0x3fa>
 800aa78:	464b      	mov	r3, r9
 800aa7a:	f108 0201 	add.w	r2, r8, #1
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	d10c      	bne.n	800aaa2 <_printf_float+0x3f2>
 800aa88:	e65e      	b.n	800a748 <_printf_float+0x98>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	465a      	mov	r2, fp
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae57 	beq.w	800a748 <_printf_float+0x98>
 800aa9a:	f108 0801 	add.w	r8, r8, #1
 800aa9e:	45c8      	cmp	r8, r9
 800aaa0:	dbf3      	blt.n	800aa8a <_printf_float+0x3da>
 800aaa2:	4653      	mov	r3, sl
 800aaa4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aaa8:	e6dc      	b.n	800a864 <_printf_float+0x1b4>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	f104 0b1a 	add.w	fp, r4, #26
 800aab2:	e7f4      	b.n	800aa9e <_printf_float+0x3ee>
 800aab4:	2301      	movs	r3, #1
 800aab6:	4642      	mov	r2, r8
 800aab8:	e7e1      	b.n	800aa7e <_printf_float+0x3ce>
 800aaba:	2301      	movs	r3, #1
 800aabc:	464a      	mov	r2, r9
 800aabe:	4631      	mov	r1, r6
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b8      	blx	r7
 800aac4:	3001      	adds	r0, #1
 800aac6:	f43f ae3f 	beq.w	800a748 <_printf_float+0x98>
 800aaca:	f108 0801 	add.w	r8, r8, #1
 800aace:	68e3      	ldr	r3, [r4, #12]
 800aad0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aad2:	1a5b      	subs	r3, r3, r1
 800aad4:	4543      	cmp	r3, r8
 800aad6:	dcf0      	bgt.n	800aaba <_printf_float+0x40a>
 800aad8:	e6f8      	b.n	800a8cc <_printf_float+0x21c>
 800aada:	f04f 0800 	mov.w	r8, #0
 800aade:	f104 0919 	add.w	r9, r4, #25
 800aae2:	e7f4      	b.n	800aace <_printf_float+0x41e>

0800aae4 <_printf_common>:
 800aae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	4616      	mov	r6, r2
 800aaea:	4698      	mov	r8, r3
 800aaec:	688a      	ldr	r2, [r1, #8]
 800aaee:	690b      	ldr	r3, [r1, #16]
 800aaf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	bfb8      	it	lt
 800aaf8:	4613      	movlt	r3, r2
 800aafa:	6033      	str	r3, [r6, #0]
 800aafc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab00:	4607      	mov	r7, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	b10a      	cbz	r2, 800ab0a <_printf_common+0x26>
 800ab06:	3301      	adds	r3, #1
 800ab08:	6033      	str	r3, [r6, #0]
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	0699      	lsls	r1, r3, #26
 800ab0e:	bf42      	ittt	mi
 800ab10:	6833      	ldrmi	r3, [r6, #0]
 800ab12:	3302      	addmi	r3, #2
 800ab14:	6033      	strmi	r3, [r6, #0]
 800ab16:	6825      	ldr	r5, [r4, #0]
 800ab18:	f015 0506 	ands.w	r5, r5, #6
 800ab1c:	d106      	bne.n	800ab2c <_printf_common+0x48>
 800ab1e:	f104 0a19 	add.w	sl, r4, #25
 800ab22:	68e3      	ldr	r3, [r4, #12]
 800ab24:	6832      	ldr	r2, [r6, #0]
 800ab26:	1a9b      	subs	r3, r3, r2
 800ab28:	42ab      	cmp	r3, r5
 800ab2a:	dc26      	bgt.n	800ab7a <_printf_common+0x96>
 800ab2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	3b00      	subs	r3, #0
 800ab34:	bf18      	it	ne
 800ab36:	2301      	movne	r3, #1
 800ab38:	0692      	lsls	r2, r2, #26
 800ab3a:	d42b      	bmi.n	800ab94 <_printf_common+0xb0>
 800ab3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab40:	4641      	mov	r1, r8
 800ab42:	4638      	mov	r0, r7
 800ab44:	47c8      	blx	r9
 800ab46:	3001      	adds	r0, #1
 800ab48:	d01e      	beq.n	800ab88 <_printf_common+0xa4>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	f003 0306 	and.w	r3, r3, #6
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	bf02      	ittt	eq
 800ab56:	68e5      	ldreq	r5, [r4, #12]
 800ab58:	6833      	ldreq	r3, [r6, #0]
 800ab5a:	1aed      	subeq	r5, r5, r3
 800ab5c:	68a3      	ldr	r3, [r4, #8]
 800ab5e:	bf0c      	ite	eq
 800ab60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab64:	2500      	movne	r5, #0
 800ab66:	4293      	cmp	r3, r2
 800ab68:	bfc4      	itt	gt
 800ab6a:	1a9b      	subgt	r3, r3, r2
 800ab6c:	18ed      	addgt	r5, r5, r3
 800ab6e:	2600      	movs	r6, #0
 800ab70:	341a      	adds	r4, #26
 800ab72:	42b5      	cmp	r5, r6
 800ab74:	d11a      	bne.n	800abac <_printf_common+0xc8>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e008      	b.n	800ab8c <_printf_common+0xa8>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	4641      	mov	r1, r8
 800ab80:	4638      	mov	r0, r7
 800ab82:	47c8      	blx	r9
 800ab84:	3001      	adds	r0, #1
 800ab86:	d103      	bne.n	800ab90 <_printf_common+0xac>
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab90:	3501      	adds	r5, #1
 800ab92:	e7c6      	b.n	800ab22 <_printf_common+0x3e>
 800ab94:	18e1      	adds	r1, r4, r3
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	2030      	movs	r0, #48	@ 0x30
 800ab9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab9e:	4422      	add	r2, r4
 800aba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aba8:	3302      	adds	r3, #2
 800abaa:	e7c7      	b.n	800ab3c <_printf_common+0x58>
 800abac:	2301      	movs	r3, #1
 800abae:	4622      	mov	r2, r4
 800abb0:	4641      	mov	r1, r8
 800abb2:	4638      	mov	r0, r7
 800abb4:	47c8      	blx	r9
 800abb6:	3001      	adds	r0, #1
 800abb8:	d0e6      	beq.n	800ab88 <_printf_common+0xa4>
 800abba:	3601      	adds	r6, #1
 800abbc:	e7d9      	b.n	800ab72 <_printf_common+0x8e>
	...

0800abc0 <_printf_i>:
 800abc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	7e0f      	ldrb	r7, [r1, #24]
 800abc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abc8:	2f78      	cmp	r7, #120	@ 0x78
 800abca:	4691      	mov	r9, r2
 800abcc:	4680      	mov	r8, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	469a      	mov	sl, r3
 800abd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abd6:	d807      	bhi.n	800abe8 <_printf_i+0x28>
 800abd8:	2f62      	cmp	r7, #98	@ 0x62
 800abda:	d80a      	bhi.n	800abf2 <_printf_i+0x32>
 800abdc:	2f00      	cmp	r7, #0
 800abde:	f000 80d2 	beq.w	800ad86 <_printf_i+0x1c6>
 800abe2:	2f58      	cmp	r7, #88	@ 0x58
 800abe4:	f000 80b9 	beq.w	800ad5a <_printf_i+0x19a>
 800abe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abf0:	e03a      	b.n	800ac68 <_printf_i+0xa8>
 800abf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abf6:	2b15      	cmp	r3, #21
 800abf8:	d8f6      	bhi.n	800abe8 <_printf_i+0x28>
 800abfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ac00 <_printf_i+0x40>)
 800abfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac00:	0800ac59 	.word	0x0800ac59
 800ac04:	0800ac6d 	.word	0x0800ac6d
 800ac08:	0800abe9 	.word	0x0800abe9
 800ac0c:	0800abe9 	.word	0x0800abe9
 800ac10:	0800abe9 	.word	0x0800abe9
 800ac14:	0800abe9 	.word	0x0800abe9
 800ac18:	0800ac6d 	.word	0x0800ac6d
 800ac1c:	0800abe9 	.word	0x0800abe9
 800ac20:	0800abe9 	.word	0x0800abe9
 800ac24:	0800abe9 	.word	0x0800abe9
 800ac28:	0800abe9 	.word	0x0800abe9
 800ac2c:	0800ad6d 	.word	0x0800ad6d
 800ac30:	0800ac97 	.word	0x0800ac97
 800ac34:	0800ad27 	.word	0x0800ad27
 800ac38:	0800abe9 	.word	0x0800abe9
 800ac3c:	0800abe9 	.word	0x0800abe9
 800ac40:	0800ad8f 	.word	0x0800ad8f
 800ac44:	0800abe9 	.word	0x0800abe9
 800ac48:	0800ac97 	.word	0x0800ac97
 800ac4c:	0800abe9 	.word	0x0800abe9
 800ac50:	0800abe9 	.word	0x0800abe9
 800ac54:	0800ad2f 	.word	0x0800ad2f
 800ac58:	6833      	ldr	r3, [r6, #0]
 800ac5a:	1d1a      	adds	r2, r3, #4
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6032      	str	r2, [r6, #0]
 800ac60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e09d      	b.n	800ada8 <_printf_i+0x1e8>
 800ac6c:	6833      	ldr	r3, [r6, #0]
 800ac6e:	6820      	ldr	r0, [r4, #0]
 800ac70:	1d19      	adds	r1, r3, #4
 800ac72:	6031      	str	r1, [r6, #0]
 800ac74:	0606      	lsls	r6, r0, #24
 800ac76:	d501      	bpl.n	800ac7c <_printf_i+0xbc>
 800ac78:	681d      	ldr	r5, [r3, #0]
 800ac7a:	e003      	b.n	800ac84 <_printf_i+0xc4>
 800ac7c:	0645      	lsls	r5, r0, #25
 800ac7e:	d5fb      	bpl.n	800ac78 <_printf_i+0xb8>
 800ac80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac84:	2d00      	cmp	r5, #0
 800ac86:	da03      	bge.n	800ac90 <_printf_i+0xd0>
 800ac88:	232d      	movs	r3, #45	@ 0x2d
 800ac8a:	426d      	negs	r5, r5
 800ac8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac90:	4859      	ldr	r0, [pc, #356]	@ (800adf8 <_printf_i+0x238>)
 800ac92:	230a      	movs	r3, #10
 800ac94:	e011      	b.n	800acba <_printf_i+0xfa>
 800ac96:	6821      	ldr	r1, [r4, #0]
 800ac98:	6833      	ldr	r3, [r6, #0]
 800ac9a:	0608      	lsls	r0, r1, #24
 800ac9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aca0:	d402      	bmi.n	800aca8 <_printf_i+0xe8>
 800aca2:	0649      	lsls	r1, r1, #25
 800aca4:	bf48      	it	mi
 800aca6:	b2ad      	uxthmi	r5, r5
 800aca8:	2f6f      	cmp	r7, #111	@ 0x6f
 800acaa:	4853      	ldr	r0, [pc, #332]	@ (800adf8 <_printf_i+0x238>)
 800acac:	6033      	str	r3, [r6, #0]
 800acae:	bf14      	ite	ne
 800acb0:	230a      	movne	r3, #10
 800acb2:	2308      	moveq	r3, #8
 800acb4:	2100      	movs	r1, #0
 800acb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acba:	6866      	ldr	r6, [r4, #4]
 800acbc:	60a6      	str	r6, [r4, #8]
 800acbe:	2e00      	cmp	r6, #0
 800acc0:	bfa2      	ittt	ge
 800acc2:	6821      	ldrge	r1, [r4, #0]
 800acc4:	f021 0104 	bicge.w	r1, r1, #4
 800acc8:	6021      	strge	r1, [r4, #0]
 800acca:	b90d      	cbnz	r5, 800acd0 <_printf_i+0x110>
 800accc:	2e00      	cmp	r6, #0
 800acce:	d04b      	beq.n	800ad68 <_printf_i+0x1a8>
 800acd0:	4616      	mov	r6, r2
 800acd2:	fbb5 f1f3 	udiv	r1, r5, r3
 800acd6:	fb03 5711 	mls	r7, r3, r1, r5
 800acda:	5dc7      	ldrb	r7, [r0, r7]
 800acdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ace0:	462f      	mov	r7, r5
 800ace2:	42bb      	cmp	r3, r7
 800ace4:	460d      	mov	r5, r1
 800ace6:	d9f4      	bls.n	800acd2 <_printf_i+0x112>
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d10b      	bne.n	800ad04 <_printf_i+0x144>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	07df      	lsls	r7, r3, #31
 800acf0:	d508      	bpl.n	800ad04 <_printf_i+0x144>
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	6861      	ldr	r1, [r4, #4]
 800acf6:	4299      	cmp	r1, r3
 800acf8:	bfde      	ittt	le
 800acfa:	2330      	movle	r3, #48	@ 0x30
 800acfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad04:	1b92      	subs	r2, r2, r6
 800ad06:	6122      	str	r2, [r4, #16]
 800ad08:	f8cd a000 	str.w	sl, [sp]
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	aa03      	add	r2, sp, #12
 800ad10:	4621      	mov	r1, r4
 800ad12:	4640      	mov	r0, r8
 800ad14:	f7ff fee6 	bl	800aae4 <_printf_common>
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d14a      	bne.n	800adb2 <_printf_i+0x1f2>
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	b004      	add	sp, #16
 800ad22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	f043 0320 	orr.w	r3, r3, #32
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	4833      	ldr	r0, [pc, #204]	@ (800adfc <_printf_i+0x23c>)
 800ad30:	2778      	movs	r7, #120	@ 0x78
 800ad32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	6831      	ldr	r1, [r6, #0]
 800ad3a:	061f      	lsls	r7, r3, #24
 800ad3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad40:	d402      	bmi.n	800ad48 <_printf_i+0x188>
 800ad42:	065f      	lsls	r7, r3, #25
 800ad44:	bf48      	it	mi
 800ad46:	b2ad      	uxthmi	r5, r5
 800ad48:	6031      	str	r1, [r6, #0]
 800ad4a:	07d9      	lsls	r1, r3, #31
 800ad4c:	bf44      	itt	mi
 800ad4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ad52:	6023      	strmi	r3, [r4, #0]
 800ad54:	b11d      	cbz	r5, 800ad5e <_printf_i+0x19e>
 800ad56:	2310      	movs	r3, #16
 800ad58:	e7ac      	b.n	800acb4 <_printf_i+0xf4>
 800ad5a:	4827      	ldr	r0, [pc, #156]	@ (800adf8 <_printf_i+0x238>)
 800ad5c:	e7e9      	b.n	800ad32 <_printf_i+0x172>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	f023 0320 	bic.w	r3, r3, #32
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	e7f6      	b.n	800ad56 <_printf_i+0x196>
 800ad68:	4616      	mov	r6, r2
 800ad6a:	e7bd      	b.n	800ace8 <_printf_i+0x128>
 800ad6c:	6833      	ldr	r3, [r6, #0]
 800ad6e:	6825      	ldr	r5, [r4, #0]
 800ad70:	6961      	ldr	r1, [r4, #20]
 800ad72:	1d18      	adds	r0, r3, #4
 800ad74:	6030      	str	r0, [r6, #0]
 800ad76:	062e      	lsls	r6, r5, #24
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	d501      	bpl.n	800ad80 <_printf_i+0x1c0>
 800ad7c:	6019      	str	r1, [r3, #0]
 800ad7e:	e002      	b.n	800ad86 <_printf_i+0x1c6>
 800ad80:	0668      	lsls	r0, r5, #25
 800ad82:	d5fb      	bpl.n	800ad7c <_printf_i+0x1bc>
 800ad84:	8019      	strh	r1, [r3, #0]
 800ad86:	2300      	movs	r3, #0
 800ad88:	6123      	str	r3, [r4, #16]
 800ad8a:	4616      	mov	r6, r2
 800ad8c:	e7bc      	b.n	800ad08 <_printf_i+0x148>
 800ad8e:	6833      	ldr	r3, [r6, #0]
 800ad90:	1d1a      	adds	r2, r3, #4
 800ad92:	6032      	str	r2, [r6, #0]
 800ad94:	681e      	ldr	r6, [r3, #0]
 800ad96:	6862      	ldr	r2, [r4, #4]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7f5 faa0 	bl	80002e0 <memchr>
 800ada0:	b108      	cbz	r0, 800ada6 <_printf_i+0x1e6>
 800ada2:	1b80      	subs	r0, r0, r6
 800ada4:	6060      	str	r0, [r4, #4]
 800ada6:	6863      	ldr	r3, [r4, #4]
 800ada8:	6123      	str	r3, [r4, #16]
 800adaa:	2300      	movs	r3, #0
 800adac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adb0:	e7aa      	b.n	800ad08 <_printf_i+0x148>
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	4632      	mov	r2, r6
 800adb6:	4649      	mov	r1, r9
 800adb8:	4640      	mov	r0, r8
 800adba:	47d0      	blx	sl
 800adbc:	3001      	adds	r0, #1
 800adbe:	d0ad      	beq.n	800ad1c <_printf_i+0x15c>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	079b      	lsls	r3, r3, #30
 800adc4:	d413      	bmi.n	800adee <_printf_i+0x22e>
 800adc6:	68e0      	ldr	r0, [r4, #12]
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	4298      	cmp	r0, r3
 800adcc:	bfb8      	it	lt
 800adce:	4618      	movlt	r0, r3
 800add0:	e7a6      	b.n	800ad20 <_printf_i+0x160>
 800add2:	2301      	movs	r3, #1
 800add4:	4632      	mov	r2, r6
 800add6:	4649      	mov	r1, r9
 800add8:	4640      	mov	r0, r8
 800adda:	47d0      	blx	sl
 800addc:	3001      	adds	r0, #1
 800adde:	d09d      	beq.n	800ad1c <_printf_i+0x15c>
 800ade0:	3501      	adds	r5, #1
 800ade2:	68e3      	ldr	r3, [r4, #12]
 800ade4:	9903      	ldr	r1, [sp, #12]
 800ade6:	1a5b      	subs	r3, r3, r1
 800ade8:	42ab      	cmp	r3, r5
 800adea:	dcf2      	bgt.n	800add2 <_printf_i+0x212>
 800adec:	e7eb      	b.n	800adc6 <_printf_i+0x206>
 800adee:	2500      	movs	r5, #0
 800adf0:	f104 0619 	add.w	r6, r4, #25
 800adf4:	e7f5      	b.n	800ade2 <_printf_i+0x222>
 800adf6:	bf00      	nop
 800adf8:	080113f7 	.word	0x080113f7
 800adfc:	08011408 	.word	0x08011408

0800ae00 <_scanf_float>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	b087      	sub	sp, #28
 800ae06:	4617      	mov	r7, r2
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	688b      	ldr	r3, [r1, #8]
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ae12:	bf81      	itttt	hi
 800ae14:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ae18:	eb03 0b05 	addhi.w	fp, r3, r5
 800ae1c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ae20:	608b      	strhi	r3, [r1, #8]
 800ae22:	680b      	ldr	r3, [r1, #0]
 800ae24:	460a      	mov	r2, r1
 800ae26:	f04f 0500 	mov.w	r5, #0
 800ae2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ae2e:	f842 3b1c 	str.w	r3, [r2], #28
 800ae32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ae36:	4680      	mov	r8, r0
 800ae38:	460c      	mov	r4, r1
 800ae3a:	bf98      	it	ls
 800ae3c:	f04f 0b00 	movls.w	fp, #0
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	4616      	mov	r6, r2
 800ae44:	46aa      	mov	sl, r5
 800ae46:	46a9      	mov	r9, r5
 800ae48:	9502      	str	r5, [sp, #8]
 800ae4a:	68a2      	ldr	r2, [r4, #8]
 800ae4c:	b152      	cbz	r2, 800ae64 <_scanf_float+0x64>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b4e      	cmp	r3, #78	@ 0x4e
 800ae54:	d864      	bhi.n	800af20 <_scanf_float+0x120>
 800ae56:	2b40      	cmp	r3, #64	@ 0x40
 800ae58:	d83c      	bhi.n	800aed4 <_scanf_float+0xd4>
 800ae5a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ae5e:	b2c8      	uxtb	r0, r1
 800ae60:	280e      	cmp	r0, #14
 800ae62:	d93a      	bls.n	800aeda <_scanf_float+0xda>
 800ae64:	f1b9 0f00 	cmp.w	r9, #0
 800ae68:	d003      	beq.n	800ae72 <_scanf_float+0x72>
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae76:	f1ba 0f01 	cmp.w	sl, #1
 800ae7a:	f200 8117 	bhi.w	800b0ac <_scanf_float+0x2ac>
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	429e      	cmp	r6, r3
 800ae82:	f200 8108 	bhi.w	800b096 <_scanf_float+0x296>
 800ae86:	2001      	movs	r0, #1
 800ae88:	b007      	add	sp, #28
 800ae8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ae92:	2a0d      	cmp	r2, #13
 800ae94:	d8e6      	bhi.n	800ae64 <_scanf_float+0x64>
 800ae96:	a101      	add	r1, pc, #4	@ (adr r1, 800ae9c <_scanf_float+0x9c>)
 800ae98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae9c:	0800afe3 	.word	0x0800afe3
 800aea0:	0800ae65 	.word	0x0800ae65
 800aea4:	0800ae65 	.word	0x0800ae65
 800aea8:	0800ae65 	.word	0x0800ae65
 800aeac:	0800b043 	.word	0x0800b043
 800aeb0:	0800b01b 	.word	0x0800b01b
 800aeb4:	0800ae65 	.word	0x0800ae65
 800aeb8:	0800ae65 	.word	0x0800ae65
 800aebc:	0800aff1 	.word	0x0800aff1
 800aec0:	0800ae65 	.word	0x0800ae65
 800aec4:	0800ae65 	.word	0x0800ae65
 800aec8:	0800ae65 	.word	0x0800ae65
 800aecc:	0800ae65 	.word	0x0800ae65
 800aed0:	0800afa9 	.word	0x0800afa9
 800aed4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aed8:	e7db      	b.n	800ae92 <_scanf_float+0x92>
 800aeda:	290e      	cmp	r1, #14
 800aedc:	d8c2      	bhi.n	800ae64 <_scanf_float+0x64>
 800aede:	a001      	add	r0, pc, #4	@ (adr r0, 800aee4 <_scanf_float+0xe4>)
 800aee0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aee4:	0800af99 	.word	0x0800af99
 800aee8:	0800ae65 	.word	0x0800ae65
 800aeec:	0800af99 	.word	0x0800af99
 800aef0:	0800b02f 	.word	0x0800b02f
 800aef4:	0800ae65 	.word	0x0800ae65
 800aef8:	0800af41 	.word	0x0800af41
 800aefc:	0800af7f 	.word	0x0800af7f
 800af00:	0800af7f 	.word	0x0800af7f
 800af04:	0800af7f 	.word	0x0800af7f
 800af08:	0800af7f 	.word	0x0800af7f
 800af0c:	0800af7f 	.word	0x0800af7f
 800af10:	0800af7f 	.word	0x0800af7f
 800af14:	0800af7f 	.word	0x0800af7f
 800af18:	0800af7f 	.word	0x0800af7f
 800af1c:	0800af7f 	.word	0x0800af7f
 800af20:	2b6e      	cmp	r3, #110	@ 0x6e
 800af22:	d809      	bhi.n	800af38 <_scanf_float+0x138>
 800af24:	2b60      	cmp	r3, #96	@ 0x60
 800af26:	d8b2      	bhi.n	800ae8e <_scanf_float+0x8e>
 800af28:	2b54      	cmp	r3, #84	@ 0x54
 800af2a:	d07b      	beq.n	800b024 <_scanf_float+0x224>
 800af2c:	2b59      	cmp	r3, #89	@ 0x59
 800af2e:	d199      	bne.n	800ae64 <_scanf_float+0x64>
 800af30:	2d07      	cmp	r5, #7
 800af32:	d197      	bne.n	800ae64 <_scanf_float+0x64>
 800af34:	2508      	movs	r5, #8
 800af36:	e02c      	b.n	800af92 <_scanf_float+0x192>
 800af38:	2b74      	cmp	r3, #116	@ 0x74
 800af3a:	d073      	beq.n	800b024 <_scanf_float+0x224>
 800af3c:	2b79      	cmp	r3, #121	@ 0x79
 800af3e:	e7f6      	b.n	800af2e <_scanf_float+0x12e>
 800af40:	6821      	ldr	r1, [r4, #0]
 800af42:	05c8      	lsls	r0, r1, #23
 800af44:	d51b      	bpl.n	800af7e <_scanf_float+0x17e>
 800af46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800af4a:	6021      	str	r1, [r4, #0]
 800af4c:	f109 0901 	add.w	r9, r9, #1
 800af50:	f1bb 0f00 	cmp.w	fp, #0
 800af54:	d003      	beq.n	800af5e <_scanf_float+0x15e>
 800af56:	3201      	adds	r2, #1
 800af58:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af5c:	60a2      	str	r2, [r4, #8]
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	3b01      	subs	r3, #1
 800af62:	60a3      	str	r3, [r4, #8]
 800af64:	6923      	ldr	r3, [r4, #16]
 800af66:	3301      	adds	r3, #1
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	607b      	str	r3, [r7, #4]
 800af72:	f340 8087 	ble.w	800b084 <_scanf_float+0x284>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	e765      	b.n	800ae4a <_scanf_float+0x4a>
 800af7e:	eb1a 0105 	adds.w	r1, sl, r5
 800af82:	f47f af6f 	bne.w	800ae64 <_scanf_float+0x64>
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800af8c:	6022      	str	r2, [r4, #0]
 800af8e:	460d      	mov	r5, r1
 800af90:	468a      	mov	sl, r1
 800af92:	f806 3b01 	strb.w	r3, [r6], #1
 800af96:	e7e2      	b.n	800af5e <_scanf_float+0x15e>
 800af98:	6822      	ldr	r2, [r4, #0]
 800af9a:	0610      	lsls	r0, r2, #24
 800af9c:	f57f af62 	bpl.w	800ae64 <_scanf_float+0x64>
 800afa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afa4:	6022      	str	r2, [r4, #0]
 800afa6:	e7f4      	b.n	800af92 <_scanf_float+0x192>
 800afa8:	f1ba 0f00 	cmp.w	sl, #0
 800afac:	d10e      	bne.n	800afcc <_scanf_float+0x1cc>
 800afae:	f1b9 0f00 	cmp.w	r9, #0
 800afb2:	d10e      	bne.n	800afd2 <_scanf_float+0x1d2>
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800afba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800afbe:	d108      	bne.n	800afd2 <_scanf_float+0x1d2>
 800afc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800afc4:	6022      	str	r2, [r4, #0]
 800afc6:	f04f 0a01 	mov.w	sl, #1
 800afca:	e7e2      	b.n	800af92 <_scanf_float+0x192>
 800afcc:	f1ba 0f02 	cmp.w	sl, #2
 800afd0:	d055      	beq.n	800b07e <_scanf_float+0x27e>
 800afd2:	2d01      	cmp	r5, #1
 800afd4:	d002      	beq.n	800afdc <_scanf_float+0x1dc>
 800afd6:	2d04      	cmp	r5, #4
 800afd8:	f47f af44 	bne.w	800ae64 <_scanf_float+0x64>
 800afdc:	3501      	adds	r5, #1
 800afde:	b2ed      	uxtb	r5, r5
 800afe0:	e7d7      	b.n	800af92 <_scanf_float+0x192>
 800afe2:	f1ba 0f01 	cmp.w	sl, #1
 800afe6:	f47f af3d 	bne.w	800ae64 <_scanf_float+0x64>
 800afea:	f04f 0a02 	mov.w	sl, #2
 800afee:	e7d0      	b.n	800af92 <_scanf_float+0x192>
 800aff0:	b97d      	cbnz	r5, 800b012 <_scanf_float+0x212>
 800aff2:	f1b9 0f00 	cmp.w	r9, #0
 800aff6:	f47f af38 	bne.w	800ae6a <_scanf_float+0x6a>
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b000:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b004:	f040 8101 	bne.w	800b20a <_scanf_float+0x40a>
 800b008:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b00c:	6022      	str	r2, [r4, #0]
 800b00e:	2501      	movs	r5, #1
 800b010:	e7bf      	b.n	800af92 <_scanf_float+0x192>
 800b012:	2d03      	cmp	r5, #3
 800b014:	d0e2      	beq.n	800afdc <_scanf_float+0x1dc>
 800b016:	2d05      	cmp	r5, #5
 800b018:	e7de      	b.n	800afd8 <_scanf_float+0x1d8>
 800b01a:	2d02      	cmp	r5, #2
 800b01c:	f47f af22 	bne.w	800ae64 <_scanf_float+0x64>
 800b020:	2503      	movs	r5, #3
 800b022:	e7b6      	b.n	800af92 <_scanf_float+0x192>
 800b024:	2d06      	cmp	r5, #6
 800b026:	f47f af1d 	bne.w	800ae64 <_scanf_float+0x64>
 800b02a:	2507      	movs	r5, #7
 800b02c:	e7b1      	b.n	800af92 <_scanf_float+0x192>
 800b02e:	6822      	ldr	r2, [r4, #0]
 800b030:	0591      	lsls	r1, r2, #22
 800b032:	f57f af17 	bpl.w	800ae64 <_scanf_float+0x64>
 800b036:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b03a:	6022      	str	r2, [r4, #0]
 800b03c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b040:	e7a7      	b.n	800af92 <_scanf_float+0x192>
 800b042:	6822      	ldr	r2, [r4, #0]
 800b044:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b048:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b04c:	d006      	beq.n	800b05c <_scanf_float+0x25c>
 800b04e:	0550      	lsls	r0, r2, #21
 800b050:	f57f af08 	bpl.w	800ae64 <_scanf_float+0x64>
 800b054:	f1b9 0f00 	cmp.w	r9, #0
 800b058:	f000 80d7 	beq.w	800b20a <_scanf_float+0x40a>
 800b05c:	0591      	lsls	r1, r2, #22
 800b05e:	bf58      	it	pl
 800b060:	9902      	ldrpl	r1, [sp, #8]
 800b062:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b066:	bf58      	it	pl
 800b068:	eba9 0101 	subpl.w	r1, r9, r1
 800b06c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b070:	bf58      	it	pl
 800b072:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b076:	6022      	str	r2, [r4, #0]
 800b078:	f04f 0900 	mov.w	r9, #0
 800b07c:	e789      	b.n	800af92 <_scanf_float+0x192>
 800b07e:	f04f 0a03 	mov.w	sl, #3
 800b082:	e786      	b.n	800af92 <_scanf_float+0x192>
 800b084:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b088:	4639      	mov	r1, r7
 800b08a:	4640      	mov	r0, r8
 800b08c:	4798      	blx	r3
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f aedb 	beq.w	800ae4a <_scanf_float+0x4a>
 800b094:	e6e6      	b.n	800ae64 <_scanf_float+0x64>
 800b096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b09a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b09e:	463a      	mov	r2, r7
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4798      	blx	r3
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	e6e8      	b.n	800ae7e <_scanf_float+0x7e>
 800b0ac:	1e6b      	subs	r3, r5, #1
 800b0ae:	2b06      	cmp	r3, #6
 800b0b0:	d824      	bhi.n	800b0fc <_scanf_float+0x2fc>
 800b0b2:	2d02      	cmp	r5, #2
 800b0b4:	d836      	bhi.n	800b124 <_scanf_float+0x324>
 800b0b6:	9b01      	ldr	r3, [sp, #4]
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	f67f aee4 	bls.w	800ae86 <_scanf_float+0x86>
 800b0be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	4798      	blx	r3
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	e7f0      	b.n	800b0b6 <_scanf_float+0x2b6>
 800b0d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b0dc:	463a      	mov	r2, r7
 800b0de:	4640      	mov	r0, r8
 800b0e0:	4798      	blx	r3
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	6123      	str	r3, [r4, #16]
 800b0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ec:	fa5f fa8a 	uxtb.w	sl, sl
 800b0f0:	f1ba 0f02 	cmp.w	sl, #2
 800b0f4:	d1ee      	bne.n	800b0d4 <_scanf_float+0x2d4>
 800b0f6:	3d03      	subs	r5, #3
 800b0f8:	b2ed      	uxtb	r5, r5
 800b0fa:	1b76      	subs	r6, r6, r5
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	05da      	lsls	r2, r3, #23
 800b100:	d530      	bpl.n	800b164 <_scanf_float+0x364>
 800b102:	055b      	lsls	r3, r3, #21
 800b104:	d511      	bpl.n	800b12a <_scanf_float+0x32a>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	429e      	cmp	r6, r3
 800b10a:	f67f aebc 	bls.w	800ae86 <_scanf_float+0x86>
 800b10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b116:	463a      	mov	r2, r7
 800b118:	4640      	mov	r0, r8
 800b11a:	4798      	blx	r3
 800b11c:	6923      	ldr	r3, [r4, #16]
 800b11e:	3b01      	subs	r3, #1
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	e7f0      	b.n	800b106 <_scanf_float+0x306>
 800b124:	46aa      	mov	sl, r5
 800b126:	46b3      	mov	fp, r6
 800b128:	e7de      	b.n	800b0e8 <_scanf_float+0x2e8>
 800b12a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	2965      	cmp	r1, #101	@ 0x65
 800b132:	f103 33ff 	add.w	r3, r3, #4294967295
 800b136:	f106 35ff 	add.w	r5, r6, #4294967295
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	d00c      	beq.n	800b158 <_scanf_float+0x358>
 800b13e:	2945      	cmp	r1, #69	@ 0x45
 800b140:	d00a      	beq.n	800b158 <_scanf_float+0x358>
 800b142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b146:	463a      	mov	r2, r7
 800b148:	4640      	mov	r0, r8
 800b14a:	4798      	blx	r3
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b152:	3b01      	subs	r3, #1
 800b154:	1eb5      	subs	r5, r6, #2
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b15c:	463a      	mov	r2, r7
 800b15e:	4640      	mov	r0, r8
 800b160:	4798      	blx	r3
 800b162:	462e      	mov	r6, r5
 800b164:	6822      	ldr	r2, [r4, #0]
 800b166:	f012 0210 	ands.w	r2, r2, #16
 800b16a:	d001      	beq.n	800b170 <_scanf_float+0x370>
 800b16c:	2000      	movs	r0, #0
 800b16e:	e68b      	b.n	800ae88 <_scanf_float+0x88>
 800b170:	7032      	strb	r2, [r6, #0]
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b17c:	d11a      	bne.n	800b1b4 <_scanf_float+0x3b4>
 800b17e:	9b02      	ldr	r3, [sp, #8]
 800b180:	454b      	cmp	r3, r9
 800b182:	eba3 0209 	sub.w	r2, r3, r9
 800b186:	d121      	bne.n	800b1cc <_scanf_float+0x3cc>
 800b188:	9901      	ldr	r1, [sp, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	4640      	mov	r0, r8
 800b18e:	f002 fc41 	bl	800da14 <_strtod_r>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	6821      	ldr	r1, [r4, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f011 0f02 	tst.w	r1, #2
 800b19c:	f103 0204 	add.w	r2, r3, #4
 800b1a0:	d01f      	beq.n	800b1e2 <_scanf_float+0x3e2>
 800b1a2:	9903      	ldr	r1, [sp, #12]
 800b1a4:	600a      	str	r2, [r1, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	ed83 0b00 	vstr	d0, [r3]
 800b1ac:	68e3      	ldr	r3, [r4, #12]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60e3      	str	r3, [r4, #12]
 800b1b2:	e7db      	b.n	800b16c <_scanf_float+0x36c>
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0e6      	beq.n	800b188 <_scanf_float+0x388>
 800b1ba:	9905      	ldr	r1, [sp, #20]
 800b1bc:	230a      	movs	r3, #10
 800b1be:	3101      	adds	r1, #1
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	f7ff f9e3 	bl	800a58c <_strtol_r>
 800b1c6:	9b04      	ldr	r3, [sp, #16]
 800b1c8:	9e05      	ldr	r6, [sp, #20]
 800b1ca:	1ac2      	subs	r2, r0, r3
 800b1cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b1d0:	429e      	cmp	r6, r3
 800b1d2:	bf28      	it	cs
 800b1d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b1d8:	490d      	ldr	r1, [pc, #52]	@ (800b210 <_scanf_float+0x410>)
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f000 f968 	bl	800b4b0 <siprintf>
 800b1e0:	e7d2      	b.n	800b188 <_scanf_float+0x388>
 800b1e2:	f011 0f04 	tst.w	r1, #4
 800b1e6:	9903      	ldr	r1, [sp, #12]
 800b1e8:	600a      	str	r2, [r1, #0]
 800b1ea:	d1dc      	bne.n	800b1a6 <_scanf_float+0x3a6>
 800b1ec:	eeb4 0b40 	vcmp.f64	d0, d0
 800b1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f4:	681d      	ldr	r5, [r3, #0]
 800b1f6:	d705      	bvc.n	800b204 <_scanf_float+0x404>
 800b1f8:	4806      	ldr	r0, [pc, #24]	@ (800b214 <_scanf_float+0x414>)
 800b1fa:	f000 fb71 	bl	800b8e0 <nanf>
 800b1fe:	ed85 0a00 	vstr	s0, [r5]
 800b202:	e7d3      	b.n	800b1ac <_scanf_float+0x3ac>
 800b204:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b208:	e7f9      	b.n	800b1fe <_scanf_float+0x3fe>
 800b20a:	f04f 0900 	mov.w	r9, #0
 800b20e:	e630      	b.n	800ae72 <_scanf_float+0x72>
 800b210:	08011419 	.word	0x08011419
 800b214:	080112e3 	.word	0x080112e3

0800b218 <std>:
 800b218:	2300      	movs	r3, #0
 800b21a:	b510      	push	{r4, lr}
 800b21c:	4604      	mov	r4, r0
 800b21e:	e9c0 3300 	strd	r3, r3, [r0]
 800b222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b226:	6083      	str	r3, [r0, #8]
 800b228:	8181      	strh	r1, [r0, #12]
 800b22a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b22c:	81c2      	strh	r2, [r0, #14]
 800b22e:	6183      	str	r3, [r0, #24]
 800b230:	4619      	mov	r1, r3
 800b232:	2208      	movs	r2, #8
 800b234:	305c      	adds	r0, #92	@ 0x5c
 800b236:	f000 fa4d 	bl	800b6d4 <memset>
 800b23a:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <std+0x58>)
 800b23c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b23e:	4b0d      	ldr	r3, [pc, #52]	@ (800b274 <std+0x5c>)
 800b240:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b242:	4b0d      	ldr	r3, [pc, #52]	@ (800b278 <std+0x60>)
 800b244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b246:	4b0d      	ldr	r3, [pc, #52]	@ (800b27c <std+0x64>)
 800b248:	6323      	str	r3, [r4, #48]	@ 0x30
 800b24a:	4b0d      	ldr	r3, [pc, #52]	@ (800b280 <std+0x68>)
 800b24c:	6224      	str	r4, [r4, #32]
 800b24e:	429c      	cmp	r4, r3
 800b250:	d006      	beq.n	800b260 <std+0x48>
 800b252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b256:	4294      	cmp	r4, r2
 800b258:	d002      	beq.n	800b260 <std+0x48>
 800b25a:	33d0      	adds	r3, #208	@ 0xd0
 800b25c:	429c      	cmp	r4, r3
 800b25e:	d105      	bne.n	800b26c <std+0x54>
 800b260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b268:	f000 bb28 	b.w	800b8bc <__retarget_lock_init_recursive>
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	bf00      	nop
 800b270:	0800b4f1 	.word	0x0800b4f1
 800b274:	0800b513 	.word	0x0800b513
 800b278:	0800b54b 	.word	0x0800b54b
 800b27c:	0800b56f 	.word	0x0800b56f
 800b280:	24006890 	.word	0x24006890

0800b284 <stdio_exit_handler>:
 800b284:	4a02      	ldr	r2, [pc, #8]	@ (800b290 <stdio_exit_handler+0xc>)
 800b286:	4903      	ldr	r1, [pc, #12]	@ (800b294 <stdio_exit_handler+0x10>)
 800b288:	4803      	ldr	r0, [pc, #12]	@ (800b298 <stdio_exit_handler+0x14>)
 800b28a:	f000 b87b 	b.w	800b384 <_fwalk_sglue>
 800b28e:	bf00      	nop
 800b290:	24000014 	.word	0x24000014
 800b294:	0800e05d 	.word	0x0800e05d
 800b298:	24000024 	.word	0x24000024

0800b29c <cleanup_stdio>:
 800b29c:	6841      	ldr	r1, [r0, #4]
 800b29e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d0 <cleanup_stdio+0x34>)
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	b510      	push	{r4, lr}
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	d001      	beq.n	800b2ac <cleanup_stdio+0x10>
 800b2a8:	f002 fed8 	bl	800e05c <_fflush_r>
 800b2ac:	68a1      	ldr	r1, [r4, #8]
 800b2ae:	4b09      	ldr	r3, [pc, #36]	@ (800b2d4 <cleanup_stdio+0x38>)
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	d002      	beq.n	800b2ba <cleanup_stdio+0x1e>
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f002 fed1 	bl	800e05c <_fflush_r>
 800b2ba:	68e1      	ldr	r1, [r4, #12]
 800b2bc:	4b06      	ldr	r3, [pc, #24]	@ (800b2d8 <cleanup_stdio+0x3c>)
 800b2be:	4299      	cmp	r1, r3
 800b2c0:	d004      	beq.n	800b2cc <cleanup_stdio+0x30>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c8:	f002 bec8 	b.w	800e05c <_fflush_r>
 800b2cc:	bd10      	pop	{r4, pc}
 800b2ce:	bf00      	nop
 800b2d0:	24006890 	.word	0x24006890
 800b2d4:	240068f8 	.word	0x240068f8
 800b2d8:	24006960 	.word	0x24006960

0800b2dc <global_stdio_init.part.0>:
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	4b0b      	ldr	r3, [pc, #44]	@ (800b30c <global_stdio_init.part.0+0x30>)
 800b2e0:	4c0b      	ldr	r4, [pc, #44]	@ (800b310 <global_stdio_init.part.0+0x34>)
 800b2e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b314 <global_stdio_init.part.0+0x38>)
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	f7ff ff94 	bl	800b218 <std>
 800b2f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	2109      	movs	r1, #9
 800b2f8:	f7ff ff8e 	bl	800b218 <std>
 800b2fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b300:	2202      	movs	r2, #2
 800b302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b306:	2112      	movs	r1, #18
 800b308:	f7ff bf86 	b.w	800b218 <std>
 800b30c:	240069c8 	.word	0x240069c8
 800b310:	24006890 	.word	0x24006890
 800b314:	0800b285 	.word	0x0800b285

0800b318 <__sfp_lock_acquire>:
 800b318:	4801      	ldr	r0, [pc, #4]	@ (800b320 <__sfp_lock_acquire+0x8>)
 800b31a:	f000 bad0 	b.w	800b8be <__retarget_lock_acquire_recursive>
 800b31e:	bf00      	nop
 800b320:	240069d1 	.word	0x240069d1

0800b324 <__sfp_lock_release>:
 800b324:	4801      	ldr	r0, [pc, #4]	@ (800b32c <__sfp_lock_release+0x8>)
 800b326:	f000 bacb 	b.w	800b8c0 <__retarget_lock_release_recursive>
 800b32a:	bf00      	nop
 800b32c:	240069d1 	.word	0x240069d1

0800b330 <__sinit>:
 800b330:	b510      	push	{r4, lr}
 800b332:	4604      	mov	r4, r0
 800b334:	f7ff fff0 	bl	800b318 <__sfp_lock_acquire>
 800b338:	6a23      	ldr	r3, [r4, #32]
 800b33a:	b11b      	cbz	r3, 800b344 <__sinit+0x14>
 800b33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b340:	f7ff bff0 	b.w	800b324 <__sfp_lock_release>
 800b344:	4b04      	ldr	r3, [pc, #16]	@ (800b358 <__sinit+0x28>)
 800b346:	6223      	str	r3, [r4, #32]
 800b348:	4b04      	ldr	r3, [pc, #16]	@ (800b35c <__sinit+0x2c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1f5      	bne.n	800b33c <__sinit+0xc>
 800b350:	f7ff ffc4 	bl	800b2dc <global_stdio_init.part.0>
 800b354:	e7f2      	b.n	800b33c <__sinit+0xc>
 800b356:	bf00      	nop
 800b358:	0800b29d 	.word	0x0800b29d
 800b35c:	240069c8 	.word	0x240069c8

0800b360 <fiprintf>:
 800b360:	b40e      	push	{r1, r2, r3}
 800b362:	b503      	push	{r0, r1, lr}
 800b364:	4601      	mov	r1, r0
 800b366:	ab03      	add	r3, sp, #12
 800b368:	4805      	ldr	r0, [pc, #20]	@ (800b380 <fiprintf+0x20>)
 800b36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36e:	6800      	ldr	r0, [r0, #0]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	f002 fcd7 	bl	800dd24 <_vfiprintf_r>
 800b376:	b002      	add	sp, #8
 800b378:	f85d eb04 	ldr.w	lr, [sp], #4
 800b37c:	b003      	add	sp, #12
 800b37e:	4770      	bx	lr
 800b380:	24000020 	.word	0x24000020

0800b384 <_fwalk_sglue>:
 800b384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b388:	4607      	mov	r7, r0
 800b38a:	4688      	mov	r8, r1
 800b38c:	4614      	mov	r4, r2
 800b38e:	2600      	movs	r6, #0
 800b390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b394:	f1b9 0901 	subs.w	r9, r9, #1
 800b398:	d505      	bpl.n	800b3a6 <_fwalk_sglue+0x22>
 800b39a:	6824      	ldr	r4, [r4, #0]
 800b39c:	2c00      	cmp	r4, #0
 800b39e:	d1f7      	bne.n	800b390 <_fwalk_sglue+0xc>
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a6:	89ab      	ldrh	r3, [r5, #12]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d907      	bls.n	800b3bc <_fwalk_sglue+0x38>
 800b3ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	d003      	beq.n	800b3bc <_fwalk_sglue+0x38>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	47c0      	blx	r8
 800b3ba:	4306      	orrs	r6, r0
 800b3bc:	3568      	adds	r5, #104	@ 0x68
 800b3be:	e7e9      	b.n	800b394 <_fwalk_sglue+0x10>

0800b3c0 <iprintf>:
 800b3c0:	b40f      	push	{r0, r1, r2, r3}
 800b3c2:	b507      	push	{r0, r1, r2, lr}
 800b3c4:	4906      	ldr	r1, [pc, #24]	@ (800b3e0 <iprintf+0x20>)
 800b3c6:	ab04      	add	r3, sp, #16
 800b3c8:	6808      	ldr	r0, [r1, #0]
 800b3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ce:	6881      	ldr	r1, [r0, #8]
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	f002 fca7 	bl	800dd24 <_vfiprintf_r>
 800b3d6:	b003      	add	sp, #12
 800b3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3dc:	b004      	add	sp, #16
 800b3de:	4770      	bx	lr
 800b3e0:	24000020 	.word	0x24000020

0800b3e4 <putchar>:
 800b3e4:	4b02      	ldr	r3, [pc, #8]	@ (800b3f0 <putchar+0xc>)
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	6818      	ldr	r0, [r3, #0]
 800b3ea:	6882      	ldr	r2, [r0, #8]
 800b3ec:	f002 bec0 	b.w	800e170 <_putc_r>
 800b3f0:	24000020 	.word	0x24000020

0800b3f4 <_puts_r>:
 800b3f4:	6a03      	ldr	r3, [r0, #32]
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	6884      	ldr	r4, [r0, #8]
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	460e      	mov	r6, r1
 800b3fe:	b90b      	cbnz	r3, 800b404 <_puts_r+0x10>
 800b400:	f7ff ff96 	bl	800b330 <__sinit>
 800b404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b406:	07db      	lsls	r3, r3, #31
 800b408:	d405      	bmi.n	800b416 <_puts_r+0x22>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	0598      	lsls	r0, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_puts_r+0x22>
 800b410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b412:	f000 fa54 	bl	800b8be <__retarget_lock_acquire_recursive>
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	0719      	lsls	r1, r3, #28
 800b41a:	d502      	bpl.n	800b422 <_puts_r+0x2e>
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d135      	bne.n	800b48e <_puts_r+0x9a>
 800b422:	4621      	mov	r1, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f000 f8e5 	bl	800b5f4 <__swsetup_r>
 800b42a:	b380      	cbz	r0, 800b48e <_puts_r+0x9a>
 800b42c:	f04f 35ff 	mov.w	r5, #4294967295
 800b430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b432:	07da      	lsls	r2, r3, #31
 800b434:	d405      	bmi.n	800b442 <_puts_r+0x4e>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	059b      	lsls	r3, r3, #22
 800b43a:	d402      	bmi.n	800b442 <_puts_r+0x4e>
 800b43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b43e:	f000 fa3f 	bl	800b8c0 <__retarget_lock_release_recursive>
 800b442:	4628      	mov	r0, r5
 800b444:	bd70      	pop	{r4, r5, r6, pc}
 800b446:	2b00      	cmp	r3, #0
 800b448:	da04      	bge.n	800b454 <_puts_r+0x60>
 800b44a:	69a2      	ldr	r2, [r4, #24]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	dc17      	bgt.n	800b480 <_puts_r+0x8c>
 800b450:	290a      	cmp	r1, #10
 800b452:	d015      	beq.n	800b480 <_puts_r+0x8c>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	1c5a      	adds	r2, r3, #1
 800b458:	6022      	str	r2, [r4, #0]
 800b45a:	7019      	strb	r1, [r3, #0]
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b462:	3b01      	subs	r3, #1
 800b464:	60a3      	str	r3, [r4, #8]
 800b466:	2900      	cmp	r1, #0
 800b468:	d1ed      	bne.n	800b446 <_puts_r+0x52>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	da11      	bge.n	800b492 <_puts_r+0x9e>
 800b46e:	4622      	mov	r2, r4
 800b470:	210a      	movs	r1, #10
 800b472:	4628      	mov	r0, r5
 800b474:	f000 f87f 	bl	800b576 <__swbuf_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	d0d7      	beq.n	800b42c <_puts_r+0x38>
 800b47c:	250a      	movs	r5, #10
 800b47e:	e7d7      	b.n	800b430 <_puts_r+0x3c>
 800b480:	4622      	mov	r2, r4
 800b482:	4628      	mov	r0, r5
 800b484:	f000 f877 	bl	800b576 <__swbuf_r>
 800b488:	3001      	adds	r0, #1
 800b48a:	d1e7      	bne.n	800b45c <_puts_r+0x68>
 800b48c:	e7ce      	b.n	800b42c <_puts_r+0x38>
 800b48e:	3e01      	subs	r6, #1
 800b490:	e7e4      	b.n	800b45c <_puts_r+0x68>
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	6022      	str	r2, [r4, #0]
 800b498:	220a      	movs	r2, #10
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	e7ee      	b.n	800b47c <_puts_r+0x88>
	...

0800b4a0 <puts>:
 800b4a0:	4b02      	ldr	r3, [pc, #8]	@ (800b4ac <puts+0xc>)
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	6818      	ldr	r0, [r3, #0]
 800b4a6:	f7ff bfa5 	b.w	800b3f4 <_puts_r>
 800b4aa:	bf00      	nop
 800b4ac:	24000020 	.word	0x24000020

0800b4b0 <siprintf>:
 800b4b0:	b40e      	push	{r1, r2, r3}
 800b4b2:	b500      	push	{lr}
 800b4b4:	b09c      	sub	sp, #112	@ 0x70
 800b4b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4b8:	9002      	str	r0, [sp, #8]
 800b4ba:	9006      	str	r0, [sp, #24]
 800b4bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4c0:	4809      	ldr	r0, [pc, #36]	@ (800b4e8 <siprintf+0x38>)
 800b4c2:	9107      	str	r1, [sp, #28]
 800b4c4:	9104      	str	r1, [sp, #16]
 800b4c6:	4909      	ldr	r1, [pc, #36]	@ (800b4ec <siprintf+0x3c>)
 800b4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4cc:	9105      	str	r1, [sp, #20]
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	a902      	add	r1, sp, #8
 800b4d4:	f002 fb00 	bl	800dad8 <_svfiprintf_r>
 800b4d8:	9b02      	ldr	r3, [sp, #8]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	b01c      	add	sp, #112	@ 0x70
 800b4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4e4:	b003      	add	sp, #12
 800b4e6:	4770      	bx	lr
 800b4e8:	24000020 	.word	0x24000020
 800b4ec:	ffff0208 	.word	0xffff0208

0800b4f0 <__sread>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f8:	f000 f982 	bl	800b800 <_read_r>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	bfab      	itete	ge
 800b500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b502:	89a3      	ldrhlt	r3, [r4, #12]
 800b504:	181b      	addge	r3, r3, r0
 800b506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b50a:	bfac      	ite	ge
 800b50c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b50e:	81a3      	strhlt	r3, [r4, #12]
 800b510:	bd10      	pop	{r4, pc}

0800b512 <__swrite>:
 800b512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b516:	461f      	mov	r7, r3
 800b518:	898b      	ldrh	r3, [r1, #12]
 800b51a:	05db      	lsls	r3, r3, #23
 800b51c:	4605      	mov	r5, r0
 800b51e:	460c      	mov	r4, r1
 800b520:	4616      	mov	r6, r2
 800b522:	d505      	bpl.n	800b530 <__swrite+0x1e>
 800b524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b528:	2302      	movs	r3, #2
 800b52a:	2200      	movs	r2, #0
 800b52c:	f000 f956 	bl	800b7dc <_lseek_r>
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	4632      	mov	r2, r6
 800b53e:	463b      	mov	r3, r7
 800b540:	4628      	mov	r0, r5
 800b542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b546:	f000 b97d 	b.w	800b844 <_write_r>

0800b54a <__sseek>:
 800b54a:	b510      	push	{r4, lr}
 800b54c:	460c      	mov	r4, r1
 800b54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b552:	f000 f943 	bl	800b7dc <_lseek_r>
 800b556:	1c43      	adds	r3, r0, #1
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	bf15      	itete	ne
 800b55c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b55e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b566:	81a3      	strheq	r3, [r4, #12]
 800b568:	bf18      	it	ne
 800b56a:	81a3      	strhne	r3, [r4, #12]
 800b56c:	bd10      	pop	{r4, pc}

0800b56e <__sclose>:
 800b56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b572:	f000 b8cd 	b.w	800b710 <_close_r>

0800b576 <__swbuf_r>:
 800b576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b578:	460e      	mov	r6, r1
 800b57a:	4614      	mov	r4, r2
 800b57c:	4605      	mov	r5, r0
 800b57e:	b118      	cbz	r0, 800b588 <__swbuf_r+0x12>
 800b580:	6a03      	ldr	r3, [r0, #32]
 800b582:	b90b      	cbnz	r3, 800b588 <__swbuf_r+0x12>
 800b584:	f7ff fed4 	bl	800b330 <__sinit>
 800b588:	69a3      	ldr	r3, [r4, #24]
 800b58a:	60a3      	str	r3, [r4, #8]
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	071a      	lsls	r2, r3, #28
 800b590:	d501      	bpl.n	800b596 <__swbuf_r+0x20>
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	b943      	cbnz	r3, 800b5a8 <__swbuf_r+0x32>
 800b596:	4621      	mov	r1, r4
 800b598:	4628      	mov	r0, r5
 800b59a:	f000 f82b 	bl	800b5f4 <__swsetup_r>
 800b59e:	b118      	cbz	r0, 800b5a8 <__swbuf_r+0x32>
 800b5a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	6922      	ldr	r2, [r4, #16]
 800b5ac:	1a98      	subs	r0, r3, r2
 800b5ae:	6963      	ldr	r3, [r4, #20]
 800b5b0:	b2f6      	uxtb	r6, r6
 800b5b2:	4283      	cmp	r3, r0
 800b5b4:	4637      	mov	r7, r6
 800b5b6:	dc05      	bgt.n	800b5c4 <__swbuf_r+0x4e>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f002 fd4e 	bl	800e05c <_fflush_r>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d1ed      	bne.n	800b5a0 <__swbuf_r+0x2a>
 800b5c4:	68a3      	ldr	r3, [r4, #8]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	60a3      	str	r3, [r4, #8]
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	6022      	str	r2, [r4, #0]
 800b5d0:	701e      	strb	r6, [r3, #0]
 800b5d2:	6962      	ldr	r2, [r4, #20]
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d004      	beq.n	800b5e4 <__swbuf_r+0x6e>
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	07db      	lsls	r3, r3, #31
 800b5de:	d5e1      	bpl.n	800b5a4 <__swbuf_r+0x2e>
 800b5e0:	2e0a      	cmp	r6, #10
 800b5e2:	d1df      	bne.n	800b5a4 <__swbuf_r+0x2e>
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f002 fd38 	bl	800e05c <_fflush_r>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d0d9      	beq.n	800b5a4 <__swbuf_r+0x2e>
 800b5f0:	e7d6      	b.n	800b5a0 <__swbuf_r+0x2a>
	...

0800b5f4 <__swsetup_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4b29      	ldr	r3, [pc, #164]	@ (800b69c <__swsetup_r+0xa8>)
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	b118      	cbz	r0, 800b608 <__swsetup_r+0x14>
 800b600:	6a03      	ldr	r3, [r0, #32]
 800b602:	b90b      	cbnz	r3, 800b608 <__swsetup_r+0x14>
 800b604:	f7ff fe94 	bl	800b330 <__sinit>
 800b608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b60c:	0719      	lsls	r1, r3, #28
 800b60e:	d422      	bmi.n	800b656 <__swsetup_r+0x62>
 800b610:	06da      	lsls	r2, r3, #27
 800b612:	d407      	bmi.n	800b624 <__swsetup_r+0x30>
 800b614:	2209      	movs	r2, #9
 800b616:	602a      	str	r2, [r5, #0]
 800b618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	e033      	b.n	800b68c <__swsetup_r+0x98>
 800b624:	0758      	lsls	r0, r3, #29
 800b626:	d512      	bpl.n	800b64e <__swsetup_r+0x5a>
 800b628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b62a:	b141      	cbz	r1, 800b63e <__swsetup_r+0x4a>
 800b62c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b630:	4299      	cmp	r1, r3
 800b632:	d002      	beq.n	800b63a <__swsetup_r+0x46>
 800b634:	4628      	mov	r0, r5
 800b636:	f000 ff41 	bl	800c4bc <_free_r>
 800b63a:	2300      	movs	r3, #0
 800b63c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	2300      	movs	r3, #0
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f043 0308 	orr.w	r3, r3, #8
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	b94b      	cbnz	r3, 800b66e <__swsetup_r+0x7a>
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b664:	d003      	beq.n	800b66e <__swsetup_r+0x7a>
 800b666:	4621      	mov	r1, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f002 fd45 	bl	800e0f8 <__smakebuf_r>
 800b66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b672:	f013 0201 	ands.w	r2, r3, #1
 800b676:	d00a      	beq.n	800b68e <__swsetup_r+0x9a>
 800b678:	2200      	movs	r2, #0
 800b67a:	60a2      	str	r2, [r4, #8]
 800b67c:	6962      	ldr	r2, [r4, #20]
 800b67e:	4252      	negs	r2, r2
 800b680:	61a2      	str	r2, [r4, #24]
 800b682:	6922      	ldr	r2, [r4, #16]
 800b684:	b942      	cbnz	r2, 800b698 <__swsetup_r+0xa4>
 800b686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b68a:	d1c5      	bne.n	800b618 <__swsetup_r+0x24>
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	0799      	lsls	r1, r3, #30
 800b690:	bf58      	it	pl
 800b692:	6962      	ldrpl	r2, [r4, #20]
 800b694:	60a2      	str	r2, [r4, #8]
 800b696:	e7f4      	b.n	800b682 <__swsetup_r+0x8e>
 800b698:	2000      	movs	r0, #0
 800b69a:	e7f7      	b.n	800b68c <__swsetup_r+0x98>
 800b69c:	24000020 	.word	0x24000020

0800b6a0 <memmove>:
 800b6a0:	4288      	cmp	r0, r1
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	eb01 0402 	add.w	r4, r1, r2
 800b6a8:	d902      	bls.n	800b6b0 <memmove+0x10>
 800b6aa:	4284      	cmp	r4, r0
 800b6ac:	4623      	mov	r3, r4
 800b6ae:	d807      	bhi.n	800b6c0 <memmove+0x20>
 800b6b0:	1e43      	subs	r3, r0, #1
 800b6b2:	42a1      	cmp	r1, r4
 800b6b4:	d008      	beq.n	800b6c8 <memmove+0x28>
 800b6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6be:	e7f8      	b.n	800b6b2 <memmove+0x12>
 800b6c0:	4402      	add	r2, r0
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	428a      	cmp	r2, r1
 800b6c6:	d100      	bne.n	800b6ca <memmove+0x2a>
 800b6c8:	bd10      	pop	{r4, pc}
 800b6ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6d2:	e7f7      	b.n	800b6c4 <memmove+0x24>

0800b6d4 <memset>:
 800b6d4:	4402      	add	r2, r0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d100      	bne.n	800b6de <memset+0xa>
 800b6dc:	4770      	bx	lr
 800b6de:	f803 1b01 	strb.w	r1, [r3], #1
 800b6e2:	e7f9      	b.n	800b6d8 <memset+0x4>

0800b6e4 <strncmp>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	b16a      	cbz	r2, 800b704 <strncmp+0x20>
 800b6e8:	3901      	subs	r1, #1
 800b6ea:	1884      	adds	r4, r0, r2
 800b6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d103      	bne.n	800b700 <strncmp+0x1c>
 800b6f8:	42a0      	cmp	r0, r4
 800b6fa:	d001      	beq.n	800b700 <strncmp+0x1c>
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	d1f5      	bne.n	800b6ec <strncmp+0x8>
 800b700:	1ad0      	subs	r0, r2, r3
 800b702:	bd10      	pop	{r4, pc}
 800b704:	4610      	mov	r0, r2
 800b706:	e7fc      	b.n	800b702 <strncmp+0x1e>

0800b708 <_localeconv_r>:
 800b708:	4800      	ldr	r0, [pc, #0]	@ (800b70c <_localeconv_r+0x4>)
 800b70a:	4770      	bx	lr
 800b70c:	24000160 	.word	0x24000160

0800b710 <_close_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d06      	ldr	r5, [pc, #24]	@ (800b72c <_close_r+0x1c>)
 800b714:	2300      	movs	r3, #0
 800b716:	4604      	mov	r4, r0
 800b718:	4608      	mov	r0, r1
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	f7f6 fb76 	bl	8001e0c <_close>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_close_r+0x1a>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_close_r+0x1a>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	240069cc 	.word	0x240069cc

0800b730 <_reclaim_reent>:
 800b730:	4b29      	ldr	r3, [pc, #164]	@ (800b7d8 <_reclaim_reent+0xa8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4283      	cmp	r3, r0
 800b736:	b570      	push	{r4, r5, r6, lr}
 800b738:	4604      	mov	r4, r0
 800b73a:	d04b      	beq.n	800b7d4 <_reclaim_reent+0xa4>
 800b73c:	69c3      	ldr	r3, [r0, #28]
 800b73e:	b1ab      	cbz	r3, 800b76c <_reclaim_reent+0x3c>
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	b16b      	cbz	r3, 800b760 <_reclaim_reent+0x30>
 800b744:	2500      	movs	r5, #0
 800b746:	69e3      	ldr	r3, [r4, #28]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	5959      	ldr	r1, [r3, r5]
 800b74c:	2900      	cmp	r1, #0
 800b74e:	d13b      	bne.n	800b7c8 <_reclaim_reent+0x98>
 800b750:	3504      	adds	r5, #4
 800b752:	2d80      	cmp	r5, #128	@ 0x80
 800b754:	d1f7      	bne.n	800b746 <_reclaim_reent+0x16>
 800b756:	69e3      	ldr	r3, [r4, #28]
 800b758:	4620      	mov	r0, r4
 800b75a:	68d9      	ldr	r1, [r3, #12]
 800b75c:	f000 feae 	bl	800c4bc <_free_r>
 800b760:	69e3      	ldr	r3, [r4, #28]
 800b762:	6819      	ldr	r1, [r3, #0]
 800b764:	b111      	cbz	r1, 800b76c <_reclaim_reent+0x3c>
 800b766:	4620      	mov	r0, r4
 800b768:	f000 fea8 	bl	800c4bc <_free_r>
 800b76c:	6961      	ldr	r1, [r4, #20]
 800b76e:	b111      	cbz	r1, 800b776 <_reclaim_reent+0x46>
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fea3 	bl	800c4bc <_free_r>
 800b776:	69e1      	ldr	r1, [r4, #28]
 800b778:	b111      	cbz	r1, 800b780 <_reclaim_reent+0x50>
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fe9e 	bl	800c4bc <_free_r>
 800b780:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x5a>
 800b784:	4620      	mov	r0, r4
 800b786:	f000 fe99 	bl	800c4bc <_free_r>
 800b78a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x64>
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 fe94 	bl	800c4bc <_free_r>
 800b794:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x6e>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 fe8f 	bl	800c4bc <_free_r>
 800b79e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x78>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fe8a 	bl	800c4bc <_free_r>
 800b7a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x82>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 fe85 	bl	800c4bc <_free_r>
 800b7b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x8c>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 fe80 	bl	800c4bc <_free_r>
 800b7bc:	6a23      	ldr	r3, [r4, #32]
 800b7be:	b14b      	cbz	r3, 800b7d4 <_reclaim_reent+0xa4>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7c6:	4718      	bx	r3
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 fe76 	bl	800c4bc <_free_r>
 800b7d0:	4631      	mov	r1, r6
 800b7d2:	e7bb      	b.n	800b74c <_reclaim_reent+0x1c>
 800b7d4:	bd70      	pop	{r4, r5, r6, pc}
 800b7d6:	bf00      	nop
 800b7d8:	24000020 	.word	0x24000020

0800b7dc <_lseek_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d07      	ldr	r5, [pc, #28]	@ (800b7fc <_lseek_r+0x20>)
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	4608      	mov	r0, r1
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	602a      	str	r2, [r5, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f7f6 fb35 	bl	8001e5a <_lseek>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_lseek_r+0x1e>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_lseek_r+0x1e>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	240069cc 	.word	0x240069cc

0800b800 <_read_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d07      	ldr	r5, [pc, #28]	@ (800b820 <_read_r+0x20>)
 800b804:	4604      	mov	r4, r0
 800b806:	4608      	mov	r0, r1
 800b808:	4611      	mov	r1, r2
 800b80a:	2200      	movs	r2, #0
 800b80c:	602a      	str	r2, [r5, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	f7f6 fadf 	bl	8001dd2 <_read>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_read_r+0x1e>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_read_r+0x1e>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	240069cc 	.word	0x240069cc

0800b824 <_sbrk_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4d06      	ldr	r5, [pc, #24]	@ (800b840 <_sbrk_r+0x1c>)
 800b828:	2300      	movs	r3, #0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4608      	mov	r0, r1
 800b82e:	602b      	str	r3, [r5, #0]
 800b830:	f7f6 fb20 	bl	8001e74 <_sbrk>
 800b834:	1c43      	adds	r3, r0, #1
 800b836:	d102      	bne.n	800b83e <_sbrk_r+0x1a>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	b103      	cbz	r3, 800b83e <_sbrk_r+0x1a>
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	240069cc 	.word	0x240069cc

0800b844 <_write_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	@ (800b864 <_write_r+0x20>)
 800b848:	4604      	mov	r4, r0
 800b84a:	4608      	mov	r0, r1
 800b84c:	4611      	mov	r1, r2
 800b84e:	2200      	movs	r2, #0
 800b850:	602a      	str	r2, [r5, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	f7f5 fb4c 	bl	8000ef0 <_write>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_write_r+0x1e>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_write_r+0x1e>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	240069cc 	.word	0x240069cc

0800b868 <__errno>:
 800b868:	4b01      	ldr	r3, [pc, #4]	@ (800b870 <__errno+0x8>)
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	24000020 	.word	0x24000020

0800b874 <__libc_init_array>:
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	4d0d      	ldr	r5, [pc, #52]	@ (800b8ac <__libc_init_array+0x38>)
 800b878:	4c0d      	ldr	r4, [pc, #52]	@ (800b8b0 <__libc_init_array+0x3c>)
 800b87a:	1b64      	subs	r4, r4, r5
 800b87c:	10a4      	asrs	r4, r4, #2
 800b87e:	2600      	movs	r6, #0
 800b880:	42a6      	cmp	r6, r4
 800b882:	d109      	bne.n	800b898 <__libc_init_array+0x24>
 800b884:	4d0b      	ldr	r5, [pc, #44]	@ (800b8b4 <__libc_init_array+0x40>)
 800b886:	4c0c      	ldr	r4, [pc, #48]	@ (800b8b8 <__libc_init_array+0x44>)
 800b888:	f003 f8a4 	bl	800e9d4 <_init>
 800b88c:	1b64      	subs	r4, r4, r5
 800b88e:	10a4      	asrs	r4, r4, #2
 800b890:	2600      	movs	r6, #0
 800b892:	42a6      	cmp	r6, r4
 800b894:	d105      	bne.n	800b8a2 <__libc_init_array+0x2e>
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89c:	4798      	blx	r3
 800b89e:	3601      	adds	r6, #1
 800b8a0:	e7ee      	b.n	800b880 <__libc_init_array+0xc>
 800b8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a6:	4798      	blx	r3
 800b8a8:	3601      	adds	r6, #1
 800b8aa:	e7f2      	b.n	800b892 <__libc_init_array+0x1e>
 800b8ac:	080116dc 	.word	0x080116dc
 800b8b0:	080116dc 	.word	0x080116dc
 800b8b4:	080116dc 	.word	0x080116dc
 800b8b8:	080116e0 	.word	0x080116e0

0800b8bc <__retarget_lock_init_recursive>:
 800b8bc:	4770      	bx	lr

0800b8be <__retarget_lock_acquire_recursive>:
 800b8be:	4770      	bx	lr

0800b8c0 <__retarget_lock_release_recursive>:
 800b8c0:	4770      	bx	lr

0800b8c2 <memcpy>:
 800b8c2:	440a      	add	r2, r1
 800b8c4:	4291      	cmp	r1, r2
 800b8c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8ca:	d100      	bne.n	800b8ce <memcpy+0xc>
 800b8cc:	4770      	bx	lr
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8d8:	4291      	cmp	r1, r2
 800b8da:	d1f9      	bne.n	800b8d0 <memcpy+0xe>
 800b8dc:	bd10      	pop	{r4, pc}
	...

0800b8e0 <nanf>:
 800b8e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b8e8 <nanf+0x8>
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	7fc00000 	.word	0x7fc00000

0800b8ec <abort>:
 800b8ec:	b508      	push	{r3, lr}
 800b8ee:	2006      	movs	r0, #6
 800b8f0:	f002 fc9a 	bl	800e228 <raise>
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	f7f6 fa61 	bl	8001dbc <_exit>

0800b8fa <quorem>:
 800b8fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fe:	6903      	ldr	r3, [r0, #16]
 800b900:	690c      	ldr	r4, [r1, #16]
 800b902:	42a3      	cmp	r3, r4
 800b904:	4607      	mov	r7, r0
 800b906:	db7e      	blt.n	800ba06 <quorem+0x10c>
 800b908:	3c01      	subs	r4, #1
 800b90a:	f101 0814 	add.w	r8, r1, #20
 800b90e:	00a3      	lsls	r3, r4, #2
 800b910:	f100 0514 	add.w	r5, r0, #20
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b924:	3301      	adds	r3, #1
 800b926:	429a      	cmp	r2, r3
 800b928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b92c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b930:	d32e      	bcc.n	800b990 <quorem+0x96>
 800b932:	f04f 0a00 	mov.w	sl, #0
 800b936:	46c4      	mov	ip, r8
 800b938:	46ae      	mov	lr, r5
 800b93a:	46d3      	mov	fp, sl
 800b93c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b940:	b298      	uxth	r0, r3
 800b942:	fb06 a000 	mla	r0, r6, r0, sl
 800b946:	0c02      	lsrs	r2, r0, #16
 800b948:	0c1b      	lsrs	r3, r3, #16
 800b94a:	fb06 2303 	mla	r3, r6, r3, r2
 800b94e:	f8de 2000 	ldr.w	r2, [lr]
 800b952:	b280      	uxth	r0, r0
 800b954:	b292      	uxth	r2, r2
 800b956:	1a12      	subs	r2, r2, r0
 800b958:	445a      	add	r2, fp
 800b95a:	f8de 0000 	ldr.w	r0, [lr]
 800b95e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b962:	b29b      	uxth	r3, r3
 800b964:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b968:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b96c:	b292      	uxth	r2, r2
 800b96e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b972:	45e1      	cmp	r9, ip
 800b974:	f84e 2b04 	str.w	r2, [lr], #4
 800b978:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b97c:	d2de      	bcs.n	800b93c <quorem+0x42>
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	58eb      	ldr	r3, [r5, r3]
 800b982:	b92b      	cbnz	r3, 800b990 <quorem+0x96>
 800b984:	9b01      	ldr	r3, [sp, #4]
 800b986:	3b04      	subs	r3, #4
 800b988:	429d      	cmp	r5, r3
 800b98a:	461a      	mov	r2, r3
 800b98c:	d32f      	bcc.n	800b9ee <quorem+0xf4>
 800b98e:	613c      	str	r4, [r7, #16]
 800b990:	4638      	mov	r0, r7
 800b992:	f001 f8a1 	bl	800cad8 <__mcmp>
 800b996:	2800      	cmp	r0, #0
 800b998:	db25      	blt.n	800b9e6 <quorem+0xec>
 800b99a:	4629      	mov	r1, r5
 800b99c:	2000      	movs	r0, #0
 800b99e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9a2:	f8d1 c000 	ldr.w	ip, [r1]
 800b9a6:	fa1f fe82 	uxth.w	lr, r2
 800b9aa:	fa1f f38c 	uxth.w	r3, ip
 800b9ae:	eba3 030e 	sub.w	r3, r3, lr
 800b9b2:	4403      	add	r3, r0
 800b9b4:	0c12      	lsrs	r2, r2, #16
 800b9b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b9ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9c4:	45c1      	cmp	r9, r8
 800b9c6:	f841 3b04 	str.w	r3, [r1], #4
 800b9ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9ce:	d2e6      	bcs.n	800b99e <quorem+0xa4>
 800b9d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9d8:	b922      	cbnz	r2, 800b9e4 <quorem+0xea>
 800b9da:	3b04      	subs	r3, #4
 800b9dc:	429d      	cmp	r5, r3
 800b9de:	461a      	mov	r2, r3
 800b9e0:	d30b      	bcc.n	800b9fa <quorem+0x100>
 800b9e2:	613c      	str	r4, [r7, #16]
 800b9e4:	3601      	adds	r6, #1
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	b003      	add	sp, #12
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	6812      	ldr	r2, [r2, #0]
 800b9f0:	3b04      	subs	r3, #4
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	d1cb      	bne.n	800b98e <quorem+0x94>
 800b9f6:	3c01      	subs	r4, #1
 800b9f8:	e7c6      	b.n	800b988 <quorem+0x8e>
 800b9fa:	6812      	ldr	r2, [r2, #0]
 800b9fc:	3b04      	subs	r3, #4
 800b9fe:	2a00      	cmp	r2, #0
 800ba00:	d1ef      	bne.n	800b9e2 <quorem+0xe8>
 800ba02:	3c01      	subs	r4, #1
 800ba04:	e7ea      	b.n	800b9dc <quorem+0xe2>
 800ba06:	2000      	movs	r0, #0
 800ba08:	e7ee      	b.n	800b9e8 <quorem+0xee>
 800ba0a:	0000      	movs	r0, r0
 800ba0c:	0000      	movs	r0, r0
	...

0800ba10 <_dtoa_r>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	ed2d 8b02 	vpush	{d8}
 800ba18:	69c7      	ldr	r7, [r0, #28]
 800ba1a:	b091      	sub	sp, #68	@ 0x44
 800ba1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba20:	ec55 4b10 	vmov	r4, r5, d0
 800ba24:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ba26:	9107      	str	r1, [sp, #28]
 800ba28:	4681      	mov	r9, r0
 800ba2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba2c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba2e:	b97f      	cbnz	r7, 800ba50 <_dtoa_r+0x40>
 800ba30:	2010      	movs	r0, #16
 800ba32:	f7fe fc7b 	bl	800a32c <malloc>
 800ba36:	4602      	mov	r2, r0
 800ba38:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba3c:	b920      	cbnz	r0, 800ba48 <_dtoa_r+0x38>
 800ba3e:	4ba0      	ldr	r3, [pc, #640]	@ (800bcc0 <_dtoa_r+0x2b0>)
 800ba40:	21ef      	movs	r1, #239	@ 0xef
 800ba42:	48a0      	ldr	r0, [pc, #640]	@ (800bcc4 <_dtoa_r+0x2b4>)
 800ba44:	f7fe fc40 	bl	800a2c8 <__assert_func>
 800ba48:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba4c:	6007      	str	r7, [r0, #0]
 800ba4e:	60c7      	str	r7, [r0, #12]
 800ba50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba54:	6819      	ldr	r1, [r3, #0]
 800ba56:	b159      	cbz	r1, 800ba70 <_dtoa_r+0x60>
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	604a      	str	r2, [r1, #4]
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	4093      	lsls	r3, r2
 800ba60:	608b      	str	r3, [r1, #8]
 800ba62:	4648      	mov	r0, r9
 800ba64:	f000 fdb4 	bl	800c5d0 <_Bfree>
 800ba68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	1e2b      	subs	r3, r5, #0
 800ba72:	bfbb      	ittet	lt
 800ba74:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba78:	9303      	strlt	r3, [sp, #12]
 800ba7a:	2300      	movge	r3, #0
 800ba7c:	2201      	movlt	r2, #1
 800ba7e:	bfac      	ite	ge
 800ba80:	6033      	strge	r3, [r6, #0]
 800ba82:	6032      	strlt	r2, [r6, #0]
 800ba84:	4b90      	ldr	r3, [pc, #576]	@ (800bcc8 <_dtoa_r+0x2b8>)
 800ba86:	9e03      	ldr	r6, [sp, #12]
 800ba88:	43b3      	bics	r3, r6
 800ba8a:	d110      	bne.n	800baae <_dtoa_r+0x9e>
 800ba8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba8e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ba98:	4323      	orrs	r3, r4
 800ba9a:	f000 84de 	beq.w	800c45a <_dtoa_r+0xa4a>
 800ba9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800baa0:	4f8a      	ldr	r7, [pc, #552]	@ (800bccc <_dtoa_r+0x2bc>)
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 84e0 	beq.w	800c468 <_dtoa_r+0xa58>
 800baa8:	1cfb      	adds	r3, r7, #3
 800baaa:	f000 bcdb 	b.w	800c464 <_dtoa_r+0xa54>
 800baae:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bab2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baba:	d10a      	bne.n	800bad2 <_dtoa_r+0xc2>
 800babc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800babe:	2301      	movs	r3, #1
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bac4:	b113      	cbz	r3, 800bacc <_dtoa_r+0xbc>
 800bac6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bac8:	4b81      	ldr	r3, [pc, #516]	@ (800bcd0 <_dtoa_r+0x2c0>)
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	4f81      	ldr	r7, [pc, #516]	@ (800bcd4 <_dtoa_r+0x2c4>)
 800bace:	f000 bccb 	b.w	800c468 <_dtoa_r+0xa58>
 800bad2:	aa0e      	add	r2, sp, #56	@ 0x38
 800bad4:	a90f      	add	r1, sp, #60	@ 0x3c
 800bad6:	4648      	mov	r0, r9
 800bad8:	eeb0 0b48 	vmov.f64	d0, d8
 800badc:	f001 f91c 	bl	800cd18 <__d2b>
 800bae0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bae6:	9001      	str	r0, [sp, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d045      	beq.n	800bb78 <_dtoa_r+0x168>
 800baec:	eeb0 7b48 	vmov.f64	d7, d8
 800baf0:	ee18 1a90 	vmov	r1, s17
 800baf4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800baf8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bafc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bb00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bb04:	2500      	movs	r5, #0
 800bb06:	ee07 1a90 	vmov	s15, r1
 800bb0a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bb0e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bca8 <_dtoa_r+0x298>
 800bb12:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb16:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bcb0 <_dtoa_r+0x2a0>
 800bb1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bb1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bcb8 <_dtoa_r+0x2a8>
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bb2a:	eeb0 7b46 	vmov.f64	d7, d6
 800bb2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bb32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bb36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb3e:	ee16 8a90 	vmov	r8, s13
 800bb42:	d508      	bpl.n	800bb56 <_dtoa_r+0x146>
 800bb44:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bb48:	eeb4 6b47 	vcmp.f64	d6, d7
 800bb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb50:	bf18      	it	ne
 800bb52:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bb56:	f1b8 0f16 	cmp.w	r8, #22
 800bb5a:	d82b      	bhi.n	800bbb4 <_dtoa_r+0x1a4>
 800bb5c:	495e      	ldr	r1, [pc, #376]	@ (800bcd8 <_dtoa_r+0x2c8>)
 800bb5e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bb62:	ed91 7b00 	vldr	d7, [r1]
 800bb66:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6e:	d501      	bpl.n	800bb74 <_dtoa_r+0x164>
 800bb70:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb74:	2100      	movs	r1, #0
 800bb76:	e01e      	b.n	800bbb6 <_dtoa_r+0x1a6>
 800bb78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bb80:	2920      	cmp	r1, #32
 800bb82:	bfc1      	itttt	gt
 800bb84:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bb88:	408e      	lslgt	r6, r1
 800bb8a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bb8e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bb92:	bfd6      	itet	le
 800bb94:	f1c1 0120 	rsble	r1, r1, #32
 800bb98:	4331      	orrgt	r1, r6
 800bb9a:	fa04 f101 	lslle.w	r1, r4, r1
 800bb9e:	ee07 1a90 	vmov	s15, r1
 800bba2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bba6:	3b01      	subs	r3, #1
 800bba8:	ee17 1a90 	vmov	r1, s15
 800bbac:	2501      	movs	r5, #1
 800bbae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bbb2:	e7a8      	b.n	800bb06 <_dtoa_r+0xf6>
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	1ad2      	subs	r2, r2, r3
 800bbb8:	1e53      	subs	r3, r2, #1
 800bbba:	9306      	str	r3, [sp, #24]
 800bbbc:	bf45      	ittet	mi
 800bbbe:	f1c2 0301 	rsbmi	r3, r2, #1
 800bbc2:	9305      	strmi	r3, [sp, #20]
 800bbc4:	2300      	movpl	r3, #0
 800bbc6:	2300      	movmi	r3, #0
 800bbc8:	bf4c      	ite	mi
 800bbca:	9306      	strmi	r3, [sp, #24]
 800bbcc:	9305      	strpl	r3, [sp, #20]
 800bbce:	f1b8 0f00 	cmp.w	r8, #0
 800bbd2:	910c      	str	r1, [sp, #48]	@ 0x30
 800bbd4:	db18      	blt.n	800bc08 <_dtoa_r+0x1f8>
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bbdc:	4443      	add	r3, r8
 800bbde:	9306      	str	r3, [sp, #24]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9a07      	ldr	r2, [sp, #28]
 800bbe4:	2a09      	cmp	r2, #9
 800bbe6:	d849      	bhi.n	800bc7c <_dtoa_r+0x26c>
 800bbe8:	2a05      	cmp	r2, #5
 800bbea:	bfc4      	itt	gt
 800bbec:	3a04      	subgt	r2, #4
 800bbee:	9207      	strgt	r2, [sp, #28]
 800bbf0:	9a07      	ldr	r2, [sp, #28]
 800bbf2:	f1a2 0202 	sub.w	r2, r2, #2
 800bbf6:	bfcc      	ite	gt
 800bbf8:	2400      	movgt	r4, #0
 800bbfa:	2401      	movle	r4, #1
 800bbfc:	2a03      	cmp	r2, #3
 800bbfe:	d848      	bhi.n	800bc92 <_dtoa_r+0x282>
 800bc00:	e8df f002 	tbb	[pc, r2]
 800bc04:	3a2c2e0b 	.word	0x3a2c2e0b
 800bc08:	9b05      	ldr	r3, [sp, #20]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	eba3 0308 	sub.w	r3, r3, r8
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc14:	f1c8 0300 	rsb	r3, r8, #0
 800bc18:	e7e3      	b.n	800bbe2 <_dtoa_r+0x1d2>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	9208      	str	r2, [sp, #32]
 800bc1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc20:	2a00      	cmp	r2, #0
 800bc22:	dc39      	bgt.n	800bc98 <_dtoa_r+0x288>
 800bc24:	f04f 0b01 	mov.w	fp, #1
 800bc28:	46da      	mov	sl, fp
 800bc2a:	465a      	mov	r2, fp
 800bc2c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bc30:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bc34:	2100      	movs	r1, #0
 800bc36:	2004      	movs	r0, #4
 800bc38:	f100 0614 	add.w	r6, r0, #20
 800bc3c:	4296      	cmp	r6, r2
 800bc3e:	d930      	bls.n	800bca2 <_dtoa_r+0x292>
 800bc40:	6079      	str	r1, [r7, #4]
 800bc42:	4648      	mov	r0, r9
 800bc44:	9304      	str	r3, [sp, #16]
 800bc46:	f000 fc83 	bl	800c550 <_Balloc>
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d146      	bne.n	800bce0 <_dtoa_r+0x2d0>
 800bc52:	4b22      	ldr	r3, [pc, #136]	@ (800bcdc <_dtoa_r+0x2cc>)
 800bc54:	4602      	mov	r2, r0
 800bc56:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc5a:	e6f2      	b.n	800ba42 <_dtoa_r+0x32>
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	e7dd      	b.n	800bc1c <_dtoa_r+0x20c>
 800bc60:	2200      	movs	r2, #0
 800bc62:	9208      	str	r2, [sp, #32]
 800bc64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc66:	eb08 0b02 	add.w	fp, r8, r2
 800bc6a:	f10b 0a01 	add.w	sl, fp, #1
 800bc6e:	4652      	mov	r2, sl
 800bc70:	2a01      	cmp	r2, #1
 800bc72:	bfb8      	it	lt
 800bc74:	2201      	movlt	r2, #1
 800bc76:	e7db      	b.n	800bc30 <_dtoa_r+0x220>
 800bc78:	2201      	movs	r2, #1
 800bc7a:	e7f2      	b.n	800bc62 <_dtoa_r+0x252>
 800bc7c:	2401      	movs	r4, #1
 800bc7e:	2200      	movs	r2, #0
 800bc80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bc84:	f04f 3bff 	mov.w	fp, #4294967295
 800bc88:	2100      	movs	r1, #0
 800bc8a:	46da      	mov	sl, fp
 800bc8c:	2212      	movs	r2, #18
 800bc8e:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc90:	e7ce      	b.n	800bc30 <_dtoa_r+0x220>
 800bc92:	2201      	movs	r2, #1
 800bc94:	9208      	str	r2, [sp, #32]
 800bc96:	e7f5      	b.n	800bc84 <_dtoa_r+0x274>
 800bc98:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800bc9c:	46da      	mov	sl, fp
 800bc9e:	465a      	mov	r2, fp
 800bca0:	e7c6      	b.n	800bc30 <_dtoa_r+0x220>
 800bca2:	3101      	adds	r1, #1
 800bca4:	0040      	lsls	r0, r0, #1
 800bca6:	e7c7      	b.n	800bc38 <_dtoa_r+0x228>
 800bca8:	636f4361 	.word	0x636f4361
 800bcac:	3fd287a7 	.word	0x3fd287a7
 800bcb0:	8b60c8b3 	.word	0x8b60c8b3
 800bcb4:	3fc68a28 	.word	0x3fc68a28
 800bcb8:	509f79fb 	.word	0x509f79fb
 800bcbc:	3fd34413 	.word	0x3fd34413
 800bcc0:	0801142b 	.word	0x0801142b
 800bcc4:	08011442 	.word	0x08011442
 800bcc8:	7ff00000 	.word	0x7ff00000
 800bccc:	08011427 	.word	0x08011427
 800bcd0:	080113f6 	.word	0x080113f6
 800bcd4:	080113f5 	.word	0x080113f5
 800bcd8:	08011538 	.word	0x08011538
 800bcdc:	0801149a 	.word	0x0801149a
 800bce0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bce4:	f1ba 0f0e 	cmp.w	sl, #14
 800bce8:	6010      	str	r0, [r2, #0]
 800bcea:	d86f      	bhi.n	800bdcc <_dtoa_r+0x3bc>
 800bcec:	2c00      	cmp	r4, #0
 800bcee:	d06d      	beq.n	800bdcc <_dtoa_r+0x3bc>
 800bcf0:	f1b8 0f00 	cmp.w	r8, #0
 800bcf4:	f340 80c2 	ble.w	800be7c <_dtoa_r+0x46c>
 800bcf8:	4aca      	ldr	r2, [pc, #808]	@ (800c024 <_dtoa_r+0x614>)
 800bcfa:	f008 010f 	and.w	r1, r8, #15
 800bcfe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bd02:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bd06:	ed92 7b00 	vldr	d7, [r2]
 800bd0a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bd0e:	f000 80a9 	beq.w	800be64 <_dtoa_r+0x454>
 800bd12:	4ac5      	ldr	r2, [pc, #788]	@ (800c028 <_dtoa_r+0x618>)
 800bd14:	ed92 6b08 	vldr	d6, [r2, #32]
 800bd18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bd1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bd20:	f001 010f 	and.w	r1, r1, #15
 800bd24:	2203      	movs	r2, #3
 800bd26:	48c0      	ldr	r0, [pc, #768]	@ (800c028 <_dtoa_r+0x618>)
 800bd28:	2900      	cmp	r1, #0
 800bd2a:	f040 809d 	bne.w	800be68 <_dtoa_r+0x458>
 800bd2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bd36:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd40:	2900      	cmp	r1, #0
 800bd42:	f000 80c1 	beq.w	800bec8 <_dtoa_r+0x4b8>
 800bd46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bd4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd52:	f140 80b9 	bpl.w	800bec8 <_dtoa_r+0x4b8>
 800bd56:	f1ba 0f00 	cmp.w	sl, #0
 800bd5a:	f000 80b5 	beq.w	800bec8 <_dtoa_r+0x4b8>
 800bd5e:	f1bb 0f00 	cmp.w	fp, #0
 800bd62:	dd31      	ble.n	800bdc8 <_dtoa_r+0x3b8>
 800bd64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bd68:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd70:	f108 31ff 	add.w	r1, r8, #4294967295
 800bd74:	9104      	str	r1, [sp, #16]
 800bd76:	3201      	adds	r2, #1
 800bd78:	465c      	mov	r4, fp
 800bd7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd7e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bd82:	ee07 2a90 	vmov	s15, r2
 800bd86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bd8a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bd8e:	ee15 2a90 	vmov	r2, s11
 800bd92:	ec51 0b15 	vmov	r0, r1, d5
 800bd96:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bd9a:	2c00      	cmp	r4, #0
 800bd9c:	f040 8098 	bne.w	800bed0 <_dtoa_r+0x4c0>
 800bda0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bda4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bda8:	ec41 0b17 	vmov	d7, r0, r1
 800bdac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb4:	f300 8261 	bgt.w	800c27a <_dtoa_r+0x86a>
 800bdb8:	eeb1 7b47 	vneg.f64	d7, d7
 800bdbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc4:	f100 80f5 	bmi.w	800bfb2 <_dtoa_r+0x5a2>
 800bdc8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	f2c0 812c 	blt.w	800c02c <_dtoa_r+0x61c>
 800bdd4:	f1b8 0f0e 	cmp.w	r8, #14
 800bdd8:	f300 8128 	bgt.w	800c02c <_dtoa_r+0x61c>
 800bddc:	4b91      	ldr	r3, [pc, #580]	@ (800c024 <_dtoa_r+0x614>)
 800bdde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bde2:	ed93 6b00 	vldr	d6, [r3]
 800bde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	da03      	bge.n	800bdf4 <_dtoa_r+0x3e4>
 800bdec:	f1ba 0f00 	cmp.w	sl, #0
 800bdf0:	f340 80d2 	ble.w	800bf98 <_dtoa_r+0x588>
 800bdf4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bdf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdfc:	463e      	mov	r6, r7
 800bdfe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800be02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800be06:	ee15 3a10 	vmov	r3, s10
 800be0a:	3330      	adds	r3, #48	@ 0x30
 800be0c:	f806 3b01 	strb.w	r3, [r6], #1
 800be10:	1bf3      	subs	r3, r6, r7
 800be12:	459a      	cmp	sl, r3
 800be14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800be18:	eea3 7b46 	vfms.f64	d7, d3, d6
 800be1c:	f040 80f8 	bne.w	800c010 <_dtoa_r+0x600>
 800be20:	ee37 7b07 	vadd.f64	d7, d7, d7
 800be24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2c:	f300 80dd 	bgt.w	800bfea <_dtoa_r+0x5da>
 800be30:	eeb4 7b46 	vcmp.f64	d7, d6
 800be34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be38:	d104      	bne.n	800be44 <_dtoa_r+0x434>
 800be3a:	ee15 3a10 	vmov	r3, s10
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	f100 80d3 	bmi.w	800bfea <_dtoa_r+0x5da>
 800be44:	9901      	ldr	r1, [sp, #4]
 800be46:	4648      	mov	r0, r9
 800be48:	f000 fbc2 	bl	800c5d0 <_Bfree>
 800be4c:	2300      	movs	r3, #0
 800be4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be50:	7033      	strb	r3, [r6, #0]
 800be52:	f108 0301 	add.w	r3, r8, #1
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 8304 	beq.w	800c468 <_dtoa_r+0xa58>
 800be60:	601e      	str	r6, [r3, #0]
 800be62:	e301      	b.n	800c468 <_dtoa_r+0xa58>
 800be64:	2202      	movs	r2, #2
 800be66:	e75e      	b.n	800bd26 <_dtoa_r+0x316>
 800be68:	07cc      	lsls	r4, r1, #31
 800be6a:	d504      	bpl.n	800be76 <_dtoa_r+0x466>
 800be6c:	ed90 6b00 	vldr	d6, [r0]
 800be70:	3201      	adds	r2, #1
 800be72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be76:	1049      	asrs	r1, r1, #1
 800be78:	3008      	adds	r0, #8
 800be7a:	e755      	b.n	800bd28 <_dtoa_r+0x318>
 800be7c:	d022      	beq.n	800bec4 <_dtoa_r+0x4b4>
 800be7e:	f1c8 0100 	rsb	r1, r8, #0
 800be82:	4a68      	ldr	r2, [pc, #416]	@ (800c024 <_dtoa_r+0x614>)
 800be84:	f001 000f 	and.w	r0, r1, #15
 800be88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800be8c:	ed92 7b00 	vldr	d7, [r2]
 800be90:	ee28 7b07 	vmul.f64	d7, d8, d7
 800be94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be98:	4863      	ldr	r0, [pc, #396]	@ (800c028 <_dtoa_r+0x618>)
 800be9a:	1109      	asrs	r1, r1, #4
 800be9c:	2400      	movs	r4, #0
 800be9e:	2202      	movs	r2, #2
 800bea0:	b929      	cbnz	r1, 800beae <_dtoa_r+0x49e>
 800bea2:	2c00      	cmp	r4, #0
 800bea4:	f43f af49 	beq.w	800bd3a <_dtoa_r+0x32a>
 800bea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800beac:	e745      	b.n	800bd3a <_dtoa_r+0x32a>
 800beae:	07ce      	lsls	r6, r1, #31
 800beb0:	d505      	bpl.n	800bebe <_dtoa_r+0x4ae>
 800beb2:	ed90 6b00 	vldr	d6, [r0]
 800beb6:	3201      	adds	r2, #1
 800beb8:	2401      	movs	r4, #1
 800beba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bebe:	1049      	asrs	r1, r1, #1
 800bec0:	3008      	adds	r0, #8
 800bec2:	e7ed      	b.n	800bea0 <_dtoa_r+0x490>
 800bec4:	2202      	movs	r2, #2
 800bec6:	e738      	b.n	800bd3a <_dtoa_r+0x32a>
 800bec8:	f8cd 8010 	str.w	r8, [sp, #16]
 800becc:	4654      	mov	r4, sl
 800bece:	e754      	b.n	800bd7a <_dtoa_r+0x36a>
 800bed0:	4a54      	ldr	r2, [pc, #336]	@ (800c024 <_dtoa_r+0x614>)
 800bed2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bed6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800beda:	9a08      	ldr	r2, [sp, #32]
 800bedc:	ec41 0b17 	vmov	d7, r0, r1
 800bee0:	443c      	add	r4, r7
 800bee2:	b34a      	cbz	r2, 800bf38 <_dtoa_r+0x528>
 800bee4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bee8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800beec:	463e      	mov	r6, r7
 800beee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bef2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bef6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800befa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800befe:	ee14 2a90 	vmov	r2, s9
 800bf02:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf06:	3230      	adds	r2, #48	@ 0x30
 800bf08:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf14:	f806 2b01 	strb.w	r2, [r6], #1
 800bf18:	d438      	bmi.n	800bf8c <_dtoa_r+0x57c>
 800bf1a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bf1e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bf22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf26:	d462      	bmi.n	800bfee <_dtoa_r+0x5de>
 800bf28:	42a6      	cmp	r6, r4
 800bf2a:	f43f af4d 	beq.w	800bdc8 <_dtoa_r+0x3b8>
 800bf2e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bf32:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf36:	e7e0      	b.n	800befa <_dtoa_r+0x4ea>
 800bf38:	4621      	mov	r1, r4
 800bf3a:	463e      	mov	r6, r7
 800bf3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf40:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bf44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf48:	ee14 2a90 	vmov	r2, s9
 800bf4c:	3230      	adds	r2, #48	@ 0x30
 800bf4e:	f806 2b01 	strb.w	r2, [r6], #1
 800bf52:	42a6      	cmp	r6, r4
 800bf54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf58:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf5c:	d119      	bne.n	800bf92 <_dtoa_r+0x582>
 800bf5e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bf62:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bf66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6e:	dc3e      	bgt.n	800bfee <_dtoa_r+0x5de>
 800bf70:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bf74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7c:	f57f af24 	bpl.w	800bdc8 <_dtoa_r+0x3b8>
 800bf80:	460e      	mov	r6, r1
 800bf82:	3901      	subs	r1, #1
 800bf84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf88:	2b30      	cmp	r3, #48	@ 0x30
 800bf8a:	d0f9      	beq.n	800bf80 <_dtoa_r+0x570>
 800bf8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bf90:	e758      	b.n	800be44 <_dtoa_r+0x434>
 800bf92:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf96:	e7d5      	b.n	800bf44 <_dtoa_r+0x534>
 800bf98:	d10b      	bne.n	800bfb2 <_dtoa_r+0x5a2>
 800bf9a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bf9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bfa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfae:	f2c0 8161 	blt.w	800c274 <_dtoa_r+0x864>
 800bfb2:	2400      	movs	r4, #0
 800bfb4:	4625      	mov	r5, r4
 800bfb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb8:	43db      	mvns	r3, r3
 800bfba:	9304      	str	r3, [sp, #16]
 800bfbc:	463e      	mov	r6, r7
 800bfbe:	f04f 0800 	mov.w	r8, #0
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4648      	mov	r0, r9
 800bfc6:	f000 fb03 	bl	800c5d0 <_Bfree>
 800bfca:	2d00      	cmp	r5, #0
 800bfcc:	d0de      	beq.n	800bf8c <_dtoa_r+0x57c>
 800bfce:	f1b8 0f00 	cmp.w	r8, #0
 800bfd2:	d005      	beq.n	800bfe0 <_dtoa_r+0x5d0>
 800bfd4:	45a8      	cmp	r8, r5
 800bfd6:	d003      	beq.n	800bfe0 <_dtoa_r+0x5d0>
 800bfd8:	4641      	mov	r1, r8
 800bfda:	4648      	mov	r0, r9
 800bfdc:	f000 faf8 	bl	800c5d0 <_Bfree>
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4648      	mov	r0, r9
 800bfe4:	f000 faf4 	bl	800c5d0 <_Bfree>
 800bfe8:	e7d0      	b.n	800bf8c <_dtoa_r+0x57c>
 800bfea:	f8cd 8010 	str.w	r8, [sp, #16]
 800bfee:	4633      	mov	r3, r6
 800bff0:	461e      	mov	r6, r3
 800bff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bff6:	2a39      	cmp	r2, #57	@ 0x39
 800bff8:	d106      	bne.n	800c008 <_dtoa_r+0x5f8>
 800bffa:	429f      	cmp	r7, r3
 800bffc:	d1f8      	bne.n	800bff0 <_dtoa_r+0x5e0>
 800bffe:	9a04      	ldr	r2, [sp, #16]
 800c000:	3201      	adds	r2, #1
 800c002:	9204      	str	r2, [sp, #16]
 800c004:	2230      	movs	r2, #48	@ 0x30
 800c006:	703a      	strb	r2, [r7, #0]
 800c008:	781a      	ldrb	r2, [r3, #0]
 800c00a:	3201      	adds	r2, #1
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	e7bd      	b.n	800bf8c <_dtoa_r+0x57c>
 800c010:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c014:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01c:	f47f aeef 	bne.w	800bdfe <_dtoa_r+0x3ee>
 800c020:	e710      	b.n	800be44 <_dtoa_r+0x434>
 800c022:	bf00      	nop
 800c024:	08011538 	.word	0x08011538
 800c028:	08011510 	.word	0x08011510
 800c02c:	9908      	ldr	r1, [sp, #32]
 800c02e:	2900      	cmp	r1, #0
 800c030:	f000 80e3 	beq.w	800c1fa <_dtoa_r+0x7ea>
 800c034:	9907      	ldr	r1, [sp, #28]
 800c036:	2901      	cmp	r1, #1
 800c038:	f300 80c8 	bgt.w	800c1cc <_dtoa_r+0x7bc>
 800c03c:	2d00      	cmp	r5, #0
 800c03e:	f000 80c1 	beq.w	800c1c4 <_dtoa_r+0x7b4>
 800c042:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c046:	9e05      	ldr	r6, [sp, #20]
 800c048:	461c      	mov	r4, r3
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	9b05      	ldr	r3, [sp, #20]
 800c04e:	4413      	add	r3, r2
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	9b06      	ldr	r3, [sp, #24]
 800c054:	2101      	movs	r1, #1
 800c056:	4413      	add	r3, r2
 800c058:	4648      	mov	r0, r9
 800c05a:	9306      	str	r3, [sp, #24]
 800c05c:	f000 fbb6 	bl	800c7cc <__i2b>
 800c060:	9b04      	ldr	r3, [sp, #16]
 800c062:	4605      	mov	r5, r0
 800c064:	b166      	cbz	r6, 800c080 <_dtoa_r+0x670>
 800c066:	9a06      	ldr	r2, [sp, #24]
 800c068:	2a00      	cmp	r2, #0
 800c06a:	dd09      	ble.n	800c080 <_dtoa_r+0x670>
 800c06c:	42b2      	cmp	r2, r6
 800c06e:	9905      	ldr	r1, [sp, #20]
 800c070:	bfa8      	it	ge
 800c072:	4632      	movge	r2, r6
 800c074:	1a89      	subs	r1, r1, r2
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	9906      	ldr	r1, [sp, #24]
 800c07a:	1ab6      	subs	r6, r6, r2
 800c07c:	1a8a      	subs	r2, r1, r2
 800c07e:	9206      	str	r2, [sp, #24]
 800c080:	b1fb      	cbz	r3, 800c0c2 <_dtoa_r+0x6b2>
 800c082:	9a08      	ldr	r2, [sp, #32]
 800c084:	2a00      	cmp	r2, #0
 800c086:	f000 80bc 	beq.w	800c202 <_dtoa_r+0x7f2>
 800c08a:	b19c      	cbz	r4, 800c0b4 <_dtoa_r+0x6a4>
 800c08c:	4629      	mov	r1, r5
 800c08e:	4622      	mov	r2, r4
 800c090:	4648      	mov	r0, r9
 800c092:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c094:	f000 fc5a 	bl	800c94c <__pow5mult>
 800c098:	9a01      	ldr	r2, [sp, #4]
 800c09a:	4601      	mov	r1, r0
 800c09c:	4605      	mov	r5, r0
 800c09e:	4648      	mov	r0, r9
 800c0a0:	f000 fbaa 	bl	800c7f8 <__multiply>
 800c0a4:	9901      	ldr	r1, [sp, #4]
 800c0a6:	9004      	str	r0, [sp, #16]
 800c0a8:	4648      	mov	r0, r9
 800c0aa:	f000 fa91 	bl	800c5d0 <_Bfree>
 800c0ae:	9a04      	ldr	r2, [sp, #16]
 800c0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b2:	9201      	str	r2, [sp, #4]
 800c0b4:	1b1a      	subs	r2, r3, r4
 800c0b6:	d004      	beq.n	800c0c2 <_dtoa_r+0x6b2>
 800c0b8:	9901      	ldr	r1, [sp, #4]
 800c0ba:	4648      	mov	r0, r9
 800c0bc:	f000 fc46 	bl	800c94c <__pow5mult>
 800c0c0:	9001      	str	r0, [sp, #4]
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	4648      	mov	r0, r9
 800c0c6:	f000 fb81 	bl	800c7cc <__i2b>
 800c0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 81d0 	beq.w	800c474 <_dtoa_r+0xa64>
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	4648      	mov	r0, r9
 800c0da:	f000 fc37 	bl	800c94c <__pow5mult>
 800c0de:	9b07      	ldr	r3, [sp, #28]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	f300 8095 	bgt.w	800c212 <_dtoa_r+0x802>
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f040 808b 	bne.w	800c206 <_dtoa_r+0x7f6>
 800c0f0:	9b03      	ldr	r3, [sp, #12]
 800c0f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	f040 8087 	bne.w	800c20a <_dtoa_r+0x7fa>
 800c0fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c100:	0d12      	lsrs	r2, r2, #20
 800c102:	0512      	lsls	r2, r2, #20
 800c104:	2a00      	cmp	r2, #0
 800c106:	f000 8082 	beq.w	800c20e <_dtoa_r+0x7fe>
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	3301      	adds	r3, #1
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	9b06      	ldr	r3, [sp, #24]
 800c112:	3301      	adds	r3, #1
 800c114:	9306      	str	r3, [sp, #24]
 800c116:	2301      	movs	r3, #1
 800c118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 81af 	beq.w	800c480 <_dtoa_r+0xa70>
 800c122:	6922      	ldr	r2, [r4, #16]
 800c124:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c128:	6910      	ldr	r0, [r2, #16]
 800c12a:	f000 fb03 	bl	800c734 <__hi0bits>
 800c12e:	f1c0 0020 	rsb	r0, r0, #32
 800c132:	9b06      	ldr	r3, [sp, #24]
 800c134:	4418      	add	r0, r3
 800c136:	f010 001f 	ands.w	r0, r0, #31
 800c13a:	d076      	beq.n	800c22a <_dtoa_r+0x81a>
 800c13c:	f1c0 0220 	rsb	r2, r0, #32
 800c140:	2a04      	cmp	r2, #4
 800c142:	dd69      	ble.n	800c218 <_dtoa_r+0x808>
 800c144:	9b05      	ldr	r3, [sp, #20]
 800c146:	f1c0 001c 	rsb	r0, r0, #28
 800c14a:	4403      	add	r3, r0
 800c14c:	9305      	str	r3, [sp, #20]
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	4406      	add	r6, r0
 800c152:	4403      	add	r3, r0
 800c154:	9306      	str	r3, [sp, #24]
 800c156:	9b05      	ldr	r3, [sp, #20]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	dd05      	ble.n	800c168 <_dtoa_r+0x758>
 800c15c:	9901      	ldr	r1, [sp, #4]
 800c15e:	461a      	mov	r2, r3
 800c160:	4648      	mov	r0, r9
 800c162:	f000 fc4d 	bl	800ca00 <__lshift>
 800c166:	9001      	str	r0, [sp, #4]
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dd05      	ble.n	800c17a <_dtoa_r+0x76a>
 800c16e:	4621      	mov	r1, r4
 800c170:	461a      	mov	r2, r3
 800c172:	4648      	mov	r0, r9
 800c174:	f000 fc44 	bl	800ca00 <__lshift>
 800c178:	4604      	mov	r4, r0
 800c17a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d056      	beq.n	800c22e <_dtoa_r+0x81e>
 800c180:	9801      	ldr	r0, [sp, #4]
 800c182:	4621      	mov	r1, r4
 800c184:	f000 fca8 	bl	800cad8 <__mcmp>
 800c188:	2800      	cmp	r0, #0
 800c18a:	da50      	bge.n	800c22e <_dtoa_r+0x81e>
 800c18c:	f108 33ff 	add.w	r3, r8, #4294967295
 800c190:	9304      	str	r3, [sp, #16]
 800c192:	9901      	ldr	r1, [sp, #4]
 800c194:	2300      	movs	r3, #0
 800c196:	220a      	movs	r2, #10
 800c198:	4648      	mov	r0, r9
 800c19a:	f000 fa3b 	bl	800c614 <__multadd>
 800c19e:	9b08      	ldr	r3, [sp, #32]
 800c1a0:	9001      	str	r0, [sp, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 816e 	beq.w	800c484 <_dtoa_r+0xa74>
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	4648      	mov	r0, r9
 800c1b0:	f000 fa30 	bl	800c614 <__multadd>
 800c1b4:	f1bb 0f00 	cmp.w	fp, #0
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	dc64      	bgt.n	800c286 <_dtoa_r+0x876>
 800c1bc:	9b07      	ldr	r3, [sp, #28]
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	dc3e      	bgt.n	800c240 <_dtoa_r+0x830>
 800c1c2:	e060      	b.n	800c286 <_dtoa_r+0x876>
 800c1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c1ca:	e73c      	b.n	800c046 <_dtoa_r+0x636>
 800c1cc:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	bfbf      	itttt	lt
 800c1d4:	1ae2      	sublt	r2, r4, r3
 800c1d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c1d8:	189b      	addlt	r3, r3, r2
 800c1da:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c1dc:	bfae      	itee	ge
 800c1de:	1b1c      	subge	r4, r3, r4
 800c1e0:	4623      	movlt	r3, r4
 800c1e2:	2400      	movlt	r4, #0
 800c1e4:	f1ba 0f00 	cmp.w	sl, #0
 800c1e8:	bfb5      	itete	lt
 800c1ea:	9a05      	ldrlt	r2, [sp, #20]
 800c1ec:	9e05      	ldrge	r6, [sp, #20]
 800c1ee:	eba2 060a 	sublt.w	r6, r2, sl
 800c1f2:	4652      	movge	r2, sl
 800c1f4:	bfb8      	it	lt
 800c1f6:	2200      	movlt	r2, #0
 800c1f8:	e727      	b.n	800c04a <_dtoa_r+0x63a>
 800c1fa:	9e05      	ldr	r6, [sp, #20]
 800c1fc:	9d08      	ldr	r5, [sp, #32]
 800c1fe:	461c      	mov	r4, r3
 800c200:	e730      	b.n	800c064 <_dtoa_r+0x654>
 800c202:	461a      	mov	r2, r3
 800c204:	e758      	b.n	800c0b8 <_dtoa_r+0x6a8>
 800c206:	2300      	movs	r3, #0
 800c208:	e786      	b.n	800c118 <_dtoa_r+0x708>
 800c20a:	9b02      	ldr	r3, [sp, #8]
 800c20c:	e784      	b.n	800c118 <_dtoa_r+0x708>
 800c20e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c210:	e783      	b.n	800c11a <_dtoa_r+0x70a>
 800c212:	2300      	movs	r3, #0
 800c214:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c216:	e784      	b.n	800c122 <_dtoa_r+0x712>
 800c218:	d09d      	beq.n	800c156 <_dtoa_r+0x746>
 800c21a:	9b05      	ldr	r3, [sp, #20]
 800c21c:	321c      	adds	r2, #28
 800c21e:	4413      	add	r3, r2
 800c220:	9305      	str	r3, [sp, #20]
 800c222:	9b06      	ldr	r3, [sp, #24]
 800c224:	4416      	add	r6, r2
 800c226:	4413      	add	r3, r2
 800c228:	e794      	b.n	800c154 <_dtoa_r+0x744>
 800c22a:	4602      	mov	r2, r0
 800c22c:	e7f5      	b.n	800c21a <_dtoa_r+0x80a>
 800c22e:	f1ba 0f00 	cmp.w	sl, #0
 800c232:	f8cd 8010 	str.w	r8, [sp, #16]
 800c236:	46d3      	mov	fp, sl
 800c238:	dc21      	bgt.n	800c27e <_dtoa_r+0x86e>
 800c23a:	9b07      	ldr	r3, [sp, #28]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	dd1e      	ble.n	800c27e <_dtoa_r+0x86e>
 800c240:	f1bb 0f00 	cmp.w	fp, #0
 800c244:	f47f aeb7 	bne.w	800bfb6 <_dtoa_r+0x5a6>
 800c248:	4621      	mov	r1, r4
 800c24a:	465b      	mov	r3, fp
 800c24c:	2205      	movs	r2, #5
 800c24e:	4648      	mov	r0, r9
 800c250:	f000 f9e0 	bl	800c614 <__multadd>
 800c254:	4601      	mov	r1, r0
 800c256:	4604      	mov	r4, r0
 800c258:	9801      	ldr	r0, [sp, #4]
 800c25a:	f000 fc3d 	bl	800cad8 <__mcmp>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f77f aea9 	ble.w	800bfb6 <_dtoa_r+0x5a6>
 800c264:	463e      	mov	r6, r7
 800c266:	2331      	movs	r3, #49	@ 0x31
 800c268:	f806 3b01 	strb.w	r3, [r6], #1
 800c26c:	9b04      	ldr	r3, [sp, #16]
 800c26e:	3301      	adds	r3, #1
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	e6a4      	b.n	800bfbe <_dtoa_r+0x5ae>
 800c274:	f8cd 8010 	str.w	r8, [sp, #16]
 800c278:	4654      	mov	r4, sl
 800c27a:	4625      	mov	r5, r4
 800c27c:	e7f2      	b.n	800c264 <_dtoa_r+0x854>
 800c27e:	9b08      	ldr	r3, [sp, #32]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 8103 	beq.w	800c48c <_dtoa_r+0xa7c>
 800c286:	2e00      	cmp	r6, #0
 800c288:	dd05      	ble.n	800c296 <_dtoa_r+0x886>
 800c28a:	4629      	mov	r1, r5
 800c28c:	4632      	mov	r2, r6
 800c28e:	4648      	mov	r0, r9
 800c290:	f000 fbb6 	bl	800ca00 <__lshift>
 800c294:	4605      	mov	r5, r0
 800c296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d058      	beq.n	800c34e <_dtoa_r+0x93e>
 800c29c:	6869      	ldr	r1, [r5, #4]
 800c29e:	4648      	mov	r0, r9
 800c2a0:	f000 f956 	bl	800c550 <_Balloc>
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	b928      	cbnz	r0, 800c2b4 <_dtoa_r+0x8a4>
 800c2a8:	4b82      	ldr	r3, [pc, #520]	@ (800c4b4 <_dtoa_r+0xaa4>)
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2b0:	f7ff bbc7 	b.w	800ba42 <_dtoa_r+0x32>
 800c2b4:	692a      	ldr	r2, [r5, #16]
 800c2b6:	3202      	adds	r2, #2
 800c2b8:	0092      	lsls	r2, r2, #2
 800c2ba:	f105 010c 	add.w	r1, r5, #12
 800c2be:	300c      	adds	r0, #12
 800c2c0:	f7ff faff 	bl	800b8c2 <memcpy>
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4648      	mov	r0, r9
 800c2ca:	f000 fb99 	bl	800ca00 <__lshift>
 800c2ce:	1c7b      	adds	r3, r7, #1
 800c2d0:	9305      	str	r3, [sp, #20]
 800c2d2:	eb07 030b 	add.w	r3, r7, fp
 800c2d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d8:	9b02      	ldr	r3, [sp, #8]
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	46a8      	mov	r8, r5
 800c2e0:	9308      	str	r3, [sp, #32]
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	9b05      	ldr	r3, [sp, #20]
 800c2e6:	9801      	ldr	r0, [sp, #4]
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2ee:	f7ff fb04 	bl	800b8fa <quorem>
 800c2f2:	4641      	mov	r1, r8
 800c2f4:	9002      	str	r0, [sp, #8]
 800c2f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c2fa:	9801      	ldr	r0, [sp, #4]
 800c2fc:	f000 fbec 	bl	800cad8 <__mcmp>
 800c300:	462a      	mov	r2, r5
 800c302:	9006      	str	r0, [sp, #24]
 800c304:	4621      	mov	r1, r4
 800c306:	4648      	mov	r0, r9
 800c308:	f000 fc02 	bl	800cb10 <__mdiff>
 800c30c:	68c2      	ldr	r2, [r0, #12]
 800c30e:	4606      	mov	r6, r0
 800c310:	b9fa      	cbnz	r2, 800c352 <_dtoa_r+0x942>
 800c312:	4601      	mov	r1, r0
 800c314:	9801      	ldr	r0, [sp, #4]
 800c316:	f000 fbdf 	bl	800cad8 <__mcmp>
 800c31a:	4602      	mov	r2, r0
 800c31c:	4631      	mov	r1, r6
 800c31e:	4648      	mov	r0, r9
 800c320:	920a      	str	r2, [sp, #40]	@ 0x28
 800c322:	f000 f955 	bl	800c5d0 <_Bfree>
 800c326:	9b07      	ldr	r3, [sp, #28]
 800c328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c32a:	9e05      	ldr	r6, [sp, #20]
 800c32c:	ea43 0102 	orr.w	r1, r3, r2
 800c330:	9b08      	ldr	r3, [sp, #32]
 800c332:	4319      	orrs	r1, r3
 800c334:	d10f      	bne.n	800c356 <_dtoa_r+0x946>
 800c336:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c33a:	d028      	beq.n	800c38e <_dtoa_r+0x97e>
 800c33c:	9b06      	ldr	r3, [sp, #24]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dd02      	ble.n	800c348 <_dtoa_r+0x938>
 800c342:	9b02      	ldr	r3, [sp, #8]
 800c344:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c348:	f88b a000 	strb.w	sl, [fp]
 800c34c:	e639      	b.n	800bfc2 <_dtoa_r+0x5b2>
 800c34e:	4628      	mov	r0, r5
 800c350:	e7bd      	b.n	800c2ce <_dtoa_r+0x8be>
 800c352:	2201      	movs	r2, #1
 800c354:	e7e2      	b.n	800c31c <_dtoa_r+0x90c>
 800c356:	9b06      	ldr	r3, [sp, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	db04      	blt.n	800c366 <_dtoa_r+0x956>
 800c35c:	9907      	ldr	r1, [sp, #28]
 800c35e:	430b      	orrs	r3, r1
 800c360:	9908      	ldr	r1, [sp, #32]
 800c362:	430b      	orrs	r3, r1
 800c364:	d120      	bne.n	800c3a8 <_dtoa_r+0x998>
 800c366:	2a00      	cmp	r2, #0
 800c368:	ddee      	ble.n	800c348 <_dtoa_r+0x938>
 800c36a:	9901      	ldr	r1, [sp, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	4648      	mov	r0, r9
 800c370:	f000 fb46 	bl	800ca00 <__lshift>
 800c374:	4621      	mov	r1, r4
 800c376:	9001      	str	r0, [sp, #4]
 800c378:	f000 fbae 	bl	800cad8 <__mcmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dc03      	bgt.n	800c388 <_dtoa_r+0x978>
 800c380:	d1e2      	bne.n	800c348 <_dtoa_r+0x938>
 800c382:	f01a 0f01 	tst.w	sl, #1
 800c386:	d0df      	beq.n	800c348 <_dtoa_r+0x938>
 800c388:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c38c:	d1d9      	bne.n	800c342 <_dtoa_r+0x932>
 800c38e:	2339      	movs	r3, #57	@ 0x39
 800c390:	f88b 3000 	strb.w	r3, [fp]
 800c394:	4633      	mov	r3, r6
 800c396:	461e      	mov	r6, r3
 800c398:	3b01      	subs	r3, #1
 800c39a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c39e:	2a39      	cmp	r2, #57	@ 0x39
 800c3a0:	d053      	beq.n	800c44a <_dtoa_r+0xa3a>
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e60c      	b.n	800bfc2 <_dtoa_r+0x5b2>
 800c3a8:	2a00      	cmp	r2, #0
 800c3aa:	dd07      	ble.n	800c3bc <_dtoa_r+0x9ac>
 800c3ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c3b0:	d0ed      	beq.n	800c38e <_dtoa_r+0x97e>
 800c3b2:	f10a 0301 	add.w	r3, sl, #1
 800c3b6:	f88b 3000 	strb.w	r3, [fp]
 800c3ba:	e602      	b.n	800bfc2 <_dtoa_r+0x5b2>
 800c3bc:	9b05      	ldr	r3, [sp, #20]
 800c3be:	9a05      	ldr	r2, [sp, #20]
 800c3c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d029      	beq.n	800c41e <_dtoa_r+0xa0e>
 800c3ca:	9901      	ldr	r1, [sp, #4]
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	220a      	movs	r2, #10
 800c3d0:	4648      	mov	r0, r9
 800c3d2:	f000 f91f 	bl	800c614 <__multadd>
 800c3d6:	45a8      	cmp	r8, r5
 800c3d8:	9001      	str	r0, [sp, #4]
 800c3da:	f04f 0300 	mov.w	r3, #0
 800c3de:	f04f 020a 	mov.w	r2, #10
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	4648      	mov	r0, r9
 800c3e6:	d107      	bne.n	800c3f8 <_dtoa_r+0x9e8>
 800c3e8:	f000 f914 	bl	800c614 <__multadd>
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	9b05      	ldr	r3, [sp, #20]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	9305      	str	r3, [sp, #20]
 800c3f6:	e775      	b.n	800c2e4 <_dtoa_r+0x8d4>
 800c3f8:	f000 f90c 	bl	800c614 <__multadd>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4680      	mov	r8, r0
 800c400:	2300      	movs	r3, #0
 800c402:	220a      	movs	r2, #10
 800c404:	4648      	mov	r0, r9
 800c406:	f000 f905 	bl	800c614 <__multadd>
 800c40a:	4605      	mov	r5, r0
 800c40c:	e7f0      	b.n	800c3f0 <_dtoa_r+0x9e0>
 800c40e:	f1bb 0f00 	cmp.w	fp, #0
 800c412:	bfcc      	ite	gt
 800c414:	465e      	movgt	r6, fp
 800c416:	2601      	movle	r6, #1
 800c418:	443e      	add	r6, r7
 800c41a:	f04f 0800 	mov.w	r8, #0
 800c41e:	9901      	ldr	r1, [sp, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	4648      	mov	r0, r9
 800c424:	f000 faec 	bl	800ca00 <__lshift>
 800c428:	4621      	mov	r1, r4
 800c42a:	9001      	str	r0, [sp, #4]
 800c42c:	f000 fb54 	bl	800cad8 <__mcmp>
 800c430:	2800      	cmp	r0, #0
 800c432:	dcaf      	bgt.n	800c394 <_dtoa_r+0x984>
 800c434:	d102      	bne.n	800c43c <_dtoa_r+0xa2c>
 800c436:	f01a 0f01 	tst.w	sl, #1
 800c43a:	d1ab      	bne.n	800c394 <_dtoa_r+0x984>
 800c43c:	4633      	mov	r3, r6
 800c43e:	461e      	mov	r6, r3
 800c440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c444:	2a30      	cmp	r2, #48	@ 0x30
 800c446:	d0fa      	beq.n	800c43e <_dtoa_r+0xa2e>
 800c448:	e5bb      	b.n	800bfc2 <_dtoa_r+0x5b2>
 800c44a:	429f      	cmp	r7, r3
 800c44c:	d1a3      	bne.n	800c396 <_dtoa_r+0x986>
 800c44e:	9b04      	ldr	r3, [sp, #16]
 800c450:	3301      	adds	r3, #1
 800c452:	9304      	str	r3, [sp, #16]
 800c454:	2331      	movs	r3, #49	@ 0x31
 800c456:	703b      	strb	r3, [r7, #0]
 800c458:	e5b3      	b.n	800bfc2 <_dtoa_r+0x5b2>
 800c45a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c45c:	4f16      	ldr	r7, [pc, #88]	@ (800c4b8 <_dtoa_r+0xaa8>)
 800c45e:	b11b      	cbz	r3, 800c468 <_dtoa_r+0xa58>
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	4638      	mov	r0, r7
 800c46a:	b011      	add	sp, #68	@ 0x44
 800c46c:	ecbd 8b02 	vpop	{d8}
 800c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	2b01      	cmp	r3, #1
 800c478:	f77f ae36 	ble.w	800c0e8 <_dtoa_r+0x6d8>
 800c47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c47e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c480:	2001      	movs	r0, #1
 800c482:	e656      	b.n	800c132 <_dtoa_r+0x722>
 800c484:	f1bb 0f00 	cmp.w	fp, #0
 800c488:	f77f aed7 	ble.w	800c23a <_dtoa_r+0x82a>
 800c48c:	463e      	mov	r6, r7
 800c48e:	9801      	ldr	r0, [sp, #4]
 800c490:	4621      	mov	r1, r4
 800c492:	f7ff fa32 	bl	800b8fa <quorem>
 800c496:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c49a:	f806 ab01 	strb.w	sl, [r6], #1
 800c49e:	1bf2      	subs	r2, r6, r7
 800c4a0:	4593      	cmp	fp, r2
 800c4a2:	ddb4      	ble.n	800c40e <_dtoa_r+0x9fe>
 800c4a4:	9901      	ldr	r1, [sp, #4]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	220a      	movs	r2, #10
 800c4aa:	4648      	mov	r0, r9
 800c4ac:	f000 f8b2 	bl	800c614 <__multadd>
 800c4b0:	9001      	str	r0, [sp, #4]
 800c4b2:	e7ec      	b.n	800c48e <_dtoa_r+0xa7e>
 800c4b4:	0801149a 	.word	0x0801149a
 800c4b8:	0801141e 	.word	0x0801141e

0800c4bc <_free_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4605      	mov	r5, r0
 800c4c0:	2900      	cmp	r1, #0
 800c4c2:	d041      	beq.n	800c548 <_free_r+0x8c>
 800c4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c8:	1f0c      	subs	r4, r1, #4
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	bfb8      	it	lt
 800c4ce:	18e4      	addlt	r4, r4, r3
 800c4d0:	f7fd ffd6 	bl	800a480 <__malloc_lock>
 800c4d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c54c <_free_r+0x90>)
 800c4d6:	6813      	ldr	r3, [r2, #0]
 800c4d8:	b933      	cbnz	r3, 800c4e8 <_free_r+0x2c>
 800c4da:	6063      	str	r3, [r4, #4]
 800c4dc:	6014      	str	r4, [r2, #0]
 800c4de:	4628      	mov	r0, r5
 800c4e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4e4:	f7fd bfd2 	b.w	800a48c <__malloc_unlock>
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	d908      	bls.n	800c4fe <_free_r+0x42>
 800c4ec:	6820      	ldr	r0, [r4, #0]
 800c4ee:	1821      	adds	r1, r4, r0
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	bf01      	itttt	eq
 800c4f4:	6819      	ldreq	r1, [r3, #0]
 800c4f6:	685b      	ldreq	r3, [r3, #4]
 800c4f8:	1809      	addeq	r1, r1, r0
 800c4fa:	6021      	streq	r1, [r4, #0]
 800c4fc:	e7ed      	b.n	800c4da <_free_r+0x1e>
 800c4fe:	461a      	mov	r2, r3
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	b10b      	cbz	r3, 800c508 <_free_r+0x4c>
 800c504:	42a3      	cmp	r3, r4
 800c506:	d9fa      	bls.n	800c4fe <_free_r+0x42>
 800c508:	6811      	ldr	r1, [r2, #0]
 800c50a:	1850      	adds	r0, r2, r1
 800c50c:	42a0      	cmp	r0, r4
 800c50e:	d10b      	bne.n	800c528 <_free_r+0x6c>
 800c510:	6820      	ldr	r0, [r4, #0]
 800c512:	4401      	add	r1, r0
 800c514:	1850      	adds	r0, r2, r1
 800c516:	4283      	cmp	r3, r0
 800c518:	6011      	str	r1, [r2, #0]
 800c51a:	d1e0      	bne.n	800c4de <_free_r+0x22>
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	6053      	str	r3, [r2, #4]
 800c522:	4408      	add	r0, r1
 800c524:	6010      	str	r0, [r2, #0]
 800c526:	e7da      	b.n	800c4de <_free_r+0x22>
 800c528:	d902      	bls.n	800c530 <_free_r+0x74>
 800c52a:	230c      	movs	r3, #12
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	e7d6      	b.n	800c4de <_free_r+0x22>
 800c530:	6820      	ldr	r0, [r4, #0]
 800c532:	1821      	adds	r1, r4, r0
 800c534:	428b      	cmp	r3, r1
 800c536:	bf04      	itt	eq
 800c538:	6819      	ldreq	r1, [r3, #0]
 800c53a:	685b      	ldreq	r3, [r3, #4]
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	bf04      	itt	eq
 800c540:	1809      	addeq	r1, r1, r0
 800c542:	6021      	streq	r1, [r4, #0]
 800c544:	6054      	str	r4, [r2, #4]
 800c546:	e7ca      	b.n	800c4de <_free_r+0x22>
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	2400688c 	.word	0x2400688c

0800c550 <_Balloc>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	69c6      	ldr	r6, [r0, #28]
 800c554:	4604      	mov	r4, r0
 800c556:	460d      	mov	r5, r1
 800c558:	b976      	cbnz	r6, 800c578 <_Balloc+0x28>
 800c55a:	2010      	movs	r0, #16
 800c55c:	f7fd fee6 	bl	800a32c <malloc>
 800c560:	4602      	mov	r2, r0
 800c562:	61e0      	str	r0, [r4, #28]
 800c564:	b920      	cbnz	r0, 800c570 <_Balloc+0x20>
 800c566:	4b18      	ldr	r3, [pc, #96]	@ (800c5c8 <_Balloc+0x78>)
 800c568:	4818      	ldr	r0, [pc, #96]	@ (800c5cc <_Balloc+0x7c>)
 800c56a:	216b      	movs	r1, #107	@ 0x6b
 800c56c:	f7fd feac 	bl	800a2c8 <__assert_func>
 800c570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c574:	6006      	str	r6, [r0, #0]
 800c576:	60c6      	str	r6, [r0, #12]
 800c578:	69e6      	ldr	r6, [r4, #28]
 800c57a:	68f3      	ldr	r3, [r6, #12]
 800c57c:	b183      	cbz	r3, 800c5a0 <_Balloc+0x50>
 800c57e:	69e3      	ldr	r3, [r4, #28]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c586:	b9b8      	cbnz	r0, 800c5b8 <_Balloc+0x68>
 800c588:	2101      	movs	r1, #1
 800c58a:	fa01 f605 	lsl.w	r6, r1, r5
 800c58e:	1d72      	adds	r2, r6, #5
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	4620      	mov	r0, r4
 800c594:	f7fd feb6 	bl	800a304 <_calloc_r>
 800c598:	b160      	cbz	r0, 800c5b4 <_Balloc+0x64>
 800c59a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c59e:	e00e      	b.n	800c5be <_Balloc+0x6e>
 800c5a0:	2221      	movs	r2, #33	@ 0x21
 800c5a2:	2104      	movs	r1, #4
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f7fd fead 	bl	800a304 <_calloc_r>
 800c5aa:	69e3      	ldr	r3, [r4, #28]
 800c5ac:	60f0      	str	r0, [r6, #12]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e4      	bne.n	800c57e <_Balloc+0x2e>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	6802      	ldr	r2, [r0, #0]
 800c5ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5c4:	e7f7      	b.n	800c5b6 <_Balloc+0x66>
 800c5c6:	bf00      	nop
 800c5c8:	0801142b 	.word	0x0801142b
 800c5cc:	080114ab 	.word	0x080114ab

0800c5d0 <_Bfree>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	69c6      	ldr	r6, [r0, #28]
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	b976      	cbnz	r6, 800c5f8 <_Bfree+0x28>
 800c5da:	2010      	movs	r0, #16
 800c5dc:	f7fd fea6 	bl	800a32c <malloc>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	61e8      	str	r0, [r5, #28]
 800c5e4:	b920      	cbnz	r0, 800c5f0 <_Bfree+0x20>
 800c5e6:	4b09      	ldr	r3, [pc, #36]	@ (800c60c <_Bfree+0x3c>)
 800c5e8:	4809      	ldr	r0, [pc, #36]	@ (800c610 <_Bfree+0x40>)
 800c5ea:	218f      	movs	r1, #143	@ 0x8f
 800c5ec:	f7fd fe6c 	bl	800a2c8 <__assert_func>
 800c5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5f4:	6006      	str	r6, [r0, #0]
 800c5f6:	60c6      	str	r6, [r0, #12]
 800c5f8:	b13c      	cbz	r4, 800c60a <_Bfree+0x3a>
 800c5fa:	69eb      	ldr	r3, [r5, #28]
 800c5fc:	6862      	ldr	r2, [r4, #4]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c604:	6021      	str	r1, [r4, #0]
 800c606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	0801142b 	.word	0x0801142b
 800c610:	080114ab 	.word	0x080114ab

0800c614 <__multadd>:
 800c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	690d      	ldr	r5, [r1, #16]
 800c61a:	4607      	mov	r7, r0
 800c61c:	460c      	mov	r4, r1
 800c61e:	461e      	mov	r6, r3
 800c620:	f101 0c14 	add.w	ip, r1, #20
 800c624:	2000      	movs	r0, #0
 800c626:	f8dc 3000 	ldr.w	r3, [ip]
 800c62a:	b299      	uxth	r1, r3
 800c62c:	fb02 6101 	mla	r1, r2, r1, r6
 800c630:	0c1e      	lsrs	r6, r3, #16
 800c632:	0c0b      	lsrs	r3, r1, #16
 800c634:	fb02 3306 	mla	r3, r2, r6, r3
 800c638:	b289      	uxth	r1, r1
 800c63a:	3001      	adds	r0, #1
 800c63c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c640:	4285      	cmp	r5, r0
 800c642:	f84c 1b04 	str.w	r1, [ip], #4
 800c646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c64a:	dcec      	bgt.n	800c626 <__multadd+0x12>
 800c64c:	b30e      	cbz	r6, 800c692 <__multadd+0x7e>
 800c64e:	68a3      	ldr	r3, [r4, #8]
 800c650:	42ab      	cmp	r3, r5
 800c652:	dc19      	bgt.n	800c688 <__multadd+0x74>
 800c654:	6861      	ldr	r1, [r4, #4]
 800c656:	4638      	mov	r0, r7
 800c658:	3101      	adds	r1, #1
 800c65a:	f7ff ff79 	bl	800c550 <_Balloc>
 800c65e:	4680      	mov	r8, r0
 800c660:	b928      	cbnz	r0, 800c66e <__multadd+0x5a>
 800c662:	4602      	mov	r2, r0
 800c664:	4b0c      	ldr	r3, [pc, #48]	@ (800c698 <__multadd+0x84>)
 800c666:	480d      	ldr	r0, [pc, #52]	@ (800c69c <__multadd+0x88>)
 800c668:	21ba      	movs	r1, #186	@ 0xba
 800c66a:	f7fd fe2d 	bl	800a2c8 <__assert_func>
 800c66e:	6922      	ldr	r2, [r4, #16]
 800c670:	3202      	adds	r2, #2
 800c672:	f104 010c 	add.w	r1, r4, #12
 800c676:	0092      	lsls	r2, r2, #2
 800c678:	300c      	adds	r0, #12
 800c67a:	f7ff f922 	bl	800b8c2 <memcpy>
 800c67e:	4621      	mov	r1, r4
 800c680:	4638      	mov	r0, r7
 800c682:	f7ff ffa5 	bl	800c5d0 <_Bfree>
 800c686:	4644      	mov	r4, r8
 800c688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c68c:	3501      	adds	r5, #1
 800c68e:	615e      	str	r6, [r3, #20]
 800c690:	6125      	str	r5, [r4, #16]
 800c692:	4620      	mov	r0, r4
 800c694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c698:	0801149a 	.word	0x0801149a
 800c69c:	080114ab 	.word	0x080114ab

0800c6a0 <__s2b>:
 800c6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	4615      	mov	r5, r2
 800c6a8:	461f      	mov	r7, r3
 800c6aa:	2209      	movs	r2, #9
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	db09      	blt.n	800c6d0 <__s2b+0x30>
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7ff ff47 	bl	800c550 <_Balloc>
 800c6c2:	b940      	cbnz	r0, 800c6d6 <__s2b+0x36>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	4b19      	ldr	r3, [pc, #100]	@ (800c72c <__s2b+0x8c>)
 800c6c8:	4819      	ldr	r0, [pc, #100]	@ (800c730 <__s2b+0x90>)
 800c6ca:	21d3      	movs	r1, #211	@ 0xd3
 800c6cc:	f7fd fdfc 	bl	800a2c8 <__assert_func>
 800c6d0:	0052      	lsls	r2, r2, #1
 800c6d2:	3101      	adds	r1, #1
 800c6d4:	e7f0      	b.n	800c6b8 <__s2b+0x18>
 800c6d6:	9b08      	ldr	r3, [sp, #32]
 800c6d8:	6143      	str	r3, [r0, #20]
 800c6da:	2d09      	cmp	r5, #9
 800c6dc:	f04f 0301 	mov.w	r3, #1
 800c6e0:	6103      	str	r3, [r0, #16]
 800c6e2:	dd16      	ble.n	800c712 <__s2b+0x72>
 800c6e4:	f104 0909 	add.w	r9, r4, #9
 800c6e8:	46c8      	mov	r8, r9
 800c6ea:	442c      	add	r4, r5
 800c6ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	3b30      	subs	r3, #48	@ 0x30
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff ff8c 	bl	800c614 <__multadd>
 800c6fc:	45a0      	cmp	r8, r4
 800c6fe:	d1f5      	bne.n	800c6ec <__s2b+0x4c>
 800c700:	f1a5 0408 	sub.w	r4, r5, #8
 800c704:	444c      	add	r4, r9
 800c706:	1b2d      	subs	r5, r5, r4
 800c708:	1963      	adds	r3, r4, r5
 800c70a:	42bb      	cmp	r3, r7
 800c70c:	db04      	blt.n	800c718 <__s2b+0x78>
 800c70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c712:	340a      	adds	r4, #10
 800c714:	2509      	movs	r5, #9
 800c716:	e7f6      	b.n	800c706 <__s2b+0x66>
 800c718:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c71c:	4601      	mov	r1, r0
 800c71e:	3b30      	subs	r3, #48	@ 0x30
 800c720:	220a      	movs	r2, #10
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ff76 	bl	800c614 <__multadd>
 800c728:	e7ee      	b.n	800c708 <__s2b+0x68>
 800c72a:	bf00      	nop
 800c72c:	0801149a 	.word	0x0801149a
 800c730:	080114ab 	.word	0x080114ab

0800c734 <__hi0bits>:
 800c734:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c738:	4603      	mov	r3, r0
 800c73a:	bf36      	itet	cc
 800c73c:	0403      	lslcc	r3, r0, #16
 800c73e:	2000      	movcs	r0, #0
 800c740:	2010      	movcc	r0, #16
 800c742:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c746:	bf3c      	itt	cc
 800c748:	021b      	lslcc	r3, r3, #8
 800c74a:	3008      	addcc	r0, #8
 800c74c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c750:	bf3c      	itt	cc
 800c752:	011b      	lslcc	r3, r3, #4
 800c754:	3004      	addcc	r0, #4
 800c756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c75a:	bf3c      	itt	cc
 800c75c:	009b      	lslcc	r3, r3, #2
 800c75e:	3002      	addcc	r0, #2
 800c760:	2b00      	cmp	r3, #0
 800c762:	db05      	blt.n	800c770 <__hi0bits+0x3c>
 800c764:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c768:	f100 0001 	add.w	r0, r0, #1
 800c76c:	bf08      	it	eq
 800c76e:	2020      	moveq	r0, #32
 800c770:	4770      	bx	lr

0800c772 <__lo0bits>:
 800c772:	6803      	ldr	r3, [r0, #0]
 800c774:	4602      	mov	r2, r0
 800c776:	f013 0007 	ands.w	r0, r3, #7
 800c77a:	d00b      	beq.n	800c794 <__lo0bits+0x22>
 800c77c:	07d9      	lsls	r1, r3, #31
 800c77e:	d421      	bmi.n	800c7c4 <__lo0bits+0x52>
 800c780:	0798      	lsls	r0, r3, #30
 800c782:	bf49      	itett	mi
 800c784:	085b      	lsrmi	r3, r3, #1
 800c786:	089b      	lsrpl	r3, r3, #2
 800c788:	2001      	movmi	r0, #1
 800c78a:	6013      	strmi	r3, [r2, #0]
 800c78c:	bf5c      	itt	pl
 800c78e:	6013      	strpl	r3, [r2, #0]
 800c790:	2002      	movpl	r0, #2
 800c792:	4770      	bx	lr
 800c794:	b299      	uxth	r1, r3
 800c796:	b909      	cbnz	r1, 800c79c <__lo0bits+0x2a>
 800c798:	0c1b      	lsrs	r3, r3, #16
 800c79a:	2010      	movs	r0, #16
 800c79c:	b2d9      	uxtb	r1, r3
 800c79e:	b909      	cbnz	r1, 800c7a4 <__lo0bits+0x32>
 800c7a0:	3008      	adds	r0, #8
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	0719      	lsls	r1, r3, #28
 800c7a6:	bf04      	itt	eq
 800c7a8:	091b      	lsreq	r3, r3, #4
 800c7aa:	3004      	addeq	r0, #4
 800c7ac:	0799      	lsls	r1, r3, #30
 800c7ae:	bf04      	itt	eq
 800c7b0:	089b      	lsreq	r3, r3, #2
 800c7b2:	3002      	addeq	r0, #2
 800c7b4:	07d9      	lsls	r1, r3, #31
 800c7b6:	d403      	bmi.n	800c7c0 <__lo0bits+0x4e>
 800c7b8:	085b      	lsrs	r3, r3, #1
 800c7ba:	f100 0001 	add.w	r0, r0, #1
 800c7be:	d003      	beq.n	800c7c8 <__lo0bits+0x56>
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	4770      	bx	lr
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	4770      	bx	lr
 800c7c8:	2020      	movs	r0, #32
 800c7ca:	4770      	bx	lr

0800c7cc <__i2b>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	f7ff febd 	bl	800c550 <_Balloc>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	b928      	cbnz	r0, 800c7e6 <__i2b+0x1a>
 800c7da:	4b05      	ldr	r3, [pc, #20]	@ (800c7f0 <__i2b+0x24>)
 800c7dc:	4805      	ldr	r0, [pc, #20]	@ (800c7f4 <__i2b+0x28>)
 800c7de:	f240 1145 	movw	r1, #325	@ 0x145
 800c7e2:	f7fd fd71 	bl	800a2c8 <__assert_func>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	6144      	str	r4, [r0, #20]
 800c7ea:	6103      	str	r3, [r0, #16]
 800c7ec:	bd10      	pop	{r4, pc}
 800c7ee:	bf00      	nop
 800c7f0:	0801149a 	.word	0x0801149a
 800c7f4:	080114ab 	.word	0x080114ab

0800c7f8 <__multiply>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	4614      	mov	r4, r2
 800c7fe:	690a      	ldr	r2, [r1, #16]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	429a      	cmp	r2, r3
 800c804:	bfa8      	it	ge
 800c806:	4623      	movge	r3, r4
 800c808:	460f      	mov	r7, r1
 800c80a:	bfa4      	itt	ge
 800c80c:	460c      	movge	r4, r1
 800c80e:	461f      	movge	r7, r3
 800c810:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c814:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	6861      	ldr	r1, [r4, #4]
 800c81c:	eb0a 0609 	add.w	r6, sl, r9
 800c820:	42b3      	cmp	r3, r6
 800c822:	b085      	sub	sp, #20
 800c824:	bfb8      	it	lt
 800c826:	3101      	addlt	r1, #1
 800c828:	f7ff fe92 	bl	800c550 <_Balloc>
 800c82c:	b930      	cbnz	r0, 800c83c <__multiply+0x44>
 800c82e:	4602      	mov	r2, r0
 800c830:	4b44      	ldr	r3, [pc, #272]	@ (800c944 <__multiply+0x14c>)
 800c832:	4845      	ldr	r0, [pc, #276]	@ (800c948 <__multiply+0x150>)
 800c834:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c838:	f7fd fd46 	bl	800a2c8 <__assert_func>
 800c83c:	f100 0514 	add.w	r5, r0, #20
 800c840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c844:	462b      	mov	r3, r5
 800c846:	2200      	movs	r2, #0
 800c848:	4543      	cmp	r3, r8
 800c84a:	d321      	bcc.n	800c890 <__multiply+0x98>
 800c84c:	f107 0114 	add.w	r1, r7, #20
 800c850:	f104 0214 	add.w	r2, r4, #20
 800c854:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c858:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	1b13      	subs	r3, r2, r4
 800c860:	3b15      	subs	r3, #21
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	3304      	adds	r3, #4
 800c868:	f104 0715 	add.w	r7, r4, #21
 800c86c:	42ba      	cmp	r2, r7
 800c86e:	bf38      	it	cc
 800c870:	2304      	movcc	r3, #4
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	9103      	str	r1, [sp, #12]
 800c878:	428b      	cmp	r3, r1
 800c87a:	d80c      	bhi.n	800c896 <__multiply+0x9e>
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	dd03      	ble.n	800c888 <__multiply+0x90>
 800c880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c884:	2b00      	cmp	r3, #0
 800c886:	d05b      	beq.n	800c940 <__multiply+0x148>
 800c888:	6106      	str	r6, [r0, #16]
 800c88a:	b005      	add	sp, #20
 800c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c890:	f843 2b04 	str.w	r2, [r3], #4
 800c894:	e7d8      	b.n	800c848 <__multiply+0x50>
 800c896:	f8b1 a000 	ldrh.w	sl, [r1]
 800c89a:	f1ba 0f00 	cmp.w	sl, #0
 800c89e:	d024      	beq.n	800c8ea <__multiply+0xf2>
 800c8a0:	f104 0e14 	add.w	lr, r4, #20
 800c8a4:	46a9      	mov	r9, r5
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8ae:	f8d9 3000 	ldr.w	r3, [r9]
 800c8b2:	fa1f fb87 	uxth.w	fp, r7
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8c0:	f8d9 7000 	ldr.w	r7, [r9]
 800c8c4:	4463      	add	r3, ip
 800c8c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8d8:	4572      	cmp	r2, lr
 800c8da:	f849 3b04 	str.w	r3, [r9], #4
 800c8de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8e2:	d8e2      	bhi.n	800c8aa <__multiply+0xb2>
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	f845 c003 	str.w	ip, [r5, r3]
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8f0:	3104      	adds	r1, #4
 800c8f2:	f1b9 0f00 	cmp.w	r9, #0
 800c8f6:	d021      	beq.n	800c93c <__multiply+0x144>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	f104 0c14 	add.w	ip, r4, #20
 800c8fe:	46ae      	mov	lr, r5
 800c900:	f04f 0a00 	mov.w	sl, #0
 800c904:	f8bc b000 	ldrh.w	fp, [ip]
 800c908:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c90c:	fb09 770b 	mla	r7, r9, fp, r7
 800c910:	4457      	add	r7, sl
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c918:	f84e 3b04 	str.w	r3, [lr], #4
 800c91c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c924:	f8be 3000 	ldrh.w	r3, [lr]
 800c928:	fb09 330a 	mla	r3, r9, sl, r3
 800c92c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c930:	4562      	cmp	r2, ip
 800c932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c936:	d8e5      	bhi.n	800c904 <__multiply+0x10c>
 800c938:	9f01      	ldr	r7, [sp, #4]
 800c93a:	51eb      	str	r3, [r5, r7]
 800c93c:	3504      	adds	r5, #4
 800c93e:	e799      	b.n	800c874 <__multiply+0x7c>
 800c940:	3e01      	subs	r6, #1
 800c942:	e79b      	b.n	800c87c <__multiply+0x84>
 800c944:	0801149a 	.word	0x0801149a
 800c948:	080114ab 	.word	0x080114ab

0800c94c <__pow5mult>:
 800c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c950:	4615      	mov	r5, r2
 800c952:	f012 0203 	ands.w	r2, r2, #3
 800c956:	4607      	mov	r7, r0
 800c958:	460e      	mov	r6, r1
 800c95a:	d007      	beq.n	800c96c <__pow5mult+0x20>
 800c95c:	4c25      	ldr	r4, [pc, #148]	@ (800c9f4 <__pow5mult+0xa8>)
 800c95e:	3a01      	subs	r2, #1
 800c960:	2300      	movs	r3, #0
 800c962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c966:	f7ff fe55 	bl	800c614 <__multadd>
 800c96a:	4606      	mov	r6, r0
 800c96c:	10ad      	asrs	r5, r5, #2
 800c96e:	d03d      	beq.n	800c9ec <__pow5mult+0xa0>
 800c970:	69fc      	ldr	r4, [r7, #28]
 800c972:	b97c      	cbnz	r4, 800c994 <__pow5mult+0x48>
 800c974:	2010      	movs	r0, #16
 800c976:	f7fd fcd9 	bl	800a32c <malloc>
 800c97a:	4602      	mov	r2, r0
 800c97c:	61f8      	str	r0, [r7, #28]
 800c97e:	b928      	cbnz	r0, 800c98c <__pow5mult+0x40>
 800c980:	4b1d      	ldr	r3, [pc, #116]	@ (800c9f8 <__pow5mult+0xac>)
 800c982:	481e      	ldr	r0, [pc, #120]	@ (800c9fc <__pow5mult+0xb0>)
 800c984:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c988:	f7fd fc9e 	bl	800a2c8 <__assert_func>
 800c98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c990:	6004      	str	r4, [r0, #0]
 800c992:	60c4      	str	r4, [r0, #12]
 800c994:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c99c:	b94c      	cbnz	r4, 800c9b2 <__pow5mult+0x66>
 800c99e:	f240 2171 	movw	r1, #625	@ 0x271
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f7ff ff12 	bl	800c7cc <__i2b>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	6003      	str	r3, [r0, #0]
 800c9b2:	f04f 0900 	mov.w	r9, #0
 800c9b6:	07eb      	lsls	r3, r5, #31
 800c9b8:	d50a      	bpl.n	800c9d0 <__pow5mult+0x84>
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4638      	mov	r0, r7
 800c9c0:	f7ff ff1a 	bl	800c7f8 <__multiply>
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f7ff fe01 	bl	800c5d0 <_Bfree>
 800c9ce:	4646      	mov	r6, r8
 800c9d0:	106d      	asrs	r5, r5, #1
 800c9d2:	d00b      	beq.n	800c9ec <__pow5mult+0xa0>
 800c9d4:	6820      	ldr	r0, [r4, #0]
 800c9d6:	b938      	cbnz	r0, 800c9e8 <__pow5mult+0x9c>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4638      	mov	r0, r7
 800c9de:	f7ff ff0b 	bl	800c7f8 <__multiply>
 800c9e2:	6020      	str	r0, [r4, #0]
 800c9e4:	f8c0 9000 	str.w	r9, [r0]
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	e7e4      	b.n	800c9b6 <__pow5mult+0x6a>
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08011504 	.word	0x08011504
 800c9f8:	0801142b 	.word	0x0801142b
 800c9fc:	080114ab 	.word	0x080114ab

0800ca00 <__lshift>:
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	460c      	mov	r4, r1
 800ca06:	6849      	ldr	r1, [r1, #4]
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca0e:	68a3      	ldr	r3, [r4, #8]
 800ca10:	4607      	mov	r7, r0
 800ca12:	4691      	mov	r9, r2
 800ca14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca18:	f108 0601 	add.w	r6, r8, #1
 800ca1c:	42b3      	cmp	r3, r6
 800ca1e:	db0b      	blt.n	800ca38 <__lshift+0x38>
 800ca20:	4638      	mov	r0, r7
 800ca22:	f7ff fd95 	bl	800c550 <_Balloc>
 800ca26:	4605      	mov	r5, r0
 800ca28:	b948      	cbnz	r0, 800ca3e <__lshift+0x3e>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4b28      	ldr	r3, [pc, #160]	@ (800cad0 <__lshift+0xd0>)
 800ca2e:	4829      	ldr	r0, [pc, #164]	@ (800cad4 <__lshift+0xd4>)
 800ca30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca34:	f7fd fc48 	bl	800a2c8 <__assert_func>
 800ca38:	3101      	adds	r1, #1
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	e7ee      	b.n	800ca1c <__lshift+0x1c>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f100 0114 	add.w	r1, r0, #20
 800ca44:	f100 0210 	add.w	r2, r0, #16
 800ca48:	4618      	mov	r0, r3
 800ca4a:	4553      	cmp	r3, sl
 800ca4c:	db33      	blt.n	800cab6 <__lshift+0xb6>
 800ca4e:	6920      	ldr	r0, [r4, #16]
 800ca50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca54:	f104 0314 	add.w	r3, r4, #20
 800ca58:	f019 091f 	ands.w	r9, r9, #31
 800ca5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca64:	d02b      	beq.n	800cabe <__lshift+0xbe>
 800ca66:	f1c9 0e20 	rsb	lr, r9, #32
 800ca6a:	468a      	mov	sl, r1
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	6818      	ldr	r0, [r3, #0]
 800ca70:	fa00 f009 	lsl.w	r0, r0, r9
 800ca74:	4310      	orrs	r0, r2
 800ca76:	f84a 0b04 	str.w	r0, [sl], #4
 800ca7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca7e:	459c      	cmp	ip, r3
 800ca80:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca84:	d8f3      	bhi.n	800ca6e <__lshift+0x6e>
 800ca86:	ebac 0304 	sub.w	r3, ip, r4
 800ca8a:	3b15      	subs	r3, #21
 800ca8c:	f023 0303 	bic.w	r3, r3, #3
 800ca90:	3304      	adds	r3, #4
 800ca92:	f104 0015 	add.w	r0, r4, #21
 800ca96:	4584      	cmp	ip, r0
 800ca98:	bf38      	it	cc
 800ca9a:	2304      	movcc	r3, #4
 800ca9c:	50ca      	str	r2, [r1, r3]
 800ca9e:	b10a      	cbz	r2, 800caa4 <__lshift+0xa4>
 800caa0:	f108 0602 	add.w	r6, r8, #2
 800caa4:	3e01      	subs	r6, #1
 800caa6:	4638      	mov	r0, r7
 800caa8:	612e      	str	r6, [r5, #16]
 800caaa:	4621      	mov	r1, r4
 800caac:	f7ff fd90 	bl	800c5d0 <_Bfree>
 800cab0:	4628      	mov	r0, r5
 800cab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab6:	f842 0f04 	str.w	r0, [r2, #4]!
 800caba:	3301      	adds	r3, #1
 800cabc:	e7c5      	b.n	800ca4a <__lshift+0x4a>
 800cabe:	3904      	subs	r1, #4
 800cac0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cac8:	459c      	cmp	ip, r3
 800caca:	d8f9      	bhi.n	800cac0 <__lshift+0xc0>
 800cacc:	e7ea      	b.n	800caa4 <__lshift+0xa4>
 800cace:	bf00      	nop
 800cad0:	0801149a 	.word	0x0801149a
 800cad4:	080114ab 	.word	0x080114ab

0800cad8 <__mcmp>:
 800cad8:	690a      	ldr	r2, [r1, #16]
 800cada:	4603      	mov	r3, r0
 800cadc:	6900      	ldr	r0, [r0, #16]
 800cade:	1a80      	subs	r0, r0, r2
 800cae0:	b530      	push	{r4, r5, lr}
 800cae2:	d10e      	bne.n	800cb02 <__mcmp+0x2a>
 800cae4:	3314      	adds	r3, #20
 800cae6:	3114      	adds	r1, #20
 800cae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800caec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800caf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800caf8:	4295      	cmp	r5, r2
 800cafa:	d003      	beq.n	800cb04 <__mcmp+0x2c>
 800cafc:	d205      	bcs.n	800cb0a <__mcmp+0x32>
 800cafe:	f04f 30ff 	mov.w	r0, #4294967295
 800cb02:	bd30      	pop	{r4, r5, pc}
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	d3f3      	bcc.n	800caf0 <__mcmp+0x18>
 800cb08:	e7fb      	b.n	800cb02 <__mcmp+0x2a>
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	e7f9      	b.n	800cb02 <__mcmp+0x2a>
	...

0800cb10 <__mdiff>:
 800cb10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	4689      	mov	r9, r1
 800cb16:	4606      	mov	r6, r0
 800cb18:	4611      	mov	r1, r2
 800cb1a:	4648      	mov	r0, r9
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	f7ff ffdb 	bl	800cad8 <__mcmp>
 800cb22:	1e05      	subs	r5, r0, #0
 800cb24:	d112      	bne.n	800cb4c <__mdiff+0x3c>
 800cb26:	4629      	mov	r1, r5
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7ff fd11 	bl	800c550 <_Balloc>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	b928      	cbnz	r0, 800cb3e <__mdiff+0x2e>
 800cb32:	4b3f      	ldr	r3, [pc, #252]	@ (800cc30 <__mdiff+0x120>)
 800cb34:	f240 2137 	movw	r1, #567	@ 0x237
 800cb38:	483e      	ldr	r0, [pc, #248]	@ (800cc34 <__mdiff+0x124>)
 800cb3a:	f7fd fbc5 	bl	800a2c8 <__assert_func>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb44:	4610      	mov	r0, r2
 800cb46:	b003      	add	sp, #12
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	bfbc      	itt	lt
 800cb4e:	464b      	movlt	r3, r9
 800cb50:	46a1      	movlt	r9, r4
 800cb52:	4630      	mov	r0, r6
 800cb54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb58:	bfba      	itte	lt
 800cb5a:	461c      	movlt	r4, r3
 800cb5c:	2501      	movlt	r5, #1
 800cb5e:	2500      	movge	r5, #0
 800cb60:	f7ff fcf6 	bl	800c550 <_Balloc>
 800cb64:	4602      	mov	r2, r0
 800cb66:	b918      	cbnz	r0, 800cb70 <__mdiff+0x60>
 800cb68:	4b31      	ldr	r3, [pc, #196]	@ (800cc30 <__mdiff+0x120>)
 800cb6a:	f240 2145 	movw	r1, #581	@ 0x245
 800cb6e:	e7e3      	b.n	800cb38 <__mdiff+0x28>
 800cb70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb74:	6926      	ldr	r6, [r4, #16]
 800cb76:	60c5      	str	r5, [r0, #12]
 800cb78:	f109 0310 	add.w	r3, r9, #16
 800cb7c:	f109 0514 	add.w	r5, r9, #20
 800cb80:	f104 0e14 	add.w	lr, r4, #20
 800cb84:	f100 0b14 	add.w	fp, r0, #20
 800cb88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	46d9      	mov	r9, fp
 800cb94:	f04f 0c00 	mov.w	ip, #0
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	fa1f f38a 	uxth.w	r3, sl
 800cba8:	4619      	mov	r1, r3
 800cbaa:	b283      	uxth	r3, r0
 800cbac:	1acb      	subs	r3, r1, r3
 800cbae:	0c00      	lsrs	r0, r0, #16
 800cbb0:	4463      	add	r3, ip
 800cbb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbc0:	4576      	cmp	r6, lr
 800cbc2:	f849 3b04 	str.w	r3, [r9], #4
 800cbc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbca:	d8e5      	bhi.n	800cb98 <__mdiff+0x88>
 800cbcc:	1b33      	subs	r3, r6, r4
 800cbce:	3b15      	subs	r3, #21
 800cbd0:	f023 0303 	bic.w	r3, r3, #3
 800cbd4:	3415      	adds	r4, #21
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	42a6      	cmp	r6, r4
 800cbda:	bf38      	it	cc
 800cbdc:	2304      	movcc	r3, #4
 800cbde:	441d      	add	r5, r3
 800cbe0:	445b      	add	r3, fp
 800cbe2:	461e      	mov	r6, r3
 800cbe4:	462c      	mov	r4, r5
 800cbe6:	4544      	cmp	r4, r8
 800cbe8:	d30e      	bcc.n	800cc08 <__mdiff+0xf8>
 800cbea:	f108 0103 	add.w	r1, r8, #3
 800cbee:	1b49      	subs	r1, r1, r5
 800cbf0:	f021 0103 	bic.w	r1, r1, #3
 800cbf4:	3d03      	subs	r5, #3
 800cbf6:	45a8      	cmp	r8, r5
 800cbf8:	bf38      	it	cc
 800cbfa:	2100      	movcc	r1, #0
 800cbfc:	440b      	add	r3, r1
 800cbfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc02:	b191      	cbz	r1, 800cc2a <__mdiff+0x11a>
 800cc04:	6117      	str	r7, [r2, #16]
 800cc06:	e79d      	b.n	800cb44 <__mdiff+0x34>
 800cc08:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc0c:	46e6      	mov	lr, ip
 800cc0e:	0c08      	lsrs	r0, r1, #16
 800cc10:	fa1c fc81 	uxtah	ip, ip, r1
 800cc14:	4471      	add	r1, lr
 800cc16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc1a:	b289      	uxth	r1, r1
 800cc1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc20:	f846 1b04 	str.w	r1, [r6], #4
 800cc24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc28:	e7dd      	b.n	800cbe6 <__mdiff+0xd6>
 800cc2a:	3f01      	subs	r7, #1
 800cc2c:	e7e7      	b.n	800cbfe <__mdiff+0xee>
 800cc2e:	bf00      	nop
 800cc30:	0801149a 	.word	0x0801149a
 800cc34:	080114ab 	.word	0x080114ab

0800cc38 <__ulp>:
 800cc38:	b082      	sub	sp, #8
 800cc3a:	ed8d 0b00 	vstr	d0, [sp]
 800cc3e:	9a01      	ldr	r2, [sp, #4]
 800cc40:	4b0f      	ldr	r3, [pc, #60]	@ (800cc80 <__ulp+0x48>)
 800cc42:	4013      	ands	r3, r2
 800cc44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	dc08      	bgt.n	800cc5e <__ulp+0x26>
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc56:	da04      	bge.n	800cc62 <__ulp+0x2a>
 800cc58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc5c:	4113      	asrs	r3, r2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	e008      	b.n	800cc74 <__ulp+0x3c>
 800cc62:	f1a2 0314 	sub.w	r3, r2, #20
 800cc66:	2b1e      	cmp	r3, #30
 800cc68:	bfda      	itte	le
 800cc6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cc6e:	40da      	lsrle	r2, r3
 800cc70:	2201      	movgt	r2, #1
 800cc72:	2300      	movs	r3, #0
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	ec41 0b10 	vmov	d0, r0, r1
 800cc7c:	b002      	add	sp, #8
 800cc7e:	4770      	bx	lr
 800cc80:	7ff00000 	.word	0x7ff00000

0800cc84 <__b2d>:
 800cc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	6906      	ldr	r6, [r0, #16]
 800cc8a:	f100 0814 	add.w	r8, r0, #20
 800cc8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cc92:	1f37      	subs	r7, r6, #4
 800cc94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f7ff fd4b 	bl	800c734 <__hi0bits>
 800cc9e:	f1c0 0320 	rsb	r3, r0, #32
 800cca2:	280a      	cmp	r0, #10
 800cca4:	600b      	str	r3, [r1, #0]
 800cca6:	491b      	ldr	r1, [pc, #108]	@ (800cd14 <__b2d+0x90>)
 800cca8:	dc15      	bgt.n	800ccd6 <__b2d+0x52>
 800ccaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800ccae:	fa22 f30c 	lsr.w	r3, r2, ip
 800ccb2:	45b8      	cmp	r8, r7
 800ccb4:	ea43 0501 	orr.w	r5, r3, r1
 800ccb8:	bf34      	ite	cc
 800ccba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccbe:	2300      	movcs	r3, #0
 800ccc0:	3015      	adds	r0, #21
 800ccc2:	fa02 f000 	lsl.w	r0, r2, r0
 800ccc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800ccca:	4303      	orrs	r3, r0
 800cccc:	461c      	mov	r4, r3
 800ccce:	ec45 4b10 	vmov	d0, r4, r5
 800ccd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd6:	45b8      	cmp	r8, r7
 800ccd8:	bf3a      	itte	cc
 800ccda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccde:	f1a6 0708 	subcc.w	r7, r6, #8
 800cce2:	2300      	movcs	r3, #0
 800cce4:	380b      	subs	r0, #11
 800cce6:	d012      	beq.n	800cd0e <__b2d+0x8a>
 800cce8:	f1c0 0120 	rsb	r1, r0, #32
 800ccec:	fa23 f401 	lsr.w	r4, r3, r1
 800ccf0:	4082      	lsls	r2, r0
 800ccf2:	4322      	orrs	r2, r4
 800ccf4:	4547      	cmp	r7, r8
 800ccf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ccfa:	bf8c      	ite	hi
 800ccfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd00:	2200      	movls	r2, #0
 800cd02:	4083      	lsls	r3, r0
 800cd04:	40ca      	lsrs	r2, r1
 800cd06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	e7de      	b.n	800cccc <__b2d+0x48>
 800cd0e:	ea42 0501 	orr.w	r5, r2, r1
 800cd12:	e7db      	b.n	800cccc <__b2d+0x48>
 800cd14:	3ff00000 	.word	0x3ff00000

0800cd18 <__d2b>:
 800cd18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd1c:	460f      	mov	r7, r1
 800cd1e:	2101      	movs	r1, #1
 800cd20:	ec59 8b10 	vmov	r8, r9, d0
 800cd24:	4616      	mov	r6, r2
 800cd26:	f7ff fc13 	bl	800c550 <_Balloc>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	b930      	cbnz	r0, 800cd3c <__d2b+0x24>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	4b23      	ldr	r3, [pc, #140]	@ (800cdc0 <__d2b+0xa8>)
 800cd32:	4824      	ldr	r0, [pc, #144]	@ (800cdc4 <__d2b+0xac>)
 800cd34:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd38:	f7fd fac6 	bl	800a2c8 <__assert_func>
 800cd3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd44:	b10d      	cbz	r5, 800cd4a <__d2b+0x32>
 800cd46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	f1b8 0300 	subs.w	r3, r8, #0
 800cd50:	d023      	beq.n	800cd9a <__d2b+0x82>
 800cd52:	4668      	mov	r0, sp
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	f7ff fd0c 	bl	800c772 <__lo0bits>
 800cd5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd5e:	b1d0      	cbz	r0, 800cd96 <__d2b+0x7e>
 800cd60:	f1c0 0320 	rsb	r3, r0, #32
 800cd64:	fa02 f303 	lsl.w	r3, r2, r3
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	40c2      	lsrs	r2, r0
 800cd6c:	6163      	str	r3, [r4, #20]
 800cd6e:	9201      	str	r2, [sp, #4]
 800cd70:	9b01      	ldr	r3, [sp, #4]
 800cd72:	61a3      	str	r3, [r4, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	bf0c      	ite	eq
 800cd78:	2201      	moveq	r2, #1
 800cd7a:	2202      	movne	r2, #2
 800cd7c:	6122      	str	r2, [r4, #16]
 800cd7e:	b1a5      	cbz	r5, 800cdaa <__d2b+0x92>
 800cd80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd84:	4405      	add	r5, r0
 800cd86:	603d      	str	r5, [r7, #0]
 800cd88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd8c:	6030      	str	r0, [r6, #0]
 800cd8e:	4620      	mov	r0, r4
 800cd90:	b003      	add	sp, #12
 800cd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd96:	6161      	str	r1, [r4, #20]
 800cd98:	e7ea      	b.n	800cd70 <__d2b+0x58>
 800cd9a:	a801      	add	r0, sp, #4
 800cd9c:	f7ff fce9 	bl	800c772 <__lo0bits>
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	6163      	str	r3, [r4, #20]
 800cda4:	3020      	adds	r0, #32
 800cda6:	2201      	movs	r2, #1
 800cda8:	e7e8      	b.n	800cd7c <__d2b+0x64>
 800cdaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdb2:	6038      	str	r0, [r7, #0]
 800cdb4:	6918      	ldr	r0, [r3, #16]
 800cdb6:	f7ff fcbd 	bl	800c734 <__hi0bits>
 800cdba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdbe:	e7e5      	b.n	800cd8c <__d2b+0x74>
 800cdc0:	0801149a 	.word	0x0801149a
 800cdc4:	080114ab 	.word	0x080114ab

0800cdc8 <__ratio>:
 800cdc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	4688      	mov	r8, r1
 800cdce:	4669      	mov	r1, sp
 800cdd0:	4681      	mov	r9, r0
 800cdd2:	f7ff ff57 	bl	800cc84 <__b2d>
 800cdd6:	a901      	add	r1, sp, #4
 800cdd8:	4640      	mov	r0, r8
 800cdda:	ec55 4b10 	vmov	r4, r5, d0
 800cdde:	f7ff ff51 	bl	800cc84 <__b2d>
 800cde2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cde6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cdea:	1ad2      	subs	r2, r2, r3
 800cdec:	e9dd 3100 	ldrd	r3, r1, [sp]
 800cdf0:	1a5b      	subs	r3, r3, r1
 800cdf2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800cdf6:	ec57 6b10 	vmov	r6, r7, d0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bfd6      	itet	le
 800cdfe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce02:	462a      	movgt	r2, r5
 800ce04:	463a      	movle	r2, r7
 800ce06:	46ab      	mov	fp, r5
 800ce08:	46a2      	mov	sl, r4
 800ce0a:	bfce      	itee	gt
 800ce0c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ce10:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ce14:	ee00 3a90 	vmovle	s1, r3
 800ce18:	ec4b ab17 	vmov	d7, sl, fp
 800ce1c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ce20:	b003      	add	sp, #12
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce26 <__copybits>:
 800ce26:	3901      	subs	r1, #1
 800ce28:	b570      	push	{r4, r5, r6, lr}
 800ce2a:	1149      	asrs	r1, r1, #5
 800ce2c:	6914      	ldr	r4, [r2, #16]
 800ce2e:	3101      	adds	r1, #1
 800ce30:	f102 0314 	add.w	r3, r2, #20
 800ce34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce3c:	1f05      	subs	r5, r0, #4
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	d30c      	bcc.n	800ce5c <__copybits+0x36>
 800ce42:	1aa3      	subs	r3, r4, r2
 800ce44:	3b11      	subs	r3, #17
 800ce46:	f023 0303 	bic.w	r3, r3, #3
 800ce4a:	3211      	adds	r2, #17
 800ce4c:	42a2      	cmp	r2, r4
 800ce4e:	bf88      	it	hi
 800ce50:	2300      	movhi	r3, #0
 800ce52:	4418      	add	r0, r3
 800ce54:	2300      	movs	r3, #0
 800ce56:	4288      	cmp	r0, r1
 800ce58:	d305      	bcc.n	800ce66 <__copybits+0x40>
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}
 800ce5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce60:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce64:	e7eb      	b.n	800ce3e <__copybits+0x18>
 800ce66:	f840 3b04 	str.w	r3, [r0], #4
 800ce6a:	e7f4      	b.n	800ce56 <__copybits+0x30>

0800ce6c <__any_on>:
 800ce6c:	f100 0214 	add.w	r2, r0, #20
 800ce70:	6900      	ldr	r0, [r0, #16]
 800ce72:	114b      	asrs	r3, r1, #5
 800ce74:	4298      	cmp	r0, r3
 800ce76:	b510      	push	{r4, lr}
 800ce78:	db11      	blt.n	800ce9e <__any_on+0x32>
 800ce7a:	dd0a      	ble.n	800ce92 <__any_on+0x26>
 800ce7c:	f011 011f 	ands.w	r1, r1, #31
 800ce80:	d007      	beq.n	800ce92 <__any_on+0x26>
 800ce82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce86:	fa24 f001 	lsr.w	r0, r4, r1
 800ce8a:	fa00 f101 	lsl.w	r1, r0, r1
 800ce8e:	428c      	cmp	r4, r1
 800ce90:	d10b      	bne.n	800ceaa <__any_on+0x3e>
 800ce92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d803      	bhi.n	800cea2 <__any_on+0x36>
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	4603      	mov	r3, r0
 800cea0:	e7f7      	b.n	800ce92 <__any_on+0x26>
 800cea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cea6:	2900      	cmp	r1, #0
 800cea8:	d0f5      	beq.n	800ce96 <__any_on+0x2a>
 800ceaa:	2001      	movs	r0, #1
 800ceac:	e7f6      	b.n	800ce9c <__any_on+0x30>

0800ceae <sulp>:
 800ceae:	b570      	push	{r4, r5, r6, lr}
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	4616      	mov	r6, r2
 800ceb6:	ec45 4b10 	vmov	d0, r4, r5
 800ceba:	f7ff febd 	bl	800cc38 <__ulp>
 800cebe:	b17e      	cbz	r6, 800cee0 <sulp+0x32>
 800cec0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cec4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	dd09      	ble.n	800cee0 <sulp+0x32>
 800cecc:	051b      	lsls	r3, r3, #20
 800cece:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ced2:	2000      	movs	r0, #0
 800ced4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ced8:	ec41 0b17 	vmov	d7, r0, r1
 800cedc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	0000      	movs	r0, r0
 800cee4:	0000      	movs	r0, r0
	...

0800cee8 <_strtod_l>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	ed2d 8b0a 	vpush	{d8-d12}
 800cef0:	b097      	sub	sp, #92	@ 0x5c
 800cef2:	4688      	mov	r8, r1
 800cef4:	920e      	str	r2, [sp, #56]	@ 0x38
 800cef6:	2200      	movs	r2, #0
 800cef8:	9212      	str	r2, [sp, #72]	@ 0x48
 800cefa:	9005      	str	r0, [sp, #20]
 800cefc:	f04f 0a00 	mov.w	sl, #0
 800cf00:	f04f 0b00 	mov.w	fp, #0
 800cf04:	460a      	mov	r2, r1
 800cf06:	9211      	str	r2, [sp, #68]	@ 0x44
 800cf08:	7811      	ldrb	r1, [r2, #0]
 800cf0a:	292b      	cmp	r1, #43	@ 0x2b
 800cf0c:	d04c      	beq.n	800cfa8 <_strtod_l+0xc0>
 800cf0e:	d839      	bhi.n	800cf84 <_strtod_l+0x9c>
 800cf10:	290d      	cmp	r1, #13
 800cf12:	d833      	bhi.n	800cf7c <_strtod_l+0x94>
 800cf14:	2908      	cmp	r1, #8
 800cf16:	d833      	bhi.n	800cf80 <_strtod_l+0x98>
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	d03c      	beq.n	800cf96 <_strtod_l+0xae>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	9208      	str	r2, [sp, #32]
 800cf20:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800cf22:	782a      	ldrb	r2, [r5, #0]
 800cf24:	2a30      	cmp	r2, #48	@ 0x30
 800cf26:	f040 80b5 	bne.w	800d094 <_strtod_l+0x1ac>
 800cf2a:	786a      	ldrb	r2, [r5, #1]
 800cf2c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf30:	2a58      	cmp	r2, #88	@ 0x58
 800cf32:	d170      	bne.n	800d016 <_strtod_l+0x12e>
 800cf34:	9302      	str	r3, [sp, #8]
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	ab12      	add	r3, sp, #72	@ 0x48
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	4a8b      	ldr	r2, [pc, #556]	@ (800d16c <_strtod_l+0x284>)
 800cf40:	9805      	ldr	r0, [sp, #20]
 800cf42:	ab13      	add	r3, sp, #76	@ 0x4c
 800cf44:	a911      	add	r1, sp, #68	@ 0x44
 800cf46:	f001 fa1f 	bl	800e388 <__gethex>
 800cf4a:	f010 060f 	ands.w	r6, r0, #15
 800cf4e:	4604      	mov	r4, r0
 800cf50:	d005      	beq.n	800cf5e <_strtod_l+0x76>
 800cf52:	2e06      	cmp	r6, #6
 800cf54:	d12a      	bne.n	800cfac <_strtod_l+0xc4>
 800cf56:	3501      	adds	r5, #1
 800cf58:	2300      	movs	r3, #0
 800cf5a:	9511      	str	r5, [sp, #68]	@ 0x44
 800cf5c:	9308      	str	r3, [sp, #32]
 800cf5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f040 852f 	bne.w	800d9c4 <_strtod_l+0xadc>
 800cf66:	9b08      	ldr	r3, [sp, #32]
 800cf68:	ec4b ab10 	vmov	d0, sl, fp
 800cf6c:	b1cb      	cbz	r3, 800cfa2 <_strtod_l+0xba>
 800cf6e:	eeb1 0b40 	vneg.f64	d0, d0
 800cf72:	b017      	add	sp, #92	@ 0x5c
 800cf74:	ecbd 8b0a 	vpop	{d8-d12}
 800cf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7c:	2920      	cmp	r1, #32
 800cf7e:	d1cd      	bne.n	800cf1c <_strtod_l+0x34>
 800cf80:	3201      	adds	r2, #1
 800cf82:	e7c0      	b.n	800cf06 <_strtod_l+0x1e>
 800cf84:	292d      	cmp	r1, #45	@ 0x2d
 800cf86:	d1c9      	bne.n	800cf1c <_strtod_l+0x34>
 800cf88:	2101      	movs	r1, #1
 800cf8a:	9108      	str	r1, [sp, #32]
 800cf8c:	1c51      	adds	r1, r2, #1
 800cf8e:	9111      	str	r1, [sp, #68]	@ 0x44
 800cf90:	7852      	ldrb	r2, [r2, #1]
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	d1c4      	bne.n	800cf20 <_strtod_l+0x38>
 800cf96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf98:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f040 850f 	bne.w	800d9c0 <_strtod_l+0xad8>
 800cfa2:	ec4b ab10 	vmov	d0, sl, fp
 800cfa6:	e7e4      	b.n	800cf72 <_strtod_l+0x8a>
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	e7ee      	b.n	800cf8a <_strtod_l+0xa2>
 800cfac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cfae:	b13a      	cbz	r2, 800cfc0 <_strtod_l+0xd8>
 800cfb0:	2135      	movs	r1, #53	@ 0x35
 800cfb2:	a814      	add	r0, sp, #80	@ 0x50
 800cfb4:	f7ff ff37 	bl	800ce26 <__copybits>
 800cfb8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cfba:	9805      	ldr	r0, [sp, #20]
 800cfbc:	f7ff fb08 	bl	800c5d0 <_Bfree>
 800cfc0:	1e73      	subs	r3, r6, #1
 800cfc2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d806      	bhi.n	800cfd6 <_strtod_l+0xee>
 800cfc8:	e8df f003 	tbb	[pc, r3]
 800cfcc:	201d0314 	.word	0x201d0314
 800cfd0:	14          	.byte	0x14
 800cfd1:	00          	.byte	0x00
 800cfd2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800cfd6:	05e3      	lsls	r3, r4, #23
 800cfd8:	bf48      	it	mi
 800cfda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cfde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfe2:	0d1b      	lsrs	r3, r3, #20
 800cfe4:	051b      	lsls	r3, r3, #20
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1b9      	bne.n	800cf5e <_strtod_l+0x76>
 800cfea:	f7fe fc3d 	bl	800b868 <__errno>
 800cfee:	2322      	movs	r3, #34	@ 0x22
 800cff0:	6003      	str	r3, [r0, #0]
 800cff2:	e7b4      	b.n	800cf5e <_strtod_l+0x76>
 800cff4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800cff8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cffc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d000:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d004:	e7e7      	b.n	800cfd6 <_strtod_l+0xee>
 800d006:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d174 <_strtod_l+0x28c>
 800d00a:	e7e4      	b.n	800cfd6 <_strtod_l+0xee>
 800d00c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d010:	f04f 3aff 	mov.w	sl, #4294967295
 800d014:	e7df      	b.n	800cfd6 <_strtod_l+0xee>
 800d016:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d01c:	785b      	ldrb	r3, [r3, #1]
 800d01e:	2b30      	cmp	r3, #48	@ 0x30
 800d020:	d0f9      	beq.n	800d016 <_strtod_l+0x12e>
 800d022:	2b00      	cmp	r3, #0
 800d024:	d09b      	beq.n	800cf5e <_strtod_l+0x76>
 800d026:	2301      	movs	r3, #1
 800d028:	2600      	movs	r6, #0
 800d02a:	9307      	str	r3, [sp, #28]
 800d02c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d030:	46b1      	mov	r9, r6
 800d032:	4635      	mov	r5, r6
 800d034:	220a      	movs	r2, #10
 800d036:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d038:	7804      	ldrb	r4, [r0, #0]
 800d03a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d03e:	b2d9      	uxtb	r1, r3
 800d040:	2909      	cmp	r1, #9
 800d042:	d929      	bls.n	800d098 <_strtod_l+0x1b0>
 800d044:	494a      	ldr	r1, [pc, #296]	@ (800d170 <_strtod_l+0x288>)
 800d046:	2201      	movs	r2, #1
 800d048:	f7fe fb4c 	bl	800b6e4 <strncmp>
 800d04c:	b378      	cbz	r0, 800d0ae <_strtod_l+0x1c6>
 800d04e:	2000      	movs	r0, #0
 800d050:	4622      	mov	r2, r4
 800d052:	462b      	mov	r3, r5
 800d054:	4607      	mov	r7, r0
 800d056:	9006      	str	r0, [sp, #24]
 800d058:	2a65      	cmp	r2, #101	@ 0x65
 800d05a:	d001      	beq.n	800d060 <_strtod_l+0x178>
 800d05c:	2a45      	cmp	r2, #69	@ 0x45
 800d05e:	d117      	bne.n	800d090 <_strtod_l+0x1a8>
 800d060:	b91b      	cbnz	r3, 800d06a <_strtod_l+0x182>
 800d062:	9b07      	ldr	r3, [sp, #28]
 800d064:	4303      	orrs	r3, r0
 800d066:	d096      	beq.n	800cf96 <_strtod_l+0xae>
 800d068:	2300      	movs	r3, #0
 800d06a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d06e:	f108 0201 	add.w	r2, r8, #1
 800d072:	9211      	str	r2, [sp, #68]	@ 0x44
 800d074:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d078:	2a2b      	cmp	r2, #43	@ 0x2b
 800d07a:	d06b      	beq.n	800d154 <_strtod_l+0x26c>
 800d07c:	2a2d      	cmp	r2, #45	@ 0x2d
 800d07e:	d071      	beq.n	800d164 <_strtod_l+0x27c>
 800d080:	f04f 0e00 	mov.w	lr, #0
 800d084:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d088:	2c09      	cmp	r4, #9
 800d08a:	d979      	bls.n	800d180 <_strtod_l+0x298>
 800d08c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d090:	2400      	movs	r4, #0
 800d092:	e094      	b.n	800d1be <_strtod_l+0x2d6>
 800d094:	2300      	movs	r3, #0
 800d096:	e7c7      	b.n	800d028 <_strtod_l+0x140>
 800d098:	2d08      	cmp	r5, #8
 800d09a:	f100 0001 	add.w	r0, r0, #1
 800d09e:	bfd4      	ite	le
 800d0a0:	fb02 3909 	mlale	r9, r2, r9, r3
 800d0a4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d0a8:	3501      	adds	r5, #1
 800d0aa:	9011      	str	r0, [sp, #68]	@ 0x44
 800d0ac:	e7c3      	b.n	800d036 <_strtod_l+0x14e>
 800d0ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d0b4:	785a      	ldrb	r2, [r3, #1]
 800d0b6:	b375      	cbz	r5, 800d116 <_strtod_l+0x22e>
 800d0b8:	4607      	mov	r7, r0
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d0c0:	2909      	cmp	r1, #9
 800d0c2:	d913      	bls.n	800d0ec <_strtod_l+0x204>
 800d0c4:	2101      	movs	r1, #1
 800d0c6:	9106      	str	r1, [sp, #24]
 800d0c8:	e7c6      	b.n	800d058 <_strtod_l+0x170>
 800d0ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800d0d0:	785a      	ldrb	r2, [r3, #1]
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	2a30      	cmp	r2, #48	@ 0x30
 800d0d6:	d0f8      	beq.n	800d0ca <_strtod_l+0x1e2>
 800d0d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d0dc:	2b08      	cmp	r3, #8
 800d0de:	f200 8476 	bhi.w	800d9ce <_strtod_l+0xae6>
 800d0e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	3a30      	subs	r2, #48	@ 0x30
 800d0ee:	f100 0101 	add.w	r1, r0, #1
 800d0f2:	d023      	beq.n	800d13c <_strtod_l+0x254>
 800d0f4:	440f      	add	r7, r1
 800d0f6:	eb00 0c03 	add.w	ip, r0, r3
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	240a      	movs	r4, #10
 800d0fe:	4561      	cmp	r1, ip
 800d100:	d10b      	bne.n	800d11a <_strtod_l+0x232>
 800d102:	1c5c      	adds	r4, r3, #1
 800d104:	4403      	add	r3, r0
 800d106:	2b08      	cmp	r3, #8
 800d108:	4404      	add	r4, r0
 800d10a:	dc11      	bgt.n	800d130 <_strtod_l+0x248>
 800d10c:	230a      	movs	r3, #10
 800d10e:	fb03 2909 	mla	r9, r3, r9, r2
 800d112:	2100      	movs	r1, #0
 800d114:	e013      	b.n	800d13e <_strtod_l+0x256>
 800d116:	4628      	mov	r0, r5
 800d118:	e7dc      	b.n	800d0d4 <_strtod_l+0x1ec>
 800d11a:	2908      	cmp	r1, #8
 800d11c:	f101 0101 	add.w	r1, r1, #1
 800d120:	dc02      	bgt.n	800d128 <_strtod_l+0x240>
 800d122:	fb04 f909 	mul.w	r9, r4, r9
 800d126:	e7ea      	b.n	800d0fe <_strtod_l+0x216>
 800d128:	2910      	cmp	r1, #16
 800d12a:	bfd8      	it	le
 800d12c:	4366      	mulle	r6, r4
 800d12e:	e7e6      	b.n	800d0fe <_strtod_l+0x216>
 800d130:	2b0f      	cmp	r3, #15
 800d132:	dcee      	bgt.n	800d112 <_strtod_l+0x22a>
 800d134:	230a      	movs	r3, #10
 800d136:	fb03 2606 	mla	r6, r3, r6, r2
 800d13a:	e7ea      	b.n	800d112 <_strtod_l+0x22a>
 800d13c:	461c      	mov	r4, r3
 800d13e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d140:	1c5a      	adds	r2, r3, #1
 800d142:	9211      	str	r2, [sp, #68]	@ 0x44
 800d144:	785a      	ldrb	r2, [r3, #1]
 800d146:	4608      	mov	r0, r1
 800d148:	4623      	mov	r3, r4
 800d14a:	e7b7      	b.n	800d0bc <_strtod_l+0x1d4>
 800d14c:	2301      	movs	r3, #1
 800d14e:	2700      	movs	r7, #0
 800d150:	9306      	str	r3, [sp, #24]
 800d152:	e786      	b.n	800d062 <_strtod_l+0x17a>
 800d154:	f04f 0e00 	mov.w	lr, #0
 800d158:	f108 0202 	add.w	r2, r8, #2
 800d15c:	9211      	str	r2, [sp, #68]	@ 0x44
 800d15e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d162:	e78f      	b.n	800d084 <_strtod_l+0x19c>
 800d164:	f04f 0e01 	mov.w	lr, #1
 800d168:	e7f6      	b.n	800d158 <_strtod_l+0x270>
 800d16a:	bf00      	nop
 800d16c:	08011618 	.word	0x08011618
 800d170:	08011600 	.word	0x08011600
 800d174:	7ff00000 	.word	0x7ff00000
 800d178:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d17a:	1c54      	adds	r4, r2, #1
 800d17c:	9411      	str	r4, [sp, #68]	@ 0x44
 800d17e:	7852      	ldrb	r2, [r2, #1]
 800d180:	2a30      	cmp	r2, #48	@ 0x30
 800d182:	d0f9      	beq.n	800d178 <_strtod_l+0x290>
 800d184:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d188:	2c08      	cmp	r4, #8
 800d18a:	d881      	bhi.n	800d090 <_strtod_l+0x1a8>
 800d18c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d190:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d192:	9209      	str	r2, [sp, #36]	@ 0x24
 800d194:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d196:	1c51      	adds	r1, r2, #1
 800d198:	9111      	str	r1, [sp, #68]	@ 0x44
 800d19a:	7852      	ldrb	r2, [r2, #1]
 800d19c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d1a0:	2c09      	cmp	r4, #9
 800d1a2:	d938      	bls.n	800d216 <_strtod_l+0x32e>
 800d1a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d1a6:	1b0c      	subs	r4, r1, r4
 800d1a8:	2c08      	cmp	r4, #8
 800d1aa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d1ae:	dc02      	bgt.n	800d1b6 <_strtod_l+0x2ce>
 800d1b0:	4564      	cmp	r4, ip
 800d1b2:	bfa8      	it	ge
 800d1b4:	4664      	movge	r4, ip
 800d1b6:	f1be 0f00 	cmp.w	lr, #0
 800d1ba:	d000      	beq.n	800d1be <_strtod_l+0x2d6>
 800d1bc:	4264      	negs	r4, r4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d14e      	bne.n	800d260 <_strtod_l+0x378>
 800d1c2:	9b07      	ldr	r3, [sp, #28]
 800d1c4:	4318      	orrs	r0, r3
 800d1c6:	f47f aeca 	bne.w	800cf5e <_strtod_l+0x76>
 800d1ca:	9b06      	ldr	r3, [sp, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f47f aee2 	bne.w	800cf96 <_strtod_l+0xae>
 800d1d2:	2a69      	cmp	r2, #105	@ 0x69
 800d1d4:	d027      	beq.n	800d226 <_strtod_l+0x33e>
 800d1d6:	dc24      	bgt.n	800d222 <_strtod_l+0x33a>
 800d1d8:	2a49      	cmp	r2, #73	@ 0x49
 800d1da:	d024      	beq.n	800d226 <_strtod_l+0x33e>
 800d1dc:	2a4e      	cmp	r2, #78	@ 0x4e
 800d1de:	f47f aeda 	bne.w	800cf96 <_strtod_l+0xae>
 800d1e2:	4997      	ldr	r1, [pc, #604]	@ (800d440 <_strtod_l+0x558>)
 800d1e4:	a811      	add	r0, sp, #68	@ 0x44
 800d1e6:	f001 faf1 	bl	800e7cc <__match>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	f43f aed3 	beq.w	800cf96 <_strtod_l+0xae>
 800d1f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b28      	cmp	r3, #40	@ 0x28
 800d1f6:	d12d      	bne.n	800d254 <_strtod_l+0x36c>
 800d1f8:	4992      	ldr	r1, [pc, #584]	@ (800d444 <_strtod_l+0x55c>)
 800d1fa:	aa14      	add	r2, sp, #80	@ 0x50
 800d1fc:	a811      	add	r0, sp, #68	@ 0x44
 800d1fe:	f001 faf9 	bl	800e7f4 <__hexnan>
 800d202:	2805      	cmp	r0, #5
 800d204:	d126      	bne.n	800d254 <_strtod_l+0x36c>
 800d206:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d208:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d20c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d210:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d214:	e6a3      	b.n	800cf5e <_strtod_l+0x76>
 800d216:	240a      	movs	r4, #10
 800d218:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d21c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d220:	e7b8      	b.n	800d194 <_strtod_l+0x2ac>
 800d222:	2a6e      	cmp	r2, #110	@ 0x6e
 800d224:	e7db      	b.n	800d1de <_strtod_l+0x2f6>
 800d226:	4988      	ldr	r1, [pc, #544]	@ (800d448 <_strtod_l+0x560>)
 800d228:	a811      	add	r0, sp, #68	@ 0x44
 800d22a:	f001 facf 	bl	800e7cc <__match>
 800d22e:	2800      	cmp	r0, #0
 800d230:	f43f aeb1 	beq.w	800cf96 <_strtod_l+0xae>
 800d234:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d236:	4985      	ldr	r1, [pc, #532]	@ (800d44c <_strtod_l+0x564>)
 800d238:	3b01      	subs	r3, #1
 800d23a:	a811      	add	r0, sp, #68	@ 0x44
 800d23c:	9311      	str	r3, [sp, #68]	@ 0x44
 800d23e:	f001 fac5 	bl	800e7cc <__match>
 800d242:	b910      	cbnz	r0, 800d24a <_strtod_l+0x362>
 800d244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d246:	3301      	adds	r3, #1
 800d248:	9311      	str	r3, [sp, #68]	@ 0x44
 800d24a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d460 <_strtod_l+0x578>
 800d24e:	f04f 0a00 	mov.w	sl, #0
 800d252:	e684      	b.n	800cf5e <_strtod_l+0x76>
 800d254:	487e      	ldr	r0, [pc, #504]	@ (800d450 <_strtod_l+0x568>)
 800d256:	f001 f827 	bl	800e2a8 <nan>
 800d25a:	ec5b ab10 	vmov	sl, fp, d0
 800d25e:	e67e      	b.n	800cf5e <_strtod_l+0x76>
 800d260:	ee07 9a90 	vmov	s15, r9
 800d264:	1be2      	subs	r2, r4, r7
 800d266:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d26a:	2d00      	cmp	r5, #0
 800d26c:	bf08      	it	eq
 800d26e:	461d      	moveq	r5, r3
 800d270:	2b10      	cmp	r3, #16
 800d272:	9209      	str	r2, [sp, #36]	@ 0x24
 800d274:	461a      	mov	r2, r3
 800d276:	bfa8      	it	ge
 800d278:	2210      	movge	r2, #16
 800d27a:	2b09      	cmp	r3, #9
 800d27c:	ec5b ab17 	vmov	sl, fp, d7
 800d280:	dc15      	bgt.n	800d2ae <_strtod_l+0x3c6>
 800d282:	1be1      	subs	r1, r4, r7
 800d284:	2900      	cmp	r1, #0
 800d286:	f43f ae6a 	beq.w	800cf5e <_strtod_l+0x76>
 800d28a:	eba4 0107 	sub.w	r1, r4, r7
 800d28e:	dd72      	ble.n	800d376 <_strtod_l+0x48e>
 800d290:	2916      	cmp	r1, #22
 800d292:	dc59      	bgt.n	800d348 <_strtod_l+0x460>
 800d294:	4b6f      	ldr	r3, [pc, #444]	@ (800d454 <_strtod_l+0x56c>)
 800d296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d29c:	ed93 7b00 	vldr	d7, [r3]
 800d2a0:	ec4b ab16 	vmov	d6, sl, fp
 800d2a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2a8:	ec5b ab17 	vmov	sl, fp, d7
 800d2ac:	e657      	b.n	800cf5e <_strtod_l+0x76>
 800d2ae:	4969      	ldr	r1, [pc, #420]	@ (800d454 <_strtod_l+0x56c>)
 800d2b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d2b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d2b8:	ee06 6a90 	vmov	s13, r6
 800d2bc:	2b0f      	cmp	r3, #15
 800d2be:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d2c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d2c6:	ec5b ab16 	vmov	sl, fp, d6
 800d2ca:	ddda      	ble.n	800d282 <_strtod_l+0x39a>
 800d2cc:	1a9a      	subs	r2, r3, r2
 800d2ce:	1be1      	subs	r1, r4, r7
 800d2d0:	440a      	add	r2, r1
 800d2d2:	2a00      	cmp	r2, #0
 800d2d4:	f340 8094 	ble.w	800d400 <_strtod_l+0x518>
 800d2d8:	f012 000f 	ands.w	r0, r2, #15
 800d2dc:	d00a      	beq.n	800d2f4 <_strtod_l+0x40c>
 800d2de:	495d      	ldr	r1, [pc, #372]	@ (800d454 <_strtod_l+0x56c>)
 800d2e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d2e4:	ed91 7b00 	vldr	d7, [r1]
 800d2e8:	ec4b ab16 	vmov	d6, sl, fp
 800d2ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2f0:	ec5b ab17 	vmov	sl, fp, d7
 800d2f4:	f032 020f 	bics.w	r2, r2, #15
 800d2f8:	d073      	beq.n	800d3e2 <_strtod_l+0x4fa>
 800d2fa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d2fe:	dd47      	ble.n	800d390 <_strtod_l+0x4a8>
 800d300:	2400      	movs	r4, #0
 800d302:	4625      	mov	r5, r4
 800d304:	9407      	str	r4, [sp, #28]
 800d306:	4626      	mov	r6, r4
 800d308:	9a05      	ldr	r2, [sp, #20]
 800d30a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d460 <_strtod_l+0x578>
 800d30e:	2322      	movs	r3, #34	@ 0x22
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	f04f 0a00 	mov.w	sl, #0
 800d316:	9b07      	ldr	r3, [sp, #28]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f43f ae20 	beq.w	800cf5e <_strtod_l+0x76>
 800d31e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d320:	9805      	ldr	r0, [sp, #20]
 800d322:	f7ff f955 	bl	800c5d0 <_Bfree>
 800d326:	9805      	ldr	r0, [sp, #20]
 800d328:	4631      	mov	r1, r6
 800d32a:	f7ff f951 	bl	800c5d0 <_Bfree>
 800d32e:	9805      	ldr	r0, [sp, #20]
 800d330:	4629      	mov	r1, r5
 800d332:	f7ff f94d 	bl	800c5d0 <_Bfree>
 800d336:	9907      	ldr	r1, [sp, #28]
 800d338:	9805      	ldr	r0, [sp, #20]
 800d33a:	f7ff f949 	bl	800c5d0 <_Bfree>
 800d33e:	9805      	ldr	r0, [sp, #20]
 800d340:	4621      	mov	r1, r4
 800d342:	f7ff f945 	bl	800c5d0 <_Bfree>
 800d346:	e60a      	b.n	800cf5e <_strtod_l+0x76>
 800d348:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d34c:	1be0      	subs	r0, r4, r7
 800d34e:	4281      	cmp	r1, r0
 800d350:	dbbc      	blt.n	800d2cc <_strtod_l+0x3e4>
 800d352:	4a40      	ldr	r2, [pc, #256]	@ (800d454 <_strtod_l+0x56c>)
 800d354:	f1c3 030f 	rsb	r3, r3, #15
 800d358:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d35c:	ed91 7b00 	vldr	d7, [r1]
 800d360:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d362:	ec4b ab16 	vmov	d6, sl, fp
 800d366:	1acb      	subs	r3, r1, r3
 800d368:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d36c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d370:	ed92 6b00 	vldr	d6, [r2]
 800d374:	e796      	b.n	800d2a4 <_strtod_l+0x3bc>
 800d376:	3116      	adds	r1, #22
 800d378:	dba8      	blt.n	800d2cc <_strtod_l+0x3e4>
 800d37a:	4b36      	ldr	r3, [pc, #216]	@ (800d454 <_strtod_l+0x56c>)
 800d37c:	1b3c      	subs	r4, r7, r4
 800d37e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d382:	ed94 7b00 	vldr	d7, [r4]
 800d386:	ec4b ab16 	vmov	d6, sl, fp
 800d38a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d38e:	e78b      	b.n	800d2a8 <_strtod_l+0x3c0>
 800d390:	2000      	movs	r0, #0
 800d392:	ec4b ab17 	vmov	d7, sl, fp
 800d396:	4e30      	ldr	r6, [pc, #192]	@ (800d458 <_strtod_l+0x570>)
 800d398:	1112      	asrs	r2, r2, #4
 800d39a:	4601      	mov	r1, r0
 800d39c:	2a01      	cmp	r2, #1
 800d39e:	dc23      	bgt.n	800d3e8 <_strtod_l+0x500>
 800d3a0:	b108      	cbz	r0, 800d3a6 <_strtod_l+0x4be>
 800d3a2:	ec5b ab17 	vmov	sl, fp, d7
 800d3a6:	4a2c      	ldr	r2, [pc, #176]	@ (800d458 <_strtod_l+0x570>)
 800d3a8:	482c      	ldr	r0, [pc, #176]	@ (800d45c <_strtod_l+0x574>)
 800d3aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d3ae:	ed92 7b00 	vldr	d7, [r2]
 800d3b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d3b6:	ec4b ab16 	vmov	d6, sl, fp
 800d3ba:	4a29      	ldr	r2, [pc, #164]	@ (800d460 <_strtod_l+0x578>)
 800d3bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3c0:	ee17 1a90 	vmov	r1, s15
 800d3c4:	400a      	ands	r2, r1
 800d3c6:	4282      	cmp	r2, r0
 800d3c8:	ec5b ab17 	vmov	sl, fp, d7
 800d3cc:	d898      	bhi.n	800d300 <_strtod_l+0x418>
 800d3ce:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d3d2:	4282      	cmp	r2, r0
 800d3d4:	bf86      	itte	hi
 800d3d6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d464 <_strtod_l+0x57c>
 800d3da:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3de:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	9206      	str	r2, [sp, #24]
 800d3e6:	e076      	b.n	800d4d6 <_strtod_l+0x5ee>
 800d3e8:	f012 0f01 	tst.w	r2, #1
 800d3ec:	d004      	beq.n	800d3f8 <_strtod_l+0x510>
 800d3ee:	ed96 6b00 	vldr	d6, [r6]
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3f8:	3101      	adds	r1, #1
 800d3fa:	1052      	asrs	r2, r2, #1
 800d3fc:	3608      	adds	r6, #8
 800d3fe:	e7cd      	b.n	800d39c <_strtod_l+0x4b4>
 800d400:	d0ef      	beq.n	800d3e2 <_strtod_l+0x4fa>
 800d402:	4252      	negs	r2, r2
 800d404:	f012 000f 	ands.w	r0, r2, #15
 800d408:	d00a      	beq.n	800d420 <_strtod_l+0x538>
 800d40a:	4912      	ldr	r1, [pc, #72]	@ (800d454 <_strtod_l+0x56c>)
 800d40c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d410:	ed91 7b00 	vldr	d7, [r1]
 800d414:	ec4b ab16 	vmov	d6, sl, fp
 800d418:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d41c:	ec5b ab17 	vmov	sl, fp, d7
 800d420:	1112      	asrs	r2, r2, #4
 800d422:	d0de      	beq.n	800d3e2 <_strtod_l+0x4fa>
 800d424:	2a1f      	cmp	r2, #31
 800d426:	dd1f      	ble.n	800d468 <_strtod_l+0x580>
 800d428:	2400      	movs	r4, #0
 800d42a:	4625      	mov	r5, r4
 800d42c:	9407      	str	r4, [sp, #28]
 800d42e:	4626      	mov	r6, r4
 800d430:	9a05      	ldr	r2, [sp, #20]
 800d432:	2322      	movs	r3, #34	@ 0x22
 800d434:	f04f 0a00 	mov.w	sl, #0
 800d438:	f04f 0b00 	mov.w	fp, #0
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	e76a      	b.n	800d316 <_strtod_l+0x42e>
 800d440:	080113f2 	.word	0x080113f2
 800d444:	08011604 	.word	0x08011604
 800d448:	080113ea 	.word	0x080113ea
 800d44c:	08011421 	.word	0x08011421
 800d450:	080112e3 	.word	0x080112e3
 800d454:	08011538 	.word	0x08011538
 800d458:	08011510 	.word	0x08011510
 800d45c:	7ca00000 	.word	0x7ca00000
 800d460:	7ff00000 	.word	0x7ff00000
 800d464:	7fefffff 	.word	0x7fefffff
 800d468:	f012 0110 	ands.w	r1, r2, #16
 800d46c:	bf18      	it	ne
 800d46e:	216a      	movne	r1, #106	@ 0x6a
 800d470:	9106      	str	r1, [sp, #24]
 800d472:	ec4b ab17 	vmov	d7, sl, fp
 800d476:	49b0      	ldr	r1, [pc, #704]	@ (800d738 <_strtod_l+0x850>)
 800d478:	2000      	movs	r0, #0
 800d47a:	07d6      	lsls	r6, r2, #31
 800d47c:	d504      	bpl.n	800d488 <_strtod_l+0x5a0>
 800d47e:	ed91 6b00 	vldr	d6, [r1]
 800d482:	2001      	movs	r0, #1
 800d484:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d488:	1052      	asrs	r2, r2, #1
 800d48a:	f101 0108 	add.w	r1, r1, #8
 800d48e:	d1f4      	bne.n	800d47a <_strtod_l+0x592>
 800d490:	b108      	cbz	r0, 800d496 <_strtod_l+0x5ae>
 800d492:	ec5b ab17 	vmov	sl, fp, d7
 800d496:	9a06      	ldr	r2, [sp, #24]
 800d498:	b1b2      	cbz	r2, 800d4c8 <_strtod_l+0x5e0>
 800d49a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d49e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d4a2:	2a00      	cmp	r2, #0
 800d4a4:	4658      	mov	r0, fp
 800d4a6:	dd0f      	ble.n	800d4c8 <_strtod_l+0x5e0>
 800d4a8:	2a1f      	cmp	r2, #31
 800d4aa:	dd55      	ble.n	800d558 <_strtod_l+0x670>
 800d4ac:	2a34      	cmp	r2, #52	@ 0x34
 800d4ae:	bfde      	ittt	le
 800d4b0:	f04f 32ff 	movle.w	r2, #4294967295
 800d4b4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d4b8:	408a      	lslle	r2, r1
 800d4ba:	f04f 0a00 	mov.w	sl, #0
 800d4be:	bfcc      	ite	gt
 800d4c0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d4c4:	ea02 0b00 	andle.w	fp, r2, r0
 800d4c8:	ec4b ab17 	vmov	d7, sl, fp
 800d4cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d4:	d0a8      	beq.n	800d428 <_strtod_l+0x540>
 800d4d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4d8:	9805      	ldr	r0, [sp, #20]
 800d4da:	f8cd 9000 	str.w	r9, [sp]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	f7ff f8de 	bl	800c6a0 <__s2b>
 800d4e4:	9007      	str	r0, [sp, #28]
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f43f af0a 	beq.w	800d300 <_strtod_l+0x418>
 800d4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4ee:	1b3f      	subs	r7, r7, r4
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	bfb4      	ite	lt
 800d4f4:	463b      	movlt	r3, r7
 800d4f6:	2300      	movge	r3, #0
 800d4f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4fc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800d728 <_strtod_l+0x840>
 800d500:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d504:	2400      	movs	r4, #0
 800d506:	930d      	str	r3, [sp, #52]	@ 0x34
 800d508:	4625      	mov	r5, r4
 800d50a:	9b07      	ldr	r3, [sp, #28]
 800d50c:	9805      	ldr	r0, [sp, #20]
 800d50e:	6859      	ldr	r1, [r3, #4]
 800d510:	f7ff f81e 	bl	800c550 <_Balloc>
 800d514:	4606      	mov	r6, r0
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f aef6 	beq.w	800d308 <_strtod_l+0x420>
 800d51c:	9b07      	ldr	r3, [sp, #28]
 800d51e:	691a      	ldr	r2, [r3, #16]
 800d520:	ec4b ab19 	vmov	d9, sl, fp
 800d524:	3202      	adds	r2, #2
 800d526:	f103 010c 	add.w	r1, r3, #12
 800d52a:	0092      	lsls	r2, r2, #2
 800d52c:	300c      	adds	r0, #12
 800d52e:	f7fe f9c8 	bl	800b8c2 <memcpy>
 800d532:	eeb0 0b49 	vmov.f64	d0, d9
 800d536:	9805      	ldr	r0, [sp, #20]
 800d538:	aa14      	add	r2, sp, #80	@ 0x50
 800d53a:	a913      	add	r1, sp, #76	@ 0x4c
 800d53c:	f7ff fbec 	bl	800cd18 <__d2b>
 800d540:	9012      	str	r0, [sp, #72]	@ 0x48
 800d542:	2800      	cmp	r0, #0
 800d544:	f43f aee0 	beq.w	800d308 <_strtod_l+0x420>
 800d548:	9805      	ldr	r0, [sp, #20]
 800d54a:	2101      	movs	r1, #1
 800d54c:	f7ff f93e 	bl	800c7cc <__i2b>
 800d550:	4605      	mov	r5, r0
 800d552:	b940      	cbnz	r0, 800d566 <_strtod_l+0x67e>
 800d554:	2500      	movs	r5, #0
 800d556:	e6d7      	b.n	800d308 <_strtod_l+0x420>
 800d558:	f04f 31ff 	mov.w	r1, #4294967295
 800d55c:	fa01 f202 	lsl.w	r2, r1, r2
 800d560:	ea02 0a0a 	and.w	sl, r2, sl
 800d564:	e7b0      	b.n	800d4c8 <_strtod_l+0x5e0>
 800d566:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d568:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d56a:	2f00      	cmp	r7, #0
 800d56c:	bfab      	itete	ge
 800d56e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d570:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d572:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d576:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d57a:	bfac      	ite	ge
 800d57c:	eb07 0903 	addge.w	r9, r7, r3
 800d580:	eba3 0807 	sublt.w	r8, r3, r7
 800d584:	9b06      	ldr	r3, [sp, #24]
 800d586:	1aff      	subs	r7, r7, r3
 800d588:	4417      	add	r7, r2
 800d58a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d58e:	4a6b      	ldr	r2, [pc, #428]	@ (800d73c <_strtod_l+0x854>)
 800d590:	3f01      	subs	r7, #1
 800d592:	4297      	cmp	r7, r2
 800d594:	da51      	bge.n	800d63a <_strtod_l+0x752>
 800d596:	1bd1      	subs	r1, r2, r7
 800d598:	291f      	cmp	r1, #31
 800d59a:	eba3 0301 	sub.w	r3, r3, r1
 800d59e:	f04f 0201 	mov.w	r2, #1
 800d5a2:	dc3e      	bgt.n	800d622 <_strtod_l+0x73a>
 800d5a4:	408a      	lsls	r2, r1
 800d5a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d5ac:	eb09 0703 	add.w	r7, r9, r3
 800d5b0:	4498      	add	r8, r3
 800d5b2:	9b06      	ldr	r3, [sp, #24]
 800d5b4:	45b9      	cmp	r9, r7
 800d5b6:	4498      	add	r8, r3
 800d5b8:	464b      	mov	r3, r9
 800d5ba:	bfa8      	it	ge
 800d5bc:	463b      	movge	r3, r7
 800d5be:	4543      	cmp	r3, r8
 800d5c0:	bfa8      	it	ge
 800d5c2:	4643      	movge	r3, r8
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	bfc2      	ittt	gt
 800d5c8:	1aff      	subgt	r7, r7, r3
 800d5ca:	eba8 0803 	subgt.w	r8, r8, r3
 800d5ce:	eba9 0903 	subgt.w	r9, r9, r3
 800d5d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dd16      	ble.n	800d606 <_strtod_l+0x71e>
 800d5d8:	4629      	mov	r1, r5
 800d5da:	9805      	ldr	r0, [sp, #20]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	f7ff f9b5 	bl	800c94c <__pow5mult>
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d0b5      	beq.n	800d554 <_strtod_l+0x66c>
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d5ec:	9805      	ldr	r0, [sp, #20]
 800d5ee:	f7ff f903 	bl	800c7f8 <__multiply>
 800d5f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f43f ae87 	beq.w	800d308 <_strtod_l+0x420>
 800d5fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d5fc:	9805      	ldr	r0, [sp, #20]
 800d5fe:	f7fe ffe7 	bl	800c5d0 <_Bfree>
 800d602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d604:	9312      	str	r3, [sp, #72]	@ 0x48
 800d606:	2f00      	cmp	r7, #0
 800d608:	dc1b      	bgt.n	800d642 <_strtod_l+0x75a>
 800d60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dd21      	ble.n	800d654 <_strtod_l+0x76c>
 800d610:	4631      	mov	r1, r6
 800d612:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d614:	9805      	ldr	r0, [sp, #20]
 800d616:	f7ff f999 	bl	800c94c <__pow5mult>
 800d61a:	4606      	mov	r6, r0
 800d61c:	b9d0      	cbnz	r0, 800d654 <_strtod_l+0x76c>
 800d61e:	2600      	movs	r6, #0
 800d620:	e672      	b.n	800d308 <_strtod_l+0x420>
 800d622:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d626:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d62a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d62e:	37e2      	adds	r7, #226	@ 0xe2
 800d630:	fa02 f107 	lsl.w	r1, r2, r7
 800d634:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d636:	920c      	str	r2, [sp, #48]	@ 0x30
 800d638:	e7b8      	b.n	800d5ac <_strtod_l+0x6c4>
 800d63a:	2200      	movs	r2, #0
 800d63c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d63e:	2201      	movs	r2, #1
 800d640:	e7f9      	b.n	800d636 <_strtod_l+0x74e>
 800d642:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d644:	9805      	ldr	r0, [sp, #20]
 800d646:	463a      	mov	r2, r7
 800d648:	f7ff f9da 	bl	800ca00 <__lshift>
 800d64c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d64e:	2800      	cmp	r0, #0
 800d650:	d1db      	bne.n	800d60a <_strtod_l+0x722>
 800d652:	e659      	b.n	800d308 <_strtod_l+0x420>
 800d654:	f1b8 0f00 	cmp.w	r8, #0
 800d658:	dd07      	ble.n	800d66a <_strtod_l+0x782>
 800d65a:	4631      	mov	r1, r6
 800d65c:	9805      	ldr	r0, [sp, #20]
 800d65e:	4642      	mov	r2, r8
 800d660:	f7ff f9ce 	bl	800ca00 <__lshift>
 800d664:	4606      	mov	r6, r0
 800d666:	2800      	cmp	r0, #0
 800d668:	d0d9      	beq.n	800d61e <_strtod_l+0x736>
 800d66a:	f1b9 0f00 	cmp.w	r9, #0
 800d66e:	dd08      	ble.n	800d682 <_strtod_l+0x79a>
 800d670:	4629      	mov	r1, r5
 800d672:	9805      	ldr	r0, [sp, #20]
 800d674:	464a      	mov	r2, r9
 800d676:	f7ff f9c3 	bl	800ca00 <__lshift>
 800d67a:	4605      	mov	r5, r0
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f43f ae43 	beq.w	800d308 <_strtod_l+0x420>
 800d682:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d684:	9805      	ldr	r0, [sp, #20]
 800d686:	4632      	mov	r2, r6
 800d688:	f7ff fa42 	bl	800cb10 <__mdiff>
 800d68c:	4604      	mov	r4, r0
 800d68e:	2800      	cmp	r0, #0
 800d690:	f43f ae3a 	beq.w	800d308 <_strtod_l+0x420>
 800d694:	2300      	movs	r3, #0
 800d696:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d69a:	60c3      	str	r3, [r0, #12]
 800d69c:	4629      	mov	r1, r5
 800d69e:	f7ff fa1b 	bl	800cad8 <__mcmp>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	da4e      	bge.n	800d744 <_strtod_l+0x85c>
 800d6a6:	ea58 080a 	orrs.w	r8, r8, sl
 800d6aa:	d174      	bne.n	800d796 <_strtod_l+0x8ae>
 800d6ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d170      	bne.n	800d796 <_strtod_l+0x8ae>
 800d6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6b8:	0d1b      	lsrs	r3, r3, #20
 800d6ba:	051b      	lsls	r3, r3, #20
 800d6bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6c0:	d969      	bls.n	800d796 <_strtod_l+0x8ae>
 800d6c2:	6963      	ldr	r3, [r4, #20]
 800d6c4:	b913      	cbnz	r3, 800d6cc <_strtod_l+0x7e4>
 800d6c6:	6923      	ldr	r3, [r4, #16]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	dd64      	ble.n	800d796 <_strtod_l+0x8ae>
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	9805      	ldr	r0, [sp, #20]
 800d6d2:	f7ff f995 	bl	800ca00 <__lshift>
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	4604      	mov	r4, r0
 800d6da:	f7ff f9fd 	bl	800cad8 <__mcmp>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	dd59      	ble.n	800d796 <_strtod_l+0x8ae>
 800d6e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6e6:	9a06      	ldr	r2, [sp, #24]
 800d6e8:	0d1b      	lsrs	r3, r3, #20
 800d6ea:	051b      	lsls	r3, r3, #20
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	d070      	beq.n	800d7d2 <_strtod_l+0x8ea>
 800d6f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6f4:	d86d      	bhi.n	800d7d2 <_strtod_l+0x8ea>
 800d6f6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d6fa:	f67f ae99 	bls.w	800d430 <_strtod_l+0x548>
 800d6fe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800d730 <_strtod_l+0x848>
 800d702:	ec4b ab16 	vmov	d6, sl, fp
 800d706:	4b0e      	ldr	r3, [pc, #56]	@ (800d740 <_strtod_l+0x858>)
 800d708:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d70c:	ee17 2a90 	vmov	r2, s15
 800d710:	4013      	ands	r3, r2
 800d712:	ec5b ab17 	vmov	sl, fp, d7
 800d716:	2b00      	cmp	r3, #0
 800d718:	f47f ae01 	bne.w	800d31e <_strtod_l+0x436>
 800d71c:	9a05      	ldr	r2, [sp, #20]
 800d71e:	2322      	movs	r3, #34	@ 0x22
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	e5fc      	b.n	800d31e <_strtod_l+0x436>
 800d724:	f3af 8000 	nop.w
 800d728:	ffc00000 	.word	0xffc00000
 800d72c:	41dfffff 	.word	0x41dfffff
 800d730:	00000000 	.word	0x00000000
 800d734:	39500000 	.word	0x39500000
 800d738:	08011630 	.word	0x08011630
 800d73c:	fffffc02 	.word	0xfffffc02
 800d740:	7ff00000 	.word	0x7ff00000
 800d744:	46d9      	mov	r9, fp
 800d746:	d15d      	bne.n	800d804 <_strtod_l+0x91c>
 800d748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d74c:	f1b8 0f00 	cmp.w	r8, #0
 800d750:	d02a      	beq.n	800d7a8 <_strtod_l+0x8c0>
 800d752:	4aab      	ldr	r2, [pc, #684]	@ (800da00 <_strtod_l+0xb18>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d12a      	bne.n	800d7ae <_strtod_l+0x8c6>
 800d758:	9b06      	ldr	r3, [sp, #24]
 800d75a:	4652      	mov	r2, sl
 800d75c:	b1fb      	cbz	r3, 800d79e <_strtod_l+0x8b6>
 800d75e:	4ba9      	ldr	r3, [pc, #676]	@ (800da04 <_strtod_l+0xb1c>)
 800d760:	ea0b 0303 	and.w	r3, fp, r3
 800d764:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d768:	f04f 31ff 	mov.w	r1, #4294967295
 800d76c:	d81a      	bhi.n	800d7a4 <_strtod_l+0x8bc>
 800d76e:	0d1b      	lsrs	r3, r3, #20
 800d770:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d774:	fa01 f303 	lsl.w	r3, r1, r3
 800d778:	429a      	cmp	r2, r3
 800d77a:	d118      	bne.n	800d7ae <_strtod_l+0x8c6>
 800d77c:	4ba2      	ldr	r3, [pc, #648]	@ (800da08 <_strtod_l+0xb20>)
 800d77e:	4599      	cmp	r9, r3
 800d780:	d102      	bne.n	800d788 <_strtod_l+0x8a0>
 800d782:	3201      	adds	r2, #1
 800d784:	f43f adc0 	beq.w	800d308 <_strtod_l+0x420>
 800d788:	4b9e      	ldr	r3, [pc, #632]	@ (800da04 <_strtod_l+0xb1c>)
 800d78a:	ea09 0303 	and.w	r3, r9, r3
 800d78e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d792:	f04f 0a00 	mov.w	sl, #0
 800d796:	9b06      	ldr	r3, [sp, #24]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1b0      	bne.n	800d6fe <_strtod_l+0x816>
 800d79c:	e5bf      	b.n	800d31e <_strtod_l+0x436>
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a2:	e7e9      	b.n	800d778 <_strtod_l+0x890>
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	e7e7      	b.n	800d778 <_strtod_l+0x890>
 800d7a8:	ea53 030a 	orrs.w	r3, r3, sl
 800d7ac:	d099      	beq.n	800d6e2 <_strtod_l+0x7fa>
 800d7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7b0:	b1c3      	cbz	r3, 800d7e4 <_strtod_l+0x8fc>
 800d7b2:	ea13 0f09 	tst.w	r3, r9
 800d7b6:	d0ee      	beq.n	800d796 <_strtod_l+0x8ae>
 800d7b8:	9a06      	ldr	r2, [sp, #24]
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	4659      	mov	r1, fp
 800d7be:	f1b8 0f00 	cmp.w	r8, #0
 800d7c2:	d013      	beq.n	800d7ec <_strtod_l+0x904>
 800d7c4:	f7ff fb73 	bl	800ceae <sulp>
 800d7c8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d7cc:	ec5b ab17 	vmov	sl, fp, d7
 800d7d0:	e7e1      	b.n	800d796 <_strtod_l+0x8ae>
 800d7d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d7d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7de:	f04f 3aff 	mov.w	sl, #4294967295
 800d7e2:	e7d8      	b.n	800d796 <_strtod_l+0x8ae>
 800d7e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7e6:	ea13 0f0a 	tst.w	r3, sl
 800d7ea:	e7e4      	b.n	800d7b6 <_strtod_l+0x8ce>
 800d7ec:	f7ff fb5f 	bl	800ceae <sulp>
 800d7f0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d7f4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7fc:	ec5b ab10 	vmov	sl, fp, d0
 800d800:	d1c9      	bne.n	800d796 <_strtod_l+0x8ae>
 800d802:	e615      	b.n	800d430 <_strtod_l+0x548>
 800d804:	4629      	mov	r1, r5
 800d806:	4620      	mov	r0, r4
 800d808:	f7ff fade 	bl	800cdc8 <__ratio>
 800d80c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800d810:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d818:	d85d      	bhi.n	800d8d6 <_strtod_l+0x9ee>
 800d81a:	f1b8 0f00 	cmp.w	r8, #0
 800d81e:	d164      	bne.n	800d8ea <_strtod_l+0xa02>
 800d820:	f1ba 0f00 	cmp.w	sl, #0
 800d824:	d14b      	bne.n	800d8be <_strtod_l+0x9d6>
 800d826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d82a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d160      	bne.n	800d8f4 <_strtod_l+0xa0c>
 800d832:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800d836:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83e:	d401      	bmi.n	800d844 <_strtod_l+0x95c>
 800d840:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d844:	eeb1 ab48 	vneg.f64	d10, d8
 800d848:	486e      	ldr	r0, [pc, #440]	@ (800da04 <_strtod_l+0xb1c>)
 800d84a:	4970      	ldr	r1, [pc, #448]	@ (800da0c <_strtod_l+0xb24>)
 800d84c:	ea09 0700 	and.w	r7, r9, r0
 800d850:	428f      	cmp	r7, r1
 800d852:	ec53 2b1a 	vmov	r2, r3, d10
 800d856:	d17d      	bne.n	800d954 <_strtod_l+0xa6c>
 800d858:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d85c:	ec4b ab1c 	vmov	d12, sl, fp
 800d860:	eeb0 0b4c 	vmov.f64	d0, d12
 800d864:	f7ff f9e8 	bl	800cc38 <__ulp>
 800d868:	4866      	ldr	r0, [pc, #408]	@ (800da04 <_strtod_l+0xb1c>)
 800d86a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d86e:	ee1c 3a90 	vmov	r3, s25
 800d872:	4a67      	ldr	r2, [pc, #412]	@ (800da10 <_strtod_l+0xb28>)
 800d874:	ea03 0100 	and.w	r1, r3, r0
 800d878:	4291      	cmp	r1, r2
 800d87a:	ec5b ab1c 	vmov	sl, fp, d12
 800d87e:	d93c      	bls.n	800d8fa <_strtod_l+0xa12>
 800d880:	ee19 2a90 	vmov	r2, s19
 800d884:	4b60      	ldr	r3, [pc, #384]	@ (800da08 <_strtod_l+0xb20>)
 800d886:	429a      	cmp	r2, r3
 800d888:	d104      	bne.n	800d894 <_strtod_l+0x9ac>
 800d88a:	ee19 3a10 	vmov	r3, s18
 800d88e:	3301      	adds	r3, #1
 800d890:	f43f ad3a 	beq.w	800d308 <_strtod_l+0x420>
 800d894:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800da08 <_strtod_l+0xb20>
 800d898:	f04f 3aff 	mov.w	sl, #4294967295
 800d89c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d89e:	9805      	ldr	r0, [sp, #20]
 800d8a0:	f7fe fe96 	bl	800c5d0 <_Bfree>
 800d8a4:	9805      	ldr	r0, [sp, #20]
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	f7fe fe92 	bl	800c5d0 <_Bfree>
 800d8ac:	9805      	ldr	r0, [sp, #20]
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	f7fe fe8e 	bl	800c5d0 <_Bfree>
 800d8b4:	9805      	ldr	r0, [sp, #20]
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	f7fe fe8a 	bl	800c5d0 <_Bfree>
 800d8bc:	e625      	b.n	800d50a <_strtod_l+0x622>
 800d8be:	f1ba 0f01 	cmp.w	sl, #1
 800d8c2:	d103      	bne.n	800d8cc <_strtod_l+0x9e4>
 800d8c4:	f1bb 0f00 	cmp.w	fp, #0
 800d8c8:	f43f adb2 	beq.w	800d430 <_strtod_l+0x548>
 800d8cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d8d0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d8d4:	e7b8      	b.n	800d848 <_strtod_l+0x960>
 800d8d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d8da:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d8de:	f1b8 0f00 	cmp.w	r8, #0
 800d8e2:	d0af      	beq.n	800d844 <_strtod_l+0x95c>
 800d8e4:	eeb0 ab48 	vmov.f64	d10, d8
 800d8e8:	e7ae      	b.n	800d848 <_strtod_l+0x960>
 800d8ea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d8ee:	eeb0 8b4a 	vmov.f64	d8, d10
 800d8f2:	e7a9      	b.n	800d848 <_strtod_l+0x960>
 800d8f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d8f8:	e7a6      	b.n	800d848 <_strtod_l+0x960>
 800d8fa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d8fe:	9b06      	ldr	r3, [sp, #24]
 800d900:	46d9      	mov	r9, fp
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1ca      	bne.n	800d89c <_strtod_l+0x9b4>
 800d906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d90a:	0d1b      	lsrs	r3, r3, #20
 800d90c:	051b      	lsls	r3, r3, #20
 800d90e:	429f      	cmp	r7, r3
 800d910:	d1c4      	bne.n	800d89c <_strtod_l+0x9b4>
 800d912:	ec51 0b18 	vmov	r0, r1, d8
 800d916:	f7f2 ff0f 	bl	8000738 <__aeabi_d2lz>
 800d91a:	f7f2 fec7 	bl	80006ac <__aeabi_l2d>
 800d91e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d922:	ec41 0b17 	vmov	d7, r0, r1
 800d926:	ea49 090a 	orr.w	r9, r9, sl
 800d92a:	ea59 0908 	orrs.w	r9, r9, r8
 800d92e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d932:	d03c      	beq.n	800d9ae <_strtod_l+0xac6>
 800d934:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d9e8 <_strtod_l+0xb00>
 800d938:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d940:	f53f aced 	bmi.w	800d31e <_strtod_l+0x436>
 800d944:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d9f0 <_strtod_l+0xb08>
 800d948:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d950:	dda4      	ble.n	800d89c <_strtod_l+0x9b4>
 800d952:	e4e4      	b.n	800d31e <_strtod_l+0x436>
 800d954:	9906      	ldr	r1, [sp, #24]
 800d956:	b1e1      	cbz	r1, 800d992 <_strtod_l+0xaaa>
 800d958:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d95c:	d819      	bhi.n	800d992 <_strtod_l+0xaaa>
 800d95e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d966:	d811      	bhi.n	800d98c <_strtod_l+0xaa4>
 800d968:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d96c:	ee18 3a10 	vmov	r3, s16
 800d970:	2b01      	cmp	r3, #1
 800d972:	bf38      	it	cc
 800d974:	2301      	movcc	r3, #1
 800d976:	ee08 3a10 	vmov	s16, r3
 800d97a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d97e:	f1b8 0f00 	cmp.w	r8, #0
 800d982:	d111      	bne.n	800d9a8 <_strtod_l+0xac0>
 800d984:	eeb1 7b48 	vneg.f64	d7, d8
 800d988:	ec53 2b17 	vmov	r2, r3, d7
 800d98c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d990:	1bcb      	subs	r3, r1, r7
 800d992:	eeb0 0b49 	vmov.f64	d0, d9
 800d996:	ec43 2b1a 	vmov	d10, r2, r3
 800d99a:	f7ff f94d 	bl	800cc38 <__ulp>
 800d99e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d9a2:	ec5b ab19 	vmov	sl, fp, d9
 800d9a6:	e7aa      	b.n	800d8fe <_strtod_l+0xa16>
 800d9a8:	eeb0 7b48 	vmov.f64	d7, d8
 800d9ac:	e7ec      	b.n	800d988 <_strtod_l+0xaa0>
 800d9ae:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d9f8 <_strtod_l+0xb10>
 800d9b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	f57f af6f 	bpl.w	800d89c <_strtod_l+0x9b4>
 800d9be:	e4ae      	b.n	800d31e <_strtod_l+0x436>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	9308      	str	r3, [sp, #32]
 800d9c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9c8:	6013      	str	r3, [r2, #0]
 800d9ca:	f7ff bacc 	b.w	800cf66 <_strtod_l+0x7e>
 800d9ce:	2a65      	cmp	r2, #101	@ 0x65
 800d9d0:	f43f abbc 	beq.w	800d14c <_strtod_l+0x264>
 800d9d4:	2a45      	cmp	r2, #69	@ 0x45
 800d9d6:	f43f abb9 	beq.w	800d14c <_strtod_l+0x264>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	9306      	str	r3, [sp, #24]
 800d9de:	f7ff bbf0 	b.w	800d1c2 <_strtod_l+0x2da>
 800d9e2:	bf00      	nop
 800d9e4:	f3af 8000 	nop.w
 800d9e8:	94a03595 	.word	0x94a03595
 800d9ec:	3fdfffff 	.word	0x3fdfffff
 800d9f0:	35afe535 	.word	0x35afe535
 800d9f4:	3fe00000 	.word	0x3fe00000
 800d9f8:	94a03595 	.word	0x94a03595
 800d9fc:	3fcfffff 	.word	0x3fcfffff
 800da00:	000fffff 	.word	0x000fffff
 800da04:	7ff00000 	.word	0x7ff00000
 800da08:	7fefffff 	.word	0x7fefffff
 800da0c:	7fe00000 	.word	0x7fe00000
 800da10:	7c9fffff 	.word	0x7c9fffff

0800da14 <_strtod_r>:
 800da14:	4b01      	ldr	r3, [pc, #4]	@ (800da1c <_strtod_r+0x8>)
 800da16:	f7ff ba67 	b.w	800cee8 <_strtod_l>
 800da1a:	bf00      	nop
 800da1c:	24000070 	.word	0x24000070

0800da20 <__ssputs_r>:
 800da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da24:	688e      	ldr	r6, [r1, #8]
 800da26:	461f      	mov	r7, r3
 800da28:	42be      	cmp	r6, r7
 800da2a:	680b      	ldr	r3, [r1, #0]
 800da2c:	4682      	mov	sl, r0
 800da2e:	460c      	mov	r4, r1
 800da30:	4690      	mov	r8, r2
 800da32:	d82d      	bhi.n	800da90 <__ssputs_r+0x70>
 800da34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da3c:	d026      	beq.n	800da8c <__ssputs_r+0x6c>
 800da3e:	6965      	ldr	r5, [r4, #20]
 800da40:	6909      	ldr	r1, [r1, #16]
 800da42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da46:	eba3 0901 	sub.w	r9, r3, r1
 800da4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da4e:	1c7b      	adds	r3, r7, #1
 800da50:	444b      	add	r3, r9
 800da52:	106d      	asrs	r5, r5, #1
 800da54:	429d      	cmp	r5, r3
 800da56:	bf38      	it	cc
 800da58:	461d      	movcc	r5, r3
 800da5a:	0553      	lsls	r3, r2, #21
 800da5c:	d527      	bpl.n	800daae <__ssputs_r+0x8e>
 800da5e:	4629      	mov	r1, r5
 800da60:	f7fc fc8e 	bl	800a380 <_malloc_r>
 800da64:	4606      	mov	r6, r0
 800da66:	b360      	cbz	r0, 800dac2 <__ssputs_r+0xa2>
 800da68:	6921      	ldr	r1, [r4, #16]
 800da6a:	464a      	mov	r2, r9
 800da6c:	f7fd ff29 	bl	800b8c2 <memcpy>
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	6126      	str	r6, [r4, #16]
 800da7e:	6165      	str	r5, [r4, #20]
 800da80:	444e      	add	r6, r9
 800da82:	eba5 0509 	sub.w	r5, r5, r9
 800da86:	6026      	str	r6, [r4, #0]
 800da88:	60a5      	str	r5, [r4, #8]
 800da8a:	463e      	mov	r6, r7
 800da8c:	42be      	cmp	r6, r7
 800da8e:	d900      	bls.n	800da92 <__ssputs_r+0x72>
 800da90:	463e      	mov	r6, r7
 800da92:	6820      	ldr	r0, [r4, #0]
 800da94:	4632      	mov	r2, r6
 800da96:	4641      	mov	r1, r8
 800da98:	f7fd fe02 	bl	800b6a0 <memmove>
 800da9c:	68a3      	ldr	r3, [r4, #8]
 800da9e:	1b9b      	subs	r3, r3, r6
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	4433      	add	r3, r6
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	2000      	movs	r0, #0
 800daaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daae:	462a      	mov	r2, r5
 800dab0:	f000 ff4d 	bl	800e94e <_realloc_r>
 800dab4:	4606      	mov	r6, r0
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d1e0      	bne.n	800da7c <__ssputs_r+0x5c>
 800daba:	6921      	ldr	r1, [r4, #16]
 800dabc:	4650      	mov	r0, sl
 800dabe:	f7fe fcfd 	bl	800c4bc <_free_r>
 800dac2:	230c      	movs	r3, #12
 800dac4:	f8ca 3000 	str.w	r3, [sl]
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dace:	81a3      	strh	r3, [r4, #12]
 800dad0:	f04f 30ff 	mov.w	r0, #4294967295
 800dad4:	e7e9      	b.n	800daaa <__ssputs_r+0x8a>
	...

0800dad8 <_svfiprintf_r>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	4698      	mov	r8, r3
 800dade:	898b      	ldrh	r3, [r1, #12]
 800dae0:	061b      	lsls	r3, r3, #24
 800dae2:	b09d      	sub	sp, #116	@ 0x74
 800dae4:	4607      	mov	r7, r0
 800dae6:	460d      	mov	r5, r1
 800dae8:	4614      	mov	r4, r2
 800daea:	d510      	bpl.n	800db0e <_svfiprintf_r+0x36>
 800daec:	690b      	ldr	r3, [r1, #16]
 800daee:	b973      	cbnz	r3, 800db0e <_svfiprintf_r+0x36>
 800daf0:	2140      	movs	r1, #64	@ 0x40
 800daf2:	f7fc fc45 	bl	800a380 <_malloc_r>
 800daf6:	6028      	str	r0, [r5, #0]
 800daf8:	6128      	str	r0, [r5, #16]
 800dafa:	b930      	cbnz	r0, 800db0a <_svfiprintf_r+0x32>
 800dafc:	230c      	movs	r3, #12
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	f04f 30ff 	mov.w	r0, #4294967295
 800db04:	b01d      	add	sp, #116	@ 0x74
 800db06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0a:	2340      	movs	r3, #64	@ 0x40
 800db0c:	616b      	str	r3, [r5, #20]
 800db0e:	2300      	movs	r3, #0
 800db10:	9309      	str	r3, [sp, #36]	@ 0x24
 800db12:	2320      	movs	r3, #32
 800db14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db18:	f8cd 800c 	str.w	r8, [sp, #12]
 800db1c:	2330      	movs	r3, #48	@ 0x30
 800db1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcbc <_svfiprintf_r+0x1e4>
 800db22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db26:	f04f 0901 	mov.w	r9, #1
 800db2a:	4623      	mov	r3, r4
 800db2c:	469a      	mov	sl, r3
 800db2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db32:	b10a      	cbz	r2, 800db38 <_svfiprintf_r+0x60>
 800db34:	2a25      	cmp	r2, #37	@ 0x25
 800db36:	d1f9      	bne.n	800db2c <_svfiprintf_r+0x54>
 800db38:	ebba 0b04 	subs.w	fp, sl, r4
 800db3c:	d00b      	beq.n	800db56 <_svfiprintf_r+0x7e>
 800db3e:	465b      	mov	r3, fp
 800db40:	4622      	mov	r2, r4
 800db42:	4629      	mov	r1, r5
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff ff6b 	bl	800da20 <__ssputs_r>
 800db4a:	3001      	adds	r0, #1
 800db4c:	f000 80a7 	beq.w	800dc9e <_svfiprintf_r+0x1c6>
 800db50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db52:	445a      	add	r2, fp
 800db54:	9209      	str	r2, [sp, #36]	@ 0x24
 800db56:	f89a 3000 	ldrb.w	r3, [sl]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f000 809f 	beq.w	800dc9e <_svfiprintf_r+0x1c6>
 800db60:	2300      	movs	r3, #0
 800db62:	f04f 32ff 	mov.w	r2, #4294967295
 800db66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db6a:	f10a 0a01 	add.w	sl, sl, #1
 800db6e:	9304      	str	r3, [sp, #16]
 800db70:	9307      	str	r3, [sp, #28]
 800db72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db76:	931a      	str	r3, [sp, #104]	@ 0x68
 800db78:	4654      	mov	r4, sl
 800db7a:	2205      	movs	r2, #5
 800db7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db80:	484e      	ldr	r0, [pc, #312]	@ (800dcbc <_svfiprintf_r+0x1e4>)
 800db82:	f7f2 fbad 	bl	80002e0 <memchr>
 800db86:	9a04      	ldr	r2, [sp, #16]
 800db88:	b9d8      	cbnz	r0, 800dbc2 <_svfiprintf_r+0xea>
 800db8a:	06d0      	lsls	r0, r2, #27
 800db8c:	bf44      	itt	mi
 800db8e:	2320      	movmi	r3, #32
 800db90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db94:	0711      	lsls	r1, r2, #28
 800db96:	bf44      	itt	mi
 800db98:	232b      	movmi	r3, #43	@ 0x2b
 800db9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db9e:	f89a 3000 	ldrb.w	r3, [sl]
 800dba2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dba4:	d015      	beq.n	800dbd2 <_svfiprintf_r+0xfa>
 800dba6:	9a07      	ldr	r2, [sp, #28]
 800dba8:	4654      	mov	r4, sl
 800dbaa:	2000      	movs	r0, #0
 800dbac:	f04f 0c0a 	mov.w	ip, #10
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbb6:	3b30      	subs	r3, #48	@ 0x30
 800dbb8:	2b09      	cmp	r3, #9
 800dbba:	d94b      	bls.n	800dc54 <_svfiprintf_r+0x17c>
 800dbbc:	b1b0      	cbz	r0, 800dbec <_svfiprintf_r+0x114>
 800dbbe:	9207      	str	r2, [sp, #28]
 800dbc0:	e014      	b.n	800dbec <_svfiprintf_r+0x114>
 800dbc2:	eba0 0308 	sub.w	r3, r0, r8
 800dbc6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	9304      	str	r3, [sp, #16]
 800dbce:	46a2      	mov	sl, r4
 800dbd0:	e7d2      	b.n	800db78 <_svfiprintf_r+0xa0>
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	1d19      	adds	r1, r3, #4
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	9103      	str	r1, [sp, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	bfbb      	ittet	lt
 800dbde:	425b      	neglt	r3, r3
 800dbe0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbe4:	9307      	strge	r3, [sp, #28]
 800dbe6:	9307      	strlt	r3, [sp, #28]
 800dbe8:	bfb8      	it	lt
 800dbea:	9204      	strlt	r2, [sp, #16]
 800dbec:	7823      	ldrb	r3, [r4, #0]
 800dbee:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbf0:	d10a      	bne.n	800dc08 <_svfiprintf_r+0x130>
 800dbf2:	7863      	ldrb	r3, [r4, #1]
 800dbf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbf6:	d132      	bne.n	800dc5e <_svfiprintf_r+0x186>
 800dbf8:	9b03      	ldr	r3, [sp, #12]
 800dbfa:	1d1a      	adds	r2, r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	9203      	str	r2, [sp, #12]
 800dc00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc04:	3402      	adds	r4, #2
 800dc06:	9305      	str	r3, [sp, #20]
 800dc08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dccc <_svfiprintf_r+0x1f4>
 800dc0c:	7821      	ldrb	r1, [r4, #0]
 800dc0e:	2203      	movs	r2, #3
 800dc10:	4650      	mov	r0, sl
 800dc12:	f7f2 fb65 	bl	80002e0 <memchr>
 800dc16:	b138      	cbz	r0, 800dc28 <_svfiprintf_r+0x150>
 800dc18:	9b04      	ldr	r3, [sp, #16]
 800dc1a:	eba0 000a 	sub.w	r0, r0, sl
 800dc1e:	2240      	movs	r2, #64	@ 0x40
 800dc20:	4082      	lsls	r2, r0
 800dc22:	4313      	orrs	r3, r2
 800dc24:	3401      	adds	r4, #1
 800dc26:	9304      	str	r3, [sp, #16]
 800dc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc2c:	4824      	ldr	r0, [pc, #144]	@ (800dcc0 <_svfiprintf_r+0x1e8>)
 800dc2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc32:	2206      	movs	r2, #6
 800dc34:	f7f2 fb54 	bl	80002e0 <memchr>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d036      	beq.n	800dcaa <_svfiprintf_r+0x1d2>
 800dc3c:	4b21      	ldr	r3, [pc, #132]	@ (800dcc4 <_svfiprintf_r+0x1ec>)
 800dc3e:	bb1b      	cbnz	r3, 800dc88 <_svfiprintf_r+0x1b0>
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	3307      	adds	r3, #7
 800dc44:	f023 0307 	bic.w	r3, r3, #7
 800dc48:	3308      	adds	r3, #8
 800dc4a:	9303      	str	r3, [sp, #12]
 800dc4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc4e:	4433      	add	r3, r6
 800dc50:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc52:	e76a      	b.n	800db2a <_svfiprintf_r+0x52>
 800dc54:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc58:	460c      	mov	r4, r1
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	e7a8      	b.n	800dbb0 <_svfiprintf_r+0xd8>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	3401      	adds	r4, #1
 800dc62:	9305      	str	r3, [sp, #20]
 800dc64:	4619      	mov	r1, r3
 800dc66:	f04f 0c0a 	mov.w	ip, #10
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc70:	3a30      	subs	r2, #48	@ 0x30
 800dc72:	2a09      	cmp	r2, #9
 800dc74:	d903      	bls.n	800dc7e <_svfiprintf_r+0x1a6>
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d0c6      	beq.n	800dc08 <_svfiprintf_r+0x130>
 800dc7a:	9105      	str	r1, [sp, #20]
 800dc7c:	e7c4      	b.n	800dc08 <_svfiprintf_r+0x130>
 800dc7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc82:	4604      	mov	r4, r0
 800dc84:	2301      	movs	r3, #1
 800dc86:	e7f0      	b.n	800dc6a <_svfiprintf_r+0x192>
 800dc88:	ab03      	add	r3, sp, #12
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	462a      	mov	r2, r5
 800dc8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcc8 <_svfiprintf_r+0x1f0>)
 800dc90:	a904      	add	r1, sp, #16
 800dc92:	4638      	mov	r0, r7
 800dc94:	f7fc fd0c 	bl	800a6b0 <_printf_float>
 800dc98:	1c42      	adds	r2, r0, #1
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	d1d6      	bne.n	800dc4c <_svfiprintf_r+0x174>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	065b      	lsls	r3, r3, #25
 800dca2:	f53f af2d 	bmi.w	800db00 <_svfiprintf_r+0x28>
 800dca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dca8:	e72c      	b.n	800db04 <_svfiprintf_r+0x2c>
 800dcaa:	ab03      	add	r3, sp, #12
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	462a      	mov	r2, r5
 800dcb0:	4b05      	ldr	r3, [pc, #20]	@ (800dcc8 <_svfiprintf_r+0x1f0>)
 800dcb2:	a904      	add	r1, sp, #16
 800dcb4:	4638      	mov	r0, r7
 800dcb6:	f7fc ff83 	bl	800abc0 <_printf_i>
 800dcba:	e7ed      	b.n	800dc98 <_svfiprintf_r+0x1c0>
 800dcbc:	08011658 	.word	0x08011658
 800dcc0:	08011662 	.word	0x08011662
 800dcc4:	0800a6b1 	.word	0x0800a6b1
 800dcc8:	0800da21 	.word	0x0800da21
 800dccc:	0801165e 	.word	0x0801165e

0800dcd0 <__sfputc_r>:
 800dcd0:	6893      	ldr	r3, [r2, #8]
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	b410      	push	{r4}
 800dcd8:	6093      	str	r3, [r2, #8]
 800dcda:	da08      	bge.n	800dcee <__sfputc_r+0x1e>
 800dcdc:	6994      	ldr	r4, [r2, #24]
 800dcde:	42a3      	cmp	r3, r4
 800dce0:	db01      	blt.n	800dce6 <__sfputc_r+0x16>
 800dce2:	290a      	cmp	r1, #10
 800dce4:	d103      	bne.n	800dcee <__sfputc_r+0x1e>
 800dce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcea:	f7fd bc44 	b.w	800b576 <__swbuf_r>
 800dcee:	6813      	ldr	r3, [r2, #0]
 800dcf0:	1c58      	adds	r0, r3, #1
 800dcf2:	6010      	str	r0, [r2, #0]
 800dcf4:	7019      	strb	r1, [r3, #0]
 800dcf6:	4608      	mov	r0, r1
 800dcf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <__sfputs_r>:
 800dcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd00:	4606      	mov	r6, r0
 800dd02:	460f      	mov	r7, r1
 800dd04:	4614      	mov	r4, r2
 800dd06:	18d5      	adds	r5, r2, r3
 800dd08:	42ac      	cmp	r4, r5
 800dd0a:	d101      	bne.n	800dd10 <__sfputs_r+0x12>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e007      	b.n	800dd20 <__sfputs_r+0x22>
 800dd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd14:	463a      	mov	r2, r7
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff ffda 	bl	800dcd0 <__sfputc_r>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d1f3      	bne.n	800dd08 <__sfputs_r+0xa>
 800dd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd24 <_vfiprintf_r>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	460d      	mov	r5, r1
 800dd2a:	b09d      	sub	sp, #116	@ 0x74
 800dd2c:	4614      	mov	r4, r2
 800dd2e:	4698      	mov	r8, r3
 800dd30:	4606      	mov	r6, r0
 800dd32:	b118      	cbz	r0, 800dd3c <_vfiprintf_r+0x18>
 800dd34:	6a03      	ldr	r3, [r0, #32]
 800dd36:	b90b      	cbnz	r3, 800dd3c <_vfiprintf_r+0x18>
 800dd38:	f7fd fafa 	bl	800b330 <__sinit>
 800dd3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd3e:	07d9      	lsls	r1, r3, #31
 800dd40:	d405      	bmi.n	800dd4e <_vfiprintf_r+0x2a>
 800dd42:	89ab      	ldrh	r3, [r5, #12]
 800dd44:	059a      	lsls	r2, r3, #22
 800dd46:	d402      	bmi.n	800dd4e <_vfiprintf_r+0x2a>
 800dd48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd4a:	f7fd fdb8 	bl	800b8be <__retarget_lock_acquire_recursive>
 800dd4e:	89ab      	ldrh	r3, [r5, #12]
 800dd50:	071b      	lsls	r3, r3, #28
 800dd52:	d501      	bpl.n	800dd58 <_vfiprintf_r+0x34>
 800dd54:	692b      	ldr	r3, [r5, #16]
 800dd56:	b99b      	cbnz	r3, 800dd80 <_vfiprintf_r+0x5c>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f7fd fc4a 	bl	800b5f4 <__swsetup_r>
 800dd60:	b170      	cbz	r0, 800dd80 <_vfiprintf_r+0x5c>
 800dd62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd64:	07dc      	lsls	r4, r3, #31
 800dd66:	d504      	bpl.n	800dd72 <_vfiprintf_r+0x4e>
 800dd68:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6c:	b01d      	add	sp, #116	@ 0x74
 800dd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd72:	89ab      	ldrh	r3, [r5, #12]
 800dd74:	0598      	lsls	r0, r3, #22
 800dd76:	d4f7      	bmi.n	800dd68 <_vfiprintf_r+0x44>
 800dd78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd7a:	f7fd fda1 	bl	800b8c0 <__retarget_lock_release_recursive>
 800dd7e:	e7f3      	b.n	800dd68 <_vfiprintf_r+0x44>
 800dd80:	2300      	movs	r3, #0
 800dd82:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd84:	2320      	movs	r3, #32
 800dd86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd8e:	2330      	movs	r3, #48	@ 0x30
 800dd90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df40 <_vfiprintf_r+0x21c>
 800dd94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd98:	f04f 0901 	mov.w	r9, #1
 800dd9c:	4623      	mov	r3, r4
 800dd9e:	469a      	mov	sl, r3
 800dda0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dda4:	b10a      	cbz	r2, 800ddaa <_vfiprintf_r+0x86>
 800dda6:	2a25      	cmp	r2, #37	@ 0x25
 800dda8:	d1f9      	bne.n	800dd9e <_vfiprintf_r+0x7a>
 800ddaa:	ebba 0b04 	subs.w	fp, sl, r4
 800ddae:	d00b      	beq.n	800ddc8 <_vfiprintf_r+0xa4>
 800ddb0:	465b      	mov	r3, fp
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f7ff ffa1 	bl	800dcfe <__sfputs_r>
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	f000 80a7 	beq.w	800df10 <_vfiprintf_r+0x1ec>
 800ddc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddc4:	445a      	add	r2, fp
 800ddc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddc8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f000 809f 	beq.w	800df10 <_vfiprintf_r+0x1ec>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dddc:	f10a 0a01 	add.w	sl, sl, #1
 800dde0:	9304      	str	r3, [sp, #16]
 800dde2:	9307      	str	r3, [sp, #28]
 800dde4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dde8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddea:	4654      	mov	r4, sl
 800ddec:	2205      	movs	r2, #5
 800ddee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf2:	4853      	ldr	r0, [pc, #332]	@ (800df40 <_vfiprintf_r+0x21c>)
 800ddf4:	f7f2 fa74 	bl	80002e0 <memchr>
 800ddf8:	9a04      	ldr	r2, [sp, #16]
 800ddfa:	b9d8      	cbnz	r0, 800de34 <_vfiprintf_r+0x110>
 800ddfc:	06d1      	lsls	r1, r2, #27
 800ddfe:	bf44      	itt	mi
 800de00:	2320      	movmi	r3, #32
 800de02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de06:	0713      	lsls	r3, r2, #28
 800de08:	bf44      	itt	mi
 800de0a:	232b      	movmi	r3, #43	@ 0x2b
 800de0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de10:	f89a 3000 	ldrb.w	r3, [sl]
 800de14:	2b2a      	cmp	r3, #42	@ 0x2a
 800de16:	d015      	beq.n	800de44 <_vfiprintf_r+0x120>
 800de18:	9a07      	ldr	r2, [sp, #28]
 800de1a:	4654      	mov	r4, sl
 800de1c:	2000      	movs	r0, #0
 800de1e:	f04f 0c0a 	mov.w	ip, #10
 800de22:	4621      	mov	r1, r4
 800de24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de28:	3b30      	subs	r3, #48	@ 0x30
 800de2a:	2b09      	cmp	r3, #9
 800de2c:	d94b      	bls.n	800dec6 <_vfiprintf_r+0x1a2>
 800de2e:	b1b0      	cbz	r0, 800de5e <_vfiprintf_r+0x13a>
 800de30:	9207      	str	r2, [sp, #28]
 800de32:	e014      	b.n	800de5e <_vfiprintf_r+0x13a>
 800de34:	eba0 0308 	sub.w	r3, r0, r8
 800de38:	fa09 f303 	lsl.w	r3, r9, r3
 800de3c:	4313      	orrs	r3, r2
 800de3e:	9304      	str	r3, [sp, #16]
 800de40:	46a2      	mov	sl, r4
 800de42:	e7d2      	b.n	800ddea <_vfiprintf_r+0xc6>
 800de44:	9b03      	ldr	r3, [sp, #12]
 800de46:	1d19      	adds	r1, r3, #4
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	9103      	str	r1, [sp, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfbb      	ittet	lt
 800de50:	425b      	neglt	r3, r3
 800de52:	f042 0202 	orrlt.w	r2, r2, #2
 800de56:	9307      	strge	r3, [sp, #28]
 800de58:	9307      	strlt	r3, [sp, #28]
 800de5a:	bfb8      	it	lt
 800de5c:	9204      	strlt	r2, [sp, #16]
 800de5e:	7823      	ldrb	r3, [r4, #0]
 800de60:	2b2e      	cmp	r3, #46	@ 0x2e
 800de62:	d10a      	bne.n	800de7a <_vfiprintf_r+0x156>
 800de64:	7863      	ldrb	r3, [r4, #1]
 800de66:	2b2a      	cmp	r3, #42	@ 0x2a
 800de68:	d132      	bne.n	800ded0 <_vfiprintf_r+0x1ac>
 800de6a:	9b03      	ldr	r3, [sp, #12]
 800de6c:	1d1a      	adds	r2, r3, #4
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	9203      	str	r2, [sp, #12]
 800de72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de76:	3402      	adds	r4, #2
 800de78:	9305      	str	r3, [sp, #20]
 800de7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df50 <_vfiprintf_r+0x22c>
 800de7e:	7821      	ldrb	r1, [r4, #0]
 800de80:	2203      	movs	r2, #3
 800de82:	4650      	mov	r0, sl
 800de84:	f7f2 fa2c 	bl	80002e0 <memchr>
 800de88:	b138      	cbz	r0, 800de9a <_vfiprintf_r+0x176>
 800de8a:	9b04      	ldr	r3, [sp, #16]
 800de8c:	eba0 000a 	sub.w	r0, r0, sl
 800de90:	2240      	movs	r2, #64	@ 0x40
 800de92:	4082      	lsls	r2, r0
 800de94:	4313      	orrs	r3, r2
 800de96:	3401      	adds	r4, #1
 800de98:	9304      	str	r3, [sp, #16]
 800de9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de9e:	4829      	ldr	r0, [pc, #164]	@ (800df44 <_vfiprintf_r+0x220>)
 800dea0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dea4:	2206      	movs	r2, #6
 800dea6:	f7f2 fa1b 	bl	80002e0 <memchr>
 800deaa:	2800      	cmp	r0, #0
 800deac:	d03f      	beq.n	800df2e <_vfiprintf_r+0x20a>
 800deae:	4b26      	ldr	r3, [pc, #152]	@ (800df48 <_vfiprintf_r+0x224>)
 800deb0:	bb1b      	cbnz	r3, 800defa <_vfiprintf_r+0x1d6>
 800deb2:	9b03      	ldr	r3, [sp, #12]
 800deb4:	3307      	adds	r3, #7
 800deb6:	f023 0307 	bic.w	r3, r3, #7
 800deba:	3308      	adds	r3, #8
 800debc:	9303      	str	r3, [sp, #12]
 800debe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dec0:	443b      	add	r3, r7
 800dec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dec4:	e76a      	b.n	800dd9c <_vfiprintf_r+0x78>
 800dec6:	fb0c 3202 	mla	r2, ip, r2, r3
 800deca:	460c      	mov	r4, r1
 800decc:	2001      	movs	r0, #1
 800dece:	e7a8      	b.n	800de22 <_vfiprintf_r+0xfe>
 800ded0:	2300      	movs	r3, #0
 800ded2:	3401      	adds	r4, #1
 800ded4:	9305      	str	r3, [sp, #20]
 800ded6:	4619      	mov	r1, r3
 800ded8:	f04f 0c0a 	mov.w	ip, #10
 800dedc:	4620      	mov	r0, r4
 800dede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dee2:	3a30      	subs	r2, #48	@ 0x30
 800dee4:	2a09      	cmp	r2, #9
 800dee6:	d903      	bls.n	800def0 <_vfiprintf_r+0x1cc>
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d0c6      	beq.n	800de7a <_vfiprintf_r+0x156>
 800deec:	9105      	str	r1, [sp, #20]
 800deee:	e7c4      	b.n	800de7a <_vfiprintf_r+0x156>
 800def0:	fb0c 2101 	mla	r1, ip, r1, r2
 800def4:	4604      	mov	r4, r0
 800def6:	2301      	movs	r3, #1
 800def8:	e7f0      	b.n	800dedc <_vfiprintf_r+0x1b8>
 800defa:	ab03      	add	r3, sp, #12
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	462a      	mov	r2, r5
 800df00:	4b12      	ldr	r3, [pc, #72]	@ (800df4c <_vfiprintf_r+0x228>)
 800df02:	a904      	add	r1, sp, #16
 800df04:	4630      	mov	r0, r6
 800df06:	f7fc fbd3 	bl	800a6b0 <_printf_float>
 800df0a:	4607      	mov	r7, r0
 800df0c:	1c78      	adds	r0, r7, #1
 800df0e:	d1d6      	bne.n	800debe <_vfiprintf_r+0x19a>
 800df10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df12:	07d9      	lsls	r1, r3, #31
 800df14:	d405      	bmi.n	800df22 <_vfiprintf_r+0x1fe>
 800df16:	89ab      	ldrh	r3, [r5, #12]
 800df18:	059a      	lsls	r2, r3, #22
 800df1a:	d402      	bmi.n	800df22 <_vfiprintf_r+0x1fe>
 800df1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df1e:	f7fd fccf 	bl	800b8c0 <__retarget_lock_release_recursive>
 800df22:	89ab      	ldrh	r3, [r5, #12]
 800df24:	065b      	lsls	r3, r3, #25
 800df26:	f53f af1f 	bmi.w	800dd68 <_vfiprintf_r+0x44>
 800df2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df2c:	e71e      	b.n	800dd6c <_vfiprintf_r+0x48>
 800df2e:	ab03      	add	r3, sp, #12
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	462a      	mov	r2, r5
 800df34:	4b05      	ldr	r3, [pc, #20]	@ (800df4c <_vfiprintf_r+0x228>)
 800df36:	a904      	add	r1, sp, #16
 800df38:	4630      	mov	r0, r6
 800df3a:	f7fc fe41 	bl	800abc0 <_printf_i>
 800df3e:	e7e4      	b.n	800df0a <_vfiprintf_r+0x1e6>
 800df40:	08011658 	.word	0x08011658
 800df44:	08011662 	.word	0x08011662
 800df48:	0800a6b1 	.word	0x0800a6b1
 800df4c:	0800dcff 	.word	0x0800dcff
 800df50:	0801165e 	.word	0x0801165e

0800df54 <__sflush_r>:
 800df54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5c:	0716      	lsls	r6, r2, #28
 800df5e:	4605      	mov	r5, r0
 800df60:	460c      	mov	r4, r1
 800df62:	d454      	bmi.n	800e00e <__sflush_r+0xba>
 800df64:	684b      	ldr	r3, [r1, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	dc02      	bgt.n	800df70 <__sflush_r+0x1c>
 800df6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dd48      	ble.n	800e002 <__sflush_r+0xae>
 800df70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df72:	2e00      	cmp	r6, #0
 800df74:	d045      	beq.n	800e002 <__sflush_r+0xae>
 800df76:	2300      	movs	r3, #0
 800df78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df7c:	682f      	ldr	r7, [r5, #0]
 800df7e:	6a21      	ldr	r1, [r4, #32]
 800df80:	602b      	str	r3, [r5, #0]
 800df82:	d030      	beq.n	800dfe6 <__sflush_r+0x92>
 800df84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	0759      	lsls	r1, r3, #29
 800df8a:	d505      	bpl.n	800df98 <__sflush_r+0x44>
 800df8c:	6863      	ldr	r3, [r4, #4]
 800df8e:	1ad2      	subs	r2, r2, r3
 800df90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df92:	b10b      	cbz	r3, 800df98 <__sflush_r+0x44>
 800df94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df96:	1ad2      	subs	r2, r2, r3
 800df98:	2300      	movs	r3, #0
 800df9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df9c:	6a21      	ldr	r1, [r4, #32]
 800df9e:	4628      	mov	r0, r5
 800dfa0:	47b0      	blx	r6
 800dfa2:	1c43      	adds	r3, r0, #1
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	d106      	bne.n	800dfb6 <__sflush_r+0x62>
 800dfa8:	6829      	ldr	r1, [r5, #0]
 800dfaa:	291d      	cmp	r1, #29
 800dfac:	d82b      	bhi.n	800e006 <__sflush_r+0xb2>
 800dfae:	4a2a      	ldr	r2, [pc, #168]	@ (800e058 <__sflush_r+0x104>)
 800dfb0:	410a      	asrs	r2, r1
 800dfb2:	07d6      	lsls	r6, r2, #31
 800dfb4:	d427      	bmi.n	800e006 <__sflush_r+0xb2>
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	6062      	str	r2, [r4, #4]
 800dfba:	04d9      	lsls	r1, r3, #19
 800dfbc:	6922      	ldr	r2, [r4, #16]
 800dfbe:	6022      	str	r2, [r4, #0]
 800dfc0:	d504      	bpl.n	800dfcc <__sflush_r+0x78>
 800dfc2:	1c42      	adds	r2, r0, #1
 800dfc4:	d101      	bne.n	800dfca <__sflush_r+0x76>
 800dfc6:	682b      	ldr	r3, [r5, #0]
 800dfc8:	b903      	cbnz	r3, 800dfcc <__sflush_r+0x78>
 800dfca:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfce:	602f      	str	r7, [r5, #0]
 800dfd0:	b1b9      	cbz	r1, 800e002 <__sflush_r+0xae>
 800dfd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfd6:	4299      	cmp	r1, r3
 800dfd8:	d002      	beq.n	800dfe0 <__sflush_r+0x8c>
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f7fe fa6e 	bl	800c4bc <_free_r>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfe4:	e00d      	b.n	800e002 <__sflush_r+0xae>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	4628      	mov	r0, r5
 800dfea:	47b0      	blx	r6
 800dfec:	4602      	mov	r2, r0
 800dfee:	1c50      	adds	r0, r2, #1
 800dff0:	d1c9      	bne.n	800df86 <__sflush_r+0x32>
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d0c6      	beq.n	800df86 <__sflush_r+0x32>
 800dff8:	2b1d      	cmp	r3, #29
 800dffa:	d001      	beq.n	800e000 <__sflush_r+0xac>
 800dffc:	2b16      	cmp	r3, #22
 800dffe:	d11e      	bne.n	800e03e <__sflush_r+0xea>
 800e000:	602f      	str	r7, [r5, #0]
 800e002:	2000      	movs	r0, #0
 800e004:	e022      	b.n	800e04c <__sflush_r+0xf8>
 800e006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e00a:	b21b      	sxth	r3, r3
 800e00c:	e01b      	b.n	800e046 <__sflush_r+0xf2>
 800e00e:	690f      	ldr	r7, [r1, #16]
 800e010:	2f00      	cmp	r7, #0
 800e012:	d0f6      	beq.n	800e002 <__sflush_r+0xae>
 800e014:	0793      	lsls	r3, r2, #30
 800e016:	680e      	ldr	r6, [r1, #0]
 800e018:	bf08      	it	eq
 800e01a:	694b      	ldreq	r3, [r1, #20]
 800e01c:	600f      	str	r7, [r1, #0]
 800e01e:	bf18      	it	ne
 800e020:	2300      	movne	r3, #0
 800e022:	eba6 0807 	sub.w	r8, r6, r7
 800e026:	608b      	str	r3, [r1, #8]
 800e028:	f1b8 0f00 	cmp.w	r8, #0
 800e02c:	dde9      	ble.n	800e002 <__sflush_r+0xae>
 800e02e:	6a21      	ldr	r1, [r4, #32]
 800e030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e032:	4643      	mov	r3, r8
 800e034:	463a      	mov	r2, r7
 800e036:	4628      	mov	r0, r5
 800e038:	47b0      	blx	r6
 800e03a:	2800      	cmp	r0, #0
 800e03c:	dc08      	bgt.n	800e050 <__sflush_r+0xfc>
 800e03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e046:	81a3      	strh	r3, [r4, #12]
 800e048:	f04f 30ff 	mov.w	r0, #4294967295
 800e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e050:	4407      	add	r7, r0
 800e052:	eba8 0800 	sub.w	r8, r8, r0
 800e056:	e7e7      	b.n	800e028 <__sflush_r+0xd4>
 800e058:	dfbffffe 	.word	0xdfbffffe

0800e05c <_fflush_r>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	690b      	ldr	r3, [r1, #16]
 800e060:	4605      	mov	r5, r0
 800e062:	460c      	mov	r4, r1
 800e064:	b913      	cbnz	r3, 800e06c <_fflush_r+0x10>
 800e066:	2500      	movs	r5, #0
 800e068:	4628      	mov	r0, r5
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	b118      	cbz	r0, 800e076 <_fflush_r+0x1a>
 800e06e:	6a03      	ldr	r3, [r0, #32]
 800e070:	b90b      	cbnz	r3, 800e076 <_fflush_r+0x1a>
 800e072:	f7fd f95d 	bl	800b330 <__sinit>
 800e076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0f3      	beq.n	800e066 <_fflush_r+0xa>
 800e07e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e080:	07d0      	lsls	r0, r2, #31
 800e082:	d404      	bmi.n	800e08e <_fflush_r+0x32>
 800e084:	0599      	lsls	r1, r3, #22
 800e086:	d402      	bmi.n	800e08e <_fflush_r+0x32>
 800e088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e08a:	f7fd fc18 	bl	800b8be <__retarget_lock_acquire_recursive>
 800e08e:	4628      	mov	r0, r5
 800e090:	4621      	mov	r1, r4
 800e092:	f7ff ff5f 	bl	800df54 <__sflush_r>
 800e096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e098:	07da      	lsls	r2, r3, #31
 800e09a:	4605      	mov	r5, r0
 800e09c:	d4e4      	bmi.n	800e068 <_fflush_r+0xc>
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	059b      	lsls	r3, r3, #22
 800e0a2:	d4e1      	bmi.n	800e068 <_fflush_r+0xc>
 800e0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0a6:	f7fd fc0b 	bl	800b8c0 <__retarget_lock_release_recursive>
 800e0aa:	e7dd      	b.n	800e068 <_fflush_r+0xc>

0800e0ac <__swhatbuf_r>:
 800e0ac:	b570      	push	{r4, r5, r6, lr}
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b4:	2900      	cmp	r1, #0
 800e0b6:	b096      	sub	sp, #88	@ 0x58
 800e0b8:	4615      	mov	r5, r2
 800e0ba:	461e      	mov	r6, r3
 800e0bc:	da0d      	bge.n	800e0da <__swhatbuf_r+0x2e>
 800e0be:	89a3      	ldrh	r3, [r4, #12]
 800e0c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0c4:	f04f 0100 	mov.w	r1, #0
 800e0c8:	bf14      	ite	ne
 800e0ca:	2340      	movne	r3, #64	@ 0x40
 800e0cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	6031      	str	r1, [r6, #0]
 800e0d4:	602b      	str	r3, [r5, #0]
 800e0d6:	b016      	add	sp, #88	@ 0x58
 800e0d8:	bd70      	pop	{r4, r5, r6, pc}
 800e0da:	466a      	mov	r2, sp
 800e0dc:	f000 f8ac 	bl	800e238 <_fstat_r>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	dbec      	blt.n	800e0be <__swhatbuf_r+0x12>
 800e0e4:	9901      	ldr	r1, [sp, #4]
 800e0e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0ee:	4259      	negs	r1, r3
 800e0f0:	4159      	adcs	r1, r3
 800e0f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0f6:	e7eb      	b.n	800e0d0 <__swhatbuf_r+0x24>

0800e0f8 <__smakebuf_r>:
 800e0f8:	898b      	ldrh	r3, [r1, #12]
 800e0fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0fc:	079d      	lsls	r5, r3, #30
 800e0fe:	4606      	mov	r6, r0
 800e100:	460c      	mov	r4, r1
 800e102:	d507      	bpl.n	800e114 <__smakebuf_r+0x1c>
 800e104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e108:	6023      	str	r3, [r4, #0]
 800e10a:	6123      	str	r3, [r4, #16]
 800e10c:	2301      	movs	r3, #1
 800e10e:	6163      	str	r3, [r4, #20]
 800e110:	b003      	add	sp, #12
 800e112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e114:	ab01      	add	r3, sp, #4
 800e116:	466a      	mov	r2, sp
 800e118:	f7ff ffc8 	bl	800e0ac <__swhatbuf_r>
 800e11c:	9f00      	ldr	r7, [sp, #0]
 800e11e:	4605      	mov	r5, r0
 800e120:	4639      	mov	r1, r7
 800e122:	4630      	mov	r0, r6
 800e124:	f7fc f92c 	bl	800a380 <_malloc_r>
 800e128:	b948      	cbnz	r0, 800e13e <__smakebuf_r+0x46>
 800e12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e12e:	059a      	lsls	r2, r3, #22
 800e130:	d4ee      	bmi.n	800e110 <__smakebuf_r+0x18>
 800e132:	f023 0303 	bic.w	r3, r3, #3
 800e136:	f043 0302 	orr.w	r3, r3, #2
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	e7e2      	b.n	800e104 <__smakebuf_r+0xc>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	6020      	str	r0, [r4, #0]
 800e142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	9b01      	ldr	r3, [sp, #4]
 800e14a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e14e:	b15b      	cbz	r3, 800e168 <__smakebuf_r+0x70>
 800e150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e154:	4630      	mov	r0, r6
 800e156:	f000 f881 	bl	800e25c <_isatty_r>
 800e15a:	b128      	cbz	r0, 800e168 <__smakebuf_r+0x70>
 800e15c:	89a3      	ldrh	r3, [r4, #12]
 800e15e:	f023 0303 	bic.w	r3, r3, #3
 800e162:	f043 0301 	orr.w	r3, r3, #1
 800e166:	81a3      	strh	r3, [r4, #12]
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	431d      	orrs	r5, r3
 800e16c:	81a5      	strh	r5, [r4, #12]
 800e16e:	e7cf      	b.n	800e110 <__smakebuf_r+0x18>

0800e170 <_putc_r>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	460d      	mov	r5, r1
 800e174:	4614      	mov	r4, r2
 800e176:	4606      	mov	r6, r0
 800e178:	b118      	cbz	r0, 800e182 <_putc_r+0x12>
 800e17a:	6a03      	ldr	r3, [r0, #32]
 800e17c:	b90b      	cbnz	r3, 800e182 <_putc_r+0x12>
 800e17e:	f7fd f8d7 	bl	800b330 <__sinit>
 800e182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e184:	07d8      	lsls	r0, r3, #31
 800e186:	d405      	bmi.n	800e194 <_putc_r+0x24>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	0599      	lsls	r1, r3, #22
 800e18c:	d402      	bmi.n	800e194 <_putc_r+0x24>
 800e18e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e190:	f7fd fb95 	bl	800b8be <__retarget_lock_acquire_recursive>
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	3b01      	subs	r3, #1
 800e198:	2b00      	cmp	r3, #0
 800e19a:	60a3      	str	r3, [r4, #8]
 800e19c:	da05      	bge.n	800e1aa <_putc_r+0x3a>
 800e19e:	69a2      	ldr	r2, [r4, #24]
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	db12      	blt.n	800e1ca <_putc_r+0x5a>
 800e1a4:	b2eb      	uxtb	r3, r5
 800e1a6:	2b0a      	cmp	r3, #10
 800e1a8:	d00f      	beq.n	800e1ca <_putc_r+0x5a>
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	1c5a      	adds	r2, r3, #1
 800e1ae:	6022      	str	r2, [r4, #0]
 800e1b0:	701d      	strb	r5, [r3, #0]
 800e1b2:	b2ed      	uxtb	r5, r5
 800e1b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1b6:	07da      	lsls	r2, r3, #31
 800e1b8:	d405      	bmi.n	800e1c6 <_putc_r+0x56>
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	059b      	lsls	r3, r3, #22
 800e1be:	d402      	bmi.n	800e1c6 <_putc_r+0x56>
 800e1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1c2:	f7fd fb7d 	bl	800b8c0 <__retarget_lock_release_recursive>
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f7fd f9d1 	bl	800b576 <__swbuf_r>
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	e7ed      	b.n	800e1b4 <_putc_r+0x44>

0800e1d8 <_raise_r>:
 800e1d8:	291f      	cmp	r1, #31
 800e1da:	b538      	push	{r3, r4, r5, lr}
 800e1dc:	4605      	mov	r5, r0
 800e1de:	460c      	mov	r4, r1
 800e1e0:	d904      	bls.n	800e1ec <_raise_r+0x14>
 800e1e2:	2316      	movs	r3, #22
 800e1e4:	6003      	str	r3, [r0, #0]
 800e1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e1ee:	b112      	cbz	r2, 800e1f6 <_raise_r+0x1e>
 800e1f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1f4:	b94b      	cbnz	r3, 800e20a <_raise_r+0x32>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f000 f852 	bl	800e2a0 <_getpid_r>
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4601      	mov	r1, r0
 800e200:	4628      	mov	r0, r5
 800e202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e206:	f000 b839 	b.w	800e27c <_kill_r>
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d00a      	beq.n	800e224 <_raise_r+0x4c>
 800e20e:	1c59      	adds	r1, r3, #1
 800e210:	d103      	bne.n	800e21a <_raise_r+0x42>
 800e212:	2316      	movs	r3, #22
 800e214:	6003      	str	r3, [r0, #0]
 800e216:	2001      	movs	r0, #1
 800e218:	e7e7      	b.n	800e1ea <_raise_r+0x12>
 800e21a:	2100      	movs	r1, #0
 800e21c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e220:	4620      	mov	r0, r4
 800e222:	4798      	blx	r3
 800e224:	2000      	movs	r0, #0
 800e226:	e7e0      	b.n	800e1ea <_raise_r+0x12>

0800e228 <raise>:
 800e228:	4b02      	ldr	r3, [pc, #8]	@ (800e234 <raise+0xc>)
 800e22a:	4601      	mov	r1, r0
 800e22c:	6818      	ldr	r0, [r3, #0]
 800e22e:	f7ff bfd3 	b.w	800e1d8 <_raise_r>
 800e232:	bf00      	nop
 800e234:	24000020 	.word	0x24000020

0800e238 <_fstat_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	@ (800e258 <_fstat_r+0x20>)
 800e23c:	2300      	movs	r3, #0
 800e23e:	4604      	mov	r4, r0
 800e240:	4608      	mov	r0, r1
 800e242:	4611      	mov	r1, r2
 800e244:	602b      	str	r3, [r5, #0]
 800e246:	f7f3 fded 	bl	8001e24 <_fstat>
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	d102      	bne.n	800e254 <_fstat_r+0x1c>
 800e24e:	682b      	ldr	r3, [r5, #0]
 800e250:	b103      	cbz	r3, 800e254 <_fstat_r+0x1c>
 800e252:	6023      	str	r3, [r4, #0]
 800e254:	bd38      	pop	{r3, r4, r5, pc}
 800e256:	bf00      	nop
 800e258:	240069cc 	.word	0x240069cc

0800e25c <_isatty_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d06      	ldr	r5, [pc, #24]	@ (800e278 <_isatty_r+0x1c>)
 800e260:	2300      	movs	r3, #0
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	f7f3 fdec 	bl	8001e44 <_isatty>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_isatty_r+0x1a>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_isatty_r+0x1a>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	240069cc 	.word	0x240069cc

0800e27c <_kill_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4d07      	ldr	r5, [pc, #28]	@ (800e29c <_kill_r+0x20>)
 800e280:	2300      	movs	r3, #0
 800e282:	4604      	mov	r4, r0
 800e284:	4608      	mov	r0, r1
 800e286:	4611      	mov	r1, r2
 800e288:	602b      	str	r3, [r5, #0]
 800e28a:	f7f3 fd87 	bl	8001d9c <_kill>
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	d102      	bne.n	800e298 <_kill_r+0x1c>
 800e292:	682b      	ldr	r3, [r5, #0]
 800e294:	b103      	cbz	r3, 800e298 <_kill_r+0x1c>
 800e296:	6023      	str	r3, [r4, #0]
 800e298:	bd38      	pop	{r3, r4, r5, pc}
 800e29a:	bf00      	nop
 800e29c:	240069cc 	.word	0x240069cc

0800e2a0 <_getpid_r>:
 800e2a0:	f7f3 bd74 	b.w	8001d8c <_getpid>
 800e2a4:	0000      	movs	r0, r0
	...

0800e2a8 <nan>:
 800e2a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e2b0 <nan+0x8>
 800e2ac:	4770      	bx	lr
 800e2ae:	bf00      	nop
 800e2b0:	00000000 	.word	0x00000000
 800e2b4:	7ff80000 	.word	0x7ff80000

0800e2b8 <rshift>:
 800e2b8:	6903      	ldr	r3, [r0, #16]
 800e2ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e2be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e2c6:	f100 0414 	add.w	r4, r0, #20
 800e2ca:	dd45      	ble.n	800e358 <rshift+0xa0>
 800e2cc:	f011 011f 	ands.w	r1, r1, #31
 800e2d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e2d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e2d8:	d10c      	bne.n	800e2f4 <rshift+0x3c>
 800e2da:	f100 0710 	add.w	r7, r0, #16
 800e2de:	4629      	mov	r1, r5
 800e2e0:	42b1      	cmp	r1, r6
 800e2e2:	d334      	bcc.n	800e34e <rshift+0x96>
 800e2e4:	1a9b      	subs	r3, r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	1eea      	subs	r2, r5, #3
 800e2ea:	4296      	cmp	r6, r2
 800e2ec:	bf38      	it	cc
 800e2ee:	2300      	movcc	r3, #0
 800e2f0:	4423      	add	r3, r4
 800e2f2:	e015      	b.n	800e320 <rshift+0x68>
 800e2f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e2f8:	f1c1 0820 	rsb	r8, r1, #32
 800e2fc:	40cf      	lsrs	r7, r1
 800e2fe:	f105 0e04 	add.w	lr, r5, #4
 800e302:	46a1      	mov	r9, r4
 800e304:	4576      	cmp	r6, lr
 800e306:	46f4      	mov	ip, lr
 800e308:	d815      	bhi.n	800e336 <rshift+0x7e>
 800e30a:	1a9a      	subs	r2, r3, r2
 800e30c:	0092      	lsls	r2, r2, #2
 800e30e:	3a04      	subs	r2, #4
 800e310:	3501      	adds	r5, #1
 800e312:	42ae      	cmp	r6, r5
 800e314:	bf38      	it	cc
 800e316:	2200      	movcc	r2, #0
 800e318:	18a3      	adds	r3, r4, r2
 800e31a:	50a7      	str	r7, [r4, r2]
 800e31c:	b107      	cbz	r7, 800e320 <rshift+0x68>
 800e31e:	3304      	adds	r3, #4
 800e320:	1b1a      	subs	r2, r3, r4
 800e322:	42a3      	cmp	r3, r4
 800e324:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e328:	bf08      	it	eq
 800e32a:	2300      	moveq	r3, #0
 800e32c:	6102      	str	r2, [r0, #16]
 800e32e:	bf08      	it	eq
 800e330:	6143      	streq	r3, [r0, #20]
 800e332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e336:	f8dc c000 	ldr.w	ip, [ip]
 800e33a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e33e:	ea4c 0707 	orr.w	r7, ip, r7
 800e342:	f849 7b04 	str.w	r7, [r9], #4
 800e346:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e34a:	40cf      	lsrs	r7, r1
 800e34c:	e7da      	b.n	800e304 <rshift+0x4c>
 800e34e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e352:	f847 cf04 	str.w	ip, [r7, #4]!
 800e356:	e7c3      	b.n	800e2e0 <rshift+0x28>
 800e358:	4623      	mov	r3, r4
 800e35a:	e7e1      	b.n	800e320 <rshift+0x68>

0800e35c <__hexdig_fun>:
 800e35c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e360:	2b09      	cmp	r3, #9
 800e362:	d802      	bhi.n	800e36a <__hexdig_fun+0xe>
 800e364:	3820      	subs	r0, #32
 800e366:	b2c0      	uxtb	r0, r0
 800e368:	4770      	bx	lr
 800e36a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e36e:	2b05      	cmp	r3, #5
 800e370:	d801      	bhi.n	800e376 <__hexdig_fun+0x1a>
 800e372:	3847      	subs	r0, #71	@ 0x47
 800e374:	e7f7      	b.n	800e366 <__hexdig_fun+0xa>
 800e376:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e37a:	2b05      	cmp	r3, #5
 800e37c:	d801      	bhi.n	800e382 <__hexdig_fun+0x26>
 800e37e:	3827      	subs	r0, #39	@ 0x27
 800e380:	e7f1      	b.n	800e366 <__hexdig_fun+0xa>
 800e382:	2000      	movs	r0, #0
 800e384:	4770      	bx	lr
	...

0800e388 <__gethex>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	b085      	sub	sp, #20
 800e38e:	468a      	mov	sl, r1
 800e390:	9302      	str	r3, [sp, #8]
 800e392:	680b      	ldr	r3, [r1, #0]
 800e394:	9001      	str	r0, [sp, #4]
 800e396:	4690      	mov	r8, r2
 800e398:	1c9c      	adds	r4, r3, #2
 800e39a:	46a1      	mov	r9, r4
 800e39c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e3a0:	2830      	cmp	r0, #48	@ 0x30
 800e3a2:	d0fa      	beq.n	800e39a <__gethex+0x12>
 800e3a4:	eba9 0303 	sub.w	r3, r9, r3
 800e3a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800e3ac:	f7ff ffd6 	bl	800e35c <__hexdig_fun>
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d168      	bne.n	800e488 <__gethex+0x100>
 800e3b6:	49a0      	ldr	r1, [pc, #640]	@ (800e638 <__gethex+0x2b0>)
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	4648      	mov	r0, r9
 800e3bc:	f7fd f992 	bl	800b6e4 <strncmp>
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d167      	bne.n	800e496 <__gethex+0x10e>
 800e3c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e3ca:	4626      	mov	r6, r4
 800e3cc:	f7ff ffc6 	bl	800e35c <__hexdig_fun>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d062      	beq.n	800e49a <__gethex+0x112>
 800e3d4:	4623      	mov	r3, r4
 800e3d6:	7818      	ldrb	r0, [r3, #0]
 800e3d8:	2830      	cmp	r0, #48	@ 0x30
 800e3da:	4699      	mov	r9, r3
 800e3dc:	f103 0301 	add.w	r3, r3, #1
 800e3e0:	d0f9      	beq.n	800e3d6 <__gethex+0x4e>
 800e3e2:	f7ff ffbb 	bl	800e35c <__hexdig_fun>
 800e3e6:	fab0 f580 	clz	r5, r0
 800e3ea:	096d      	lsrs	r5, r5, #5
 800e3ec:	f04f 0b01 	mov.w	fp, #1
 800e3f0:	464a      	mov	r2, r9
 800e3f2:	4616      	mov	r6, r2
 800e3f4:	3201      	adds	r2, #1
 800e3f6:	7830      	ldrb	r0, [r6, #0]
 800e3f8:	f7ff ffb0 	bl	800e35c <__hexdig_fun>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d1f8      	bne.n	800e3f2 <__gethex+0x6a>
 800e400:	498d      	ldr	r1, [pc, #564]	@ (800e638 <__gethex+0x2b0>)
 800e402:	2201      	movs	r2, #1
 800e404:	4630      	mov	r0, r6
 800e406:	f7fd f96d 	bl	800b6e4 <strncmp>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d13f      	bne.n	800e48e <__gethex+0x106>
 800e40e:	b944      	cbnz	r4, 800e422 <__gethex+0x9a>
 800e410:	1c74      	adds	r4, r6, #1
 800e412:	4622      	mov	r2, r4
 800e414:	4616      	mov	r6, r2
 800e416:	3201      	adds	r2, #1
 800e418:	7830      	ldrb	r0, [r6, #0]
 800e41a:	f7ff ff9f 	bl	800e35c <__hexdig_fun>
 800e41e:	2800      	cmp	r0, #0
 800e420:	d1f8      	bne.n	800e414 <__gethex+0x8c>
 800e422:	1ba4      	subs	r4, r4, r6
 800e424:	00a7      	lsls	r7, r4, #2
 800e426:	7833      	ldrb	r3, [r6, #0]
 800e428:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e42c:	2b50      	cmp	r3, #80	@ 0x50
 800e42e:	d13e      	bne.n	800e4ae <__gethex+0x126>
 800e430:	7873      	ldrb	r3, [r6, #1]
 800e432:	2b2b      	cmp	r3, #43	@ 0x2b
 800e434:	d033      	beq.n	800e49e <__gethex+0x116>
 800e436:	2b2d      	cmp	r3, #45	@ 0x2d
 800e438:	d034      	beq.n	800e4a4 <__gethex+0x11c>
 800e43a:	1c71      	adds	r1, r6, #1
 800e43c:	2400      	movs	r4, #0
 800e43e:	7808      	ldrb	r0, [r1, #0]
 800e440:	f7ff ff8c 	bl	800e35c <__hexdig_fun>
 800e444:	1e43      	subs	r3, r0, #1
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b18      	cmp	r3, #24
 800e44a:	d830      	bhi.n	800e4ae <__gethex+0x126>
 800e44c:	f1a0 0210 	sub.w	r2, r0, #16
 800e450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e454:	f7ff ff82 	bl	800e35c <__hexdig_fun>
 800e458:	f100 3cff 	add.w	ip, r0, #4294967295
 800e45c:	fa5f fc8c 	uxtb.w	ip, ip
 800e460:	f1bc 0f18 	cmp.w	ip, #24
 800e464:	f04f 030a 	mov.w	r3, #10
 800e468:	d91e      	bls.n	800e4a8 <__gethex+0x120>
 800e46a:	b104      	cbz	r4, 800e46e <__gethex+0xe6>
 800e46c:	4252      	negs	r2, r2
 800e46e:	4417      	add	r7, r2
 800e470:	f8ca 1000 	str.w	r1, [sl]
 800e474:	b1ed      	cbz	r5, 800e4b2 <__gethex+0x12a>
 800e476:	f1bb 0f00 	cmp.w	fp, #0
 800e47a:	bf0c      	ite	eq
 800e47c:	2506      	moveq	r5, #6
 800e47e:	2500      	movne	r5, #0
 800e480:	4628      	mov	r0, r5
 800e482:	b005      	add	sp, #20
 800e484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e488:	2500      	movs	r5, #0
 800e48a:	462c      	mov	r4, r5
 800e48c:	e7b0      	b.n	800e3f0 <__gethex+0x68>
 800e48e:	2c00      	cmp	r4, #0
 800e490:	d1c7      	bne.n	800e422 <__gethex+0x9a>
 800e492:	4627      	mov	r7, r4
 800e494:	e7c7      	b.n	800e426 <__gethex+0x9e>
 800e496:	464e      	mov	r6, r9
 800e498:	462f      	mov	r7, r5
 800e49a:	2501      	movs	r5, #1
 800e49c:	e7c3      	b.n	800e426 <__gethex+0x9e>
 800e49e:	2400      	movs	r4, #0
 800e4a0:	1cb1      	adds	r1, r6, #2
 800e4a2:	e7cc      	b.n	800e43e <__gethex+0xb6>
 800e4a4:	2401      	movs	r4, #1
 800e4a6:	e7fb      	b.n	800e4a0 <__gethex+0x118>
 800e4a8:	fb03 0002 	mla	r0, r3, r2, r0
 800e4ac:	e7ce      	b.n	800e44c <__gethex+0xc4>
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	e7de      	b.n	800e470 <__gethex+0xe8>
 800e4b2:	eba6 0309 	sub.w	r3, r6, r9
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	2b07      	cmp	r3, #7
 800e4bc:	dc0a      	bgt.n	800e4d4 <__gethex+0x14c>
 800e4be:	9801      	ldr	r0, [sp, #4]
 800e4c0:	f7fe f846 	bl	800c550 <_Balloc>
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	b940      	cbnz	r0, 800e4da <__gethex+0x152>
 800e4c8:	4b5c      	ldr	r3, [pc, #368]	@ (800e63c <__gethex+0x2b4>)
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	21e4      	movs	r1, #228	@ 0xe4
 800e4ce:	485c      	ldr	r0, [pc, #368]	@ (800e640 <__gethex+0x2b8>)
 800e4d0:	f7fb fefa 	bl	800a2c8 <__assert_func>
 800e4d4:	3101      	adds	r1, #1
 800e4d6:	105b      	asrs	r3, r3, #1
 800e4d8:	e7ef      	b.n	800e4ba <__gethex+0x132>
 800e4da:	f100 0a14 	add.w	sl, r0, #20
 800e4de:	2300      	movs	r3, #0
 800e4e0:	4655      	mov	r5, sl
 800e4e2:	469b      	mov	fp, r3
 800e4e4:	45b1      	cmp	r9, r6
 800e4e6:	d337      	bcc.n	800e558 <__gethex+0x1d0>
 800e4e8:	f845 bb04 	str.w	fp, [r5], #4
 800e4ec:	eba5 050a 	sub.w	r5, r5, sl
 800e4f0:	10ad      	asrs	r5, r5, #2
 800e4f2:	6125      	str	r5, [r4, #16]
 800e4f4:	4658      	mov	r0, fp
 800e4f6:	f7fe f91d 	bl	800c734 <__hi0bits>
 800e4fa:	016d      	lsls	r5, r5, #5
 800e4fc:	f8d8 6000 	ldr.w	r6, [r8]
 800e500:	1a2d      	subs	r5, r5, r0
 800e502:	42b5      	cmp	r5, r6
 800e504:	dd54      	ble.n	800e5b0 <__gethex+0x228>
 800e506:	1bad      	subs	r5, r5, r6
 800e508:	4629      	mov	r1, r5
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7fe fcae 	bl	800ce6c <__any_on>
 800e510:	4681      	mov	r9, r0
 800e512:	b178      	cbz	r0, 800e534 <__gethex+0x1ac>
 800e514:	1e6b      	subs	r3, r5, #1
 800e516:	1159      	asrs	r1, r3, #5
 800e518:	f003 021f 	and.w	r2, r3, #31
 800e51c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e520:	f04f 0901 	mov.w	r9, #1
 800e524:	fa09 f202 	lsl.w	r2, r9, r2
 800e528:	420a      	tst	r2, r1
 800e52a:	d003      	beq.n	800e534 <__gethex+0x1ac>
 800e52c:	454b      	cmp	r3, r9
 800e52e:	dc36      	bgt.n	800e59e <__gethex+0x216>
 800e530:	f04f 0902 	mov.w	r9, #2
 800e534:	4629      	mov	r1, r5
 800e536:	4620      	mov	r0, r4
 800e538:	f7ff febe 	bl	800e2b8 <rshift>
 800e53c:	442f      	add	r7, r5
 800e53e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e542:	42bb      	cmp	r3, r7
 800e544:	da42      	bge.n	800e5cc <__gethex+0x244>
 800e546:	9801      	ldr	r0, [sp, #4]
 800e548:	4621      	mov	r1, r4
 800e54a:	f7fe f841 	bl	800c5d0 <_Bfree>
 800e54e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e550:	2300      	movs	r3, #0
 800e552:	6013      	str	r3, [r2, #0]
 800e554:	25a3      	movs	r5, #163	@ 0xa3
 800e556:	e793      	b.n	800e480 <__gethex+0xf8>
 800e558:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e55c:	2a2e      	cmp	r2, #46	@ 0x2e
 800e55e:	d012      	beq.n	800e586 <__gethex+0x1fe>
 800e560:	2b20      	cmp	r3, #32
 800e562:	d104      	bne.n	800e56e <__gethex+0x1e6>
 800e564:	f845 bb04 	str.w	fp, [r5], #4
 800e568:	f04f 0b00 	mov.w	fp, #0
 800e56c:	465b      	mov	r3, fp
 800e56e:	7830      	ldrb	r0, [r6, #0]
 800e570:	9303      	str	r3, [sp, #12]
 800e572:	f7ff fef3 	bl	800e35c <__hexdig_fun>
 800e576:	9b03      	ldr	r3, [sp, #12]
 800e578:	f000 000f 	and.w	r0, r0, #15
 800e57c:	4098      	lsls	r0, r3
 800e57e:	ea4b 0b00 	orr.w	fp, fp, r0
 800e582:	3304      	adds	r3, #4
 800e584:	e7ae      	b.n	800e4e4 <__gethex+0x15c>
 800e586:	45b1      	cmp	r9, r6
 800e588:	d8ea      	bhi.n	800e560 <__gethex+0x1d8>
 800e58a:	492b      	ldr	r1, [pc, #172]	@ (800e638 <__gethex+0x2b0>)
 800e58c:	9303      	str	r3, [sp, #12]
 800e58e:	2201      	movs	r2, #1
 800e590:	4630      	mov	r0, r6
 800e592:	f7fd f8a7 	bl	800b6e4 <strncmp>
 800e596:	9b03      	ldr	r3, [sp, #12]
 800e598:	2800      	cmp	r0, #0
 800e59a:	d1e1      	bne.n	800e560 <__gethex+0x1d8>
 800e59c:	e7a2      	b.n	800e4e4 <__gethex+0x15c>
 800e59e:	1ea9      	subs	r1, r5, #2
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f7fe fc63 	bl	800ce6c <__any_on>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d0c2      	beq.n	800e530 <__gethex+0x1a8>
 800e5aa:	f04f 0903 	mov.w	r9, #3
 800e5ae:	e7c1      	b.n	800e534 <__gethex+0x1ac>
 800e5b0:	da09      	bge.n	800e5c6 <__gethex+0x23e>
 800e5b2:	1b75      	subs	r5, r6, r5
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	9801      	ldr	r0, [sp, #4]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	f7fe fa21 	bl	800ca00 <__lshift>
 800e5be:	1b7f      	subs	r7, r7, r5
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	f100 0a14 	add.w	sl, r0, #20
 800e5c6:	f04f 0900 	mov.w	r9, #0
 800e5ca:	e7b8      	b.n	800e53e <__gethex+0x1b6>
 800e5cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e5d0:	42bd      	cmp	r5, r7
 800e5d2:	dd6f      	ble.n	800e6b4 <__gethex+0x32c>
 800e5d4:	1bed      	subs	r5, r5, r7
 800e5d6:	42ae      	cmp	r6, r5
 800e5d8:	dc34      	bgt.n	800e644 <__gethex+0x2bc>
 800e5da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d022      	beq.n	800e628 <__gethex+0x2a0>
 800e5e2:	2b03      	cmp	r3, #3
 800e5e4:	d024      	beq.n	800e630 <__gethex+0x2a8>
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d115      	bne.n	800e616 <__gethex+0x28e>
 800e5ea:	42ae      	cmp	r6, r5
 800e5ec:	d113      	bne.n	800e616 <__gethex+0x28e>
 800e5ee:	2e01      	cmp	r6, #1
 800e5f0:	d10b      	bne.n	800e60a <__gethex+0x282>
 800e5f2:	9a02      	ldr	r2, [sp, #8]
 800e5f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5f8:	6013      	str	r3, [r2, #0]
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	6123      	str	r3, [r4, #16]
 800e5fe:	f8ca 3000 	str.w	r3, [sl]
 800e602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e604:	2562      	movs	r5, #98	@ 0x62
 800e606:	601c      	str	r4, [r3, #0]
 800e608:	e73a      	b.n	800e480 <__gethex+0xf8>
 800e60a:	1e71      	subs	r1, r6, #1
 800e60c:	4620      	mov	r0, r4
 800e60e:	f7fe fc2d 	bl	800ce6c <__any_on>
 800e612:	2800      	cmp	r0, #0
 800e614:	d1ed      	bne.n	800e5f2 <__gethex+0x26a>
 800e616:	9801      	ldr	r0, [sp, #4]
 800e618:	4621      	mov	r1, r4
 800e61a:	f7fd ffd9 	bl	800c5d0 <_Bfree>
 800e61e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e620:	2300      	movs	r3, #0
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	2550      	movs	r5, #80	@ 0x50
 800e626:	e72b      	b.n	800e480 <__gethex+0xf8>
 800e628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1f3      	bne.n	800e616 <__gethex+0x28e>
 800e62e:	e7e0      	b.n	800e5f2 <__gethex+0x26a>
 800e630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1dd      	bne.n	800e5f2 <__gethex+0x26a>
 800e636:	e7ee      	b.n	800e616 <__gethex+0x28e>
 800e638:	08011600 	.word	0x08011600
 800e63c:	0801149a 	.word	0x0801149a
 800e640:	08011671 	.word	0x08011671
 800e644:	1e6f      	subs	r7, r5, #1
 800e646:	f1b9 0f00 	cmp.w	r9, #0
 800e64a:	d130      	bne.n	800e6ae <__gethex+0x326>
 800e64c:	b127      	cbz	r7, 800e658 <__gethex+0x2d0>
 800e64e:	4639      	mov	r1, r7
 800e650:	4620      	mov	r0, r4
 800e652:	f7fe fc0b 	bl	800ce6c <__any_on>
 800e656:	4681      	mov	r9, r0
 800e658:	117a      	asrs	r2, r7, #5
 800e65a:	2301      	movs	r3, #1
 800e65c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e660:	f007 071f 	and.w	r7, r7, #31
 800e664:	40bb      	lsls	r3, r7
 800e666:	4213      	tst	r3, r2
 800e668:	4629      	mov	r1, r5
 800e66a:	4620      	mov	r0, r4
 800e66c:	bf18      	it	ne
 800e66e:	f049 0902 	orrne.w	r9, r9, #2
 800e672:	f7ff fe21 	bl	800e2b8 <rshift>
 800e676:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e67a:	1b76      	subs	r6, r6, r5
 800e67c:	2502      	movs	r5, #2
 800e67e:	f1b9 0f00 	cmp.w	r9, #0
 800e682:	d047      	beq.n	800e714 <__gethex+0x38c>
 800e684:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d015      	beq.n	800e6b8 <__gethex+0x330>
 800e68c:	2b03      	cmp	r3, #3
 800e68e:	d017      	beq.n	800e6c0 <__gethex+0x338>
 800e690:	2b01      	cmp	r3, #1
 800e692:	d109      	bne.n	800e6a8 <__gethex+0x320>
 800e694:	f019 0f02 	tst.w	r9, #2
 800e698:	d006      	beq.n	800e6a8 <__gethex+0x320>
 800e69a:	f8da 3000 	ldr.w	r3, [sl]
 800e69e:	ea49 0903 	orr.w	r9, r9, r3
 800e6a2:	f019 0f01 	tst.w	r9, #1
 800e6a6:	d10e      	bne.n	800e6c6 <__gethex+0x33e>
 800e6a8:	f045 0510 	orr.w	r5, r5, #16
 800e6ac:	e032      	b.n	800e714 <__gethex+0x38c>
 800e6ae:	f04f 0901 	mov.w	r9, #1
 800e6b2:	e7d1      	b.n	800e658 <__gethex+0x2d0>
 800e6b4:	2501      	movs	r5, #1
 800e6b6:	e7e2      	b.n	800e67e <__gethex+0x2f6>
 800e6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ba:	f1c3 0301 	rsb	r3, r3, #1
 800e6be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0f0      	beq.n	800e6a8 <__gethex+0x320>
 800e6c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e6ca:	f104 0314 	add.w	r3, r4, #20
 800e6ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e6d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e6d6:	f04f 0c00 	mov.w	ip, #0
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e6e4:	d01b      	beq.n	800e71e <__gethex+0x396>
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	6002      	str	r2, [r0, #0]
 800e6ea:	2d02      	cmp	r5, #2
 800e6ec:	f104 0314 	add.w	r3, r4, #20
 800e6f0:	d13c      	bne.n	800e76c <__gethex+0x3e4>
 800e6f2:	f8d8 2000 	ldr.w	r2, [r8]
 800e6f6:	3a01      	subs	r2, #1
 800e6f8:	42b2      	cmp	r2, r6
 800e6fa:	d109      	bne.n	800e710 <__gethex+0x388>
 800e6fc:	1171      	asrs	r1, r6, #5
 800e6fe:	2201      	movs	r2, #1
 800e700:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e704:	f006 061f 	and.w	r6, r6, #31
 800e708:	fa02 f606 	lsl.w	r6, r2, r6
 800e70c:	421e      	tst	r6, r3
 800e70e:	d13a      	bne.n	800e786 <__gethex+0x3fe>
 800e710:	f045 0520 	orr.w	r5, r5, #32
 800e714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e716:	601c      	str	r4, [r3, #0]
 800e718:	9b02      	ldr	r3, [sp, #8]
 800e71a:	601f      	str	r7, [r3, #0]
 800e71c:	e6b0      	b.n	800e480 <__gethex+0xf8>
 800e71e:	4299      	cmp	r1, r3
 800e720:	f843 cc04 	str.w	ip, [r3, #-4]
 800e724:	d8d9      	bhi.n	800e6da <__gethex+0x352>
 800e726:	68a3      	ldr	r3, [r4, #8]
 800e728:	459b      	cmp	fp, r3
 800e72a:	db17      	blt.n	800e75c <__gethex+0x3d4>
 800e72c:	6861      	ldr	r1, [r4, #4]
 800e72e:	9801      	ldr	r0, [sp, #4]
 800e730:	3101      	adds	r1, #1
 800e732:	f7fd ff0d 	bl	800c550 <_Balloc>
 800e736:	4681      	mov	r9, r0
 800e738:	b918      	cbnz	r0, 800e742 <__gethex+0x3ba>
 800e73a:	4b1a      	ldr	r3, [pc, #104]	@ (800e7a4 <__gethex+0x41c>)
 800e73c:	4602      	mov	r2, r0
 800e73e:	2184      	movs	r1, #132	@ 0x84
 800e740:	e6c5      	b.n	800e4ce <__gethex+0x146>
 800e742:	6922      	ldr	r2, [r4, #16]
 800e744:	3202      	adds	r2, #2
 800e746:	f104 010c 	add.w	r1, r4, #12
 800e74a:	0092      	lsls	r2, r2, #2
 800e74c:	300c      	adds	r0, #12
 800e74e:	f7fd f8b8 	bl	800b8c2 <memcpy>
 800e752:	4621      	mov	r1, r4
 800e754:	9801      	ldr	r0, [sp, #4]
 800e756:	f7fd ff3b 	bl	800c5d0 <_Bfree>
 800e75a:	464c      	mov	r4, r9
 800e75c:	6923      	ldr	r3, [r4, #16]
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e764:	6122      	str	r2, [r4, #16]
 800e766:	2201      	movs	r2, #1
 800e768:	615a      	str	r2, [r3, #20]
 800e76a:	e7be      	b.n	800e6ea <__gethex+0x362>
 800e76c:	6922      	ldr	r2, [r4, #16]
 800e76e:	455a      	cmp	r2, fp
 800e770:	dd0b      	ble.n	800e78a <__gethex+0x402>
 800e772:	2101      	movs	r1, #1
 800e774:	4620      	mov	r0, r4
 800e776:	f7ff fd9f 	bl	800e2b8 <rshift>
 800e77a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e77e:	3701      	adds	r7, #1
 800e780:	42bb      	cmp	r3, r7
 800e782:	f6ff aee0 	blt.w	800e546 <__gethex+0x1be>
 800e786:	2501      	movs	r5, #1
 800e788:	e7c2      	b.n	800e710 <__gethex+0x388>
 800e78a:	f016 061f 	ands.w	r6, r6, #31
 800e78e:	d0fa      	beq.n	800e786 <__gethex+0x3fe>
 800e790:	4453      	add	r3, sl
 800e792:	f1c6 0620 	rsb	r6, r6, #32
 800e796:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e79a:	f7fd ffcb 	bl	800c734 <__hi0bits>
 800e79e:	42b0      	cmp	r0, r6
 800e7a0:	dbe7      	blt.n	800e772 <__gethex+0x3ea>
 800e7a2:	e7f0      	b.n	800e786 <__gethex+0x3fe>
 800e7a4:	0801149a 	.word	0x0801149a

0800e7a8 <L_shift>:
 800e7a8:	f1c2 0208 	rsb	r2, r2, #8
 800e7ac:	0092      	lsls	r2, r2, #2
 800e7ae:	b570      	push	{r4, r5, r6, lr}
 800e7b0:	f1c2 0620 	rsb	r6, r2, #32
 800e7b4:	6843      	ldr	r3, [r0, #4]
 800e7b6:	6804      	ldr	r4, [r0, #0]
 800e7b8:	fa03 f506 	lsl.w	r5, r3, r6
 800e7bc:	432c      	orrs	r4, r5
 800e7be:	40d3      	lsrs	r3, r2
 800e7c0:	6004      	str	r4, [r0, #0]
 800e7c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e7c6:	4288      	cmp	r0, r1
 800e7c8:	d3f4      	bcc.n	800e7b4 <L_shift+0xc>
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}

0800e7cc <__match>:
 800e7cc:	b530      	push	{r4, r5, lr}
 800e7ce:	6803      	ldr	r3, [r0, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7d6:	b914      	cbnz	r4, 800e7de <__match+0x12>
 800e7d8:	6003      	str	r3, [r0, #0]
 800e7da:	2001      	movs	r0, #1
 800e7dc:	bd30      	pop	{r4, r5, pc}
 800e7de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e7e6:	2d19      	cmp	r5, #25
 800e7e8:	bf98      	it	ls
 800e7ea:	3220      	addls	r2, #32
 800e7ec:	42a2      	cmp	r2, r4
 800e7ee:	d0f0      	beq.n	800e7d2 <__match+0x6>
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e7f3      	b.n	800e7dc <__match+0x10>

0800e7f4 <__hexnan>:
 800e7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f8:	680b      	ldr	r3, [r1, #0]
 800e7fa:	6801      	ldr	r1, [r0, #0]
 800e7fc:	115e      	asrs	r6, r3, #5
 800e7fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e802:	f013 031f 	ands.w	r3, r3, #31
 800e806:	b087      	sub	sp, #28
 800e808:	bf18      	it	ne
 800e80a:	3604      	addne	r6, #4
 800e80c:	2500      	movs	r5, #0
 800e80e:	1f37      	subs	r7, r6, #4
 800e810:	4682      	mov	sl, r0
 800e812:	4690      	mov	r8, r2
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	f846 5c04 	str.w	r5, [r6, #-4]
 800e81a:	46b9      	mov	r9, r7
 800e81c:	463c      	mov	r4, r7
 800e81e:	9502      	str	r5, [sp, #8]
 800e820:	46ab      	mov	fp, r5
 800e822:	784a      	ldrb	r2, [r1, #1]
 800e824:	1c4b      	adds	r3, r1, #1
 800e826:	9303      	str	r3, [sp, #12]
 800e828:	b342      	cbz	r2, 800e87c <__hexnan+0x88>
 800e82a:	4610      	mov	r0, r2
 800e82c:	9105      	str	r1, [sp, #20]
 800e82e:	9204      	str	r2, [sp, #16]
 800e830:	f7ff fd94 	bl	800e35c <__hexdig_fun>
 800e834:	2800      	cmp	r0, #0
 800e836:	d151      	bne.n	800e8dc <__hexnan+0xe8>
 800e838:	9a04      	ldr	r2, [sp, #16]
 800e83a:	9905      	ldr	r1, [sp, #20]
 800e83c:	2a20      	cmp	r2, #32
 800e83e:	d818      	bhi.n	800e872 <__hexnan+0x7e>
 800e840:	9b02      	ldr	r3, [sp, #8]
 800e842:	459b      	cmp	fp, r3
 800e844:	dd13      	ble.n	800e86e <__hexnan+0x7a>
 800e846:	454c      	cmp	r4, r9
 800e848:	d206      	bcs.n	800e858 <__hexnan+0x64>
 800e84a:	2d07      	cmp	r5, #7
 800e84c:	dc04      	bgt.n	800e858 <__hexnan+0x64>
 800e84e:	462a      	mov	r2, r5
 800e850:	4649      	mov	r1, r9
 800e852:	4620      	mov	r0, r4
 800e854:	f7ff ffa8 	bl	800e7a8 <L_shift>
 800e858:	4544      	cmp	r4, r8
 800e85a:	d952      	bls.n	800e902 <__hexnan+0x10e>
 800e85c:	2300      	movs	r3, #0
 800e85e:	f1a4 0904 	sub.w	r9, r4, #4
 800e862:	f844 3c04 	str.w	r3, [r4, #-4]
 800e866:	f8cd b008 	str.w	fp, [sp, #8]
 800e86a:	464c      	mov	r4, r9
 800e86c:	461d      	mov	r5, r3
 800e86e:	9903      	ldr	r1, [sp, #12]
 800e870:	e7d7      	b.n	800e822 <__hexnan+0x2e>
 800e872:	2a29      	cmp	r2, #41	@ 0x29
 800e874:	d157      	bne.n	800e926 <__hexnan+0x132>
 800e876:	3102      	adds	r1, #2
 800e878:	f8ca 1000 	str.w	r1, [sl]
 800e87c:	f1bb 0f00 	cmp.w	fp, #0
 800e880:	d051      	beq.n	800e926 <__hexnan+0x132>
 800e882:	454c      	cmp	r4, r9
 800e884:	d206      	bcs.n	800e894 <__hexnan+0xa0>
 800e886:	2d07      	cmp	r5, #7
 800e888:	dc04      	bgt.n	800e894 <__hexnan+0xa0>
 800e88a:	462a      	mov	r2, r5
 800e88c:	4649      	mov	r1, r9
 800e88e:	4620      	mov	r0, r4
 800e890:	f7ff ff8a 	bl	800e7a8 <L_shift>
 800e894:	4544      	cmp	r4, r8
 800e896:	d936      	bls.n	800e906 <__hexnan+0x112>
 800e898:	f1a8 0204 	sub.w	r2, r8, #4
 800e89c:	4623      	mov	r3, r4
 800e89e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e8a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e8a6:	429f      	cmp	r7, r3
 800e8a8:	d2f9      	bcs.n	800e89e <__hexnan+0xaa>
 800e8aa:	1b3b      	subs	r3, r7, r4
 800e8ac:	f023 0303 	bic.w	r3, r3, #3
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	3401      	adds	r4, #1
 800e8b4:	3e03      	subs	r6, #3
 800e8b6:	42b4      	cmp	r4, r6
 800e8b8:	bf88      	it	hi
 800e8ba:	2304      	movhi	r3, #4
 800e8bc:	4443      	add	r3, r8
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f843 2b04 	str.w	r2, [r3], #4
 800e8c4:	429f      	cmp	r7, r3
 800e8c6:	d2fb      	bcs.n	800e8c0 <__hexnan+0xcc>
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	b91b      	cbnz	r3, 800e8d4 <__hexnan+0xe0>
 800e8cc:	4547      	cmp	r7, r8
 800e8ce:	d128      	bne.n	800e922 <__hexnan+0x12e>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	603b      	str	r3, [r7, #0]
 800e8d4:	2005      	movs	r0, #5
 800e8d6:	b007      	add	sp, #28
 800e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	3501      	adds	r5, #1
 800e8de:	2d08      	cmp	r5, #8
 800e8e0:	f10b 0b01 	add.w	fp, fp, #1
 800e8e4:	dd06      	ble.n	800e8f4 <__hexnan+0x100>
 800e8e6:	4544      	cmp	r4, r8
 800e8e8:	d9c1      	bls.n	800e86e <__hexnan+0x7a>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8f0:	2501      	movs	r5, #1
 800e8f2:	3c04      	subs	r4, #4
 800e8f4:	6822      	ldr	r2, [r4, #0]
 800e8f6:	f000 000f 	and.w	r0, r0, #15
 800e8fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e8fe:	6020      	str	r0, [r4, #0]
 800e900:	e7b5      	b.n	800e86e <__hexnan+0x7a>
 800e902:	2508      	movs	r5, #8
 800e904:	e7b3      	b.n	800e86e <__hexnan+0x7a>
 800e906:	9b01      	ldr	r3, [sp, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d0dd      	beq.n	800e8c8 <__hexnan+0xd4>
 800e90c:	f1c3 0320 	rsb	r3, r3, #32
 800e910:	f04f 32ff 	mov.w	r2, #4294967295
 800e914:	40da      	lsrs	r2, r3
 800e916:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e91a:	4013      	ands	r3, r2
 800e91c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e920:	e7d2      	b.n	800e8c8 <__hexnan+0xd4>
 800e922:	3f04      	subs	r7, #4
 800e924:	e7d0      	b.n	800e8c8 <__hexnan+0xd4>
 800e926:	2004      	movs	r0, #4
 800e928:	e7d5      	b.n	800e8d6 <__hexnan+0xe2>

0800e92a <__ascii_mbtowc>:
 800e92a:	b082      	sub	sp, #8
 800e92c:	b901      	cbnz	r1, 800e930 <__ascii_mbtowc+0x6>
 800e92e:	a901      	add	r1, sp, #4
 800e930:	b142      	cbz	r2, 800e944 <__ascii_mbtowc+0x1a>
 800e932:	b14b      	cbz	r3, 800e948 <__ascii_mbtowc+0x1e>
 800e934:	7813      	ldrb	r3, [r2, #0]
 800e936:	600b      	str	r3, [r1, #0]
 800e938:	7812      	ldrb	r2, [r2, #0]
 800e93a:	1e10      	subs	r0, r2, #0
 800e93c:	bf18      	it	ne
 800e93e:	2001      	movne	r0, #1
 800e940:	b002      	add	sp, #8
 800e942:	4770      	bx	lr
 800e944:	4610      	mov	r0, r2
 800e946:	e7fb      	b.n	800e940 <__ascii_mbtowc+0x16>
 800e948:	f06f 0001 	mvn.w	r0, #1
 800e94c:	e7f8      	b.n	800e940 <__ascii_mbtowc+0x16>

0800e94e <_realloc_r>:
 800e94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e952:	4680      	mov	r8, r0
 800e954:	4615      	mov	r5, r2
 800e956:	460c      	mov	r4, r1
 800e958:	b921      	cbnz	r1, 800e964 <_realloc_r+0x16>
 800e95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e95e:	4611      	mov	r1, r2
 800e960:	f7fb bd0e 	b.w	800a380 <_malloc_r>
 800e964:	b92a      	cbnz	r2, 800e972 <_realloc_r+0x24>
 800e966:	f7fd fda9 	bl	800c4bc <_free_r>
 800e96a:	2400      	movs	r4, #0
 800e96c:	4620      	mov	r0, r4
 800e96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e972:	f000 f827 	bl	800e9c4 <_malloc_usable_size_r>
 800e976:	4285      	cmp	r5, r0
 800e978:	4606      	mov	r6, r0
 800e97a:	d802      	bhi.n	800e982 <_realloc_r+0x34>
 800e97c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e980:	d8f4      	bhi.n	800e96c <_realloc_r+0x1e>
 800e982:	4629      	mov	r1, r5
 800e984:	4640      	mov	r0, r8
 800e986:	f7fb fcfb 	bl	800a380 <_malloc_r>
 800e98a:	4607      	mov	r7, r0
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d0ec      	beq.n	800e96a <_realloc_r+0x1c>
 800e990:	42b5      	cmp	r5, r6
 800e992:	462a      	mov	r2, r5
 800e994:	4621      	mov	r1, r4
 800e996:	bf28      	it	cs
 800e998:	4632      	movcs	r2, r6
 800e99a:	f7fc ff92 	bl	800b8c2 <memcpy>
 800e99e:	4621      	mov	r1, r4
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	f7fd fd8b 	bl	800c4bc <_free_r>
 800e9a6:	463c      	mov	r4, r7
 800e9a8:	e7e0      	b.n	800e96c <_realloc_r+0x1e>

0800e9aa <__ascii_wctomb>:
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	b141      	cbz	r1, 800e9c2 <__ascii_wctomb+0x18>
 800e9b0:	2aff      	cmp	r2, #255	@ 0xff
 800e9b2:	d904      	bls.n	800e9be <__ascii_wctomb+0x14>
 800e9b4:	228a      	movs	r2, #138	@ 0x8a
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9bc:	4770      	bx	lr
 800e9be:	700a      	strb	r2, [r1, #0]
 800e9c0:	2001      	movs	r0, #1
 800e9c2:	4770      	bx	lr

0800e9c4 <_malloc_usable_size_r>:
 800e9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9c8:	1f18      	subs	r0, r3, #4
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	bfbc      	itt	lt
 800e9ce:	580b      	ldrlt	r3, [r1, r0]
 800e9d0:	18c0      	addlt	r0, r0, r3
 800e9d2:	4770      	bx	lr

0800e9d4 <_init>:
 800e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d6:	bf00      	nop
 800e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9da:	bc08      	pop	{r3}
 800e9dc:	469e      	mov	lr, r3
 800e9de:	4770      	bx	lr

0800e9e0 <_fini>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	bf00      	nop
 800e9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e6:	bc08      	pop	{r3}
 800e9e8:	469e      	mov	lr, r3
 800e9ea:	4770      	bx	lr
