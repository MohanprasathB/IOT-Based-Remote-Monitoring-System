
Mongoose_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000266f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .iram         000007ac  08026994  08026994  00027994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000fd9c  08027140  08027140  00028140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08036edc  08036edc  00038a28  2**0
                  CONTENTS
  5 .ARM          00000008  08036edc  08036edc  00037edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08036ee4  08036ee4  00038a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08036ee4  08036ee4  00037ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08036ee8  08036ee8  00037ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000968  24000000  08036eec  00038000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  24000968  08037854  00038968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  240009c8  080378b4  000389c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00003614  24000a28  08037914  00038a28  2**3
                  ALLOC
 13 ._user_heap_stack 00000604  2400403c  08037914  0003903c  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00038a28  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002c647  00000000  00000000  00038a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003764  00000000  00000000  0006509d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000020d0  00000000  00000000  00068808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b1c  00000000  00000000  0006a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d2f7  00000000  00000000  0006c3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002831c  00000000  00000000  000a96eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018ab75  00000000  00000000  000d1a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0025c57c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000aaf0  00000000  00000000  0025c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000095  00000000  00000000  002670b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000a28 	.word	0x24000a28
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802697c 	.word	0x0802697c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000a2c 	.word	0x24000a2c
 80002dc:	0802697c 	.word	0x0802697c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <SystemInit+0xfc>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a3c      	ldr	r2, [pc, #240]	@ (8000c24 <SystemInit+0xfc>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000b3c:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <SystemInit+0xfc>)
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	4a38      	ldr	r2, [pc, #224]	@ (8000c24 <SystemInit+0xfc>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SystemInit+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d807      	bhi.n	8000b64 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <SystemInit+0x100>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 030f 	bic.w	r3, r3, #15
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <SystemInit+0x100>)
 8000b5e:	f043 0307 	orr.w	r3, r3, #7
 8000b62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b64:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <SystemInit+0x104>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <SystemInit+0x104>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <SystemInit+0x104>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <SystemInit+0x104>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	492c      	ldr	r1, [pc, #176]	@ (8000c2c <SystemInit+0x104>)
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <SystemInit+0x108>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemInit+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <SystemInit+0x100>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 030f 	bic.w	r3, r3, #15
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <SystemInit+0x100>)
 8000b98:	f043 0307 	orr.w	r3, r3, #7
 8000b9c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <SystemInit+0x104>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <SystemInit+0x104>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <SystemInit+0x104>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <SystemInit+0x104>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <SystemInit+0x10c>)
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <SystemInit+0x104>)
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <SystemInit+0x110>)
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <SystemInit+0x104>)
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <SystemInit+0x114>)
 8000bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <SystemInit+0x104>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <SystemInit+0x104>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <SystemInit+0x114>)
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <SystemInit+0x104>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <SystemInit+0x104>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <SystemInit+0x114>)
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <SystemInit+0x104>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <SystemInit+0x104>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <SystemInit+0x104>)
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <SystemInit+0x104>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <SystemInit+0x118>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <SystemInit+0x118>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <SystemInit+0x11c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <SystemInit+0x120>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c0a:	d202      	bcs.n	8000c12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <SystemInit+0x124>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <SystemInit+0x128>)
 8000c14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c18:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	52002000 	.word	0x52002000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c34:	02020200 	.word	0x02020200
 8000c38:	01ff0000 	.word	0x01ff0000
 8000c3c:	01010280 	.word	0x01010280
 8000c40:	580000c0 	.word	0x580000c0
 8000c44:	5c001000 	.word	0x5c001000
 8000c48:	ffff0000 	.word	0xffff0000
 8000c4c:	51008108 	.word	0x51008108
 8000c50:	52004000 	.word	0x52004000

08000c54 <mg_random>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e01a      	b.n	8000c9a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4810      	ldr	r0, [pc, #64]	@ (8000cac <mg_random+0x58>)
 8000c6c:	f01e fde8 	bl	801f840 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	18d0      	adds	r0, r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d203      	bcs.n	8000c88 <mg_random+0x34>
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	e000      	b.n	8000c8a <mg_random+0x36>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	f107 0108 	add.w	r1, r7, #8
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f022 fded 	bl	802386e <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3304      	adds	r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d3e0      	bcc.n	8000c64 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	24000b2c 	.word	0x24000b2c

08000cb0 <mg_millis>:

uint64_t mg_millis(void) {
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000cb4:	f01a fa72 	bl	801b19c <HAL_GetTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	461c      	mov	r4, r3
 8000cbe:	4615      	mov	r5, r2
 8000cc0:	4622      	mov	r2, r4
 8000cc2:	462b      	mov	r3, r5
}
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ccc <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d002      	beq.n	8000ce4 <_write+0x18>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d107      	bne.n	8000cf4 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <_write+0x34>)
 8000cf0:	f01e fe4c 	bl	801f98c <HAL_UART_Transmit>
  }
  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	24000bd4 	.word	0x24000bd4

08000d04 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000dc0 <HAL_UART_RxCpltCallback+0xbc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d151      	bne.n	8000db8 <HAL_UART_RxCpltCallback+0xb4>
    // Calculate received length (assuming RxXferSize is the buffer size)
    size_t received_len = huart->RxXferSize - huart->RxXferCount;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	61fb      	str	r3, [r7, #28]
    // Ensure null-termination
    if (received_len >= sizeof(uart_rx_buffer)) {
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d2c:	d901      	bls.n	8000d32 <HAL_UART_RxCpltCallback+0x2e>
      received_len = sizeof(uart_rx_buffer) - 1;
 8000d2e:	237f      	movs	r3, #127	@ 0x7f
 8000d30:	61fb      	str	r3, [r7, #28]
    }
    uart_rx_buffer[received_len] = '\0';
 8000d32:	4a24      	ldr	r2, [pc, #144]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xc0>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	4413      	add	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

    // Look for "udpr" prefix
    char *ptr = strstr((char*)uart_rx_buffer, "udpr");
 8000d3c:	4922      	ldr	r1, [pc, #136]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xc4>)
 8000d3e:	4821      	ldr	r0, [pc, #132]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xc0>)
 8000d40:	f022 fcf0 	bl	8023724 <strstr>
 8000d44:	61b8      	str	r0, [r7, #24]
    if (ptr != NULL) {
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d030      	beq.n	8000dae <HAL_UART_RxCpltCallback+0xaa>
      // Find the last space
      char *hex_start = strrchr(ptr, ' ');
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	69b8      	ldr	r0, [r7, #24]
 8000d50:	f022 fcd2 	bl	80236f8 <strrchr>
 8000d54:	6178      	str	r0, [r7, #20]
      if (hex_start != NULL) {
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d028      	beq.n	8000dae <HAL_UART_RxCpltCallback+0xaa>
        hex_start++; // Move past the space
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
        char *endptr;
        errno = 0;
 8000d62:	f022 fd4f 	bl	8023804 <__errno>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
        unsigned long value = strtoul(hex_start, &endptr, 16);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2210      	movs	r2, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f021 fc05 	bl	8022584 <strtoul>
 8000d7a:	6138      	str	r0, [r7, #16]
        // Check conversion validity
        if (endptr != hex_start && errno == 0 && value <= UINT16_MAX) {
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d011      	beq.n	8000da8 <HAL_UART_RxCpltCallback+0xa4>
 8000d84:	f022 fd3e 	bl	8023804 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10b      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0xa4>
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d96:	d207      	bcs.n	8000da8 <HAL_UART_RxCpltCallback+0xa4>
          uart_hex_value = (uint16_t)value;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_UART_RxCpltCallback+0xc8>)
 8000d9e:	801a      	strh	r2, [r3, #0]
          uart_data_ready = true;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_UART_RxCpltCallback+0xcc>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e002      	b.n	8000dae <HAL_UART_RxCpltCallback+0xaa>
        } else {
          // Handle error (e.g., log invalid conversion)
          uart_hex_value = 1;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_UART_RxCpltCallback+0xc8>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    // Restart UART reception
    HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
 8000dae:	2280      	movs	r2, #128	@ 0x80
 8000db0:	4904      	ldr	r1, [pc, #16]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xc0>)
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <HAL_UART_RxCpltCallback+0xbc>)
 8000db4:	f01e fe78 	bl	801faa8 <HAL_UART_Receive_IT>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24000b40 	.word	0x24000b40
 8000dc4:	24000c6c 	.word	0x24000c6c
 8000dc8:	08027140 	.word	0x08027140
 8000dcc:	24000c68 	.word	0x24000c68
 8000dd0:	24000c6a 	.word	0x24000c6a

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd8:	f01a f95a 	bl	801b090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ddc:	f000 f818 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de0:	f000 f98c 	bl	80010fc <MX_GPIO_Init>
  MX_ETH_Init();
 8000de4:	f000 f890 	bl	8000f08 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000de8:	f000 f93c 	bl	8001064 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000dec:	f000 f8d8 	bl	8000fa0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000df0:	f000 f8ec 	bl	8000fcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	4904      	ldr	r1, [pc, #16]	@ (8000e08 <main+0x34>)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <main+0x38>)
 8000dfa:	f01e fe55 	bl	801faa8 <HAL_UART_Receive_IT>
  mongoose_init();
 8000dfe:	f019 fd5f 	bl	801a8c0 <mongoose_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mongoose_poll();
 8000e02:	f019 fe19 	bl	801aa38 <mongoose_poll>
 8000e06:	e7fc      	b.n	8000e02 <main+0x2e>
 8000e08:	24000c6c 	.word	0x24000c6c
 8000e0c:	24000b40 	.word	0x24000b40

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	@ 0x70
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	224c      	movs	r2, #76	@ 0x4c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f022 fc30 	bl	8023684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f022 fc2a 	bl	8023684 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e30:	2004      	movs	r0, #4
 8000e32:	f01b fe37 	bl	801caa4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b31      	ldr	r3, [pc, #196]	@ (8000f00 <SystemClock_Config+0xf0>)
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	4a30      	ldr	r2, [pc, #192]	@ (8000f00 <SystemClock_Config+0xf0>)
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e46:	4b2e      	ldr	r3, [pc, #184]	@ (8000f00 <SystemClock_Config+0xf0>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4b2c      	ldr	r3, [pc, #176]	@ (8000f04 <SystemClock_Config+0xf4>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a2b      	ldr	r2, [pc, #172]	@ (8000f04 <SystemClock_Config+0xf4>)
 8000e56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b29      	ldr	r3, [pc, #164]	@ (8000f04 <SystemClock_Config+0xf4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e68:	bf00      	nop
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <SystemClock_Config+0xf4>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e76:	d1f8      	bne.n	8000e6a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e78:	2321      	movs	r3, #33	@ 0x21
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e92:	2364      	movs	r3, #100	@ 0x64
 8000e94:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f01b fe50 	bl	801cb58 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ebe:	f000 f973 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	233f      	movs	r3, #63	@ 0x3f
 8000ec4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ed2:	2340      	movs	r3, #64	@ 0x40
 8000ed4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ed6:	2340      	movs	r3, #64	@ 0x40
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ede:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ee0:	2340      	movs	r3, #64	@ 0x40
 8000ee2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f01c fa8f 	bl	801d40c <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ef4:	f000 f958 	bl	80011a8 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3770      	adds	r7, #112	@ 0x70
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58000400 	.word	0x58000400
 8000f04:	58024800 	.word	0x58024800

08000f08 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f8c <MX_ETH_Init+0x84>)
 8000f10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f1a:	2280      	movs	r2, #128	@ 0x80
 8000f1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f20:	22e1      	movs	r2, #225	@ 0xe1
 8000f22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f38:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <MX_ETH_Init+0x88>)
 8000f3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f44:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <MX_ETH_Init+0x8c>)
 8000f46:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <MX_ETH_Init+0x90>)
 8000f4c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f50:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f54:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <MX_ETH_Init+0x80>)
 8000f58:	f01a ffc0 	bl	801bedc <HAL_ETH_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f62:	f000 f921 	bl	80011a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f66:	2238      	movs	r2, #56	@ 0x38
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <MX_ETH_Init+0x94>)
 8000f6c:	f022 fb8a 	bl	8023684 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <MX_ETH_Init+0x94>)
 8000f72:	2221      	movs	r2, #33	@ 0x21
 8000f74:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_ETH_Init+0x94>)
 8000f78:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f7c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <MX_ETH_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000a7c 	.word	0x24000a7c
 8000f8c:	40028000 	.word	0x40028000
 8000f90:	24000cec 	.word	0x24000cec
 8000f94:	240009c8 	.word	0x240009c8
 8000f98:	24000968 	.word	0x24000968
 8000f9c:	24000a44 	.word	0x24000a44

08000fa0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_RNG_Init+0x24>)
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <MX_RNG_Init+0x28>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_RNG_Init+0x24>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_RNG_Init+0x24>)
 8000fb2:	f01e fbe3 	bl	801f77c <HAL_RNG_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000fbc:	f000 f8f4 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24000b2c 	.word	0x24000b2c
 8000fc8:	48021800 	.word	0x48021800

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fd2:	4a23      	ldr	r2, [pc, #140]	@ (8001060 <MX_USART2_UART_Init+0x94>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_USART2_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001014:	4811      	ldr	r0, [pc, #68]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001016:	f01e fc69 	bl	801f8ec <HAL_UART_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001020:	f000 f8c2 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001028:	f020 ffc3 	bl	8021fb2 <HAL_UARTEx_SetTxFifoThreshold>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001032:	f000 f8b9 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4808      	ldr	r0, [pc, #32]	@ (800105c <MX_USART2_UART_Init+0x90>)
 800103a:	f020 fff8 	bl	802202e <HAL_UARTEx_SetRxFifoThreshold>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001044:	f000 f8b0 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_USART2_UART_Init+0x90>)
 800104a:	f020 ff79 	bl	8021f40 <HAL_UARTEx_DisableFifoMode>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001054:	f000 f8a8 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	24000b40 	.word	0x24000b40
 8001060:	40004400 	.word	0x40004400

08001064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800106a:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <MX_USART3_UART_Init+0x94>)
 800106c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010ae:	f01e fc1d 	bl	801f8ec <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010b8:	f000 f876 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010c0:	f020 ff77 	bl	8021fb2 <HAL_UARTEx_SetTxFifoThreshold>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ca:	f000 f86d 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010d2:	f020 ffac 	bl	802202e <HAL_UARTEx_SetRxFifoThreshold>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f864 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010e2:	f020 ff2d 	bl	8021f40 <HAL_UARTEx_DisableFifoMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f85c 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	24000bd4 	.word	0x24000bd4
 80010f8:	40004800 	.word	0x40004800

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 8001182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_GPIO_Init+0xa8>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	58024400 	.word	0x58024400

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <Error_Handler+0x8>

080011b4 <mg_base64_decode_single>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b40      	cmp	r3, #64	@ 0x40
 80011c0:	dd05      	ble.n	80011ce <mg_base64_decode_single+0x1a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80011c6:	dc02      	bgt.n	80011ce <mg_base64_decode_single+0x1a>
    return c - 'A';
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b41      	subs	r3, #65	@ 0x41
 80011cc:	e022      	b.n	8001214 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b60      	cmp	r3, #96	@ 0x60
 80011d2:	dd05      	ble.n	80011e0 <mg_base64_decode_single+0x2c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b7a      	cmp	r3, #122	@ 0x7a
 80011d8:	dc02      	bgt.n	80011e0 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3b47      	subs	r3, #71	@ 0x47
 80011de:	e019      	b.n	8001214 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80011e4:	dd05      	ble.n	80011f2 <mg_base64_decode_single+0x3e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b39      	cmp	r3, #57	@ 0x39
 80011ea:	dc02      	bgt.n	80011f2 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	e010      	b.n	8001214 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80011f6:	d101      	bne.n	80011fc <mg_base64_decode_single+0x48>
    return 62;
 80011f8:	233e      	movs	r3, #62	@ 0x3e
 80011fa:	e00b      	b.n	8001214 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8001200:	d101      	bne.n	8001206 <mg_base64_decode_single+0x52>
    return 63;
 8001202:	233f      	movs	r3, #63	@ 0x3f
 8001204:	e006      	b.n	8001214 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b3d      	cmp	r3, #61	@ 0x3d
 800120a:	d101      	bne.n	8001210 <mg_base64_decode_single+0x5c>
    return 64;
 800120c:	2340      	movs	r3, #64	@ 0x40
 800120e:	e001      	b.n	8001214 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <mg_base64_decode+0x1c>
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4413      	add	r3, r2
 800123a:	e000      	b.n	800123e <mg_base64_decode+0x1e>
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	089a      	lsrs	r2, r3, #2
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	3301      	adds	r3, #1
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d375      	bcc.n	8001342 <mg_base64_decode+0x122>
  while (src != NULL && src + 3 < end) {
 8001256:	e065      	b.n	8001324 <mg_base64_decode+0x104>
    int a = mg_base64_decode_single(src[0]),
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffa9 	bl	80011b4 <mg_base64_decode_single>
 8001262:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffa2 	bl	80011b4 <mg_base64_decode_single>
 8001270:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3302      	adds	r3, #2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff9b 	bl	80011b4 <mg_base64_decode_single>
 800127e:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3303      	adds	r3, #3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff94 	bl	80011b4 <mg_base64_decode_single>
 800128c:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	2b40      	cmp	r3, #64	@ 0x40
 8001292:	d058      	beq.n	8001346 <mg_base64_decode+0x126>
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db55      	blt.n	8001346 <mg_base64_decode+0x126>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b40      	cmp	r3, #64	@ 0x40
 800129e:	d052      	beq.n	8001346 <mg_base64_decode+0x126>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db4f      	blt.n	8001346 <mg_base64_decode+0x126>
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db4c      	blt.n	8001346 <mg_base64_decode+0x126>
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db49      	blt.n	8001346 <mg_base64_decode+0x126>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	111b      	asrs	r3, r3, #4
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b259      	sxtb	r1, r3
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	b2ca      	uxtb	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3302      	adds	r3, #2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b3d      	cmp	r3, #61	@ 0x3d
 80012d8:	d021      	beq.n	800131e <mg_base64_decode+0xfe>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	109b      	asrs	r3, r3, #2
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b259      	sxtb	r1, r3
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	b2ca      	uxtb	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3303      	adds	r3, #3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b3d      	cmp	r3, #61	@ 0x3d
 8001300:	d00d      	beq.n	800131e <mg_base64_decode+0xfe>
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	b25a      	sxtb	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b259      	sxtb	r1, r3
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	627a      	str	r2, [r7, #36]	@ 0x24
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3304      	adds	r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <mg_base64_decode+0x114>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3303      	adds	r3, #3
 800132e:	6a3a      	ldr	r2, [r7, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	d891      	bhi.n	8001258 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	4413      	add	r3, r2
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
  return len;
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	e009      	b.n	8001356 <mg_base64_decode+0x136>
  if (dl < n / 4 * 3 + 1) goto fail;
 8001342:	bf00      	nop
 8001344:	e000      	b.n	8001348 <mg_base64_decode+0x128>
      goto fail;
 8001346:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <mg_base64_decode+0x134>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <mg_flash_next>:
// | 32-bit size | 32-bit KEY | ..data.. | ..pad.. | 32-bit size | ......
//
// In order to get to the next object, read its size, then align up.

// Traverse the list of saved objects
size_t mg_flash_next(char *p, char *end, uint32_t *key, size_t *size) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b08a      	sub	sp, #40	@ 0x28
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	603b      	str	r3, [r7, #0]
  size_t aligned_size = 0, align = mg_flash_write_align(), left = end - p;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001370:	f025 fb99 	bl	8026aa6 <mg_flash_write_align>
 8001374:	6238      	str	r0, [r7, #32]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]
  uint32_t *p32 = (uint32_t *) p, min_size = sizeof(uint32_t) * 2;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	2308      	movs	r3, #8
 8001384:	617b      	str	r3, [r7, #20]
  if (p32[0] != 0xffffffff && left > MG_ROUND_UP(min_size, align)) {
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138e:	d038      	beq.n	8001402 <mg_flash_next+0xa4>
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00a      	beq.n	80013ac <mg_flash_next+0x4e>
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	4413      	add	r3, r2
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	6a3a      	ldr	r2, [r7, #32]
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	e000      	b.n	80013ae <mg_flash_next+0x50>
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d226      	bcs.n	8001402 <mg_flash_next+0xa4>
    if (size) *size = (size_t) p32[0];
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <mg_flash_next+0x64>
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]
    if (key) *key = p32[1];
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <mg_flash_next+0x72>
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
    aligned_size = MG_ROUND_UP(p32[0] + sizeof(uint32_t) * 2, align);
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <mg_flash_next+0x80>
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3308      	adds	r3, #8
 80013dc:	e00a      	b.n	80013f4 <mg_flash_next+0x96>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	4413      	add	r3, r2
 80013e6:	1dda      	adds	r2, r3, #7
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	6a3a      	ldr	r2, [r7, #32]
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (left < aligned_size) aligned_size = 0;  // Out of bounds, fail
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d201      	bcs.n	8001402 <mg_flash_next+0xa4>
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return aligned_size;
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001404:	4618      	mov	r0, r3
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <flash_last_sector>:

// Return the last sector of Bank 2
static char *flash_last_sector(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
  size_t ss = mg_flash_sector_size(), size = mg_flash_size();
 8001412:	f025 fb3f 	bl	8026a94 <mg_flash_sector_size>
 8001416:	60b8      	str	r0, [r7, #8]
 8001418:	f025 fb2f 	bl	8026a7a <mg_flash_size>
 800141c:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *last = base + size - ss;
 800141e:	f025 fb23 	bl	8026a68 <mg_flash_start>
 8001422:	6038      	str	r0, [r7, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 2) last -= size / 2;
 8001430:	f025 fb41 	bl	8026ab6 <mg_flash_bank>
 8001434:	4603      	mov	r3, r0
 8001436:	2b02      	cmp	r3, #2
 8001438:	d105      	bne.n	8001446 <flash_last_sector+0x3a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	425b      	negs	r3, r3
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  return last;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <mg_flash_load>:

// Find a saved object with a given key
bool mg_flash_load(void *sector, uint32_t key, void *buf, size_t len) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	@ 0x38
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector, *res = NULL;
 800145e:	f025 fb03 	bl	8026a68 <mg_flash_start>
 8001462:	6238      	str	r0, [r7, #32]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  size_t ss = mg_flash_sector_size(), ofs = 0, n, sz;
 800146c:	f025 fb12 	bl	8026a94 <mg_flash_sector_size>
 8001470:	61f8      	str	r0, [r7, #28]
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  bool ok = false;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (s == NULL) s = flash_last_sector();
 800147c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <mg_flash_load+0x38>
 8001482:	f7ff ffc3 	bl	800140c <flash_last_sector>
 8001486:	6378      	str	r0, [r7, #52]	@ 0x34
  if (s < base || s >= base + mg_flash_size()) {
 8001488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	429a      	cmp	r2, r3
 800148e:	d307      	bcc.n	80014a0 <mg_flash_load+0x50>
 8001490:	f025 faf3 	bl	8026a7a <mg_flash_size>
 8001494:	4602      	mov	r2, r0
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	4413      	add	r3, r2
 800149a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800149c:	429a      	cmp	r2, r3
 800149e:	d30f      	bcc.n	80014c0 <mg_flash_load+0x70>
    MG_ERROR(("%p is outsize of flash", sector));
 80014a0:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <mg_flash_load+0x134>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dd67      	ble.n	8001578 <mg_flash_load+0x128>
 80014a8:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <mg_flash_load+0x138>)
 80014aa:	f240 1219 	movw	r2, #281	@ 0x119
 80014ae:	4937      	ldr	r1, [pc, #220]	@ (800158c <mg_flash_load+0x13c>)
 80014b0:	2001      	movs	r0, #1
 80014b2:	f006 fbd5 	bl	8007c60 <mg_log_prefix>
 80014b6:	68f9      	ldr	r1, [r7, #12]
 80014b8:	4835      	ldr	r0, [pc, #212]	@ (8001590 <mg_flash_load+0x140>)
 80014ba:	f006 fc21 	bl	8007d00 <mg_log>
 80014be:	e05b      	b.n	8001578 <mg_flash_load+0x128>
  } else if (((s - base) % ss) != 0) {
 80014c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80014cc:	69f9      	ldr	r1, [r7, #28]
 80014ce:	fb01 f202 	mul.w	r2, r1, r2
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00f      	beq.n	80014f8 <mg_flash_load+0xa8>
    MG_ERROR(("%p is not a sector boundary", sector));
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <mg_flash_load+0x134>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dd4b      	ble.n	8001578 <mg_flash_load+0x128>
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <mg_flash_load+0x138>)
 80014e2:	f240 121b 	movw	r2, #283	@ 0x11b
 80014e6:	4929      	ldr	r1, [pc, #164]	@ (800158c <mg_flash_load+0x13c>)
 80014e8:	2001      	movs	r0, #1
 80014ea:	f006 fbb9 	bl	8007c60 <mg_log_prefix>
 80014ee:	68f9      	ldr	r1, [r7, #12]
 80014f0:	4828      	ldr	r0, [pc, #160]	@ (8001594 <mg_flash_load+0x144>)
 80014f2:	f006 fc05 	bl	8007d00 <mg_log>
 80014f6:	e03f      	b.n	8001578 <mg_flash_load+0x128>
  } else {
    uint32_t k, scanned = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 80014fc:	e01b      	b.n	8001536 <mg_flash_load+0xe6>
      // MG_DEBUG((" > obj %lu, ofs %lu, key %x/%x", scanned, ofs, k, key));
      // mg_hexdump(s + ofs, n);
      if (k == key && sz == len) {
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	429a      	cmp	r2, r3
 8001504:	d110      	bne.n	8001528 <mg_flash_load+0xd8>
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d10c      	bne.n	8001528 <mg_flash_load+0xd8>
        res = s + ofs + sizeof(uint32_t) * 2;
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	3308      	adds	r3, #8
 8001512:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001514:	4413      	add	r3, r2
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
        memcpy(buf, res, len);  // Copy object
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f022 f9a6 	bl	802386e <memcpy>
        ok = true;              // Keep scanning for the newer versions of it
 8001522:	2301      	movs	r3, #1
 8001524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      }
      ofs += n, scanned++;
 8001528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4413      	add	r3, r2
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 8001536:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153a:	18d0      	adds	r0, r2, r3
 800153c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	18d1      	adds	r1, r2, r3
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	f107 0210 	add.w	r2, r7, #16
 800154a:	f7ff ff08 	bl	800135e <mg_flash_next>
 800154e:	61b8      	str	r0, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1d3      	bne.n	80014fe <mg_flash_load+0xae>
    }
    MG_DEBUG(("Scanned %u objects, key %x is @ %p", scanned, key, res));
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <mg_flash_load+0x134>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b02      	cmp	r3, #2
 800155c:	dd0c      	ble.n	8001578 <mg_flash_load+0x128>
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <mg_flash_load+0x138>)
 8001560:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8001564:	4909      	ldr	r1, [pc, #36]	@ (800158c <mg_flash_load+0x13c>)
 8001566:	2003      	movs	r0, #3
 8001568:	f006 fb7a 	bl	8007c60 <mg_log_prefix>
 800156c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001572:	4809      	ldr	r0, [pc, #36]	@ (8001598 <mg_flash_load+0x148>)
 8001574:	f006 fbc4 	bl	8007d00 <mg_log>
  }
  return ok;
 8001578:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800157c:	4618      	mov	r0, r3
 800157e:	3738      	adds	r7, #56	@ 0x38
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	24000240 	.word	0x24000240
 8001588:	0802a668 	.word	0x0802a668
 800158c:	08027148 	.word	0x08027148
 8001590:	080271d4 	.word	0x080271d4
 8001594:	080271ec 	.word	0x080271ec
 8001598:	08027208 	.word	0x08027208

0800159c <mg_flash_sector_cleanup>:

// For all saved objects in the sector, delete old versions of objects
static void mg_flash_sector_cleanup(char *sector) {
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b091      	sub	sp, #68	@ 0x44
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  // Buffer all saved objects into an IO buffer (backed by RAM)
  // erase sector, and re-save them.
  struct mg_iobuf io = {0, 0, 0, 2048};
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015b4:	623b      	str	r3, [r7, #32]
  size_t ss = mg_flash_sector_size();
 80015b6:	f025 fa6d 	bl	8026a94 <mg_flash_sector_size>
 80015ba:	6378      	str	r0, [r7, #52]	@ 0x34
  size_t n, size, size2, ofs = 0, hs = sizeof(uint32_t) * 2;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015c0:	2308      	movs	r3, #8
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t key;
  // Traverse all objects
  MG_DEBUG(("Cleaning up sector %p", sector));
 80015c4:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <mg_flash_sector_cleanup+0x138>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dd41      	ble.n	8001650 <mg_flash_sector_cleanup+0xb4>
 80015cc:	4b42      	ldr	r3, [pc, #264]	@ (80016d8 <mg_flash_sector_cleanup+0x13c>)
 80015ce:	f44f 729b 	mov.w	r2, #310	@ 0x136
 80015d2:	4942      	ldr	r1, [pc, #264]	@ (80016dc <mg_flash_sector_cleanup+0x140>)
 80015d4:	2003      	movs	r0, #3
 80015d6:	f006 fb43 	bl	8007c60 <mg_log_prefix>
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4840      	ldr	r0, [pc, #256]	@ (80016e0 <mg_flash_sector_cleanup+0x144>)
 80015de:	f006 fb8f 	bl	8007d00 <mg_log>
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 80015e2:	e035      	b.n	8001650 <mg_flash_sector_cleanup+0xb4>
    // Delete an old copy of this object in the cache
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015e8:	e01e      	b.n	8001628 <mg_flash_sector_cleanup+0x8c>
      uint32_t k = *(uint32_t *) (io.buf + o + sizeof(uint32_t));
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ee:	3304      	adds	r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      size2 = *(uint32_t *) (io.buf + o);
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015fa:	4413      	add	r3, r2
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
      if (k == key) {
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001604:	429a      	cmp	r2, r3
 8001606:	d109      	bne.n	800161c <mg_flash_sector_cleanup+0x80>
        mg_iobuf_del(&io, o, size2 + hs);
 8001608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800160c:	441a      	add	r2, r3
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fc33 	bl	8006e80 <mg_iobuf_del>
        break;
 800161a:	e009      	b.n	8001630 <mg_flash_sector_cleanup+0x94>
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001620:	4413      	add	r3, r2
 8001622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001624:	4413      	add	r3, r2
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800162c:	429a      	cmp	r2, r3
 800162e:	d3dc      	bcc.n	80015ea <mg_flash_sector_cleanup+0x4e>
      }
    }
    // And add the new copy
    mg_iobuf_add(&io, io.len, sector + ofs, size + hs);
 8001630:	69f9      	ldr	r1, [r7, #28]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001636:	18d4      	adds	r4, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800163c:	4413      	add	r3, r2
 800163e:	f107 0014 	add.w	r0, r7, #20
 8001642:	4622      	mov	r2, r4
 8001644:	f005 fbca 	bl	8006ddc <mg_iobuf_add>
    ofs += n;
 8001648:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164c:	4413      	add	r3, r2
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001654:	18d0      	adds	r0, r2, r3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800165a:	18d1      	adds	r1, r2, r3
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	f7ff fe7b 	bl	800135e <mg_flash_next>
 8001668:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1b9      	bne.n	80015e4 <mg_flash_sector_cleanup+0x48>
  }
  // All objects are cached in RAM now
  if (mg_flash_erase(sector)) {  // Erase sector. If successful,
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f025 fb0f 	bl	8026c94 <mg_flash_erase>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d022      	beq.n	80016c2 <mg_flash_sector_cleanup+0x126>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001680:	e01b      	b.n	80016ba <mg_flash_sector_cleanup+0x11e>
      size = *(uint32_t *) (io.buf + ofs);
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001686:	4413      	add	r3, r2
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	613b      	str	r3, [r7, #16]
      key = *(uint32_t *) (io.buf + ofs + sizeof(uint32_t));
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001690:	3304      	adds	r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
      mg_flash_save(sector, key, io.buf + ofs + hs, size);  // Save to flash
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a0:	440b      	add	r3, r1
 80016a2:	441a      	add	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4601      	mov	r1, r0
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f81b 	bl	80016e4 <mg_flash_save>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016b2:	4413      	add	r3, r2
 80016b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016b6:	4413      	add	r3, r2
 80016b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3df      	bcc.n	8001682 <mg_flash_sector_cleanup+0xe6>
    }
  }
  mg_iobuf_free(&io);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fc25 	bl	8006f16 <mg_iobuf_free>
}
 80016cc:	bf00      	nop
 80016ce:	3744      	adds	r7, #68	@ 0x44
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	24000240 	.word	0x24000240
 80016d8:	0802a678 	.word	0x0802a678
 80016dc:	08027148 	.word	0x08027148
 80016e0:	0802722c 	.word	0x0802722c

080016e4 <mg_flash_save>:

// Save an object with a given key - append to the end of an object list
bool mg_flash_save(void *sector, uint32_t key, const void *buf, size_t len) {
 80016e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e8:	b094      	sub	sp, #80	@ 0x50
 80016ea:	af02      	add	r7, sp, #8
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector;
 80016f4:	f025 f9b8 	bl	8026a68 <mg_flash_start>
 80016f8:	6338      	str	r0, [r7, #48]	@ 0x30
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	647b      	str	r3, [r7, #68]	@ 0x44
  size_t ss = mg_flash_sector_size(), ofs = 0, n;
 80016fe:	f025 f9c9 	bl	8026a94 <mg_flash_sector_size>
 8001702:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	@ 0x40
  bool ok = false;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (s == NULL) s = flash_last_sector();
 800170e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <mg_flash_save+0x36>
 8001714:	f7ff fe7a 	bl	800140c <flash_last_sector>
 8001718:	6478      	str	r0, [r7, #68]	@ 0x44
  if (s < base || s >= base + mg_flash_size()) {
 800171a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800171c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800171e:	429a      	cmp	r2, r3
 8001720:	d307      	bcc.n	8001732 <mg_flash_save+0x4e>
 8001722:	f025 f9aa 	bl	8026a7a <mg_flash_size>
 8001726:	4602      	mov	r2, r0
 8001728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172a:	4413      	add	r3, r2
 800172c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800172e:	429a      	cmp	r2, r3
 8001730:	d310      	bcc.n	8001754 <mg_flash_save+0x70>
    MG_ERROR(("%p is outsize of flash", sector));
 8001732:	4b82      	ldr	r3, [pc, #520]	@ (800193c <mg_flash_save+0x258>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f340 81af 	ble.w	8001a9a <mg_flash_save+0x3b6>
 800173c:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <mg_flash_save+0x25c>)
 800173e:	f240 1257 	movw	r2, #343	@ 0x157
 8001742:	4980      	ldr	r1, [pc, #512]	@ (8001944 <mg_flash_save+0x260>)
 8001744:	2001      	movs	r0, #1
 8001746:	f006 fa8b 	bl	8007c60 <mg_log_prefix>
 800174a:	68f9      	ldr	r1, [r7, #12]
 800174c:	487e      	ldr	r0, [pc, #504]	@ (8001948 <mg_flash_save+0x264>)
 800174e:	f006 fad7 	bl	8007d00 <mg_log>
 8001752:	e1a2      	b.n	8001a9a <mg_flash_save+0x3b6>
  } else if (((s - base) % ss) != 0) {
 8001754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800175c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001762:	fb01 f202 	mul.w	r2, r1, r2
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d010      	beq.n	800178e <mg_flash_save+0xaa>
    MG_ERROR(("%p is not a sector boundary", sector));
 800176c:	4b73      	ldr	r3, [pc, #460]	@ (800193c <mg_flash_save+0x258>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f340 8192 	ble.w	8001a9a <mg_flash_save+0x3b6>
 8001776:	4b72      	ldr	r3, [pc, #456]	@ (8001940 <mg_flash_save+0x25c>)
 8001778:	f240 1259 	movw	r2, #345	@ 0x159
 800177c:	4971      	ldr	r1, [pc, #452]	@ (8001944 <mg_flash_save+0x260>)
 800177e:	2001      	movs	r0, #1
 8001780:	f006 fa6e 	bl	8007c60 <mg_log_prefix>
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	4871      	ldr	r0, [pc, #452]	@ (800194c <mg_flash_save+0x268>)
 8001788:	f006 faba 	bl	8007d00 <mg_log>
 800178c:	e185      	b.n	8001a9a <mg_flash_save+0x3b6>
  } else {
 800178e:	466b      	mov	r3, sp
 8001790:	461d      	mov	r5, r3
    char ab[mg_flash_write_align()];  // Aligned write block
 8001792:	f025 f988 	bl	8026aa6 <mg_flash_write_align>
 8001796:	4604      	mov	r4, r0
 8001798:	4623      	mov	r3, r4
 800179a:	3b01      	subs	r3, #1
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800179e:	2300      	movs	r3, #0
 80017a0:	46a2      	mov	sl, r4
 80017a2:	469b      	mov	fp, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017b8:	2300      	movs	r3, #0
 80017ba:	46a0      	mov	r8, r4
 80017bc:	4699      	mov	r9, r3
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d2:	1de3      	adds	r3, r4, #7
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	ebad 0d03 	sub.w	sp, sp, r3
 80017dc:	ab02      	add	r3, sp, #8
 80017de:	3300      	adds	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t hdr[2] = {(uint32_t) len, key};
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	617b      	str	r3, [r7, #20]
    size_t needed = sizeof(hdr) + len;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3308      	adds	r3, #8
 80017ee:	623b      	str	r3, [r7, #32]
    size_t needed_aligned = MG_ROUND_UP(needed, sizeof(ab));
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d101      	bne.n	80017f8 <mg_flash_save+0x114>
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	e006      	b.n	8001806 <mg_flash_save+0x122>
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	4423      	add	r3, r4
 80017fc:	3b01      	subs	r3, #1
 80017fe:	fbb3 f3f4 	udiv	r3, r3, r4
 8001802:	fb04 f303 	mul.w	r3, r4, r3
 8001806:	61fb      	str	r3, [r7, #28]
    while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 8001808:	e003      	b.n	8001812 <mg_flash_save+0x12e>
 800180a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800180c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800180e:	4413      	add	r3, r2
 8001810:	643b      	str	r3, [r7, #64]	@ 0x40
 8001812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001816:	18d0      	adds	r0, r2, r3
 8001818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	18d1      	adds	r1, r2, r3
 800181e:	2300      	movs	r3, #0
 8001820:	2200      	movs	r2, #0
 8001822:	f7ff fd9c 	bl	800135e <mg_flash_next>
 8001826:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ed      	bne.n	800180a <mg_flash_save+0x126>

    // If there is not enough space left, cleanup sector and re-eval ofs
    if (ofs + needed_aligned >= ss) {
 800182e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d817      	bhi.n	800186a <mg_flash_save+0x186>
      mg_flash_sector_cleanup(s);
 800183a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800183c:	f7ff feae 	bl	800159c <mg_flash_sector_cleanup>
      ofs = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	643b      	str	r3, [r7, #64]	@ 0x40
      while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 8001844:	e003      	b.n	800184e <mg_flash_save+0x16a>
 8001846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800184a:	4413      	add	r3, r2
 800184c:	643b      	str	r3, [r7, #64]	@ 0x40
 800184e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001852:	18d0      	adds	r0, r2, r3
 8001854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	18d1      	adds	r1, r2, r3
 800185a:	2300      	movs	r3, #0
 800185c:	2200      	movs	r2, #0
 800185e:	f7ff fd7e 	bl	800135e <mg_flash_next>
 8001862:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ed      	bne.n	8001846 <mg_flash_save+0x162>
    }

    if (ofs + needed_aligned <= ss) {
 800186a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001872:	429a      	cmp	r2, r3
 8001874:	f0c0 8102 	bcc.w	8001a7c <mg_flash_save+0x398>
      // Enough space to save this object
      if (sizeof(ab) < sizeof(hdr)) {
 8001878:	2c07      	cmp	r4, #7
 800187a:	d81a      	bhi.n	80018b2 <mg_flash_save+0x1ce>
        // Flash write granularity is 32 bit or less, write with no buffering
        ok = mg_flash_write(s + ofs, hdr, sizeof(hdr));
 800187c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800187e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001880:	4413      	add	r3, r2
 8001882:	f107 0110 	add.w	r1, r7, #16
 8001886:	2208      	movs	r2, #8
 8001888:	4618      	mov	r0, r3
 800188a:	f025 faeb 	bl	8026e64 <mg_flash_write>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok) mg_flash_write(s + ofs + sizeof(hdr), buf, len);
 8001894:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80c1 	beq.w	8001a20 <mg_flash_save+0x33c>
 800189e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018a0:	3308      	adds	r3, #8
 80018a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018a4:	4413      	add	r3, r2
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f025 fada 	bl	8026e64 <mg_flash_write>
 80018b0:	e0b6      	b.n	8001a20 <mg_flash_save+0x33c>
      } else {
        // Flash granularity is sizeof(hdr) or more. We need to save in
        // 3 chunks: initial block, bulk, rest. This is because we have
        // two memory chunks to write: hdr and buf, on aligned boundaries.
        n = sizeof(ab) - sizeof(hdr);      // Initial chunk that we write
 80018b2:	f1a4 0308 	sub.w	r3, r4, #8
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (n > len) n = len;              // is
 80018b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d901      	bls.n	80018c4 <mg_flash_save+0x1e0>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        memset(ab, 0xff, sizeof(ab));      // initialized to all-one
 80018c4:	4622      	mov	r2, r4
 80018c6:	21ff      	movs	r1, #255	@ 0xff
 80018c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018ca:	f021 fedb 	bl	8023684 <memset>
        memcpy(ab, hdr, sizeof(hdr));      // contains the header (key + size)
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2208      	movs	r2, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018d8:	f021 ffc9 	bl	802386e <memcpy>
        memcpy(ab + sizeof(hdr), buf, n);  // and an initial part of buf
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	3308      	adds	r3, #8
 80018e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f021 ffc2 	bl	802386e <memcpy>
        MG_INFO(("saving initial block of %lu", sizeof(ab)));
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <mg_flash_save+0x258>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	dd0a      	ble.n	8001908 <mg_flash_save+0x224>
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <mg_flash_save+0x25c>)
 80018f4:	f240 1277 	movw	r2, #375	@ 0x177
 80018f8:	4912      	ldr	r1, [pc, #72]	@ (8001944 <mg_flash_save+0x260>)
 80018fa:	2002      	movs	r0, #2
 80018fc:	f006 f9b0 	bl	8007c60 <mg_log_prefix>
 8001900:	4621      	mov	r1, r4
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <mg_flash_save+0x26c>)
 8001904:	f006 f9fc 	bl	8007d00 <mg_log>
        ok = mg_flash_write(s + ofs, ab, sizeof(ab));
 8001908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800190a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800190c:	4413      	add	r3, r2
 800190e:	4622      	mov	r2, r4
 8001910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001912:	4618      	mov	r0, r3
 8001914:	f025 faa6 	bl	8026e64 <mg_flash_write>
 8001918:	4603      	mov	r3, r0
 800191a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok && len > n) {
 800191e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001922:	2b00      	cmp	r3, #0
 8001924:	d07c      	beq.n	8001a20 <mg_flash_save+0x33c>
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800192a:	429a      	cmp	r2, r3
 800192c:	d978      	bls.n	8001a20 <mg_flash_save+0x33c>
          size_t n2 = MG_ROUND_DOWN(len - n, sizeof(ab));
 800192e:	2c00      	cmp	r4, #0
 8001930:	d110      	bne.n	8001954 <mg_flash_save+0x270>
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	e013      	b.n	8001962 <mg_flash_save+0x27e>
 800193a:	bf00      	nop
 800193c:	24000240 	.word	0x24000240
 8001940:	0802a690 	.word	0x0802a690
 8001944:	08027148 	.word	0x08027148
 8001948:	080271d4 	.word	0x080271d4
 800194c:	080271ec 	.word	0x080271ec
 8001950:	08027244 	.word	0x08027244
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	fbb3 f3f4 	udiv	r3, r3, r4
 800195e:	fb04 f303 	mul.w	r3, r4, r3
 8001962:	61bb      	str	r3, [r7, #24]
          if (n2 > 0) {
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01c      	beq.n	80019a4 <mg_flash_save+0x2c0>
            MG_INFO(("saving bulk, %lu", n2));
 800196a:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa8 <mg_flash_save+0x3c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	dd0a      	ble.n	8001988 <mg_flash_save+0x2a4>
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <mg_flash_save+0x3c8>)
 8001974:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001978:	494d      	ldr	r1, [pc, #308]	@ (8001ab0 <mg_flash_save+0x3cc>)
 800197a:	2002      	movs	r0, #2
 800197c:	f006 f970 	bl	8007c60 <mg_log_prefix>
 8001980:	69b9      	ldr	r1, [r7, #24]
 8001982:	484c      	ldr	r0, [pc, #304]	@ (8001ab4 <mg_flash_save+0x3d0>)
 8001984:	f006 f9bc 	bl	8007d00 <mg_log>
            ok = mg_flash_write(s + ofs + sizeof(ab), (char *) buf + n, n2);
 8001988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198a:	4423      	add	r3, r4
 800198c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800198e:	18d0      	adds	r0, r2, r3
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001994:	4413      	add	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4619      	mov	r1, r3
 800199a:	f025 fa63 	bl	8026e64 <mg_flash_write>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
          if (ok && len > n) {
 80019a4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d039      	beq.n	8001a20 <mg_flash_save+0x33c>
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d935      	bls.n	8001a20 <mg_flash_save+0x33c>
            size_t n3 = len - n - n2;
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b8:	1ad2      	subs	r2, r2, r3
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	637b      	str	r3, [r7, #52]	@ 0x34
            if (n3 > sizeof(ab)) n3 = sizeof(ab);
 80019c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c2:	429c      	cmp	r4, r3
 80019c4:	d200      	bcs.n	80019c8 <mg_flash_save+0x2e4>
 80019c6:	637c      	str	r4, [r7, #52]	@ 0x34
            memset(ab, 0xff, sizeof(ab));
 80019c8:	4622      	mov	r2, r4
 80019ca:	21ff      	movs	r1, #255	@ 0xff
 80019cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019ce:	f021 fe59 	bl	8023684 <memset>
            memcpy(ab, (char *) buf + n + n2, n3);
 80019d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4413      	add	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019de:	4619      	mov	r1, r3
 80019e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019e2:	f021 ff44 	bl	802386e <memcpy>
            MG_INFO(("saving rest, %lu", n3));
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <mg_flash_save+0x3c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	dd0a      	ble.n	8001a04 <mg_flash_save+0x320>
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <mg_flash_save+0x3c8>)
 80019f0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80019f4:	492e      	ldr	r1, [pc, #184]	@ (8001ab0 <mg_flash_save+0x3cc>)
 80019f6:	2002      	movs	r0, #2
 80019f8:	f006 f932 	bl	8007c60 <mg_log_prefix>
 80019fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019fe:	482e      	ldr	r0, [pc, #184]	@ (8001ab8 <mg_flash_save+0x3d4>)
 8001a00:	f006 f97e 	bl	8007d00 <mg_log>
            ok = mg_flash_write(s + ofs + sizeof(ab) + n2, ab, sizeof(ab));
 8001a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a06:	18e2      	adds	r2, r4, r3
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a0e:	4413      	add	r3, r2
 8001a10:	4622      	mov	r2, r4
 8001a12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f025 fa25 	bl	8026e64 <mg_flash_write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
        }
      }
      MG_DEBUG(("Saved %lu/%lu bytes @ %p, key %x: %d", len, needed_aligned,
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <mg_flash_save+0x3c4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	dd14      	ble.n	8001a52 <mg_flash_save+0x36e>
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <mg_flash_save+0x3c8>)
 8001a2a:	f240 1289 	movw	r2, #393	@ 0x189
 8001a2e:	4920      	ldr	r1, [pc, #128]	@ (8001ab0 <mg_flash_save+0x3cc>)
 8001a30:	2003      	movs	r0, #3
 8001a32:	f006 f915 	bl	8007c60 <mg_log_prefix>
 8001a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a3a:	441a      	add	r2, r3
 8001a3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	6839      	ldr	r1, [r7, #0]
 8001a4c:	481b      	ldr	r0, [pc, #108]	@ (8001abc <mg_flash_save+0x3d8>)
 8001a4e:	f006 f957 	bl	8007d00 <mg_log>
                s + ofs, key, ok));
      MG_DEBUG(("Sector space left: %lu bytes", ss - ofs - needed_aligned));
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <mg_flash_save+0x3c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	dd1e      	ble.n	8001a98 <mg_flash_save+0x3b4>
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <mg_flash_save+0x3c8>)
 8001a5c:	f240 128b 	movw	r2, #395	@ 0x18b
 8001a60:	4913      	ldr	r1, [pc, #76]	@ (8001ab0 <mg_flash_save+0x3cc>)
 8001a62:	2003      	movs	r0, #3
 8001a64:	f006 f8fc 	bl	8007c60 <mg_log_prefix>
 8001a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a6c:	1ad2      	subs	r2, r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	4812      	ldr	r0, [pc, #72]	@ (8001ac0 <mg_flash_save+0x3dc>)
 8001a76:	f006 f943 	bl	8007d00 <mg_log>
 8001a7a:	e00d      	b.n	8001a98 <mg_flash_save+0x3b4>
    } else {
      MG_ERROR(("Sector is full"));
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <mg_flash_save+0x3c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd09      	ble.n	8001a98 <mg_flash_save+0x3b4>
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <mg_flash_save+0x3c8>)
 8001a86:	f240 128d 	movw	r2, #397	@ 0x18d
 8001a8a:	4909      	ldr	r1, [pc, #36]	@ (8001ab0 <mg_flash_save+0x3cc>)
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f006 f8e7 	bl	8007c60 <mg_log_prefix>
 8001a92:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <mg_flash_save+0x3e0>)
 8001a94:	f006 f934 	bl	8007d00 <mg_log>
 8001a98:	46ad      	mov	sp, r5
    }
  }
  return ok;
 8001a9a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3748      	adds	r7, #72	@ 0x48
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa8:	24000240 	.word	0x24000240
 8001aac:	0802a690 	.word	0x0802a690
 8001ab0:	08027148 	.word	0x08027148
 8001ab4:	08027260 	.word	0x08027260
 8001ab8:	08027274 	.word	0x08027274
 8001abc:	08027288 	.word	0x08027288
 8001ac0:	080272b0 	.word	0x080272b0
 8001ac4:	080272d0 	.word	0x080272d0

08001ac8 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e002      	b.n	8001ade <mg_dns_free+0x16>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1f7      	bne.n	8001ad8 <mg_dns_free+0x10>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	601a      	str	r2, [r3, #0]
  free(d);
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f020 fb6f 	bl	80221d4 <free>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	3330      	adds	r3, #48	@ 0x30
 8001b0c:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00d      	b.n	8001b32 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d103      	bne.n	8001b2e <mg_resolve_cancel+0x30>
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	6938      	ldr	r0, [r7, #16]
 8001b2a:	f7ff ffcd 	bl	8001ac8 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ee      	bne.n	8001b16 <mg_resolve_cancel+0x18>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b08c      	sub	sp, #48	@ 0x30
 8001b46:	af04      	add	r7, sp, #16
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <mg_dns_parse_name_depth+0x24>
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <mg_dns_parse_name_depth+0x24>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8001b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	f340 8084 	ble.w	8001c76 <mg_dns_parse_name_depth+0x134>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e093      	b.n	8001c9a <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <mg_dns_parse_name_depth+0x4c>
      i++;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
      break;
 8001b8c:	e07b      	b.n	8001c86 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d02f      	beq.n	8001bf8 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	440a      	add	r2, r1
 8001ba6:	3201      	adds	r2, #1
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	440a      	add	r2, r1
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d919      	bls.n	8001bf0 <mg_dns_parse_name_depth+0xae>
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d111      	bne.n	8001bf0 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bce:	3301      	adds	r3, #1
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7ff ffae 	bl	8001b42 <mg_dns_parse_name_depth>
 8001be6:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <mg_dns_parse_name_depth+0xae>
        return 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e054      	b.n	8001c9a <mg_dns_parse_name_depth+0x158>
      i += 2;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	61fb      	str	r3, [r7, #28]
      break;
 8001bf6:	e046      	b.n	8001c86 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	3301      	adds	r3, #1
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d801      	bhi.n	8001c0e <mg_dns_parse_name_depth+0xcc>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e045      	b.n	8001c9a <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8001c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00b      	beq.n	8001c2c <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d204      	bcs.n	8001c26 <mg_dns_parse_name_depth+0xe4>
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c20:	4413      	add	r3, r2
 8001c22:	222e      	movs	r2, #46	@ 0x2e
 8001c24:	701a      	strb	r2, [r3, #0]
      j++;
 8001c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c28:	3301      	adds	r3, #1
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4413      	add	r3, r2
 8001c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d90c      	bls.n	8001c52 <mg_dns_parse_name_depth+0x110>
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3c:	18d0      	adds	r0, r2, r3
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	3301      	adds	r3, #1
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f021 fe0e 	bl	802386e <memcpy>
    j += n;
 8001c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	4413      	add	r3, r2
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	4413      	add	r3, r2
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8001c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d204      	bcs.n	8001c76 <mg_dns_parse_name_depth+0x134>
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c70:	4413      	add	r3, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f63f af76 	bhi.w	8001b72 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8001c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <mg_dns_parse_name_depth+0x156>
 8001c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
  return i;
 8001c98:	69fb      	ldr	r3, [r7, #28]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b088      	sub	sp, #32
 8001ca6:	af04      	add	r7, sp, #16
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7ff ff3d 	bl	8001b42 <mg_dns_parse_name_depth>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b088      	sub	sp, #32
 8001cd6:	af02      	add	r7, sp, #8
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	6a38      	ldr	r0, [r7, #32]
 8001cf6:	f021 fcc5 	bl	8023684 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b0b      	cmp	r3, #11
 8001cfe:	d801      	bhi.n	8001d04 <mg_dns_parse_rr+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	e074      	b.n	8001dee <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d0a:	d901      	bls.n	8001d10 <mg_dns_parse_rr+0x3e>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e06e      	b.n	8001dee <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d301      	bcc.n	8001d1c <mg_dns_parse_rr+0x4a>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e068      	b.n	8001dee <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff ffbb 	bl	8001ca2 <mg_dns_parse_name>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	801a      	strh	r2, [r3, #0]
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <mg_dns_parse_rr+0x6e>
    return 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e056      	b.n	8001dee <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	3304      	adds	r3, #4
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4413      	add	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d901      	bls.n	8001d58 <mg_dns_parse_rr+0x86>
 8001d54:	2300      	movs	r3, #0
 8001d56:	e04a      	b.n	8001dee <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3b02      	subs	r3, #2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <mg_dns_parse_rr+0xcc>
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	e027      	b.n	8001dee <mg_dns_parse_rr+0x11c>

  s += 6;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3306      	adds	r3, #6
 8001da2:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d901      	bls.n	8001db0 <mg_dns_parse_rr+0xde>
 8001dac:	2300      	movs	r3, #0
 8001dae:	e01e      	b.n	8001dee <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3b02      	subs	r3, #2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	88db      	ldrh	r3, [r3, #6]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d201      	bcs.n	8001de0 <mg_dns_parse_rr+0x10e>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e006      	b.n	8001dee <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	88db      	ldrh	r3, [r3, #6]
 8001dea:	4413      	add	r3, r2
 8001dec:	330a      	adds	r3, #10
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	@ 0x38
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8001e08:	230c      	movs	r3, #12
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 8001e0c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001e10:	2100      	movs	r1, #0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f021 fc36 	bl	8023684 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b0b      	cmp	r3, #11
 8001e1c:	d801      	bhi.n	8001e22 <mg_dns_parse+0x2a>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e0aa      	b.n	8001f78 <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	889b      	ldrh	r3, [r3, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f015 fc9d 	bl	8017766 <mg_ntohs>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d901      	bls.n	8001e36 <mg_dns_parse+0x3e>
 8001e32:	2300      	movs	r3, #0
 8001e34:	e0a0      	b.n	8001f78 <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	88db      	ldrh	r3, [r3, #6]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f015 fc93 	bl	8017766 <mg_ntohs>
 8001e40:	4603      	mov	r3, r0
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8001e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e46:	2b0a      	cmp	r3, #10
 8001e48:	d910      	bls.n	8001e6c <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <mg_dns_parse+0x188>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	dd0a      	ble.n	8001e68 <mg_dns_parse+0x70>
 8001e52:	4b4c      	ldr	r3, [pc, #304]	@ (8001f84 <mg_dns_parse+0x18c>)
 8001e54:	f240 524b 	movw	r2, #1355	@ 0x54b
 8001e58:	494b      	ldr	r1, [pc, #300]	@ (8001f88 <mg_dns_parse+0x190>)
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f005 ff00 	bl	8007c60 <mg_log_prefix>
 8001e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e62:	484a      	ldr	r0, [pc, #296]	@ (8001f8c <mg_dns_parse+0x194>)
 8001e64:	f005 ff4c 	bl	8007d00 <mg_log>
    num_answers = 10;  // Sanity cap
 8001e68:	230a      	movs	r3, #10
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f015 fc78 	bl	8017766 <mg_ntohs>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e82:	e015      	b.n	8001eb0 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff ff1e 	bl	8001cd2 <mg_dns_parse_rr>
 8001e96:	61f8      	str	r0, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <mg_dns_parse+0xaa>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e06a      	b.n	8001f78 <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eac:	3301      	adds	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f015 fc56 	bl	8017766 <mg_ntohs>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d3df      	bcc.n	8001e84 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ec8:	e051      	b.n	8001f6e <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff fefb 	bl	8001cd2 <mg_dns_parse_rr>
 8001edc:	61f8      	str	r0, [r7, #28]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <mg_dns_parse+0xf0>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e047      	b.n	8001f78 <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3318      	adds	r3, #24
 8001eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef0:	9200      	str	r2, [sp, #0]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7ff fed3 	bl	8001ca2 <mg_dns_parse_name>
    ofs += n;
 8001efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8001f04:	8b7b      	ldrh	r3, [r7, #26]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d114      	bne.n	8001f34 <mg_dns_parse+0x13c>
 8001f0a:	8afb      	ldrh	r3, [r7, #22]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d111      	bne.n	8001f34 <mg_dns_parse+0x13c>
 8001f10:	8b3b      	ldrh	r3, [r7, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10e      	bne.n	8001f34 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f22:	3a04      	subs	r2, #4
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	440a      	add	r2, r1
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001f32:	e020      	b.n	8001f76 <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8001f34:	8b7b      	ldrh	r3, [r7, #26]
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d116      	bne.n	8001f68 <mg_dns_parse+0x170>
 8001f3a:	8afb      	ldrh	r3, [r7, #22]
 8001f3c:	2b1c      	cmp	r3, #28
 8001f3e:	d113      	bne.n	8001f68 <mg_dns_parse+0x170>
 8001f40:	8b3b      	ldrh	r3, [r7, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d110      	bne.n	8001f68 <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1d18      	adds	r0, r3, #4
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3b10      	subs	r3, #16
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	2210      	movs	r2, #16
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f021 fc87 	bl	802386e <memcpy>
      dm->resolved = true;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001f66:	e006      	b.n	8001f76 <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 8001f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3a9      	bcc.n	8001eca <mg_dns_parse+0xd2>
    }
  }
  return true;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	@ 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000240 	.word	0x24000240
 8001f84:	0802a6c0 	.word	0x0802a6c0
 8001f88:	08027148 	.word	0x08027148
 8001f8c:	080273a4 	.word	0x080273a4

08001f90 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b0d2      	sub	sp, #328	@ 0x148
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f9e:	6018      	str	r0, [r3, #0]
 8001fa0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fa4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001fa8:	6019      	str	r1, [r3, #0]
 8001faa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fb2:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8001fb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fb8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	3330      	adds	r3, #48	@ 0x30
 8001fc2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8001fc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d12d      	bne.n	8002030 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8001fd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 8001fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001ff0:	e019      	b.n	8002026 <dns_cb+0x96>
      tmp = d->next;
 8001ff2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8001ffc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002000:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002004:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002008:	4290      	cmp	r0, r2
 800200a:	eb71 0303 	sbcs.w	r3, r1, r3
 800200e:	d206      	bcs.n	800201e <dns_cb+0x8e>
 8002010:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4992      	ldr	r1, [pc, #584]	@ (8002260 <dns_cb+0x2d0>)
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fb37 	bl	800268c <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 800201e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002022:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002026:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e1      	bne.n	8001ff2 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 800202e:	e112      	b.n	8002256 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8002030:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002034:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b07      	cmp	r3, #7
 800203c:	f040 80e4 	bne.w	8002208 <dns_cb+0x278>
    int resolved = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8002046:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800204a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002056:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f107 0210 	add.w	r2, r7, #16
 8002062:	4619      	mov	r1, r3
 8002064:	f7ff fec8 	bl	8001df8 <mg_dns_parse>
 8002068:	4603      	mov	r3, r0
 800206a:	f083 0301 	eor.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01e      	beq.n	80020b2 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8002074:	4b7b      	ldr	r3, [pc, #492]	@ (8002264 <dns_cb+0x2d4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	dd09      	ble.n	8002090 <dns_cb+0x100>
 800207c:	4b7a      	ldr	r3, [pc, #488]	@ (8002268 <dns_cb+0x2d8>)
 800207e:	f240 5279 	movw	r2, #1401	@ 0x579
 8002082:	497a      	ldr	r1, [pc, #488]	@ (800226c <dns_cb+0x2dc>)
 8002084:	2001      	movs	r0, #1
 8002086:	f005 fdeb 	bl	8007c60 <mg_log_prefix>
 800208a:	4879      	ldr	r0, [pc, #484]	@ (8002270 <dns_cb+0x2e0>)
 800208c:	f005 fe38 	bl	8007d00 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8002090:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002094:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800209c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f005 fe5e 	bl	8007d6c <mg_hexdump>
 80020b0:	e090      	b.n	80021d4 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 80020b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80020bc:	e085      	b.n	80021ca <dns_cb+0x23a>
        tmp = d->next;
 80020be:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 80020c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020d6:	8a1b      	ldrh	r3, [r3, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d171      	bne.n	80021c0 <dns_cb+0x230>
        if (d->c->is_resolving) {
 80020dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d04a      	beq.n	8002186 <dns_cb+0x1f6>
          if (dm.resolved) {
 80020f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020f8:	789b      	ldrb	r3, [r3, #2]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d038      	beq.n	8002170 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80020fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002106:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800210a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800210e:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8002110:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800211a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800211e:	f102 041c 	add.w	r4, r2, #28
 8002122:	1d1d      	adds	r5, r3, #4
 8002124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 800212c:	4b4d      	ldr	r3, [pc, #308]	@ (8002264 <dns_cb+0x2d4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b02      	cmp	r3, #2
 8002132:	dd16      	ble.n	8002162 <dns_cb+0x1d2>
 8002134:	4b4c      	ldr	r3, [pc, #304]	@ (8002268 <dns_cb+0x2d8>)
 8002136:	f240 5285 	movw	r2, #1413	@ 0x585
 800213a:	494c      	ldr	r1, [pc, #304]	@ (800226c <dns_cb+0x2dc>)
 800213c:	2003      	movs	r0, #3
 800213e:	f005 fd8f 	bl	8007c60 <mg_log_prefix>
 8002142:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800214a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	331c      	adds	r3, #28
 8002152:	f107 0210 	add.w	r2, r7, #16
 8002156:	3218      	adds	r2, #24
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <dns_cb+0x2e4>)
 800215c:	4846      	ldr	r0, [pc, #280]	@ (8002278 <dns_cb+0x2e8>)
 800215e:	f005 fdcf 	bl	8007d00 <mg_log>
            mg_connect_resolved(d->c);
 8002162:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f00a fb3f 	bl	800c7ec <mg_connect_resolved>
 800216e:	e01d      	b.n	80021ac <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8002170:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002174:	6858      	ldr	r0, [r3, #4]
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	3318      	adds	r3, #24
 800217c:	461a      	mov	r2, r3
 800217e:	493f      	ldr	r1, [pc, #252]	@ (800227c <dns_cb+0x2ec>)
 8002180:	f000 fa84 	bl	800268c <mg_error>
 8002184:	e012      	b.n	80021ac <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8002186:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <dns_cb+0x2d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	dd0e      	ble.n	80021ac <dns_cb+0x21c>
 800218e:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <dns_cb+0x2d8>)
 8002190:	f240 5292 	movw	r2, #1426	@ 0x592
 8002194:	4935      	ldr	r1, [pc, #212]	@ (800226c <dns_cb+0x2dc>)
 8002196:	2001      	movs	r0, #1
 8002198:	f005 fd62 	bl	8007c60 <mg_log_prefix>
 800219c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	4619      	mov	r1, r3
 80021a6:	4836      	ldr	r0, [pc, #216]	@ (8002280 <dns_cb+0x2f0>)
 80021a8:	f005 fdaa 	bl	8007d00 <mg_log>
        mg_dns_free(head, d);
 80021ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021b0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80021b4:	f7ff fc88 	bl	8001ac8 <mg_dns_free>
        resolved = 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80021be:	e000      	b.n	80021c2 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 80021c0:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 80021c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80021ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f47f af75 	bne.w	80020be <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80021d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <dns_cb+0x268>
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <dns_cb+0x2d4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dd09      	ble.n	80021f8 <dns_cb+0x268>
 80021e4:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <dns_cb+0x2d8>)
 80021e6:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
 80021ea:	4920      	ldr	r1, [pc, #128]	@ (800226c <dns_cb+0x2dc>)
 80021ec:	2001      	movs	r0, #1
 80021ee:	f005 fd37 	bl	8007c60 <mg_log_prefix>
 80021f2:	4824      	ldr	r0, [pc, #144]	@ (8002284 <dns_cb+0x2f4>)
 80021f4:	f005 fd84 	bl	8007d00 <mg_log>
    c->recv.len = 0;
 80021f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80021fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002206:	e026      	b.n	8002256 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 8002208:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800220c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b09      	cmp	r3, #9
 8002214:	d11f      	bne.n	8002256 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 8002216:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002220:	e015      	b.n	800224e <dns_cb+0x2be>
      tmp = d->next;
 8002222:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 800222c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4915      	ldr	r1, [pc, #84]	@ (8002288 <dns_cb+0x2f8>)
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa29 	bl	800268c <mg_error>
      mg_dns_free(head, d);
 800223a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800223e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8002242:	f7ff fc41 	bl	8001ac8 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8002246:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800224a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800224e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e5      	bne.n	8002222 <dns_cb+0x292>
}
 8002256:	bf00      	nop
 8002258:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800225c:	46bd      	mov	sp, r7
 800225e:	bdb0      	pop	{r4, r5, r7, pc}
 8002260:	080273d0 	.word	0x080273d0
 8002264:	24000240 	.word	0x24000240
 8002268:	0802a6d0 	.word	0x0802a6d0
 800226c:	08027148 	.word	0x08027148
 8002270:	080273dc 	.word	0x080273dc
 8002274:	0800d5b3 	.word	0x0800d5b3
 8002278:	080273f8 	.word	0x080273f8
 800227c:	08027408 	.word	0x08027408
 8002280:	08027420 	.word	0x08027420
 8002284:	08027438 	.word	0x08027438
 8002288:	08027448 	.word	0x08027448

0800228c <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b0cb      	sub	sp, #300	@ 0x12c
 8002290:	af00      	add	r7, sp, #0
 8002292:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8002296:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800229a:	6020      	str	r0, [r4, #0]
 800229c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80022a0:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80022a4:	6001      	str	r1, [r0, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80022ac:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80022b6:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80022ba:	460a      	mov	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f021 f9db 	bl	8023684 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80022ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80022d2:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f015 fa44 	bl	8017766 <mg_ntohs>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80022e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022ea:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80022ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80022f0:	f015 fa39 	bl	8017766 <mg_ntohs>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80022fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002300:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f015 fa2f 	bl	8017766 <mg_ntohs>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002310:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002314:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800231c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002320:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002324:	e054      	b.n	80023d0 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8002326:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800232a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b2e      	cmp	r3, #46	@ 0x2e
 800233c:	d009      	beq.n	8002352 <mg_dns_send+0xc6>
 800233e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002342:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800234e:	429a      	cmp	r2, r3
 8002350:	d32f      	bcc.n	80023b2 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8002352:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002356:	b2da      	uxtb	r2, r3
 8002358:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800235c:	b2db      	uxtb	r3, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b2d9      	uxtb	r1, r3
 8002362:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002366:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800236a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800236e:	4413      	add	r3, r2
 8002370:	330c      	adds	r3, #12
 8002372:	460a      	mov	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8002376:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800237a:	3301      	adds	r3, #1
 800237c:	f107 0214 	add.w	r2, r7, #20
 8002380:	3308      	adds	r3, #8
 8002382:	4413      	add	r3, r2
 8002384:	1d18      	adds	r0, r3, #4
 8002386:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800238a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002396:	18d1      	adds	r1, r2, r3
 8002398:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800239c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	f021 fa63 	bl	802386e <memcpy>
      n = i + 1;
 80023a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023ac:	3301      	adds	r3, #1
 80023ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80023b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80023b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d209      	bcs.n	80023da <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80023c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023d4:	2bfa      	cmp	r3, #250	@ 0xfa
 80023d6:	d9a6      	bls.n	8002326 <mg_dns_send+0x9a>
 80023d8:	e000      	b.n	80023dc <mg_dns_send+0x150>
    if (i >= name->len) break;
 80023da:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80023dc:	f107 0214 	add.w	r2, r7, #20
 80023e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023e4:	3308      	adds	r3, #8
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	2205      	movs	r2, #5
 80023ec:	4916      	ldr	r1, [pc, #88]	@ (8002448 <mg_dns_send+0x1bc>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f021 fa3d 	bl	802386e <memcpy>
  n += 5;
 80023f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023f8:	3305      	adds	r3, #5
 80023fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80023fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002402:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <mg_dns_send+0x194>
 800240c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002410:	3b03      	subs	r3, #3
 8002412:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002416:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800241a:	4413      	add	r3, r2
 800241c:	221c      	movs	r2, #28
 800241e:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8002420:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002424:	f103 020c 	add.w	r2, r3, #12
 8002428:	f107 0114 	add.w	r1, r7, #20
 800242c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002430:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f00a fc9d 	bl	800cd74 <mg_send>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	08027454 	.word	0x08027454

0800244c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 800244c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8002468:	494d      	ldr	r1, [pc, #308]	@ (80025a0 <mg_sendnsreq+0x154>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f90e 	bl	800268c <mg_error>
 8002470:	e017      	b.n	80024a2 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6858      	ldr	r0, [r3, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	2200      	movs	r2, #0
 8002486:	f007 f88f 	bl	80095a8 <mg_connect>
 800248a:	4602      	mov	r2, r0
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a41      	ldr	r2, [pc, #260]	@ (80025a4 <mg_sendnsreq+0x158>)
 800249e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 80024aa:	493f      	ldr	r1, [pc, #252]	@ (80025a8 <mg_sendnsreq+0x15c>)
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f8ed 	bl	800268c <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80024b2:	e070      	b.n	8002596 <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80024b4:	2118      	movs	r1, #24
 80024b6:	2001      	movs	r0, #1
 80024b8:	f01f fe68 	bl	802218c <calloc>
 80024bc:	4603      	mov	r3, r0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 80024c6:	4939      	ldr	r1, [pc, #228]	@ (80025ac <mg_sendnsreq+0x160>)
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f8df 	bl	800268c <mg_error>
}
 80024ce:	e062      	b.n	8002596 <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <mg_sendnsreq+0x9c>
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	8a1b      	ldrh	r3, [r3, #16]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	e000      	b.n	80024ea <mg_sendnsreq+0x9e>
 80024e8:	2201      	movs	r2, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8002500:	f7fe fbd6 	bl	8000cb0 <mg_millis>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	17c8      	asrs	r0, r1, #31
 800250c:	460c      	mov	r4, r1
 800250e:	4605      	mov	r5, r0
 8002510:	eb12 0804 	adds.w	r8, r2, r4
 8002514:	eb43 0905 	adc.w	r9, r3, r5
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8002532:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <mg_sendnsreq+0x164>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b03      	cmp	r3, #3
 8002538:	dd18      	ble.n	800256c <mg_sendnsreq+0x120>
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <mg_sendnsreq+0x168>)
 800253c:	f240 52d6 	movw	r2, #1494	@ 0x5d6
 8002540:	491d      	ldr	r1, [pc, #116]	@ (80025b8 <mg_sendnsreq+0x16c>)
 8002542:	2004      	movs	r0, #4
 8002544:	f005 fb8c 	bl	8007c60 <mg_log_prefix>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461c      	mov	r4, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	8a12      	ldrh	r2, [r2, #16]
 800255e:	9201      	str	r2, [sp, #4]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4603      	mov	r3, r0
 8002564:	4622      	mov	r2, r4
 8002566:	4815      	ldr	r0, [pc, #84]	@ (80025bc <mg_sendnsreq+0x170>)
 8002568:	f005 fbca 	bl	8007d00 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6858      	ldr	r0, [r3, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	8a1a      	ldrh	r2, [r3, #16]
 8002574:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	f7ff fe87 	bl	800228c <mg_dns_send>
 800257e:	4603      	mov	r3, r0
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <mg_sendnsreq+0x174>)
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f87b 	bl	800268c <mg_error>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025a0:	0802745c 	.word	0x0802745c
 80025a4:	08001f91 	.word	0x08001f91
 80025a8:	08027488 	.word	0x08027488
 80025ac:	08027494 	.word	0x08027494
 80025b0:	24000240 	.word	0x24000240
 80025b4:	0802a6d8 	.word	0x0802a6d8
 80025b8:	08027148 	.word	0x08027148
 80025bc:	080274a0 	.word	0x080274a0
 80025c0:	080274c4 	.word	0x080274c4

080025c4 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f014 ffb6 	bl	8017546 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	f014 ffe6 	bl	80175ac <mg_url_port>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f015 f8bf 	bl	8017766 <mg_ntohs>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	331c      	adds	r3, #28
 80025f4:	461a      	mov	r2, r3
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025fe:	f006 ff04 	bl	800940a <mg_aton>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f00a f8ef 	bl	800c7ec <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 800260e:	e019      	b.n	8002644 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	7e1b      	ldrb	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <mg_resolve+0x5e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	330c      	adds	r3, #12
 8002620:	e002      	b.n	8002628 <mg_resolve+0x64>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	7e1b      	ldrb	r3, [r3, #24]
 8002636:	f107 010c 	add.w	r1, r7, #12
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff04 	bl	800244c <mg_sendnsreq>
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <mg_call+0x24>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <mg_call+0x38>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	4798      	blx	r3
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 800268c:	b40e      	push	{r1, r2, r3}
 800268e:	b580      	push	{r7, lr}
 8002690:	b095      	sub	sp, #84	@ 0x54
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8002696:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800269a:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	f107 0010 	add.w	r0, r7, #16
 80026a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80026a6:	2140      	movs	r1, #64	@ 0x40
 80026a8:	f00a fe68 	bl	800d37c <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <mg_error+0x74>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	dd0f      	ble.n	80026d4 <mg_error+0x48>
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <mg_error+0x78>)
 80026b6:	f240 620b 	movw	r2, #1547	@ 0x60b
 80026ba:	4913      	ldr	r1, [pc, #76]	@ (8002708 <mg_error+0x7c>)
 80026bc:	2001      	movs	r0, #1
 80026be:	f005 facf 	bl	8007c60 <mg_log_prefix>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	480f      	ldr	r0, [pc, #60]	@ (800270c <mg_error+0x80>)
 80026d0:	f005 fb16 	bl	8007d00 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	461a      	mov	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffae 	bl	800264c <mg_call>
}
 80026f0:	bf00      	nop
 80026f2:	3754      	adds	r7, #84	@ 0x54
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026fa:	b003      	add	sp, #12
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	24000240 	.word	0x24000240
 8002704:	0802a6e8 	.word	0x0802a6e8
 8002708:	08027148 	.word	0x08027148
 800270c:	080274d0 	.word	0x080274d0

08002710 <is_digit>:
#endif




static bool is_digit(int c) {
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b2f      	cmp	r3, #47	@ 0x2f
 800271c:	dd04      	ble.n	8002728 <is_digit+0x18>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b39      	cmp	r3, #57	@ 0x39
 8002722:	dc01      	bgt.n	8002728 <is_digit+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <is_digit+0x1a>
 8002728:	2300      	movs	r3, #0
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <addexp>:

static int addexp(char *buf, int e, int sign) {
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  int n = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	617a      	str	r2, [r7, #20]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	2265      	movs	r2, #101	@ 0x65
 800275a:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	617a      	str	r2, [r7, #20]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002774:	dd01      	ble.n	800277a <addexp+0x3e>
 8002776:	2300      	movs	r3, #0
 8002778:	e057      	b.n	800282a <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b09      	cmp	r3, #9
 800277e:	dc07      	bgt.n	8002790 <addexp+0x54>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	617a      	str	r2, [r7, #20]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	2230      	movs	r2, #48	@ 0x30
 800278e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b63      	cmp	r3, #99	@ 0x63
 8002794:	dd1c      	ble.n	80027d0 <addexp+0x94>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <addexp+0xfc>)
 800279a:	fb82 1203 	smull	r1, r2, r2, r3
 800279e:	1152      	asrs	r2, r2, #5
 80027a0:	17db      	asrs	r3, r3, #31
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	6179      	str	r1, [r7, #20]
 80027ac:	4619      	mov	r1, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	440b      	add	r3, r1
 80027b2:	3230      	adds	r2, #48	@ 0x30
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <addexp+0xfc>)
 80027bc:	fb82 1203 	smull	r1, r2, r2, r3
 80027c0:	1151      	asrs	r1, r2, #5
 80027c2:	17da      	asrs	r2, r3, #31
 80027c4:	1a8a      	subs	r2, r1, r2
 80027c6:	2164      	movs	r1, #100	@ 0x64
 80027c8:	fb01 f202 	mul.w	r2, r1, r2
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b09      	cmp	r3, #9
 80027d4:	dd1d      	ble.n	8002812 <addexp+0xd6>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4a18      	ldr	r2, [pc, #96]	@ (800283c <addexp+0x100>)
 80027da:	fb82 1203 	smull	r1, r2, r2, r3
 80027de:	1092      	asrs	r2, r2, #2
 80027e0:	17db      	asrs	r3, r3, #31
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	6179      	str	r1, [r7, #20]
 80027ec:	4619      	mov	r1, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	440b      	add	r3, r1
 80027f2:	3230      	adds	r2, #48	@ 0x30
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <addexp+0x100>)
 80027fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002800:	1099      	asrs	r1, r3, #2
 8002802:	17d3      	asrs	r3, r2, #31
 8002804:	1ac9      	subs	r1, r1, r3
 8002806:	460b      	mov	r3, r1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	6179      	str	r1, [r7, #20]
 800281c:	4619      	mov	r1, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	440b      	add	r3, r1
 8002822:	3230      	adds	r2, #48	@ 0x30
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
  return n;
 8002828:	697b      	ldr	r3, [r7, #20]
}
 800282a:	4618      	mov	r0, r3
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	51eb851f 	.word	0x51eb851f
 800283c:	66666667 	.word	0x66666667

08002840 <xisinf>:

static int xisinf(double x) {
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800284a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800284e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	000a      	movs	r2, r1
 8002860:	2300      	movs	r3, #0
 8002862:	4613      	mov	r3, r2
 8002864:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002868:	4a08      	ldr	r2, [pc, #32]	@ (800288c <xisinf+0x4c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d106      	bne.n	800287c <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 800286e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <xisinf+0x3c>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <xisinf+0x3e>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	7ff00000 	.word	0x7ff00000

08002890 <xisnan>:

static int xisnan(double x) {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800289a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800289e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80028a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	000a      	movs	r2, r1
 80028b0:	2300      	movs	r3, #0
 80028b2:	4613      	mov	r3, r2
 80028b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 80028b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028bc:	4613      	mov	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80028c8:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80028ca:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <xisnan+0x54>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf8c      	ite	hi
 80028d0:	2301      	movhi	r3, #1
 80028d2:	2300      	movls	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	7ff00000 	.word	0x7ff00000

080028e8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b09e      	sub	sp, #120	@ 0x78
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6178      	str	r0, [r7, #20]
 80028f0:	6139      	str	r1, [r7, #16]
 80028f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028fe:	2300      	movs	r3, #0
 8002900:	667b      	str	r3, [r7, #100]	@ 0x64
 8002902:	2300      	movs	r3, #0
 8002904:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8002906:	ed97 7b02 	vldr	d7, [r7, #8]
 800290a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	d107      	bne.n	8002924 <mg_dtoa+0x3c>
 8002914:	4bb1      	ldr	r3, [pc, #708]	@ (8002bdc <mg_dtoa+0x2f4>)
 8002916:	4ab2      	ldr	r2, [pc, #712]	@ (8002be0 <mg_dtoa+0x2f8>)
 8002918:	6939      	ldr	r1, [r7, #16]
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f00a fd56 	bl	800d3cc <mg_snprintf>
 8002920:	4603      	mov	r3, r0
 8002922:	e266      	b.n	8002df2 <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8002924:	ed97 0b02 	vldr	d0, [r7, #8]
 8002928:	f7ff ff8a 	bl	8002840 <xisinf>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <mg_dtoa+0x6c>
 8002932:	ed97 7b02 	vldr	d7, [r7, #8]
 8002936:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	dd01      	ble.n	8002944 <mg_dtoa+0x5c>
 8002940:	4ba8      	ldr	r3, [pc, #672]	@ (8002be4 <mg_dtoa+0x2fc>)
 8002942:	e000      	b.n	8002946 <mg_dtoa+0x5e>
 8002944:	4ba8      	ldr	r3, [pc, #672]	@ (8002be8 <mg_dtoa+0x300>)
 8002946:	4aa6      	ldr	r2, [pc, #664]	@ (8002be0 <mg_dtoa+0x2f8>)
 8002948:	6939      	ldr	r1, [r7, #16]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f00a fd3e 	bl	800d3cc <mg_snprintf>
 8002950:	4603      	mov	r3, r0
 8002952:	e24e      	b.n	8002df2 <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8002954:	ed97 0b02 	vldr	d0, [r7, #8]
 8002958:	f7ff ff9a 	bl	8002890 <xisnan>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <mg_dtoa+0x8a>
 8002962:	4ba2      	ldr	r3, [pc, #648]	@ (8002bec <mg_dtoa+0x304>)
 8002964:	4a9e      	ldr	r2, [pc, #632]	@ (8002be0 <mg_dtoa+0x2f8>)
 8002966:	6939      	ldr	r1, [r7, #16]
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f00a fd2f 	bl	800d3cc <mg_snprintf>
 800296e:	4603      	mov	r3, r0
 8002970:	e23f      	b.n	8002df2 <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8002972:	ed97 7b02 	vldr	d7, [r7, #8]
 8002976:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d50d      	bpl.n	800299c <mg_dtoa+0xb4>
 8002980:	ed97 7b02 	vldr	d7, [r7, #8]
 8002984:	eeb1 7b47 	vneg.f64	d7, d7
 8002988:	ed87 7b02 	vstr	d7, [r7, #8]
 800298c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002992:	3370      	adds	r3, #112	@ 0x70
 8002994:	443b      	add	r3, r7
 8002996:	222d      	movs	r2, #45	@ 0x2d
 8002998:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 800299c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	4b91      	ldr	r3, [pc, #580]	@ (8002bf0 <mg_dtoa+0x308>)
 80029aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80029ae:	e007      	b.n	80029c0 <mg_dtoa+0xd8>
 80029b0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80029b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80029b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029bc:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 80029c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80029c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80029c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	db0c      	blt.n	80029ec <mg_dtoa+0x104>
 80029d2:	ed97 5b02 	vldr	d5, [r7, #8]
 80029d6:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80029da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80029de:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80029e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	dae1      	bge.n	80029b0 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80029ec:	e007      	b.n	80029fe <mg_dtoa+0x116>
 80029ee:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80029f2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80029f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029fa:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 80029fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a02:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002a06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d80c      	bhi.n	8002a2a <mg_dtoa+0x142>
 8002a10:	ed97 5b02 	vldr	d5, [r7, #8]
 8002a14:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002a18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a1c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002a20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d9e1      	bls.n	80029ee <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a2e:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002a32:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002a36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a3a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002a3e:	e00a      	b.n	8002a56 <mg_dtoa+0x16e>
 8002a40:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002a44:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002a48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a4c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a52:	3301      	adds	r3, #1
 8002a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dbf0      	blt.n	8002a40 <mg_dtoa+0x158>
  d += t;
 8002a5e:	ed97 6b02 	vldr	d6, [r7, #8]
 8002a62:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002a66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a6a:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <mg_dtoa+0x308>)
 8002a74:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8002a78:	e00a      	b.n	8002a90 <mg_dtoa+0x1a8>
 8002a7a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002a7e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002a82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a86:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002a8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a90:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002a98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa0:	db0c      	blt.n	8002abc <mg_dtoa+0x1d4>
 8002aa2:	ed97 5b02 	vldr	d5, [r7, #8]
 8002aa6:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002aaa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002aae:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002ab2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	dade      	bge.n	8002a7a <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8002abc:	e00a      	b.n	8002ad4 <mg_dtoa+0x1ec>
 8002abe:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002ac2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002ac6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aca:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ad4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ad8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002adc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae4:	d50c      	bpl.n	8002b00 <mg_dtoa+0x218>
 8002ae6:	ed97 5b02 	vldr	d5, [r7, #8]
 8002aea:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002aee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002af2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002af6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	d4de      	bmi.n	8002abe <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8002b00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	db2d      	blt.n	8002b64 <mg_dtoa+0x27c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	dd2a      	ble.n	8002b64 <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002b0e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002b12:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002b16:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f107 0018 	add.w	r0, r7, #24
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	eeb0 0b45 	vmov.f64	d0, d5
 8002b26:	2128      	movs	r1, #40	@ 0x28
 8002b28:	f7ff fede 	bl	80028e8 <mg_dtoa>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8002b30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b34:	4413      	add	r3, r2
 8002b36:	f107 0218 	add.w	r2, r7, #24
 8002b3a:	4413      	add	r3, r2
 8002b3c:	222b      	movs	r2, #43	@ 0x2b
 8002b3e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fdfb 	bl	800273c <addexp>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b4a:	4413      	add	r3, r2
 8002b4c:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002b4e:	f107 0318 	add.w	r3, r7, #24
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <mg_dtoa+0x30c>)
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f00a fc36 	bl	800d3cc <mg_snprintf>
 8002b60:	4603      	mov	r3, r0
 8002b62:	e146      	b.n	8002df2 <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	425b      	negs	r3, r3
 8002b68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dc2e      	bgt.n	8002bcc <mg_dtoa+0x2e4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	dd2b      	ble.n	8002bcc <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002b74:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002b78:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002b7c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f107 0018 	add.w	r0, r7, #24
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	eeb0 0b45 	vmov.f64	d0, d5
 8002b8c:	2128      	movs	r1, #40	@ 0x28
 8002b8e:	f7ff feab 	bl	80028e8 <mg_dtoa>
 8002b92:	4603      	mov	r3, r0
 8002b94:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8002b96:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f107 0218 	add.w	r2, r7, #24
 8002ba0:	18d0      	adds	r0, r2, r3
 8002ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	222d      	movs	r2, #45	@ 0x2d
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7ff fdc7 	bl	800273c <addexp>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb2:	4413      	add	r3, r2
 8002bb4:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002bb6:	f107 0318 	add.w	r3, r7, #24
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf4 <mg_dtoa+0x30c>)
 8002bc0:	6939      	ldr	r1, [r7, #16]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f00a fc02 	bl	800d3cc <mg_snprintf>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	e112      	b.n	8002df2 <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002bcc:	2300      	movs	r3, #0
 8002bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bd4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002bd8:	e046      	b.n	8002c68 <mg_dtoa+0x380>
 8002bda:	bf00      	nop
 8002bdc:	080274dc 	.word	0x080274dc
 8002be0:	080274e0 	.word	0x080274e0
 8002be4:	080274e4 	.word	0x080274e4
 8002be8:	080274e8 	.word	0x080274e8
 8002bec:	080274f0 	.word	0x080274f0
 8002bf0:	3ff00000 	.word	0x3ff00000
 8002bf4:	080274f4 	.word	0x080274f4
      int ch = (int) (d / t);
 8002bf8:	ed97 5b02 	vldr	d5, [r7, #8]
 8002bfc:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002c00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002c08:	ee17 3a90 	vmov	r3, s15
 8002c0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8002c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dc02      	bgt.n	8002c1a <mg_dtoa+0x332>
 8002c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dd0c      	ble.n	8002c34 <mg_dtoa+0x34c>
 8002c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c20:	1c59      	adds	r1, r3, #1
 8002c22:	6679      	str	r1, [r7, #100]	@ 0x64
 8002c24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c26:	440b      	add	r3, r1
 8002c28:	3230      	adds	r2, #48	@ 0x30
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	3370      	adds	r3, #112	@ 0x70
 8002c2e:	443b      	add	r3, r7
 8002c30:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002c3e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002c42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c46:	ed97 6b02 	vldr	d6, [r7, #8]
 8002c4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c4e:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002c52:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002c56:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002c5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c5e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c64:	3301      	adds	r3, #1
 8002c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c68:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002c6c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002c70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	db04      	blt.n	8002c84 <mg_dtoa+0x39c>
 8002c7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c7e:	4413      	add	r3, r2
 8002c80:	2b27      	cmp	r3, #39	@ 0x27
 8002c82:	ddb9      	ble.n	8002bf8 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <mg_dtoa+0x3d4>
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002c90:	3370      	adds	r3, #112	@ 0x70
 8002c92:	443b      	add	r3, r7
 8002c94:	2230      	movs	r2, #48	@ 0x30
 8002c96:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8002c9a:	e00f      	b.n	8002cbc <mg_dtoa+0x3d4>
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ca2:	3370      	adds	r3, #112	@ 0x70
 8002ca4:	443b      	add	r3, r7
 8002ca6:	2230      	movs	r2, #48	@ 0x30
 8002ca8:	f803 2c58 	strb.w	r2, [r3, #-88]
 8002cac:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002cb0:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002cb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cb8:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002cbc:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002cc0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002cc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	db04      	blt.n	8002cd8 <mg_dtoa+0x3f0>
 8002cce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2b27      	cmp	r3, #39	@ 0x27
 8002cd6:	dde1      	ble.n	8002c9c <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8002cd8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cdc:	4413      	add	r3, r2
 8002cde:	2b27      	cmp	r3, #39	@ 0x27
 8002ce0:	dc09      	bgt.n	8002cf6 <mg_dtoa+0x40e>
 8002ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002ce8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002cea:	4413      	add	r3, r2
 8002cec:	3370      	adds	r3, #112	@ 0x70
 8002cee:	443b      	add	r3, r7
 8002cf0:	222e      	movs	r2, #46	@ 0x2e
 8002cf2:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cfa:	a342      	add	r3, pc, #264	@ (adr r3, 8002e04 <mg_dtoa+0x51c>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002d04:	e031      	b.n	8002d6a <mg_dtoa+0x482>
      int ch = (int) (d / t);
 8002d06:	ed97 5b02 	vldr	d5, [r7, #8]
 8002d0a:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002d0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d16:	ee17 3a90 	vmov	r3, s15
 8002d1a:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d22:	1c59      	adds	r1, r3, #1
 8002d24:	6679      	str	r1, [r7, #100]	@ 0x64
 8002d26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d28:	440b      	add	r3, r1
 8002d2a:	3230      	adds	r2, #48	@ 0x30
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	3370      	adds	r3, #112	@ 0x70
 8002d30:	443b      	add	r3, r7
 8002d32:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d40:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002d44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d48:	ed97 6b02 	vldr	d6, [r7, #8]
 8002d4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d50:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002d54:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002d58:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002d5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d60:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d66:	3301      	adds	r3, #1
 8002d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6e:	4413      	add	r3, r2
 8002d70:	2b27      	cmp	r3, #39	@ 0x27
 8002d72:	dc07      	bgt.n	8002d84 <mg_dtoa+0x49c>
 8002d74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	dbc4      	blt.n	8002d06 <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8002d7c:	e002      	b.n	8002d84 <mg_dtoa+0x49c>
 8002d7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d80:	3b01      	subs	r3, #1
 8002d82:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <mg_dtoa+0x4bc>
 8002d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	dd09      	ble.n	8002da4 <mg_dtoa+0x4bc>
 8002d90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d94:	4413      	add	r3, r2
 8002d96:	3b01      	subs	r3, #1
 8002d98:	3370      	adds	r3, #112	@ 0x70
 8002d9a:	443b      	add	r3, r7
 8002d9c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002da0:	2b30      	cmp	r3, #48	@ 0x30
 8002da2:	d0ec      	beq.n	8002d7e <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8002da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	dd0c      	ble.n	8002dc4 <mg_dtoa+0x4dc>
 8002daa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dae:	4413      	add	r3, r2
 8002db0:	3b01      	subs	r3, #1
 8002db2:	3370      	adds	r3, #112	@ 0x70
 8002db4:	443b      	add	r3, r7
 8002db6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dbc:	d102      	bne.n	8002dc4 <mg_dtoa+0x4dc>
 8002dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8002dc4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002dc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dc8:	4413      	add	r3, r2
 8002dca:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8002dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dce:	2b27      	cmp	r3, #39	@ 0x27
 8002dd0:	dd01      	ble.n	8002dd6 <mg_dtoa+0x4ee>
 8002dd2:	2327      	movs	r3, #39	@ 0x27
 8002dd4:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 8002dd6:	f107 0218 	add.w	r2, r7, #24
 8002dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ddc:	4413      	add	r3, r2
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002de2:	f107 0318 	add.w	r3, r7, #24
 8002de6:	4a06      	ldr	r2, [pc, #24]	@ (8002e00 <mg_dtoa+0x518>)
 8002de8:	6939      	ldr	r1, [r7, #16]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f00a faee 	bl	800d3cc <mg_snprintf>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3770      	adds	r7, #112	@ 0x70
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	f3af 8000 	nop.w
 8002e00:	080274e0 	.word	0x080274e0
 8002e04:	9999999a 	.word	0x9999999a
 8002e08:	3fb99999 	.word	0x3fb99999

08002e0c <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b08c      	sub	sp, #48	@ 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <mg_lld+0x15c>)
 8002e1a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e20:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002e28:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <mg_lld+0x4a>
 8002e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	da0e      	bge.n	8002e56 <mg_lld+0x4a>
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	222d      	movs	r2, #45	@ 0x2d
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4254      	negs	r4, r2
 8002e4e:	eb61 0503 	sbc.w	r5, r1, r3
 8002e52:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002e56:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d021      	beq.n	8002ea2 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	e019      	b.n	8002e98 <mg_lld+0x8c>
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	441a      	add	r2, r3
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	1c59      	adds	r1, r3, #1
 8002e72:	6239      	str	r1, [r7, #32]
 8002e74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e76:	440b      	add	r3, r1
 8002e78:	68f9      	ldr	r1, [r7, #12]
 8002e7a:	440b      	add	r3, r1
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	0902      	lsrs	r2, r0, #4
 8002e8e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002e92:	090b      	lsrs	r3, r1, #4
 8002e94:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	d1e1      	bne.n	8002e64 <mg_lld+0x58>
 8002ea0:	e025      	b.n	8002eee <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	e01e      	b.n	8002ee6 <mg_lld+0xda>
 8002ea8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eac:	f04f 020a 	mov.w	r2, #10
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	f7fd fc88 	bl	80007c8 <__aeabi_uldivmod>
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	441a      	add	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	1c59      	adds	r1, r3, #1
 8002ec0:	6239      	str	r1, [r7, #32]
 8002ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec4:	440b      	add	r3, r1
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	440b      	add	r3, r1
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ed2:	f04f 020a 	mov.w	r2, #10
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f7fd fc75 	bl	80007c8 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eea:	4313      	orrs	r3, r2
 8002eec:	d1dc      	bne.n	8002ea8 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e022      	b.n	8002f3a <mg_lld+0x12e>
    char t = buf[s + i];
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	441a      	add	r2, r3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	441a      	add	r2, r3
 8002f12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	440b      	add	r3, r1
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	441a      	add	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	7dfa      	ldrb	r2, [r7, #23]
 8002f32:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3d7      	bcc.n	8002ef4 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	d106      	bne.n	8002f5a <mg_lld+0x14e>
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	623a      	str	r2, [r7, #32]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	2230      	movs	r2, #48	@ 0x30
 8002f58:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	4413      	add	r3, r2
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3730      	adds	r7, #48	@ 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	080274fc 	.word	0x080274fc

08002f6c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002f7e:	e009      	b.n	8002f94 <scpy+0x28>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	617a      	str	r2, [r7, #20]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4610      	mov	r0, r2
 8002f92:	4798      	blx	r3
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d205      	bcs.n	8002fa8 <scpy+0x3c>
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1eb      	bne.n	8002f80 <scpy+0x14>
  return i;
 8002fa8:	697b      	ldr	r3, [r7, #20]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8002fb2:	b40c      	push	{r2, r3}
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8002fc8:	f107 0308 	add.w	r3, r7, #8
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f809 	bl	8002fe8 <mg_vxprintf>
 8002fd6:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	4770      	bx	lr

08002fe8 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fec:	b0a6      	sub	sp, #152	@ 0x98
 8002fee:	af02      	add	r7, sp, #8
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8003004:	e383      	b.n	800370e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300c:	4413      	add	r3, r2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b25      	cmp	r3, #37	@ 0x25
 8003012:	f040 8369 	bne.w	80036e8 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8003016:	2300      	movs	r3, #0
 8003018:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800301a:	2300      	movs	r3, #0
 800301c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800301e:	2300      	movs	r3, #0
 8003020:	677b      	str	r3, [r7, #116]	@ 0x74
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8003028:	2320      	movs	r3, #32
 800302a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800302e:	2300      	movs	r3, #0
 8003030:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003038:	3301      	adds	r3, #1
 800303a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800304c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003050:	2b23      	cmp	r3, #35	@ 0x23
 8003052:	d10e      	bne.n	8003072 <mg_vxprintf+0x8a>
 8003054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003056:	3301      	adds	r3, #1
 8003058:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800305a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800305e:	3301      	adds	r3, #1
 8003060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8003072:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003076:	2b2d      	cmp	r3, #45	@ 0x2d
 8003078:	d110      	bne.n	800309c <mg_vxprintf+0xb4>
 800307a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800307e:	3301      	adds	r3, #1
 8003080:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003088:	3301      	adds	r3, #1
 800308a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003094:	4413      	add	r3, r2
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 800309c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030a0:	2b30      	cmp	r3, #48	@ 0x30
 80030a2:	d127      	bne.n	80030f4 <mg_vxprintf+0x10c>
 80030a4:	2330      	movs	r3, #48	@ 0x30
 80030a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80030aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ae:	3301      	adds	r3, #1
 80030b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ba:	4413      	add	r3, r2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80030c2:	e017      	b.n	80030f4 <mg_vxprintf+0x10c>
 80030c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80030d0:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80030d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d6:	4413      	add	r3, r2
 80030d8:	3b30      	subs	r3, #48	@ 0x30
 80030da:	677b      	str	r3, [r7, #116]	@ 0x74
 80030dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030e0:	3301      	adds	r3, #1
 80030e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ec:	4413      	add	r3, r2
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80030f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fb09 	bl	8002710 <is_digit>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1df      	bne.n	80030c4 <mg_vxprintf+0xdc>
      if (c == '.') {
 8003104:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003108:	2b2e      	cmp	r3, #46	@ 0x2e
 800310a:	d153      	bne.n	80031b4 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 800310c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003110:	3301      	adds	r3, #1
 8003112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8003124:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003128:	2b2a      	cmp	r3, #42	@ 0x2a
 800312a:	d113      	bne.n	8003154 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1d19      	adds	r1, r3, #4
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6011      	str	r1, [r2, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 800313a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800313e:	3301      	adds	r3, #1
 8003140:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003152:	e02f      	b.n	80031b4 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8003158:	e017      	b.n	800318a <mg_vxprintf+0x1a2>
 800315a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	673b      	str	r3, [r7, #112]	@ 0x70
 8003166:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800316a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800316c:	4413      	add	r3, r2
 800316e:	3b30      	subs	r3, #48	@ 0x30
 8003170:	673b      	str	r3, [r7, #112]	@ 0x70
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003176:	3301      	adds	r3, #1
 8003178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800318a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fabe 	bl	8002710 <is_digit>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1df      	bne.n	800315a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 800319a:	e00b      	b.n	80031b4 <mg_vxprintf+0x1cc>
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a0:	3301      	adds	r3, #1
 80031a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ac:	4413      	add	r3, r2
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80031b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031b8:	2b68      	cmp	r3, #104	@ 0x68
 80031ba:	d0ef      	beq.n	800319c <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80031bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031c0:	2b6c      	cmp	r3, #108	@ 0x6c
 80031c2:	d121      	bne.n	8003208 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80031c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c6:	3301      	adds	r3, #1
 80031c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ce:	3301      	adds	r3, #1
 80031d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80031e2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031e6:	2b6c      	cmp	r3, #108	@ 0x6c
 80031e8:	d10e      	bne.n	8003208 <mg_vxprintf+0x220>
 80031ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ec:	3301      	adds	r3, #1
 80031ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f4:	3301      	adds	r3, #1
 80031f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8003208:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800320c:	2b70      	cmp	r3, #112	@ 0x70
 800320e:	d103      	bne.n	8003218 <mg_vxprintf+0x230>
 8003210:	2301      	movs	r3, #1
 8003212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003214:	2301      	movs	r3, #1
 8003216:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8003218:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800321c:	2b64      	cmp	r3, #100	@ 0x64
 800321e:	d018      	beq.n	8003252 <mg_vxprintf+0x26a>
 8003220:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003224:	2b75      	cmp	r3, #117	@ 0x75
 8003226:	d014      	beq.n	8003252 <mg_vxprintf+0x26a>
 8003228:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800322c:	2b78      	cmp	r3, #120	@ 0x78
 800322e:	d010      	beq.n	8003252 <mg_vxprintf+0x26a>
 8003230:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003234:	2b58      	cmp	r3, #88	@ 0x58
 8003236:	d00c      	beq.n	8003252 <mg_vxprintf+0x26a>
 8003238:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800323c:	2b70      	cmp	r3, #112	@ 0x70
 800323e:	d008      	beq.n	8003252 <mg_vxprintf+0x26a>
 8003240:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003244:	2b67      	cmp	r3, #103	@ 0x67
 8003246:	d004      	beq.n	8003252 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8003248:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800324c:	2b66      	cmp	r3, #102	@ 0x66
 800324e:	f040 816c 	bne.w	800352a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8003252:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8003262:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003266:	2b78      	cmp	r3, #120	@ 0x78
 8003268:	d007      	beq.n	800327a <mg_vxprintf+0x292>
 800326a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800326e:	2b58      	cmp	r3, #88	@ 0x58
 8003270:	d003      	beq.n	800327a <mg_vxprintf+0x292>
 8003272:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003276:	2b70      	cmp	r3, #112	@ 0x70
 8003278:	d101      	bne.n	800327e <mg_vxprintf+0x296>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <mg_vxprintf+0x298>
 800327e:	2300      	movs	r3, #0
 8003280:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8003284:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8003290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <mg_vxprintf+0x2b2>
 8003296:	2302      	movs	r3, #2
 8003298:	e000      	b.n	800329c <mg_vxprintf+0x2b4>
 800329a:	2300      	movs	r3, #0
 800329c:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 800329e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032a2:	2b67      	cmp	r3, #103	@ 0x67
 80032a4:	d003      	beq.n	80032ae <mg_vxprintf+0x2c6>
 80032a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032aa:	2b66      	cmp	r3, #102	@ 0x66
 80032ac:	d124      	bne.n	80032f8 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3307      	adds	r3, #7
 80032b4:	f023 0307 	bic.w	r3, r3, #7
 80032b8:	f103 0108 	add.w	r1, r3, #8
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	6011      	str	r1, [r2, #0]
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80032c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d101      	bne.n	80032d4 <mg_vxprintf+0x2ec>
 80032d0:	2306      	movs	r3, #6
 80032d2:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80032d4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80032d6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032da:	2b67      	cmp	r3, #103	@ 0x67
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f107 0014 	add.w	r0, r7, #20
 80032e8:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80032ec:	2128      	movs	r1, #40	@ 0x28
 80032ee:	f7ff fafb 	bl	80028e8 <mg_dtoa>
 80032f2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80032f6:	e069      	b.n	80033cc <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80032f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d11c      	bne.n	8003338 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3307      	adds	r3, #7
 8003304:	f023 0307 	bic.w	r3, r3, #7
 8003308:	f103 0108 	add.w	r1, r3, #8
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	6011      	str	r1, [r2, #0]
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8003318:	f107 0114 	add.w	r1, r7, #20
 800331c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800332c:	4608      	mov	r0, r1
 800332e:	f7ff fd6d 	bl	8002e0c <mg_lld>
 8003332:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8003336:	e049      	b.n	80033cc <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8003338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800333a:	2b01      	cmp	r3, #1
 800333c:	d123      	bne.n	8003386 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1d19      	adds	r1, r3, #4
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	6011      	str	r1, [r2, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 800334c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <mg_vxprintf+0x376>
 8003354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003356:	17da      	asrs	r2, r3, #31
 8003358:	461c      	mov	r4, r3
 800335a:	4615      	mov	r5, r2
 800335c:	e003      	b.n	8003366 <mg_vxprintf+0x37e>
 800335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003360:	2200      	movs	r2, #0
 8003362:	461c      	mov	r4, r3
 8003364:	4615      	mov	r5, r2
 8003366:	f107 0114 	add.w	r1, r7, #20
 800336a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	4608      	mov	r0, r1
 800337c:	f7ff fd46 	bl	8002e0c <mg_lld>
 8003380:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8003384:	e022      	b.n	80033cc <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1d19      	adds	r1, r3, #4
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	6011      	str	r1, [r2, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8003394:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <mg_vxprintf+0x3be>
 800339c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339e:	17da      	asrs	r2, r3, #31
 80033a0:	4698      	mov	r8, r3
 80033a2:	4691      	mov	r9, r2
 80033a4:	e003      	b.n	80033ae <mg_vxprintf+0x3c6>
 80033a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a8:	2200      	movs	r2, #0
 80033aa:	4698      	mov	r8, r3
 80033ac:	4691      	mov	r9, r2
 80033ae:	f107 0114 	add.w	r1, r7, #20
 80033b2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4642      	mov	r2, r8
 80033c0:	464b      	mov	r3, r9
 80033c2:	4608      	mov	r0, r1
 80033c4:	f7ff fd22 	bl	8002e0c <mg_lld>
 80033c8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033d2:	e007      	b.n	80033e4 <mg_vxprintf+0x3fc>
 80033d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033d6:	3b01      	subs	r3, #1
 80033d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80033da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033de:	3301      	adds	r3, #1
 80033e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80033e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d202      	bcs.n	80033f4 <mg_vxprintf+0x40c>
 80033ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ef      	bne.n	80033d4 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033fa:	e011      	b.n	8003420 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80033fc:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8003400:	2301      	movs	r3, #1
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fdb1 	bl	8002f6c <scpy>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003410:	4413      	add	r3, r2
 8003412:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8003416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800341a:	3301      	adds	r3, #1
 800341c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003420:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003424:	2b20      	cmp	r3, #32
 8003426:	d110      	bne.n	800344a <mg_vxprintf+0x462>
 8003428:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <mg_vxprintf+0x462>
 8003430:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003436:	429a      	cmp	r2, r3
 8003438:	d207      	bcs.n	800344a <mg_vxprintf+0x462>
 800343a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800343e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003442:	4413      	add	r3, r2
 8003444:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003446:	429a      	cmp	r2, r3
 8003448:	d8d8      	bhi.n	80033fc <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800344a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800344c:	4ab7      	ldr	r2, [pc, #732]	@ (800372c <mg_vxprintf+0x744>)
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fd8b 	bl	8002f6c <scpy>
 8003456:	4602      	mov	r2, r0
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800345c:	4413      	add	r3, r2
 800345e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003468:	e011      	b.n	800348e <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 800346a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800346e:	2301      	movs	r3, #1
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fd7a 	bl	8002f6c <scpy>
 8003478:	4602      	mov	r2, r0
 800347a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800347e:	4413      	add	r3, r2
 8003480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003488:	3301      	adds	r3, #1
 800348a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800348e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003492:	2b30      	cmp	r3, #48	@ 0x30
 8003494:	d10c      	bne.n	80034b0 <mg_vxprintf+0x4c8>
 8003496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800349a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <mg_vxprintf+0x4c8>
 80034a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80034a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034a8:	4413      	add	r3, r2
 80034aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d8dc      	bhi.n	800346a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 80034b0:	f107 0214 	add.w	r2, r7, #20
 80034b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fd56 	bl	8002f6c <scpy>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034c6:	4413      	add	r3, r2
 80034c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034d2:	e011      	b.n	80034f8 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80034d4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80034d8:	2301      	movs	r3, #1
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fd45 	bl	8002f6c <scpy>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034e8:	4413      	add	r3, r2
 80034ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80034ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034f2:	3301      	adds	r3, #1
 80034f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f040 80ea 	bne.w	80036d6 <mg_vxprintf+0x6ee>
 8003502:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80e5 	beq.w	80036d6 <mg_vxprintf+0x6ee>
 800350c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003512:	429a      	cmp	r2, r3
 8003514:	f080 80df 	bcs.w	80036d6 <mg_vxprintf+0x6ee>
 8003518:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800351c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003520:	4413      	add	r3, r2
 8003522:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003524:	429a      	cmp	r2, r3
 8003526:	d8d5      	bhi.n	80034d4 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8003528:	e0d5      	b.n	80036d6 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 800352a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800352e:	2b6d      	cmp	r3, #109	@ 0x6d
 8003530:	d003      	beq.n	800353a <mg_vxprintf+0x552>
 8003532:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003536:	2b4d      	cmp	r3, #77	@ 0x4d
 8003538:	d128      	bne.n	800358c <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1d19      	adds	r1, r3, #4
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	6011      	str	r1, [r2, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8003548:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800354c:	2b6d      	cmp	r3, #109	@ 0x6d
 800354e:	d103      	bne.n	8003558 <mg_vxprintf+0x570>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	2022      	movs	r0, #34	@ 0x22
 8003556:	4798      	blx	r3
        n += f(out, param, ap);
 8003558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	4798      	blx	r3
 8003562:	4602      	mov	r2, r0
 8003564:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003568:	4413      	add	r3, r2
 800356a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 800356e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003572:	2b6d      	cmp	r3, #109	@ 0x6d
 8003574:	f040 80b1 	bne.w	80036da <mg_vxprintf+0x6f2>
 8003578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800357c:	3302      	adds	r3, #2
 800357e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	2022      	movs	r0, #34	@ 0x22
 8003588:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800358a:	e0a6      	b.n	80036da <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 800358c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003590:	2b63      	cmp	r3, #99	@ 0x63
 8003592:	d112      	bne.n	80035ba <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1d19      	adds	r1, r3, #4
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 80035a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	4610      	mov	r0, r2
 80035ac:	4798      	blx	r3
        n++;
 80035ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035b2:	3301      	adds	r3, #1
 80035b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035b8:	e090      	b.n	80036dc <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80035ba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035be:	2b73      	cmp	r3, #115	@ 0x73
 80035c0:	d16b      	bne.n	800369a <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1d19      	adds	r1, r3, #4
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	6011      	str	r1, [r2, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80035d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d109      	bne.n	80035ec <mg_vxprintf+0x604>
 80035d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <mg_vxprintf+0x600>
 80035de:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80035e0:	f7fc fede 	bl	80003a0 <strlen>
 80035e4:	4603      	mov	r3, r0
 80035e6:	e000      	b.n	80035ea <mg_vxprintf+0x602>
 80035e8:	2300      	movs	r3, #0
 80035ea:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035f2:	e011      	b.n	8003618 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80035f4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80035f8:	2301      	movs	r3, #1
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fcb5 	bl	8002f6c <scpy>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003608:	4413      	add	r3, r2
 800360a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800360e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003612:	3301      	adds	r3, #1
 8003614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003618:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <mg_vxprintf+0x64e>
 8003620:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003624:	429a      	cmp	r2, r3
 8003626:	d206      	bcs.n	8003636 <mg_vxprintf+0x64e>
 8003628:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800362c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800362e:	4413      	add	r3, r2
 8003630:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003632:	429a      	cmp	r2, r3
 8003634:	d8de      	bhi.n	80035f4 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8003636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003638:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff fc95 	bl	8002f6c <scpy>
 8003642:	4602      	mov	r2, r0
 8003644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003648:	4413      	add	r3, r2
 800364a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003654:	e011      	b.n	800367a <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8003656:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800365a:	2301      	movs	r3, #1
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fc84 	bl	8002f6c <scpy>
 8003664:	4602      	mov	r2, r0
 8003666:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800366a:	4413      	add	r3, r2
 800366c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003674:	3301      	adds	r3, #1
 8003676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800367a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02c      	beq.n	80036dc <mg_vxprintf+0x6f4>
 8003682:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003686:	429a      	cmp	r2, r3
 8003688:	d228      	bcs.n	80036dc <mg_vxprintf+0x6f4>
 800368a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800368e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003690:	4413      	add	r3, r2
 8003692:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003694:	429a      	cmp	r2, r3
 8003696:	d8de      	bhi.n	8003656 <mg_vxprintf+0x66e>
 8003698:	e020      	b.n	80036dc <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800369a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800369e:	2b25      	cmp	r3, #37	@ 0x25
 80036a0:	d109      	bne.n	80036b6 <mg_vxprintf+0x6ce>
        out('%', param);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	2025      	movs	r0, #37	@ 0x25
 80036a8:	4798      	blx	r3
        n++;
 80036aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ae:	3301      	adds	r3, #1
 80036b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036b4:	e012      	b.n	80036dc <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	2025      	movs	r0, #37	@ 0x25
 80036bc:	4798      	blx	r3
        out(c, param);
 80036be:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4610      	mov	r0, r2
 80036c8:	4798      	blx	r3
        n += 2;
 80036ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ce:	3302      	adds	r3, #2
 80036d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036d4:	e002      	b.n	80036dc <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80036da:	bf00      	nop
      }
      i++;
 80036dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e0:	3301      	adds	r3, #1
 80036e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036e6:	e012      	b.n	800370e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	4413      	add	r3, r2
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4610      	mov	r0, r2
 80036f8:	4798      	blx	r3
 80036fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fe:	3301      	adds	r3, #1
 8003700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003708:	3301      	adds	r3, #1
 800370a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f ac74 	bne.w	8003006 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800371e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8003722:	4618      	mov	r0, r3
 8003724:	3790      	adds	r7, #144	@ 0x90
 8003726:	46bd      	mov	sp, r7
 8003728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800372c:	08027510 	.word	0x08027510

08003730 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800373c:	2108      	movs	r1, #8
 800373e:	2001      	movs	r0, #1
 8003740:	f01e fd24 	bl	802218c <calloc>
 8003744:	4603      	mov	r3, r0
 8003746:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68b8      	ldr	r0, [r7, #8]
 8003756:	4798      	blx	r3
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <mg_fs_open+0x46>
      free(fd);
 800376c:	6978      	ldr	r0, [r7, #20]
 800376e:	f01e fd31 	bl	80221d4 <free>
      fd = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8003776:	697b      	ldr	r3, [r7, #20]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	4610      	mov	r0, r2
 800379a:	4798      	blx	r3
    free(fd);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f01e fd19 	bl	80221d4 <free>
  }
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc fdf2 	bl	80003a0 <strlen>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d219      	bcs.n	80037f8 <is_dir_prefix+0x4e>
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f01f ff70 	bl	80236ae <strncmp>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <is_dir_prefix+0x4e>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00c      	beq.n	80037f4 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80037e4:	d006      	beq.n	80037f4 <is_dir_prefix+0x4a>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80037f2:	d101      	bne.n	80037f8 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <is_dir_prefix+0x50>
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8003802:	b580      	push	{r7, lr}
 8003804:	b088      	sub	sp, #32
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7fc fdc6 	bl	80003a0 <strlen>
 8003814:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f014 fdf8 	bl	8018410 <mg_unpack>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <packed_stat+0x28>
 8003826:	2301      	movs	r3, #1
 8003828:	e017      	b.n	800385a <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e00c      	b.n	800384a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	69b9      	ldr	r1, [r7, #24]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff ffb8 	bl	80037aa <is_dir_prefix>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <packed_stat+0x42>
 8003840:	2304      	movs	r3, #4
 8003842:	e00a      	b.n	800385a <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3301      	adds	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69f8      	ldr	r0, [r7, #28]
 800384c:	f014 fdcc 	bl	80183e8 <mg_unlist>
 8003850:	6178      	str	r0, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1eb      	bne.n	8003830 <packed_stat+0x2e>
  }
  return 0;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b0be      	sub	sp, #248	@ 0xf8
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7fc fd95 	bl	80003a0 <strlen>
 8003876:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 800387a:	2300      	movs	r3, #0
 800387c:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003884:	e05a      	b.n	800393c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800388a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff ff8b 	bl	80037aa <is_dir_prefix>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d048      	beq.n	800392c <packed_list+0xc8>
    begin = &path[n + 1];
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389e:	3301      	adds	r3, #1
 80038a0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038a4:	4413      	add	r3, r2
 80038a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 80038aa:	212f      	movs	r1, #47	@ 0x2f
 80038ac:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80038b0:	f01f fef0 	bl	8023694 <strchr>
 80038b4:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 80038b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <packed_list+0x70>
 80038c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80038c4:	f7fc fd6c 	bl	80003a0 <strlen>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ce:	4413      	add	r3, r2
 80038d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 80038d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80038d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038dc:	1ad2      	subs	r2, r2, r3
 80038de:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80038e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <packed_list+0xf8>)
 80038ec:	2164      	movs	r1, #100	@ 0x64
 80038ee:	f009 fd6d 	bl	800d3cc <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 80038f8:	f107 0214 	add.w	r2, r7, #20
 80038fc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fcec 	bl	80002e0 <strcmp>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800390e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4610      	mov	r0, r2
 8003918:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800391a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800391e:	f107 0314 	add.w	r3, r7, #20
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f01f ff9a 	bl	802385e <strcpy>
 800392a:	e002      	b.n	8003932 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003930:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003932:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003936:	3301      	adds	r3, #1
 8003938:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800393c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8003940:	f014 fd52 	bl	80183e8 <mg_unlist>
 8003944:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d19a      	bne.n	8003886 <packed_list+0x22>
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	37f0      	adds	r7, #240	@ 0xf0
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	080274f4 	.word	0x080274f4

08003960 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	2200      	movs	r2, #0
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f014 fd4a 	bl	8018410 <mg_unpack>
 800397c:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <packed_open+0x2c>
 8003988:	2300      	movs	r3, #0
 800398a:	e016      	b.n	80039ba <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <packed_open+0x3a>
 8003996:	2300      	movs	r3, #0
 8003998:	e00f      	b.n	80039ba <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 800399a:	210c      	movs	r1, #12
 800399c:	2001      	movs	r0, #1
 800399e:	f01e fbf5 	bl	802218c <calloc>
 80039a2:	4603      	mov	r3, r0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <packed_open+0x58>
    fp->size = size;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	605a      	str	r2, [r3, #4]
    fp->data = data;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 80039b8:	693b      	ldr	r3, [r7, #16]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <packed_close>:

static void packed_close(void *fp) {
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <packed_close+0x14>
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f01e fbff 	bl	80221d4 <free>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	441a      	add	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d905      	bls.n	8003a0a <packed_read+0x2c>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4413      	add	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4619      	mov	r1, r3
 8003a18:	68b8      	ldr	r0, [r7, #8]
 8003a1a:	f01f ff28 	bl	802386e <memcpy>
  fp->pos += len;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	441a      	add	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	609a      	str	r2, [r3, #8]
  return len;
 8003a2a:	687b      	ldr	r3, [r7, #4]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d903      	bls.n	8003a76 <packed_seek+0x28>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <packed_remove>:

static bool packed_remove(const char *path) {
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <p_open>:
static void *p_open(const char *path, int flags) {
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <p_close>:
static void p_close(void *fp) {
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <p_remove>:
static bool p_remove(const char *path) {
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8003bba:	b480      	push	{r7}
 8003bbc:	b089      	sub	sp, #36	@ 0x24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02d      	beq.n	8003c2c <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	60fa      	str	r2, [r7, #12]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	60ba      	str	r2, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	dd05      	ble.n	8003bf6 <mg_ncasecmp+0x3c>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b5a      	cmp	r3, #90	@ 0x5a
 8003bee:	dc02      	bgt.n	8003bf6 <mg_ncasecmp+0x3c>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b40      	cmp	r3, #64	@ 0x40
 8003bfa:	dd05      	ble.n	8003c08 <mg_ncasecmp+0x4e>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b5a      	cmp	r3, #90	@ 0x5a
 8003c00:	dc02      	bgt.n	8003c08 <mg_ncasecmp+0x4e>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3320      	adds	r3, #32
 8003c06:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <mg_ncasecmp+0x72>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <mg_ncasecmp+0x72>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1d1      	bne.n	8003bd0 <mg_ncasecmp+0x16>
  return diff;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	@ 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b08b      	sub	sp, #44	@ 0x2c
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c4a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4a42      	ldr	r2, [pc, #264]	@ (8003d64 <mg_to_size_t+0x128>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	2300      	movs	r3, #0
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8003c6a:	e002      	b.n	8003c72 <mg_to_size_t+0x36>
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	3301      	adds	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d20b      	bcs.n	8003c92 <mg_to_size_t+0x56>
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d0f2      	beq.n	8003c6c <mg_to_size_t+0x30>
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	4413      	add	r3, r2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b09      	cmp	r3, #9
 8003c90:	d0ec      	beq.n	8003c6c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d22b      	bcs.n	8003cf2 <mg_to_size_t+0xb6>
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ca4:	d125      	bne.n	8003cf2 <mg_to_size_t+0xb6>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e056      	b.n	8003d58 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	3b30      	subs	r3, #48	@ 0x30
 8003cb4:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d901      	bls.n	8003cc2 <mg_to_size_t+0x86>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e04a      	b.n	8003d58 <mg_to_size_t+0x11c>
    result *= 10;
 8003cc2:	6a3a      	ldr	r2, [r7, #32]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d901      	bls.n	8003cde <mg_to_size_t+0xa2>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e03c      	b.n	8003d58 <mg_to_size_t+0x11c>
    result += digit;
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d20f      	bcs.n	8003d1a <mg_to_size_t+0xde>
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b2f      	cmp	r3, #47	@ 0x2f
 8003d04:	d909      	bls.n	8003d1a <mg_to_size_t+0xde>
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	4413      	add	r3, r2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b39      	cmp	r3, #57	@ 0x39
 8003d10:	d9cb      	bls.n	8003caa <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8003d12:	e002      	b.n	8003d1a <mg_to_size_t+0xde>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	3301      	adds	r3, #1
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20b      	bcs.n	8003d3a <mg_to_size_t+0xfe>
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	4413      	add	r3, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d0f2      	beq.n	8003d14 <mg_to_size_t+0xd8>
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	d0ec      	beq.n	8003d14 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <mg_to_size_t+0x108>
 8003d40:	2300      	movs	r3, #0
 8003d42:	e009      	b.n	8003d58 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <mg_to_size_t+0x114>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e003      	b.n	8003d58 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	601a      	str	r2, [r3, #0]
  return true;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	372c      	adds	r7, #44	@ 0x2c
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	cccccccd 	.word	0xcccccccd

08003d68 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8003d68:	b082      	sub	sp, #8
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08e      	sub	sp, #56	@ 0x38
 8003d6e:	af02      	add	r7, sp, #8
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	1d38      	adds	r0, r7, #4
 8003d74:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8003d7a:	f107 0310 	add.w	r3, r7, #16
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f00a fe51 	bl	800ea2a <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8003d88:	e023      	b.n	8003dd2 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8003d8a:	f107 0318 	add.w	r3, r7, #24
 8003d8e:	f107 0220 	add.w	r2, r7, #32
 8003d92:	213d      	movs	r1, #61	@ 0x3d
 8003d94:	9100      	str	r1, [sp, #0]
 8003d96:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003d9a:	c903      	ldmia	r1, {r0, r1}
 8003d9c:	f00b f826 	bl	800edec <mg_span>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d015      	beq.n	8003dd2 <mg_http_var+0x6a>
 8003da6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d111      	bne.n	8003dd2 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8003dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db0:	6a39      	ldr	r1, [r7, #32]
 8003db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff00 	bl	8003bba <mg_ncasecmp>
 8003dba:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <mg_http_var+0x6a>
      result = v;
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	f107 0218 	add.w	r2, r7, #24
 8003dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dcc:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8003dd0:	e00b      	b.n	8003dea <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003dd8:	2126      	movs	r1, #38	@ 0x26
 8003dda:	9100      	str	r1, [sp, #0]
 8003ddc:	1d39      	adds	r1, r7, #4
 8003dde:	c903      	ldmia	r1, {r0, r1}
 8003de0:	f00b f804 	bl	800edec <mg_span>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1cf      	bne.n	8003d8a <mg_http_var+0x22>
    }
  }
  return result;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f107 0310 	add.w	r3, r7, #16
 8003df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003df6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	3730      	adds	r7, #48	@ 0x30
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e04:	b002      	add	sp, #8
 8003e06:	4770      	bx	lr

08003e08 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <mg_http_get_var+0x20>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <mg_http_get_var+0x2c>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8003e34:	f06f 0301 	mvn.w	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3a:	e033      	b.n	8003ea4 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <mg_http_get_var+0x4a>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <mg_http_get_var+0x4a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e58:	e024      	b.n	8003ea4 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f00a fdc5 	bl	800e9f0 <mg_str_s>
 8003e66:	f107 0014 	add.w	r0, r7, #20
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	ca06      	ldmia	r2, {r1, r2}
 8003e74:	f7ff ff78 	bl	8003d68 <mg_http_var>
    if (v.buf == NULL) {
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8003e7e:	f06f 0303 	mvn.w	r3, #3
 8003e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e84:	e00e      	b.n	8003ea4 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	69b9      	ldr	r1, [r7, #24]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	f000 f82e 	bl	8003ef2 <mg_url_decode>
 8003e96:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da02      	bge.n	8003ea4 <mg_http_get_var+0x9c>
 8003e9e:	f06f 0302 	mvn.w	r3, #2
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3728      	adds	r7, #40	@ 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <isx>:

static bool isx(int c) {
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8003eba:	dd02      	ble.n	8003ec2 <isx+0x14>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b39      	cmp	r3, #57	@ 0x39
 8003ec0:	dd0b      	ble.n	8003eda <isx+0x2c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b60      	cmp	r3, #96	@ 0x60
 8003ec6:	dd02      	ble.n	8003ece <isx+0x20>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b66      	cmp	r3, #102	@ 0x66
 8003ecc:	dd05      	ble.n	8003eda <isx+0x2c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b40      	cmp	r3, #64	@ 0x40
 8003ed2:	dd04      	ble.n	8003ede <isx+0x30>
         (c >= 'A' && c <= 'F');
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b46      	cmp	r3, #70	@ 0x46
 8003ed8:	dc01      	bgt.n	8003ede <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <isx+0x32>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b08a      	sub	sp, #40	@ 0x28
 8003ef6:	af02      	add	r7, sp, #8
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e059      	b.n	8003fbe <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b25      	cmp	r3, #37	@ 0x25
 8003f14:	d136      	bne.n	8003f84 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d92e      	bls.n	8003f7e <mg_url_decode+0x8c>
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ffbf 	bl	8003eae <isx>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d023      	beq.n	8003f7e <mg_url_decode+0x8c>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ffb4 	bl	8003eae <isx>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	18d1      	adds	r1, r2, r3
 8003f54:	f107 0310 	add.w	r3, r7, #16
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f00a fd65 	bl	800ea2a <mg_str_n>
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	2201      	movs	r2, #1
 8003f68:	9200      	str	r2, [sp, #0]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	f107 0110 	add.w	r1, r7, #16
 8003f70:	c903      	ldmia	r1, {r0, r1}
 8003f72:	f00a ff98 	bl	800eea6 <mg_str_to_num>
        i += 2;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e019      	b.n	8003fb2 <mg_url_decode+0xc0>
      } else {
        return -1;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	e03a      	b.n	8003ffa <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <mg_url_decode+0xb0>
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b2b      	cmp	r3, #43	@ 0x2b
 8003f94:	d105      	bne.n	8003fa2 <mg_url_decode+0xb0>
      dst[j] = ' ';
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e007      	b.n	8003fb2 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	440b      	add	r3, r1
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d204      	bcs.n	8003fd0 <mg_url_decode+0xde>
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d89c      	bhi.n	8003f0a <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d204      	bcs.n	8003fe2 <mg_url_decode+0xf0>
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4413      	add	r3, r2
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d305      	bcc.n	8003ff6 <mg_url_decode+0x104>
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d201      	bcs.n	8003ff6 <mg_url_decode+0x104>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	e001      	b.n	8003ffa <mg_url_decode+0x108>
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <isok>:

static bool isok(uint8_t c) {
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	4603      	mov	r3, r0
 800400a:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b0a      	cmp	r3, #10
 8004010:	d008      	beq.n	8004024 <isok+0x22>
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b0d      	cmp	r3, #13
 8004016:	d005      	beq.n	8004024 <isok+0x22>
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	2b09      	cmp	r3, #9
 800401c:	d002      	beq.n	8004024 <isok+0x22>
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	2b1f      	cmp	r3, #31
 8004022:	d901      	bls.n	8004028 <isok+0x26>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <isok+0x28>
 8004028:	2300      	movs	r3, #0
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	b2db      	uxtb	r3, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e03c      	b.n	80040c6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ffd4 	bl	8004002 <isok>
 800405a:	4603      	mov	r3, r0
 800405c:	f083 0301 	eor.w	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <mg_http_get_request_len+0x30>
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	e031      	b.n	80040d0 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <mg_http_get_request_len+0x50>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b0a      	cmp	r3, #10
 800407c:	d106      	bne.n	800408c <mg_http_get_request_len+0x50>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b01      	subs	r3, #1
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b0a      	cmp	r3, #10
 800408a:	d016      	beq.n	80040ba <mg_http_get_request_len+0x7e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d916      	bls.n	80040c0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b0a      	cmp	r3, #10
 800409c:	d110      	bne.n	80040c0 <mg_http_get_request_len+0x84>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b0d      	cmp	r3, #13
 80040aa:	d109      	bne.n	80040c0 <mg_http_get_request_len+0x84>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b02      	subs	r3, #2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b0a      	cmp	r3, #10
 80040b8:	d102      	bne.n	80040c0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	e007      	b.n	80040d0 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3be      	bcc.n	800404c <mg_http_get_request_len+0x10>
  }
  return 0;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f7fc f95c 	bl	80003a0 <strlen>
 80040e8:	61b8      	str	r0, [r7, #24]
 80040ea:	231e      	movs	r3, #30
 80040ec:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e01f      	b.n	8004134 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3302      	adds	r3, #2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3328      	adds	r3, #40	@ 0x28
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10b      	bne.n	800412e <mg_http_get_header+0x56>
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fd4b 	bl	8003bba <mg_ncasecmp>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <mg_http_get_header+0x56>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	e010      	b.n	8004150 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	429a      	cmp	r2, r3
 800413a:	d208      	bcs.n	800414e <mg_http_get_header+0x76>
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3302      	adds	r3, #2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4413      	add	r3, r2
 8004146:	3304      	adds	r3, #4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d2      	bne.n	80040f4 <mg_http_get_header+0x1c>
  }
  return NULL;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004168:	2b80      	cmp	r3, #128	@ 0x80
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b20      	cmp	r3, #32
 800419e:	d904      	bls.n	80041aa <clen+0x2c>
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b7d      	cmp	r3, #125	@ 0x7d
 80041a4:	d801      	bhi.n	80041aa <clen+0x2c>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e054      	b.n	8004254 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80041b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b2:	d10d      	bne.n	80041d0 <clen+0x52>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	dd0a      	ble.n	80041d0 <clen+0x52>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	3301      	adds	r3, #1
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ffc9 	bl	8004158 <vcb>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <clen+0x52>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e041      	b.n	8004254 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d6:	2be0      	cmp	r3, #224	@ 0xe0
 80041d8:	d116      	bne.n	8004208 <clen+0x8a>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	dd13      	ble.n	8004208 <clen+0x8a>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3301      	adds	r3, #1
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ffb6 	bl	8004158 <vcb>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <clen+0x8a>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3302      	adds	r3, #2
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ffad 	bl	8004158 <vcb>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <clen+0x8a>
 8004204:	2303      	movs	r3, #3
 8004206:	e025      	b.n	8004254 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800420e:	2bf0      	cmp	r3, #240	@ 0xf0
 8004210:	d11f      	bne.n	8004252 <clen+0xd4>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b03      	cmp	r3, #3
 8004216:	dd1c      	ble.n	8004252 <clen+0xd4>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	3301      	adds	r3, #1
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff9a 	bl	8004158 <vcb>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <clen+0xd4>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3302      	adds	r3, #2
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff91 	bl	8004158 <vcb>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <clen+0xd4>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3303      	adds	r3, #3
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff88 	bl	8004158 <vcb>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <clen+0xd4>
    return 4;
 800424e:	2304      	movs	r3, #4
 8004250:	e000      	b.n	8004254 <clen+0xd6>
  return 0;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800426e:	e007      	b.n	8004280 <skiptorn+0x24>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d207      	bcs.n	8004298 <skiptorn+0x3c>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b0a      	cmp	r3, #10
 800428e:	d003      	beq.n	8004298 <skiptorn+0x3c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b0d      	cmp	r3, #13
 8004296:	d1eb      	bne.n	8004270 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d208      	bcs.n	80042b2 <skiptorn+0x56>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b0d      	cmp	r3, #13
 80042a6:	d106      	bne.n	80042b6 <skiptorn+0x5a>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b0a      	cmp	r3, #10
 80042b0:	d001      	beq.n	80042b6 <skiptorn+0x5a>
 80042b2:	2300      	movs	r3, #0
 80042b4:	e017      	b.n	80042e6 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d206      	bcs.n	80042cc <skiptorn+0x70>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b0d      	cmp	r3, #13
 80042c4:	d102      	bne.n	80042cc <skiptorn+0x70>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d205      	bcs.n	80042e0 <skiptorn+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	60fa      	str	r2, [r7, #12]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b0a      	cmp	r3, #10
 80042de:	d001      	beq.n	80042e4 <skiptorn+0x88>
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <skiptorn+0x8a>
  return s;
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	@ 0x28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
 8004304:	e09a      	b.n	800443c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	d301      	bcc.n	8004322 <mg_http_parse_headers+0x30>
 800431e:	2300      	movs	r3, #0
 8004320:	e092      	b.n	8004448 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b0a      	cmp	r3, #10
 8004328:	f000 808d 	beq.w	8004446 <mg_http_parse_headers+0x154>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b0d      	cmp	r3, #13
 8004332:	d105      	bne.n	8004340 <mg_http_parse_headers+0x4e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b0a      	cmp	r3, #10
 800433c:	f000 8083 	beq.w	8004446 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8004344:	e007      	b.n	8004356 <mg_http_parse_headers+0x64>
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	4413      	add	r3, r2
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d20b      	bcs.n	8004376 <mg_http_parse_headers+0x84>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b3a      	cmp	r3, #58	@ 0x3a
 8004364:	d007      	beq.n	8004376 <mg_http_parse_headers+0x84>
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff ff08 	bl	800417e <clen>
 800436e:	6238      	str	r0, [r7, #32]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e7      	bne.n	8004346 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <mg_http_parse_headers+0x8e>
 800437c:	2300      	movs	r3, #0
 800437e:	e063      	b.n	8004448 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d206      	bcs.n	8004396 <mg_http_parse_headers+0xa4>
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff fef7 	bl	800417e <clen>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <mg_http_parse_headers+0xa8>
 8004396:	2300      	movs	r3, #0
 8004398:	e056      	b.n	8004448 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60fa      	str	r2, [r7, #12]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80043a4:	d004      	beq.n	80043b0 <mg_http_parse_headers+0xbe>
 80043a6:	2300      	movs	r3, #0
 80043a8:	e04e      	b.n	8004448 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d207      	bcs.n	80043c8 <mg_http_parse_headers+0xd6>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d0f4      	beq.n	80043aa <mg_http_parse_headers+0xb8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b09      	cmp	r3, #9
 80043c6:	d0f0      	beq.n	80043aa <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	461a      	mov	r2, r3
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff ff43 	bl	800425c <skiptorn>
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <mg_http_parse_headers+0xf6>
 80043de:	2300      	movs	r3, #0
 80043e0:	e032      	b.n	8004448 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <mg_http_parse_headers+0x118>
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d0f2      	beq.n	80043e2 <mg_http_parse_headers+0xf0>
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	3b01      	subs	r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b09      	cmp	r3, #9
 8004408:	d0eb      	beq.n	80043e2 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	461a      	mov	r2, r3
 8004414:	f107 0318 	add.w	r3, r7, #24
 8004418:	e893 0003 	ldmia.w	r3, {r0, r1}
 800441c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3308      	adds	r3, #8
 800442a:	f107 0210 	add.w	r2, r7, #16
 800442e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004432:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	3301      	adds	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	f4ff af60 	bcc.w	8004306 <mg_http_parse_headers+0x14>
  }
  return true;
 8004446:	2301      	movs	r3, #1
}
 8004448:	4618      	mov	r0, r3
 800444a:	3728      	adds	r7, #40	@ 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b090      	sub	sp, #64	@ 0x40
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff fdec 	bl	800403c <mg_http_get_request_len>
 8004464:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <mg_http_parse+0x24>
 800446c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	e000      	b.n	8004476 <mg_http_parse+0x26>
 8004474:	2300      	movs	r3, #0
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8004478:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800447c:	2100      	movs	r1, #0
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f01f f900 	bl	8023684 <memset>
  if (req_len <= 0) return req_len;
 8004484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	dc01      	bgt.n	800448e <mg_http_parse+0x3e>
 800448a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448c:	e13f      	b.n	800470e <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 80044aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 80044ce:	e009      	b.n	80044e4 <mg_http_parse+0x94>
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d4:	4413      	add	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	441a      	add	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d20b      	bcs.n	8004504 <mg_http_parse+0xb4>
 80044ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fe45 	bl	800417e <clen>
 80044f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e9      	bne.n	80044d0 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80044fc:	e002      	b.n	8004504 <mg_http_parse+0xb4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	429a      	cmp	r2, r3
 800450a:	d203      	bcs.n	8004514 <mg_http_parse+0xc4>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b20      	cmp	r3, #32
 8004512:	d0f4      	beq.n	80044fe <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 800451a:	e009      	b.n	8004530 <mg_http_parse+0xe0>
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	4413      	add	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	429a      	cmp	r2, r3
 8004536:	d20b      	bcs.n	8004550 <mg_http_parse+0x100>
 8004538:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fe1f 	bl	800417e <clen>
 8004540:	6378      	str	r0, [r7, #52]	@ 0x34
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e9      	bne.n	800451c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8004548:	e002      	b.n	8004550 <mg_http_parse+0x100>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3301      	adds	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	429a      	cmp	r2, r3
 8004556:	d203      	bcs.n	8004560 <mg_http_parse+0x110>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b20      	cmp	r3, #32
 800455e:	d0f4      	beq.n	800454a <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3318      	adds	r3, #24
 8004564:	461a      	mov	r2, r3
 8004566:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff fe77 	bl	800425c <skiptorn>
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <mg_http_parse+0x12a>
 8004576:	2300      	movs	r3, #0
 8004578:	e0c9      	b.n	800470e <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6898      	ldr	r0, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	461a      	mov	r2, r3
 8004584:	213f      	movs	r1, #63	@ 0x3f
 8004586:	f7fb febb 	bl	8000300 <memchr>
 800458a:	6338      	str	r0, [r7, #48]	@ 0x30
 800458c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	441a      	add	r2, r3
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	3301      	adds	r3, #1
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <mg_http_parse+0x17e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <mg_http_parse+0x184>
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e09c      	b.n	800470e <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f103 0220 	add.w	r2, r3, #32
 80045da:	231e      	movs	r3, #30
 80045dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fe87 	bl	80042f2 <mg_http_parse_headers>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	e08b      	b.n	800470e <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80045f6:	4948      	ldr	r1, [pc, #288]	@ (8004718 <mg_http_parse+0x2c8>)
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fd6d 	bl	80040d8 <mg_http_get_header>
 80045fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d018      	beq.n	8004638 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004612:	f7ff fb13 	bl	8003c3c <mg_to_size_t>
 8004616:	4603      	mov	r3, r0
 8004618:	f083 0301 	eor.w	r3, r3, #1
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <mg_http_parse+0x1d8>
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	e072      	b.n	800470e <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800462e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004630:	441a      	add	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2205      	movs	r2, #5
 800463e:	4937      	ldr	r1, [pc, #220]	@ (800471c <mg_http_parse+0x2cc>)
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff faba 	bl	8003bba <mg_ncasecmp>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d12a      	bne.n	80046b6 <mg_http_parse+0x266>
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d127      	bne.n	80046b6 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	492d      	ldr	r1, [pc, #180]	@ (8004720 <mg_http_parse+0x2d0>)
 800466c:	4618      	mov	r0, r3
 800466e:	f00a f9bf 	bl	800e9f0 <mg_str_s>
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	cb0c      	ldmia	r3, {r2, r3}
 800467a:	c903      	ldmia	r1, {r0, r1}
 800467c:	f00a fa7b 	bl	800eb76 <mg_strcasecmp>
 8004680:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8004686:	f107 0318 	add.w	r3, r7, #24
 800468a:	4926      	ldr	r1, [pc, #152]	@ (8004724 <mg_http_parse+0x2d4>)
 800468c:	4618      	mov	r0, r3
 800468e:	f00a f9af 	bl	800e9f0 <mg_str_s>
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f107 0318 	add.w	r3, r7, #24
 8004698:	cb0c      	ldmia	r3, {r2, r3}
 800469a:	c903      	ldmia	r1, {r0, r1}
 800469c:	f00a fa6b 	bl	800eb76 <mg_strcasecmp>
 80046a0:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <mg_http_parse+0x266>
    hm->body.len = 0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80046ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d11b      	bne.n	80046fa <mg_http_parse+0x2aa>
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d018      	beq.n	80046fa <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 80046c8:	f107 0320 	add.w	r3, r7, #32
 80046cc:	4916      	ldr	r1, [pc, #88]	@ (8004728 <mg_http_parse+0x2d8>)
 80046ce:	4618      	mov	r0, r3
 80046d0:	f00a f98e 	bl	800e9f0 <mg_str_s>
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	f107 0320 	add.w	r3, r7, #32
 80046da:	cb0c      	ldmia	r3, {r2, r3}
 80046dc:	3108      	adds	r1, #8
 80046de:	c903      	ldmia	r1, {r0, r1}
 80046e0:	f00a fa49 	bl	800eb76 <mg_strcasecmp>
 80046e4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <mg_http_parse+0x2aa>
    hm->body.len = 0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80046f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004702:	429a      	cmp	r2, r3
 8004704:	d202      	bcs.n	800470c <mg_http_parse+0x2bc>
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	e000      	b.n	800470e <mg_http_parse+0x2be>

  return req_len;
 800470c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800470e:	4618      	mov	r0, r3
 8004710:	3740      	adds	r7, #64	@ 0x40
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	08027570 	.word	0x08027570
 800471c:	08027580 	.word	0x08027580
 8004720:	08027588 	.word	0x08027588
 8004724:	0802758c 	.word	0x0802758c
 8004728:	08027594 	.word	0x08027594

0800472c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b64      	subs	r3, #100	@ 0x64
 8004738:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800473c:	4293      	cmp	r3, r2
 800473e:	f200 8469 	bhi.w	8005014 <mg_http_status_code_str+0x8e8>
 8004742:	a101      	add	r1, pc, #4	@ (adr r1, 8004748 <mg_http_status_code_str+0x1c>)
 8004744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004748:	08004f19 	.word	0x08004f19
 800474c:	08004f1d 	.word	0x08004f1d
 8004750:	08004f21 	.word	0x08004f21
 8004754:	08005015 	.word	0x08005015
 8004758:	08005015 	.word	0x08005015
 800475c:	08005015 	.word	0x08005015
 8004760:	08005015 	.word	0x08005015
 8004764:	08005015 	.word	0x08005015
 8004768:	08005015 	.word	0x08005015
 800476c:	08005015 	.word	0x08005015
 8004770:	08005015 	.word	0x08005015
 8004774:	08005015 	.word	0x08005015
 8004778:	08005015 	.word	0x08005015
 800477c:	08005015 	.word	0x08005015
 8004780:	08005015 	.word	0x08005015
 8004784:	08005015 	.word	0x08005015
 8004788:	08005015 	.word	0x08005015
 800478c:	08005015 	.word	0x08005015
 8004790:	08005015 	.word	0x08005015
 8004794:	08005015 	.word	0x08005015
 8004798:	08005015 	.word	0x08005015
 800479c:	08005015 	.word	0x08005015
 80047a0:	08005015 	.word	0x08005015
 80047a4:	08005015 	.word	0x08005015
 80047a8:	08005015 	.word	0x08005015
 80047ac:	08005015 	.word	0x08005015
 80047b0:	08005015 	.word	0x08005015
 80047b4:	08005015 	.word	0x08005015
 80047b8:	08005015 	.word	0x08005015
 80047bc:	08005015 	.word	0x08005015
 80047c0:	08005015 	.word	0x08005015
 80047c4:	08005015 	.word	0x08005015
 80047c8:	08005015 	.word	0x08005015
 80047cc:	08005015 	.word	0x08005015
 80047d0:	08005015 	.word	0x08005015
 80047d4:	08005015 	.word	0x08005015
 80047d8:	08005015 	.word	0x08005015
 80047dc:	08005015 	.word	0x08005015
 80047e0:	08005015 	.word	0x08005015
 80047e4:	08005015 	.word	0x08005015
 80047e8:	08005015 	.word	0x08005015
 80047ec:	08005015 	.word	0x08005015
 80047f0:	08005015 	.word	0x08005015
 80047f4:	08005015 	.word	0x08005015
 80047f8:	08005015 	.word	0x08005015
 80047fc:	08005015 	.word	0x08005015
 8004800:	08005015 	.word	0x08005015
 8004804:	08005015 	.word	0x08005015
 8004808:	08005015 	.word	0x08005015
 800480c:	08005015 	.word	0x08005015
 8004810:	08005015 	.word	0x08005015
 8004814:	08005015 	.word	0x08005015
 8004818:	08005015 	.word	0x08005015
 800481c:	08005015 	.word	0x08005015
 8004820:	08005015 	.word	0x08005015
 8004824:	08005015 	.word	0x08005015
 8004828:	08005015 	.word	0x08005015
 800482c:	08005015 	.word	0x08005015
 8004830:	08005015 	.word	0x08005015
 8004834:	08005015 	.word	0x08005015
 8004838:	08005015 	.word	0x08005015
 800483c:	08005015 	.word	0x08005015
 8004840:	08005015 	.word	0x08005015
 8004844:	08005015 	.word	0x08005015
 8004848:	08005015 	.word	0x08005015
 800484c:	08005015 	.word	0x08005015
 8004850:	08005015 	.word	0x08005015
 8004854:	08005015 	.word	0x08005015
 8004858:	08005015 	.word	0x08005015
 800485c:	08005015 	.word	0x08005015
 8004860:	08005015 	.word	0x08005015
 8004864:	08005015 	.word	0x08005015
 8004868:	08005015 	.word	0x08005015
 800486c:	08005015 	.word	0x08005015
 8004870:	08005015 	.word	0x08005015
 8004874:	08005015 	.word	0x08005015
 8004878:	08005015 	.word	0x08005015
 800487c:	08005015 	.word	0x08005015
 8004880:	08005015 	.word	0x08005015
 8004884:	08005015 	.word	0x08005015
 8004888:	08005015 	.word	0x08005015
 800488c:	08005015 	.word	0x08005015
 8004890:	08005015 	.word	0x08005015
 8004894:	08005015 	.word	0x08005015
 8004898:	08005015 	.word	0x08005015
 800489c:	08005015 	.word	0x08005015
 80048a0:	08005015 	.word	0x08005015
 80048a4:	08005015 	.word	0x08005015
 80048a8:	08005015 	.word	0x08005015
 80048ac:	08005015 	.word	0x08005015
 80048b0:	08005015 	.word	0x08005015
 80048b4:	08005015 	.word	0x08005015
 80048b8:	08005015 	.word	0x08005015
 80048bc:	08005015 	.word	0x08005015
 80048c0:	08005015 	.word	0x08005015
 80048c4:	08005015 	.word	0x08005015
 80048c8:	08005015 	.word	0x08005015
 80048cc:	08005015 	.word	0x08005015
 80048d0:	08005015 	.word	0x08005015
 80048d4:	08005015 	.word	0x08005015
 80048d8:	08004f25 	.word	0x08004f25
 80048dc:	08004f29 	.word	0x08004f29
 80048e0:	08004f2d 	.word	0x08004f2d
 80048e4:	08004f31 	.word	0x08004f31
 80048e8:	08004f35 	.word	0x08004f35
 80048ec:	08004f39 	.word	0x08004f39
 80048f0:	08004f3d 	.word	0x08004f3d
 80048f4:	08004f41 	.word	0x08004f41
 80048f8:	08004f45 	.word	0x08004f45
 80048fc:	08005015 	.word	0x08005015
 8004900:	08005015 	.word	0x08005015
 8004904:	08005015 	.word	0x08005015
 8004908:	08005015 	.word	0x08005015
 800490c:	08005015 	.word	0x08005015
 8004910:	08005015 	.word	0x08005015
 8004914:	08005015 	.word	0x08005015
 8004918:	08005015 	.word	0x08005015
 800491c:	08005015 	.word	0x08005015
 8004920:	08005015 	.word	0x08005015
 8004924:	08005015 	.word	0x08005015
 8004928:	08005015 	.word	0x08005015
 800492c:	08005015 	.word	0x08005015
 8004930:	08005015 	.word	0x08005015
 8004934:	08005015 	.word	0x08005015
 8004938:	08005015 	.word	0x08005015
 800493c:	08005015 	.word	0x08005015
 8004940:	08004f49 	.word	0x08004f49
 8004944:	08005015 	.word	0x08005015
 8004948:	08005015 	.word	0x08005015
 800494c:	08005015 	.word	0x08005015
 8004950:	08005015 	.word	0x08005015
 8004954:	08005015 	.word	0x08005015
 8004958:	08005015 	.word	0x08005015
 800495c:	08005015 	.word	0x08005015
 8004960:	08005015 	.word	0x08005015
 8004964:	08005015 	.word	0x08005015
 8004968:	08005015 	.word	0x08005015
 800496c:	08005015 	.word	0x08005015
 8004970:	08005015 	.word	0x08005015
 8004974:	08005015 	.word	0x08005015
 8004978:	08005015 	.word	0x08005015
 800497c:	08005015 	.word	0x08005015
 8004980:	08005015 	.word	0x08005015
 8004984:	08005015 	.word	0x08005015
 8004988:	08005015 	.word	0x08005015
 800498c:	08005015 	.word	0x08005015
 8004990:	08005015 	.word	0x08005015
 8004994:	08005015 	.word	0x08005015
 8004998:	08005015 	.word	0x08005015
 800499c:	08005015 	.word	0x08005015
 80049a0:	08005015 	.word	0x08005015
 80049a4:	08005015 	.word	0x08005015
 80049a8:	08005015 	.word	0x08005015
 80049ac:	08005015 	.word	0x08005015
 80049b0:	08005015 	.word	0x08005015
 80049b4:	08005015 	.word	0x08005015
 80049b8:	08005015 	.word	0x08005015
 80049bc:	08005015 	.word	0x08005015
 80049c0:	08005015 	.word	0x08005015
 80049c4:	08005015 	.word	0x08005015
 80049c8:	08005015 	.word	0x08005015
 80049cc:	08005015 	.word	0x08005015
 80049d0:	08005015 	.word	0x08005015
 80049d4:	08005015 	.word	0x08005015
 80049d8:	08005015 	.word	0x08005015
 80049dc:	08005015 	.word	0x08005015
 80049e0:	08005015 	.word	0x08005015
 80049e4:	08005015 	.word	0x08005015
 80049e8:	08005015 	.word	0x08005015
 80049ec:	08005015 	.word	0x08005015
 80049f0:	08005015 	.word	0x08005015
 80049f4:	08005015 	.word	0x08005015
 80049f8:	08005015 	.word	0x08005015
 80049fc:	08005015 	.word	0x08005015
 8004a00:	08005015 	.word	0x08005015
 8004a04:	08005015 	.word	0x08005015
 8004a08:	08005015 	.word	0x08005015
 8004a0c:	08005015 	.word	0x08005015
 8004a10:	08005015 	.word	0x08005015
 8004a14:	08005015 	.word	0x08005015
 8004a18:	08005015 	.word	0x08005015
 8004a1c:	08005015 	.word	0x08005015
 8004a20:	08005015 	.word	0x08005015
 8004a24:	08005015 	.word	0x08005015
 8004a28:	08005015 	.word	0x08005015
 8004a2c:	08005015 	.word	0x08005015
 8004a30:	08005015 	.word	0x08005015
 8004a34:	08005015 	.word	0x08005015
 8004a38:	08005015 	.word	0x08005015
 8004a3c:	08005015 	.word	0x08005015
 8004a40:	08005015 	.word	0x08005015
 8004a44:	08005015 	.word	0x08005015
 8004a48:	08005015 	.word	0x08005015
 8004a4c:	08005015 	.word	0x08005015
 8004a50:	08005015 	.word	0x08005015
 8004a54:	08005015 	.word	0x08005015
 8004a58:	08005015 	.word	0x08005015
 8004a5c:	08005015 	.word	0x08005015
 8004a60:	08005015 	.word	0x08005015
 8004a64:	08005015 	.word	0x08005015
 8004a68:	08004f4d 	.word	0x08004f4d
 8004a6c:	08004f51 	.word	0x08004f51
 8004a70:	08004f55 	.word	0x08004f55
 8004a74:	08004f59 	.word	0x08004f59
 8004a78:	08004f5d 	.word	0x08004f5d
 8004a7c:	08004f61 	.word	0x08004f61
 8004a80:	08005015 	.word	0x08005015
 8004a84:	08004f65 	.word	0x08004f65
 8004a88:	08004f69 	.word	0x08004f69
 8004a8c:	08005015 	.word	0x08005015
 8004a90:	08005015 	.word	0x08005015
 8004a94:	08005015 	.word	0x08005015
 8004a98:	08005015 	.word	0x08005015
 8004a9c:	08005015 	.word	0x08005015
 8004aa0:	08005015 	.word	0x08005015
 8004aa4:	08005015 	.word	0x08005015
 8004aa8:	08005015 	.word	0x08005015
 8004aac:	08005015 	.word	0x08005015
 8004ab0:	08005015 	.word	0x08005015
 8004ab4:	08005015 	.word	0x08005015
 8004ab8:	08005015 	.word	0x08005015
 8004abc:	08005015 	.word	0x08005015
 8004ac0:	08005015 	.word	0x08005015
 8004ac4:	08005015 	.word	0x08005015
 8004ac8:	08005015 	.word	0x08005015
 8004acc:	08005015 	.word	0x08005015
 8004ad0:	08005015 	.word	0x08005015
 8004ad4:	08005015 	.word	0x08005015
 8004ad8:	08005015 	.word	0x08005015
 8004adc:	08005015 	.word	0x08005015
 8004ae0:	08005015 	.word	0x08005015
 8004ae4:	08005015 	.word	0x08005015
 8004ae8:	08005015 	.word	0x08005015
 8004aec:	08005015 	.word	0x08005015
 8004af0:	08005015 	.word	0x08005015
 8004af4:	08005015 	.word	0x08005015
 8004af8:	08005015 	.word	0x08005015
 8004afc:	08005015 	.word	0x08005015
 8004b00:	08005015 	.word	0x08005015
 8004b04:	08005015 	.word	0x08005015
 8004b08:	08005015 	.word	0x08005015
 8004b0c:	08005015 	.word	0x08005015
 8004b10:	08005015 	.word	0x08005015
 8004b14:	08005015 	.word	0x08005015
 8004b18:	08005015 	.word	0x08005015
 8004b1c:	08005015 	.word	0x08005015
 8004b20:	08005015 	.word	0x08005015
 8004b24:	08005015 	.word	0x08005015
 8004b28:	08005015 	.word	0x08005015
 8004b2c:	08005015 	.word	0x08005015
 8004b30:	08005015 	.word	0x08005015
 8004b34:	08005015 	.word	0x08005015
 8004b38:	08005015 	.word	0x08005015
 8004b3c:	08005015 	.word	0x08005015
 8004b40:	08005015 	.word	0x08005015
 8004b44:	08005015 	.word	0x08005015
 8004b48:	08005015 	.word	0x08005015
 8004b4c:	08005015 	.word	0x08005015
 8004b50:	08005015 	.word	0x08005015
 8004b54:	08005015 	.word	0x08005015
 8004b58:	08005015 	.word	0x08005015
 8004b5c:	08005015 	.word	0x08005015
 8004b60:	08005015 	.word	0x08005015
 8004b64:	08005015 	.word	0x08005015
 8004b68:	08005015 	.word	0x08005015
 8004b6c:	08005015 	.word	0x08005015
 8004b70:	08005015 	.word	0x08005015
 8004b74:	08005015 	.word	0x08005015
 8004b78:	08005015 	.word	0x08005015
 8004b7c:	08005015 	.word	0x08005015
 8004b80:	08005015 	.word	0x08005015
 8004b84:	08005015 	.word	0x08005015
 8004b88:	08005015 	.word	0x08005015
 8004b8c:	08005015 	.word	0x08005015
 8004b90:	08005015 	.word	0x08005015
 8004b94:	08005015 	.word	0x08005015
 8004b98:	08005015 	.word	0x08005015
 8004b9c:	08005015 	.word	0x08005015
 8004ba0:	08005015 	.word	0x08005015
 8004ba4:	08005015 	.word	0x08005015
 8004ba8:	08005015 	.word	0x08005015
 8004bac:	08005015 	.word	0x08005015
 8004bb0:	08005015 	.word	0x08005015
 8004bb4:	08005015 	.word	0x08005015
 8004bb8:	08005015 	.word	0x08005015
 8004bbc:	08005015 	.word	0x08005015
 8004bc0:	08005015 	.word	0x08005015
 8004bc4:	08005015 	.word	0x08005015
 8004bc8:	08005015 	.word	0x08005015
 8004bcc:	08005015 	.word	0x08005015
 8004bd0:	08005015 	.word	0x08005015
 8004bd4:	08005015 	.word	0x08005015
 8004bd8:	08005015 	.word	0x08005015
 8004bdc:	08005015 	.word	0x08005015
 8004be0:	08005015 	.word	0x08005015
 8004be4:	08005015 	.word	0x08005015
 8004be8:	08005015 	.word	0x08005015
 8004bec:	08005015 	.word	0x08005015
 8004bf0:	08005015 	.word	0x08005015
 8004bf4:	08005015 	.word	0x08005015
 8004bf8:	08004f6d 	.word	0x08004f6d
 8004bfc:	08004f71 	.word	0x08004f71
 8004c00:	08004f75 	.word	0x08004f75
 8004c04:	08004f79 	.word	0x08004f79
 8004c08:	08004f7d 	.word	0x08004f7d
 8004c0c:	08004f81 	.word	0x08004f81
 8004c10:	08004f85 	.word	0x08004f85
 8004c14:	08004f89 	.word	0x08004f89
 8004c18:	08004f8d 	.word	0x08004f8d
 8004c1c:	08004f91 	.word	0x08004f91
 8004c20:	08004f95 	.word	0x08004f95
 8004c24:	08004f99 	.word	0x08004f99
 8004c28:	08004f9d 	.word	0x08004f9d
 8004c2c:	08004fa1 	.word	0x08004fa1
 8004c30:	08004fa5 	.word	0x08004fa5
 8004c34:	08004fa9 	.word	0x08004fa9
 8004c38:	08004fad 	.word	0x08004fad
 8004c3c:	08004fb1 	.word	0x08004fb1
 8004c40:	08004fb5 	.word	0x08004fb5
 8004c44:	08005015 	.word	0x08005015
 8004c48:	08005015 	.word	0x08005015
 8004c4c:	08004fb9 	.word	0x08004fb9
 8004c50:	08004fbd 	.word	0x08004fbd
 8004c54:	08004fc1 	.word	0x08004fc1
 8004c58:	08004fc5 	.word	0x08004fc5
 8004c5c:	08005015 	.word	0x08005015
 8004c60:	08004fc9 	.word	0x08004fc9
 8004c64:	08005015 	.word	0x08005015
 8004c68:	08004fcd 	.word	0x08004fcd
 8004c6c:	08004fd1 	.word	0x08004fd1
 8004c70:	08005015 	.word	0x08005015
 8004c74:	08004fd5 	.word	0x08004fd5
 8004c78:	08005015 	.word	0x08005015
 8004c7c:	08005015 	.word	0x08005015
 8004c80:	08005015 	.word	0x08005015
 8004c84:	08005015 	.word	0x08005015
 8004c88:	08005015 	.word	0x08005015
 8004c8c:	08005015 	.word	0x08005015
 8004c90:	08005015 	.word	0x08005015
 8004c94:	08005015 	.word	0x08005015
 8004c98:	08005015 	.word	0x08005015
 8004c9c:	08005015 	.word	0x08005015
 8004ca0:	08005015 	.word	0x08005015
 8004ca4:	08005015 	.word	0x08005015
 8004ca8:	08004fd9 	.word	0x08004fd9
 8004cac:	08005015 	.word	0x08005015
 8004cb0:	08005015 	.word	0x08005015
 8004cb4:	08005015 	.word	0x08005015
 8004cb8:	08005015 	.word	0x08005015
 8004cbc:	08005015 	.word	0x08005015
 8004cc0:	08005015 	.word	0x08005015
 8004cc4:	08004fdd 	.word	0x08004fdd
 8004cc8:	08005015 	.word	0x08005015
 8004ccc:	08005015 	.word	0x08005015
 8004cd0:	08005015 	.word	0x08005015
 8004cd4:	08005015 	.word	0x08005015
 8004cd8:	08005015 	.word	0x08005015
 8004cdc:	08005015 	.word	0x08005015
 8004ce0:	08005015 	.word	0x08005015
 8004ce4:	08005015 	.word	0x08005015
 8004ce8:	08005015 	.word	0x08005015
 8004cec:	08005015 	.word	0x08005015
 8004cf0:	08005015 	.word	0x08005015
 8004cf4:	08005015 	.word	0x08005015
 8004cf8:	08005015 	.word	0x08005015
 8004cfc:	08005015 	.word	0x08005015
 8004d00:	08005015 	.word	0x08005015
 8004d04:	08005015 	.word	0x08005015
 8004d08:	08005015 	.word	0x08005015
 8004d0c:	08005015 	.word	0x08005015
 8004d10:	08005015 	.word	0x08005015
 8004d14:	08005015 	.word	0x08005015
 8004d18:	08005015 	.word	0x08005015
 8004d1c:	08005015 	.word	0x08005015
 8004d20:	08005015 	.word	0x08005015
 8004d24:	08005015 	.word	0x08005015
 8004d28:	08005015 	.word	0x08005015
 8004d2c:	08005015 	.word	0x08005015
 8004d30:	08005015 	.word	0x08005015
 8004d34:	08005015 	.word	0x08005015
 8004d38:	08005015 	.word	0x08005015
 8004d3c:	08005015 	.word	0x08005015
 8004d40:	08005015 	.word	0x08005015
 8004d44:	08005015 	.word	0x08005015
 8004d48:	08005015 	.word	0x08005015
 8004d4c:	08005015 	.word	0x08005015
 8004d50:	08005015 	.word	0x08005015
 8004d54:	08005015 	.word	0x08005015
 8004d58:	08005015 	.word	0x08005015
 8004d5c:	08005015 	.word	0x08005015
 8004d60:	08005015 	.word	0x08005015
 8004d64:	08005015 	.word	0x08005015
 8004d68:	08005015 	.word	0x08005015
 8004d6c:	08005015 	.word	0x08005015
 8004d70:	08005015 	.word	0x08005015
 8004d74:	08005015 	.word	0x08005015
 8004d78:	08005015 	.word	0x08005015
 8004d7c:	08005015 	.word	0x08005015
 8004d80:	08005015 	.word	0x08005015
 8004d84:	08004fe1 	.word	0x08004fe1
 8004d88:	08004fe5 	.word	0x08004fe5
 8004d8c:	08004fe9 	.word	0x08004fe9
 8004d90:	08004fed 	.word	0x08004fed
 8004d94:	08004ff1 	.word	0x08004ff1
 8004d98:	08004ff5 	.word	0x08004ff5
 8004d9c:	08004ff9 	.word	0x08004ff9
 8004da0:	08004ffd 	.word	0x08004ffd
 8004da4:	08005001 	.word	0x08005001
 8004da8:	08005005 	.word	0x08005005
 8004dac:	08005015 	.word	0x08005015
 8004db0:	08005009 	.word	0x08005009
 8004db4:	0800500d 	.word	0x0800500d
 8004db8:	08005015 	.word	0x08005015
 8004dbc:	08005015 	.word	0x08005015
 8004dc0:	08005015 	.word	0x08005015
 8004dc4:	08005015 	.word	0x08005015
 8004dc8:	08005015 	.word	0x08005015
 8004dcc:	08005015 	.word	0x08005015
 8004dd0:	08005015 	.word	0x08005015
 8004dd4:	08005015 	.word	0x08005015
 8004dd8:	08005015 	.word	0x08005015
 8004ddc:	08005015 	.word	0x08005015
 8004de0:	08005015 	.word	0x08005015
 8004de4:	08005015 	.word	0x08005015
 8004de8:	08005015 	.word	0x08005015
 8004dec:	08005015 	.word	0x08005015
 8004df0:	08005015 	.word	0x08005015
 8004df4:	08005015 	.word	0x08005015
 8004df8:	08005015 	.word	0x08005015
 8004dfc:	08005015 	.word	0x08005015
 8004e00:	08005015 	.word	0x08005015
 8004e04:	08005015 	.word	0x08005015
 8004e08:	08005015 	.word	0x08005015
 8004e0c:	08005015 	.word	0x08005015
 8004e10:	08005015 	.word	0x08005015
 8004e14:	08005015 	.word	0x08005015
 8004e18:	08005015 	.word	0x08005015
 8004e1c:	08005015 	.word	0x08005015
 8004e20:	08005015 	.word	0x08005015
 8004e24:	08005015 	.word	0x08005015
 8004e28:	08005015 	.word	0x08005015
 8004e2c:	08005015 	.word	0x08005015
 8004e30:	08005015 	.word	0x08005015
 8004e34:	08005015 	.word	0x08005015
 8004e38:	08005015 	.word	0x08005015
 8004e3c:	08005015 	.word	0x08005015
 8004e40:	08005015 	.word	0x08005015
 8004e44:	08005015 	.word	0x08005015
 8004e48:	08005015 	.word	0x08005015
 8004e4c:	08005015 	.word	0x08005015
 8004e50:	08005015 	.word	0x08005015
 8004e54:	08005015 	.word	0x08005015
 8004e58:	08005015 	.word	0x08005015
 8004e5c:	08005015 	.word	0x08005015
 8004e60:	08005015 	.word	0x08005015
 8004e64:	08005015 	.word	0x08005015
 8004e68:	08005015 	.word	0x08005015
 8004e6c:	08005015 	.word	0x08005015
 8004e70:	08005015 	.word	0x08005015
 8004e74:	08005015 	.word	0x08005015
 8004e78:	08005015 	.word	0x08005015
 8004e7c:	08005015 	.word	0x08005015
 8004e80:	08005015 	.word	0x08005015
 8004e84:	08005015 	.word	0x08005015
 8004e88:	08005015 	.word	0x08005015
 8004e8c:	08005015 	.word	0x08005015
 8004e90:	08005015 	.word	0x08005015
 8004e94:	08005015 	.word	0x08005015
 8004e98:	08005015 	.word	0x08005015
 8004e9c:	08005015 	.word	0x08005015
 8004ea0:	08005015 	.word	0x08005015
 8004ea4:	08005015 	.word	0x08005015
 8004ea8:	08005015 	.word	0x08005015
 8004eac:	08005015 	.word	0x08005015
 8004eb0:	08005015 	.word	0x08005015
 8004eb4:	08005015 	.word	0x08005015
 8004eb8:	08005015 	.word	0x08005015
 8004ebc:	08005015 	.word	0x08005015
 8004ec0:	08005015 	.word	0x08005015
 8004ec4:	08005015 	.word	0x08005015
 8004ec8:	08005015 	.word	0x08005015
 8004ecc:	08005015 	.word	0x08005015
 8004ed0:	08005015 	.word	0x08005015
 8004ed4:	08005015 	.word	0x08005015
 8004ed8:	08005015 	.word	0x08005015
 8004edc:	08005015 	.word	0x08005015
 8004ee0:	08005015 	.word	0x08005015
 8004ee4:	08005015 	.word	0x08005015
 8004ee8:	08005015 	.word	0x08005015
 8004eec:	08005015 	.word	0x08005015
 8004ef0:	08005015 	.word	0x08005015
 8004ef4:	08005015 	.word	0x08005015
 8004ef8:	08005015 	.word	0x08005015
 8004efc:	08005015 	.word	0x08005015
 8004f00:	08005015 	.word	0x08005015
 8004f04:	08005015 	.word	0x08005015
 8004f08:	08005015 	.word	0x08005015
 8004f0c:	08005015 	.word	0x08005015
 8004f10:	08005015 	.word	0x08005015
 8004f14:	08005011 	.word	0x08005011
    case 100: return "Continue";
 8004f18:	4b42      	ldr	r3, [pc, #264]	@ (8005024 <mg_http_status_code_str+0x8f8>)
 8004f1a:	e07c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8004f1c:	4b42      	ldr	r3, [pc, #264]	@ (8005028 <mg_http_status_code_str+0x8fc>)
 8004f1e:	e07a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8004f20:	4b42      	ldr	r3, [pc, #264]	@ (800502c <mg_http_status_code_str+0x900>)
 8004f22:	e078      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8004f24:	4b42      	ldr	r3, [pc, #264]	@ (8005030 <mg_http_status_code_str+0x904>)
 8004f26:	e076      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8004f28:	4b42      	ldr	r3, [pc, #264]	@ (8005034 <mg_http_status_code_str+0x908>)
 8004f2a:	e074      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8004f2c:	4b42      	ldr	r3, [pc, #264]	@ (8005038 <mg_http_status_code_str+0x90c>)
 8004f2e:	e072      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8004f30:	4b42      	ldr	r3, [pc, #264]	@ (800503c <mg_http_status_code_str+0x910>)
 8004f32:	e070      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8004f34:	4b42      	ldr	r3, [pc, #264]	@ (8005040 <mg_http_status_code_str+0x914>)
 8004f36:	e06e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <mg_http_status_code_str+0x918>)
 8004f3a:	e06c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8004f3c:	4b42      	ldr	r3, [pc, #264]	@ (8005048 <mg_http_status_code_str+0x91c>)
 8004f3e:	e06a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8004f40:	4b42      	ldr	r3, [pc, #264]	@ (800504c <mg_http_status_code_str+0x920>)
 8004f42:	e068      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8004f44:	4b42      	ldr	r3, [pc, #264]	@ (8005050 <mg_http_status_code_str+0x924>)
 8004f46:	e066      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8004f48:	4b42      	ldr	r3, [pc, #264]	@ (8005054 <mg_http_status_code_str+0x928>)
 8004f4a:	e064      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8004f4c:	4b42      	ldr	r3, [pc, #264]	@ (8005058 <mg_http_status_code_str+0x92c>)
 8004f4e:	e062      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8004f50:	4b42      	ldr	r3, [pc, #264]	@ (800505c <mg_http_status_code_str+0x930>)
 8004f52:	e060      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8004f54:	4b42      	ldr	r3, [pc, #264]	@ (8005060 <mg_http_status_code_str+0x934>)
 8004f56:	e05e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8004f58:	4b42      	ldr	r3, [pc, #264]	@ (8005064 <mg_http_status_code_str+0x938>)
 8004f5a:	e05c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8004f5c:	4b42      	ldr	r3, [pc, #264]	@ (8005068 <mg_http_status_code_str+0x93c>)
 8004f5e:	e05a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8004f60:	4b42      	ldr	r3, [pc, #264]	@ (800506c <mg_http_status_code_str+0x940>)
 8004f62:	e058      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8004f64:	4b42      	ldr	r3, [pc, #264]	@ (8005070 <mg_http_status_code_str+0x944>)
 8004f66:	e056      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8004f68:	4b42      	ldr	r3, [pc, #264]	@ (8005074 <mg_http_status_code_str+0x948>)
 8004f6a:	e054      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8004f6c:	4b42      	ldr	r3, [pc, #264]	@ (8005078 <mg_http_status_code_str+0x94c>)
 8004f6e:	e052      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8004f70:	4b42      	ldr	r3, [pc, #264]	@ (800507c <mg_http_status_code_str+0x950>)
 8004f72:	e050      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8004f74:	4b42      	ldr	r3, [pc, #264]	@ (8005080 <mg_http_status_code_str+0x954>)
 8004f76:	e04e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8004f78:	4b42      	ldr	r3, [pc, #264]	@ (8005084 <mg_http_status_code_str+0x958>)
 8004f7a:	e04c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8004f7c:	4b42      	ldr	r3, [pc, #264]	@ (8005088 <mg_http_status_code_str+0x95c>)
 8004f7e:	e04a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8004f80:	4b42      	ldr	r3, [pc, #264]	@ (800508c <mg_http_status_code_str+0x960>)
 8004f82:	e048      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8004f84:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <mg_http_status_code_str+0x964>)
 8004f86:	e046      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8004f88:	4b42      	ldr	r3, [pc, #264]	@ (8005094 <mg_http_status_code_str+0x968>)
 8004f8a:	e044      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8004f8c:	4b42      	ldr	r3, [pc, #264]	@ (8005098 <mg_http_status_code_str+0x96c>)
 8004f8e:	e042      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8004f90:	4b42      	ldr	r3, [pc, #264]	@ (800509c <mg_http_status_code_str+0x970>)
 8004f92:	e040      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8004f94:	4b42      	ldr	r3, [pc, #264]	@ (80050a0 <mg_http_status_code_str+0x974>)
 8004f96:	e03e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8004f98:	4b42      	ldr	r3, [pc, #264]	@ (80050a4 <mg_http_status_code_str+0x978>)
 8004f9a:	e03c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8004f9c:	4b42      	ldr	r3, [pc, #264]	@ (80050a8 <mg_http_status_code_str+0x97c>)
 8004f9e:	e03a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8004fa0:	4b42      	ldr	r3, [pc, #264]	@ (80050ac <mg_http_status_code_str+0x980>)
 8004fa2:	e038      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8004fa4:	4b42      	ldr	r3, [pc, #264]	@ (80050b0 <mg_http_status_code_str+0x984>)
 8004fa6:	e036      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8004fa8:	4b42      	ldr	r3, [pc, #264]	@ (80050b4 <mg_http_status_code_str+0x988>)
 8004faa:	e034      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8004fac:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <mg_http_status_code_str+0x98c>)
 8004fae:	e032      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8004fb0:	4b42      	ldr	r3, [pc, #264]	@ (80050bc <mg_http_status_code_str+0x990>)
 8004fb2:	e030      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8004fb4:	4b42      	ldr	r3, [pc, #264]	@ (80050c0 <mg_http_status_code_str+0x994>)
 8004fb6:	e02e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8004fb8:	4b42      	ldr	r3, [pc, #264]	@ (80050c4 <mg_http_status_code_str+0x998>)
 8004fba:	e02c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8004fbc:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <mg_http_status_code_str+0x99c>)
 8004fbe:	e02a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8004fc0:	4b42      	ldr	r3, [pc, #264]	@ (80050cc <mg_http_status_code_str+0x9a0>)
 8004fc2:	e028      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8004fc4:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <mg_http_status_code_str+0x9a4>)
 8004fc6:	e026      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8004fc8:	4b42      	ldr	r3, [pc, #264]	@ (80050d4 <mg_http_status_code_str+0x9a8>)
 8004fca:	e024      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8004fcc:	4b42      	ldr	r3, [pc, #264]	@ (80050d8 <mg_http_status_code_str+0x9ac>)
 8004fce:	e022      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8004fd0:	4b42      	ldr	r3, [pc, #264]	@ (80050dc <mg_http_status_code_str+0x9b0>)
 8004fd2:	e020      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8004fd4:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <mg_http_status_code_str+0x9b4>)
 8004fd6:	e01e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8004fd8:	4b42      	ldr	r3, [pc, #264]	@ (80050e4 <mg_http_status_code_str+0x9b8>)
 8004fda:	e01c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8004fdc:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <mg_http_status_code_str+0x9bc>)
 8004fde:	e01a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8004fe0:	4b42      	ldr	r3, [pc, #264]	@ (80050ec <mg_http_status_code_str+0x9c0>)
 8004fe2:	e018      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8004fe4:	4b42      	ldr	r3, [pc, #264]	@ (80050f0 <mg_http_status_code_str+0x9c4>)
 8004fe6:	e016      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8004fe8:	4b42      	ldr	r3, [pc, #264]	@ (80050f4 <mg_http_status_code_str+0x9c8>)
 8004fea:	e014      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8004fec:	4b42      	ldr	r3, [pc, #264]	@ (80050f8 <mg_http_status_code_str+0x9cc>)
 8004fee:	e012      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8004ff0:	4b42      	ldr	r3, [pc, #264]	@ (80050fc <mg_http_status_code_str+0x9d0>)
 8004ff2:	e010      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8004ff4:	4b42      	ldr	r3, [pc, #264]	@ (8005100 <mg_http_status_code_str+0x9d4>)
 8004ff6:	e00e      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8004ff8:	4b42      	ldr	r3, [pc, #264]	@ (8005104 <mg_http_status_code_str+0x9d8>)
 8004ffa:	e00c      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8004ffc:	4b42      	ldr	r3, [pc, #264]	@ (8005108 <mg_http_status_code_str+0x9dc>)
 8004ffe:	e00a      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8005000:	4b42      	ldr	r3, [pc, #264]	@ (800510c <mg_http_status_code_str+0x9e0>)
 8005002:	e008      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8005004:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <mg_http_status_code_str+0x9e4>)
 8005006:	e006      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8005008:	4b42      	ldr	r3, [pc, #264]	@ (8005114 <mg_http_status_code_str+0x9e8>)
 800500a:	e004      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800500c:	4b42      	ldr	r3, [pc, #264]	@ (8005118 <mg_http_status_code_str+0x9ec>)
 800500e:	e002      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8005010:	4b42      	ldr	r3, [pc, #264]	@ (800511c <mg_http_status_code_str+0x9f0>)
 8005012:	e000      	b.n	8005016 <mg_http_status_code_str+0x8ea>
    default: return "";
 8005014:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <mg_http_status_code_str+0x9f4>)
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	080275b4 	.word	0x080275b4
 8005028:	080275c0 	.word	0x080275c0
 800502c:	080275d4 	.word	0x080275d4
 8005030:	080275e0 	.word	0x080275e0
 8005034:	080275e4 	.word	0x080275e4
 8005038:	080275ec 	.word	0x080275ec
 800503c:	080275f8 	.word	0x080275f8
 8005040:	08027618 	.word	0x08027618
 8005044:	08027624 	.word	0x08027624
 8005048:	08027634 	.word	0x08027634
 800504c:	08027644 	.word	0x08027644
 8005050:	08027654 	.word	0x08027654
 8005054:	08027668 	.word	0x08027668
 8005058:	08027670 	.word	0x08027670
 800505c:	08027684 	.word	0x08027684
 8005060:	08027698 	.word	0x08027698
 8005064:	080276a0 	.word	0x080276a0
 8005068:	080276ac 	.word	0x080276ac
 800506c:	080276bc 	.word	0x080276bc
 8005070:	080276c8 	.word	0x080276c8
 8005074:	080276dc 	.word	0x080276dc
 8005078:	080276f0 	.word	0x080276f0
 800507c:	080276fc 	.word	0x080276fc
 8005080:	0802770c 	.word	0x0802770c
 8005084:	08027720 	.word	0x08027720
 8005088:	0802772c 	.word	0x0802772c
 800508c:	08027738 	.word	0x08027738
 8005090:	0802774c 	.word	0x0802774c
 8005094:	0802775c 	.word	0x0802775c
 8005098:	0802777c 	.word	0x0802777c
 800509c:	0802778c 	.word	0x0802778c
 80050a0:	08027798 	.word	0x08027798
 80050a4:	080277a0 	.word	0x080277a0
 80050a8:	080277b0 	.word	0x080277b0
 80050ac:	080277c4 	.word	0x080277c4
 80050b0:	080277d8 	.word	0x080277d8
 80050b4:	080277f0 	.word	0x080277f0
 80050b8:	08027808 	.word	0x08027808
 80050bc:	08027828 	.word	0x08027828
 80050c0:	0802783c 	.word	0x0802783c
 80050c4:	0802784c 	.word	0x0802784c
 80050c8:	08027860 	.word	0x08027860
 80050cc:	08027878 	.word	0x08027878
 80050d0:	08027880 	.word	0x08027880
 80050d4:	08027894 	.word	0x08027894
 80050d8:	080278a8 	.word	0x080278a8
 80050dc:	080278c0 	.word	0x080278c0
 80050e0:	080278d4 	.word	0x080278d4
 80050e4:	080278f4 	.word	0x080278f4
 80050e8:	08027918 	.word	0x08027918
 80050ec:	08027938 	.word	0x08027938
 80050f0:	08027950 	.word	0x08027950
 80050f4:	08027968 	.word	0x08027968
 80050f8:	08027978 	.word	0x08027978
 80050fc:	08027984 	.word	0x08027984
 8005100:	08027998 	.word	0x08027998
 8005104:	080279a8 	.word	0x080279a8
 8005108:	080279c4 	.word	0x080279c4
 800510c:	080279dc 	.word	0x080279dc
 8005110:	080279f4 	.word	0x080279f4
 8005114:	08027a04 	.word	0x08027a04
 8005118:	08027a14 	.word	0x08027a14
 800511c:	08027a34 	.word	0x08027a34
 8005120:	08027a54 	.word	0x08027a54

08005124 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8005124:	b408      	push	{r3}
 8005126:	b580      	push	{r7, lr}
 8005128:	b08b      	sub	sp, #44	@ 0x2c
 800512a:	af02      	add	r7, sp, #8
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8005132:	68b8      	ldr	r0, [r7, #8]
 8005134:	f7ff fafa 	bl	800472c <mg_http_status_code_str>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <mg_http_reply+0x20>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	e000      	b.n	8005146 <mg_http_reply+0x22>
 8005144:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <mg_http_reply+0xa0>)
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	491e      	ldr	r1, [pc, #120]	@ (80051c8 <mg_http_reply+0xa4>)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f003 ff08 	bl	8008f64 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005158:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800515a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800515e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8005166:	f107 0314 	add.w	r3, r7, #20
 800516a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800516c:	4817      	ldr	r0, [pc, #92]	@ (80051cc <mg_http_reply+0xa8>)
 800516e:	f7fd ff3b 	bl	8002fe8 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005176:	2b10      	cmp	r3, #16
 8005178:	d916      	bls.n	80051a8 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3b0f      	subs	r3, #15
 8005182:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800518c:	4a10      	ldr	r2, [pc, #64]	@ (80051d0 <mg_http_reply+0xac>)
 800518e:	210b      	movs	r1, #11
 8005190:	f008 f91c 	bl	800d3cc <mg_snprintf>
 8005194:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800519a:	69f9      	ldr	r1, [r7, #28]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	440b      	add	r3, r1
 80051a0:	3b0f      	subs	r3, #15
 80051a2:	4413      	add	r3, r2
 80051a4:	2220      	movs	r2, #32
 80051a6:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80051ae:	f36f 13c7 	bfc	r3, #7, #1
 80051b2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 80051b6:	bf00      	nop
 80051b8:	3724      	adds	r7, #36	@ 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051c0:	b001      	add	sp, #4
 80051c2:	4770      	bx	lr
 80051c4:	08027a54 	.word	0x08027a54
 80051c8:	08027a58 	.word	0x08027a58
 80051cc:	0800d35b 	.word	0x0800d35b
 80051d0:	08027a8c 	.word	0x08027a8c

080051d4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe facc 	bl	8003780 <mg_fs_close>
  c->pfn_data = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a07      	ldr	r2, [pc, #28]	@ (8005210 <restore_http_cb+0x3c>)
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80051fe:	f36f 13c7 	bfc	r3, #7, #1
 8005202:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	08006545 	.word	0x08006545

08005214 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8005214:	b5b0      	push	{r4, r5, r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af04      	add	r7, sp, #16
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	461c      	mov	r4, r3
 8005226:	4615      	mov	r5, r2
 8005228:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800522c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005230:	e9cd 2300 	strd	r2, r3, [sp]
 8005234:	4a04      	ldr	r2, [pc, #16]	@ (8005248 <mg_http_etag+0x34>)
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f008 f8c7 	bl	800d3cc <mg_snprintf>
  return buf;
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bdb0      	pop	{r4, r5, r7, pc}
 8005248:	08027a94 	.word	0x08027a94

0800524c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	@ 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b08      	cmp	r3, #8
 800525c:	d002      	beq.n	8005264 <static_cb+0x18>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d148      	bne.n	80052f6 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800526a:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800526c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005270:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	33a4      	adds	r3, #164	@ 0xa4
 8005276:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	429a      	cmp	r2, r3
 8005280:	d905      	bls.n	800528e <static_cb+0x42>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3348      	adds	r3, #72	@ 0x48
 8005286:	69f9      	ldr	r1, [r7, #28]
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fd1b 	bl	8006cc4 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005296:	429a      	cmp	r2, r3
 8005298:	d234      	bcs.n	8005304 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d902      	bls.n	80052b6 <static_cb+0x6a>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	6a3a      	ldr	r2, [r7, #32]
 80052be:	6810      	ldr	r0, [r2, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052c8:	4411      	add	r1, r2
 80052ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052cc:	4798      	blx	r3
 80052ce:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10c      	bne.n	8005308 <static_cb+0xbc>
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ff70 	bl	80051d4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80052f4:	e008      	b.n	8005308 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b09      	cmp	r3, #9
 80052fa:	d106      	bne.n	800530a <static_cb+0xbe>
    restore_http_cb(c);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ff69 	bl	80051d4 <restore_http_cb>
 8005302:	e002      	b.n	800530a <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8005308:	bf00      	nop
  }
  (void) ev_data;
}
 800530a:	3728      	adds	r7, #40	@ 0x28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b093      	sub	sp, #76	@ 0x4c
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	1d38      	adds	r0, r7, #4
 800531a:	e880 0006 	stmia.w	r0, {r1, r2}
 800531e:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 8005320:	f107 031c 	add.w	r3, r7, #28
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f009 fb62 	bl	800e9f0 <mg_str_s>
 800532c:	f107 0314 	add.w	r3, r7, #20
 8005330:	2201      	movs	r2, #1
 8005332:	4943      	ldr	r1, [pc, #268]	@ (8005440 <guess_content_type+0x130>)
 8005334:	4618      	mov	r0, r3
 8005336:	f009 fb78 	bl	800ea2a <mg_str_n>
  size_t i = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800533e:	e002      	b.n	8005346 <guess_content_type+0x36>
 8005340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005342:	3301      	adds	r3, #1
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800534a:	429a      	cmp	r2, r3
 800534c:	d208      	bcs.n	8005360 <guess_content_type+0x50>
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005354:	1acb      	subs	r3, r1, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b2e      	cmp	r3, #46	@ 0x2e
 800535e:	d1ef      	bne.n	8005340 <guess_content_type+0x30>
  path.buf += path.len - i;
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005366:	1acb      	subs	r3, r1, r3
 8005368:	4413      	add	r3, r2
 800536a:	607b      	str	r3, [r7, #4]
  path.len = i;
 800536c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536e:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8005370:	e02b      	b.n	80053ca <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 8005372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005376:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800537a:	213d      	movs	r1, #61	@ 0x3d
 800537c:	9100      	str	r1, [sp, #0]
 800537e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005382:	c903      	ldmia	r1, {r0, r1}
 8005384:	f009 fd32 	bl	800edec <mg_span>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01d      	beq.n	80053ca <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800538e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005392:	cb0c      	ldmia	r3, {r2, r3}
 8005394:	f107 0114 	add.w	r1, r7, #20
 8005398:	c903      	ldmia	r1, {r0, r1}
 800539a:	f009 fbaa 	bl	800eaf2 <mg_strcmp>
 800539e:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 80053a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053a8:	cb0c      	ldmia	r3, {r2, r3}
 80053aa:	1d39      	adds	r1, r7, #4
 80053ac:	c903      	ldmia	r1, {r0, r1}
 80053ae:	f009 fba0 	bl	800eaf2 <mg_strcmp>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d108      	bne.n	80053ca <guess_content_type+0xba>
      return v;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80053c8:	e036      	b.n	8005438 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 80053ca:	f107 031c 	add.w	r3, r7, #28
 80053ce:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80053d2:	212c      	movs	r1, #44	@ 0x2c
 80053d4:	9100      	str	r1, [sp, #0]
 80053d6:	f107 011c 	add.w	r1, r7, #28
 80053da:	c903      	ldmia	r1, {r0, r1}
 80053dc:	f009 fd06 	bl	800edec <mg_span>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1c5      	bne.n	8005372 <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80053e6:	2300      	movs	r3, #0
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ea:	e01a      	b.n	8005422 <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80053ec:	4a15      	ldr	r2, [pc, #84]	@ (8005444 <guess_content_type+0x134>)
 80053ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	cb0c      	ldmia	r3, {r2, r3}
 80053f6:	1d39      	adds	r1, r7, #4
 80053f8:	c903      	ldmia	r1, {r0, r1}
 80053fa:	f009 fb7a 	bl	800eaf2 <mg_strcmp>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <guess_content_type+0x10c>
 8005404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005406:	3301      	adds	r3, #1
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	4a0e      	ldr	r2, [pc, #56]	@ (8005444 <guess_content_type+0x134>)
 800540c:	460c      	mov	r4, r1
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005416:	e884 0003 	stmia.w	r4, {r0, r1}
 800541a:	e00d      	b.n	8005438 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541e:	3302      	adds	r3, #2
 8005420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005422:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <guess_content_type+0x134>)
 8005424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005426:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1de      	bne.n	80053ec <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4905      	ldr	r1, [pc, #20]	@ (8005448 <guess_content_type+0x138>)
 8005432:	4618      	mov	r0, r3
 8005434:	f009 fadc 	bl	800e9f0 <mg_str_s>
}
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	3744      	adds	r7, #68	@ 0x44
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}
 8005440:	08027d00 	.word	0x08027d00
 8005444:	24000058 	.word	0x24000058
 8005448:	08027b7c 	.word	0x08027b7c

0800544c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	@ 0x30
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005460:	e058      	b.n	8005514 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	3306      	adds	r3, #6
 800546a:	18d1      	adds	r1, r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	1f9a      	subs	r2, r3, #6
 8005476:	f107 0310 	add.w	r3, r7, #16
 800547a:	4618      	mov	r0, r3
 800547c:	f009 fad5 	bl	800ea2a <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	4413      	add	r3, r2
 8005488:	2206      	movs	r2, #6
 800548a:	4929      	ldr	r1, [pc, #164]	@ (8005530 <getrange+0xe4>)
 800548c:	4618      	mov	r0, r3
 800548e:	f01e f8cf 	bl	8023630 <memcmp>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	3301      	adds	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
 800549e:	e039      	b.n	8005514 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	f107 0218 	add.w	r2, r7, #24
 80054a8:	212d      	movs	r1, #45	@ 0x2d
 80054aa:	9100      	str	r1, [sp, #0]
 80054ac:	f107 0110 	add.w	r1, r7, #16
 80054b0:	c903      	ldmia	r1, {r0, r1}
 80054b2:	f009 fc9b 	bl	800edec <mg_span>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01d      	beq.n	80054f8 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	f107 0318 	add.w	r3, r7, #24
 80054c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054c6:	f7fe fbb9 	bl	8003c3c <mg_to_size_t>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <getrange+0x8a>
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	3301      	adds	r3, #1
 80054d4:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d022      	beq.n	8005522 <getrange+0xd6>
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	f107 0310 	add.w	r3, r7, #16
 80054e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054e6:	f7fe fba9 	bl	8003c3c <mg_to_size_t>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d018      	beq.n	8005522 <getrange+0xd6>
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	3301      	adds	r3, #1
 80054f4:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 80054f6:	e014      	b.n	8005522 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	f107 0310 	add.w	r3, r7, #16
 80054fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005502:	f7fe fb9b 	bl	8003c3c <mg_to_size_t>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <getrange+0xd6>
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	3301      	adds	r3, #1
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	e007      	b.n	8005524 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	1d9a      	adds	r2, r3, #6
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d3a0      	bcc.n	8005462 <getrange+0x16>
 8005520:	e000      	b.n	8005524 <getrange+0xd8>
    break;
 8005522:	bf00      	nop
  }
  return (int) numparsed;
 8005524:	6a3b      	ldr	r3, [r7, #32]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3728      	adds	r7, #40	@ 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	08027d04 	.word	0x08027d04

08005534 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	b0f3      	sub	sp, #460	@ 0x1cc
 800553a:	af0a      	add	r7, sp, #40	@ 0x28
 800553c:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8005540:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 8005544:	6020      	str	r0, [r4, #0]
 8005546:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800554a:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 800554e:	6001      	str	r1, [r0, #0]
 8005550:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8005554:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 8005558:	600a      	str	r2, [r1, #0]
 800555a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800555e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8005562:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8005564:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005568:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <mg_http_serve_file+0x4e>
 8005574:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005578:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	e000      	b.n	8005584 <mg_http_serve_file+0x50>
 8005582:	4ba4      	ldr	r3, [pc, #656]	@ (8005814 <mg_http_serve_file+0x2e0>)
 8005584:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80055a6:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80055aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	4610      	mov	r0, r2
 80055b6:	f009 fa1b 	bl	800e9f0 <mg_str_s>
 80055ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80055ca:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 80055ce:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80055d2:	ca06      	ldmia	r2, {r1, r2}
 80055d4:	f7ff fe9c 	bl	8005310 <guess_content_type>
  bool gzip = false;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 80055de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05c      	beq.n	80056a6 <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80055ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055f0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80055f4:	4988      	ldr	r1, [pc, #544]	@ (8005818 <mg_http_serve_file+0x2e4>)
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	f7fe fd6e 	bl	80040d8 <mg_http_get_header>
 80055fc:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 8005600:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005604:	2b00      	cmp	r3, #0
 8005606:	d03e      	beq.n	8005686 <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8005608:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	4881      	ldr	r0, [pc, #516]	@ (800581c <mg_http_serve_file+0x2e8>)
 8005618:	f007 ff0e 	bl	800d438 <mg_mprintf>
 800561c:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8005620:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005624:	2b00      	cmp	r3, #0
 8005626:	d02a      	beq.n	800567e <mg_http_serve_file+0x14a>
 8005628:	497d      	ldr	r1, [pc, #500]	@ (8005820 <mg_http_serve_file+0x2ec>)
 800562a:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800562e:	f01e f879 	bl	8023724 <strstr>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d022      	beq.n	800567e <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8005638:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800563c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005640:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a77      	ldr	r2, [pc, #476]	@ (8005824 <mg_http_serve_file+0x2f0>)
 8005648:	2164      	movs	r1, #100	@ 0x64
 800564a:	f007 febf 	bl	800d3cc <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800564e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8005652:	2201      	movs	r2, #1
 8005654:	4619      	mov	r1, r3
 8005656:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800565a:	f7fe f869 	bl	8003730 <mg_fs_open>
 800565e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 8005662:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <mg_http_serve_file+0x14a>
 800566a:	2301      	movs	r3, #1
 800566c:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8005670:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005674:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005678:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800567c:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 800567e:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8005682:	f01c fda7 	bl	80221d4 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8005686:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <mg_http_serve_file+0x172>
 800568e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005692:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005696:	2201      	movs	r2, #1
 8005698:	6819      	ldr	r1, [r3, #0]
 800569a:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800569e:	f7fe f847 	bl	8003730 <mg_fs_open>
 80056a2:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 80056a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d144      	bne.n	8005738 <mg_http_serve_file+0x204>
 80056ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d03c      	beq.n	8005738 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 80056be:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2201      	movs	r2, #1
 80056cc:	4619      	mov	r1, r3
 80056ce:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 80056d2:	f7fe f82d 	bl	8003730 <mg_fs_open>
 80056d6:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 80056da:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056de:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80056e2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80056e6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	6912      	ldr	r2, [r2, #16]
 80056ee:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 80056f0:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 80056f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	4610      	mov	r0, r2
 8005700:	f009 f976 	bl	800e9f0 <mg_str_s>
 8005704:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005708:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005714:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 8005718:	f107 0010 	add.w	r0, r7, #16
 800571c:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8005720:	ca06      	ldmia	r2, {r1, r2}
 8005722:	f7ff fdf5 	bl	8005310 <guess_content_type>
 8005726:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800572a:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800572e:	4623      	mov	r3, r4
 8005730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005734:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8005738:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <mg_http_serve_file+0x22c>
 8005740:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005744:	681c      	ldr	r4, [r3, #0]
 8005746:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800574a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800574e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005752:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	47a0      	blx	r4
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d114      	bne.n	800578a <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8005760:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005764:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005770:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005774:	4b2c      	ldr	r3, [pc, #176]	@ (8005828 <mg_http_serve_file+0x2f4>)
 8005776:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	f7ff fcd2 	bl	8005124 <mg_http_reply>
    mg_fs_close(fd);
 8005780:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005784:	f7fd fffc 	bl	8003780 <mg_fs_close>
 8005788:	e190      	b.n	8005aac <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800578a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800578e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005792:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8005796:	e9cd 2300 	strd	r2, r3, [sp]
 800579a:	460a      	mov	r2, r1
 800579c:	2140      	movs	r1, #64	@ 0x40
 800579e:	f7ff fd39 	bl	8005214 <mg_http_etag>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d045      	beq.n	8005834 <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80057a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80057ac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80057b0:	491e      	ldr	r1, [pc, #120]	@ (800582c <mg_http_serve_file+0x2f8>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	f7fe fc90 	bl	80040d8 <mg_http_get_header>
 80057b8:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80057bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d037      	beq.n	8005834 <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 80057c4:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80057c8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f009 f90e 	bl	800e9f0 <mg_str_s>
 80057d4:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 80057d8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80057dc:	cb0c      	ldmia	r3, {r2, r3}
 80057de:	c903      	ldmia	r1, {r0, r1}
 80057e0:	f009 f9c9 	bl	800eb76 <mg_strcasecmp>
 80057e4:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d124      	bne.n	8005834 <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 80057ea:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80057ee:	f7fd ffc7 	bl	8003780 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 80057f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80057f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005802:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005806:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <mg_http_serve_file+0x2fc>)
 8005808:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800580c:	6800      	ldr	r0, [r0, #0]
 800580e:	f7ff fc89 	bl	8005124 <mg_http_reply>
 8005812:	e14b      	b.n	8005aac <mg_http_serve_file+0x578>
 8005814:	24000030 	.word	0x24000030
 8005818:	08027d0c 	.word	0x08027d0c
 800581c:	080274f4 	.word	0x080274f4
 8005820:	08027d1c 	.word	0x08027d1c
 8005824:	08027d24 	.word	0x08027d24
 8005828:	08027d2c 	.word	0x08027d2c
 800582c:	08027d38 	.word	0x08027d38
 8005830:	08027a54 	.word	0x08027a54
  } else {
    int n, status = 200;
 8005834:	23c8      	movs	r3, #200	@ 0xc8
 8005836:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800583a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800583e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800584a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005856:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800585a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800585e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005862:	4995      	ldr	r1, [pc, #596]	@ (8005ab8 <mg_http_serve_file+0x584>)
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f7fe fc37 	bl	80040d8 <mg_http_get_header>
 800586a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 800586e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005872:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800587a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 808e 	beq.w	80059a0 <mg_http_serve_file+0x46c>
 8005884:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8005888:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800588c:	4619      	mov	r1, r3
 800588e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8005892:	f7ff fddb 	bl	800544c <getrange>
 8005896:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800589a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dd7e      	ble.n	80059a0 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 80058a2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <mg_http_serve_file+0x386>
 80058aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80058ae:	1e5a      	subs	r2, r3, #1
 80058b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80058b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80058b8:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 80058ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80058be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80058c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d808      	bhi.n	80058e4 <mg_http_serve_file+0x3b0>
 80058d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80058d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d817      	bhi.n	8005914 <mg_http_serve_file+0x3e0>
        status = 416;
 80058e4:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80058e8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80058f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058f6:	2200      	movs	r2, #0
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	60fa      	str	r2, [r7, #12]
 80058fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005900:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005904:	e9cd 1200 	strd	r1, r2, [sp]
 8005908:	4a6c      	ldr	r2, [pc, #432]	@ (8005abc <mg_http_serve_file+0x588>)
 800590a:	2164      	movs	r1, #100	@ 0x64
 800590c:	4618      	mov	r0, r3
 800590e:	f007 fd5d 	bl	800d3cc <mg_snprintf>
 8005912:	e045      	b.n	80059a0 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 8005914:	23ce      	movs	r3, #206	@ 0xce
 8005916:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800591a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800591e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005928:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	3301      	adds	r3, #1
 8005932:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 8005936:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800593a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	469a      	mov	sl, r3
 8005944:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8005946:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800594a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005954:	4413      	add	r3, r2
 8005956:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8005958:	2200      	movs	r2, #0
 800595a:	461d      	mov	r5, r3
 800595c:	4616      	mov	r6, r2
 800595e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005962:	2200      	movs	r2, #0
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800596c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005970:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005974:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8005978:	e9cd ab00 	strd	sl, fp, [sp]
 800597c:	4a50      	ldr	r2, [pc, #320]	@ (8005ac0 <mg_http_serve_file+0x58c>)
 800597e:	2164      	movs	r1, #100	@ 0x64
 8005980:	4618      	mov	r0, r3
 8005982:	f007 fd23 	bl	800d3cc <mg_snprintf>
        fs->sk(fd->fd, r1);
 8005986:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005990:	6810      	ldr	r0, [r2, #0]
 8005992:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005996:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	4611      	mov	r1, r2
 800599e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 80059a0:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80059a4:	f7fe fec2 	bl	800472c <mg_http_status_code_str>
 80059a8:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 80059aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b2:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 80059b4:	461d      	mov	r5, r3
 80059b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80059c4:	2100      	movs	r1, #0
 80059c6:	4698      	mov	r8, r3
 80059c8:	4689      	mov	r9, r1
 80059ca:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <mg_http_serve_file+0x4a2>
 80059d2:	493c      	ldr	r1, [pc, #240]	@ (8005ac4 <mg_http_serve_file+0x590>)
 80059d4:	e000      	b.n	80059d8 <mg_http_serve_file+0x4a4>
 80059d6:	493c      	ldr	r1, [pc, #240]	@ (8005ac8 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 80059d8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d006      	beq.n	80059f6 <mg_http_serve_file+0x4c2>
 80059e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	e000      	b.n	80059f8 <mg_http_serve_file+0x4c4>
 80059f6:	4b34      	ldr	r3, [pc, #208]	@ (8005ac8 <mg_http_serve_file+0x594>)
 80059f8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80059fc:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 8005a00:	9308      	str	r3, [sp, #32]
 8005a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a06:	9307      	str	r3, [sp, #28]
 8005a08:	9106      	str	r1, [sp, #24]
 8005a0a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005a0e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	9201      	str	r2, [sp, #4]
 8005a16:	9500      	str	r5, [sp, #0]
 8005a18:	4623      	mov	r3, r4
 8005a1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005a1e:	492b      	ldr	r1, [pc, #172]	@ (8005acc <mg_http_serve_file+0x598>)
 8005a20:	6800      	ldr	r0, [r0, #0]
 8005a22:	f003 fa9f 	bl	8008f64 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8005a26:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005a2a:	4929      	ldr	r1, [pc, #164]	@ (8005ad0 <mg_http_serve_file+0x59c>)
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f008 ffdf 	bl	800e9f0 <mg_str_s>
 8005a32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a36:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005a40:	cb0c      	ldmia	r3, {r2, r3}
 8005a42:	c903      	ldmia	r1, {r0, r1}
 8005a44:	f009 f897 	bl	800eb76 <mg_strcasecmp>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 8005a4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8005a5c:	f36f 13c7 	bfc	r3, #7, #1
 8005a60:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8005a64:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005a68:	f7fd fe8a 	bl	8003780 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8005a6c:	e01e      	b.n	8005aac <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8005a6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a72:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	33a4      	adds	r3, #164	@ 0xa4
 8005a7a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 8005a7e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a82:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a12      	ldr	r2, [pc, #72]	@ (8005ad4 <mg_http_serve_file+0x5a0>)
 8005a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8005a8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a92:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8005aa0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8005aa4:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005aa8:	601a      	str	r2, [r3, #0]
}
 8005aaa:	e7ff      	b.n	8005aac <mg_http_serve_file+0x578>
 8005aac:	bf00      	nop
 8005aae:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab8:	08027d48 	.word	0x08027d48
 8005abc:	08027d50 	.word	0x08027d50
 8005ac0:	08027d70 	.word	0x08027d70
 8005ac4:	08027d98 	.word	0x08027d98
 8005ac8:	08027a54 	.word	0x08027a54
 8005acc:	08027db4 	.word	0x08027db4
 8005ad0:	08027e04 	.word	0x08027e04
 8005ad4:	0800524d 	.word	0x0800524d

08005ad8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8005ad8:	b082      	sub	sp, #8
 8005ada:	b590      	push	{r4, r7, lr}
 8005adc:	b08f      	sub	sp, #60	@ 0x3c
 8005ade:	af02      	add	r7, sp, #8
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8005ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aea:	461a      	mov	r2, r3
 8005aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	4a9c      	ldr	r2, [pc, #624]	@ (8005d64 <uri_to_path2+0x28c>)
 8005af4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005af6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005af8:	f007 fc68 	bl	800d3cc <mg_snprintf>
 8005afc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	3302      	adds	r3, #2
 8005b02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d809      	bhi.n	8005b1c <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8005b08:	4b97      	ldr	r3, [pc, #604]	@ (8005d68 <uri_to_path2+0x290>)
 8005b0a:	4a98      	ldr	r2, [pc, #608]	@ (8005d6c <uri_to_path2+0x294>)
 8005b0c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff fb07 	bl	8005124 <mg_http_reply>
    return -1;
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	e143      	b.n	8005da4 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8005b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b22:	4413      	add	r3, r2
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d012      	beq.n	8005b54 <uri_to_path2+0x7c>
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	3b01      	subs	r3, #1
 8005b32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b34:	4413      	add	r3, r2
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b3a:	d00b      	beq.n	8005b54 <uri_to_path2+0x7c>
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b44:	4413      	add	r3, r2
 8005b46:	222f      	movs	r2, #47	@ 0x2f
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	4413      	add	r3, r2
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8005b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d212      	bcs.n	8005b84 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b64:	18d0      	adds	r0, r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6c:	1ad1      	subs	r1, r2, r3
 8005b6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	18d4      	adds	r4, r2, r3
 8005b74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	9200      	str	r2, [sp, #0]
 8005b7e:	4622      	mov	r2, r4
 8005b80:	f7fe f9b7 	bl	8003ef2 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8005b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b8a:	4413      	add	r3, r2
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f008 ff46 	bl	800ea2a <mg_str_n>
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ba6:	f011 fe2f 	bl	8017808 <mg_path_is_sane>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f083 0301 	eor.w	r3, r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8005bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8005d70 <uri_to_path2+0x298>)
 8005bb8:	4a6c      	ldr	r2, [pc, #432]	@ (8005d6c <uri_to_path2+0x294>)
 8005bba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fab0 	bl	8005124 <mg_http_reply>
    return -1;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	e0ec      	b.n	8005da4 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8005bca:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005bcc:	f7fa fbe8 	bl	80003a0 <strlen>
 8005bd0:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8005bd2:	e007      	b.n	8005be4 <uri_to_path2+0x10c>
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	4413      	add	r3, r2
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d906      	bls.n	8005bf8 <uri_to_path2+0x120>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	3b01      	subs	r3, #1
 8005bee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bf0:	4413      	add	r3, r2
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005bf6:	d0ed      	beq.n	8005bd4 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005bf8:	f107 031c 	add.w	r3, r7, #28
 8005bfc:	495d      	ldr	r1, [pc, #372]	@ (8005d74 <uri_to_path2+0x29c>)
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f008 fef6 	bl	800e9f0 <mg_str_s>
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	f107 031c 	add.w	r3, r7, #28
 8005c0a:	cb0c      	ldmia	r3, {r2, r3}
 8005c0c:	3108      	adds	r1, #8
 8005c0e:	c903      	ldmia	r1, {r0, r1}
 8005c10:	f008 ff6f 	bl	800eaf2 <mg_strcmp>
 8005c14:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <uri_to_path2+0x152>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2100      	movs	r1, #0
 8005c22:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c24:	4798      	blx	r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	e000      	b.n	8005c2c <uri_to_path2+0x154>
 8005c2a:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8005c2e:	4b52      	ldr	r3, [pc, #328]	@ (8005d78 <uri_to_path2+0x2a0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	dd16      	ble.n	8005c64 <uri_to_path2+0x18c>
 8005c36:	4b51      	ldr	r3, [pc, #324]	@ (8005d7c <uri_to_path2+0x2a4>)
 8005c38:	f640 427e 	movw	r2, #3198	@ 0xc7e
 8005c3c:	4950      	ldr	r1, [pc, #320]	@ (8005d80 <uri_to_path2+0x2a8>)
 8005c3e:	2004      	movs	r0, #4
 8005c40:	f002 f80e 	bl	8007c60 <mg_log_prefix>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4849      	ldr	r0, [pc, #292]	@ (8005d84 <uri_to_path2+0x2ac>)
 8005c60:	f002 f84e 	bl	8007d00 <mg_log>
              flags));
  if (flags == 0) {
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 809b 	beq.w	8005da2 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8005c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d020      	beq.n	8005cb8 <uri_to_path2+0x1e0>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	4413      	add	r3, r2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8005c8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c8e:	d013      	beq.n	8005cb8 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	493b      	ldr	r1, [pc, #236]	@ (8005d88 <uri_to_path2+0x2b0>)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f003 f961 	bl	8008f64 <mg_printf>
    c->is_resp = 0;
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8005ca8:	f36f 13c7 	bfc	r3, #7, #1
 8005cac:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb6:	e074      	b.n	8005da2 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8005cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d06f      	beq.n	8005da2 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005cc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	18d0      	adds	r0, r2, r3
 8005cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	4a2f      	ldr	r2, [pc, #188]	@ (8005d8c <uri_to_path2+0x2b4>)
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	f007 fb7b 	bl	800d3cc <mg_snprintf>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005ce6:	4798      	blx	r3
 8005ce8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d116      	bne.n	8005d1e <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	18d0      	adds	r0, r2, r3
 8005cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	4a24      	ldr	r2, [pc, #144]	@ (8005d90 <uri_to_path2+0x2b8>)
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f007 fb64 	bl	800d3cc <mg_snprintf>
 8005d04:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d14:	4798      	blx	r3
 8005d16:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <uri_to_path2+0x24c>
      flags = tmp;
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d22:	e03e      	b.n	8005da2 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8005d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	18d0      	adds	r0, r2, r3
 8005d2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <uri_to_path2+0x2bc>)
 8005d32:	4619      	mov	r1, r3
 8005d34:	f007 fb4a 	bl	800d3cc <mg_snprintf>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02c      	beq.n	8005d98 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2100      	movs	r1, #0
 8005d46:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d48:	4798      	blx	r3
 8005d4a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d022      	beq.n	8005d98 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	330b      	adds	r3, #11
 8005d5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d5c:	4413      	add	r3, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e01e      	b.n	8005da2 <uri_to_path2+0x2ca>
 8005d64:	080274f4 	.word	0x080274f4
 8005d68:	08027e0c 	.word	0x08027e0c
 8005d6c:	08027a54 	.word	0x08027a54
 8005d70:	08027e20 	.word	0x08027e20
 8005d74:	08027e30 	.word	0x08027e30
 8005d78:	24000240 	.word	0x24000240
 8005d7c:	0802a6f4 	.word	0x0802a6f4
 8005d80:	08027148 	.word	0x08027148
 8005d84:	08027e34 	.word	0x08027e34
 8005d88:	08027e48 	.word	0x08027e48
 8005d8c:	08027e84 	.word	0x08027e84
 8005d90:	08027e90 	.word	0x08027e90
 8005d94:	08027ea0 	.word	0x08027ea0
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8005d98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	4413      	add	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8005da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3734      	adds	r7, #52	@ 0x34
 8005da8:	46bd      	mov	sp, r7
 8005daa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005dae:	b002      	add	sp, #8
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop

08005db4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b09c      	sub	sp, #112	@ 0x70
 8005db8:	af06      	add	r7, sp, #24
 8005dba:	6178      	str	r0, [r7, #20]
 8005dbc:	6139      	str	r1, [r7, #16]
 8005dbe:	60fa      	str	r2, [r7, #12]
 8005dc0:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <uri_to_path+0x1c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	e000      	b.n	8005dd2 <uri_to_path+0x1e>
 8005dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8005f40 <uri_to_path+0x18c>)
 8005dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f008 fe06 	bl	800e9f0 <mg_str_s>
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de8:	2300      	movs	r3, #0
 8005dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dec:	f107 031c 	add.w	r3, r7, #28
 8005df0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005df8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8005dfc:	e078      	b.n	8005ef0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8005dfe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005e02:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005e06:	213d      	movs	r1, #61	@ 0x3d
 8005e08:	9100      	str	r1, [sp, #0]
 8005e0a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005e0e:	c903      	ldmia	r1, {r0, r1}
 8005e10:	f008 ffec 	bl	800edec <mg_span>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f083 0301 	eor.w	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d014      	beq.n	8005e4a <uri_to_path+0x96>
 8005e20:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005e24:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e30:	463b      	mov	r3, r7
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f008 fdf7 	bl	800ea2a <mg_str_n>
 8005e3c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005e40:	463a      	mov	r2, r7
 8005e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e46:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d123      	bne.n	8005e98 <uri_to_path+0xe4>
 8005e50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005e54:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e60:	463b      	mov	r3, r7
 8005e62:	4938      	ldr	r1, [pc, #224]	@ (8005f44 <uri_to_path+0x190>)
 8005e64:	4618      	mov	r0, r3
 8005e66:	f008 fdc3 	bl	800e9f0 <mg_str_s>
 8005e6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005e6e:	463a      	mov	r2, r7
 8005e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e74:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e84:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e88:	f107 031c 	add.w	r3, r7, #28
 8005e8c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e94:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d323      	bcc.n	8005eea <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6899      	ldr	r1, [r3, #8]
 8005ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ea8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005eac:	4618      	mov	r0, r3
 8005eae:	f008 fdbc 	bl	800ea2a <mg_str_n>
 8005eb2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005eb6:	cb0c      	ldmia	r3, {r2, r3}
 8005eb8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8005ebc:	c903      	ldmia	r1, {r0, r1}
 8005ebe:	f008 fe18 	bl	800eaf2 <mg_strcmp>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d112      	bne.n	8005eee <uri_to_path+0x13a>
    u = k, p = v;
 8005ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ecc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ed4:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ed8:	f107 031c 	add.w	r3, r7, #28
 8005edc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ee4:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ee8:	e002      	b.n	8005ef0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8005eee:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8005ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ef4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005ef8:	212c      	movs	r1, #44	@ 0x2c
 8005efa:	9100      	str	r1, [sp, #0]
 8005efc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8005f00:	c903      	ldmia	r1, {r0, r1}
 8005f02:	f008 ff73 	bl	800edec <mg_span>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f af78 	bne.w	8005dfe <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8005f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	aa01      	add	r2, sp, #4
 8005f18:	f107 031c 	add.w	r3, r7, #28
 8005f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f20:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f7ff fdd2 	bl	8005ad8 <uri_to_path2>
 8005f34:	4603      	mov	r3, r0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3758      	adds	r7, #88	@ 0x58
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	24000030 	.word	0x24000030
 8005f44:	08027e30 	.word	0x08027e30

08005f48 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b0a6      	sub	sp, #152	@ 0x98
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8005f5c:	f107 0314 	add.w	r3, r7, #20
 8005f60:	2264      	movs	r2, #100	@ 0x64
 8005f62:	9200      	str	r2, [sp, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff ff23 	bl	8005db4 <uri_to_path>
 8005f6e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 8005f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db41      	blt.n	8005ffe <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8005f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8005f86:	4b20      	ldr	r3, [pc, #128]	@ (8006008 <mg_http_serve_dir+0xc0>)
 8005f88:	4a20      	ldr	r2, [pc, #128]	@ (800600c <mg_http_serve_dir+0xc4>)
 8005f8a:	f240 1193 	movw	r1, #403	@ 0x193
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff f8c8 	bl	8005124 <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8005f94:	e033      	b.n	8005ffe <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8005f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d028      	beq.n	8005ff0 <mg_http_serve_dir+0xa8>
 8005f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d024      	beq.n	8005ff0 <mg_http_serve_dir+0xa8>
 8005fa6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8005faa:	f107 0214 	add.w	r2, r7, #20
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f008 fd1d 	bl	800e9f0 <mg_str_s>
 8005fb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8005fba:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f008 fd16 	bl	800e9f0 <mg_str_s>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8005fcc:	cb0c      	ldmia	r3, {r2, r3}
 8005fce:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8005fd2:	c903      	ldmia	r1, {r0, r1}
 8005fd4:	f008 fe16 	bl	800ec04 <mg_match>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f107 0214 	add.w	r2, r7, #20
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f008 fced 	bl	800e9c8 <mg_http_serve_ssi>
}
 8005fee:	e006      	b.n	8005ffe <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8005ff0:	f107 0214 	add.w	r2, r7, #20
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff fa9b 	bl	8005534 <mg_http_serve_file>
}
 8005ffe:	bf00      	nop
 8006000:	3790      	adds	r7, #144	@ 0x90
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	08027eb0 	.word	0x08027eb0
 800600c:	08027a54 	.word	0x08027a54

08006010 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b0cf      	sub	sp, #316	@ 0x13c
 8006014:	af02      	add	r7, sp, #8
 8006016:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800601a:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800601e:	6020      	str	r0, [r4, #0]
 8006020:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8006024:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8006028:	6001      	str	r1, [r0, #0]
 800602a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800602e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8006032:	600a      	str	r2, [r1, #0]
 8006034:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006038:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800603c:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800603e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006042:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006046:	497a      	ldr	r1, [pc, #488]	@ (8006230 <mg_http_creds+0x220>)
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f7fe f845 	bl	80040d8 <mg_http_get_header>
 800604e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 8006052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006064:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006070:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8006078:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d05e      	beq.n	800613e <mg_http_creds+0x12e>
 8006080:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b06      	cmp	r3, #6
 8006088:	d959      	bls.n	800613e <mg_http_creds+0x12e>
 800608a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2206      	movs	r2, #6
 8006092:	4968      	ldr	r1, [pc, #416]	@ (8006234 <mg_http_creds+0x224>)
 8006094:	4618      	mov	r0, r3
 8006096:	f01d facb 	bl	8023630 <memcmp>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d14e      	bne.n	800613e <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 80060a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1d98      	adds	r0, r3, #6
 80060a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	1f99      	subs	r1, r3, #6
 80060b0:	f107 0214 	add.w	r2, r7, #20
 80060b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060b8:	f7fb f8b2 	bl	8001220 <mg_base64_decode>
 80060bc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80060c8:	213a      	movs	r1, #58	@ 0x3a
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fa f918 	bl	8000300 <memchr>
 80060d0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 80060d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80a2 	beq.w	8006222 <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060ec:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80060f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060f4:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 80060f8:	f107 0314 	add.w	r3, r7, #20
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	4613      	mov	r3, r2
 8006100:	4a4d      	ldr	r2, [pc, #308]	@ (8006238 <mg_http_creds+0x228>)
 8006102:	6809      	ldr	r1, [r1, #0]
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	f007 f961 	bl	800d3cc <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	461a      	mov	r2, r3
 8006116:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	1e5a      	subs	r2, r3, #1
 800611e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006122:	3301      	adds	r3, #1
 8006124:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8006128:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	4a41      	ldr	r2, [pc, #260]	@ (8006238 <mg_http_creds+0x228>)
 8006132:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006136:	6800      	ldr	r0, [r0, #0]
 8006138:	f007 f948 	bl	800d3cc <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800613c:	e071      	b.n	8006222 <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800613e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d024      	beq.n	8006190 <mg_http_creds+0x180>
 8006146:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b07      	cmp	r3, #7
 800614e:	d91f      	bls.n	8006190 <mg_http_creds+0x180>
 8006150:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2207      	movs	r2, #7
 8006158:	4938      	ldr	r1, [pc, #224]	@ (800623c <mg_http_creds+0x22c>)
 800615a:	4618      	mov	r0, r3
 800615c:	f01d fa68 	bl	8023630 <memcmp>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d114      	bne.n	8006190 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8006166:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	1fda      	subs	r2, r3, #7
 800616e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3307      	adds	r3, #7
 8006176:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800617a:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	4a2d      	ldr	r2, [pc, #180]	@ (8006238 <mg_http_creds+0x228>)
 8006184:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006188:	6800      	ldr	r0, [r0, #0]
 800618a:	f007 f91f 	bl	800d3cc <mg_snprintf>
 800618e:	e049      	b.n	8006224 <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8006190:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006194:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006198:	4929      	ldr	r1, [pc, #164]	@ (8006240 <mg_http_creds+0x230>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	f7fd ff9c 	bl	80040d8 <mg_http_get_header>
 80061a0:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80061a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d028      	beq.n	80061fe <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 80061ac:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80061b0:	220c      	movs	r2, #12
 80061b2:	4924      	ldr	r1, [pc, #144]	@ (8006244 <mg_http_creds+0x234>)
 80061b4:	4618      	mov	r0, r3
 80061b6:	f008 fc38 	bl	800ea2a <mg_str_n>
 80061ba:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80061be:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80061c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061cc:	ca06      	ldmia	r2, {r1, r2}
 80061ce:	f000 f864 	bl	800629a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80061d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d024      	beq.n	8006224 <mg_http_creds+0x214>
 80061da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80061de:	4619      	mov	r1, r3
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061e8:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	460b      	mov	r3, r1
 80061f0:	4a11      	ldr	r2, [pc, #68]	@ (8006238 <mg_http_creds+0x228>)
 80061f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80061f6:	6800      	ldr	r0, [r0, #0]
 80061f8:	f007 f8e8 	bl	800d3cc <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 80061fc:	e012      	b.n	8006224 <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80061fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006202:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f103 0010 	add.w	r0, r3, #16
 800620c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006210:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8006214:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	490a      	ldr	r1, [pc, #40]	@ (8006244 <mg_http_creds+0x234>)
 800621c:	f7fd fdf4 	bl	8003e08 <mg_http_get_var>
}
 8006220:	e000      	b.n	8006224 <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8006222:	bf00      	nop
}
 8006224:	bf00      	nop
 8006226:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	bf00      	nop
 8006230:	08027ec4 	.word	0x08027ec4
 8006234:	08027ed4 	.word	0x08027ed4
 8006238:	080274f4 	.word	0x080274f4
 800623c:	08027edc 	.word	0x08027edc
 8006240:	08027ee4 	.word	0x08027ee4
 8006244:	08027eec 	.word	0x08027eec

08006248 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8006256:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 8006258:	2b01      	cmp	r3, #1
 800625a:	d913      	bls.n	8006284 <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b22      	cmp	r3, #34	@ 0x22
 8006262:	d10f      	bne.n	8006284 <stripquotes+0x3c>
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	3b01      	subs	r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b22      	cmp	r3, #34	@ 0x22
 8006270:	d108      	bne.n	8006284 <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	1c59      	adds	r1, r3, #1
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	1e9a      	subs	r2, r3, #2
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4618      	mov	r0, r3
 800627e:	f008 fbd4 	bl	800ea2a <mg_str_n>
             : s;
 8006282:	e006      	b.n	8006292 <stripquotes+0x4a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	461a      	mov	r2, r3
 8006288:	1d3b      	adds	r3, r7, #4
 800628a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800628e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800629a:	b082      	sub	sp, #8
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	@ 0x30
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	1d38      	adds	r0, r7, #4
 80062a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 80062ac:	2300      	movs	r3, #0
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b0:	e072      	b.n	8006398 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	440b      	add	r3, r1
 80062ba:	4413      	add	r3, r2
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b3d      	cmp	r3, #61	@ 0x3d
 80062c0:	d167      	bne.n	8006392 <mg_http_get_header_var+0xf8>
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	4413      	add	r3, r2
 80062c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062cc:	4618      	mov	r0, r3
 80062ce:	f01d f9af 	bl	8023630 <memcmp>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d15c      	bne.n	8006392 <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	440b      	add	r3, r1
 80062e0:	3301      	adds	r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4413      	add	r3, r2
 80062f0:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 80062f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d205      	bcs.n	8006306 <mg_http_get_header_var+0x6c>
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b22      	cmp	r3, #34	@ 0x22
 8006300:	d101      	bne.n	8006306 <mg_http_get_header_var+0x6c>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <mg_http_get_header_var+0x6e>
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800630a:	e002      	b.n	8006312 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	3301      	adds	r3, #1
 8006310:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 8006312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	429a      	cmp	r2, r3
 8006318:	d227      	bcs.n	800636a <mg_http_get_header_var+0xd0>
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d010      	beq.n	8006342 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8006320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	429a      	cmp	r2, r3
 8006326:	d003      	beq.n	8006330 <mg_http_get_header_var+0x96>
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b22      	cmp	r3, #34	@ 0x22
 800632e:	d001      	beq.n	8006334 <mg_http_get_header_var+0x9a>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <mg_http_get_header_var+0x9c>
 8006334:	2300      	movs	r3, #0
      while (p < x &&
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <mg_http_get_header_var+0x72>
 8006340:	e013      	b.n	800636a <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b3b      	cmp	r3, #59	@ 0x3b
 8006348:	d009      	beq.n	800635e <mg_http_get_header_var+0xc4>
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b20      	cmp	r3, #32
 8006350:	d005      	beq.n	800635e <mg_http_get_header_var+0xc4>
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b2c      	cmp	r3, #44	@ 0x2c
 8006358:	d001      	beq.n	800635e <mg_http_get_header_var+0xc4>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <mg_http_get_header_var+0xc6>
 800635e:	2300      	movs	r3, #0
      while (p < x &&
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1d0      	bne.n	800630c <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800636a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	461a      	mov	r2, r3
 8006376:	f107 0314 	add.w	r3, r7, #20
 800637a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800637c:	4618      	mov	r0, r3
 800637e:	f008 fb54 	bl	800ea2a <mg_str_n>
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	e893 0006 	ldmia.w	r3, {r1, r2}
 800638c:	f7ff ff5c 	bl	8006248 <stripquotes>
 8006390:	e012      	b.n	80063b8 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8006392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006394:	3301      	adds	r3, #1
 8006396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d006      	beq.n	80063ac <mg_http_get_header_var+0x112>
 800639e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a2:	4413      	add	r3, r2
 80063a4:	1c9a      	adds	r2, r3, #2
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d382      	bcc.n	80062b2 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f008 fb39 	bl	800ea2a <mg_str_n>
}
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	3730      	adds	r7, #48	@ 0x30
 80063bc:	46bd      	mov	sp, r7
 80063be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c2:	b002      	add	sp, #8
 80063c4:	4770      	bx	lr

080063c6 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f01b fed6 	bl	8022184 <atoi>
 80063d8:	4603      	mov	r3, r0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <is_hex_digit>:

static bool is_hex_digit(int c) {
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80063ee:	dd02      	ble.n	80063f6 <is_hex_digit+0x14>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b39      	cmp	r3, #57	@ 0x39
 80063f4:	dd0b      	ble.n	800640e <is_hex_digit+0x2c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b60      	cmp	r3, #96	@ 0x60
 80063fa:	dd02      	ble.n	8006402 <is_hex_digit+0x20>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b66      	cmp	r3, #102	@ 0x66
 8006400:	dd05      	ble.n	800640e <is_hex_digit+0x2c>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b40      	cmp	r3, #64	@ 0x40
 8006406:	dd04      	ble.n	8006412 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b46      	cmp	r3, #70	@ 0x46
 800640c:	dc01      	bgt.n	8006412 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <is_hex_digit+0x32>
 8006412:	2300      	movs	r3, #0
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8006426:	b580      	push	{r7, lr}
 8006428:	b08a      	sub	sp, #40	@ 0x28
 800642a:	af02      	add	r7, sp, #8
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b02      	cmp	r3, #2
 8006440:	dc04      	bgt.n	800644c <skip_chunk+0x26>
 8006442:	2300      	movs	r3, #0
 8006444:	e07a      	b.n	800653c <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3301      	adds	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	429a      	cmp	r2, r3
 8006452:	da09      	bge.n	8006468 <skip_chunk+0x42>
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff ffc0 	bl	80063e2 <is_hex_digit>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ee      	bne.n	8006446 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <skip_chunk+0x4e>
 800646e:	f04f 33ff 	mov.w	r3, #4294967295
 8006472:	e063      	b.n	800653c <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b08      	cmp	r3, #8
 8006478:	dd02      	ble.n	8006480 <skip_chunk+0x5a>
 800647a:	f04f 33ff 	mov.w	r3, #4294967295
 800647e:	e05d      	b.n	800653c <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	da0c      	bge.n	80064a2 <skip_chunk+0x7c>
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b0d      	cmp	r3, #13
 8006492:	d106      	bne.n	80064a2 <skip_chunk+0x7c>
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	3301      	adds	r3, #1
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b0a      	cmp	r3, #10
 80064a0:	d002      	beq.n	80064a8 <skip_chunk+0x82>
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
 80064a6:	e049      	b.n	800653c <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f008 faba 	bl	800ea2a <mg_str_n>
 80064b6:	f107 0310 	add.w	r3, r7, #16
 80064ba:	2204      	movs	r2, #4
 80064bc:	9200      	str	r2, [sp, #0]
 80064be:	2210      	movs	r2, #16
 80064c0:	f107 0114 	add.w	r1, r7, #20
 80064c4:	c903      	ldmia	r1, {r0, r1}
 80064c6:	f008 fcee 	bl	800eea6 <mg_str_to_num>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295
 80064da:	e02f      	b.n	800653c <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da02      	bge.n	80064e8 <skip_chunk+0xc2>
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	e029      	b.n	800653c <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	1eda      	subs	r2, r3, #3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	dc01      	bgt.n	80064fa <skip_chunk+0xd4>
 80064f6:	2300      	movs	r3, #0
 80064f8:	e020      	b.n	800653c <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	3302      	adds	r3, #2
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b0d      	cmp	r3, #13
 800650a:	d108      	bne.n	800651e <skip_chunk+0xf8>
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	3303      	adds	r3, #3
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b0a      	cmp	r3, #10
 800651c:	d002      	beq.n	8006524 <skip_chunk+0xfe>
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	e00b      	b.n	800653c <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c9a      	adds	r2, r3, #2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	1c9a      	adds	r2, r3, #2
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4413      	add	r3, r2
 800653a:	3302      	adds	r3, #2
}
 800653c:	4618      	mov	r0, r3
 800653e:	3720      	adds	r7, #32
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8006544:	b580      	push	{r7, lr}
 8006546:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800654a:	af00      	add	r7, sp, #0
 800654c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006550:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006554:	6018      	str	r0, [r3, #0]
 8006556:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800655a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800655e:	6019      	str	r1, [r3, #0]
 8006560:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006564:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006568:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800656a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800656e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b07      	cmp	r3, #7
 8006576:	d031      	beq.n	80065dc <http_cb+0x98>
 8006578:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800657c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b09      	cmp	r3, #9
 8006584:	d02a      	beq.n	80065dc <http_cb+0x98>
 8006586:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800658a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f040 8356 	bne.w	8006c42 <http_cb+0x6fe>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8006596:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800659a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8349 	beq.w	8006c42 <http_cb+0x6fe>
 80065b0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065b4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 833c 	bne.w	8006c42 <http_cb+0x6fe>
       c->recv.len > 0)) {  // see #2796
 80065ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065ce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8333 	beq.w	8006c42 <http_cb+0x6fe>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 80065dc:	2300      	movs	r3, #0
 80065de:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80065e2:	e301      	b.n	8006be8 <http_cb+0x6a4>
      const char *buf = (char *) c->recv.buf + ofs;
 80065e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065e8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80065f4:	4413      	add	r3, r2
 80065f6:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80065fa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065fe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006606:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f107 0210 	add.w	r2, r7, #16
 8006610:	4619      	mov	r1, r3
 8006612:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8006616:	f7fd ff1b 	bl	8004450 <mg_http_parse>
 800661a:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800661e:	2300      	movs	r3, #0
 8006620:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 8006624:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006628:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 8006634:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006638:	2b00      	cmp	r3, #0
 800663a:	da38      	bge.n	80066ae <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800663c:	4bc2      	ldr	r3, [pc, #776]	@ (8006948 <http_cb+0x404>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	dd10      	ble.n	8006666 <http_cb+0x122>
 8006644:	4bc1      	ldr	r3, [pc, #772]	@ (800694c <http_cb+0x408>)
 8006646:	f640 525a 	movw	r2, #3418	@ 0xd5a
 800664a:	49c1      	ldr	r1, [pc, #772]	@ (8006950 <http_cb+0x40c>)
 800664c:	2001      	movs	r0, #1
 800664e:	f001 fb07 	bl	8007c60 <mg_log_prefix>
 8006652:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006656:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	4619      	mov	r1, r3
 8006660:	48bc      	ldr	r0, [pc, #752]	@ (8006954 <http_cb+0x410>)
 8006662:	f001 fb4d 	bl	8007d00 <mg_log>
        c->is_draining = 1;
 8006666:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800666a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006674:	f043 0310 	orr.w	r3, r3, #16
 8006678:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800667c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006680:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006688:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b10      	cmp	r3, #16
 8006690:	bf28      	it	cs
 8006692:	2310      	movcs	r3, #16
 8006694:	4619      	mov	r1, r3
 8006696:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800669a:	f001 fb67 	bl	8007d6c <mg_hexdump>
        c->recv.len = 0;
 800669e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066a2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 80066ac:	e2c9      	b.n	8006c42 <http_cb+0x6fe>
      }
      if (n == 0) break;                 // Request is not buffered yet
 80066ae:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 82b0 	beq.w	8006c18 <http_cb+0x6d4>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80066b8:	f107 0210 	add.w	r2, r7, #16
 80066bc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066c0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80066c4:	210a      	movs	r1, #10
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	f7fb ffc0 	bl	800264c <mg_call>
      if (c->recv.len != old_len) {
 80066cc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066d0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80066dc:	429a      	cmp	r2, r3
 80066de:	d01d      	beq.n	800671c <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 80066e0:	4b99      	ldr	r3, [pc, #612]	@ (8006948 <http_cb+0x404>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	dd10      	ble.n	800670a <http_cb+0x1c6>
 80066e8:	4b98      	ldr	r3, [pc, #608]	@ (800694c <http_cb+0x408>)
 80066ea:	f640 5264 	movw	r2, #3428	@ 0xd64
 80066ee:	4998      	ldr	r1, [pc, #608]	@ (8006950 <http_cb+0x40c>)
 80066f0:	2003      	movs	r0, #3
 80066f2:	f001 fab5 	bl	8007c60 <mg_log_prefix>
 80066f6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066fa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006702:	4619      	mov	r1, r3
 8006704:	4894      	ldr	r0, [pc, #592]	@ (8006958 <http_cb+0x414>)
 8006706:	f001 fafb 	bl	8007d00 <mg_log>
        c->pfn = NULL;
 800670a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800670e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800671a:	e292      	b.n	8006c42 <http_cb+0x6fe>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800671c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006720:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d128      	bne.n	800677c <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800672a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800672e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006736:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006740:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006744:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8006748:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800674c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006750:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006754:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006758:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800675c:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8006760:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006764:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8006768:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800676c:	1a8a      	subs	r2, r1, r2
 800676e:	1a9a      	subs	r2, r3, r2
 8006770:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006774:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006778:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800677c:	f107 0310 	add.w	r3, r7, #16
 8006780:	4976      	ldr	r1, [pc, #472]	@ (800695c <http_cb+0x418>)
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd fca8 	bl	80040d8 <mg_http_get_header>
 8006788:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800678c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01d      	beq.n	80067d0 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8006794:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006798:	4971      	ldr	r1, [pc, #452]	@ (8006960 <http_cb+0x41c>)
 800679a:	4618      	mov	r0, r3
 800679c:	f008 f928 	bl	800e9f0 <mg_str_s>
 80067a0:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 80067a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80067a8:	cb0c      	ldmia	r3, {r2, r3}
 80067aa:	c903      	ldmia	r1, {r0, r1}
 80067ac:	f008 f9e3 	bl	800eb76 <mg_strcasecmp>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <http_cb+0x27a>
          is_chunked = true;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 80067bc:	e09f      	b.n	80068fe <http_cb+0x3ba>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 80067be:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80067c2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80067c6:	4967      	ldr	r1, [pc, #412]	@ (8006964 <http_cb+0x420>)
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f7fb ff5f 	bl	800268c <mg_error>
          return;
 80067ce:	e238      	b.n	8006c42 <http_cb+0x6fe>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 80067d0:	f107 0310 	add.w	r3, r7, #16
 80067d4:	4964      	ldr	r1, [pc, #400]	@ (8006968 <http_cb+0x424>)
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd fc7e 	bl	80040d8 <mg_http_get_header>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 808d 	bne.w	80068fe <http_cb+0x3ba>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80067e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80067e8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2205      	movs	r2, #5
 80067f0:	495e      	ldr	r1, [pc, #376]	@ (800696c <http_cb+0x428>)
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fd f9e1 	bl	8003bba <mg_ncasecmp>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bf0c      	ite	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	2300      	movne	r3, #0
 8006802:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800680c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006810:	f083 0301 	eor.w	r3, r3, #1
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d030      	beq.n	800687c <http_cb+0x338>
 800681a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800681e:	4954      	ldr	r1, [pc, #336]	@ (8006970 <http_cb+0x42c>)
 8006820:	4618      	mov	r0, r3
 8006822:	f008 f8e5 	bl	800e9f0 <mg_str_s>
 8006826:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800682a:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800682e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006832:	cb0c      	ldmia	r3, {r2, r3}
 8006834:	c903      	ldmia	r1, {r0, r1}
 8006836:	f008 f99e 	bl	800eb76 <mg_strcasecmp>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d012      	beq.n	8006866 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8006840:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006844:	494b      	ldr	r1, [pc, #300]	@ (8006974 <http_cb+0x430>)
 8006846:	4618      	mov	r0, r3
 8006848:	f008 f8d2 	bl	800e9f0 <mg_str_s>
 800684c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006850:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006854:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006858:	cb0c      	ldmia	r3, {r2, r3}
 800685a:	c903      	ldmia	r1, {r0, r1}
 800685c:	f008 f98b 	bl	800eb76 <mg_strcasecmp>
 8006860:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800686c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006870:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006874:	4413      	add	r3, r2
 8006876:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800687a:	e022      	b.n	80068c2 <http_cb+0x37e>
        } else if (is_response) {
 800687c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01e      	beq.n	80068c2 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8006884:	f107 0310 	add.w	r3, r7, #16
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fd9c 	bl	80063c6 <mg_http_status>
 800688e:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 8006892:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006896:	2bc7      	cmp	r3, #199	@ 0xc7
 8006898:	dd0a      	ble.n	80068b0 <http_cb+0x36c>
 800689a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800689e:	2bcc      	cmp	r3, #204	@ 0xcc
 80068a0:	d006      	beq.n	80068b0 <http_cb+0x36c>
 80068a2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80068a6:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 80068aa:	d001      	beq.n	80068b0 <http_cb+0x36c>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <http_cb+0x36e>
 80068b0:	2300      	movs	r3, #0
 80068b2:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 80068b6:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 80068c2:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d019      	beq.n	80068fe <http_cb+0x3ba>
          mg_http_reply(c, 411, "", "");
 80068ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80068ce:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 80068d2:	4b29      	ldr	r3, [pc, #164]	@ (8006978 <http_cb+0x434>)
 80068d4:	4a28      	ldr	r2, [pc, #160]	@ (8006978 <http_cb+0x434>)
 80068d6:	f240 119b 	movw	r1, #411	@ 0x19b
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	f7fe fc22 	bl	8005124 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 80068e0:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <http_cb+0x404>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd0a      	ble.n	80068fe <http_cb+0x3ba>
 80068e8:	4b18      	ldr	r3, [pc, #96]	@ (800694c <http_cb+0x408>)
 80068ea:	f640 5287 	movw	r2, #3463	@ 0xd87
 80068ee:	4918      	ldr	r1, [pc, #96]	@ (8006950 <http_cb+0x40c>)
 80068f0:	2001      	movs	r0, #1
 80068f2:	f001 f9b5 	bl	8007c60 <mg_log_prefix>
 80068f6:	4921      	ldr	r1, [pc, #132]	@ (800697c <http_cb+0x438>)
 80068f8:	4821      	ldr	r0, [pc, #132]	@ (8006980 <http_cb+0x43c>)
 80068fa:	f001 fa01 	bl	8007d00 <mg_log>
        }
      }

      if (is_chunked) {
 80068fe:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80e7 	beq.w	8006ad6 <http_cb+0x592>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8006908:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800690c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006914:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8006918:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800691c:	440b      	add	r3, r1
 800691e:	4413      	add	r3, r2
 8006920:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800692a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800692e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006936:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8006946:	e024      	b.n	8006992 <http_cb+0x44e>
 8006948:	24000240 	.word	0x24000240
 800694c:	0802a704 	.word	0x0802a704
 8006950:	08027148 	.word	0x08027148
 8006954:	08027fa4 	.word	0x08027fa4
 8006958:	08027fbc 	.word	0x08027fbc
 800695c:	08027fd8 	.word	0x08027fd8
 8006960:	08027fec 	.word	0x08027fec
 8006964:	08027ff4 	.word	0x08027ff4
 8006968:	08028010 	.word	0x08028010
 800696c:	08027580 	.word	0x08027580
 8006970:	0802758c 	.word	0x0802758c
 8006974:	08027588 	.word	0x08027588
 8006978:	08027a54 	.word	0x08027a54
 800697c:	08028020 	.word	0x08028020
 8006980:	080274e0 	.word	0x080274e0
 8006984:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006988:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800698c:	4413      	add	r3, r2
 800698e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006992:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006996:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800699a:	18d0      	adds	r0, r2, r3
 800699c:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80069a0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80069a4:	1ad1      	subs	r1, r2, r3
 80069a6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80069aa:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 80069ae:	f7ff fd3a 	bl	8006426 <skip_chunk>
 80069b2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 80069b6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dd03      	ble.n	80069c6 <http_cb+0x482>
 80069be:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1de      	bne.n	8006984 <http_cb+0x440>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80069c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 8126 	beq.w	8006c1c <http_cb+0x6d8>
        if (cl < 0) {
 80069d0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	da08      	bge.n	80069ea <http_cb+0x4a6>
          mg_error(c, "Invalid chunk");
 80069d8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069dc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069e0:	499a      	ldr	r1, [pc, #616]	@ (8006c4c <http_cb+0x708>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	f7fb fe52 	bl	800268c <mg_error>
          break;
 80069e8:	e11b      	b.n	8006c22 <http_cb+0x6de>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 80069ea:	2300      	movs	r3, #0
 80069ec:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80069f0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069f4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80069fe:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006a02:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a06:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006a0e:	e03e      	b.n	8006a8e <http_cb+0x54a>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8006a10:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a14:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a1c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006a20:	18d0      	adds	r0, r2, r3
 8006a22:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006a26:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006a30:	4413      	add	r3, r2
 8006a32:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006a36:	4619      	mov	r1, r3
 8006a38:	f01c fe0a 	bl	8023650 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8006a3c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006a40:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006a44:	4413      	add	r3, r2
 8006a46:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006a4a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a4e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a52:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a56:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006a5a:	441a      	add	r2, r3
 8006a5c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a60:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006a68:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a6c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a74:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006a78:	441a      	add	r2, r3
 8006a7a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a7e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8006a86:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d016      	beq.n	8006abc <http_cb+0x578>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006a8e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006a92:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006a96:	18d0      	adds	r0, r2, r3
 8006a98:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006a9c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006aa0:	1ad1      	subs	r1, r2, r3
 8006aa2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006aa6:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006aaa:	f7ff fcbc 	bl	8006426 <skip_chunk>
 8006aae:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 8006ab2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	dcaa      	bgt.n	8006a10 <http_cb+0x4cc>
 8006aba:	e000      	b.n	8006abe <http_cb+0x57a>
          if (dl == 0) break;
 8006abc:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8006abe:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006ac2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006ac6:	4413      	add	r3, r2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006ace:	4413      	add	r3, r2
 8006ad0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006ad4:	e026      	b.n	8006b24 <http_cb+0x5e0>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8006ad6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ada:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ae2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006ae6:	1ad2      	subs	r2, r2, r3
 8006ae8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 8006af2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006af6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006afa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006afe:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8006b02:	429a      	cmp	r2, r3
 8006b04:	f0c0 808c 	bcc.w	8006c20 <http_cb+0x6dc>
        ofs += (size_t) n + hm.body.len;
 8006b08:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b0c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b14:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006b18:	4413      	add	r3, r2
 8006b1a:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006b1e:	4413      	add	r3, r2
 8006b20:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8006b24:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b28:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <http_cb+0x60e>
 8006b3c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b40:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8006b52:	f107 0210 	add.w	r2, r7, #16
 8006b56:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b5a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006b5e:	210b      	movs	r1, #11
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f7fb fd73 	bl	800264c <mg_call>
      if (c->is_accepted && !c->is_resp) {
 8006b66:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b6a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d034      	beq.n	8006be8 <http_cb+0x6a4>
 8006b7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b82:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006b8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d128      	bne.n	8006be8 <http_cb+0x6a4>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8006b96:	f107 0310 	add.w	r3, r7, #16
 8006b9a:	492d      	ldr	r1, [pc, #180]	@ (8006c50 <http_cb+0x70c>)
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fd fa9b 	bl	80040d8 <mg_http_get_header>
 8006ba2:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8006ba6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01c      	beq.n	8006be8 <http_cb+0x6a4>
 8006bae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006bb2:	4928      	ldr	r1, [pc, #160]	@ (8006c54 <http_cb+0x710>)
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f007 ff1b 	bl	800e9f0 <mg_str_s>
 8006bba:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8006bbe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006bc2:	cb0c      	ldmia	r3, {r2, r3}
 8006bc4:	c903      	ldmia	r1, {r0, r1}
 8006bc6:	f007 ffd6 	bl	800eb76 <mg_strcasecmp>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <http_cb+0x6a4>
          c->is_draining = 1;  // honor "Connection: close"
 8006bd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006bd4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006bde:	f043 0310 	orr.w	r3, r3, #16
 8006be2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8006be6:	e01c      	b.n	8006c22 <http_cb+0x6de>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8006be8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006bec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006bf6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d110      	bne.n	8006c22 <http_cb+0x6de>
 8006c00:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006c04:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006c10:	429a      	cmp	r2, r3
 8006c12:	f4ff ace7 	bcc.w	80065e4 <http_cb+0xa0>
 8006c16:	e004      	b.n	8006c22 <http_cb+0x6de>
      if (n == 0) break;                 // Request is not buffered yet
 8006c18:	bf00      	nop
 8006c1a:	e002      	b.n	8006c22 <http_cb+0x6de>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8006c1c:	bf00      	nop
 8006c1e:	e000      	b.n	8006c22 <http_cb+0x6de>
        if (hm.body.len > len) break;  // Buffer more data
 8006c20:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8006c22:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <http_cb+0x6fe>
 8006c2a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006c2e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3338      	adds	r3, #56	@ 0x38
 8006c36:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f91f 	bl	8006e80 <mg_iobuf_del>
  }
  (void) ev_data;
}
 8006c42:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08028044 	.word	0x08028044
 8006c50:	08028054 	.word	0x08028054
 8006c54:	08028060 	.word	0x08028060

08006c58 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f002 fd29 	bl	80096c4 <mg_listen>
 8006c72:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <mg_http_listen+0x2a>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	4a03      	ldr	r2, [pc, #12]	@ (8006c8c <mg_http_listen+0x34>)
 8006c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8006c82:	697b      	ldr	r3, [r7, #20]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08006545 	.word	0x08006545

08006c90 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <roundup+0x26>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	1e5a      	subs	r2, r3, #1
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	e000      	b.n	8006cb8 <roundup+0x28>
 8006cb6:	687b      	ldr	r3, [r7, #4]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8006cc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cc8:	b088      	sub	sp, #32
 8006cca:	af02      	add	r7, sp, #8
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6838      	ldr	r0, [r7, #0]
 8006cdc:	f7ff ffd8 	bl	8006c90 <roundup>
 8006ce0:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d117      	bne.n	8006d18 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f010 fcbe 	bl	8017674 <mg_bzero>
    free(io->buf);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f01b fa69 	bl	80221d4 <free>
    io->buf = NULL;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	609a      	str	r2, [r3, #8]
 8006d16:	e053      	b.n	8006dc0 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d04e      	beq.n	8006dc0 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	2001      	movs	r0, #1
 8006d26:	f01b fa31 	bl	802218c <calloc>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d028      	beq.n	8006d86 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	bf28      	it	cs
 8006d3e:	4613      	movcs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <mg_iobuf_resize+0x9a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <mg_iobuf_resize+0x9a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f01c fc79 	bl	8023650 <memmove>
      mg_bzero(io->buf, io->size);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f010 fc83 	bl	8017674 <mg_bzero>
      free(io->buf);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f01b fa2e 	bl	80221d4 <free>
      io->buf = (unsigned char *) p;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]
 8006d84:	e01c      	b.n	8006dc0 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8006d8a:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <mg_iobuf_resize+0x108>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dd16      	ble.n	8006dc0 <mg_iobuf_resize+0xfc>
 8006d92:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd0 <mg_iobuf_resize+0x10c>)
 8006d94:	f640 6201 	movw	r2, #3585	@ 0xe01
 8006d98:	490e      	ldr	r1, [pc, #56]	@ (8006dd4 <mg_iobuf_resize+0x110>)
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f000 ff60 	bl	8007c60 <mg_log_prefix>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	4698      	mov	r8, r3
 8006da8:	4691      	mov	r9, r2
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2200      	movs	r2, #0
 8006dae:	461c      	mov	r4, r3
 8006db0:	4615      	mov	r5, r2
 8006db2:	e9cd 4500 	strd	r4, r5, [sp]
 8006db6:	4642      	mov	r2, r8
 8006db8:	464b      	mov	r3, r9
 8006dba:	4807      	ldr	r0, [pc, #28]	@ (8006dd8 <mg_iobuf_resize+0x114>)
 8006dbc:	f000 ffa0 	bl	8007d00 <mg_log>
    }
  }
  return ok;
 8006dc0:	697b      	ldr	r3, [r7, #20]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006dcc:	24000240 	.word	0x24000240
 8006dd0:	0802a70c 	.word	0x0802a70c
 8006dd4:	08027148 	.word	0x08027148
 8006dd8:	080280a0 	.word	0x080280a0

08006ddc <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f7ff ff49 	bl	8006c90 <roundup>
 8006dfe:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8006e00:	6979      	ldr	r1, [r7, #20]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff5e 	bl	8006cc4 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d001      	beq.n	8006e16 <mg_iobuf_add+0x3a>
 8006e12:	2300      	movs	r3, #0
 8006e14:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d210      	bcs.n	8006e42 <mg_iobuf_add+0x66>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	440b      	add	r3, r1
 8006e2a:	18d0      	adds	r0, r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	18d1      	adds	r1, r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f01c fc07 	bl	8023650 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <mg_iobuf_add+0x7e>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4413      	add	r3, r2
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f01c fbfb 	bl	8023650 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d902      	bls.n	8006e6a <mg_iobuf_add+0x8e>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	609a      	str	r2, [r3, #8]
  io->len += len;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	609a      	str	r2, [r3, #8]
  return len;
 8006e76:	683b      	ldr	r3, [r7, #0]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d902      	bls.n	8006e9c <mg_iobuf_del+0x1c>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d904      	bls.n	8006eb4 <mg_iobuf_del+0x34>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d012      	beq.n	8006ee2 <mg_iobuf_del+0x62>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	18d0      	adds	r0, r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	440b      	add	r3, r1
 8006ece:	18d1      	adds	r1, r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	f01c fbb7 	bl	8023650 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <mg_iobuf_del+0x80>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6899      	ldr	r1, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	1acb      	subs	r3, r1, r3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f010 fbba 	bl	8017674 <mg_bzero>
  io->len -= len;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	609a      	str	r2, [r3, #8]
  return len;
 8006f0c:	687b      	ldr	r3, [r7, #4]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fecf 	bl	8006cc4 <mg_iobuf_resize>
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <escapeseq+0x12>
 8006f3e:	4b04      	ldr	r3, [pc, #16]	@ (8006f50 <escapeseq+0x20>)
 8006f40:	e000      	b.n	8006f44 <escapeseq+0x14>
 8006f42:	4b04      	ldr	r3, [pc, #16]	@ (8006f54 <escapeseq+0x24>)
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	080280ac 	.word	0x080280ac
 8006f54:	080280b4 	.word	0x080280b4

08006f58 <json_esc>:

static char json_esc(int c, int esc) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8006f62:	6838      	ldr	r0, [r7, #0]
 8006f64:	f7ff ffe4 	bl	8006f30 <escapeseq>
 8006f68:	6138      	str	r0, [r7, #16]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff ffda 	bl	8006f30 <escapeseq>
 8006f7c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e010      	b.n	8006fa6 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d107      	bne.n	8006fa0 <json_esc+0x48>
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	e007      	b.n	8006fb0 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ea      	bne.n	8006f84 <json_esc+0x2c>
  }
  return 0;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e02e      	b.n	8007026 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006fd2:	d114      	bne.n	8006ffe <mg_pass_string+0x46>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	dd0f      	ble.n	8006ffe <mg_pass_string+0x46>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff ffb4 	bl	8006f58 <json_esc>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <mg_pass_string+0x46>
      i++;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e010      	b.n	8007020 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d102      	bne.n	8007010 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800700a:	f06f 0301 	mvn.w	r3, #1
 800700e:	e010      	b.n	8007032 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4413      	add	r3, r2
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b22      	cmp	r3, #34	@ 0x22
 800701a:	d101      	bne.n	8007020 <mg_pass_string+0x68>
      return i;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	e008      	b.n	8007032 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	dbcc      	blt.n	8006fc8 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800702e:	f06f 0301 	mvn.w	r3, #1
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	0000      	movs	r0, r0
 800703c:	0000      	movs	r0, r0
	...

08007040 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8007040:	b480      	push	{r7}
 8007042:	b091      	sub	sp, #68	@ 0x44
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 8007058:	2300      	movs	r3, #0
 800705a:	637b      	str	r3, [r7, #52]	@ 0x34
 800705c:	2301      	movs	r3, #1
 800705e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 8007060:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	429a      	cmp	r2, r3
 8007066:	da0a      	bge.n	800707e <mg_atod+0x3e>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b2d      	cmp	r3, #45	@ 0x2d
 800706e:	d106      	bne.n	800707e <mg_atod+0x3e>
    sign = -1, i++;
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	633b      	str	r3, [r7, #48]	@ 0x30
 8007076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007078:	3301      	adds	r3, #1
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
 800707c:	e00a      	b.n	8007094 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800707e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	da21      	bge.n	80070ca <mg_atod+0x8a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b2b      	cmp	r3, #43	@ 0x2b
 800708c:	d11d      	bne.n	80070ca <mg_atod+0x8a>
    i++;
 800708e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007090:	3301      	adds	r3, #1
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007094:	e019      	b.n	80070ca <mg_atod+0x8a>
    d *= 10.0;
 8007096:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800709a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800709e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070a2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 80070a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	3b30      	subs	r3, #48	@ 0x30
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070b8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80070bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070c0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80070c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c6:	3301      	adds	r3, #1
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	da0b      	bge.n	80070ea <mg_atod+0xaa>
 80070d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b2f      	cmp	r3, #47	@ 0x2f
 80070dc:	d905      	bls.n	80070ea <mg_atod+0xaa>
 80070de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b39      	cmp	r3, #57	@ 0x39
 80070e8:	d9d5      	bls.n	8007096 <mg_atod+0x56>
  }
  d *= sign;
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070f4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80070f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80070fc:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8007100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	429a      	cmp	r2, r3
 8007106:	da51      	bge.n	80071ac <mg_atod+0x16c>
 8007108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b2e      	cmp	r3, #46	@ 0x2e
 8007112:	d14b      	bne.n	80071ac <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8007120:	a36d      	add	r3, pc, #436	@ (adr r3, 80072d8 <mg_atod+0x298>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800712a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712c:	3301      	adds	r3, #1
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007130:	e01d      	b.n	800716e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 8007132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	3b30      	subs	r3, #48	@ 0x30
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007144:	ed97 7b08 	vldr	d7, [r7, #32]
 8007148:	ee26 7b07 	vmul.f64	d7, d6, d7
 800714c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8007150:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007154:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 8007158:	ed97 6b08 	vldr	d6, [r7, #32]
 800715c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007160:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007164:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716a:	3301      	adds	r3, #1
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
 800716e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	da0b      	bge.n	800718e <mg_atod+0x14e>
 8007176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007180:	d905      	bls.n	800718e <mg_atod+0x14e>
 8007182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b39      	cmp	r3, #57	@ 0x39
 800718c:	d9d1      	bls.n	8007132 <mg_atod+0xf2>
    }
    d += frac * sign;
 800718e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007198:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800719c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80071a0:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80071a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071a8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80071ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	da7e      	bge.n	80072b2 <mg_atod+0x272>
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b65      	cmp	r3, #101	@ 0x65
 80071be:	d005      	beq.n	80071cc <mg_atod+0x18c>
 80071c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b45      	cmp	r3, #69	@ 0x45
 80071ca:	d172      	bne.n	80072b2 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]
    i++;
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	3301      	adds	r3, #1
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 80071da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	429a      	cmp	r2, r3
 80071e0:	da0a      	bge.n	80071f8 <mg_atod+0x1b8>
 80071e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80071ec:	d104      	bne.n	80071f8 <mg_atod+0x1b8>
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f4:	3301      	adds	r3, #1
 80071f6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 80071f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	da19      	bge.n	8007234 <mg_atod+0x1f4>
 8007200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4413      	add	r3, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b2b      	cmp	r3, #43	@ 0x2b
 800720a:	d113      	bne.n	8007234 <mg_atod+0x1f4>
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	3301      	adds	r3, #1
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8007212:	e00f      	b.n	8007234 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4619      	mov	r1, r3
 8007220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	637a      	str	r2, [r7, #52]	@ 0x34
 8007226:	461a      	mov	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	3b30      	subs	r3, #48	@ 0x30
 8007230:	440b      	add	r3, r1
 8007232:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8007234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	429a      	cmp	r2, r3
 800723a:	da0f      	bge.n	800725c <mg_atod+0x21c>
 800723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b2f      	cmp	r3, #47	@ 0x2f
 8007246:	d909      	bls.n	800725c <mg_atod+0x21c>
 8007248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b39      	cmp	r3, #57	@ 0x39
 8007252:	d803      	bhi.n	800725c <mg_atod+0x21c>
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800725a:	dbdb      	blt.n	8007214 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <mg_atod+0x228>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	425b      	negs	r3, r3
 8007266:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8007268:	2300      	movs	r3, #0
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	e00a      	b.n	8007284 <mg_atod+0x244>
 800726e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8007272:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007276:	ee27 7b06 	vmul.f64	d7, d7, d6
 800727a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3301      	adds	r3, #1
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	dbf0      	blt.n	800726e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	e00a      	b.n	80072a8 <mg_atod+0x268>
 8007292:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8007296:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800729a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800729e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	425b      	negs	r3, r3
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	dbef      	blt.n	8007292 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <mg_atod+0x27e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072bc:	601a      	str	r2, [r3, #0]
  return d;
 80072be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80072c6:	eeb0 0b47 	vmov.f64	d0, d7
 80072ca:	3744      	adds	r7, #68	@ 0x44
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	f3af 8000 	nop.w
 80072d8:	9999999a 	.word	0x9999999a
 80072dc:	3fb99999 	.word	0x3fb99999

080072e0 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b09b      	sub	sp, #108	@ 0x6c
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	f107 0408 	add.w	r4, r7, #8
 80072ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8007300:	2300      	movs	r3, #0
 8007302:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8007304:	2300      	movs	r3, #0
 8007306:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 8007308:	2300      	movs	r3, #0
 800730a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800730c:	2300      	movs	r3, #0
 800730e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 8007310:	2301      	movs	r3, #1
 8007312:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800731a:	f04f 33ff 	mov.w	r3, #4294967295
 800731e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <mg_json_get+0x4c>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b24      	cmp	r3, #36	@ 0x24
 8007332:	d002      	beq.n	800733a <mg_json_get+0x5a>
 8007334:	f06f 0301 	mvn.w	r3, #1
 8007338:	e308      	b.n	800794c <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800733a:	2300      	movs	r3, #0
 800733c:	663b      	str	r3, [r7, #96]	@ 0x60
 800733e:	e2fe      	b.n	800793e <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 8007340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007344:	4413      	add	r3, r2
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800734c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007350:	2b20      	cmp	r3, #32
 8007352:	f000 82ee 	beq.w	8007932 <mg_json_get+0x652>
 8007356:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800735a:	2b09      	cmp	r3, #9
 800735c:	f000 82e9 	beq.w	8007932 <mg_json_get+0x652>
 8007360:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007364:	2b0a      	cmp	r3, #10
 8007366:	f000 82e4 	beq.w	8007932 <mg_json_get+0x652>
 800736a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800736e:	2b0d      	cmp	r3, #13
 8007370:	f000 82df 	beq.w	8007932 <mg_json_get+0x652>
    switch (expecting) {
 8007374:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007378:	2b03      	cmp	r3, #3
 800737a:	f200 82dd 	bhi.w	8007938 <mg_json_get+0x658>
 800737e:	a201      	add	r2, pc, #4	@ (adr r2, 8007384 <mg_json_get+0xa4>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	08007395 	.word	0x08007395
 8007388:	0800767d 	.word	0x0800767d
 800738c:	0800780b 	.word	0x0800780b
 8007390:	08007821 	.word	0x08007821
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8007394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007398:	429a      	cmp	r2, r3
 800739a:	d101      	bne.n	80073a0 <mg_json_get+0xc0>
 800739c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800739e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 80073a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80073a4:	2b7b      	cmp	r3, #123	@ 0x7b
 80073a6:	d12b      	bne.n	8007400 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80073a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073aa:	2b1d      	cmp	r3, #29
 80073ac:	dd02      	ble.n	80073b4 <mg_json_get+0xd4>
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	e2cb      	b.n	800794c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80073b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d114      	bne.n	80073e6 <mg_json_get+0x106>
 80073bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4413      	add	r3, r2
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80073c6:	d10e      	bne.n	80073e6 <mg_json_get+0x106>
 80073c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d10a      	bne.n	80073e6 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 80073d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073d2:	3301      	adds	r3, #1
 80073d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80073d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d8:	3301      	adds	r3, #1
 80073da:	653b      	str	r3, [r7, #80]	@ 0x50
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295
 80073e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 80073e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073ec:	3368      	adds	r3, #104	@ 0x68
 80073ee:	443b      	add	r3, r7
 80073f0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80073f4:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 80073fe:	e29b      	b.n	8007938 <mg_json_get+0x658>
        } else if (c == '[') {
 8007400:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007404:	2b5b      	cmp	r3, #91	@ 0x5b
 8007406:	d14e      	bne.n	80074a6 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8007408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800740a:	2b1d      	cmp	r3, #29
 800740c:	dd02      	ble.n	8007414 <mg_json_get+0x134>
 800740e:	f04f 33ff 	mov.w	r3, #4294967295
 8007412:	e29b      	b.n	800794c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8007414:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007418:	429a      	cmp	r2, r3
 800741a:	d13a      	bne.n	8007492 <mg_json_get+0x1b2>
 800741c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b5b      	cmp	r3, #91	@ 0x5b
 8007426:	d134      	bne.n	8007492 <mg_json_get+0x1b2>
 8007428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800742a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800742c:	429a      	cmp	r2, r3
 800742e:	d130      	bne.n	8007492 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8007430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007432:	3301      	adds	r3, #1
 8007434:	657b      	str	r3, [r7, #84]	@ 0x54
 8007436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007438:	3301      	adds	r3, #1
 800743a:	653b      	str	r3, [r7, #80]	@ 0x50
 800743c:	2300      	movs	r3, #0
 800743e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8007440:	2300      	movs	r3, #0
 8007442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007444:	e010      	b.n	8007468 <mg_json_get+0x188>
              ei *= 10;
 8007446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 8007452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	4413      	add	r3, r2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	3b30      	subs	r3, #48	@ 0x30
 800745c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800745e:	4413      	add	r3, r2
 8007460:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8007462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007464:	3301      	adds	r3, #1
 8007466:	653b      	str	r3, [r7, #80]	@ 0x50
 8007468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b5d      	cmp	r3, #93	@ 0x5d
 8007472:	d005      	beq.n	8007480 <mg_json_get+0x1a0>
 8007474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e2      	bne.n	8007446 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8007480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	4413      	add	r3, r2
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <mg_json_get+0x1b2>
 800748c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748e:	3301      	adds	r3, #1
 8007490:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 8007492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007498:	3368      	adds	r3, #104	@ 0x68
 800749a:	443b      	add	r3, r7
 800749c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80074a0:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 80074a4:	e248      	b.n	8007938 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 80074a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80074aa:	2b5d      	cmp	r3, #93	@ 0x5d
 80074ac:	d13a      	bne.n	8007524 <mg_json_get+0x244>
 80074ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dd37      	ble.n	8007524 <mg_json_get+0x244>
          MG_EOO(']');
 80074b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d106      	bne.n	80074ca <mg_json_get+0x1ea>
 80074bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d002      	beq.n	80074ca <mg_json_get+0x1ea>
 80074c4:	f06f 0302 	mvn.w	r3, #2
 80074c8:	e240      	b.n	800794c <mg_json_get+0x66c>
 80074ca:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80074ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074d0:	3b01      	subs	r3, #1
 80074d2:	3368      	adds	r3, #104	@ 0x68
 80074d4:	443b      	add	r3, r7
 80074d6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80074da:	3302      	adds	r3, #2
 80074dc:	429a      	cmp	r2, r3
 80074de:	d002      	beq.n	80074e6 <mg_json_get+0x206>
 80074e0:	f06f 0301 	mvn.w	r3, #1
 80074e4:	e232      	b.n	800794c <mg_json_get+0x66c>
 80074e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074e8:	3b01      	subs	r3, #1
 80074ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f0:	429a      	cmp	r2, r3
 80074f2:	f040 809c 	bne.w	800762e <mg_json_get+0x34e>
 80074f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 8095 	bne.w	800762e <mg_json_get+0x34e>
 8007504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007508:	429a      	cmp	r2, r3
 800750a:	f040 8090 	bne.w	800762e <mg_json_get+0x34e>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <mg_json_get+0x240>
 8007514:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007522:	e213      	b.n	800794c <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8007524:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007528:	2b74      	cmp	r3, #116	@ 0x74
 800752a:	d113      	bne.n	8007554 <mg_json_get+0x274>
 800752c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800752e:	3303      	adds	r3, #3
 8007530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007532:	429a      	cmp	r2, r3
 8007534:	dd0e      	ble.n	8007554 <mg_json_get+0x274>
 8007536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753a:	4413      	add	r3, r2
 800753c:	2204      	movs	r2, #4
 800753e:	4998      	ldr	r1, [pc, #608]	@ (80077a0 <mg_json_get+0x4c0>)
 8007540:	4618      	mov	r0, r3
 8007542:	f01c f875 	bl	8023630 <memcmp>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <mg_json_get+0x274>
          i += 3;
 800754c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800754e:	3303      	adds	r3, #3
 8007550:	663b      	str	r3, [r7, #96]	@ 0x60
 8007552:	e06c      	b.n	800762e <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8007554:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007558:	2b6e      	cmp	r3, #110	@ 0x6e
 800755a:	d113      	bne.n	8007584 <mg_json_get+0x2a4>
 800755c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800755e:	3303      	adds	r3, #3
 8007560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007562:	429a      	cmp	r2, r3
 8007564:	dd0e      	ble.n	8007584 <mg_json_get+0x2a4>
 8007566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800756a:	4413      	add	r3, r2
 800756c:	2204      	movs	r2, #4
 800756e:	498d      	ldr	r1, [pc, #564]	@ (80077a4 <mg_json_get+0x4c4>)
 8007570:	4618      	mov	r0, r3
 8007572:	f01c f85d 	bl	8023630 <memcmp>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <mg_json_get+0x2a4>
          i += 3;
 800757c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800757e:	3303      	adds	r3, #3
 8007580:	663b      	str	r3, [r7, #96]	@ 0x60
 8007582:	e054      	b.n	800762e <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8007584:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007588:	2b66      	cmp	r3, #102	@ 0x66
 800758a:	d113      	bne.n	80075b4 <mg_json_get+0x2d4>
 800758c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800758e:	3304      	adds	r3, #4
 8007590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007592:	429a      	cmp	r2, r3
 8007594:	dd0e      	ble.n	80075b4 <mg_json_get+0x2d4>
 8007596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800759a:	4413      	add	r3, r2
 800759c:	2205      	movs	r2, #5
 800759e:	4982      	ldr	r1, [pc, #520]	@ (80077a8 <mg_json_get+0x4c8>)
 80075a0:	4618      	mov	r0, r3
 80075a2:	f01c f845 	bl	8023630 <memcmp>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <mg_json_get+0x2d4>
          i += 4;
 80075ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075ae:	3304      	adds	r3, #4
 80075b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80075b2:	e03c      	b.n	800762e <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80075b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80075b8:	2b2d      	cmp	r3, #45	@ 0x2d
 80075ba:	d007      	beq.n	80075cc <mg_json_get+0x2ec>
 80075bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80075c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80075c2:	d916      	bls.n	80075f2 <mg_json_get+0x312>
 80075c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80075c8:	2b39      	cmp	r3, #57	@ 0x39
 80075ca:	d812      	bhi.n	80075f2 <mg_json_get+0x312>
          int numlen = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 80075d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075d4:	18d0      	adds	r0, r2, r3
 80075d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	f107 0210 	add.w	r2, r7, #16
 80075e0:	4619      	mov	r1, r3
 80075e2:	f7ff fd2d 	bl	8007040 <mg_atod>
          i += numlen - 1;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075ec:	4413      	add	r3, r2
 80075ee:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80075f0:	e01d      	b.n	800762e <mg_json_get+0x34e>
        } else if (c == '"') {
 80075f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80075f6:	2b22      	cmp	r3, #34	@ 0x22
 80075f8:	d116      	bne.n	8007628 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80075fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075fc:	3301      	adds	r3, #1
 80075fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007600:	18d0      	adds	r0, r2, r3
 8007602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	4619      	mov	r1, r3
 800760c:	f7ff fcd4 	bl	8006fb8 <mg_pass_string>
 8007610:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 8007612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	da01      	bge.n	800761c <mg_json_get+0x33c>
 8007618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761a:	e197      	b.n	800794c <mg_json_get+0x66c>
          i += n + 1;
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	3301      	adds	r3, #1
 8007620:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007622:	4413      	add	r3, r2
 8007624:	663b      	str	r3, [r7, #96]	@ 0x60
 8007626:	e002      	b.n	800762e <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8007628:	f06f 0301 	mvn.w	r3, #1
 800762c:	e18e      	b.n	800794c <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800762e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007632:	429a      	cmp	r2, r3
 8007634:	d114      	bne.n	8007660 <mg_json_get+0x380>
 8007636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	4413      	add	r3, r2
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10e      	bne.n	8007660 <mg_json_get+0x380>
 8007642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007646:	429a      	cmp	r2, r3
 8007648:	d10a      	bne.n	8007660 <mg_json_get+0x380>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <mg_json_get+0x37c>
 8007650:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800765e:	e175      	b.n	800794c <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 8007660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007664:	429a      	cmp	r2, r3
 8007666:	d105      	bne.n	8007674 <mg_json_get+0x394>
 8007668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800766a:	2b00      	cmp	r3, #0
 800766c:	db02      	blt.n	8007674 <mg_json_get+0x394>
 800766e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007670:	3301      	adds	r3, #1
 8007672:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 8007674:	2303      	movs	r3, #3
 8007676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800767a:	e15d      	b.n	8007938 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800767c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007680:	2b22      	cmp	r3, #34	@ 0x22
 8007682:	d170      	bne.n	8007766 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8007684:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007686:	3301      	adds	r3, #1
 8007688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800768a:	18d0      	adds	r0, r2, r3
 800768c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800768e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	4619      	mov	r1, r3
 8007696:	f7ff fc8f 	bl	8006fb8 <mg_pass_string>
 800769a:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da01      	bge.n	80076a6 <mg_json_get+0x3c6>
 80076a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a4:	e152      	b.n	800794c <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80076a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ac:	4413      	add	r3, r2
 80076ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076b0:	429a      	cmp	r2, r3
 80076b2:	dc02      	bgt.n	80076ba <mg_json_get+0x3da>
 80076b4:	f06f 0302 	mvn.w	r3, #2
 80076b8:	e148      	b.n	800794c <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80076ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076be:	429a      	cmp	r2, r3
 80076c0:	da02      	bge.n	80076c8 <mg_json_get+0x3e8>
 80076c2:	f06f 0302 	mvn.w	r3, #2
 80076c6:	e141      	b.n	800794c <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80076c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d109      	bne.n	80076e4 <mg_json_get+0x404>
 80076d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d2:	3b01      	subs	r3, #1
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b2e      	cmp	r3, #46	@ 0x2e
 80076dc:	d002      	beq.n	80076e4 <mg_json_get+0x404>
 80076de:	f06f 0302 	mvn.w	r3, #2
 80076e2:	e133      	b.n	800794c <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 80076e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d133      	bne.n	8007754 <mg_json_get+0x474>
 80076ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ee:	3b01      	subs	r3, #1
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80076f8:	d12c      	bne.n	8007754 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80076fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076fc:	3301      	adds	r3, #1
 80076fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007700:	18d0      	adds	r0, r2, r3
 8007702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800770a:	4619      	mov	r1, r3
 800770c:	f01b ffcf 	bl	80236ae <strncmp>
 8007710:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8007712:	2b00      	cmp	r3, #0
 8007714:	d11e      	bne.n	8007754 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	4413      	add	r3, r2
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8007724:	2b00      	cmp	r3, #0
 8007726:	d011      	beq.n	800774c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007728:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800772a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772c:	4413      	add	r3, r2
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b2e      	cmp	r3, #46	@ 0x2e
 8007738:	d008      	beq.n	800774c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800773a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	4413      	add	r3, r2
 8007740:	461a      	mov	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007748:	2b5b      	cmp	r3, #91	@ 0x5b
 800774a:	d103      	bne.n	8007754 <mg_json_get+0x474>
            pos += n;
 800774c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	4413      	add	r3, r2
 8007752:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	3301      	adds	r3, #1
 8007758:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800775a:	4413      	add	r3, r2
 800775c:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800775e:	2302      	movs	r3, #2
 8007760:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007764:	e0e7      	b.n	8007936 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 8007766:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800776a:	2b7d      	cmp	r3, #125	@ 0x7d
 800776c:	d14a      	bne.n	8007804 <mg_json_get+0x524>
          MG_EOO('}');
 800776e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007772:	429a      	cmp	r2, r3
 8007774:	d106      	bne.n	8007784 <mg_json_get+0x4a4>
 8007776:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800777a:	429a      	cmp	r2, r3
 800777c:	d002      	beq.n	8007784 <mg_json_get+0x4a4>
 800777e:	f06f 0302 	mvn.w	r3, #2
 8007782:	e0e3      	b.n	800794c <mg_json_get+0x66c>
 8007784:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007788:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800778a:	3b01      	subs	r3, #1
 800778c:	3368      	adds	r3, #104	@ 0x68
 800778e:	443b      	add	r3, r7
 8007790:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007794:	3302      	adds	r3, #2
 8007796:	429a      	cmp	r2, r3
 8007798:	d008      	beq.n	80077ac <mg_json_get+0x4cc>
 800779a:	f06f 0301 	mvn.w	r3, #1
 800779e:	e0d5      	b.n	800794c <mg_json_get+0x66c>
 80077a0:	080280c0 	.word	0x080280c0
 80077a4:	080280c8 	.word	0x080280c8
 80077a8:	080280d0 	.word	0x080280d0
 80077ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077ae:	3b01      	subs	r3, #1
 80077b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d114      	bne.n	80077e4 <mg_json_get+0x504>
 80077ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4413      	add	r3, r2
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10e      	bne.n	80077e4 <mg_json_get+0x504>
 80077c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d10a      	bne.n	80077e4 <mg_json_get+0x504>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <mg_json_get+0x500>
 80077d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077e2:	e0b3      	b.n	800794c <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 80077e4:	2303      	movs	r3, #3
 80077e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 80077ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ee:	429a      	cmp	r2, r3
 80077f0:	f040 80a1 	bne.w	8007936 <mg_json_get+0x656>
 80077f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f2c0 809d 	blt.w	8007936 <mg_json_get+0x656>
 80077fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fe:	3301      	adds	r3, #1
 8007800:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 8007802:	e098      	b.n	8007936 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 8007804:	f06f 0301 	mvn.w	r3, #1
 8007808:	e0a0      	b.n	800794c <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800780a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800780e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007810:	d103      	bne.n	800781a <mg_json_get+0x53a>
          expecting = S_VALUE;
 8007812:	2300      	movs	r3, #0
 8007814:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007818:	e08e      	b.n	8007938 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800781a:	f06f 0301 	mvn.w	r3, #1
 800781e:	e095      	b.n	800794c <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8007820:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007822:	2b00      	cmp	r3, #0
 8007824:	dc02      	bgt.n	800782c <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 8007826:	f06f 0301 	mvn.w	r3, #1
 800782a:	e08f      	b.n	800794c <mg_json_get+0x66c>
        } else if (c == ',') {
 800782c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007830:	2b2c      	cmp	r3, #44	@ 0x2c
 8007832:	d10d      	bne.n	8007850 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8007834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007836:	3b01      	subs	r3, #1
 8007838:	3368      	adds	r3, #104	@ 0x68
 800783a:	443b      	add	r3, r7
 800783c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007840:	2b7b      	cmp	r3, #123	@ 0x7b
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800784e:	e073      	b.n	8007938 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 8007850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007854:	2b5d      	cmp	r3, #93	@ 0x5d
 8007856:	d003      	beq.n	8007860 <mg_json_get+0x580>
 8007858:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800785c:	2b7d      	cmp	r3, #125	@ 0x7d
 800785e:	d163      	bne.n	8007928 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8007860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007864:	429a      	cmp	r2, r3
 8007866:	d10d      	bne.n	8007884 <mg_json_get+0x5a4>
 8007868:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800786c:	2b7d      	cmp	r3, #125	@ 0x7d
 800786e:	d109      	bne.n	8007884 <mg_json_get+0x5a4>
 8007870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007872:	3b01      	subs	r3, #1
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b2e      	cmp	r3, #46	@ 0x2e
 800787c:	d102      	bne.n	8007884 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800787e:	f06f 0302 	mvn.w	r3, #2
 8007882:	e063      	b.n	800794c <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8007884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007888:	429a      	cmp	r2, r3
 800788a:	d10d      	bne.n	80078a8 <mg_json_get+0x5c8>
 800788c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007890:	2b5d      	cmp	r3, #93	@ 0x5d
 8007892:	d109      	bne.n	80078a8 <mg_json_get+0x5c8>
 8007894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007896:	3b01      	subs	r3, #1
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b2c      	cmp	r3, #44	@ 0x2c
 80078a0:	d102      	bne.n	80078a8 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 80078a2:	f06f 0302 	mvn.w	r3, #2
 80078a6:	e051      	b.n	800794c <mg_json_get+0x66c>
          MG_EOO('O');
 80078a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d106      	bne.n	80078be <mg_json_get+0x5de>
 80078b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d002      	beq.n	80078be <mg_json_get+0x5de>
 80078b8:	f06f 0302 	mvn.w	r3, #2
 80078bc:	e046      	b.n	800794c <mg_json_get+0x66c>
 80078be:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80078c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078c4:	3b01      	subs	r3, #1
 80078c6:	3368      	adds	r3, #104	@ 0x68
 80078c8:	443b      	add	r3, r7
 80078ca:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80078ce:	3302      	adds	r3, #2
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d002      	beq.n	80078da <mg_json_get+0x5fa>
 80078d4:	f06f 0301 	mvn.w	r3, #1
 80078d8:	e038      	b.n	800794c <mg_json_get+0x66c>
 80078da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078dc:	3b01      	subs	r3, #1
 80078de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d114      	bne.n	8007912 <mg_json_get+0x632>
 80078e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10e      	bne.n	8007912 <mg_json_get+0x632>
 80078f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d10a      	bne.n	8007912 <mg_json_get+0x632>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <mg_json_get+0x62e>
 8007902:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007910:	e01c      	b.n	800794c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8007912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007916:	429a      	cmp	r2, r3
 8007918:	d109      	bne.n	800792e <mg_json_get+0x64e>
 800791a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800791c:	2b00      	cmp	r3, #0
 800791e:	db06      	blt.n	800792e <mg_json_get+0x64e>
 8007920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007922:	3301      	adds	r3, #1
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007926:	e002      	b.n	800792e <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 8007928:	f06f 0301 	mvn.w	r3, #1
 800792c:	e00e      	b.n	800794c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800792e:	bf00      	nop
        break;
 8007930:	e002      	b.n	8007938 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8007932:	bf00      	nop
 8007934:	e000      	b.n	8007938 <mg_json_get+0x658>
        break;
 8007936:	bf00      	nop
  for (i = 0; i < len; i++) {
 8007938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800793a:	3301      	adds	r3, #1
 800793c:	663b      	str	r3, [r7, #96]	@ 0x60
 800793e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007942:	429a      	cmp	r2, r3
 8007944:	f6ff acfc 	blt.w	8007340 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8007948:	f06f 0302 	mvn.w	r3, #2
}
 800794c:	4618      	mov	r0, r3
 800794e:	376c      	adds	r7, #108	@ 0x6c
 8007950:	46bd      	mov	sp, r7
 8007952:	bd90      	pop	{r4, r7, pc}

08007954 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	1d38      	adds	r0, r7, #4
 800795e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007962:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	f107 0310 	add.w	r3, r7, #16
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	1d39      	adds	r1, r7, #4
 8007970:	c903      	ldmia	r1, {r0, r1}
 8007972:	f7ff fcb5 	bl	80072e0 <mg_json_get>
 8007976:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	db03      	blt.n	8007986 <mg_json_get_tok+0x32>
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	e000      	b.n	8007988 <mg_json_get_tok+0x34>
 8007986:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	4619      	mov	r1, r3
 8007992:	f007 f84a 	bl	800ea2a <mg_str_n>
}
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800799e:	b590      	push	{r4, r7, lr}
 80079a0:	b089      	sub	sp, #36	@ 0x24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	f107 0408 	add.w	r4, r7, #8
 80079a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80079b4:	f107 0314 	add.w	r3, r7, #20
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	f107 0108 	add.w	r1, r7, #8
 80079be:	c903      	ldmia	r1, {r0, r1}
 80079c0:	f7ff fc8e 	bl	80072e0 <mg_json_get>
 80079c4:	61b8      	str	r0, [r7, #24]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	db23      	blt.n	8007a14 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	4413      	add	r3, r2
 80079d2:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80079d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80079d6:	d00b      	beq.n	80079f0 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	4413      	add	r3, r2
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80079e2:	d917      	bls.n	8007a14 <mg_json_get_num+0x76>
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	4413      	add	r3, r2
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b39      	cmp	r3, #57	@ 0x39
 80079ee:	d811      	bhi.n	8007a14 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <mg_json_get_num+0x72>
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	4413      	add	r3, r2
 80079fc:	6979      	ldr	r1, [r7, #20]
 80079fe:	2200      	movs	r2, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fb1d 	bl	8007040 <mg_atod>
 8007a06:	eeb0 7b40 	vmov.f64	d7, d0
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8007a10:	2301      	movs	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf14      	ite	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	2300      	moveq	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3724      	adds	r7, #36	@ 0x24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd90      	pop	{r4, r7, pc}

08007a28 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8007a28:	b590      	push	{r4, r7, lr}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	f107 0408 	add.w	r4, r7, #8
 8007a32:	e884 0003 	stmia.w	r4, {r0, r1}
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	f107 0108 	add.w	r1, r7, #8
 8007a46:	c903      	ldmia	r1, {r0, r1}
 8007a48:	f7ff fc4a 	bl	80072e0 <mg_json_get>
 8007a4c:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	db1b      	blt.n	8007a8c <mg_json_get_bool+0x64>
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	4413      	add	r3, r2
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b74      	cmp	r3, #116	@ 0x74
 8007a5e:	d005      	beq.n	8007a6c <mg_json_get_bool+0x44>
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4413      	add	r3, r2
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b66      	cmp	r3, #102	@ 0x66
 8007a6a:	d10f      	bne.n	8007a8c <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <mg_json_get_bool+0x60>
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	4413      	add	r3, r2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b74      	cmp	r3, #116	@ 0x74
 8007a7c:	bf0c      	ite	eq
 8007a7e:	2301      	moveq	r3, #1
 8007a80:	2300      	movne	r3, #0
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	701a      	strb	r2, [r3, #0]
    found = 1;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	617b      	str	r3, [r7, #20]
  }
  return found;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd90      	pop	{r4, r7, pc}

08007aa0 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b08d      	sub	sp, #52	@ 0x34
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	f107 0408 	add.w	r4, r7, #8
 8007aaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	623b      	str	r3, [r7, #32]
 8007aba:	e064      	b.n	8007b86 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	4413      	add	r3, r2
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b5c      	cmp	r3, #92	@ 0x5c
 8007ac6:	d12c      	bne.n	8007b22 <mg_json_unescape+0x82>
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	1d5a      	adds	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d227      	bcs.n	8007b22 <mg_json_unescape+0x82>
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	4413      	add	r3, r2
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b75      	cmp	r3, #117	@ 0x75
 8007ade:	d120      	bne.n	8007b22 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	18d1      	adds	r1, r2, r3
 8007ae8:	f107 0314 	add.w	r3, r7, #20
 8007aec:	2204      	movs	r2, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f006 ff9b 	bl	800ea2a <mg_str_n>
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	4413      	add	r3, r2
 8007afa:	2201      	movs	r2, #1
 8007afc:	9200      	str	r2, [sp, #0]
 8007afe:	2210      	movs	r2, #16
 8007b00:	f107 0114 	add.w	r1, r7, #20
 8007b04:	c903      	ldmia	r1, {r0, r1}
 8007b06:	f007 f9ce 	bl	800eea6 <mg_str_to_num>
 8007b0a:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 8007b0c:	f083 0301 	eor.w	r3, r3, #1
 8007b10:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <mg_json_unescape+0x7a>
        return false;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e04c      	b.n	8007bb4 <mg_json_unescape+0x114>
      i += 5;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	3305      	adds	r3, #5
 8007b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b20:	e02b      	b.n	8007b7a <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	4413      	add	r3, r2
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b2c:	d11d      	bne.n	8007b6a <mg_json_unescape+0xca>
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d218      	bcs.n	8007b6a <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	4413      	add	r3, r2
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2100      	movs	r1, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff fa07 	bl	8006f58 <json_esc>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 8007b4e:	7ffb      	ldrb	r3, [r7, #31]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <mg_json_unescape+0xb8>
 8007b54:	2300      	movs	r3, #0
 8007b56:	e02d      	b.n	8007bb4 <mg_json_unescape+0x114>
      to[j] = c;
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	7ffa      	ldrb	r2, [r7, #31]
 8007b60:	701a      	strb	r2, [r3, #0]
      i++;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	3301      	adds	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8007b68:	e007      	b.n	8007b7a <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	441a      	add	r2, r3
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	440b      	add	r3, r1
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	3301      	adds	r3, #1
 8007b84:	623b      	str	r3, [r7, #32]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d203      	bcs.n	8007b96 <mg_json_unescape+0xf6>
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d392      	bcc.n	8007abc <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d301      	bcc.n	8007ba2 <mg_json_unescape+0x102>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e008      	b.n	8007bb4 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <mg_json_unescape+0x112>
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	4413      	add	r3, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	701a      	strb	r2, [r3, #0]
  return true;
 8007bb2:	2301      	movs	r3, #1
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	372c      	adds	r7, #44	@ 0x2c
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd90      	pop	{r4, r7, pc}

08007bbc <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8007bbc:	b590      	push	{r4, r7, lr}
 8007bbe:	b089      	sub	sp, #36	@ 0x24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	f107 0408 	add.w	r4, r7, #8
 8007bc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	f107 0108 	add.w	r1, r7, #8
 8007bdc:	c903      	ldmia	r1, {r0, r1}
 8007bde:	f7ff fede 	bl	800799e <mg_json_get_num>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d006      	beq.n	8007bf6 <mg_json_get_long+0x3a>
 8007be8:	ed97 7b04 	vldr	d7, [r7, #16]
 8007bec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007bf0:	ee17 3a90 	vmov	r3, s15
 8007bf4:	61fb      	str	r3, [r7, #28]
  return result;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3724      	adds	r7, #36	@ 0x24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8007c0a:	4b05      	ldr	r3, [pc, #20]	@ (8007c20 <logc+0x20>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a05      	ldr	r2, [pc, #20]	@ (8007c24 <logc+0x24>)
 8007c10:	6811      	ldr	r1, [r2, #0]
 8007c12:	79fa      	ldrb	r2, [r7, #7]
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	24000244 	.word	0x24000244
 8007c24:	24000cf4 	.word	0x24000cf4

08007c28 <logs>:

static void logs(const char *buf, size_t len) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	e009      	b.n	8007c4c <logs+0x24>
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff ffdd 	bl	8007c00 <logc>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3f1      	bcc.n	8007c38 <logs+0x10>
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8007c60:	b590      	push	{r4, r7, lr}
 8007c62:	b099      	sub	sp, #100	@ 0x64
 8007c64:	af06      	add	r7, sp, #24
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 8007c6e:	212f      	movs	r1, #47	@ 0x2f
 8007c70:	68b8      	ldr	r0, [r7, #8]
 8007c72:	f01b fd41 	bl	80236f8 <strrchr>
 8007c76:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 8007c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <mg_log_prefix+0x28>
 8007c7e:	215c      	movs	r1, #92	@ 0x5c
 8007c80:	68b8      	ldr	r0, [r7, #8]
 8007c82:	f01b fd39 	bl	80236f8 <strrchr>
 8007c86:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8007c88:	f7f9 f812 	bl	8000cb0 <mg_millis>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c92:	2900      	cmp	r1, #0
 8007c94:	d002      	beq.n	8007c9c <mg_log_prefix+0x3c>
 8007c96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c98:	3101      	adds	r1, #1
 8007c9a:	e000      	b.n	8007c9e <mg_log_prefix+0x3e>
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	f107 0414 	add.w	r4, r7, #20
 8007ca2:	6838      	ldr	r0, [r7, #0]
 8007ca4:	9005      	str	r0, [sp, #20]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	9004      	str	r0, [sp, #16]
 8007caa:	9103      	str	r1, [sp, #12]
 8007cac:	68f9      	ldr	r1, [r7, #12]
 8007cae:	9102      	str	r1, [sp, #8]
 8007cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8007cb4:	4a11      	ldr	r2, [pc, #68]	@ (8007cfc <mg_log_prefix+0x9c>)
 8007cb6:	2129      	movs	r1, #41	@ 0x29
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f005 fb87 	bl	800d3cc <mg_snprintf>
 8007cbe:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8007cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc2:	2b27      	cmp	r3, #39	@ 0x27
 8007cc4:	d90a      	bls.n	8007cdc <mg_log_prefix+0x7c>
 8007cc6:	2327      	movs	r3, #39	@ 0x27
 8007cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 8007cca:	e007      	b.n	8007cdc <mg_log_prefix+0x7c>
 8007ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cd2:	3348      	adds	r3, #72	@ 0x48
 8007cd4:	443b      	add	r3, r7
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f803 2c34 	strb.w	r2, [r3, #-52]
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cde:	2b28      	cmp	r3, #40	@ 0x28
 8007ce0:	d9f4      	bls.n	8007ccc <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	f107 0314 	add.w	r3, r7, #20
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff ff9b 	bl	8007c28 <logs>
}
 8007cf2:	bf00      	nop
 8007cf4:	374c      	adds	r7, #76	@ 0x4c
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	080280d8 	.word	0x080280d8

08007d00 <mg_log>:

void mg_log(const char *fmt, ...) {
 8007d00:	b40f      	push	{r0, r1, r2, r3}
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8007d08:	f107 0314 	add.w	r3, r7, #20
 8007d0c:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <mg_log+0x34>)
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <mg_log+0x38>)
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	1d3b      	adds	r3, r7, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	f7fb f965 	bl	8002fe8 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8007d1e:	2102      	movs	r1, #2
 8007d20:	4806      	ldr	r0, [pc, #24]	@ (8007d3c <mg_log+0x3c>)
 8007d22:	f7ff ff81 	bl	8007c28 <logs>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d30:	b004      	add	sp, #16
 8007d32:	4770      	bx	lr
 8007d34:	24000244 	.word	0x24000244
 8007d38:	24000cf4 	.word	0x24000cf4
 8007d3c:	0802755c 	.word	0x0802755c

08007d40 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	d804      	bhi.n	8007d58 <nibble+0x18>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	3330      	adds	r3, #48	@ 0x30
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	e003      	b.n	8007d60 <nibble+0x20>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	3357      	adds	r3, #87	@ 0x57
 8007d5e:	b2db      	uxtb	r3, r3
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	@ 0x28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8007d80:	2300      	movs	r3, #0
 8007d82:	623b      	str	r3, [r7, #32]
 8007d84:	e07a      	b.n	8007e7c <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d13a      	bne.n	8007e06 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00f      	beq.n	8007db6 <mg_hexdump+0x4a>
 8007d96:	2102      	movs	r1, #2
 8007d98:	484c      	ldr	r0, [pc, #304]	@ (8007ecc <mg_hexdump+0x160>)
 8007d9a:	f7ff ff45 	bl	8007c28 <logs>
 8007d9e:	f107 030c 	add.w	r3, r7, #12
 8007da2:	2110      	movs	r1, #16
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff ff3f 	bl	8007c28 <logs>
 8007daa:	200a      	movs	r0, #10
 8007dac:	f7ff ff28 	bl	8007c00 <logc>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	0b1b      	lsrs	r3, r3, #12
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff ffbe 	bl	8007d40 <nibble>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff ff1a 	bl	8007c00 <logc>
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	0a1b      	lsrs	r3, r3, #8
 8007dd0:	f003 030f 	and.w	r3, r3, #15
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff ffb3 	bl	8007d40 <nibble>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff ff0f 	bl	8007c00 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff ffa8 	bl	8007d40 <nibble>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff ff04 	bl	8007c00 <logc>
 8007df8:	2030      	movs	r0, #48	@ 0x30
 8007dfa:	f7ff ff01 	bl	8007c00 <logc>
 8007dfe:	2103      	movs	r1, #3
 8007e00:	4833      	ldr	r0, [pc, #204]	@ (8007ed0 <mg_hexdump+0x164>)
 8007e02:	f7ff ff11 	bl	8007c28 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	091b      	lsrs	r3, r3, #4
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ff94 	bl	8007d40 <nibble>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fef0 	bl	8007c00 <logc>
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	4413      	add	r3, r2
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff ff87 	bl	8007d40 <nibble>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fee3 	bl	8007c00 <logc>
    logc(' ');                                         // Space after hex number
 8007e3a:	2020      	movs	r0, #32
 8007e3c:	f7ff fee0 	bl	8007c00 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	4413      	add	r3, r2
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b1f      	cmp	r3, #31
 8007e4a:	d90a      	bls.n	8007e62 <mg_hexdump+0xf6>
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	4413      	add	r3, r2
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b7e      	cmp	r3, #126	@ 0x7e
 8007e56:	d804      	bhi.n	8007e62 <mg_hexdump+0xf6>
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	e000      	b.n	8007e64 <mg_hexdump+0xf8>
 8007e62:	222e      	movs	r2, #46	@ 0x2e
 8007e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e68:	1c59      	adds	r1, r3, #1
 8007e6a:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8007e6e:	3328      	adds	r3, #40	@ 0x28
 8007e70:	443b      	add	r3, r7
 8007e72:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	6a3a      	ldr	r2, [r7, #32]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d380      	bcc.n	8007d86 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8007e84:	e00d      	b.n	8007ea2 <mg_hexdump+0x136>
 8007e86:	2103      	movs	r1, #3
 8007e88:	4811      	ldr	r0, [pc, #68]	@ (8007ed0 <mg_hexdump+0x164>)
 8007e8a:	f7ff fecd 	bl	8007c28 <logs>
 8007e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8007e98:	3328      	adds	r3, #40	@ 0x28
 8007e9a:	443b      	add	r3, r7
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8007ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d9ed      	bls.n	8007e86 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8007eaa:	2102      	movs	r1, #2
 8007eac:	4807      	ldr	r0, [pc, #28]	@ (8007ecc <mg_hexdump+0x160>)
 8007eae:	f7ff febb 	bl	8007c28 <logs>
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	2110      	movs	r1, #16
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff feb5 	bl	8007c28 <logs>
 8007ebe:	200a      	movs	r0, #10
 8007ec0:	f7ff fe9e 	bl	8007c00 <logc>
}
 8007ec4:	bf00      	nop
 8007ec6:	3728      	adds	r7, #40	@ 0x28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	080280ec 	.word	0x080280ec
 8007ed0:	080280f0 	.word	0x080280f0

08007ed4 <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	72fb      	strb	r3, [r7, #11]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8007ee6:	f107 0314 	add.w	r3, r7, #20
 8007eea:	3301      	adds	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	b25a      	sxtb	r2, r3
 8007ef4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	09db      	lsrs	r3, r3, #7
 8007f12:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d006      	beq.n	8007f28 <mg_mqtt_send_header+0x54>
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	701a      	strb	r2, [r3, #0]
    vlen++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <mg_mqtt_send_header+0x6c>
 8007f34:	f107 0314 	add.w	r3, r7, #20
 8007f38:	3305      	adds	r3, #5
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d3df      	bcc.n	8007f00 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8007f40:	f107 0314 	add.w	r3, r7, #20
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f107 0314 	add.w	r3, r7, #20
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f004 ff0f 	bl	800cd74 <mg_send>
}
 8007f56:	bf00      	nop
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 8007f6a:	1cbb      	adds	r3, r7, #2
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f004 feff 	bl	800cd74 <mg_send>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 8007f88:	463b      	mov	r3, r7
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f004 fef0 	bl	800cd74 <mg_send>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <varint_size>:

static uint8_t varint_size(size_t length) {
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	3301      	adds	r3, #1
 8007fac:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	09db      	lsrs	r3, r3, #7
 8007fb2:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f6      	bne.n	8007fa8 <varint_size+0xc>
  return bytes_needed;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fde:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	09db      	lsrs	r3, r3, #7
 8007fe4:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <encode_varint+0x2c>
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ff2:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	60fa      	str	r2, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	7afa      	ldrb	r2, [r7, #11]
 8008000:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <encode_varint+0xe>

  return len;
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8008016:	b480      	push	{r7}
 8008018:	b089      	sub	sp, #36	@ 0x24
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 8008022:	2301      	movs	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
  *value = 0;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e01c      	b.n	800806c <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	4413      	add	r3, r2
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008046:	69f9      	ldr	r1, [r7, #28]
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	441a      	add	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	01db      	lsls	r3, r3, #7
 8008056:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8008058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	db02      	blt.n	8008066 <decode_varint+0x50>
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	3301      	adds	r3, #1
 8008064:	e00a      	b.n	800807c <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	3301      	adds	r3, #1
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b03      	cmp	r3, #3
 8008070:	d803      	bhi.n	800807a <decode_varint+0x64>
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3db      	bcc.n	8008032 <decode_varint+0x1c>
  }

  return 0;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3724      	adds	r7, #36	@ 0x24
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 8008092:	231b      	movs	r3, #27
 8008094:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	e00f      	b.n	80080bc <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 800809c:	4a0d      	ldr	r2, [pc, #52]	@ (80080d4 <mqtt_prop_type_by_id+0x4c>)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80080a4:	79fa      	ldrb	r2, [r7, #7]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d105      	bne.n	80080b6 <mqtt_prop_type_by_id+0x2e>
 80080aa:	4a0a      	ldr	r2, [pc, #40]	@ (80080d4 <mqtt_prop_type_by_id+0x4c>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	4413      	add	r3, r2
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	e008      	b.n	80080c8 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d3eb      	bcc.n	800809c <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	0802a444 	.word	0x0802a444

080080d8 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e07a      	b.n	80081e2 <get_properties_length+0x10a>
    size++;  // identifier
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3301      	adds	r3, #1
 80080f0:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4613      	mov	r3, r2
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	4413      	add	r3, r2
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff ffbf 	bl	8008088 <mqtt_prop_type_by_id>
 800810a:	4603      	mov	r3, r0
 800810c:	2b06      	cmp	r3, #6
 800810e:	d863      	bhi.n	80081d8 <get_properties_length+0x100>
 8008110:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <get_properties_length+0x40>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	080081d1 	.word	0x080081d1
 800811c:	08008165 	.word	0x08008165
 8008120:	08008135 	.word	0x08008135
 8008124:	08008181 	.word	0x08008181
 8008128:	0800819d 	.word	0x0800819d
 800812c:	080081c1 	.word	0x080081c1
 8008130:	080081c9 	.word	0x080081c9
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4613      	mov	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	4413      	add	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4413      	add	r3, r2
 8008144:	6959      	ldr	r1, [r3, #20]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4613      	mov	r3, r2
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	18ca      	adds	r2, r1, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	3304      	adds	r3, #4
 8008160:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 8008162:	e03b      	b.n	80081dc <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	461a      	mov	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	3302      	adds	r3, #2
 800817c:	60bb      	str	r3, [r7, #8]
        break;
 800817e:	e02d      	b.n	80081dc <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4613      	mov	r3, r2
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	3302      	adds	r3, #2
 8008198:	60bb      	str	r3, [r7, #8]
        break;
 800819a:	e01f      	b.n	80081dc <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	461a      	mov	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4413      	add	r3, r2
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff fef4 	bl	8007f9c <varint_size>
 80081b4:	4603      	mov	r3, r0
 80081b6:	461a      	mov	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4413      	add	r3, r2
 80081bc:	60bb      	str	r3, [r7, #8]
        break;
 80081be:	e00d      	b.n	80081dc <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	3304      	adds	r3, #4
 80081c4:	60bb      	str	r3, [r7, #8]
        break;
 80081c6:	e009      	b.n	80081dc <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3302      	adds	r3, #2
 80081cc:	60bb      	str	r3, [r7, #8]
        break;
 80081ce:	e005      	b.n	80081dc <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3301      	adds	r3, #1
 80081d4:	60bb      	str	r3, [r7, #8]
        break;
 80081d6:	e001      	b.n	80081dc <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	e007      	b.n	80081ec <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d380      	bcc.n	80080ec <get_properties_length+0x14>
    }
  }

  return size;
 80081ea:	68bb      	ldr	r3, [r7, #8]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff69 	bl	80080d8 <get_properties_length>
 8008206:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff fec7 	bl	8007f9c <varint_size>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  return size;
 8008218:	68fb      	ldr	r3, [r7, #12]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	@ 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	68b8      	ldr	r0, [r7, #8]
 8008234:	f7ff ff50 	bl	80080d8 <get_properties_length>
 8008238:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 8008242:	f107 0314 	add.w	r3, r7, #20
 8008246:	6a39      	ldr	r1, [r7, #32]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff febd 	bl	8007fc8 <encode_varint>
 800824e:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	4619      	mov	r1, r3
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f004 fd8b 	bl	800cd74 <mg_send>
  for (i = 0; i < nprops; i++) {
 800825e:	2300      	movs	r3, #0
 8008260:	627b      	str	r3, [r7, #36]	@ 0x24
 8008262:	e11f      	b.n	80084a4 <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8008264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008266:	4613      	mov	r3, r2
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	4413      	add	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	461a      	mov	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4413      	add	r3, r2
 8008274:	2201      	movs	r2, #1
 8008276:	4619      	mov	r1, r3
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f004 fd7b 	bl	800cd74 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 800827e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008280:	4613      	mov	r3, r2
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	4413      	add	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	461a      	mov	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fef9 	bl	8008088 <mqtt_prop_type_by_id>
 8008296:	4603      	mov	r3, r0
 8008298:	2b06      	cmp	r3, #6
 800829a:	f200 8100 	bhi.w	800849e <mg_send_mqtt_properties+0x27a>
 800829e:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <mg_send_mqtt_properties+0x80>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	08008363 	.word	0x08008363
 80082a8:	080083cb 	.word	0x080083cb
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	0800841d 	.word	0x0800841d
 80082b4:	0800846f 	.word	0x0800846f
 80082b8:	080083a7 	.word	0x080083a7
 80082bc:	08008381 	.word	0x08008381
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 80082c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c2:	4613      	mov	r3, r2
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4413      	add	r3, r2
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	461a      	mov	r2, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	4413      	add	r3, r2
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f00f fa46 	bl	8017766 <mg_ntohs>
 80082da:	4603      	mov	r3, r0
 80082dc:	4619      	mov	r1, r3
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff fe3d 	bl	8007f5e <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80082e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e6:	4613      	mov	r3, r2
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4413      	add	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	461a      	mov	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4413      	add	r3, r2
 80082f4:	6899      	ldr	r1, [r3, #8]
 80082f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f8:	4613      	mov	r3, r2
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4413      	add	r3, r2
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	461a      	mov	r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	4413      	add	r3, r2
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	461a      	mov	r2, r3
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f004 fd32 	bl	800cd74 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8008310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008312:	4613      	mov	r3, r2
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	4413      	add	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	461a      	mov	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4413      	add	r3, r2
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	b29b      	uxth	r3, r3
 8008324:	4618      	mov	r0, r3
 8008326:	f00f fa1e 	bl	8017766 <mg_ntohs>
 800832a:	4603      	mov	r3, r0
 800832c:	4619      	mov	r1, r3
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fe15 	bl	8007f5e <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8008334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008336:	4613      	mov	r3, r2
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	4413      	add	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	461a      	mov	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4413      	add	r3, r2
 8008344:	6919      	ldr	r1, [r3, #16]
 8008346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008348:	4613      	mov	r3, r2
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	4413      	add	r3, r2
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	461a      	mov	r2, r3
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4413      	add	r3, r2
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	461a      	mov	r2, r3
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f004 fd0a 	bl	800cd74 <mg_send>
        break;
 8008360:	e09d      	b.n	800849e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8008362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008364:	4613      	mov	r3, r2
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	4413      	add	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	461a      	mov	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	2201      	movs	r2, #1
 8008376:	4619      	mov	r1, r3
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f004 fcfb 	bl	800cd74 <mg_send>
        break;
 800837e:	e08e      	b.n	800849e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8008380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008382:	4613      	mov	r3, r2
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4413      	add	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	461a      	mov	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4413      	add	r3, r2
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	b29b      	uxth	r3, r3
 8008394:	4618      	mov	r0, r3
 8008396:	f00f f9e6 	bl	8017766 <mg_ntohs>
 800839a:	4603      	mov	r3, r0
 800839c:	4619      	mov	r1, r3
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff fddd 	bl	8007f5e <mg_send_u16>
        break;
 80083a4:	e07b      	b.n	800849e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 80083a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a8:	4613      	mov	r3, r2
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	4413      	add	r3, r2
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	461a      	mov	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4413      	add	r3, r2
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f00f f9bb 	bl	8017734 <mg_ntohl>
 80083be:	4603      	mov	r3, r0
 80083c0:	4619      	mov	r1, r3
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff fddb 	bl	8007f7e <mg_send_u32>
        break;
 80083c8:	e069      	b.n	800849e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80083ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	461a      	mov	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4413      	add	r3, r2
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4618      	mov	r0, r3
 80083e0:	f00f f9c1 	bl	8017766 <mg_ntohs>
 80083e4:	4603      	mov	r3, r0
 80083e6:	4619      	mov	r1, r3
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff fdb8 	bl	8007f5e <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80083ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f0:	4613      	mov	r3, r2
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	4413      	add	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4413      	add	r3, r2
 80083fe:	6919      	ldr	r1, [r3, #16]
 8008400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008402:	4613      	mov	r3, r2
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	4413      	add	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	461a      	mov	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4413      	add	r3, r2
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	461a      	mov	r2, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f004 fcad 	bl	800cd74 <mg_send>
        break;
 800841a:	e040      	b.n	800849e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 800841c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841e:	4613      	mov	r3, r2
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	4413      	add	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	461a      	mov	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4413      	add	r3, r2
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	b29b      	uxth	r3, r3
 8008430:	4618      	mov	r0, r3
 8008432:	f00f f998 	bl	8017766 <mg_ntohs>
 8008436:	4603      	mov	r3, r0
 8008438:	4619      	mov	r1, r3
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fd8f 	bl	8007f5e <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8008440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008442:	4613      	mov	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	461a      	mov	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4413      	add	r3, r2
 8008450:	6919      	ldr	r1, [r3, #16]
 8008452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	461a      	mov	r2, r3
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f004 fc84 	bl	800cd74 <mg_send>
        break;
 800846c:	e017      	b.n	800849e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 800846e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008470:	4613      	mov	r3, r2
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	4413      	add	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	461a      	mov	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	f107 0318 	add.w	r3, r7, #24
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fd9e 	bl	8007fc8 <encode_varint>
 800848c:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 800848e:	f107 0318 	add.w	r3, r7, #24
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	4619      	mov	r1, r3
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f004 fc6c 	bl	800cd74 <mg_send>
        break;
 800849c:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	3301      	adds	r3, #1
 80084a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	f4ff aedb 	bcc.w	8008264 <mg_send_mqtt_properties+0x40>
    }
  }
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	3728      	adds	r7, #40	@ 0x28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	@ 0x38
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	f107 0314 	add.w	r3, r7, #20
 80084c8:	3210      	adds	r2, #16
 80084ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ce:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 80084d2:	230c      	movs	r3, #12
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80084d6:	2300      	movs	r3, #0
 80084d8:	733b      	strb	r3, [r7, #12]
 80084da:	2304      	movs	r3, #4
 80084dc:	737b      	strb	r3, [r7, #13]
 80084de:	234d      	movs	r3, #77	@ 0x4d
 80084e0:	73bb      	strb	r3, [r7, #14]
 80084e2:	2351      	movs	r3, #81	@ 0x51
 80084e4:	73fb      	strb	r3, [r7, #15]
 80084e6:	2354      	movs	r3, #84	@ 0x54
 80084e8:	743b      	strb	r3, [r7, #16]
 80084ea:	2354      	movs	r3, #84	@ 0x54
 80084ec:	747b      	strb	r3, [r7, #17]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80084f4:	74bb      	strb	r3, [r7, #18]
 80084f6:	2300      	movs	r3, #0
 80084f8:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d110      	bne.n	8008522 <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 8008500:	f107 031c 	add.w	r3, r7, #28
 8008504:	2114      	movs	r1, #20
 8008506:	4618      	mov	r0, r3
 8008508:	f00f f8ce 	bl	80176a8 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 800850c:	2300      	movs	r3, #0
 800850e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 8008512:	f107 0314 	add.w	r3, r7, #20
 8008516:	f107 021c 	add.w	r2, r7, #28
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f006 fa67 	bl	800e9f0 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8008522:	7cbb      	ldrb	r3, [r7, #18]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <mg_mqtt_login+0x74>
 8008528:	2304      	movs	r3, #4
 800852a:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 800852c:	7cbb      	ldrb	r3, [r7, #18]
 800852e:	2b05      	cmp	r3, #5
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2d9      	uxtb	r1, r3
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800853e:	f361 0382 	bfi	r3, r1, #2, #1
 8008542:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 0318 	and.w	r3, r3, #24
 8008554:	b2db      	uxtb	r3, r3
 8008556:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008566:	4413      	add	r3, r2
 8008568:	3302      	adds	r3, #2
 800856a:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 800856c:	7cfb      	ldrb	r3, [r7, #19]
 800856e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008572:	b2db      	uxtb	r3, r3
 8008574:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008584:	4413      	add	r3, r2
 8008586:	3302      	adds	r3, #2
 8008588:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 800858a:	7cfb      	ldrb	r3, [r7, #19]
 800858c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008590:	b2db      	uxtb	r3, r3
 8008592:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00d      	beq.n	80085b8 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a4:	441a      	add	r2, r3
 80085a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a8:	4413      	add	r3, r2
 80085aa:	3304      	adds	r3, #4
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 80085ae:	7cfb      	ldrb	r3, [r7, #19]
 80085b0:	f043 0304 	orr.w	r3, r3, #4
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <mg_mqtt_login+0x110>
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <mg_mqtt_login+0x11a>
 80085c8:	7cfb      	ldrb	r3, [r7, #19]
 80085ca:	f043 0302 	orr.w	r3, r3, #2
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <mg_mqtt_login+0x12e>
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	f043 0320 	orr.w	r3, r3, #32
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085ea:	4413      	add	r3, r2
 80085ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01c      	beq.n	8008638 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7ff fdf3 	bl	80081f4 <get_props_size>
 800860e:	4602      	mov	r2, r0
 8008610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008612:	4413      	add	r3, r2
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 8008616:	7cfb      	ldrb	r3, [r7, #19]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	f7ff fde2 	bl	80081f4 <get_props_size>
 8008630:	4602      	mov	r2, r0
 8008632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008634:	4413      	add	r3, r2
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8008638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863a:	2200      	movs	r2, #0
 800863c:	2101      	movs	r1, #1
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fc48 	bl	8007ed4 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8008644:	f107 030c 	add.w	r3, r7, #12
 8008648:	2208      	movs	r2, #8
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f004 fb91 	bl	800cd74 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008656:	4618      	mov	r0, r3
 8008658:	f00f f885 	bl	8017766 <mg_ntohs>
 800865c:	4603      	mov	r3, r0
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff fc7c 	bl	8007f5e <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <mg_mqtt_login+0x1ce>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867e:	461a      	mov	r2, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff fdcf 	bl	8008224 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	b29b      	uxth	r3, r3
 800868a:	4618      	mov	r0, r3
 800868c:	f00f f86b 	bl	8017766 <mg_ntohs>
 8008690:	4603      	mov	r3, r0
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fc62 	bl	8007f5e <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f004 fb67 	bl	800cd74 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 80086a6:	7cfb      	ldrb	r3, [r7, #19]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d035      	beq.n	800871c <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80086b6:	f003 0304 	and.w	r3, r3, #4
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c8:	461a      	mov	r2, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fdaa 	bl	8008224 <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4618      	mov	r0, r3
 80086d8:	f00f f845 	bl	8017766 <mg_ntohs>
 80086dc:	4603      	mov	r3, r0
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff fc3c 	bl	8007f5e <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6999      	ldr	r1, [r3, #24]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f004 fb3f 	bl	800cd74 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00f f832 	bl	8017766 <mg_ntohs>
 8008702:	4603      	mov	r3, r0
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fc29 	bl	8007f5e <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	6a19      	ldr	r1, [r3, #32]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	461a      	mov	r2, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f004 fb2c 	bl	800cd74 <mg_send>
  }
  if (opts->user.len > 0) {
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d012      	beq.n	800874a <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	b29b      	uxth	r3, r3
 800872a:	4618      	mov	r0, r3
 800872c:	f00f f81b 	bl	8017766 <mg_ntohs>
 8008730:	4603      	mov	r3, r0
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff fc12 	bl	8007f5e <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6819      	ldr	r1, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	461a      	mov	r2, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f004 fb15 	bl	800cd74 <mg_send>
  }
  if (opts->pass.len > 0) {
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d012      	beq.n	8008778 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	b29b      	uxth	r3, r3
 8008758:	4618      	mov	r0, r3
 800875a:	f00f f804 	bl	8017766 <mg_ntohs>
 800875e:	4603      	mov	r3, r0
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fbfb 	bl	8007f5e <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	6899      	ldr	r1, [r3, #8]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	461a      	mov	r2, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f004 fafe 	bl	800cd74 <mg_send>
  }
}
 8008778:	bf00      	nop
 800877a:	3738      	adds	r7, #56	@ 0x38
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008780:	b590      	push	{r4, r7, lr}
 8008782:	b087      	sub	sp, #28
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800878e:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	b25b      	sxtb	r3, r3
 800879a:	f003 0306 	and.w	r3, r3, #6
 800879e:	b25b      	sxtb	r3, r3
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	d001      	beq.n	80087ae <mg_mqtt_pub+0x2e>
 80087aa:	2201      	movs	r2, #1
 80087ac:	e000      	b.n	80087b0 <mg_mqtt_pub+0x30>
 80087ae:	2200      	movs	r2, #0
 80087b0:	4313      	orrs	r3, r2
 80087b2:	b25b      	sxtb	r3, r3
 80087b4:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	69da      	ldr	r2, [r3, #28]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	4413      	add	r3, r2
 80087c0:	3302      	adds	r3, #2
 80087c2:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 80087c4:	4b51      	ldr	r3, [pc, #324]	@ (800890c <mg_mqtt_pub+0x18c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	dd19      	ble.n	8008800 <mg_mqtt_pub+0x80>
 80087cc:	4b50      	ldr	r3, [pc, #320]	@ (8008910 <mg_mqtt_pub+0x190>)
 80087ce:	f241 12f9 	movw	r2, #4601	@ 0x11f9
 80087d2:	4950      	ldr	r1, [pc, #320]	@ (8008914 <mg_mqtt_pub+0x194>)
 80087d4:	2003      	movs	r0, #3
 80087d6:	f7ff fa43 	bl	8007c60 <mg_log_prefix>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	461c      	mov	r4, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	4618      	mov	r0, r3
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	9000      	str	r0, [sp, #0]
 80087f6:	4613      	mov	r3, r2
 80087f8:	4622      	mov	r2, r4
 80087fa:	4847      	ldr	r0, [pc, #284]	@ (8008918 <mg_mqtt_pub+0x198>)
 80087fc:	f7ff fa80 	bl	8007d00 <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <mg_mqtt_pub+0x90>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	3302      	adds	r3, #2
 800880e:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <mg_mqtt_pub+0xb8>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7ff fce2 	bl	80081f4 <get_props_size>
 8008830:	4602      	mov	r2, r0
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4413      	add	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d006      	beq.n	8008850 <mg_mqtt_pub+0xd0>
 8008842:	89fb      	ldrh	r3, [r7, #14]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <mg_mqtt_pub+0xd0>
 8008848:	7b7b      	ldrb	r3, [r7, #13]
 800884a:	f043 0308 	orr.w	r3, r3, #8
 800884e:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8008850:	7b7a      	ldrb	r2, [r7, #13]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2103      	movs	r1, #3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff fb3c 	bl	8007ed4 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	b29b      	uxth	r3, r3
 8008862:	4618      	mov	r0, r3
 8008864:	f00e ff7f 	bl	8017766 <mg_ntohs>
 8008868:	4603      	mov	r3, r0
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff fb76 	bl	8007f5e <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6999      	ldr	r1, [r3, #24]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	461a      	mov	r2, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f004 fa79 	bl	800cd74 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01e      	beq.n	80088ca <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 800888c:	89fb      	ldrh	r3, [r7, #14]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d112      	bne.n	80088b8 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008898:	3201      	adds	r2, #1
 800889a:	b292      	uxth	r2, r2
 800889c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800889e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <mg_mqtt_pub+0x130>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80088aa:	3201      	adds	r2, #1
 80088ac:	b292      	uxth	r2, r2
 80088ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088b6:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 80088b8:	89fb      	ldrh	r3, [r7, #14]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f00e ff53 	bl	8017766 <mg_ntohs>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff fb4a 	bl	8007f5e <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d007      	beq.n	80088ea <mg_mqtt_pub+0x16a>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e2:	461a      	mov	r2, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff fc9d 	bl	8008224 <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <mg_mqtt_pub+0x182>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6a19      	ldr	r1, [r3, #32]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fa:	461a      	mov	r2, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f004 fa39 	bl	800cd74 <mg_send>
  return id;
 8008902:	89fb      	ldrh	r3, [r7, #14]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	bd90      	pop	{r4, r7, pc}
 800890c:	24000240 	.word	0x24000240
 8008910:	0802a71c 	.word	0x0802a71c
 8008914:	08027148 	.word	0x08027148
 8008918:	080280f8 	.word	0x080280f8

0800891c <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	b2db      	uxtb	r3, r3
 8008932:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <mg_mqtt_sub+0x3c>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7ff fc50 	bl	80081f4 <get_props_size>
 8008954:	4603      	mov	r3, r0
 8008956:	e000      	b.n	800895a <mg_mqtt_sub+0x3e>
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	3305      	adds	r3, #5
 8008966:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2202      	movs	r2, #2
 800896c:	2108      	movs	r1, #8
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fab0 	bl	8007ed4 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800897a:	3201      	adds	r2, #1
 800897c:	b292      	uxth	r2, r2
 800897e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8008980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d105      	bne.n	8008992 <mg_mqtt_sub+0x76>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800898c:	3201      	adds	r2, #1
 800898e:	b292      	uxth	r2, r2
 8008990:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008998:	4618      	mov	r0, r3
 800899a:	f00e fee4 	bl	8017766 <mg_ntohs>
 800899e:	4603      	mov	r3, r0
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff fadb 	bl	8007f5e <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d007      	beq.n	80089c8 <mg_mqtt_sub+0xac>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c0:	461a      	mov	r2, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fc2e 	bl	8008224 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	4618      	mov	r0, r3
 80089d0:	f00e fec9 	bl	8017766 <mg_ntohs>
 80089d4:	4603      	mov	r3, r0
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff fac0 	bl	8007f5e <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	461a      	mov	r2, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f004 f9c3 	bl	800cd74 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 80089ee:	f107 030f 	add.w	r3, r7, #15
 80089f2:	2201      	movs	r2, #1
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f004 f9bc 	bl	800cd74 <mg_send>
}
 80089fc:	bf00      	nop
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	@ 0x28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	4613      	mov	r3, r2
 8008a12:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 8008a22:	2228      	movs	r2, #40	@ 0x28
 8008a24:	2100      	movs	r1, #0
 8008a26:	6838      	ldr	r0, [r7, #0]
 8008a28:	f01a fe2c 	bl	8023684 <memset>
  m->dgram.buf = (char *) buf;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d801      	bhi.n	8008a3c <mg_mqtt_parse+0x38>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e104      	b.n	8008c46 <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	091b      	lsrs	r3, r3, #4
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	085b      	lsrs	r3, r3, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 0303 	and.w	r3, r3, #3
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 8008a68:	e01f      	b.n	8008aaa <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	623a      	str	r2, [r7, #32]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8008a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a7a:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	61fb      	str	r3, [r7, #28]
    len_len++;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	3301      	adds	r3, #1
 8008a96:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 8008a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da0c      	bge.n	8008aba <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d901      	bls.n	8008aaa <mg_mqtt_parse+0xa6>
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e0cd      	b.n	8008c46 <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 8008aaa:	6a3a      	ldr	r2, [r7, #32]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d8d8      	bhi.n	8008a6a <mg_mqtt_parse+0x66>
 8008ab8:	e000      	b.n	8008abc <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 8008aba:	bf00      	nop
  }
  end = p + n;
 8008abc:	6a3a      	ldr	r2, [r7, #32]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8008ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db05      	blt.n	8008ad8 <mg_mqtt_parse+0xd4>
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d901      	bls.n	8008adc <mg_mqtt_parse+0xd8>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e0b4      	b.n	8008c46 <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	7e9b      	ldrb	r3, [r3, #26]
 8008aec:	2b0b      	cmp	r3, #11
 8008aee:	f300 80a8 	bgt.w	8008c42 <mg_mqtt_parse+0x23e>
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	da10      	bge.n	8008b18 <mg_mqtt_parse+0x114>
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d002      	beq.n	8008b00 <mg_mqtt_parse+0xfc>
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d024      	beq.n	8008b48 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 8008afe:	e0a0      	b.n	8008c42 <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	dc01      	bgt.n	8008b0e <mg_mqtt_parse+0x10a>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e09b      	b.n	8008c46 <mg_mqtt_parse+0x242>
      m->ack = p[1];
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	785a      	ldrb	r2, [r3, #1]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	771a      	strb	r2, [r3, #28]
      break;
 8008b16:	e095      	b.n	8008c44 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d201      	bcs.n	8008b26 <mg_mqtt_parse+0x122>
 8008b22:	2302      	movs	r3, #2
 8008b24:	e08f      	b.n	8008c46 <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	b21a      	sxth	r2, r3
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	3301      	adds	r3, #1
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	b21b      	sxth	r3, r3
 8008b36:	4313      	orrs	r3, r2
 8008b38:	b21b      	sxth	r3, r3
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	831a      	strh	r2, [r3, #24]
      p += 2;
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	3302      	adds	r3, #2
 8008b44:	623b      	str	r3, [r7, #32]
      break;
 8008b46:	e07d      	b.n	8008c44 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d201      	bcs.n	8008b56 <mg_mqtt_parse+0x152>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e077      	b.n	8008c46 <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	b21a      	sxth	r2, r3
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	3301      	adds	r3, #1
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b21b      	sxth	r3, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	b21b      	sxth	r3, r3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	1c9a      	adds	r2, r3, #2
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	3302      	adds	r3, #2
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	4413      	add	r3, r2
 8008b84:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008b86:	6a3a      	ldr	r2, [r7, #32]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d901      	bls.n	8008b92 <mg_mqtt_parse+0x18e>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e059      	b.n	8008c46 <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	7edb      	ldrb	r3, [r3, #27]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d016      	beq.n	8008bc8 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d201      	bcs.n	8008ba8 <mg_mqtt_parse+0x1a4>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e04e      	b.n	8008c46 <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	b21a      	sxth	r2, r3
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	b21b      	sxth	r3, r3
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	b21b      	sxth	r3, r3
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	831a      	strh	r2, [r3, #24]
        p += 2;
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008bc8:	6a3a      	ldr	r2, [r7, #32]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d901      	bls.n	8008bd4 <mg_mqtt_parse+0x1d0>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e038      	b.n	8008c46 <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	d123      	bne.n	8008c22 <mg_mqtt_parse+0x21e>
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	3302      	adds	r3, #2
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d91e      	bls.n	8008c22 <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	3324      	adds	r3, #36	@ 0x24
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6a38      	ldr	r0, [r7, #32]
 8008bf4:	f7ff fa0f 	bl	8008016 <decode_varint>
 8008bf8:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <mg_mqtt_parse+0x200>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e020      	b.n	8008c46 <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 8008c04:	6a3a      	ldr	r2, [r7, #32]
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	441a      	add	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	461a      	mov	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	6a3a      	ldr	r2, [r7, #32]
 8008c1e:	4413      	add	r3, r2
 8008c20:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d901      	bls.n	8008c2e <mg_mqtt_parse+0x22a>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e00b      	b.n	8008c46 <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	60da      	str	r2, [r3, #12]
      break;
 8008c40:	e000      	b.n	8008c44 <mg_mqtt_parse+0x240>
      break;
 8008c42:	bf00      	nop
  }
  return MQTT_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3728      	adds	r7, #40	@ 0x28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b099      	sub	sp, #100	@ 0x64
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b07      	cmp	r3, #7
 8008c60:	f040 8124 	bne.w	8008eac <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <mqtt_cb+0x28>
 8008c74:	2305      	movs	r3, #5
 8008c76:	e000      	b.n	8008c7a <mqtt_cb+0x2a>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008c86:	f107 0314 	add.w	r3, r7, #20
 8008c8a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8008c8e:	f7ff feb9 	bl	8008a04 <mg_mqtt_parse>
 8008c92:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 8008c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d118      	bne.n	8008ccc <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8008c9a:	4b86      	ldr	r3, [pc, #536]	@ (8008eb4 <mqtt_cb+0x264>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd0c      	ble.n	8008cbc <mqtt_cb+0x6c>
 8008ca2:	4b85      	ldr	r3, [pc, #532]	@ (8008eb8 <mqtt_cb+0x268>)
 8008ca4:	f241 226e 	movw	r2, #4718	@ 0x126e
 8008ca8:	4984      	ldr	r1, [pc, #528]	@ (8008ebc <mqtt_cb+0x26c>)
 8008caa:	2001      	movs	r0, #1
 8008cac:	f7fe ffd8 	bl	8007c60 <mg_log_prefix>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4882      	ldr	r0, [pc, #520]	@ (8008ec0 <mqtt_cb+0x270>)
 8008cb8:	f7ff f822 	bl	8007d00 <mg_log>
        c->is_closing = 1;
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008cc2:	f043 0320 	orr.w	r3, r3, #32
 8008cc6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 8008cca:	e0ef      	b.n	8008eac <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 8008ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 80eb 	bne.w	8008eaa <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8008cd4:	4b77      	ldr	r3, [pc, #476]	@ (8008eb4 <mqtt_cb+0x264>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	dd17      	ble.n	8008d0c <mqtt_cb+0xbc>
 8008cdc:	4b76      	ldr	r3, [pc, #472]	@ (8008eb8 <mqtt_cb+0x268>)
 8008cde:	f241 2272 	movw	r2, #4722	@ 0x1272
 8008ce2:	4976      	ldr	r1, [pc, #472]	@ (8008ebc <mqtt_cb+0x26c>)
 8008ce4:	2004      	movs	r0, #4
 8008ce6:	f7fe ffbb 	bl	8007c60 <mg_log_prefix>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008cee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	9200      	str	r2, [sp, #0]
 8008d02:	4623      	mov	r3, r4
 8008d04:	4602      	mov	r2, r0
 8008d06:	486f      	ldr	r0, [pc, #444]	@ (8008ec4 <mqtt_cb+0x274>)
 8008d08:	f7fe fffa 	bl	8007d00 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 8008d0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d10:	3b02      	subs	r3, #2
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	f200 80ba 	bhi.w	8008e8c <mqtt_cb+0x23c>
 8008d18:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <mqtt_cb+0xd0>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d35 	.word	0x08008d35
 8008d24:	08008da9 	.word	0x08008da9
 8008d28:	08008e8d 	.word	0x08008e8d
 8008d2c:	08008e33 	.word	0x08008e33
 8008d30:	08008e5f 	.word	0x08008e5f
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8008d34:	f107 0314 	add.w	r3, r7, #20
 8008d38:	331c      	adds	r3, #28
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	2111      	movs	r1, #17
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7f9 fc84 	bl	800264c <mg_call>
            if (mm.ack == 0) {
 8008d44:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d112      	bne.n	8008d72 <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 8008d4c:	4b59      	ldr	r3, [pc, #356]	@ (8008eb4 <mqtt_cb+0x264>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	f340 809a 	ble.w	8008e8a <mqtt_cb+0x23a>
 8008d56:	4b58      	ldr	r3, [pc, #352]	@ (8008eb8 <mqtt_cb+0x268>)
 8008d58:	f241 2278 	movw	r2, #4728	@ 0x1278
 8008d5c:	4957      	ldr	r1, [pc, #348]	@ (8008ebc <mqtt_cb+0x26c>)
 8008d5e:	2003      	movs	r0, #3
 8008d60:	f7fe ff7e 	bl	8007c60 <mg_log_prefix>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4857      	ldr	r0, [pc, #348]	@ (8008ec8 <mqtt_cb+0x278>)
 8008d6c:	f7fe ffc8 	bl	8007d00 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 8008d70:	e08b      	b.n	8008e8a <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8008d72:	4b50      	ldr	r3, [pc, #320]	@ (8008eb4 <mqtt_cb+0x264>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd0e      	ble.n	8008d98 <mqtt_cb+0x148>
 8008d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8008eb8 <mqtt_cb+0x268>)
 8008d7c:	f241 227a 	movw	r2, #4730	@ 0x127a
 8008d80:	494e      	ldr	r1, [pc, #312]	@ (8008ebc <mqtt_cb+0x26c>)
 8008d82:	2001      	movs	r0, #1
 8008d84:	f7fe ff6c 	bl	8007c60 <mg_log_prefix>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008d90:	4619      	mov	r1, r3
 8008d92:	484e      	ldr	r0, [pc, #312]	@ (8008ecc <mqtt_cb+0x27c>)
 8008d94:	f7fe ffb4 	bl	8007d00 <mg_log>
              c->is_closing = 1;
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008d9e:	f043 0320 	orr.w	r3, r3, #32
 8008da2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 8008da6:	e070      	b.n	8008e8a <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 8008da8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d038      	beq.n	8008e22 <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 8008db0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008db2:	4618      	mov	r0, r3
 8008db4:	f00e fcd7 	bl	8017766 <mg_ntohs>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <mqtt_cb+0x188>
 8008dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 8008dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d101      	bne.n	8008de4 <mqtt_cb+0x194>
 8008de0:	2105      	movs	r1, #5
 8008de2:	e000      	b.n	8008de6 <mqtt_cb+0x196>
 8008de4:	2104      	movs	r1, #4
 8008de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008de8:	2200      	movs	r2, #0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7ff f872 	bl	8007ed4 <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 8008df0:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8008df4:	2202      	movs	r2, #2
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f003 ffbb 	bl	800cd74 <mg_send>

              if (c->is_mqtt5) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 8008e14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008e18:	2202      	movs	r2, #2
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f003 ffa9 	bl	800cd74 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8008e22:	f107 0314 	add.w	r3, r7, #20
 8008e26:	461a      	mov	r2, r3
 8008e28:	2110      	movs	r1, #16
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7f9 fc0e 	bl	800264c <mg_call>
            break;
 8008e30:	e02c      	b.n	8008e8c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8008e32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008e34:	4618      	mov	r0, r3
 8008e36:	f00e fc96 	bl	8017766 <mg_ntohs>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 8008e3e:	2302      	movs	r3, #2
 8008e40:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8008e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e44:	2202      	movs	r2, #2
 8008e46:	2106      	movs	r1, #6
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff f843 	bl	8007ed4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8008e4e:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 8008e52:	2202      	movs	r2, #2
 8008e54:	4619      	mov	r1, r3
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f003 ff8c 	bl	800cd74 <mg_send>
            break;
 8008e5c:	e016      	b.n	8008e8c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8008e5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008e60:	4618      	mov	r0, r3
 8008e62:	f00e fc80 	bl	8017766 <mg_ntohs>
 8008e66:	4603      	mov	r3, r0
 8008e68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8008e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e70:	2200      	movs	r2, #0
 8008e72:	2107      	movs	r1, #7
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff f82d 	bl	8007ed4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8008e7a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008e7e:	2202      	movs	r2, #2
 8008e80:	4619      	mov	r1, r3
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f003 ff76 	bl	800cd74 <mg_send>
            break;
 8008e88:	e000      	b.n	8008e8c <mqtt_cb+0x23c>
            break;
 8008e8a:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	461a      	mov	r2, r3
 8008e92:	210f      	movs	r1, #15
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7f9 fbd9 	bl	800264c <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3338      	adds	r3, #56	@ 0x38
 8008e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fd ffec 	bl	8006e80 <mg_iobuf_del>
    for (;;) {
 8008ea8:	e6dc      	b.n	8008c64 <mqtt_cb+0x14>
      } else {
        break;
 8008eaa:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 8008eac:	bf00      	nop
 8008eae:	375c      	adds	r7, #92	@ 0x5c
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd90      	pop	{r4, r7, pc}
 8008eb4:	24000240 	.word	0x24000240
 8008eb8:	0802a728 	.word	0x0802a728
 8008ebc:	08027148 	.word	0x08027148
 8008ec0:	08028110 	.word	0x08028110
 8008ec4:	0802812c 	.word	0x0802812c
 8008ec8:	0802814c 	.word	0x0802814c
 8008ecc:	0802815c 	.word	0x0802815c

08008ed0 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b096      	sub	sp, #88	@ 0x58
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8008ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fb5f 	bl	80095a8 <mg_connect>
 8008eea:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 8008eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d015      	beq.n	8008f1e <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	2240      	movs	r2, #64	@ 0x40
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f01a fbc2 	bl	8023684 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <mg_mqtt_connect+0x3c>
 8008f06:	f107 0314 	add.w	r3, r7, #20
 8008f0a:	e000      	b.n	8008f0e <mg_mqtt_connect+0x3e>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008f12:	f7ff fad1 	bl	80084b8 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8008f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f18:	4a03      	ldr	r2, [pc, #12]	@ (8008f28 <mg_mqtt_connect+0x58>)
 8008f1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 8008f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3758      	adds	r7, #88	@ 0x58
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	08008c51 	.word	0x08008c51

08008f2c <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3c:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	4805      	ldr	r0, [pc, #20]	@ (8008f60 <mg_vprintf+0x34>)
 8008f4a:	f7fa f84d 	bl	8002fe8 <mg_vxprintf>
  return c->send.len - old;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	1ad3      	subs	r3, r2, r3
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	0800d35b 	.word	0x0800d35b

08008f64 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8008f64:	b40e      	push	{r1, r2, r3}
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8008f72:	f107 0320 	add.w	r3, r7, #32
 8008f76:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8008f78:	f107 0308 	add.w	r3, r7, #8
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	69f9      	ldr	r1, [r7, #28]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff ffd3 	bl	8008f2c <mg_vprintf>
 8008f86:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8008f88:	68fb      	ldr	r3, [r7, #12]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f94:	b003      	add	sp, #12
 8008f96:	4770      	bx	lr

08008f98 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	f107 0308 	add.w	r3, r7, #8
 8008fa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8008fa6:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 8008fa8:	4811      	ldr	r0, [pc, #68]	@ (8008ff0 <mg_atonl+0x58>)
 8008faa:	f00e fbc3 	bl	8017734 <mg_ntohl>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8008fb2:	f107 0318 	add.w	r3, r7, #24
 8008fb6:	490f      	ldr	r1, [pc, #60]	@ (8008ff4 <mg_atonl+0x5c>)
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f005 fd19 	bl	800e9f0 <mg_str_s>
 8008fbe:	f107 0318 	add.w	r3, r7, #24
 8008fc2:	cb0c      	ldmia	r3, {r2, r3}
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	c903      	ldmia	r1, {r0, r1}
 8008fca:	f005 fdd4 	bl	800eb76 <mg_strcasecmp>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <mg_atonl+0x40>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e006      	b.n	8008fe6 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	74da      	strb	r2, [r3, #19]
  return true;
 8008fe4:	2301      	movs	r3, #1
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	7f000001 	.word	0x7f000001
 8008ff4:	0802817c 	.word	0x0802817c

08008ff8 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	f107 0308 	add.w	r3, r7, #8
 8009002:	e883 0003 	stmia.w	r3, {r0, r1}
 8009006:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <mg_atone+0x1a>
 800900e:	2300      	movs	r3, #0
 8009010:	e009      	b.n	8009026 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2210      	movs	r2, #16
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f01a fb33 	bl	8023684 <memset>
  addr->is_ip6 = false;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	74da      	strb	r2, [r3, #19]
  return true;
 8009024:	2301      	movs	r3, #1
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800902e:	b480      	push	{r7}
 8009030:	b089      	sub	sp, #36	@ 0x24
 8009032:	af00      	add	r7, sp, #0
 8009034:	f107 0308 	add.w	r3, r7, #8
 8009038:	e883 0003 	stmia.w	r3, {r0, r1}
 800903c:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
 800904a:	e049      	b.n	80090e0 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b2f      	cmp	r3, #47	@ 0x2f
 8009056:	d925      	bls.n	80090a4 <mg_aton4+0x76>
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b39      	cmp	r3, #57	@ 0x39
 8009062:	d81f      	bhi.n	80090a4 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8009064:	f107 0210 	add.w	r2, r7, #16
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	4413      	add	r3, r2
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	4619      	mov	r1, r3
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	4413      	add	r3, r2
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	3b30      	subs	r3, #48	@ 0x30
 8009084:	440b      	add	r3, r1
 8009086:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2bff      	cmp	r3, #255	@ 0xff
 800908c:	dd01      	ble.n	8009092 <mg_aton4+0x64>
 800908e:	2300      	movs	r3, #0
 8009090:	e03d      	b.n	800910e <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	b2d9      	uxtb	r1, r3
 8009096:	f107 0210 	add.w	r2, r7, #16
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	4413      	add	r3, r2
 800909e:	460a      	mov	r2, r1
 80090a0:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80090a2:	e01a      	b.n	80090da <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80090ae:	d112      	bne.n	80090d6 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d809      	bhi.n	80090ca <mg_aton4+0x9c>
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <mg_aton4+0x9c>
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80090c8:	d101      	bne.n	80090ce <mg_aton4+0xa0>
 80090ca:	2300      	movs	r3, #0
 80090cc:	e01f      	b.n	800910e <mg_aton4+0xe0>
      num_dots++;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3301      	adds	r3, #1
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	e001      	b.n	80090da <mg_aton4+0xac>
    } else {
      return false;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e019      	b.n	800910e <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3301      	adds	r3, #1
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d3b1      	bcc.n	800904c <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d106      	bne.n	80090fc <mg_aton4+0xce>
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	4413      	add	r3, r2
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80090fa:	d101      	bne.n	8009100 <mg_aton4+0xd2>
 80090fc:	2300      	movs	r3, #0
 80090fe:	e006      	b.n	800910e <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	74da      	strb	r2, [r3, #19]
  return true;
 800910c:	2301      	movs	r3, #1
}
 800910e:	4618      	mov	r0, r3
 8009110:	3724      	adds	r7, #36	@ 0x24
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800911a:	b580      	push	{r7, lr}
 800911c:	b088      	sub	sp, #32
 800911e:	af00      	add	r7, sp, #0
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	e883 0003 	stmia.w	r3, {r0, r1}
 8009128:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b0d      	cmp	r3, #13
 800912e:	d801      	bhi.n	8009134 <mg_v4mapped+0x1a>
 8009130:	2300      	movs	r3, #0
 8009132:	e056      	b.n	80091e2 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b3a      	cmp	r3, #58	@ 0x3a
 800913a:	d109      	bne.n	8009150 <mg_v4mapped+0x36>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3301      	adds	r3, #1
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b3a      	cmp	r3, #58	@ 0x3a
 8009144:	d104      	bne.n	8009150 <mg_v4mapped+0x36>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3306      	adds	r3, #6
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b3a      	cmp	r3, #58	@ 0x3a
 800914e:	d001      	beq.n	8009154 <mg_v4mapped+0x3a>
 8009150:	2300      	movs	r3, #0
 8009152:	e046      	b.n	80091e2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8009154:	2302      	movs	r3, #2
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e010      	b.n	800917c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b66      	cmp	r3, #102	@ 0x66
 8009164:	d007      	beq.n	8009176 <mg_v4mapped+0x5c>
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b46      	cmp	r3, #70	@ 0x46
 8009170:	d001      	beq.n	8009176 <mg_v4mapped+0x5c>
 8009172:	2300      	movs	r3, #0
 8009174:	e035      	b.n	80091e2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	3301      	adds	r3, #1
 800917a:	61fb      	str	r3, [r7, #28]
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	2b05      	cmp	r3, #5
 8009180:	ddeb      	ble.n	800915a <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	1dd9      	adds	r1, r3, #7
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1fda      	subs	r2, r3, #7
 800918a:	f107 0314 	add.w	r3, r7, #20
 800918e:	4618      	mov	r0, r3
 8009190:	f005 fc4b 	bl	800ea2a <mg_str_n>
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	f107 0314 	add.w	r3, r7, #20
 800919a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800919e:	f7ff ff46 	bl	800902e <mg_aton4>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f083 0301 	eor.w	r3, r3, #1
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <mg_v4mapped+0x98>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e017      	b.n	80091e2 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2210      	movs	r2, #16
 80091bc:	2100      	movs	r1, #0
 80091be:	4618      	mov	r0, r3
 80091c0:	f01a fa60 	bl	8023684 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	22ff      	movs	r2, #255	@ 0xff
 80091c8:	72da      	strb	r2, [r3, #11]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7ada      	ldrb	r2, [r3, #11]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	330c      	adds	r3, #12
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	74da      	strb	r2, [r3, #19]
  return true;
 80091e0:	2301      	movs	r3, #1
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b090      	sub	sp, #64	@ 0x40
 80091ee:	af02      	add	r7, sp, #8
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80091f8:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 80091fa:	2300      	movs	r3, #0
 80091fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80091fe:	2300      	movs	r3, #0
 8009200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009202:	232a      	movs	r3, #42	@ 0x2a
 8009204:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d909      	bls.n	8009226 <mg_aton6+0x3c>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b5b      	cmp	r3, #91	@ 0x5b
 8009218:	d105      	bne.n	8009226 <mg_aton6+0x3c>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	3301      	adds	r3, #1
 800921e:	60bb      	str	r3, [r7, #8]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3b02      	subs	r3, #2
 8009224:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	f107 0308 	add.w	r3, r7, #8
 800922c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009230:	f7ff ff73 	bl	800911a <mg_v4mapped>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <mg_aton6+0x54>
 800923a:	2301      	movs	r3, #1
 800923c:	e0e1      	b.n	8009402 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800923e:	2300      	movs	r3, #0
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
 8009242:	e0b0      	b.n	80093a6 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009248:	4413      	add	r3, r2
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b2f      	cmp	r3, #47	@ 0x2f
 800924e:	d905      	bls.n	800925c <mg_aton6+0x72>
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009254:	4413      	add	r3, r2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b39      	cmp	r3, #57	@ 0x39
 800925a:	d917      	bls.n	800928c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009260:	4413      	add	r3, r2
 8009262:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8009264:	2b60      	cmp	r3, #96	@ 0x60
 8009266:	d905      	bls.n	8009274 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800926c:	4413      	add	r3, r2
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b66      	cmp	r3, #102	@ 0x66
 8009272:	d90b      	bls.n	800928c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009278:	4413      	add	r3, r2
 800927a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800927c:	2b40      	cmp	r3, #64	@ 0x40
 800927e:	d933      	bls.n	80092e8 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	4413      	add	r3, r2
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b46      	cmp	r3, #70	@ 0x46
 800928a:	d82d      	bhi.n	80092e8 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800928c:	2300      	movs	r3, #0
 800928e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 8009290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009292:	3303      	adds	r3, #3
 8009294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009296:	429a      	cmp	r2, r3
 8009298:	d901      	bls.n	800929e <mg_aton6+0xb4>
 800929a:	2300      	movs	r3, #0
 800929c:	e0b1      	b.n	8009402 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	18d1      	adds	r1, r2, r3
 80092a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	f107 0318 	add.w	r3, r7, #24
 80092b0:	4618      	mov	r0, r3
 80092b2:	f005 fbba 	bl	800ea2a <mg_str_n>
 80092b6:	f107 0314 	add.w	r3, r7, #20
 80092ba:	2204      	movs	r2, #4
 80092bc:	9200      	str	r2, [sp, #0]
 80092be:	2210      	movs	r2, #16
 80092c0:	f107 0118 	add.w	r1, r7, #24
 80092c4:	c903      	ldmia	r1, {r0, r1}
 80092c6:	f005 fdee 	bl	800eea6 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	0a1b      	lsrs	r3, r3, #8
 80092ce:	b2d9      	uxtb	r1, r3
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	4413      	add	r3, r2
 80092d6:	460a      	mov	r2, r1
 80092d8:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	3301      	adds	r3, #1
 80092e0:	b2d1      	uxtb	r1, r2
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 80092e6:	e05b      	b.n	80093a0 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ec:	4413      	add	r3, r2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b3a      	cmp	r3, #58	@ 0x3a
 80092f2:	d134      	bne.n	800935e <mg_aton6+0x174>
      j = i + 1;
 80092f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f6:	3301      	adds	r3, #1
 80092f8:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 80092fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d014      	beq.n	800932a <mg_aton6+0x140>
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009304:	3b01      	subs	r3, #1
 8009306:	4413      	add	r3, r2
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b3a      	cmp	r3, #58	@ 0x3a
 800930c:	d10d      	bne.n	800932a <mg_aton6+0x140>
        dc = n;  // Double colon
 800930e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009310:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8009312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009314:	2b01      	cmp	r3, #1
 8009316:	d90f      	bls.n	8009338 <mg_aton6+0x14e>
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931c:	3b02      	subs	r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b3a      	cmp	r3, #58	@ 0x3a
 8009324:	d108      	bne.n	8009338 <mg_aton6+0x14e>
 8009326:	2300      	movs	r3, #0
 8009328:	e06b      	b.n	8009402 <mg_aton6+0x218>
      } else if (i > 0) {
 800932a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932c:	2b00      	cmp	r3, #0
 800932e:	d004      	beq.n	800933a <mg_aton6+0x150>
        n += 2;
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	3302      	adds	r3, #2
 8009334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009336:	e000      	b.n	800933a <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8009338:	bf00      	nop
      }
      if (n > 14) return false;
 800933a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933c:	2b0e      	cmp	r3, #14
 800933e:	d901      	bls.n	8009344 <mg_aton6+0x15a>
 8009340:	2300      	movs	r3, #0
 8009342:	e05e      	b.n	8009402 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8009344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009346:	3301      	adds	r3, #1
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	2100      	movs	r1, #0
 800934c:	54d1      	strb	r1, [r2, r3]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	5cd1      	ldrb	r1, [r2, r3]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009356:	4413      	add	r3, r2
 8009358:	460a      	mov	r2, r1
 800935a:	701a      	strb	r2, [r3, #0]
 800935c:	e020      	b.n	80093a0 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009362:	4413      	add	r3, r2
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b25      	cmp	r3, #37	@ 0x25
 8009368:	d118      	bne.n	800939c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936e:	3301      	adds	r3, #1
 8009370:	18d1      	adds	r1, r2, r3
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	f107 0320 	add.w	r3, r7, #32
 800937e:	4618      	mov	r0, r3
 8009380:	f005 fb53 	bl	800ea2a <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8009388:	2201      	movs	r2, #1
 800938a:	9200      	str	r2, [sp, #0]
 800938c:	220a      	movs	r2, #10
 800938e:	f107 0120 	add.w	r1, r7, #32
 8009392:	c903      	ldmia	r1, {r0, r1}
 8009394:	f005 fd87 	bl	800eea6 <mg_str_to_num>
 8009398:	4603      	mov	r3, r0
 800939a:	e032      	b.n	8009402 <mg_aton6+0x218>
    } else {
      return false;
 800939c:	2300      	movs	r3, #0
 800939e:	e030      	b.n	8009402 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	3301      	adds	r3, #1
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093aa:	429a      	cmp	r2, r3
 80093ac:	f4ff af4a 	bcc.w	8009244 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 80093b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b2:	2b0d      	cmp	r3, #13
 80093b4:	d804      	bhi.n	80093c0 <mg_aton6+0x1d6>
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ba:	d101      	bne.n	80093c0 <mg_aton6+0x1d6>
 80093bc:	2300      	movs	r3, #0
 80093be:	e020      	b.n	8009402 <mg_aton6+0x218>
  if (n < 14) {
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	2b0d      	cmp	r3, #13
 80093c4:	d819      	bhi.n	80093fa <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 80093c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	330e      	adds	r3, #14
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	18d0      	adds	r0, r2, r3
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d6:	18d1      	adds	r1, r2, r3
 80093d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	3302      	adds	r3, #2
 80093e0:	461a      	mov	r2, r3
 80093e2:	f01a f935 	bl	8023650 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	18d0      	adds	r0, r2, r3
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	f1c3 030e 	rsb	r3, r3, #14
 80093f2:	461a      	mov	r2, r3
 80093f4:	2100      	movs	r1, #0
 80093f6:	f01a f945 	bl	8023684 <memset>
  }

  addr->is_ip6 = true;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	74da      	strb	r2, [r3, #19]
  return true;
 8009400:	2301      	movs	r3, #1
}
 8009402:	4618      	mov	r0, r3
 8009404:	3738      	adds	r7, #56	@ 0x38
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	e883 0003 	stmia.w	r3, {r0, r1}
 8009418:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f107 0308 	add.w	r3, r7, #8
 8009420:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009424:	f7ff fde8 	bl	8008ff8 <mg_atone>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d11d      	bne.n	800946a <mg_aton+0x60>
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009438:	f7ff fdae 	bl	8008f98 <mg_atonl>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d113      	bne.n	800946a <mg_aton+0x60>
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	f107 0308 	add.w	r3, r7, #8
 8009448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800944c:	f7ff fdef 	bl	800902e <mg_aton4>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <mg_aton+0x60>
         mg_aton6(str, addr);
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	f107 0308 	add.w	r3, r7, #8
 800945c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009460:	f7ff fec3 	bl	80091ea <mg_aton6>
 8009464:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <mg_aton+0x64>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <mg_aton+0x66>
 800946e:	2300      	movs	r3, #0
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	b2db      	uxtb	r3, r3
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948a:	33b0      	adds	r3, #176	@ 0xb0
 800948c:	4619      	mov	r1, r3
 800948e:	2001      	movs	r0, #1
 8009490:	f018 fe7c 	bl	802218c <calloc>
 8009494:	4603      	mov	r3, r0
 8009496:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d017      	beq.n	80094ce <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	61da      	str	r2, [r3, #28]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69da      	ldr	r2, [r3, #28]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 80094ce:	68fb      	ldr	r3, [r7, #12]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7f8 fb0c 	bl	8001afe <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e002      	b.n	80094f4 <mg_close_conn+0x1c>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d1f7      	bne.n	80094ee <mg_close_conn+0x16>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d103      	bne.n	800951a <mg_close_conn+0x42>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d103      	bne.n	800952e <mg_close_conn+0x56>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800952e:	2200      	movs	r2, #0
 8009530:	2109      	movs	r1, #9
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7f9 f88a 	bl	800264c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8009538:	4b17      	ldr	r3, [pc, #92]	@ (8009598 <mg_close_conn+0xc0>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b02      	cmp	r3, #2
 800953e:	dd0e      	ble.n	800955e <mg_close_conn+0x86>
 8009540:	4b16      	ldr	r3, [pc, #88]	@ (800959c <mg_close_conn+0xc4>)
 8009542:	f241 326b 	movw	r2, #4971	@ 0x136b
 8009546:	4916      	ldr	r1, [pc, #88]	@ (80095a0 <mg_close_conn+0xc8>)
 8009548:	2003      	movs	r0, #3
 800954a:	f7fe fb89 	bl	8007c60 <mg_log_prefix>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009556:	461a      	mov	r2, r3
 8009558:	4812      	ldr	r0, [pc, #72]	@ (80095a4 <mg_close_conn+0xcc>)
 800955a:	f7fe fbd1 	bl	8007d00 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f008 fd92 	bl	8012088 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3338      	adds	r3, #56	@ 0x38
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd fcd4 	bl	8006f16 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3348      	adds	r3, #72	@ 0x48
 8009572:	4618      	mov	r0, r3
 8009574:	f7fd fccf 	bl	8006f16 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3368      	adds	r3, #104	@ 0x68
 800957c:	4618      	mov	r0, r3
 800957e:	f7fd fcca 	bl	8006f16 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 8009582:	21b0      	movs	r1, #176	@ 0xb0
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f00e f875 	bl	8017674 <mg_bzero>
  free(c);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f018 fe22 	bl	80221d4 <free>
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	24000240 	.word	0x24000240
 800959c:	0802a730 	.word	0x0802a730
 80095a0:	08027148 	.word	0x08027148
 80095a4:	08028188 	.word	0x08028188

080095a8 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <mg_connect+0x20>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10e      	bne.n	80095e6 <mg_connect+0x3e>
    MG_ERROR(("null url"));
 80095c8:	4b37      	ldr	r3, [pc, #220]	@ (80096a8 <mg_connect+0x100>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dd66      	ble.n	800969e <mg_connect+0xf6>
 80095d0:	4b36      	ldr	r3, [pc, #216]	@ (80096ac <mg_connect+0x104>)
 80095d2:	f241 327b 	movw	r2, #4987	@ 0x137b
 80095d6:	4936      	ldr	r1, [pc, #216]	@ (80096b0 <mg_connect+0x108>)
 80095d8:	2001      	movs	r0, #1
 80095da:	f7fe fb41 	bl	8007c60 <mg_log_prefix>
 80095de:	4835      	ldr	r0, [pc, #212]	@ (80096b4 <mg_connect+0x10c>)
 80095e0:	f7fe fb8e 	bl	8007d00 <mg_log>
 80095e4:	e05b      	b.n	800969e <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff ff49 	bl	800947e <mg_alloc_conn>
 80095ec:	6178      	str	r0, [r7, #20]
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10e      	bne.n	8009612 <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 80095f4:	4b2c      	ldr	r3, [pc, #176]	@ (80096a8 <mg_connect+0x100>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dd50      	ble.n	800969e <mg_connect+0xf6>
 80095fc:	4b2b      	ldr	r3, [pc, #172]	@ (80096ac <mg_connect+0x104>)
 80095fe:	f241 327d 	movw	r2, #4989	@ 0x137d
 8009602:	492b      	ldr	r1, [pc, #172]	@ (80096b0 <mg_connect+0x108>)
 8009604:	2001      	movs	r0, #1
 8009606:	f7fe fb2b 	bl	8007c60 <mg_log_prefix>
 800960a:	482b      	ldr	r0, [pc, #172]	@ (80096b8 <mg_connect+0x110>)
 800960c:	f7fe fb78 	bl	8007d00 <mg_log>
 8009610:	e045      	b.n	800969e <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8009620:	2204      	movs	r2, #4
 8009622:	4926      	ldr	r1, [pc, #152]	@ (80096bc <mg_connect+0x114>)
 8009624:	68b8      	ldr	r0, [r7, #8]
 8009626:	f01a f842 	bl	80236ae <strncmp>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	bf0c      	ite	eq
 8009630:	2301      	moveq	r3, #1
 8009632:	2300      	movne	r3, #0
 8009634:	b2d9      	uxtb	r1, r3
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800963c:	f361 0300 	bfi	r3, r1, #0, #1
 8009640:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f04f 32ff 	mov.w	r2, #4294967295
 800964a:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009658:	f043 0302 	orr.w	r3, r3, #2
 800965c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8009666:	4b10      	ldr	r3, [pc, #64]	@ (80096a8 <mg_connect+0x100>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b02      	cmp	r3, #2
 800966c:	dd0e      	ble.n	800968c <mg_connect+0xe4>
 800966e:	4b0f      	ldr	r3, [pc, #60]	@ (80096ac <mg_connect+0x104>)
 8009670:	f241 3285 	movw	r2, #4997	@ 0x1385
 8009674:	490e      	ldr	r1, [pc, #56]	@ (80096b0 <mg_connect+0x108>)
 8009676:	2003      	movs	r0, #3
 8009678:	f7fe faf2 	bl	8007c60 <mg_log_prefix>
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	480e      	ldr	r0, [pc, #56]	@ (80096c0 <mg_connect+0x118>)
 8009688:	f7fe fb3a 	bl	8007d00 <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	2101      	movs	r1, #1
 8009690:	6978      	ldr	r0, [r7, #20]
 8009692:	f7f8 ffdb 	bl	800264c <mg_call>
    mg_resolve(c, url);
 8009696:	68b9      	ldr	r1, [r7, #8]
 8009698:	6978      	ldr	r0, [r7, #20]
 800969a:	f7f8 ff93 	bl	80025c4 <mg_resolve>
  }
  return c;
 800969e:	697b      	ldr	r3, [r7, #20]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	24000240 	.word	0x24000240
 80096ac:	0802a740 	.word	0x0802a740
 80096b0:	08027148 	.word	0x08027148
 80096b4:	08028198 	.word	0x08028198
 80096b8:	080281a4 	.word	0x080281a4
 80096bc:	080281a8 	.word	0x080281a8
 80096c0:	080274d0 	.word	0x080274d0

080096c4 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff fed1 	bl	800947e <mg_alloc_conn>
 80096dc:	6178      	str	r0, [r7, #20]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10f      	bne.n	8009704 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 80096e4:	4b41      	ldr	r3, [pc, #260]	@ (80097ec <mg_listen+0x128>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dd7a      	ble.n	80097e2 <mg_listen+0x11e>
 80096ec:	4b40      	ldr	r3, [pc, #256]	@ (80097f0 <mg_listen+0x12c>)
 80096ee:	f241 3290 	movw	r2, #5008	@ 0x1390
 80096f2:	4940      	ldr	r1, [pc, #256]	@ (80097f4 <mg_listen+0x130>)
 80096f4:	2001      	movs	r0, #1
 80096f6:	f7fe fab3 	bl	8007c60 <mg_log_prefix>
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	483e      	ldr	r0, [pc, #248]	@ (80097f8 <mg_listen+0x134>)
 80096fe:	f7fe faff 	bl	8007d00 <mg_log>
 8009702:	e06e      	b.n	80097e2 <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	6978      	ldr	r0, [r7, #20]
 8009708:	f003 f974 	bl	800c9f4 <mg_open_listener>
 800970c:	4603      	mov	r3, r0
 800970e:	f083 0301 	eor.w	r3, r3, #1
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d019      	beq.n	800974c <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8009718:	4b34      	ldr	r3, [pc, #208]	@ (80097ec <mg_listen+0x128>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	dd0f      	ble.n	8009740 <mg_listen+0x7c>
 8009720:	4b33      	ldr	r3, [pc, #204]	@ (80097f0 <mg_listen+0x12c>)
 8009722:	f241 3292 	movw	r2, #5010	@ 0x1392
 8009726:	4933      	ldr	r1, [pc, #204]	@ (80097f4 <mg_listen+0x130>)
 8009728:	2001      	movs	r0, #1
 800972a:	f7fe fa99 	bl	8007c60 <mg_log_prefix>
 800972e:	f01a f869 	bl	8023804 <__errno>
 8009732:	4603      	mov	r3, r0
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	4830      	ldr	r0, [pc, #192]	@ (80097fc <mg_listen+0x138>)
 800973c:	f7fe fae0 	bl	8007d00 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 8009740:	6978      	ldr	r0, [r7, #20]
 8009742:	f018 fd47 	bl	80221d4 <free>
    c = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	e04a      	b.n	80097e2 <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009752:	f043 0301 	orr.w	r3, r3, #1
 8009756:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800975a:	2204      	movs	r2, #4
 800975c:	4928      	ldr	r1, [pc, #160]	@ (8009800 <mg_listen+0x13c>)
 800975e:	68b8      	ldr	r0, [r7, #8]
 8009760:	f019 ffa5 	bl	80236ae <strncmp>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	bf0c      	ite	eq
 800976a:	2301      	moveq	r3, #1
 800976c:	2300      	movne	r3, #0
 800976e:	b2d9      	uxtb	r1, r3
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009776:	f361 0300 	bfi	r3, r1, #0, #1
 800977a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 8009798:	2200      	movs	r2, #0
 800979a:	2101      	movs	r1, #1
 800979c:	6978      	ldr	r0, [r7, #20]
 800979e:	f7f8 ff55 	bl	800264c <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80097a2:	68b8      	ldr	r0, [r7, #8]
 80097a4:	f00d fe06 	bl	80173b4 <mg_url_is_ssl>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d006      	beq.n	80097bc <mg_listen+0xf8>
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80097b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b8:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80097bc:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <mg_listen+0x128>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	dd0e      	ble.n	80097e2 <mg_listen+0x11e>
 80097c4:	4b0a      	ldr	r3, [pc, #40]	@ (80097f0 <mg_listen+0x12c>)
 80097c6:	f241 329e 	movw	r2, #5022	@ 0x139e
 80097ca:	490a      	ldr	r1, [pc, #40]	@ (80097f4 <mg_listen+0x130>)
 80097cc:	2003      	movs	r0, #3
 80097ce:	f7fe fa47 	bl	8007c60 <mg_log_prefix>
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	4809      	ldr	r0, [pc, #36]	@ (8009804 <mg_listen+0x140>)
 80097de:	f7fe fa8f 	bl	8007d00 <mg_log>
  }
  return c;
 80097e2:	697b      	ldr	r3, [r7, #20]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	24000240 	.word	0x24000240
 80097f0:	0802a74c 	.word	0x0802a74c
 80097f4:	08027148 	.word	0x08027148
 80097f8:	080281b0 	.word	0x080281b0
 80097fc:	080281b8 	.word	0x080281b8
 8009800:	080281a8 	.word	0x080281a8
 8009804:	080274d0 	.word	0x080274d0

08009808 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	@ 0x28
 800980c:	af04      	add	r7, sp, #16
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8009814:	2128      	movs	r1, #40	@ 0x28
 8009816:	2001      	movs	r0, #1
 8009818:	f018 fcb8 	bl	802218c <calloc>
 800981c:	4603      	mov	r3, r0
 800981e:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d014      	beq.n	8009850 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800983c:	6979      	ldr	r1, [r7, #20]
 800983e:	f005 fd65 	bl	800f30c <mg_timer_init>
    t->id = mgr->timerid++;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	1c59      	adds	r1, r3, #1
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	6211      	str	r1, [r2, #32]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	6013      	str	r3, [r2, #0]
  }
  return t;
 8009850:	697b      	ldr	r3, [r7, #20]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8009864:	2248      	movs	r2, #72	@ 0x48
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f019 ff0b 	bl	8023684 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f04f 32ff 	mov.w	r2, #4294967295
 8009874:	639a      	str	r2, [r3, #56]	@ 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 8009876:	4b34      	ldr	r3, [pc, #208]	@ (8009948 <mg_mgr_init+0xec>)
 8009878:	2204      	movs	r2, #4
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	4b32      	ldr	r3, [pc, #200]	@ (8009948 <mg_mgr_init+0xec>)
 800987e:	2200      	movs	r2, #0
 8009880:	711a      	strb	r2, [r3, #4]
 8009882:	4b31      	ldr	r3, [pc, #196]	@ (8009948 <mg_mgr_init+0xec>)
 8009884:	2202      	movs	r2, #2
 8009886:	715a      	strb	r2, [r3, #5]
 8009888:	2000      	movs	r0, #0
 800988a:	f00d ff53 	bl	8017734 <mg_ntohl>
 800988e:	4603      	mov	r3, r0
 8009890:	4a2e      	ldr	r2, [pc, #184]	@ (800994c <mg_mgr_init+0xf0>)
 8009892:	6093      	str	r3, [r2, #8]
 8009894:	2000      	movs	r0, #0
 8009896:	f00d ff4d 	bl	8017734 <mg_ntohl>
 800989a:	4603      	mov	r3, r0
 800989c:	4a2b      	ldr	r2, [pc, #172]	@ (800994c <mg_mgr_init+0xf0>)
 800989e:	60d3      	str	r3, [r2, #12]
 80098a0:	2000      	movs	r0, #0
 80098a2:	f00d ff47 	bl	8017734 <mg_ntohl>
 80098a6:	4603      	mov	r3, r0
 80098a8:	4a28      	ldr	r2, [pc, #160]	@ (800994c <mg_mgr_init+0xf0>)
 80098aa:	6113      	str	r3, [r2, #16]
 80098ac:	4b27      	ldr	r3, [pc, #156]	@ (800994c <mg_mgr_init+0xf0>)
 80098ae:	4a28      	ldr	r2, [pc, #160]	@ (8009950 <mg_mgr_init+0xf4>)
 80098b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80098b2:	4b26      	ldr	r3, [pc, #152]	@ (800994c <mg_mgr_init+0xf0>)
 80098b4:	4a24      	ldr	r2, [pc, #144]	@ (8009948 <mg_mgr_init+0xec>)
 80098b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80098b8:	4b24      	ldr	r3, [pc, #144]	@ (800994c <mg_mgr_init+0xf0>)
 80098ba:	2202      	movs	r2, #2
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	4b25      	ldr	r3, [pc, #148]	@ (8009954 <mg_mgr_init+0xf8>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	4b21      	ldr	r3, [pc, #132]	@ (800994c <mg_mgr_init+0xf0>)
 80098c6:	705a      	strb	r2, [r3, #1]
 80098c8:	4b22      	ldr	r3, [pc, #136]	@ (8009954 <mg_mgr_init+0xf8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	0a9b      	lsrs	r3, r3, #10
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	4b1e      	ldr	r3, [pc, #120]	@ (800994c <mg_mgr_init+0xf0>)
 80098d2:	709a      	strb	r2, [r3, #2]
 80098d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009954 <mg_mgr_init+0xf8>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	0cdb      	lsrs	r3, r3, #19
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	4b1b      	ldr	r3, [pc, #108]	@ (800994c <mg_mgr_init+0xf0>)
 80098de:	70da      	strb	r2, [r3, #3]
 80098e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009958 <mg_mgr_init+0xfc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	4b19      	ldr	r3, [pc, #100]	@ (800994c <mg_mgr_init+0xf0>)
 80098e8:	711a      	strb	r2, [r3, #4]
 80098ea:	4b1c      	ldr	r3, [pc, #112]	@ (800995c <mg_mgr_init+0x100>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	4b16      	ldr	r3, [pc, #88]	@ (800994c <mg_mgr_init+0xf0>)
 80098f2:	715a      	strb	r2, [r3, #5]
 80098f4:	4915      	ldr	r1, [pc, #84]	@ (800994c <mg_mgr_init+0xf0>)
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f002 fe44 	bl	800c584 <mg_tcpip_init>
 80098fc:	4b18      	ldr	r3, [pc, #96]	@ (8009960 <mg_mgr_init+0x104>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b01      	cmp	r3, #1
 8009902:	dd0b      	ble.n	800991c <mg_mgr_init+0xc0>
 8009904:	4b17      	ldr	r3, [pc, #92]	@ (8009964 <mg_mgr_init+0x108>)
 8009906:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 800990a:	4917      	ldr	r1, [pc, #92]	@ (8009968 <mg_mgr_init+0x10c>)
 800990c:	2002      	movs	r0, #2
 800990e:	f7fe f9a7 	bl	8007c60 <mg_log_prefix>
 8009912:	4a0e      	ldr	r2, [pc, #56]	@ (800994c <mg_mgr_init+0xf0>)
 8009914:	4915      	ldr	r1, [pc, #84]	@ (800996c <mg_mgr_init+0x110>)
 8009916:	4816      	ldr	r0, [pc, #88]	@ (8009970 <mg_mgr_init+0x114>)
 8009918:	f7fe f9f2 	bl	8007d00 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f04f 32ff 	mov.w	r2, #4294967295
 8009922:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800992a:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a11      	ldr	r2, [pc, #68]	@ (8009974 <mg_mgr_init+0x118>)
 8009930:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a10      	ldr	r2, [pc, #64]	@ (8009978 <mg_mgr_init+0x11c>)
 8009936:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f008 fc69 	bl	8012210 <mg_tls_ctx_init>
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	24003df4 	.word	0x24003df4
 800994c:	24003e00 	.word	0x24003e00
 8009950:	24000268 	.word	0x24000268
 8009954:	1ff1e800 	.word	0x1ff1e800
 8009958:	1ff1e804 	.word	0x1ff1e804
 800995c:	1ff1e808 	.word	0x1ff1e808
 8009960:	24000240 	.word	0x24000240
 8009964:	0802a758 	.word	0x0802a758
 8009968:	08027148 	.word	0x08027148
 800996c:	0800d649 	.word	0x0800d649
 8009970:	080281e8 	.word	0x080281e8
 8009974:	08028200 	.word	0x08028200
 8009978:	08028214 	.word	0x08028214

0800997c <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <mg_tcpip_call+0x20>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	4798      	blx	r3
}
 800999c:	bf00      	nop
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	441a      	add	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	68fc      	ldr	r4, [r7, #12]
 80099c0:	463b      	mov	r3, r7
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f005 f830 	bl	800ea2a <mg_str_n>
 80099ca:	f104 0308 	add.w	r3, r4, #8
 80099ce:	463a      	mov	r2, r7
 80099d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd90      	pop	{r4, r7, pc}

080099e0 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	e014      	b.n	8009a20 <csumup+0x40>
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <csumup+0x2a>
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	e004      	b.n	8009a14 <csumup+0x34>
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	4413      	add	r3, r2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	021b      	lsls	r3, r3, #8
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4413      	add	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d3e6      	bcc.n	80099f6 <csumup+0x16>
  return sum;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8009a3e:	e005      	b.n	8009a4c <csumfin+0x16>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	0c1b      	lsrs	r3, r3, #16
 8009a48:	4413      	add	r3, r2
 8009a4a:	607b      	str	r3, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f5      	bne.n	8009a40 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	43db      	mvns	r3, r3
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f00d fe82 	bl	8017766 <mg_ntohs>
 8009a62:	4603      	mov	r3, r0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	f7ff ffb0 	bl	80099e0 <csumup>
 8009a80:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7ff ffd7 	bl	8009a36 <csumfin>
 8009a88:	4603      	mov	r3, r0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8009a94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af02      	add	r7, sp, #8
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aa8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	33b0      	adds	r3, #176	@ 0xb0
 8009aae:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d013      	beq.n	8009ade <settmout+0x4a>
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d00e      	beq.n	8009ada <settmout+0x46>
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d008      	beq.n	8009ad4 <settmout+0x40>
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d102      	bne.n	8009ace <settmout+0x3a>
 8009ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009acc:	e008      	b.n	8009ae0 <settmout+0x4c>
 8009ace:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8009ad2:	e005      	b.n	8009ae0 <settmout+0x4c>
 8009ad4:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8009ad8:	e002      	b.n	8009ae0 <settmout+0x4c>
 8009ada:	2364      	movs	r3, #100	@ 0x64
 8009adc:	e000      	b.n	8009ae0 <settmout+0x4c>
 8009ade:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 8009ae0:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	2000      	movs	r0, #0
 8009aec:	460c      	mov	r4, r1
 8009aee:	4605      	mov	r5, r0
 8009af0:	eb12 0804 	adds.w	r8, r2, r4
 8009af4:	eb43 0905 	adc.w	r9, r3, r5
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8009b04:	4b0d      	ldr	r3, [pc, #52]	@ (8009b3c <settmout+0xa8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	dd12      	ble.n	8009b32 <settmout+0x9e>
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <settmout+0xac>)
 8009b0e:	f241 42a5 	movw	r2, #5285	@ 0x14a5
 8009b12:	490c      	ldr	r1, [pc, #48]	@ (8009b44 <settmout+0xb0>)
 8009b14:	2004      	movs	r0, #4
 8009b16:	f7fe f8a3 	bl	8007c60 <mg_log_prefix>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009b1e:	78f8      	ldrb	r0, [r7, #3]
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b26:	e9cd 2300 	strd	r2, r3, [sp]
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	4806      	ldr	r0, [pc, #24]	@ (8009b48 <settmout+0xb4>)
 8009b2e:	f7fe f8e7 	bl	8007d00 <mg_log>
}
 8009b32:	bf00      	nop
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b3c:	24000240 	.word	0x24000240
 8009b40:	0802a764 	.word	0x0802a764
 8009b44:	08027148 	.word	0x08027148
 8009b48:	08028234 	.word	0x08028234

08009b4c <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6950      	ldr	r0, [r2, #20]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	4798      	blx	r3
 8009b66:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d104      	bne.n	8009b7a <ether_output+0x2e>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	330e      	adds	r3, #14
 8009b9a:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2206      	movs	r2, #6
 8009ba0:	21ff      	movs	r1, #255	@ 0xff
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f019 fd6e 	bl	8023684 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	3306      	adds	r3, #6
 8009bac:	68f9      	ldr	r1, [r7, #12]
 8009bae:	2206      	movs	r2, #6
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f019 fe5c 	bl	802386e <memcpy>
  eth->type = mg_htons(0x806);
 8009bb6:	f640 0006 	movw	r0, #2054	@ 0x806
 8009bba:	f00d fdd4 	bl	8017766 <mg_ntohs>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8009bc6:	221c      	movs	r2, #28
 8009bc8:	2100      	movs	r1, #0
 8009bca:	6938      	ldr	r0, [r7, #16]
 8009bcc:	f019 fd5a 	bl	8023684 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f00d fdc8 	bl	8017766 <mg_ntohs>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	801a      	strh	r2, [r3, #0]
 8009bde:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009be2:	f00d fdc0 	bl	8017766 <mg_ntohs>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	805a      	strh	r2, [r3, #2]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2206      	movs	r2, #6
 8009bf2:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	f00d fdb3 	bl	8017766 <mg_ntohs>
 8009c00:	4603      	mov	r3, r0
 8009c02:	461a      	mov	r2, r3
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	80da      	strh	r2, [r3, #6]
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	619a      	str	r2, [r3, #24]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	68f9      	ldr	r1, [r7, #12]
 8009c1e:	2206      	movs	r2, #6
 8009c20:	4618      	mov	r0, r3
 8009c22:	f019 fe24 	bl	802386e <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d006      	beq.n	8009c3a <mg_tcpip_arp_request+0xb6>
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3312      	adds	r3, #18
 8009c30:	2206      	movs	r2, #6
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f019 fe1a 	bl	802386e <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f103 021c 	add.w	r2, r3, #28
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff ff80 	bl	8009b4c <ether_output>
}
 8009c4c:	bf00      	nop
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d135      	bne.n	8009cd2 <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8009c66:	4b45      	ldr	r3, [pc, #276]	@ (8009d7c <onstatechange+0x128>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	dd0d      	ble.n	8009c8a <onstatechange+0x36>
 8009c6e:	4b44      	ldr	r3, [pc, #272]	@ (8009d80 <onstatechange+0x12c>)
 8009c70:	f241 42bf 	movw	r2, #5311	@ 0x14bf
 8009c74:	4943      	ldr	r1, [pc, #268]	@ (8009d84 <onstatechange+0x130>)
 8009c76:	2002      	movs	r0, #2
 8009c78:	f7fd fff2 	bl	8007c60 <mg_log_prefix>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	461a      	mov	r2, r3
 8009c82:	4941      	ldr	r1, [pc, #260]	@ (8009d88 <onstatechange+0x134>)
 8009c84:	4841      	ldr	r0, [pc, #260]	@ (8009d8c <onstatechange+0x138>)
 8009c86:	f7fe f83b 	bl	8007d00 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8009c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8009d7c <onstatechange+0x128>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	dd0d      	ble.n	8009cae <onstatechange+0x5a>
 8009c92:	4b3b      	ldr	r3, [pc, #236]	@ (8009d80 <onstatechange+0x12c>)
 8009c94:	f44f 52a6 	mov.w	r2, #5312	@ 0x14c0
 8009c98:	493a      	ldr	r1, [pc, #232]	@ (8009d84 <onstatechange+0x130>)
 8009c9a:	2002      	movs	r0, #2
 8009c9c:	f7fd ffe0 	bl	8007c60 <mg_log_prefix>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3310      	adds	r3, #16
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4938      	ldr	r1, [pc, #224]	@ (8009d88 <onstatechange+0x134>)
 8009ca8:	4839      	ldr	r0, [pc, #228]	@ (8009d90 <onstatechange+0x13c>)
 8009caa:	f7fe f829 	bl	8007d00 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8009cae:	4b33      	ldr	r3, [pc, #204]	@ (8009d7c <onstatechange+0x128>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	dd57      	ble.n	8009d66 <onstatechange+0x112>
 8009cb6:	4b32      	ldr	r3, [pc, #200]	@ (8009d80 <onstatechange+0x12c>)
 8009cb8:	f241 42c1 	movw	r2, #5313	@ 0x14c1
 8009cbc:	4931      	ldr	r1, [pc, #196]	@ (8009d84 <onstatechange+0x130>)
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	f7fd ffce 	bl	8007c60 <mg_log_prefix>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4932      	ldr	r1, [pc, #200]	@ (8009d94 <onstatechange+0x140>)
 8009cca:	4833      	ldr	r0, [pc, #204]	@ (8009d98 <onstatechange+0x144>)
 8009ccc:	f7fe f818 	bl	8007d00 <mg_log>
 8009cd0:	e049      	b.n	8009d66 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d115      	bne.n	8009d08 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 8009cdc:	4b27      	ldr	r3, [pc, #156]	@ (8009d7c <onstatechange+0x128>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dd09      	ble.n	8009cf8 <onstatechange+0xa4>
 8009ce4:	4b26      	ldr	r3, [pc, #152]	@ (8009d80 <onstatechange+0x12c>)
 8009ce6:	f241 42c3 	movw	r2, #5315	@ 0x14c3
 8009cea:	4926      	ldr	r1, [pc, #152]	@ (8009d84 <onstatechange+0x130>)
 8009cec:	2001      	movs	r0, #1
 8009cee:	f7fd ffb7 	bl	8007c60 <mg_log_prefix>
 8009cf2:	482a      	ldr	r0, [pc, #168]	@ (8009d9c <onstatechange+0x148>)
 8009cf4:	f7fe f804 	bl	8007d00 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff ff3f 	bl	8009b84 <mg_tcpip_arp_request>
 8009d06:	e02e      	b.n	8009d66 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d116      	bne.n	8009d40 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 8009d12:	4b1a      	ldr	r3, [pc, #104]	@ (8009d7c <onstatechange+0x128>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dd09      	ble.n	8009d2e <onstatechange+0xda>
 8009d1a:	4b19      	ldr	r3, [pc, #100]	@ (8009d80 <onstatechange+0x12c>)
 8009d1c:	f241 42c6 	movw	r2, #5318	@ 0x14c6
 8009d20:	4918      	ldr	r1, [pc, #96]	@ (8009d84 <onstatechange+0x130>)
 8009d22:	2001      	movs	r0, #1
 8009d24:	f7fd ff9c 	bl	8007c60 <mg_log_prefix>
 8009d28:	481d      	ldr	r0, [pc, #116]	@ (8009da0 <onstatechange+0x14c>)
 8009d2a:	f7fd ffe9 	bl	8007d00 <mg_log>
    srand((unsigned int) mg_millis());
 8009d2e:	f7f6 ffbf 	bl	8000cb0 <mg_millis>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4613      	mov	r3, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f018 fb01 	bl	8022340 <srand>
 8009d3e:	e012      	b.n	8009d66 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10d      	bne.n	8009d66 <onstatechange+0x112>
    MG_ERROR(("Link down"));
 8009d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d7c <onstatechange+0x128>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd09      	ble.n	8009d66 <onstatechange+0x112>
 8009d52:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <onstatechange+0x12c>)
 8009d54:	f241 42c9 	movw	r2, #5321	@ 0x14c9
 8009d58:	490a      	ldr	r1, [pc, #40]	@ (8009d84 <onstatechange+0x130>)
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	f7fd ff80 	bl	8007c60 <mg_log_prefix>
 8009d60:	4810      	ldr	r0, [pc, #64]	@ (8009da4 <onstatechange+0x150>)
 8009d62:	f7fd ffcd 	bl	8007d00 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	337c      	adds	r3, #124	@ 0x7c
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fe04 	bl	800997c <mg_tcpip_call>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	24000240 	.word	0x24000240
 8009d80:	0802a770 	.word	0x0802a770
 8009d84:	08027148 	.word	0x08027148
 8009d88:	0800d585 	.word	0x0800d585
 8009d8c:	08028244 	.word	0x08028244
 8009d90:	08028254 	.word	0x08028254
 8009d94:	0800d649 	.word	0x0800d649
 8009d98:	08028264 	.word	0x08028264
 8009d9c:	08028274 	.word	0x08028274
 8009da0:	0802827c 	.word	0x0802827c
 8009da4:	08028284 	.word	0x08028284

08009da8 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	4613      	mov	r3, r2
 8009db6:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	330e      	adds	r3, #14
 8009dc2:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2206      	movs	r2, #6
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f019 fd4f 	bl	802386e <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	3306      	adds	r3, #6
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	2206      	movs	r2, #6
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f019 fd48 	bl	802386e <memcpy>
  eth->type = mg_htons(0x800);
 8009dde:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009de2:	f00d fcc0 	bl	8017766 <mg_ntohs>
 8009de6:	4603      	mov	r3, r0
 8009de8:	461a      	mov	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 8009dee:	2214      	movs	r2, #20
 8009df0:	2100      	movs	r1, #0
 8009df2:	6938      	ldr	r0, [r7, #16]
 8009df4:	f019 fc46 	bl	8023684 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2245      	movs	r2, #69	@ 0x45
 8009dfc:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 8009dfe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009e02:	f00d fcb0 	bl	8017766 <mg_ntohs>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3314      	adds	r3, #20
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4618      	mov	r0, r3
 8009e18:	f00d fca5 	bl	8017766 <mg_ntohs>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	461a      	mov	r2, r3
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2240      	movs	r2, #64	@ 0x40
 8009e28:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	79fa      	ldrb	r2, [r7, #7]
 8009e2e:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	6a3a      	ldr	r2, [r7, #32]
 8009e3a:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8009e3c:	2114      	movs	r1, #20
 8009e3e:	6938      	ldr	r0, [r7, #16]
 8009e40:	f7ff fe14 	bl	8009a6c <ipcsum>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	815a      	strh	r2, [r3, #10]
  return ip;
 8009e4c:	693b      	ldr	r3, [r7, #16]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b08a      	sub	sp, #40	@ 0x28
 8009e5a:	af02      	add	r7, sp, #8
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	607a      	str	r2, [r7, #4]
 8009e62:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8009e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e66:	3308      	adds	r3, #8
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2211      	movs	r2, #17
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f7ff ff97 	bl	8009da8 <tx_ip>
 8009e7a:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	3314      	adds	r3, #20
 8009e80:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	887a      	ldrh	r2, [r7, #2]
 8009e86:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009e8c:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3308      	adds	r3, #8
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	4618      	mov	r0, r3
 8009e98:	f00d fc65 	bl	8017766 <mg_ntohs>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	719a      	strb	r2, [r3, #6]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8009eae:	2208      	movs	r2, #8
 8009eb0:	69b9      	ldr	r1, [r7, #24]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	f7ff fd94 	bl	80099e0 <csumup>
 8009eb8:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8009eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ebc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ebe:	6978      	ldr	r0, [r7, #20]
 8009ec0:	f7ff fd8e 	bl	80099e0 <csumup>
 8009ec4:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	2204      	movs	r2, #4
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6978      	ldr	r0, [r7, #20]
 8009ed0:	f7ff fd86 	bl	80099e0 <csumup>
 8009ed4:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	3310      	adds	r3, #16
 8009eda:	2204      	movs	r2, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	6978      	ldr	r0, [r7, #20]
 8009ee0:	f7ff fd7e 	bl	80099e0 <csumup>
 8009ee4:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	7a5b      	ldrb	r3, [r3, #9]
 8009eea:	461a      	mov	r2, r3
 8009eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eee:	441a      	add	r2, r3
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8009ef8:	6978      	ldr	r0, [r7, #20]
 8009efa:	f7ff fd9c 	bl	8009a36 <csumfin>
 8009efe:	4603      	mov	r3, r0
 8009f00:	461a      	mov	r2, r3
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f019 fb9e 	bl	8023650 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8009f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f16:	332a      	adds	r3, #42	@ 0x2a
 8009f18:	4619      	mov	r1, r3
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff fe16 	bl	8009b4c <ether_output>
}
 8009f20:	bf00      	nop
 8009f22:	3720      	adds	r7, #32
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8009f28:	b5b0      	push	{r4, r5, r7, lr}
 8009f2a:	b0cc      	sub	sp, #304	@ 0x130
 8009f2c:	af04      	add	r7, sp, #16
 8009f2e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8009f32:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8009f36:	6020      	str	r0, [r4, #0]
 8009f38:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8009f3c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8009f40:	6001      	str	r1, [r0, #0]
 8009f42:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8009f46:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8009f4a:	600a      	str	r2, [r1, #0]
 8009f4c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8009f50:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8009f54:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8009f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f5e:	4a38      	ldr	r2, [pc, #224]	@ (800a040 <tx_dhcp+0x118>)
 8009f60:	4618      	mov	r0, r3
 8009f62:	4611      	mov	r1, r2
 8009f64:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f68:	461a      	mov	r2, r3
 8009f6a:	f019 fc80 	bl	802386e <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8009f6e:	4835      	ldr	r0, [pc, #212]	@ (800a044 <tx_dhcp+0x11c>)
 8009f70:	f00d fbe0 	bl	8017734 <mg_ntohl>
 8009f74:	4602      	mov	r2, r0
 8009f76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f7e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8009f82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	f107 0310 	add.w	r3, r7, #16
 8009f90:	331c      	adds	r3, #28
 8009f92:	2206      	movs	r2, #6
 8009f94:	4618      	mov	r0, r3
 8009f96:	f019 fc6a 	bl	802386e <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8009f9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009fae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fb2:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8009fb4:	f107 0310 	add.w	r3, r7, #16
 8009fb8:	33f0      	adds	r3, #240	@ 0xf0
 8009fba:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009fbe:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f019 fc53 	bl	802386e <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8009fc8:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <tx_dhcp+0xbc>
 8009fd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009fd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fd8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8009fdc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8009fe4:	2044      	movs	r0, #68	@ 0x44
 8009fe6:	f00d fbbe 	bl	8017766 <mg_ntohs>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461d      	mov	r5, r3
 8009fee:	2043      	movs	r0, #67	@ 0x43
 8009ff0:	f00d fbb9 	bl	8017766 <mg_ntohs>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461c      	mov	r4, r3
 8009ff8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ffc:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800a000:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a004:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 800a008:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a00c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800a010:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	f107 0310 	add.w	r3, r7, #16
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	9401      	str	r4, [sp, #4]
 800a01e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a022:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	462b      	mov	r3, r5
 800a02c:	6812      	ldr	r2, [r2, #0]
 800a02e:	6809      	ldr	r1, [r1, #0]
 800a030:	6800      	ldr	r0, [r0, #0]
 800a032:	f7ff ff10 	bl	8009e56 <tx_udp>
         sizeof(dhcp));
}
 800a036:	bf00      	nop
 800a038:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bdb0      	pop	{r4, r5, r7, pc}
 800a040:	08028290 	.word	0x08028290
 800a044:	63825363 	.word	0x63825363

0800a048 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800a048:	b5b0      	push	{r4, r5, r7, lr}
 800a04a:	b090      	sub	sp, #64	@ 0x40
 800a04c:	af04      	add	r7, sp, #16
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800a054:	4b31      	ldr	r3, [pc, #196]	@ (800a11c <tx_dhcp_request_sel+0xd4>)
 800a056:	f107 0414 	add.w	r4, r7, #20
 800a05a:	461d      	mov	r5, r3
 800a05c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a05e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a064:	c403      	stmia	r4!, {r0, r1}
 800a066:	8022      	strh	r2, [r4, #0]
 800a068:	3402      	adds	r4, #2
 800a06a:	0c13      	lsrs	r3, r2, #16
 800a06c:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 800a074:	f107 0314 	add.w	r3, r7, #20
 800a078:	330a      	adds	r3, #10
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 800a07e:	f107 0314 	add.w	r3, r7, #20
 800a082:	3310      	adds	r3, #16
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	7fdb      	ldrb	r3, [r3, #31]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <tx_dhcp_request_sel+0x5e>
 800a090:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800a09a:	3318      	adds	r3, #24
 800a09c:	3330      	adds	r3, #48	@ 0x30
 800a09e:	443b      	add	r3, r7
 800a0a0:	2206      	movs	r2, #6
 800a0a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00a      	beq.n	800a0c6 <tx_dhcp_request_sel+0x7e>
 800a0b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800a0ba:	3318      	adds	r3, #24
 800a0bc:	3330      	adds	r3, #48	@ 0x30
 800a0be:	443b      	add	r3, r7
 800a0c0:	222a      	movs	r2, #42	@ 0x2a
 800a0c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 800a0c6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800a0ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0ce:	4413      	add	r3, r2
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 800a0d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0da:	3319      	adds	r3, #25
 800a0dc:	2200      	movs	r2, #0
 800a0de:	9202      	str	r2, [sp, #8]
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	f107 0314 	add.w	r3, r7, #20
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	490c      	ldr	r1, [pc, #48]	@ (800a120 <tx_dhcp_request_sel+0xd8>)
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff ff19 	bl	8009f28 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a124 <tx_dhcp_request_sel+0xdc>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	dd09      	ble.n	800a112 <tx_dhcp_request_sel+0xca>
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <tx_dhcp_request_sel+0xe0>)
 800a100:	f241 521b 	movw	r2, #5403	@ 0x151b
 800a104:	4909      	ldr	r1, [pc, #36]	@ (800a12c <tx_dhcp_request_sel+0xe4>)
 800a106:	2003      	movs	r0, #3
 800a108:	f7fd fdaa 	bl	8007c60 <mg_log_prefix>
 800a10c:	4808      	ldr	r0, [pc, #32]	@ (800a130 <tx_dhcp_request_sel+0xe8>)
 800a10e:	f7fd fdf7 	bl	8007d00 <mg_log>
}
 800a112:	bf00      	nop
 800a114:	3730      	adds	r7, #48	@ 0x30
 800a116:	46bd      	mov	sp, r7
 800a118:	bdb0      	pop	{r4, r5, r7, pc}
 800a11a:	bf00      	nop
 800a11c:	080283b0 	.word	0x080283b0
 800a120:	0802a47c 	.word	0x0802a47c
 800a124:	24000240 	.word	0x24000240
 800a128:	0802a780 	.word	0x0802a780
 800a12c:	08027148 	.word	0x08027148
 800a130:	080283a0 	.word	0x080283a0

0800a134 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	@ 0x28
 800a138:	af04      	add	r7, sp, #16
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800a142:	4b10      	ldr	r3, [pc, #64]	@ (800a184 <tx_dhcp_request_re+0x50>)
 800a144:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800a146:	2301      	movs	r3, #1
 800a148:	9302      	str	r3, [sp, #8]
 800a14a:	2304      	movs	r3, #4
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	f107 0314 	add.w	r3, r7, #20
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	68b9      	ldr	r1, [r7, #8]
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f7ff fee4 	bl	8009f28 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a160:	4b09      	ldr	r3, [pc, #36]	@ (800a188 <tx_dhcp_request_re+0x54>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b02      	cmp	r3, #2
 800a166:	dd09      	ble.n	800a17c <tx_dhcp_request_re+0x48>
 800a168:	4b08      	ldr	r3, [pc, #32]	@ (800a18c <tx_dhcp_request_re+0x58>)
 800a16a:	f241 5226 	movw	r2, #5414	@ 0x1526
 800a16e:	4908      	ldr	r1, [pc, #32]	@ (800a190 <tx_dhcp_request_re+0x5c>)
 800a170:	2003      	movs	r0, #3
 800a172:	f7fd fd75 	bl	8007c60 <mg_log_prefix>
 800a176:	4807      	ldr	r0, [pc, #28]	@ (800a194 <tx_dhcp_request_re+0x60>)
 800a178:	f7fd fdc2 	bl	8007d00 <mg_log>
}
 800a17c:	bf00      	nop
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	ff030135 	.word	0xff030135
 800a188:	24000240 	.word	0x24000240
 800a18c:	0802a794 	.word	0x0802a794
 800a190:	08027148 	.word	0x08027148
 800a194:	080283a0 	.word	0x080283a0

0800a198 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af04      	add	r7, sp, #16
 800a19e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800a1a0:	4a14      	ldr	r2, [pc, #80]	@ (800a1f4 <tx_dhcp_discover+0x5c>)
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1aa:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9302      	str	r3, [sp, #8]
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	f107 0308 	add.w	r3, r7, #8
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	490d      	ldr	r1, [pc, #52]	@ (800a1f8 <tx_dhcp_discover+0x60>)
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff feaf 	bl	8009f28 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <tx_dhcp_discover+0x64>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	dd0c      	ble.n	800a1ec <tx_dhcp_discover+0x54>
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a200 <tx_dhcp_discover+0x68>)
 800a1d4:	f241 5230 	movw	r2, #5424	@ 0x1530
 800a1d8:	490a      	ldr	r1, [pc, #40]	@ (800a204 <tx_dhcp_discover+0x6c>)
 800a1da:	2003      	movs	r0, #3
 800a1dc:	f7fd fd40 	bl	8007c60 <mg_log_prefix>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4908      	ldr	r1, [pc, #32]	@ (800a208 <tx_dhcp_discover+0x70>)
 800a1e6:	4809      	ldr	r0, [pc, #36]	@ (800a20c <tx_dhcp_discover+0x74>)
 800a1e8:	f7fd fd8a 	bl	8007d00 <mg_log>
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	080283ec 	.word	0x080283ec
 800a1f8:	0802a47c 	.word	0x0802a47c
 800a1fc:	24000240 	.word	0x24000240
 800a200:	0802a7a8 	.word	0x0802a7a8
 800a204:	08027148 	.word	0x08027148
 800a208:	0800d649 	.word	0x0800d649
 800a20c:	080283cc 	.word	0x080283cc

0800a210 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e057      	b.n	800a2da <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <getpeer+0x4c>
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00c      	beq.n	800a25c <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	f103 000e 	add.w	r0, r3, #14
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	331c      	adds	r3, #28
 800a24e:	2204      	movs	r2, #4
 800a250:	4619      	mov	r1, r3
 800a252:	f019 f9ed 	bl	8023630 <memcmp>
 800a256:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d042      	beq.n	800a2e2 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <getpeer+0x74>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a270:	2b00      	cmp	r3, #0
 800a272:	d007      	beq.n	800a284 <getpeer+0x74>
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	8b1a      	ldrh	r2, [r3, #24]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27c:	885b      	ldrh	r3, [r3, #2]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	429a      	cmp	r2, r3
 800a282:	d030      	beq.n	800a2e6 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d11f      	bne.n	800a2d4 <getpeer+0xc4>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01b      	beq.n	800a2d4 <getpeer+0xc4>
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	8b1a      	ldrh	r2, [r3, #24]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d113      	bne.n	800a2d4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a2b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a2b6:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a2b8:	79fa      	ldrb	r2, [r7, #7]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d10a      	bne.n	800a2d4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d111      	bne.n	800a2e8 <getpeer+0xd8>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d009      	beq.n	800a2e8 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	617b      	str	r3, [r7, #20]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1a4      	bne.n	800a22a <getpeer+0x1a>
 800a2e0:	e002      	b.n	800a2e8 <getpeer+0xd8>
      break;
 800a2e2:	bf00      	nop
 800a2e4:	e000      	b.n	800a2e8 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a2e6:	bf00      	nop
      break;
  }
  return c;
 800a2e8:	697b      	ldr	r3, [r7, #20]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a2f4:	b5b0      	push	{r4, r5, r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af02      	add	r7, sp, #8
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	88db      	ldrh	r3, [r3, #6]
 800a304:	b29c      	uxth	r4, r3
 800a306:	2001      	movs	r0, #1
 800a308:	f00d fa2d 	bl	8017766 <mg_ntohs>
 800a30c:	4603      	mov	r3, r0
 800a30e:	429c      	cmp	r4, r3
 800a310:	d176      	bne.n	800a400 <rx_arp+0x10c>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	699a      	ldr	r2, [r3, #24]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d16f      	bne.n	800a400 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	330e      	adds	r3, #14
 800a32a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800a32c:	6978      	ldr	r0, [r7, #20]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	3306      	adds	r3, #6
 800a334:	2206      	movs	r2, #6
 800a336:	4619      	mov	r1, r3
 800a338:	f019 fa99 	bl	802386e <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	3306      	adds	r3, #6
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	2206      	movs	r2, #6
 800a344:	4618      	mov	r0, r3
 800a346:	f019 fa92 	bl	802386e <memcpy>
    eth->type = mg_htons(0x806);
 800a34a:	f640 0006 	movw	r0, #2054	@ 0x806
 800a34e:	f00d fa0a 	bl	8017766 <mg_ntohs>
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	699a      	ldr	r2, [r3, #24]
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6814      	ldr	r4, [r2, #0]
 800a362:	6850      	ldr	r0, [r2, #4]
 800a364:	6891      	ldr	r1, [r2, #8]
 800a366:	68d5      	ldr	r5, [r2, #12]
 800a368:	601c      	str	r4, [r3, #0]
 800a36a:	6058      	str	r0, [r3, #4]
 800a36c:	6099      	str	r1, [r3, #8]
 800a36e:	60dd      	str	r5, [r3, #12]
 800a370:	6914      	ldr	r4, [r2, #16]
 800a372:	6950      	ldr	r0, [r2, #20]
 800a374:	6991      	ldr	r1, [r2, #24]
 800a376:	611c      	str	r4, [r3, #16]
 800a378:	6158      	str	r0, [r3, #20]
 800a37a:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800a37c:	2002      	movs	r0, #2
 800a37e:	f00d f9f2 	bl	8017766 <mg_ntohs>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f103 0012 	add.w	r0, r3, #18
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	3308      	adds	r3, #8
 800a396:	2206      	movs	r2, #6
 800a398:	4619      	mov	r1, r3
 800a39a:	f019 fa68 	bl	802386e <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f019 fa61 	bl	802386e <memcpy>
    arp->tpa = pkt->arp->spa;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800a3c2:	4b4e      	ldr	r3, [pc, #312]	@ (800a4fc <rx_arp+0x208>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	dd10      	ble.n	800a3ec <rx_arp+0xf8>
 800a3ca:	4b4d      	ldr	r3, [pc, #308]	@ (800a500 <rx_arp+0x20c>)
 800a3cc:	f241 5254 	movw	r2, #5460	@ 0x1554
 800a3d0:	494c      	ldr	r1, [pc, #304]	@ (800a504 <rx_arp+0x210>)
 800a3d2:	2003      	movs	r0, #3
 800a3d4:	f7fd fc44 	bl	8007c60 <mg_log_prefix>
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f103 0218 	add.w	r2, r3, #24
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	4b49      	ldr	r3, [pc, #292]	@ (800a508 <rx_arp+0x214>)
 800a3e4:	4949      	ldr	r1, [pc, #292]	@ (800a50c <rx_arp+0x218>)
 800a3e6:	484a      	ldr	r0, [pc, #296]	@ (800a510 <rx_arp+0x21c>)
 800a3e8:	f7fd fc8a 	bl	8007d00 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f103 021c 	add.w	r2, r3, #28
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff fba7 	bl	8009b4c <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a3fe:	e079      	b.n	800a4f4 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	88db      	ldrh	r3, [r3, #6]
 800a406:	b29c      	uxth	r4, r3
 800a408:	2002      	movs	r0, #2
 800a40a:	f00d f9ac 	bl	8017766 <mg_ntohs>
 800a40e:	4603      	mov	r3, r0
 800a410:	429c      	cmp	r4, r3
 800a412:	d16f      	bne.n	800a4f4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	3312      	adds	r3, #18
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	2206      	movs	r2, #6
 800a41e:	4618      	mov	r0, r3
 800a420:	f019 f906 	bl	8023630 <memcmp>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d163      	bne.n	800a4f2 <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	429a      	cmp	r2, r3
 800a438:	d116      	bne.n	800a468 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	3308      	adds	r3, #8
 800a446:	2206      	movs	r2, #6
 800a448:	4619      	mov	r1, r3
 800a44a:	f019 fa10 	bl	802386e <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a454:	2b03      	cmp	r3, #3
 800a456:	d14d      	bne.n	800a4f4 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2204      	movs	r2, #4
 800a45c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        onstatechange(ifp);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff fbf7 	bl	8009c54 <onstatechange>
 800a466:	e045      	b.n	800a4f4 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a46c:	2200      	movs	r2, #0
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff fecd 	bl	800a210 <getpeer>
 800a476:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d03a      	beq.n	800a4f4 <rx_arp+0x200>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d032      	beq.n	800a4f4 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	33b0      	adds	r3, #176	@ 0xb0
 800a492:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f103 0018 	add.w	r0, r3, #24
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	2206      	movs	r2, #6
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	f019 f9e3 	bl	802386e <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800a4a8:	4b14      	ldr	r3, [pc, #80]	@ (800a4fc <rx_arp+0x208>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	dd15      	ble.n	800a4dc <rx_arp+0x1e8>
 800a4b0:	4b13      	ldr	r3, [pc, #76]	@ (800a500 <rx_arp+0x20c>)
 800a4b2:	f241 5265 	movw	r2, #5477	@ 0x1565
 800a4b6:	4913      	ldr	r1, [pc, #76]	@ (800a504 <rx_arp+0x210>)
 800a4b8:	2003      	movs	r0, #3
 800a4ba:	f7fd fbd1 	bl	8007c60 <mg_log_prefix>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f103 021c 	add.w	r2, r3, #28
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	3318      	adds	r3, #24
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a508 <rx_arp+0x214>)
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a50c <rx_arp+0x218>)
 800a4d6:	480f      	ldr	r0, [pc, #60]	@ (800a514 <rx_arp+0x220>)
 800a4d8:	f7fd fc12 	bl	8007d00 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800a4e2:	f36f 1304 	bfc	r3, #4, #1
 800a4e6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f002 f959 	bl	800c7a2 <mac_resolved>
 800a4f0:	e000      	b.n	800a4f4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a4f2:	bf00      	nop
      }
    }
  }
}
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	24000240 	.word	0x24000240
 800a500:	0802a7bc 	.word	0x0802a7bc
 800a504:	08027148 	.word	0x08027148
 800a508:	0800d649 	.word	0x0800d649
 800a50c:	0800d585 	.word	0x0800d585
 800a510:	080283f4 	.word	0x080283f4
 800a514:	0802840c 	.word	0x0802840c

0800a518 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	@ 0x28
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d14d      	bne.n	800a5c8 <rx_icmp+0xb0>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d049      	beq.n	800a5c8 <rx_icmp+0xb0>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d142      	bne.n	800a5c8 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800a542:	2326      	movs	r3, #38	@ 0x26
 800a544:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d901      	bls.n	800a562 <rx_icmp+0x4a>
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	1d99      	adds	r1, r3, #6
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6898      	ldr	r0, [r3, #8]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	3204      	adds	r2, #4
 800a576:	9201      	str	r2, [sp, #4]
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4603      	mov	r3, r0
 800a57c:	2201      	movs	r2, #1
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7ff fc12 	bl	8009da8 <tx_ip>
 800a584:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	3314      	adds	r3, #20
 800a58a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800a58c:	2204      	movs	r2, #4
 800a58e:	2100      	movs	r1, #0
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f019 f877 	bl	8023684 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1d18      	adds	r0, r3, #4
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f019 f964 	bl	802386e <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fa5d 	bl	8009a6c <ipcsum>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800a5ba:	69ba      	ldr	r2, [r7, #24]
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	4413      	add	r3, r2
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff fac2 	bl	8009b4c <ether_output>
  }
}
 800a5c8:	bf00      	nop
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5d4:	b090      	sub	sp, #64	@ 0x40
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	623b      	str	r3, [r7, #32]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61fb      	str	r3, [r7, #28]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a600:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a608:	33f0      	adds	r3, #240	@ 0xf0
 800a60a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	4413      	add	r3, r2
 800a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a622:	429a      	cmp	r2, r3
 800a624:	f0c0 81ac 	bcc.w	800a980 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62c:	1d18      	adds	r0, r3, #4
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3302      	adds	r3, #2
 800a632:	2204      	movs	r2, #4
 800a634:	4619      	mov	r1, r3
 800a636:	f018 fffb 	bl	8023630 <memcmp>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f040 81a1 	bne.w	800a984 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a642:	e08a      	b.n	800a75a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800a644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d10e      	bne.n	800a66a <rx_dhcp_client+0x9a>
 800a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64e:	3301      	adds	r3, #1
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b04      	cmp	r3, #4
 800a654:	d109      	bne.n	800a66a <rx_dhcp_client+0x9a>
 800a656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a658:	3306      	adds	r3, #6
 800a65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d904      	bls.n	800a66a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800a660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a662:	3302      	adds	r3, #2
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
 800a668:	e070      	b.n	800a74c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800a66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d112      	bne.n	800a698 <rx_dhcp_client+0xc8>
 800a672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a674:	3301      	adds	r3, #1
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b04      	cmp	r3, #4
 800a67a:	d10d      	bne.n	800a698 <rx_dhcp_client+0xc8>
 800a67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67e:	3306      	adds	r3, #6
 800a680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a682:	429a      	cmp	r2, r3
 800a684:	d908      	bls.n	800a698 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800a686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a688:	3302      	adds	r3, #2
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a696:	e059      	b.n	800a74c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	7fdb      	ldrb	r3, [r3, #31]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d012      	beq.n	800a6c6 <rx_dhcp_client+0xf6>
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	2b06      	cmp	r3, #6
 800a6a6:	d10e      	bne.n	800a6c6 <rx_dhcp_client+0xf6>
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d109      	bne.n	800a6c6 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800a6b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d904      	bls.n	800a6c6 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6be:	3302      	adds	r3, #2
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	61fb      	str	r3, [r7, #28]
 800a6c4:	e042      	b.n	800a74c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d012      	beq.n	800a6f6 <rx_dhcp_client+0x126>
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d6:	d10e      	bne.n	800a6f6 <rx_dhcp_client+0x126>
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	3301      	adds	r3, #1
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d109      	bne.n	800a6f6 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800a6e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d904      	bls.n	800a6f6 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ee:	3302      	adds	r3, #2
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	e02a      	b.n	800a74c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	2b33      	cmp	r3, #51	@ 0x33
 800a6fc:	d114      	bne.n	800a728 <rx_dhcp_client+0x158>
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a700:	3301      	adds	r3, #1
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b04      	cmp	r3, #4
 800a706:	d10f      	bne.n	800a728 <rx_dhcp_client+0x158>
 800a708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70a:	3306      	adds	r3, #6
 800a70c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a70e:	429a      	cmp	r2, r3
 800a710:	d90a      	bls.n	800a728 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800a712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a714:	3302      	adds	r3, #2
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f00d f809 	bl	8017734 <mg_ntohl>
 800a722:	4603      	mov	r3, r0
 800a724:	623b      	str	r3, [r7, #32]
 800a726:	e011      	b.n	800a74c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800a728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b35      	cmp	r3, #53	@ 0x35
 800a72e:	d10d      	bne.n	800a74c <rx_dhcp_client+0x17c>
 800a730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a732:	3301      	adds	r3, #1
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d108      	bne.n	800a74c <rx_dhcp_client+0x17c>
 800a73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73c:	3306      	adds	r3, #6
 800a73e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a740:	429a      	cmp	r2, r3
 800a742:	d903      	bls.n	800a74c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800a744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a746:	789b      	ldrb	r3, [r3, #2]
 800a748:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800a74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74e:	3301      	adds	r3, #1
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	3302      	adds	r3, #2
 800a754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a756:	4413      	add	r3, r2
 800a758:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75c:	3301      	adds	r3, #1
 800a75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a760:	429a      	cmp	r2, r3
 800a762:	d904      	bls.n	800a76e <rx_dhcp_client+0x19e>
 800a764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2bff      	cmp	r3, #255	@ 0xff
 800a76a:	f47f af6b 	bne.w	800a644 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800a76e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a772:	2b06      	cmp	r3, #6
 800a774:	d10c      	bne.n	800a790 <rx_dhcp_client+0x1c0>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d107      	bne.n	800a790 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	609a      	str	r2, [r3, #8]
 800a78e:	e0ec      	b.n	800a96a <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800a790:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a794:	2b02      	cmp	r3, #2
 800a796:	d123      	bne.n	800a7e0 <rx_dhcp_client+0x210>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d11e      	bne.n	800a7e0 <rx_dhcp_client+0x210>
 800a7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01b      	beq.n	800a7e0 <rx_dhcp_client+0x210>
 800a7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d018      	beq.n	800a7e0 <rx_dhcp_client+0x210>
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d015      	beq.n	800a7e0 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	e002      	b.n	800a7cc <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fc39 	bl	800a048 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2202      	movs	r2, #2
 800a7da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800a7de:	e0c4      	b.n	800a96a <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800a7e0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a7e4:	2b05      	cmp	r3, #5
 800a7e6:	f040 80c0 	bne.w	800a96a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	f040 8081 	bne.w	800a8f8 <rx_dhcp_client+0x328>
 800a7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d07d      	beq.n	800a8f8 <rx_dhcp_client+0x328>
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d07a      	beq.n	800a8f8 <rx_dhcp_client+0x328>
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d077      	beq.n	800a8f8 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800a80e:	6a39      	ldr	r1, [r7, #32]
 800a810:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a814:	fb00 f101 	mul.w	r1, r0, r1
 800a818:	2000      	movs	r0, #0
 800a81a:	4688      	mov	r8, r1
 800a81c:	4681      	mov	r9, r0
 800a81e:	eb12 0108 	adds.w	r1, r2, r8
 800a822:	6039      	str	r1, [r7, #0]
 800a824:	eb43 0309 	adc.w	r3, r3, r9
 800a828:	607b      	str	r3, [r7, #4]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a830:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800a834:	4b56      	ldr	r3, [pc, #344]	@ (800a990 <rx_dhcp_client+0x3c0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	dd16      	ble.n	800a86a <rx_dhcp_client+0x29a>
 800a83c:	4b55      	ldr	r3, [pc, #340]	@ (800a994 <rx_dhcp_client+0x3c4>)
 800a83e:	f241 52a6 	movw	r2, #5542	@ 0x15a6
 800a842:	4955      	ldr	r1, [pc, #340]	@ (800a998 <rx_dhcp_client+0x3c8>)
 800a844:	2002      	movs	r0, #2
 800a846:	f7fd fa0b 	bl	8007c60 <mg_log_prefix>
 800a84a:	6a3c      	ldr	r4, [r7, #32]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800a852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a856:	f04f 0300 	mov.w	r3, #0
 800a85a:	f7f5 ffb5 	bl	80007c8 <__aeabi_uldivmod>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4621      	mov	r1, r4
 800a864:	484d      	ldr	r0, [pc, #308]	@ (800a99c <rx_dhcp_client+0x3cc>)
 800a866:	f7fd fa4b 	bl	8007d00 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	3306      	adds	r3, #6
 800a876:	2206      	movs	r2, #6
 800a878:	4619      	mov	r1, r3
 800a87a:	f018 fff8 	bl	802386e <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a882:	609a      	str	r2, [r3, #8]
 800a884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	611a      	str	r2, [r3, #16]
 800a88a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2203      	movs	r2, #3
 800a894:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800a898:	f107 0310 	add.w	r3, r7, #16
 800a89c:	2108      	movs	r1, #8
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f6 f9d8 	bl	8000c54 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800a8a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	f7f6 fa01 	bl	8000cb0 <mg_millis>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	4423      	add	r3, r4
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f017 fd42 	bl	8022340 <srand>
      if (ifp->enable_req_dns && dns != 0)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	7fdb      	ldrb	r3, [r3, #31]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <rx_dhcp_client+0x308>
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d006      	beq.n	800a8d8 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800a8ca:	f107 031c 	add.w	r3, r7, #28
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff f852 	bl	800997c <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d042      	beq.n	800a968 <rx_dhcp_client+0x398>
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d03f      	beq.n	800a968 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800a8e8:	f107 0318 	add.w	r3, r7, #24
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	2102      	movs	r1, #2
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7ff f843 	bl	800997c <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a8f6:	e037      	b.n	800a968 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d133      	bne.n	800a96a <rx_dhcp_client+0x39a>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a908:	429a      	cmp	r2, r3
 800a90a:	d12e      	bne.n	800a96a <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800a912:	6a39      	ldr	r1, [r7, #32]
 800a914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a918:	fb00 f101 	mul.w	r1, r0, r1
 800a91c:	2000      	movs	r0, #0
 800a91e:	460c      	mov	r4, r1
 800a920:	4605      	mov	r5, r0
 800a922:	eb12 0a04 	adds.w	sl, r2, r4
 800a926:	eb43 0b05 	adc.w	fp, r3, r5
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800a930:	4b17      	ldr	r3, [pc, #92]	@ (800a990 <rx_dhcp_client+0x3c0>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	dd18      	ble.n	800a96a <rx_dhcp_client+0x39a>
 800a938:	4b16      	ldr	r3, [pc, #88]	@ (800a994 <rx_dhcp_client+0x3c4>)
 800a93a:	f241 52b4 	movw	r2, #5556	@ 0x15b4
 800a93e:	4916      	ldr	r1, [pc, #88]	@ (800a998 <rx_dhcp_client+0x3c8>)
 800a940:	2002      	movs	r0, #2
 800a942:	f7fd f98d 	bl	8007c60 <mg_log_prefix>
 800a946:	6a3c      	ldr	r4, [r7, #32]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800a94e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a952:	f04f 0300 	mov.w	r3, #0
 800a956:	f7f5 ff37 	bl	80007c8 <__aeabi_uldivmod>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4621      	mov	r1, r4
 800a960:	480e      	ldr	r0, [pc, #56]	@ (800a99c <rx_dhcp_client+0x3cc>)
 800a962:	f7fd f9cd 	bl	8007d00 <mg_log>
 800a966:	e000      	b.n	800a96a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a968:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a970:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800a974:	429a      	cmp	r2, r3
 800a976:	d006      	beq.n	800a986 <rx_dhcp_client+0x3b6>
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff f96b 	bl	8009c54 <onstatechange>
 800a97e:	e002      	b.n	800a986 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a980:	bf00      	nop
 800a982:	e000      	b.n	800a986 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a984:	bf00      	nop
}
 800a986:	3740      	adds	r7, #64	@ 0x40
 800a988:	46bd      	mov	sp, r7
 800a98a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a98e:	bf00      	nop
 800a990:	24000240 	.word	0x24000240
 800a994:	0802a7c4 	.word	0x0802a7c4
 800a998:	08027148 	.word	0x08027148
 800a99c:	08028428 	.word	0x08028428

0800a9a0 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a4:	b0d6      	sub	sp, #344	@ 0x158
 800a9a6:	af04      	add	r7, sp, #16
 800a9a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a9ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a9b0:	6018      	str	r0, [r3, #0]
 800a9b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a9b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a9ba:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800a9c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a9c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ce:	33f0      	adds	r3, #240	@ 0xf0
 800a9d0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800a9d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a9d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a9e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a9f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a9f6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9fe:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800aa02:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800aa06:	429a      	cmp	r2, r3
 800aa08:	f0c0 81b0 	bcc.w	800ad6c <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800aa0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aa10:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800aa14:	4ad8      	ldr	r2, [pc, #864]	@ (800ad78 <rx_dhcp_server+0x3d8>)
 800aa16:	4618      	mov	r0, r3
 800aa18:	4611      	mov	r1, r2
 800aa1a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f018 ff25 	bl	802386e <memcpy>
  res.yiaddr = ifp->ip;
 800aa24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aa28:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689a      	ldr	r2, [r3, #8]
 800aa30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aa34:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800aa38:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800aa3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800aa3e:	3310      	adds	r3, #16
 800aa40:	3303      	adds	r3, #3
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	3201      	adds	r2, #1
 800aa46:	b2d2      	uxtb	r2, r2
 800aa48:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800aa4a:	e020      	b.n	800aa8e <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800aa4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b35      	cmp	r3, #53	@ 0x35
 800aa54:	d111      	bne.n	800aa7a <rx_dhcp_server+0xda>
 800aa56:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10b      	bne.n	800aa7a <rx_dhcp_server+0xda>
 800aa62:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa66:	3302      	adds	r3, #2
 800aa68:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d904      	bls.n	800aa7a <rx_dhcp_server+0xda>
      op = p[2];
 800aa70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa74:	789b      	ldrb	r3, [r3, #2]
 800aa76:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 800aa7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa7e:	3301      	adds	r3, #1
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	3302      	adds	r3, #2
 800aa84:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800aa88:	4413      	add	r3, r2
 800aa8a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800aa8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa92:	3301      	adds	r3, #1
 800aa94:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d904      	bls.n	800aaa6 <rx_dhcp_server+0x106>
 800aa9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2bff      	cmp	r3, #255	@ 0xff
 800aaa4:	d1d2      	bne.n	800aa4c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800aaa6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d004      	beq.n	800aab8 <rx_dhcp_server+0x118>
 800aaae:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	f040 815b 	bne.w	800ad6e <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800aab8:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <rx_dhcp_server+0x124>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e000      	b.n	800aac6 <rx_dhcp_server+0x126>
 800aac4:	2305      	movs	r3, #5
 800aac6:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 800aaca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aace:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aad2:	2235      	movs	r2, #53	@ 0x35
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aada:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aade:	2201      	movs	r2, #1
 800aae0:	705a      	strb	r2, [r3, #1]
 800aae2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aae6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aaea:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800aaee:	709a      	strb	r2, [r3, #2]
 800aaf0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aaf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aaf8:	2201      	movs	r2, #1
 800aafa:	70da      	strb	r2, [r3, #3]
 800aafc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab04:	2204      	movs	r2, #4
 800ab06:	711a      	strb	r2, [r3, #4]
 800ab08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab10:	2200      	movs	r2, #0
 800ab12:	715a      	strb	r2, [r3, #5]
 800ab14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	719a      	strb	r2, [r3, #6]
 800ab20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab28:	2200      	movs	r2, #0
 800ab2a:	71da      	strb	r2, [r3, #7]
 800ab2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab34:	2200      	movs	r2, #0
 800ab36:	721a      	strb	r2, [r3, #8]
 800ab38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab40:	2236      	movs	r2, #54	@ 0x36
 800ab42:	725a      	strb	r2, [r3, #9]
 800ab44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	729a      	strb	r2, [r3, #10]
 800ab50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab58:	2200      	movs	r2, #0
 800ab5a:	72da      	strb	r2, [r3, #11]
 800ab5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab64:	2200      	movs	r2, #0
 800ab66:	731a      	strb	r2, [r3, #12]
 800ab68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab70:	2200      	movs	r2, #0
 800ab72:	735a      	strb	r2, [r3, #13]
 800ab74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	739a      	strb	r2, [r3, #14]
 800ab80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab88:	220c      	movs	r2, #12
 800ab8a:	73da      	strb	r2, [r3, #15]
 800ab8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ab94:	2203      	movs	r2, #3
 800ab96:	741a      	strb	r2, [r3, #16]
 800ab98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ab9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aba0:	226d      	movs	r2, #109	@ 0x6d
 800aba2:	745a      	strb	r2, [r3, #17]
 800aba4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aba8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abac:	2269      	movs	r2, #105	@ 0x69
 800abae:	749a      	strb	r2, [r3, #18]
 800abb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abb8:	2270      	movs	r2, #112	@ 0x70
 800abba:	74da      	strb	r2, [r3, #19]
 800abbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abc4:	2233      	movs	r2, #51	@ 0x33
 800abc6:	751a      	strb	r2, [r3, #20]
 800abc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abcc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abd0:	2204      	movs	r2, #4
 800abd2:	755a      	strb	r2, [r3, #21]
 800abd4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abdc:	22ff      	movs	r2, #255	@ 0xff
 800abde:	759a      	strb	r2, [r3, #22]
 800abe0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abe4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abe8:	22ff      	movs	r2, #255	@ 0xff
 800abea:	75da      	strb	r2, [r3, #23]
 800abec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abf0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800abf4:	22ff      	movs	r2, #255	@ 0xff
 800abf6:	761a      	strb	r2, [r3, #24]
 800abf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800abfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ac00:	22ff      	movs	r2, #255	@ 0xff
 800ac02:	765a      	strb	r2, [r3, #25]
 800ac04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ac0c:	22ff      	movs	r2, #255	@ 0xff
 800ac0e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800ac10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1c:	f103 011c 	add.w	r1, r3, #28
 800ac20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ac24:	331c      	adds	r3, #28
 800ac26:	2206      	movs	r2, #6
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f018 fe20 	bl	802386e <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800ac2e:	f107 030c 	add.w	r3, r7, #12
 800ac32:	3305      	adds	r3, #5
 800ac34:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ac38:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800ac3c:	6812      	ldr	r2, [r2, #0]
 800ac3e:	320c      	adds	r2, #12
 800ac40:	6812      	ldr	r2, [r2, #0]
 800ac42:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800ac44:	f107 030c 	add.w	r3, r7, #12
 800ac48:	330b      	adds	r3, #11
 800ac4a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ac4e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800ac52:	6812      	ldr	r2, [r2, #0]
 800ac54:	3208      	adds	r2, #8
 800ac56:	6812      	ldr	r2, [r2, #0]
 800ac58:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800ac5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ac62:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ac66:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800ac6a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800ac6e:	4615      	mov	r5, r2
 800ac70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac78:	c403      	stmia	r4!, {r0, r1}
 800ac7a:	8022      	strh	r2, [r4, #0]
 800ac7c:	3402      	adds	r4, #2
 800ac7e:	0c13      	lsrs	r3, r2, #16
 800ac80:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800ac82:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac86:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800ac92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ac9a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800ac9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aca2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acb0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800acb4:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800acb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	7f9b      	ldrb	r3, [r3, #30]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d01c      	beq.n	800ad00 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800acc6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800acce:	691a      	ldr	r2, [r3, #16]
 800acd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acd4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800acdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ace0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800acea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	3306      	adds	r3, #6
 800acf8:	2206      	movs	r2, #6
 800acfa:	4619      	mov	r1, r3
 800acfc:	f018 fdb7 	bl	802386e <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800ad00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	1d9d      	adds	r5, r3, #6
 800ad0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad12:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689e      	ldr	r6, [r3, #8]
 800ad1a:	2043      	movs	r0, #67	@ 0x43
 800ad1c:	f00c fd23 	bl	8017766 <mg_ntohs>
 800ad20:	4603      	mov	r3, r0
 800ad22:	4698      	mov	r8, r3
 800ad24:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d005      	beq.n	800ad38 <rx_dhcp_server+0x398>
 800ad2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ad34:	691c      	ldr	r4, [r3, #16]
 800ad36:	e001      	b.n	800ad3c <rx_dhcp_server+0x39c>
 800ad38:	f04f 34ff 	mov.w	r4, #4294967295
 800ad3c:	2044      	movs	r0, #68	@ 0x44
 800ad3e:	f00c fd12 	bl	8017766 <mg_ntohs>
 800ad42:	4603      	mov	r3, r0
 800ad44:	461a      	mov	r2, r3
 800ad46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad4a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 800ad4e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ad58:	9302      	str	r3, [sp, #8]
 800ad5a:	9201      	str	r2, [sp, #4]
 800ad5c:	9400      	str	r4, [sp, #0]
 800ad5e:	4643      	mov	r3, r8
 800ad60:	4632      	mov	r2, r6
 800ad62:	4629      	mov	r1, r5
 800ad64:	6800      	ldr	r0, [r0, #0]
 800ad66:	f7ff f876 	bl	8009e56 <tx_udp>
 800ad6a:	e000      	b.n	800ad6e <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ad6c:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800ad6e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800ad72:	46bd      	mov	sp, r7
 800ad74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad78:	08028440 	.word	0x08028440

0800ad7c <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fa3e 	bl	800a210 <getpeer>
 800ad94:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d059      	beq.n	800ae50 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	331c      	adds	r3, #28
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	69d2      	ldr	r2, [r2, #28]
 800adb0:	320c      	adds	r2, #12
 800adb2:	6812      	ldr	r2, [r2, #0]
 800adb4:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	33b0      	adds	r3, #176	@ 0xb0
 800adba:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	f103 0018 	add.w	r0, r3, #24
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	3306      	adds	r3, #6
 800adc8:	2206      	movs	r2, #6
 800adca:	4619      	mov	r1, r3
 800adcc:	f018 fd4f 	bl	802386e <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800add8:	d304      	bcc.n	800ade4 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800adda:	491f      	ldr	r1, [pc, #124]	@ (800ae58 <rx_udp+0xdc>)
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7f7 fc55 	bl	800268c <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800ade2:	e035      	b.n	800ae50 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adec:	1ad2      	subs	r2, r2, r3
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d212      	bcs.n	800ae1c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	4619      	mov	r1, r3
 800ae08:	f7fb ff5c 	bl	8006cc4 <mg_iobuf_resize>
 800ae0c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d104      	bne.n	800ae1c <rx_udp+0xa0>
      mg_error(c, "oom");
 800ae12:	4912      	ldr	r1, [pc, #72]	@ (800ae5c <rx_udp+0xe0>)
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7f7 fc39 	bl	800268c <mg_error>
}
 800ae1a:	e019      	b.n	800ae50 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae24:	18d0      	adds	r0, r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	6899      	ldr	r1, [r3, #8]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f018 fd1d 	bl	802386e <memcpy>
      c->recv.len += pkt->pay.len;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	330c      	adds	r3, #12
 800ae46:	461a      	mov	r2, r3
 800ae48:	2107      	movs	r1, #7
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7f7 fbfe 	bl	800264c <mg_call>
}
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	08028550 	.word	0x08028550
 800ae5c:	0802856c 	.word	0x0802856c

0800ae60 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	b091      	sub	sp, #68	@ 0x44
 800ae64:	af06      	add	r7, sp, #24
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689a      	ldr	r2, [r3, #8]
 800ae72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae74:	3314      	adds	r3, #20
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	2206      	movs	r2, #6
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7fe ff90 	bl	8009da8 <tx_ip>
 800ae88:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	3314      	adds	r3, #20
 800ae8e:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800ae90:	2214      	movs	r2, #20
 800ae92:	2100      	movs	r1, #0
 800ae94:	6a38      	ldr	r0, [r7, #32]
 800ae96:	f018 fbf5 	bl	8023684 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800ae9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <tx_tcp+0x54>
 800aea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d006      	beq.n	800aeb4 <tx_tcp+0x54>
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	3314      	adds	r3, #20
 800aeaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aeac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f018 fbce 	bl	8023650 <memmove>
  tcp->sport = sport;
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800aeba:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800aec2:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aec8:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aece:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800aed6:	f241 7070 	movw	r0, #6000	@ 0x1770
 800aeda:	f00c fc44 	bl	8017766 <mg_ntohs>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	2250      	movs	r2, #80	@ 0x50
 800aeea:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800aef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	3314      	adds	r3, #20
 800aef6:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800aef8:	2300      	movs	r3, #0
 800aefa:	753b      	strb	r3, [r7, #20]
 800aefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefe:	7a5b      	ldrb	r3, [r3, #9]
 800af00:	757b      	strb	r3, [r7, #21]
 800af02:	8b7b      	ldrh	r3, [r7, #26]
 800af04:	0a1b      	lsrs	r3, r3, #8
 800af06:	b29b      	uxth	r3, r3
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	75bb      	strb	r3, [r7, #22]
 800af0c:	8b7b      	ldrh	r3, [r7, #26]
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800af12:	8b7b      	ldrh	r3, [r7, #26]
 800af14:	461a      	mov	r2, r3
 800af16:	6a39      	ldr	r1, [r7, #32]
 800af18:	69f8      	ldr	r0, [r7, #28]
 800af1a:	f7fe fd61 	bl	80099e0 <csumup>
 800af1e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	330c      	adds	r3, #12
 800af24:	2204      	movs	r2, #4
 800af26:	4619      	mov	r1, r3
 800af28:	69f8      	ldr	r0, [r7, #28]
 800af2a:	f7fe fd59 	bl	80099e0 <csumup>
 800af2e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af32:	3310      	adds	r3, #16
 800af34:	2204      	movs	r2, #4
 800af36:	4619      	mov	r1, r3
 800af38:	69f8      	ldr	r0, [r7, #28]
 800af3a:	f7fe fd51 	bl	80099e0 <csumup>
 800af3e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800af40:	f107 0314 	add.w	r3, r7, #20
 800af44:	2204      	movs	r2, #4
 800af46:	4619      	mov	r1, r3
 800af48:	69f8      	ldr	r0, [r7, #28]
 800af4a:	f7fe fd49 	bl	80099e0 <csumup>
 800af4e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800af50:	69f8      	ldr	r0, [r7, #28]
 800af52:	f7fe fd70 	bl	8009a36 <csumfin>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800af5e:	4b21      	ldr	r3, [pc, #132]	@ (800afe4 <tx_tcp+0x184>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b03      	cmp	r3, #3
 800af64:	dd2c      	ble.n	800afc0 <tx_tcp+0x160>
 800af66:	4b20      	ldr	r3, [pc, #128]	@ (800afe8 <tx_tcp+0x188>)
 800af68:	f241 6219 	movw	r2, #5657	@ 0x1619
 800af6c:	491f      	ldr	r1, [pc, #124]	@ (800afec <tx_tcp+0x18c>)
 800af6e:	2004      	movs	r0, #4
 800af70:	f7fc fe76 	bl	8007c60 <mg_log_prefix>
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	f103 050c 	add.w	r5, r3, #12
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	b29b      	uxth	r3, r3
 800af80:	4618      	mov	r0, r3
 800af82:	f00c fbf0 	bl	8017766 <mg_ntohs>
 800af86:	4603      	mov	r3, r0
 800af88:	461e      	mov	r6, r3
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	f103 0410 	add.w	r4, r3, #16
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	b29b      	uxth	r3, r3
 800af96:	4618      	mov	r0, r3
 800af98:	f00c fbe5 	bl	8017766 <mg_ntohs>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	7b5b      	ldrb	r3, [r3, #13]
 800afa4:	4619      	mov	r1, r3
 800afa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9103      	str	r1, [sp, #12]
 800afac:	9202      	str	r2, [sp, #8]
 800afae:	9401      	str	r4, [sp, #4]
 800afb0:	4b0f      	ldr	r3, [pc, #60]	@ (800aff0 <tx_tcp+0x190>)
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	4633      	mov	r3, r6
 800afb6:	462a      	mov	r2, r5
 800afb8:	490d      	ldr	r1, [pc, #52]	@ (800aff0 <tx_tcp+0x190>)
 800afba:	480e      	ldr	r0, [pc, #56]	@ (800aff4 <tx_tcp+0x194>)
 800afbc:	f7fc fea0 	bl	8007d00 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	f103 0214 	add.w	r2, r3, #20
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afd0:	4413      	add	r3, r2
 800afd2:	4619      	mov	r1, r3
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7fe fdb9 	bl	8009b4c <ether_output>
 800afda:	4603      	mov	r3, r0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	372c      	adds	r7, #44	@ 0x2c
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe4:	24000240 	.word	0x24000240
 800afe8:	0802a7d4 	.word	0x0802a7d4
 800afec:	08027148 	.word	0x08027148
 800aff0:	0800d585 	.word	0x0800d585
 800aff4:	08028570 	.word	0x08028570

0800aff8 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800aff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800affc:	b08c      	sub	sp, #48	@ 0x30
 800affe:	af06      	add	r7, sp, #24
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	603b      	str	r3, [r7, #0]
 800b006:	4613      	mov	r3, r2
 800b008:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00e:	7b5b      	ldrb	r3, [r3, #13]
 800b010:	f003 0303 	and.w	r3, r3, #3
 800b014:	2b00      	cmp	r3, #0
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	1d9e      	adds	r6, r3, #6
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b032:	885b      	ldrh	r3, [r3, #2]
 800b034:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	4618      	mov	r0, r3
 800b046:	f00c fb75 	bl	8017734 <mg_ntohl>
 800b04a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	4413      	add	r3, r2
 800b050:	4618      	mov	r0, r3
 800b052:	f00c fb6f 	bl	8017734 <mg_ntohl>
 800b056:	4601      	mov	r1, r0
 800b058:	79fa      	ldrb	r2, [r7, #7]
 800b05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	9103      	str	r1, [sp, #12]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	9302      	str	r3, [sp, #8]
 800b068:	9501      	str	r5, [sp, #4]
 800b06a:	9400      	str	r4, [sp, #0]
 800b06c:	4613      	mov	r3, r2
 800b06e:	4642      	mov	r2, r8
 800b070:	4631      	mov	r1, r6
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff fef4 	bl	800ae60 <tx_tcp>
 800b078:	4603      	mov	r3, r0
                buf, len);
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b084 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800b084:	b5b0      	push	{r4, r5, r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe f9f3 	bl	800947e <mg_alloc_conn>
 800b098:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10f      	bne.n	800b0c0 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800b0a0:	4b4e      	ldr	r3, [pc, #312]	@ (800b1dc <accept_conn+0x158>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dd09      	ble.n	800b0bc <accept_conn+0x38>
 800b0a8:	4b4d      	ldr	r3, [pc, #308]	@ (800b1e0 <accept_conn+0x15c>)
 800b0aa:	f241 622d 	movw	r2, #5677	@ 0x162d
 800b0ae:	494d      	ldr	r1, [pc, #308]	@ (800b1e4 <accept_conn+0x160>)
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f7fc fdd5 	bl	8007c60 <mg_log_prefix>
 800b0b6:	484c      	ldr	r0, [pc, #304]	@ (800b1e8 <accept_conn+0x164>)
 800b0b8:	f7fc fe22 	bl	8007d00 <mg_log>
    return NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e088      	b.n	800b1d2 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	33b0      	adds	r3, #176	@ 0xb0
 800b0c4:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f00c fb31 	bl	8017734 <mg_ntohl>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f00c fb28 	bl	8017734 <mg_ntohl>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f103 0018 	add.w	r0, r3, #24
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	3306      	adds	r3, #6
 800b0f6:	2206      	movs	r2, #6
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	f018 fbb8 	bl	802386e <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800b0fe:	2100      	movs	r1, #0
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f7fe fcc7 	bl	8009a94 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	331c      	adds	r3, #28
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	69d2      	ldr	r2, [r2, #28]
 800b10e:	320c      	adds	r2, #12
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b118:	881b      	ldrh	r3, [r3, #0]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800b120:	4b2e      	ldr	r3, [pc, #184]	@ (800b1dc <accept_conn+0x158>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b02      	cmp	r3, #2
 800b126:	dd0e      	ble.n	800b146 <accept_conn+0xc2>
 800b128:	4b2d      	ldr	r3, [pc, #180]	@ (800b1e0 <accept_conn+0x15c>)
 800b12a:	f241 6236 	movw	r2, #5686	@ 0x1636
 800b12e:	492d      	ldr	r1, [pc, #180]	@ (800b1e4 <accept_conn+0x160>)
 800b130:	2003      	movs	r0, #3
 800b132:	f7fc fd95 	bl	8007c60 <mg_log_prefix>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	331c      	adds	r3, #28
 800b13e:	4a2b      	ldr	r2, [pc, #172]	@ (800b1ec <accept_conn+0x168>)
 800b140:	482b      	ldr	r0, [pc, #172]	@ (800b1f0 <accept_conn+0x16c>)
 800b142:	f7fc fddd 	bl	8007d00 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b15e:	f043 0304 	orr.w	r3, r3, #4
 800b162:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b16c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b170:	b2d9      	uxtb	r1, r3
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b178:	f361 03c3 	bfi	r3, r1, #3, #1
 800b17c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f102 0408 	add.w	r4, r2, #8
 800b194:	f103 0508 	add.w	r5, r3, #8
 800b198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2101      	movs	r1, #1
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7f7 fa43 	bl	800264c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2105      	movs	r1, #5
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7f7 fa3e 	bl	800264c <mg_call>
  return c;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	24000240 	.word	0x24000240
 800b1e0:	0802a7dc 	.word	0x0802a7dc
 800b1e4:	08027148 	.word	0x08027148
 800b1e8:	080281a4 	.word	0x080281a4
 800b1ec:	0800d5fd 	.word	0x0800d5fd
 800b1f0:	08028594 	.word	0x08028594

0800b1f4 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	@ 0x28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b204:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800b206:	230e      	movs	r3, #14
 800b208:	623b      	str	r3, [r7, #32]
 800b20a:	2318      	movs	r3, #24
 800b20c:	61fb      	str	r3, [r7, #28]
 800b20e:	233c      	movs	r3, #60	@ 0x3c
 800b210:	61bb      	str	r3, [r7, #24]
 800b212:	2308      	movs	r3, #8
 800b214:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	441a      	add	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <trim_len+0x3c>
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	e000      	b.n	800b232 <trim_len+0x3e>
 800b230:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800b232:	4413      	add	r3, r2
 800b234:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d103      	bne.n	800b24e <trim_len+0x5a>
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	e000      	b.n	800b250 <trim_len+0x5c>
 800b24e:	2344      	movs	r3, #68	@ 0x44
 800b250:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	441a      	add	r2, r3
 800b258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d904      	bls.n	800b26a <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b262:	699a      	ldr	r2, [r3, #24]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b270:	461a      	mov	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	4293      	cmp	r3, r2
 800b276:	d913      	bls.n	800b2a0 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800b278:	4b20      	ldr	r3, [pc, #128]	@ (800b2fc <trim_len+0x108>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dd0a      	ble.n	800b296 <trim_len+0xa2>
 800b280:	4b1f      	ldr	r3, [pc, #124]	@ (800b300 <trim_len+0x10c>)
 800b282:	f241 6251 	movw	r2, #5713	@ 0x1651
 800b286:	491f      	ldr	r1, [pc, #124]	@ (800b304 <trim_len+0x110>)
 800b288:	2001      	movs	r0, #1
 800b28a:	f7fc fce9 	bl	8007c60 <mg_log_prefix>
 800b28e:	68f9      	ldr	r1, [r7, #12]
 800b290:	481d      	ldr	r0, [pc, #116]	@ (800b308 <trim_len+0x114>)
 800b292:	f7fc fd35 	bl	8007d00 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	b29a      	uxth	r2, r3
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2ac:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d91e      	bls.n	800b2f2 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	6a3a      	ldr	r2, [r7, #32]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00d      	beq.n	800b2f2 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800b2d6:	4b09      	ldr	r3, [pc, #36]	@ (800b2fc <trim_len+0x108>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dd09      	ble.n	800b2f2 <trim_len+0xfe>
 800b2de:	4b08      	ldr	r3, [pc, #32]	@ (800b300 <trim_len+0x10c>)
 800b2e0:	f241 6258 	movw	r2, #5720	@ 0x1658
 800b2e4:	4907      	ldr	r1, [pc, #28]	@ (800b304 <trim_len+0x110>)
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	f7fc fcba 	bl	8007c60 <mg_log_prefix>
 800b2ec:	4807      	ldr	r0, [pc, #28]	@ (800b30c <trim_len+0x118>)
 800b2ee:	f7fc fd07 	bl	8007d00 <mg_log>
    }
  }

  return len;
 800b2f2:	683b      	ldr	r3, [r7, #0]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3728      	adds	r7, #40	@ 0x28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	24000240 	.word	0x24000240
 800b300:	0802a7e8 	.word	0x0802a7e8
 800b304:	08027148 	.word	0x08027148
 800b308:	080285a4 	.word	0x080285a4
 800b30c:	080285d0 	.word	0x080285d0

0800b310 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800b310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b312:	b08f      	sub	sp, #60	@ 0x3c
 800b314:	af06      	add	r7, sp, #24
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b322:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	33b0      	adds	r3, #176	@ 0xb0
 800b328:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	331c      	adds	r3, #28
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f7ff ff5d 	bl	800b1f4 <trim_len>
 800b33a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d015      	beq.n	800b378 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f103 0118 	add.w	r1, r3, #24
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	6898      	ldr	r0, [r3, #8]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8b1c      	ldrh	r4, [r3, #24]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	9203      	str	r2, [sp, #12]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	9202      	str	r2, [sp, #8]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4623      	mov	r3, r4
 800b36e:	4602      	mov	r2, r0
 800b370:	69f8      	ldr	r0, [r7, #28]
 800b372:	f7fe fd70 	bl	8009e56 <tx_udp>
 800b376:	e03d      	b.n	800b3f4 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	f103 0618 	add.w	r6, r3, #24
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8b1c      	ldrh	r4, [r3, #24]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f00c f9d2 	bl	8017734 <mg_ntohl>
 800b390:	6038      	str	r0, [r7, #0]
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	f00c f9cc 	bl	8017734 <mg_ntohl>
 800b39c:	4602      	mov	r2, r0
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	9305      	str	r3, [sp, #20]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	9203      	str	r2, [sp, #12]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	9302      	str	r3, [sp, #8]
 800b3ac:	9501      	str	r5, [sp, #4]
 800b3ae:	9400      	str	r4, [sp, #0]
 800b3b0:	2318      	movs	r3, #24
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	69f8      	ldr	r0, [r7, #28]
 800b3b8:	f7ff fd52 	bl	800ae60 <tx_tcp>
 800b3bc:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <mg_io_send+0xba>
      return MG_IO_WAIT;
 800b3c4:	f06f 0301 	mvn.w	r3, #1
 800b3c8:	e015      	b.n	800b3f6 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d0:	d102      	bne.n	800b3d8 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800b3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d6:	e00e      	b.n	800b3f6 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	441a      	add	r2, r3
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	7f9b      	ldrb	r3, [r3, #30]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d103      	bne.n	800b3f4 <mg_io_send+0xe4>
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7fe fb50 	bl	8009a94 <settmout>
    }
  }
  return (long) len;
 800b3f4:	687b      	ldr	r3, [r7, #4]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3724      	adds	r7, #36	@ 0x24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b400 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	18d1      	adds	r1, r2, r3
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	461a      	mov	r2, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f006 fe9d 	bl	8012160 <mg_tls_recv>
 800b426:	4603      	mov	r3, r0
 800b428:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b430:	d104      	bne.n	800b43c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 800b432:	490c      	ldr	r1, [pc, #48]	@ (800b464 <handle_tls_recv+0x64>)
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7f7 f929 	bl	800268c <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 800b43a:	e00f      	b.n	800b45c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dd0c      	ble.n	800b45c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	441a      	add	r2, r3
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 800b44e:	f107 030c 	add.w	r3, r7, #12
 800b452:	461a      	mov	r2, r3
 800b454:	2107      	movs	r1, #7
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7f7 f8f8 	bl	800264c <mg_call>
}
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	080285fc 	.word	0x080285fc

0800b468 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800b468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46c:	b090      	sub	sp, #64	@ 0x40
 800b46e:	af06      	add	r7, sp, #24
 800b470:	60f8      	str	r0, [r7, #12]
 800b472:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	33b0      	adds	r3, #176	@ 0xb0
 800b478:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <read_conn+0x28>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3368      	adds	r3, #104	@ 0x68
 800b48e:	e001      	b.n	800b494 <read_conn+0x2c>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3338      	adds	r3, #56	@ 0x38
 800b494:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f00c f949 	bl	8017734 <mg_ntohl>
 800b4a2:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	331c      	adds	r3, #28
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b0:	7b5b      	ldrb	r3, [r3, #13]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d070      	beq.n	800b59c <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800b4ba:	2310      	movs	r3, #16
 800b4bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f00c f934 	bl	8017734 <mg_ntohl>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b4e0:	f003 0310 	and.w	r3, r3, #16
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01e      	beq.n	800b528 <read_conn+0xc0>
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	7f9b      	ldrb	r3, [r3, #30]
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d11a      	bne.n	800b528 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	681c      	ldr	r4, [r3, #0]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f00c f919 	bl	8017734 <mg_ntohl>
 800b502:	4603      	mov	r3, r0
 800b504:	429c      	cmp	r4, r3
 800b506:	d105      	bne.n	800b514 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b512:	e01a      	b.n	800b54a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f00c f90a 	bl	8017734 <mg_ntohl>
 800b520:	4602      	mov	r2, r0
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b526:	e010      	b.n	800b54a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 800b528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b52c:	f043 0301 	orr.w	r3, r3, #1
 800b530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b53a:	f043 0310 	orr.w	r3, r3, #16
 800b53e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800b542:	2104      	movs	r1, #4
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7fe faa5 	bl	8009a94 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	f103 0818 	add.w	r8, r3, #24
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	607b      	str	r3, [r7, #4]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	8b1c      	ldrh	r4, [r3, #24]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4618      	mov	r0, r3
 800b568:	f00c f8e4 	bl	8017734 <mg_ntohl>
 800b56c:	6038      	str	r0, [r7, #0]
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	4618      	mov	r0, r3
 800b574:	f00c f8de 	bl	8017734 <mg_ntohl>
 800b578:	4602      	mov	r2, r0
 800b57a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b57e:	2100      	movs	r1, #0
 800b580:	9105      	str	r1, [sp, #20]
 800b582:	4990      	ldr	r1, [pc, #576]	@ (800b7c4 <read_conn+0x35c>)
 800b584:	9104      	str	r1, [sp, #16]
 800b586:	9203      	str	r2, [sp, #12]
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	9102      	str	r1, [sp, #8]
 800b58c:	9501      	str	r5, [sp, #4]
 800b58e:	9400      	str	r4, [sp, #0]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	4641      	mov	r1, r8
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff fc63 	bl	800ae60 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800b59a:	e173      	b.n	800b884 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 816f 	beq.w	800b884 <read_conn+0x41c>
  } else if (seq != s->ack) {
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d059      	beq.n	800b664 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f00c f8bc 	bl	8017734 <mg_ntohl>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d10f      	bne.n	800b5f0 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800b5d0:	4b7d      	ldr	r3, [pc, #500]	@ (800b7c8 <read_conn+0x360>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	f340 8155 	ble.w	800b884 <read_conn+0x41c>
 800b5da:	4b7c      	ldr	r3, [pc, #496]	@ (800b7cc <read_conn+0x364>)
 800b5dc:	f241 629f 	movw	r2, #5791	@ 0x169f
 800b5e0:	497b      	ldr	r1, [pc, #492]	@ (800b7d0 <read_conn+0x368>)
 800b5e2:	2004      	movs	r0, #4
 800b5e4:	f7fc fb3c 	bl	8007c60 <mg_log_prefix>
 800b5e8:	487a      	ldr	r0, [pc, #488]	@ (800b7d4 <read_conn+0x36c>)
 800b5ea:	f7fc fb89 	bl	8007d00 <mg_log>
}
 800b5ee:	e149      	b.n	800b884 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800b5f0:	4b75      	ldr	r3, [pc, #468]	@ (800b7c8 <read_conn+0x360>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	dd0d      	ble.n	800b614 <read_conn+0x1ac>
 800b5f8:	4b74      	ldr	r3, [pc, #464]	@ (800b7cc <read_conn+0x364>)
 800b5fa:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 800b5fe:	4974      	ldr	r1, [pc, #464]	@ (800b7d0 <read_conn+0x368>)
 800b600:	2004      	movs	r0, #4
 800b602:	f7fc fb2d 	bl	8007c60 <mg_log_prefix>
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	4872      	ldr	r0, [pc, #456]	@ (800b7d8 <read_conn+0x370>)
 800b610:	f7fc fb76 	bl	8007d00 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	f103 0818 	add.w	r8, r3, #24
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	607b      	str	r3, [r7, #4]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	8b1c      	ldrh	r4, [r3, #24]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4618      	mov	r0, r3
 800b632:	f00c f87f 	bl	8017734 <mg_ntohl>
 800b636:	6038      	str	r0, [r7, #0]
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f00c f879 	bl	8017734 <mg_ntohl>
 800b642:	4603      	mov	r3, r0
 800b644:	2200      	movs	r2, #0
 800b646:	9205      	str	r2, [sp, #20]
 800b648:	4a5e      	ldr	r2, [pc, #376]	@ (800b7c4 <read_conn+0x35c>)
 800b64a:	9204      	str	r2, [sp, #16]
 800b64c:	9303      	str	r3, [sp, #12]
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	9102      	str	r1, [sp, #8]
 800b652:	9501      	str	r5, [sp, #4]
 800b654:	9400      	str	r4, [sp, #0]
 800b656:	2310      	movs	r3, #16
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	4641      	mov	r1, r8
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff fbff 	bl	800ae60 <tx_tcp>
}
 800b662:	e10f      	b.n	800b884 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	1ad2      	subs	r2, r2, r3
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	429a      	cmp	r2, r3
 800b674:	d210      	bcs.n	800b698 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	4413      	add	r3, r2
 800b680:	4619      	mov	r1, r3
 800b682:	69f8      	ldr	r0, [r7, #28]
 800b684:	f7fb fb1e 	bl	8006cc4 <mg_iobuf_resize>
 800b688:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d104      	bne.n	800b698 <read_conn+0x230>
    mg_error(c, "oom");
 800b68e:	4953      	ldr	r1, [pc, #332]	@ (800b7dc <read_conn+0x374>)
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7f6 fffb 	bl	800268c <mg_error>
 800b696:	e0f5      	b.n	800b884 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	18d0      	adds	r0, r2, r3
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	6899      	ldr	r1, [r3, #8]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f018 f8df 	bl	802386e <memcpy>
    io->len += pkt->pay.len;
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	441a      	add	r2, r3
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800b6be:	4b42      	ldr	r3, [pc, #264]	@ (800b7c8 <read_conn+0x360>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	dd15      	ble.n	800b6f2 <read_conn+0x28a>
 800b6c6:	4b41      	ldr	r3, [pc, #260]	@ (800b7cc <read_conn+0x364>)
 800b6c8:	f241 62b2 	movw	r2, #5810	@ 0x16b2
 800b6cc:	4940      	ldr	r1, [pc, #256]	@ (800b7d0 <read_conn+0x368>)
 800b6ce:	2004      	movs	r0, #4
 800b6d0:	f7fc fac6 	bl	8007c60 <mg_log_prefix>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f00c f828 	bl	8017734 <mg_ntohl>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	483c      	ldr	r0, [pc, #240]	@ (800b7e0 <read_conn+0x378>)
 800b6ee:	f7fc fb07 	bl	8007d00 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f00c f81b 	bl	8017734 <mg_ntohl>
 800b6fe:	4602      	mov	r2, r0
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	441a      	add	r2, r3
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	695a      	ldr	r2, [r3, #20]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	441a      	add	r2, r3
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b720:	4293      	cmp	r3, r2
 800b722:	d961      	bls.n	800b7e8 <read_conn+0x380>
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	691a      	ldr	r2, [r3, #16]
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d05b      	beq.n	800b7e8 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800b730:	4b25      	ldr	r3, [pc, #148]	@ (800b7c8 <read_conn+0x360>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b03      	cmp	r3, #3
 800b736:	dd0e      	ble.n	800b756 <read_conn+0x2ee>
 800b738:	4b24      	ldr	r3, [pc, #144]	@ (800b7cc <read_conn+0x364>)
 800b73a:	f241 62b9 	movw	r2, #5817	@ 0x16b9
 800b73e:	4924      	ldr	r1, [pc, #144]	@ (800b7d0 <read_conn+0x368>)
 800b740:	2004      	movs	r0, #4
 800b742:	f7fc fa8d 	bl	8007c60 <mg_log_prefix>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	461a      	mov	r2, r3
 800b750:	4824      	ldr	r0, [pc, #144]	@ (800b7e4 <read_conn+0x37c>)
 800b752:	f7fc fad5 	bl	8007d00 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	f103 0818 	add.w	r8, r3, #24
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	607b      	str	r3, [r7, #4]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8b1c      	ldrh	r4, [r3, #24]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4618      	mov	r0, r3
 800b774:	f00b ffde 	bl	8017734 <mg_ntohl>
 800b778:	6038      	str	r0, [r7, #0]
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	4618      	mov	r0, r3
 800b780:	f00b ffd8 	bl	8017734 <mg_ntohl>
 800b784:	4603      	mov	r3, r0
 800b786:	2200      	movs	r2, #0
 800b788:	9205      	str	r2, [sp, #20]
 800b78a:	2200      	movs	r2, #0
 800b78c:	9204      	str	r2, [sp, #16]
 800b78e:	9303      	str	r3, [sp, #12]
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	9102      	str	r1, [sp, #8]
 800b794:	9501      	str	r5, [sp, #4]
 800b796:	9400      	str	r4, [sp, #0]
 800b798:	2310      	movs	r3, #16
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	4641      	mov	r1, r8
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7ff fb5e 	bl	800ae60 <tx_tcp>
      s->unacked = 0;
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
 800b7b4:	7f9b      	ldrb	r3, [r3, #30]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d01e      	beq.n	800b7f8 <read_conn+0x390>
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7fe f969 	bl	8009a94 <settmout>
 800b7c2:	e019      	b.n	800b7f8 <read_conn+0x390>
 800b7c4:	08027a54 	.word	0x08027a54
 800b7c8:	24000240 	.word	0x24000240
 800b7cc:	0802a7f4 	.word	0x0802a7f4
 800b7d0:	08027148 	.word	0x08027148
 800b7d4:	0802860c 	.word	0x0802860c
 800b7d8:	08028624 	.word	0x08028624
 800b7dc:	0802856c 	.word	0x0802856c
 800b7e0:	0802863c 	.word	0x0802863c
 800b7e4:	08028650 	.word	0x08028650
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	7f9b      	ldrb	r3, [r3, #30]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d003      	beq.n	800b7f8 <read_conn+0x390>
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7fe f94e 	bl	8009a94 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b7fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00b      	beq.n	800b820 <read_conn+0x3b8>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b80e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b812:	b2db      	uxtb	r3, r3
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <read_conn+0x3b8>
      mg_tls_handshake(c);
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f006 fa2b 	bl	8011c74 <mg_tls_handshake>
 800b81e:	e031      	b.n	800b884 <read_conn+0x41c>
    } else if (c->is_tls) {
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d021      	beq.n	800b874 <read_conn+0x40c>
      io = &c->recv;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	3338      	adds	r3, #56	@ 0x38
 800b834:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	429a      	cmp	r2, r3
 800b846:	d210      	bcs.n	800b86a <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	4413      	add	r3, r2
 800b852:	4619      	mov	r1, r3
 800b854:	69f8      	ldr	r0, [r7, #28]
 800b856:	f7fb fa35 	bl	8006cc4 <mg_iobuf_resize>
 800b85a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d104      	bne.n	800b86a <read_conn+0x402>
        mg_error(c, "oom");
 800b860:	490b      	ldr	r1, [pc, #44]	@ (800b890 <read_conn+0x428>)
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7f6 ff12 	bl	800268c <mg_error>
 800b868:	e00c      	b.n	800b884 <read_conn+0x41c>
        handle_tls_recv(c, io);
 800b86a:	69f9      	ldr	r1, [r7, #28]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fdc7 	bl	800b400 <handle_tls_recv>
}
 800b872:	e007      	b.n	800b884 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	330c      	adds	r3, #12
 800b878:	461a      	mov	r2, r3
 800b87a:	2107      	movs	r1, #7
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7f6 fee5 	bl	800264c <mg_call>
}
 800b882:	e7ff      	b.n	800b884 <read_conn+0x41c>
 800b884:	bf00      	nop
 800b886:	3728      	adds	r7, #40	@ 0x28
 800b888:	46bd      	mov	sp, r7
 800b88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88e:	bf00      	nop
 800b890:	0802856c 	.word	0x0802856c

0800b894 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b089      	sub	sp, #36	@ 0x24
 800b898:	af02      	add	r7, sp, #8
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fcb2 	bl	800a210 <getpeer>
 800b8ac:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <rx_tcp+0x26>
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	33b0      	adds	r3, #176	@ 0xb0
 800b8b8:	e000      	b.n	800b8bc <rx_tcp+0x28>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d048      	beq.n	800b956 <rx_tcp+0xc2>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b8ca:	f003 0320 	and.w	r3, r3, #32
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d040      	beq.n	800b956 <rx_tcp+0xc2>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d8:	7b5b      	ldrb	r3, [r3, #13]
 800b8da:	2b12      	cmp	r3, #18
 800b8dc:	d13b      	bne.n	800b956 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f00b ff25 	bl	8017734 <mg_ntohl>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f00b ff1c 	bl	8017734 <mg_ntohl>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2200      	movs	r2, #0
 800b90c:	9201      	str	r2, [sp, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	9200      	str	r2, [sp, #0]
 800b912:	2210      	movs	r2, #16
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff fb6e 	bl	800aff8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b922:	f36f 1345 	bfc	r3, #5, #1
 800b926:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800b92a:	2100      	movs	r1, #0
 800b92c:	6978      	ldr	r0, [r7, #20]
 800b92e:	f7fe f8b1 	bl	8009a94 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800b932:	2200      	movs	r2, #0
 800b934:	2104      	movs	r1, #4
 800b936:	6978      	ldr	r0, [r7, #20]
 800b938:	f7f6 fe88 	bl	800264c <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b942:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 80cd 	beq.w	800bae8 <rx_tcp+0x254>
 800b94e:	6978      	ldr	r0, [r7, #20]
 800b950:	f006 f990 	bl	8011c74 <mg_tls_handshake>
 800b954:	e0c8      	b.n	800bae8 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d019      	beq.n	800b990 <rx_tcp+0xfc>
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b962:	f003 0320 	and.w	r3, r3, #32
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d011      	beq.n	800b990 <rx_tcp+0xfc>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b970:	7b5b      	ldrb	r3, [r3, #13]
 800b972:	2b10      	cmp	r3, #16
 800b974:	d00c      	beq.n	800b990 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	2200      	movs	r2, #0
 800b97e:	9201      	str	r2, [sp, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	9200      	str	r2, [sp, #0]
 800b984:	2214      	movs	r2, #20
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff fb35 	bl	800aff8 <tx_tcp_pkt>
 800b98e:	e0ab      	b.n	800bae8 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00b      	beq.n	800b9ae <rx_tcp+0x11a>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	7b5b      	ldrb	r3, [r3, #13]
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d004      	beq.n	800b9ae <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800b9a4:	4952      	ldr	r1, [pc, #328]	@ (800baf0 <rx_tcp+0x25c>)
 800b9a6:	6978      	ldr	r0, [r7, #20]
 800b9a8:	f7f6 fe70 	bl	800268c <mg_error>
 800b9ac:	e09c      	b.n	800bae8 <rx_tcp+0x254>
  } else if (c != NULL) {
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00f      	beq.n	800b9d4 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	7f9b      	ldrb	r3, [r3, #30]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d103      	bne.n	800b9ca <rx_tcp+0x136>
      settmout(c,
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	6978      	ldr	r0, [r7, #20]
 800b9c6:	f7fe f865 	bl	8009a94 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6978      	ldr	r0, [r7, #20]
 800b9ce:	f7ff fd4b 	bl	800b468 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800b9d2:	e089      	b.n	800bae8 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d8:	2201      	movs	r2, #1
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fc17 	bl	800a210 <getpeer>
 800b9e2:	6178      	str	r0, [r7, #20]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10c      	bne.n	800ba04 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	9201      	str	r2, [sp, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	9200      	str	r2, [sp, #0]
 800b9f8:	2214      	movs	r2, #20
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff fafb 	bl	800aff8 <tx_tcp_pkt>
}
 800ba02:	e071      	b.n	800bae8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba08:	7b5b      	ldrb	r3, [r3, #13]
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00c      	beq.n	800ba2c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ba18:	f003 0304 	and.w	r3, r3, #4
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d062      	beq.n	800bae8 <rx_tcp+0x254>
 800ba22:	4933      	ldr	r1, [pc, #204]	@ (800baf0 <rx_tcp+0x25c>)
 800ba24:	6978      	ldr	r0, [r7, #20]
 800ba26:	f7f6 fe31 	bl	800268c <mg_error>
}
 800ba2a:	e05d      	b.n	800bae8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba30:	7b5b      	ldrb	r3, [r3, #13]
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d016      	beq.n	800ba68 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	4618      	mov	r0, r3
 800ba44:	f00b fe8f 	bl	8017766 <mg_ntohs>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f00b fe72 	bl	8017734 <mg_ntohl>
 800ba50:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800ba52:	2300      	movs	r3, #0
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	2300      	movs	r3, #0
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2212      	movs	r2, #18
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff fac9 	bl	800aff8 <tx_tcp_pkt>
}
 800ba66:	e03f      	b.n	800bae8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6c:	7b5b      	ldrb	r3, [r3, #13]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00c      	beq.n	800ba90 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	9201      	str	r2, [sp, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	9200      	str	r2, [sp, #0]
 800ba84:	2211      	movs	r2, #17
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fab5 	bl	800aff8 <tx_tcp_pkt>
}
 800ba8e:	e02b      	b.n	800bae8 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f00b fe4c 	bl	8017734 <mg_ntohl>
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	4618      	mov	r0, r3
 800baa8:	f00b fe5d 	bl	8017766 <mg_ntohs>
 800baac:	4603      	mov	r3, r0
 800baae:	3301      	adds	r3, #1
 800bab0:	429c      	cmp	r4, r3
 800bab2:	d104      	bne.n	800babe <rx_tcp+0x22a>
    accept_conn(c, pkt);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6978      	ldr	r0, [r7, #20]
 800bab8:	f7ff fae4 	bl	800b084 <accept_conn>
}
 800babc:	e014      	b.n	800bae8 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10c      	bne.n	800bae8 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	2200      	movs	r2, #0
 800bad6:	9201      	str	r2, [sp, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	9200      	str	r2, [sp, #0]
 800badc:	2214      	movs	r2, #20
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff fa89 	bl	800aff8 <tx_tcp_pkt>
}
 800bae6:	e7ff      	b.n	800bae8 <rx_tcp+0x254>
 800bae8:	bf00      	nop
 800baea:	371c      	adds	r7, #28
 800baec:	46bd      	mov	sp, r7
 800baee:	bd90      	pop	{r4, r7, pc}
 800baf0:	08028660 	.word	0x08028660

0800baf4 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800baf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf6:	b08b      	sub	sp, #44	@ 0x2c
 800baf8:	af04      	add	r7, sp, #16
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	88db      	ldrh	r3, [r3, #6]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4618      	mov	r0, r3
 800bb08:	f00b fe2d 	bl	8017766 <mg_ntohs>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bb10:	8afb      	ldrh	r3, [r7, #22]
 800bb12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d104      	bne.n	800bb24 <rx_ip+0x30>
 800bb1a:	8afb      	ldrh	r3, [r7, #22]
 800bb1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d026      	beq.n	800bb72 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	7a5b      	ldrb	r3, [r3, #9]
 800bb2a:	2b11      	cmp	r3, #17
 800bb2c:	d105      	bne.n	800bb3a <rx_ip+0x46>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	f103 0214 	add.w	r2, r3, #20
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	7a5b      	ldrb	r3, [r3, #9]
 800bb40:	2b06      	cmp	r3, #6
 800bb42:	d105      	bne.n	800bb50 <rx_ip+0x5c>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	f103 0214 	add.w	r2, r3, #20
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb54:	2200      	movs	r2, #0
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7fe fb59 	bl	800a210 <getpeer>
 800bb5e:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 811b 	beq.w	800bd9e <rx_ip+0x2aa>
 800bb68:	4992      	ldr	r1, [pc, #584]	@ (800bdb4 <rx_ip+0x2c0>)
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7f6 fd8e 	bl	800268c <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bb70:	e115      	b.n	800bd9e <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	7a5b      	ldrb	r3, [r3, #9]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d116      	bne.n	800bbaa <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	f103 0214 	add.w	r2, r3, #20
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	f240 8108 	bls.w	800bda2 <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb96:	3304      	adds	r3, #4
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6838      	ldr	r0, [r7, #0]
 800bb9c:	f7fd ff02 	bl	80099a4 <mkpay>
    rx_icmp(ifp, pkt);
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7fe fcb8 	bl	800a518 <rx_icmp>
 800bba8:	e100      	b.n	800bdac <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	7a5b      	ldrb	r3, [r3, #9]
 800bbb0:	2b11      	cmp	r3, #17
 800bbb2:	f040 808b 	bne.w	800bccc <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	f103 0214 	add.w	r2, r3, #20
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	2b07      	cmp	r3, #7
 800bbc8:	f240 80ed 	bls.w	800bda6 <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	6838      	ldr	r0, [r7, #0]
 800bbd6:	f7fd fee5 	bl	80099a4 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800bbda:	4b77      	ldr	r3, [pc, #476]	@ (800bdb8 <rx_ip+0x2c4>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	dd2d      	ble.n	800bc3e <rx_ip+0x14a>
 800bbe2:	4b76      	ldr	r3, [pc, #472]	@ (800bdbc <rx_ip+0x2c8>)
 800bbe4:	f241 721b 	movw	r2, #5915	@ 0x171b
 800bbe8:	4975      	ldr	r1, [pc, #468]	@ (800bdc0 <rx_ip+0x2cc>)
 800bbea:	2004      	movs	r0, #4
 800bbec:	f7fc f838 	bl	8007c60 <mg_log_prefix>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	f103 050c 	add.w	r5, r3, #12
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	4618      	mov	r0, r3
 800bc02:	f00b fdb0 	bl	8017766 <mg_ntohs>
 800bc06:	4603      	mov	r3, r0
 800bc08:	461e      	mov	r6, r3
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	f103 0410 	add.w	r4, r3, #16
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc16:	885b      	ldrh	r3, [r3, #2]
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f00b fda3 	bl	8017766 <mg_ntohs>
 800bc20:	4603      	mov	r3, r0
 800bc22:	461a      	mov	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	9303      	str	r3, [sp, #12]
 800bc2a:	9202      	str	r2, [sp, #8]
 800bc2c:	9401      	str	r4, [sp, #4]
 800bc2e:	4b65      	ldr	r3, [pc, #404]	@ (800bdc4 <rx_ip+0x2d0>)
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	4633      	mov	r3, r6
 800bc34:	462a      	mov	r2, r5
 800bc36:	4963      	ldr	r1, [pc, #396]	@ (800bdc4 <rx_ip+0x2d0>)
 800bc38:	4863      	ldr	r0, [pc, #396]	@ (800bdc8 <rx_ip+0x2d4>)
 800bc3a:	f7fc f861 	bl	8007d00 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7f1b      	ldrb	r3, [r3, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d01c      	beq.n	800bc80 <rx_ip+0x18c>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4a:	885b      	ldrh	r3, [r3, #2]
 800bc4c:	b29c      	uxth	r4, r3
 800bc4e:	2044      	movs	r0, #68	@ 0x44
 800bc50:	f00b fd89 	bl	8017766 <mg_ntohs>
 800bc54:	4603      	mov	r3, r0
 800bc56:	429c      	cmp	r4, r3
 800bc58:	d112      	bne.n	800bc80 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5e:	f103 0208 	add.w	r2, r3, #8
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc6a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800bc6e:	4619      	mov	r1, r3
 800bc70:	6838      	ldr	r0, [r7, #0]
 800bc72:	f7fd fe97 	bl	80099a4 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7fe fca9 	bl	800a5d0 <rx_dhcp_client>
 800bc7e:	e095      	b.n	800bdac <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7f5b      	ldrb	r3, [r3, #29]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01c      	beq.n	800bcc2 <rx_ip+0x1ce>
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8c:	885b      	ldrh	r3, [r3, #2]
 800bc8e:	b29c      	uxth	r4, r3
 800bc90:	2043      	movs	r0, #67	@ 0x43
 800bc92:	f00b fd68 	bl	8017766 <mg_ntohs>
 800bc96:	4603      	mov	r3, r0
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	d112      	bne.n	800bcc2 <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca0:	f103 0208 	add.w	r2, r3, #8
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcac:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6838      	ldr	r0, [r7, #0]
 800bcb4:	f7fd fe76 	bl	80099a4 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7fe fe70 	bl	800a9a0 <rx_dhcp_server>
 800bcc0:	e074      	b.n	800bdac <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff f859 	bl	800ad7c <rx_udp>
 800bcca:	e06f      	b.n	800bdac <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	7a5b      	ldrb	r3, [r3, #9]
 800bcd2:	2b06      	cmp	r3, #6
 800bcd4:	d16a      	bne.n	800bdac <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	f103 0214 	add.w	r2, r3, #20
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	2b13      	cmp	r3, #19
 800bce8:	d95f      	bls.n	800bdaa <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcee:	3314      	adds	r3, #20
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6838      	ldr	r0, [r7, #0]
 800bcf4:	f7fd fe56 	bl	80099a4 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	885b      	ldrh	r3, [r3, #2]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	4618      	mov	r0, r3
 800bd02:	f00b fd30 	bl	8017766 <mg_ntohs>
 800bd06:	4603      	mov	r3, r0
 800bd08:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0e:	7b1b      	ldrb	r3, [r3, #12]
 800bd10:	091b      	lsrs	r3, r3, #4
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	3305      	adds	r3, #5
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800bd1c:	8aba      	ldrh	r2, [r7, #20]
 800bd1e:	8a7b      	ldrh	r3, [r7, #18]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d305      	bcc.n	800bd30 <rx_ip+0x23c>
 800bd24:	8aba      	ldrh	r2, [r7, #20]
 800bd26:	8a7b      	ldrh	r3, [r7, #18]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800bd30:	4b21      	ldr	r3, [pc, #132]	@ (800bdb8 <rx_ip+0x2c4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	dd2d      	ble.n	800bd94 <rx_ip+0x2a0>
 800bd38:	4b20      	ldr	r3, [pc, #128]	@ (800bdbc <rx_ip+0x2c8>)
 800bd3a:	f241 7230 	movw	r2, #5936	@ 0x1730
 800bd3e:	4920      	ldr	r1, [pc, #128]	@ (800bdc0 <rx_ip+0x2cc>)
 800bd40:	2004      	movs	r0, #4
 800bd42:	f7fb ff8d 	bl	8007c60 <mg_log_prefix>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	f103 050c 	add.w	r5, r3, #12
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	4618      	mov	r0, r3
 800bd58:	f00b fd05 	bl	8017766 <mg_ntohs>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	461e      	mov	r6, r3
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	69db      	ldr	r3, [r3, #28]
 800bd64:	f103 0410 	add.w	r4, r3, #16
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6c:	885b      	ldrh	r3, [r3, #2]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	4618      	mov	r0, r3
 800bd72:	f00b fcf8 	bl	8017766 <mg_ntohs>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	9202      	str	r2, [sp, #8]
 800bd82:	9401      	str	r4, [sp, #4]
 800bd84:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc4 <rx_ip+0x2d0>)
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	4633      	mov	r3, r6
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	490d      	ldr	r1, [pc, #52]	@ (800bdc4 <rx_ip+0x2d0>)
 800bd8e:	480f      	ldr	r0, [pc, #60]	@ (800bdcc <rx_ip+0x2d8>)
 800bd90:	f7fb ffb6 	bl	8007d00 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff fd7c 	bl	800b894 <rx_tcp>
 800bd9c:	e006      	b.n	800bdac <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bd9e:	bf00      	nop
 800bda0:	e004      	b.n	800bdac <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bda2:	bf00      	nop
 800bda4:	e002      	b.n	800bdac <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bda6:	bf00      	nop
 800bda8:	e000      	b.n	800bdac <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bdaa:	bf00      	nop
  }
}
 800bdac:	371c      	adds	r7, #28
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	0802866c 	.word	0x0802866c
 800bdb8:	24000240 	.word	0x24000240
 800bdbc:	0802a800 	.word	0x0802a800
 800bdc0:	08027148 	.word	0x08027148
 800bdc4:	0800d585 	.word	0x0800d585
 800bdc8:	08028688 	.word	0x08028688
 800bdcc:	080286a4 	.word	0x080286a4

0800bdd0 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	6a1b      	ldr	r3, [r3, #32]
 800bdde:	799b      	ldrb	r3, [r3, #6]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d004      	beq.n	800bdee <rx_ip6+0x1e>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	799b      	ldrb	r3, [r3, #6]
 800bdea:	2b3a      	cmp	r3, #58	@ 0x3a
 800bdec:	d115      	bne.n	800be1a <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d922      	bls.n	800be48 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be06:	3304      	adds	r3, #4
 800be08:	4619      	mov	r1, r3
 800be0a:	6838      	ldr	r0, [r7, #0]
 800be0c:	f7fd fdca 	bl	80099a4 <mkpay>
    rx_icmp(ifp, pkt);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7fe fb80 	bl	800a518 <rx_icmp>
 800be18:	e019      	b.n	800be4e <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	799b      	ldrb	r3, [r3, #6]
 800be20:	2b11      	cmp	r3, #17
 800be22:	d114      	bne.n	800be4e <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	2b07      	cmp	r3, #7
 800be36:	d909      	bls.n	800be4c <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3c:	3308      	adds	r3, #8
 800be3e:	4619      	mov	r1, r3
 800be40:	6838      	ldr	r0, [r7, #0]
 800be42:	f7fd fdaf 	bl	80099a4 <mkpay>
 800be46:	e002      	b.n	800be4e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800be48:	bf00      	nop
 800be4a:	e000      	b.n	800be4e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800be4c:	bf00      	nop
  }
}
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800be54:	b590      	push	{r4, r7, lr}
 800be56:	b093      	sub	sp, #76	@ 0x4c
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800be60:	f107 0314 	add.w	r3, r7, #20
 800be64:	2234      	movs	r2, #52	@ 0x34
 800be66:	2100      	movs	r1, #0
 800be68:	4618      	mov	r0, r3
 800be6a:	f017 fc0b 	bl	8023684 <memset>
  pkt.raw.buf = (char *) buf;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b0d      	cmp	r3, #13
 800be7e:	f240 80df 	bls.w	800c040 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d013      	beq.n	800beb4 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8e:	4618      	mov	r0, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2206      	movs	r2, #6
 800be94:	4619      	mov	r1, r3
 800be96:	f017 fbcb 	bl	8023630 <memcmp>
 800be9a:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea2:	2206      	movs	r2, #6
 800bea4:	4970      	ldr	r1, [pc, #448]	@ (800c068 <mg_tcpip_rx+0x214>)
 800bea6:	4618      	mov	r0, r3
 800bea8:	f017 fbc2 	bl	8023630 <memcmp>
 800beac:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f040 80c8 	bne.w	800c044 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d01a      	beq.n	800bef4 <mg_tcpip_rx+0xa0>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d917      	bls.n	800bef4 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3b04      	subs	r3, #4
 800bec8:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	2000      	movs	r0, #0
 800bed0:	f00b fc60 	bl	8017794 <mg_crc32>
 800bed4:	4603      	mov	r3, r0
 800bed6:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4413      	add	r3, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f107 0310 	add.w	r3, r7, #16
 800bee4:	2204      	movs	r2, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	f017 fba2 	bl	8023630 <memcmp>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f040 80aa 	bne.w	800c048 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef6:	899b      	ldrh	r3, [r3, #12]
 800bef8:	b29c      	uxth	r4, r3
 800befa:	f640 0006 	movw	r0, #2054	@ 0x806
 800befe:	f00b fc32 	bl	8017766 <mg_ntohs>
 800bf02:	4603      	mov	r3, r0
 800bf04:	429c      	cmp	r4, r3
 800bf06:	d114      	bne.n	800bf32 <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0a:	330e      	adds	r3, #14
 800bf0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b29      	cmp	r3, #41	@ 0x29
 800bf12:	f240 809b 	bls.w	800c04c <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800bf16:	f107 0314 	add.w	r3, r7, #20
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	2103      	movs	r1, #3
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f7fd fd2c 	bl	800997c <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800bf24:	f107 0314 	add.w	r3, r7, #20
 800bf28:	4619      	mov	r1, r3
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7fe f9e2 	bl	800a2f4 <rx_arp>
 800bf30:	e097      	b.n	800c062 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	899b      	ldrh	r3, [r3, #12]
 800bf36:	b29c      	uxth	r4, r3
 800bf38:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800bf3c:	f00b fc13 	bl	8017766 <mg_ntohs>
 800bf40:	4603      	mov	r3, r0
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d11b      	bne.n	800bf7e <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf48:	330e      	adds	r3, #14
 800bf4a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2b35      	cmp	r3, #53	@ 0x35
 800bf50:	d97e      	bls.n	800c050 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800bf52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b06      	cmp	r3, #6
 800bf5c:	d17a      	bne.n	800c054 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800bf5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf60:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800bf64:	f107 0314 	add.w	r3, r7, #20
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fd fd1a 	bl	80099a4 <mkpay>
    rx_ip6(ifp, &pkt);
 800bf70:	f107 0314 	add.w	r3, r7, #20
 800bf74:	4619      	mov	r1, r3
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff ff2a 	bl	800bdd0 <rx_ip6>
 800bf7c:	e071      	b.n	800c062 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf80:	899b      	ldrh	r3, [r3, #12]
 800bf82:	b29c      	uxth	r4, r3
 800bf84:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bf88:	f00b fbed 	bl	8017766 <mg_ntohs>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	d133      	bne.n	800bffa <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	330e      	adds	r3, #14
 800bf96:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	2b21      	cmp	r3, #33	@ 0x21
 800bf9c:	d95c      	bls.n	800c058 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa0:	885b      	ldrh	r3, [r3, #2]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f00b fbde 	bl	8017766 <mg_ntohs>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f103 020e 	add.w	r2, r3, #14
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d208      	bcs.n	800bfc8 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb8:	885b      	ldrh	r3, [r3, #2]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f00b fbd2 	bl	8017766 <mg_ntohs>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	330e      	adds	r3, #14
 800bfc6:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2b21      	cmp	r3, #33	@ 0x21
 800bfcc:	d946      	bls.n	800c05c <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	091b      	lsrs	r3, r3, #4
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d142      	bne.n	800c060 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	f103 0214 	add.w	r2, r3, #20
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fd fcdc 	bl	80099a4 <mkpay>
    rx_ip(ifp, &pkt);
 800bfec:	f107 0314 	add.w	r3, r7, #20
 800bff0:	4619      	mov	r1, r3
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f7ff fd7e 	bl	800baf4 <rx_ip>
 800bff8:	e033      	b.n	800c062 <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 800bffa:	4b1c      	ldr	r3, [pc, #112]	@ (800c06c <mg_tcpip_rx+0x218>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	dd11      	ble.n	800c026 <mg_tcpip_rx+0x1d2>
 800c002:	4b1b      	ldr	r3, [pc, #108]	@ (800c070 <mg_tcpip_rx+0x21c>)
 800c004:	f241 726f 	movw	r2, #5999	@ 0x176f
 800c008:	491a      	ldr	r1, [pc, #104]	@ (800c074 <mg_tcpip_rx+0x220>)
 800c00a:	2003      	movs	r0, #3
 800c00c:	f7fb fe28 	bl	8007c60 <mg_log_prefix>
 800c010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c012:	899b      	ldrh	r3, [r3, #12]
 800c014:	b29b      	uxth	r3, r3
 800c016:	4618      	mov	r0, r3
 800c018:	f00b fba5 	bl	8017766 <mg_ntohs>
 800c01c:	4603      	mov	r3, r0
 800c01e:	4619      	mov	r1, r3
 800c020:	4815      	ldr	r0, [pc, #84]	@ (800c078 <mg_tcpip_rx+0x224>)
 800c022:	f7fb fe6d 	bl	8007d00 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800c026:	4b11      	ldr	r3, [pc, #68]	@ (800c06c <mg_tcpip_rx+0x218>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b03      	cmp	r3, #3
 800c02c:	dd19      	ble.n	800c062 <mg_tcpip_rx+0x20e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b20      	cmp	r3, #32
 800c032:	bf28      	it	cs
 800c034:	2320      	movcs	r3, #32
 800c036:	4619      	mov	r1, r3
 800c038:	68b8      	ldr	r0, [r7, #8]
 800c03a:	f7fb fe97 	bl	8007d6c <mg_hexdump>
 800c03e:	e010      	b.n	800c062 <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800c040:	bf00      	nop
 800c042:	e00e      	b.n	800c062 <mg_tcpip_rx+0x20e>
    return;
 800c044:	bf00      	nop
 800c046:	e00c      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800c048:	bf00      	nop
 800c04a:	e00a      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800c04c:	bf00      	nop
 800c04e:	e008      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800c050:	bf00      	nop
 800c052:	e006      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800c054:	bf00      	nop
 800c056:	e004      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c058:	bf00      	nop
 800c05a:	e002      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c05c:	bf00      	nop
 800c05e:	e000      	b.n	800c062 <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800c060:	bf00      	nop
  }
}
 800c062:	374c      	adds	r7, #76	@ 0x4c
 800c064:	46bd      	mov	sp, r7
 800c066:	bd90      	pop	{r4, r7, pc}
 800c068:	0802a47c 	.word	0x0802a47c
 800c06c:	24000240 	.word	0x24000240
 800c070:	0802a808 	.word	0x0802a808
 800c074:	08027148 	.word	0x08027148
 800c078:	080286c0 	.word	0x080286c0

0800c07c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800c07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c07e:	b095      	sub	sp, #84	@ 0x54
 800c080:	af06      	add	r7, sp, #24
 800c082:	6178      	str	r0, [r7, #20]
 800c084:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800c08e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c092:	e9cd 2300 	strd	r2, r3, [sp]
 800c096:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c09a:	f04f 0300 	mov.w	r3, #0
 800c09e:	4608      	mov	r0, r1
 800c0a0:	f003 f960 	bl	800f364 <mg_timer_expired>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800c0aa:	6979      	ldr	r1, [r7, #20]
 800c0ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800c0b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <mg_tcpip_poll+0x58>
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d106      	bne.n	800c0d4 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY; // keep best-effort MAC
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	2204      	movs	r2, #4
 800c0ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    onstatechange(ifp);
 800c0ce:	6978      	ldr	r0, [r7, #20]
 800c0d0:	f7fd fdc0 	bl	8009c54 <onstatechange>
  }
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800c0d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d073      	beq.n	800c1c4 <mg_tcpip_poll+0x148>
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d06e      	beq.n	800c1c4 <mg_tcpip_poll+0x148>
    bool up = ifp->driver->up(ifp);
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	6978      	ldr	r0, [r7, #20]
 800c0ee:	4798      	blx	r3
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bf14      	ite	ne
 800c100:	2301      	movne	r3, #1
 800c102:	2300      	moveq	r3, #0
 800c104:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800c108:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c10c:	f083 0301 	eor.w	r3, r3, #1
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d006      	beq.n	800c124 <mg_tcpip_poll+0xa8>
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	7f1b      	ldrb	r3, [r3, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <mg_tcpip_poll+0xa8>
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2200      	movs	r2, #0
 800c122:	609a      	str	r2, [r3, #8]
    if (up != current) {  // link state has changed
 800c124:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800c128:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d01a      	beq.n	800c166 <mg_tcpip_poll+0xea>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c130:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c134:	f083 0301 	eor.w	r3, r3, #1
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <mg_tcpip_poll+0xc6>
 800c13e:	2300      	movs	r3, #0
 800c140:	e00a      	b.n	800c158 <mg_tcpip_poll+0xdc>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c146:	2b00      	cmp	r3, #0
 800c148:	d103      	bne.n	800c152 <mg_tcpip_poll+0xd6>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <mg_tcpip_poll+0xda>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c152:	2301      	movs	r3, #1
 800c154:	e000      	b.n	800c158 <mg_tcpip_poll+0xdc>
 800c156:	2303      	movs	r3, #3
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                       ? MG_TCPIP_STATE_UP
                       : MG_TCPIP_STATE_IP;
      onstatechange(ifp);
 800c15e:	6978      	ldr	r0, [r7, #20]
 800c160:	f7fd fd78 	bl	8009c54 <onstatechange>
 800c164:	e016      	b.n	800c194 <mg_tcpip_poll+0x118>
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	7f1b      	ldrb	r3, [r3, #28]
 800c16a:	f083 0301 	eor.w	r3, r3, #1
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00f      	beq.n	800c194 <mg_tcpip_poll+0x118>
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d10a      	bne.n	800c194 <mg_tcpip_poll+0x118>
               ifp->ip) {
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	689b      	ldr	r3, [r3, #8]
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c182:	2b00      	cmp	r3, #0
 800c184:	d006      	beq.n	800c194 <mg_tcpip_poll+0x118>
      ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2203      	movs	r2, #3
 800c18a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      onstatechange(ifp);
 800c18e:	6978      	ldr	r0, [r7, #20]
 800c190:	f7fd fd60 	bl	8009c54 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10d      	bne.n	800c1ba <mg_tcpip_poll+0x13e>
 800c19e:	4ba2      	ldr	r3, [pc, #648]	@ (800c428 <mg_tcpip_poll+0x3ac>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dd09      	ble.n	800c1ba <mg_tcpip_poll+0x13e>
 800c1a6:	4ba1      	ldr	r3, [pc, #644]	@ (800c42c <mg_tcpip_poll+0x3b0>)
 800c1a8:	f241 7296 	movw	r2, #6038	@ 0x1796
 800c1ac:	49a0      	ldr	r1, [pc, #640]	@ (800c430 <mg_tcpip_poll+0x3b4>)
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	f7fb fd56 	bl	8007c60 <mg_log_prefix>
 800c1b4:	489f      	ldr	r0, [pc, #636]	@ (800c434 <mg_tcpip_poll+0x3b8>)
 800c1b6:	f7fb fda3 	bl	8007d00 <mg_log>
    mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	2104      	movs	r1, #4
 800c1be:	6978      	ldr	r0, [r7, #20]
 800c1c0:	f7fd fbdc 	bl	800997c <mg_tcpip_call>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f000 819d 	beq.w	800c50a <mg_tcpip_poll+0x48e>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	7f1b      	ldrb	r3, [r3, #28]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d055      	beq.n	800c284 <mg_tcpip_poll+0x208>
 800c1d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d051      	beq.n	800c284 <mg_tcpip_poll+0x208>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d103      	bne.n	800c1f2 <mg_tcpip_poll+0x176>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800c1ea:	6978      	ldr	r0, [r7, #20]
 800c1ec:	f7fd ffd4 	bl	800a198 <tx_dhcp_discover>
 800c1f0:	e048      	b.n	800c284 <mg_tcpip_poll+0x208>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d143      	bne.n	800c284 <mg_tcpip_poll+0x208>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c202:	4313      	orrs	r3, r2
 800c204:	d03e      	beq.n	800c284 <mg_tcpip_poll+0x208>
      if (ifp->now >= ifp->lease_expire) {
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800c212:	4290      	cmp	r0, r2
 800c214:	eb71 0303 	sbcs.w	r3, r1, r3
 800c218:	d30a      	bcc.n	800c230 <mg_tcpip_poll+0x1b4>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2200      	movs	r2, #0
 800c226:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800c228:	6978      	ldr	r0, [r7, #20]
 800c22a:	f7fd fd13 	bl	8009c54 <onstatechange>
 800c22e:	e029      	b.n	800c284 <mg_tcpip_poll+0x208>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800c236:	4980      	ldr	r1, [pc, #512]	@ (800c438 <mg_tcpip_poll+0x3bc>)
 800c238:	1854      	adds	r4, r2, r1
 800c23a:	f143 0500 	adc.w	r5, r3, #0
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800c244:	42a2      	cmp	r2, r4
 800c246:	41ab      	sbcs	r3, r5
 800c248:	d21c      	bcs.n	800c284 <mg_tcpip_poll+0x208>
                 ((ifp->now / 1000) % 60) == 0) {
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c250:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	f7f4 fab6 	bl	80007c8 <__aeabi_uldivmod>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	4610      	mov	r0, r2
 800c262:	4619      	mov	r1, r3
 800c264:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800c268:	f04f 0300 	mov.w	r3, #0
 800c26c:	f7f4 faac 	bl	80007c8 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c270:	4313      	orrs	r3, r2
 800c272:	d107      	bne.n	800c284 <mg_tcpip_poll+0x208>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	f04f 33ff 	mov.w	r3, #4294967295
 800c27c:	496f      	ldr	r1, [pc, #444]	@ (800c43c <mg_tcpip_poll+0x3c0>)
 800c27e:	6978      	ldr	r0, [r7, #20]
 800c280:	f7fd ff58 	bl	800a134 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d019      	beq.n	800c2c2 <mg_tcpip_poll+0x246>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	4798      	blx	r3
 800c2a0:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800c2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d024      	beq.n	800c2f2 <mg_tcpip_poll+0x276>
      ifp->nrecv++;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6978      	ldr	r0, [r7, #20]
 800c2bc:	f7ff fdca 	bl	800be54 <mg_tcpip_rx>
 800c2c0:	e017      	b.n	800c2f2 <mg_tcpip_poll+0x276>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	3334      	adds	r3, #52	@ 0x34
 800c2c6:	f107 0220 	add.w	r2, r7, #32
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f001 fb87 	bl	800d9e0 <mg_queue_next>
 800c2d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800c2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00b      	beq.n	800c2f2 <mg_tcpip_poll+0x276>
      mg_tcpip_rx(ifp, buf, len);
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6978      	ldr	r0, [r7, #20]
 800c2e2:	f7ff fdb7 	bl	800be54 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	3334      	adds	r3, #52	@ 0x34
 800c2ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f001 fbf5 	bl	800dadc <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2fa:	e101      	b.n	800c500 <mg_tcpip_poll+0x484>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2fe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d008      	beq.n	800c31e <mg_tcpip_poll+0x2a2>
 800c30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c312:	f003 0310 	and.w	r3, r3, #16
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80eb 	beq.w	800c4f4 <mg_tcpip_poll+0x478>
 800c31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c320:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f040 80e2 	bne.w	800c4f4 <mg_tcpip_poll+0x478>
 800c330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c332:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c336:	f003 0308 	and.w	r3, r3, #8
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f040 80d9 	bne.w	800c4f4 <mg_tcpip_poll+0x478>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800c342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c344:	33b0      	adds	r3, #176	@ 0xb0
 800c346:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34a:	331c      	adds	r3, #28
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c35a:	4290      	cmp	r0, r2
 800c35c:	eb71 0303 	sbcs.w	r3, r1, r3
 800c360:	f080 80cb 	bcs.w	800c4fa <mg_tcpip_poll+0x47e>
      if (s->ttype == MIP_TTYPE_ARP) {
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	7f9b      	ldrb	r3, [r3, #30]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d104      	bne.n	800c376 <mg_tcpip_poll+0x2fa>
        mg_error(c, "ARP timeout");
 800c36c:	4934      	ldr	r1, [pc, #208]	@ (800c440 <mg_tcpip_poll+0x3c4>)
 800c36e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c370:	f7f6 f98c 	bl	800268c <mg_error>
 800c374:	e0b9      	b.n	800c4ea <mg_tcpip_poll+0x46e>
      } else if (c->is_udp) {
 800c376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c378:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	f040 80b8 	bne.w	800c4f8 <mg_tcpip_poll+0x47c>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800c388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38a:	7f9b      	ldrb	r3, [r3, #30]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d142      	bne.n	800c416 <mg_tcpip_poll+0x39a>
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	691a      	ldr	r2, [r3, #16]
 800c394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d03c      	beq.n	800c416 <mg_tcpip_poll+0x39a>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 800c39c:	4b22      	ldr	r3, [pc, #136]	@ (800c428 <mg_tcpip_poll+0x3ac>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	dd0f      	ble.n	800c3c4 <mg_tcpip_poll+0x348>
 800c3a4:	4b21      	ldr	r3, [pc, #132]	@ (800c42c <mg_tcpip_poll+0x3b0>)
 800c3a6:	f241 72ca 	movw	r2, #6090	@ 0x17ca
 800c3aa:	4921      	ldr	r1, [pc, #132]	@ (800c430 <mg_tcpip_poll+0x3b4>)
 800c3ac:	2004      	movs	r0, #4
 800c3ae:	f7fb fc57 	bl	8007c60 <mg_log_prefix>
 800c3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	4821      	ldr	r0, [pc, #132]	@ (800c444 <mg_tcpip_poll+0x3c8>)
 800c3c0:	f7fb fc9e 	bl	8007d00 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c6:	f103 0618 	add.w	r6, r3, #24
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	613b      	str	r3, [r7, #16]
 800c3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d0:	8b1c      	ldrh	r4, [r3, #24]
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f00b f9aa 	bl	8017734 <mg_ntohl>
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f00b f9a4 	bl	8017734 <mg_ntohl>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	9205      	str	r2, [sp, #20]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	9204      	str	r2, [sp, #16]
 800c3f6:	9303      	str	r3, [sp, #12]
 800c3f8:	6879      	ldr	r1, [r7, #4]
 800c3fa:	9102      	str	r1, [sp, #8]
 800c3fc:	9501      	str	r5, [sp, #4]
 800c3fe:	9400      	str	r4, [sp, #0]
 800c400:	2310      	movs	r3, #16
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	4631      	mov	r1, r6
 800c406:	6978      	ldr	r0, [r7, #20]
 800c408:	f7fe fd2a 	bl	800ae60 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	611a      	str	r2, [r3, #16]
 800c414:	e069      	b.n	800c4ea <mg_tcpip_poll+0x46e>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c418:	7f9b      	ldrb	r3, [r3, #30]
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d116      	bne.n	800c44c <mg_tcpip_poll+0x3d0>
        mg_error(c, "Connection timeout");
 800c41e:	490a      	ldr	r1, [pc, #40]	@ (800c448 <mg_tcpip_poll+0x3cc>)
 800c420:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c422:	f7f6 f933 	bl	800268c <mg_error>
 800c426:	e060      	b.n	800c4ea <mg_tcpip_poll+0x46e>
 800c428:	24000240 	.word	0x24000240
 800c42c:	0802a814 	.word	0x0802a814
 800c430:	08027148 	.word	0x08027148
 800c434:	080286d4 	.word	0x080286d4
 800c438:	001b7740 	.word	0x001b7740
 800c43c:	0802a47c 	.word	0x0802a47c
 800c440:	080286e4 	.word	0x080286e4
 800c444:	080286f0 	.word	0x080286f0
 800c448:	08028700 	.word	0x08028700
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800c44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44e:	7f9b      	ldrb	r3, [r3, #30]
 800c450:	2b04      	cmp	r3, #4
 800c452:	d107      	bne.n	800c464 <mg_tcpip_poll+0x3e8>
        c->is_closing = 1;
 800c454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c456:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800c45a:	f043 0320 	orr.w	r3, r3, #32
 800c45e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800c462:	e04a      	b.n	800c4fa <mg_tcpip_poll+0x47e>
      } else {
        if (s->tmiss++ > 2) {
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	7fdb      	ldrb	r3, [r3, #31]
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	b2d1      	uxtb	r1, r2
 800c46c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c46e:	77d1      	strb	r1, [r2, #31]
 800c470:	2b02      	cmp	r3, #2
 800c472:	d904      	bls.n	800c47e <mg_tcpip_poll+0x402>
          mg_error(c, "keepalive");
 800c474:	4927      	ldr	r1, [pc, #156]	@ (800c514 <mg_tcpip_poll+0x498>)
 800c476:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c478:	f7f6 f908 	bl	800268c <mg_error>
 800c47c:	e035      	b.n	800c4ea <mg_tcpip_poll+0x46e>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800c47e:	4b26      	ldr	r3, [pc, #152]	@ (800c518 <mg_tcpip_poll+0x49c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b03      	cmp	r3, #3
 800c484:	dd0c      	ble.n	800c4a0 <mg_tcpip_poll+0x424>
 800c486:	4b25      	ldr	r3, [pc, #148]	@ (800c51c <mg_tcpip_poll+0x4a0>)
 800c488:	f241 72d7 	movw	r2, #6103	@ 0x17d7
 800c48c:	4924      	ldr	r1, [pc, #144]	@ (800c520 <mg_tcpip_poll+0x4a4>)
 800c48e:	2004      	movs	r0, #4
 800c490:	f7fb fbe6 	bl	8007c60 <mg_log_prefix>
 800c494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c498:	4619      	mov	r1, r3
 800c49a:	4822      	ldr	r0, [pc, #136]	@ (800c524 <mg_tcpip_poll+0x4a8>)
 800c49c:	f7fb fc30 	bl	8007d00 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a2:	f103 0618 	add.w	r6, r3, #24
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	613b      	str	r3, [r7, #16]
 800c4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ac:	8b1c      	ldrh	r4, [r3, #24]
 800c4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b0:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f00b f93b 	bl	8017734 <mg_ntohl>
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f00b f935 	bl	8017734 <mg_ntohl>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	9205      	str	r2, [sp, #20]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	9204      	str	r2, [sp, #16]
 800c4d4:	9303      	str	r3, [sp, #12]
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	9102      	str	r1, [sp, #8]
 800c4da:	9501      	str	r5, [sp, #4]
 800c4dc:	9400      	str	r4, [sp, #0]
 800c4de:	2310      	movs	r3, #16
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	6978      	ldr	r0, [r7, #20]
 800c4e6:	f7fe fcbb 	bl	800ae60 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c4ee:	f7fd fad1 	bl	8009a94 <settmout>
 800c4f2:	e002      	b.n	800c4fa <mg_tcpip_poll+0x47e>
      continue;
 800c4f4:	bf00      	nop
 800c4f6:	e000      	b.n	800c4fa <mg_tcpip_poll+0x47e>
        continue;
 800c4f8:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c4fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c502:	2b00      	cmp	r3, #0
 800c504:	f47f aefa 	bne.w	800c2fc <mg_tcpip_poll+0x280>
 800c508:	e000      	b.n	800c50c <mg_tcpip_poll+0x490>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c50a:	bf00      	nop
    }
  }
}
 800c50c:	373c      	adds	r7, #60	@ 0x3c
 800c50e:	46bd      	mov	sp, r7
 800c510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c512:	bf00      	nop
 800c514:	08028714 	.word	0x08028714
 800c518:	24000240 	.word	0x24000240
 800c51c:	0802a814 	.word	0x0802a814
 800c520:	08027148 	.word	0x08027148
 800c524:	08028720 	.word	0x08028720

0800c528 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	3334      	adds	r3, #52	@ 0x34
 800c538:	f107 0114 	add.w	r1, r7, #20
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 f9f6 	bl	800d930 <mg_queue_book>
 800c544:	4602      	mov	r2, r0
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d811      	bhi.n	800c570 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	68f9      	ldr	r1, [r7, #12]
 800c552:	4618      	mov	r0, r3
 800c554:	f017 f98b 	bl	802386e <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	3334      	adds	r3, #52	@ 0x34
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 fa84 	bl	800da6c <mg_queue_add>
    ifp->nrecv++;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	671a      	str	r2, [r3, #112]	@ 0x70
  } else {
    ifp->ndrop++;
  }
}
 800c56e:	e004      	b.n	800c57a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c574:	1c5a      	adds	r2, r3, #1
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800c57a:	bf00      	nop
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
	...

0800c584 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d12d      	bne.n	800c5f2 <mg_tcpip_init+0x6e>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d129      	bne.n	800c5f2 <mg_tcpip_init+0x6e>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	789b      	ldrb	r3, [r3, #2]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d125      	bne.n	800c5f2 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d121      	bne.n	800c5f2 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	791b      	ldrb	r3, [r3, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d11d      	bne.n	800c5f2 <mg_tcpip_init+0x6e>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	795b      	ldrb	r3, [r3, #5]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d119      	bne.n	800c5f2 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	2105      	movs	r1, #5
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7f4 fb42 	bl	8000c54 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800c5d0:	4b51      	ldr	r3, [pc, #324]	@ (800c718 <mg_tcpip_init+0x194>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	dd0c      	ble.n	800c5f2 <mg_tcpip_init+0x6e>
 800c5d8:	4b50      	ldr	r3, [pc, #320]	@ (800c71c <mg_tcpip_init+0x198>)
 800c5da:	f241 72f6 	movw	r2, #6134	@ 0x17f6
 800c5de:	4950      	ldr	r1, [pc, #320]	@ (800c720 <mg_tcpip_init+0x19c>)
 800c5e0:	2002      	movs	r0, #2
 800c5e2:	f7fb fb3d 	bl	8007c60 <mg_log_prefix>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	494e      	ldr	r1, [pc, #312]	@ (800c724 <mg_tcpip_init+0x1a0>)
 800c5ec:	484e      	ldr	r0, [pc, #312]	@ (800c728 <mg_tcpip_init+0x1a4>)
 800c5ee:	f7fb fb87 	bl	8007d00 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d019      	beq.n	800c630 <mg_tcpip_init+0xac>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6838      	ldr	r0, [r7, #0]
 800c604:	4798      	blx	r3
 800c606:	4603      	mov	r3, r0
 800c608:	f083 0301 	eor.w	r3, r3, #1
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00e      	beq.n	800c630 <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 800c612:	4b41      	ldr	r3, [pc, #260]	@ (800c718 <mg_tcpip_init+0x194>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	dd7a      	ble.n	800c710 <mg_tcpip_init+0x18c>
 800c61a:	4b40      	ldr	r3, [pc, #256]	@ (800c71c <mg_tcpip_init+0x198>)
 800c61c:	f241 72fa 	movw	r2, #6138	@ 0x17fa
 800c620:	493f      	ldr	r1, [pc, #252]	@ (800c720 <mg_tcpip_init+0x19c>)
 800c622:	2001      	movs	r0, #1
 800c624:	f7fb fb1c 	bl	8007c60 <mg_log_prefix>
 800c628:	4840      	ldr	r0, [pc, #256]	@ (800c72c <mg_tcpip_init+0x1a8>)
 800c62a:	f7fb fb69 	bl	8007d00 <mg_log>
 800c62e:	e06f      	b.n	800c710 <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 800c630:	f240 6304 	movw	r3, #1540	@ 0x604
 800c634:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800c636:	68f9      	ldr	r1, [r7, #12]
 800c638:	2001      	movs	r0, #1
 800c63a:	f015 fda7 	bl	802218c <calloc>
 800c63e:	4603      	mov	r3, r0
 800c640:	461a      	mov	r2, r3
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	615a      	str	r2, [r3, #20]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <mg_tcpip_init+0xe6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <mg_tcpip_init+0xde>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	e001      	b.n	800c666 <mg_tcpip_init+0xe2>
 800c662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c66e:	4619      	mov	r1, r3
 800c670:	2001      	movs	r0, #1
 800c672:	f015 fd8b 	bl	802218c <calloc>
 800c676:	4603      	mov	r3, r0
 800c678:	461a      	mov	r2, r3
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800c67e:	f7f4 fb17 	bl	8000cb0 <mg_millis>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c69e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2230      	movs	r2, #48	@ 0x30
 800c6a6:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d102      	bne.n	800c6b6 <mg_tcpip_init+0x132>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	3346      	adds	r3, #70	@ 0x46
 800c6ba:	2206      	movs	r2, #6
 800c6bc:	21ff      	movs	r1, #255	@ 0xff
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f016 ffe0 	bl	8023684 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	3368      	adds	r3, #104	@ 0x68
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7f4 fac2 	bl	8000c54 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800c6d6:	4b16      	ldr	r3, [pc, #88]	@ (800c730 <mg_tcpip_init+0x1ac>)
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <mg_tcpip_init+0x16e>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10e      	bne.n	800c710 <mg_tcpip_init+0x18c>
 800c6f2:	4b09      	ldr	r3, [pc, #36]	@ (800c718 <mg_tcpip_init+0x194>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dd0a      	ble.n	800c710 <mg_tcpip_init+0x18c>
 800c6fa:	4b08      	ldr	r3, [pc, #32]	@ (800c71c <mg_tcpip_init+0x198>)
 800c6fc:	f641 020b 	movw	r2, #6155	@ 0x180b
 800c700:	4907      	ldr	r1, [pc, #28]	@ (800c720 <mg_tcpip_init+0x19c>)
 800c702:	2001      	movs	r0, #1
 800c704:	f7fb faac 	bl	8007c60 <mg_log_prefix>
 800c708:	480a      	ldr	r0, [pc, #40]	@ (800c734 <mg_tcpip_init+0x1b0>)
 800c70a:	f7fb faf9 	bl	8007d00 <mg_log>
  }
}
 800c70e:	e7ff      	b.n	800c710 <mg_tcpip_init+0x18c>
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	24000240 	.word	0x24000240
 800c71c:	0802a824 	.word	0x0802a824
 800c720:	08027148 	.word	0x08027148
 800c724:	0800d649 	.word	0x0800d649
 800c728:	08028730 	.word	0x08028730
 800c72c:	08028754 	.word	0x08028754
 800c730:	ffff8000 	.word	0xffff8000
 800c734:	080281a4 	.word	0x080281a4

0800c738 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 800c738:	b590      	push	{r4, r7, lr}
 800c73a:	b08d      	sub	sp, #52	@ 0x34
 800c73c:	af06      	add	r7, sp, #24
 800c73e:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	33b0      	adds	r3, #176	@ 0xb0
 800c744:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	8b1b      	ldrh	r3, [r3, #24]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f00b f80b 	bl	8017766 <mg_ntohs>
 800c750:	4603      	mov	r3, r0
 800c752:	4618      	mov	r0, r3
 800c754:	f00a ffee 	bl	8017734 <mg_ntohl>
 800c758:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c760:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	331c      	adds	r3, #28
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f103 0018 	add.w	r0, r3, #24
 800c770:	68bc      	ldr	r4, [r7, #8]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8b1b      	ldrh	r3, [r3, #24]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800c77a:	2100      	movs	r1, #0
 800c77c:	9105      	str	r1, [sp, #20]
 800c77e:	2100      	movs	r1, #0
 800c780:	9104      	str	r1, [sp, #16]
 800c782:	2100      	movs	r1, #0
 800c784:	9103      	str	r1, [sp, #12]
 800c786:	6939      	ldr	r1, [r7, #16]
 800c788:	9102      	str	r1, [sp, #8]
 800c78a:	9201      	str	r2, [sp, #4]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	2302      	movs	r3, #2
 800c790:	4622      	mov	r2, r4
 800c792:	4601      	mov	r1, r0
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f7fe fb63 	bl	800ae60 <tx_tcp>
         0);
}
 800c79a:	bf00      	nop
 800c79c:	371c      	adds	r7, #28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd90      	pop	{r4, r7, pc}

0800c7a2 <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00c      	beq.n	800c7d4 <mac_resolved+0x32>
    c->is_connecting = 0;
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800c7c0:	f36f 1345 	bfc	r3, #5, #1
 800c7c4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2104      	movs	r1, #4
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7f5 ff3d 	bl	800264c <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 800c7d2:	e006      	b.n	800c7e2 <mac_resolved+0x40>
    send_syn(c);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff ffaf 	bl	800c738 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 800c7da:	2103      	movs	r1, #3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7fd f959 	bl	8009a94 <settmout>
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08a      	sub	sp, #40	@ 0x28
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7fa:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	331c      	adds	r3, #28
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800c80a:	f36f 03c3 	bfc	r3, #3, #1
 800c80e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c818:	b21b      	sxth	r3, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	db04      	blt.n	800c828 <mg_connect_resolved+0x3c>
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c824:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3308      	adds	r3, #8
 800c82c:	69fa      	ldr	r2, [r7, #28]
 800c82e:	3208      	adds	r2, #8
 800c830:	6812      	ldr	r2, [r2, #0]
 800c832:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	b291      	uxth	r1, r2
 800c83e:	69fa      	ldr	r2, [r7, #28]
 800c840:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 800c844:	4618      	mov	r0, r3
 800c846:	f00a ff8e 	bl	8017766 <mg_ntohs>
 800c84a:	4603      	mov	r3, r0
 800c84c:	461a      	mov	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 800c852:	4b61      	ldr	r3, [pc, #388]	@ (800c9d8 <mg_connect_resolved+0x1ec>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b02      	cmp	r3, #2
 800c858:	dd15      	ble.n	800c886 <mg_connect_resolved+0x9a>
 800c85a:	4b60      	ldr	r3, [pc, #384]	@ (800c9dc <mg_connect_resolved+0x1f0>)
 800c85c:	f641 0230 	movw	r2, #6192	@ 0x1830
 800c860:	495f      	ldr	r1, [pc, #380]	@ (800c9e0 <mg_connect_resolved+0x1f4>)
 800c862:	2003      	movs	r0, #3
 800c864:	f7fb f9fc 	bl	8007c60 <mg_log_prefix>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f103 0208 	add.w	r2, r3, #8
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	331c      	adds	r3, #28
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	4b5a      	ldr	r3, [pc, #360]	@ (800c9e4 <mg_connect_resolved+0x1f8>)
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	4613      	mov	r3, r2
 800c87e:	4a59      	ldr	r2, [pc, #356]	@ (800c9e4 <mg_connect_resolved+0x1f8>)
 800c880:	4859      	ldr	r0, [pc, #356]	@ (800c9e8 <mg_connect_resolved+0x1fc>)
 800c882:	f7fb fa3d 	bl	8007d00 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800c886:	2200      	movs	r2, #0
 800c888:	2103      	movs	r1, #3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f5 fede 	bl	800264c <mg_call>
  c->is_connecting = 1;
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800c896:	f043 0320 	orr.w	r3, r3, #32
 800c89a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c8a4:	f003 0301 	and.w	r3, r3, #1
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d01a      	beq.n	800c8e4 <mg_connect_resolved+0xf8>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b4:	d008      	beq.n	800c8c8 <mg_connect_resolved+0xdc>
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	689a      	ldr	r2, [r3, #8]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	43db      	mvns	r3, r3
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d10d      	bne.n	800c8e4 <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	33b0      	adds	r3, #176	@ 0xb0
 800c8cc:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	3318      	adds	r3, #24
 800c8d2:	2206      	movs	r2, #6
 800c8d4:	21ff      	movs	r1, #255	@ 0xff
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f016 fed4 	bl	8023684 <memset>
    mac_resolved(c);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff ff60 	bl	800c7a2 <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800c8e2:	e075      	b.n	800c9d0 <mg_connect_resolved+0x1e4>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d030      	beq.n	800c94e <mg_connect_resolved+0x162>
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	689a      	ldr	r2, [r3, #8]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	405a      	eors	r2, r3
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d127      	bne.n	800c94e <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	691a      	ldr	r2, [r3, #16]
 800c902:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800c904:	429a      	cmp	r2, r3
 800c906:	d022      	beq.n	800c94e <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 800c908:	4b33      	ldr	r3, [pc, #204]	@ (800c9d8 <mg_connect_resolved+0x1ec>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	dd0c      	ble.n	800c92a <mg_connect_resolved+0x13e>
 800c910:	4b32      	ldr	r3, [pc, #200]	@ (800c9dc <mg_connect_resolved+0x1f0>)
 800c912:	f641 023b 	movw	r2, #6203	@ 0x183b
 800c916:	4932      	ldr	r1, [pc, #200]	@ (800c9e0 <mg_connect_resolved+0x1f4>)
 800c918:	2003      	movs	r0, #3
 800c91a:	f7fb f9a1 	bl	8007c60 <mg_log_prefix>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c922:	4619      	mov	r1, r3
 800c924:	4831      	ldr	r0, [pc, #196]	@ (800c9ec <mg_connect_resolved+0x200>)
 800c926:	f7fb f9eb 	bl	8007d00 <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	4619      	mov	r1, r3
 800c930:	69f8      	ldr	r0, [r7, #28]
 800c932:	f7fd f927 	bl	8009b84 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 800c936:	2102      	movs	r1, #2
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7fd f8ab 	bl	8009a94 <settmout>
    c->is_arplooking = 1;
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800c944:	f043 0310 	orr.w	r3, r3, #16
 800c948:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800c94c:	e040      	b.n	800c9d0 <mg_connect_resolved+0x1e4>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800c94e:	f107 030c 	add.w	r3, r7, #12
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c958:	2be0      	cmp	r3, #224	@ 0xe0
 800c95a:	d129      	bne.n	800c9b0 <mg_connect_resolved+0x1c4>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	33b0      	adds	r3, #176	@ 0xb0
 800c960:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800c962:	4a23      	ldr	r2, [pc, #140]	@ (800c9f0 <mg_connect_resolved+0x204>)
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	4611      	mov	r1, r2
 800c96c:	8019      	strh	r1, [r3, #0]
 800c96e:	3302      	adds	r3, #2
 800c970:	0c12      	lsrs	r2, r2, #16
 800c972:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	3318      	adds	r3, #24
 800c978:	461a      	mov	r2, r3
 800c97a:	f107 0308 	add.w	r3, r7, #8
 800c97e:	8819      	ldrh	r1, [r3, #0]
 800c980:	789b      	ldrb	r3, [r3, #2]
 800c982:	8011      	strh	r1, [r2, #0]
 800c984:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	3318      	adds	r3, #24
 800c98a:	1cd8      	adds	r0, r3, #3
 800c98c:	f107 030c 	add.w	r3, r7, #12
 800c990:	3301      	adds	r3, #1
 800c992:	2203      	movs	r2, #3
 800c994:	4619      	mov	r1, r3
 800c996:	f016 ff6a 	bl	802386e <memcpy>
    s->mac[3] &= 0x7F;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	7edb      	ldrb	r3, [r3, #27]
 800c99e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	76da      	strb	r2, [r3, #27]
    mac_resolved(c);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fefa 	bl	800c7a2 <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 800c9ae:	e00f      	b.n	800c9d0 <mg_connect_resolved+0x1e4>
    struct connstate *s = (struct connstate *) (c + 1);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	33b0      	adds	r3, #176	@ 0xb0
 800c9b4:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f103 0018 	add.w	r0, r3, #24
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	3346      	adds	r3, #70	@ 0x46
 800c9c0:	2206      	movs	r2, #6
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	f016 ff53 	bl	802386e <memcpy>
    mac_resolved(c);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff feea 	bl	800c7a2 <mac_resolved>
}
 800c9ce:	e7ff      	b.n	800c9d0 <mg_connect_resolved+0x1e4>
 800c9d0:	bf00      	nop
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	24000240 	.word	0x24000240
 800c9dc:	0802a834 	.word	0x0802a834
 800c9e0:	08027148 	.word	0x08027148
 800c9e4:	0800d5fd 	.word	0x0800d5fd
 800c9e8:	08028768 	.word	0x08028768
 800c9ec:	08028778 	.word	0x08028778
 800c9f0:	0802878c 	.word	0x0802878c

0800c9f4 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800c9fe:	6838      	ldr	r0, [r7, #0]
 800ca00:	f00a fdd4 	bl	80175ac <mg_url_port>
 800ca04:	4603      	mov	r3, r0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f00a fead 	bl	8017766 <mg_ntohs>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	831a      	strh	r2, [r3, #24]
  return true;
 800ca14:	2301      	movs	r3, #1
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ca2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca32:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d009      	beq.n	800ca4c <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca40:	461a      	mov	r2, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f005 fb44 	bl	80120d0 <mg_tls_send>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	e008      	b.n	800ca5e <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca54:	461a      	mov	r2, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7fe fc5a 	bl	800b310 <mg_io_send>
 800ca5c:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ca5e:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca66:	d104      	bne.n	800ca72 <write_conn+0x52>
    mg_error(c, "tx err");
 800ca68:	490c      	ldr	r1, [pc, #48]	@ (800ca9c <write_conn+0x7c>)
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7f5 fe0e 	bl	800268c <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 800ca70:	e010      	b.n	800ca94 <write_conn+0x74>
  } else if (len > 0) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	dd0d      	ble.n	800ca94 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3348      	adds	r3, #72	@ 0x48
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	2100      	movs	r1, #0
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fa f9fd 	bl	8006e80 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800ca86:	f107 030c 	add.w	r3, r7, #12
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2108      	movs	r1, #8
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7f5 fddc 	bl	800264c <mg_call>
}
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	08028790 	.word	0x08028790

0800caa0 <init_closure>:

static void init_closure(struct mg_connection *c) {
 800caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa2:	b08f      	sub	sp, #60	@ 0x3c
 800caa4:	af06      	add	r7, sp, #24
 800caa6:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	33b0      	adds	r3, #176	@ 0xb0
 800caac:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d13f      	bne.n	800cb3e <init_closure+0x9e>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d137      	bne.n	800cb3e <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cad4:	f003 0320 	and.w	r3, r3, #32
 800cad8:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d12f      	bne.n	800cb3e <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800cae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae4:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	331c      	adds	r3, #28
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	f103 0618 	add.w	r6, r3, #24
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	60bb      	str	r3, [r7, #8]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	8b1c      	ldrh	r4, [r3, #24]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f00a fe15 	bl	8017734 <mg_ntohl>
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f00a fe0f 	bl	8017734 <mg_ntohl>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	9205      	str	r2, [sp, #20]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	9204      	str	r2, [sp, #16]
 800cb20:	9303      	str	r3, [sp, #12]
 800cb22:	6879      	ldr	r1, [r7, #4]
 800cb24:	9102      	str	r1, [sp, #8]
 800cb26:	9501      	str	r5, [sp, #4]
 800cb28:	9400      	str	r4, [sp, #0]
 800cb2a:	2311      	movs	r3, #17
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	4631      	mov	r1, r6
 800cb30:	69b8      	ldr	r0, [r7, #24]
 800cb32:	f7fe f995 	bl	800ae60 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 800cb36:	2104      	movs	r1, #4
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f7fc ffab 	bl	8009a94 <settmout>
  }
}
 800cb3e:	bf00      	nop
 800cb40:	3724      	adds	r7, #36	@ 0x24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb46 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b084      	sub	sp, #16
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	33b0      	adds	r3, #176	@ 0xb0
 800cb52:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	3320      	adds	r3, #32
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fa f9dc 	bl	8006f16 <mg_iobuf_free>
  mg_close_conn(c);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7fc fcba 	bl	80094d8 <mg_close_conn>
}
 800cb64:	bf00      	nop
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <can_write>:

static bool can_write(struct mg_connection *c) {
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d11d      	bne.n	800cbc0 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cb8a:	f003 0308 	and.w	r3, r3, #8
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d115      	bne.n	800cbc0 <can_write+0x54>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d011      	beq.n	800cbc0 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cba2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cba6:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d109      	bne.n	800cbc0 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cbb2:	f003 0310 	and.w	r3, r3, #16
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <can_write+0x54>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <can_write+0x56>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800cbd4:	b5b0      	push	{r4, r5, r7, lr}
 800cbd6:	b08c      	sub	sp, #48	@ 0x30
 800cbd8:	af04      	add	r7, sp, #16
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe2:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800cbe4:	f7f4 f864 	bl	8000cb0 <mg_millis>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cbf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	f002 fc16 	bl	800f42c <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f000 80aa 	beq.w	800cd5c <mg_mgr_poll+0x188>
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 80a5 	beq.w	800cd5c <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 800cc12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc16:	69b8      	ldr	r0, [r7, #24]
 800cc18:	f7ff fa30 	bl	800c07c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	61fb      	str	r3, [r7, #28]
 800cc22:	e096      	b.n	800cd52 <mg_mgr_poll+0x17e>
    tmp = c->next;
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	33b0      	adds	r3, #176	@ 0xb0
 800cc2e:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	461a      	mov	r2, r3
 800cc36:	2102      	movs	r1, #2
 800cc38:	69f8      	ldr	r0, [r7, #28]
 800cc3a:	f7f5 fd07 	bl	800264c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800cc3e:	4b49      	ldr	r3, [pc, #292]	@ (800cd64 <mg_mgr_poll+0x190>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	dd48      	ble.n	800ccd8 <mg_mgr_poll+0x104>
 800cc46:	4b48      	ldr	r3, [pc, #288]	@ (800cd68 <mg_mgr_poll+0x194>)
 800cc48:	f641 0281 	movw	r2, #6273	@ 0x1881
 800cc4c:	4947      	ldr	r1, [pc, #284]	@ (800cd6c <mg_mgr_poll+0x198>)
 800cc4e:	2004      	movs	r0, #4
 800cc50:	f7fb f806 	bl	8007c60 <mg_log_prefix>
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cc5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <mg_mgr_poll+0x98>
 800cc68:	2454      	movs	r4, #84	@ 0x54
 800cc6a:	e000      	b.n	800cc6e <mg_mgr_poll+0x9a>
 800cc6c:	2474      	movs	r4, #116	@ 0x74
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cc74:	f003 0320 	and.w	r3, r3, #32
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <mg_mgr_poll+0xae>
 800cc7e:	2543      	movs	r5, #67	@ 0x43
 800cc80:	e000      	b.n	800cc84 <mg_mgr_poll+0xb0>
 800cc82:	2563      	movs	r5, #99	@ 0x63
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cc8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <mg_mgr_poll+0xc4>
 800cc94:	2348      	movs	r3, #72	@ 0x48
 800cc96:	e000      	b.n	800cc9a <mg_mgr_poll+0xc6>
 800cc98:	2368      	movs	r3, #104	@ 0x68
 800cc9a:	69fa      	ldr	r2, [r7, #28]
 800cc9c:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 800cca0:	f002 0208 	and.w	r2, r2, #8
 800cca4:	b2d2      	uxtb	r2, r2
 800cca6:	2a00      	cmp	r2, #0
 800cca8:	d001      	beq.n	800ccae <mg_mgr_poll+0xda>
 800ccaa:	2252      	movs	r2, #82	@ 0x52
 800ccac:	e000      	b.n	800ccb0 <mg_mgr_poll+0xdc>
 800ccae:	2272      	movs	r2, #114	@ 0x72
 800ccb0:	69f9      	ldr	r1, [r7, #28]
 800ccb2:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 800ccb6:	f001 0120 	and.w	r1, r1, #32
 800ccba:	b2c9      	uxtb	r1, r1
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	d001      	beq.n	800ccc4 <mg_mgr_poll+0xf0>
 800ccc0:	2143      	movs	r1, #67	@ 0x43
 800ccc2:	e000      	b.n	800ccc6 <mg_mgr_poll+0xf2>
 800ccc4:	2163      	movs	r1, #99	@ 0x63
 800ccc6:	9102      	str	r1, [sp, #8]
 800ccc8:	9201      	str	r2, [sp, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	462b      	mov	r3, r5
 800ccce:	4622      	mov	r2, r4
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	4827      	ldr	r0, [pc, #156]	@ (800cd70 <mg_mgr_poll+0x19c>)
 800ccd4:	f7fb f814 	bl	8007d00 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ccde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00b      	beq.n	800cd00 <mg_mgr_poll+0x12c>
 800cce8:	69f8      	ldr	r0, [r7, #28]
 800ccea:	f005 fa85 	bl	80121f8 <mg_tls_pending>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	3368      	adds	r3, #104	@ 0x68
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	69f8      	ldr	r0, [r7, #28]
 800ccfc:	f7fe fb80 	bl	800b400 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 800cd00:	69f8      	ldr	r0, [r7, #28]
 800cd02:	f7ff ff33 	bl	800cb6c <can_write>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <mg_mgr_poll+0x13e>
 800cd0c:	69f8      	ldr	r0, [r7, #28]
 800cd0e:	f7ff fe87 	bl	800ca20 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <mg_mgr_poll+0x164>
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d106      	bne.n	800cd38 <mg_mgr_poll+0x164>
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	7f9b      	ldrb	r3, [r3, #30]
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	d002      	beq.n	800cd38 <mg_mgr_poll+0x164>
      init_closure(c);
 800cd32:	69f8      	ldr	r0, [r7, #28]
 800cd34:	f7ff feb4 	bl	800caa0 <init_closure>
    if (c->is_closing) close_conn(c);
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cd3e:	f003 0320 	and.w	r3, r3, #32
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <mg_mgr_poll+0x17a>
 800cd48:	69f8      	ldr	r0, [r7, #28]
 800cd4a:	f7ff fefc 	bl	800cb46 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	61fb      	str	r3, [r7, #28]
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f47f af65 	bne.w	800cc24 <mg_mgr_poll+0x50>
 800cd5a:	e000      	b.n	800cd5e <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 800cd5c:	bf00      	nop
  }
  (void) ms;
}
 800cd5e:	3720      	adds	r7, #32
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bdb0      	pop	{r4, r5, r7, pc}
 800cd64:	24000240 	.word	0x24000240
 800cd68:	0802a848 	.word	0x0802a848
 800cd6c:	08027148 	.word	0x08027148
 800cd70:	08028798 	.word	0x08028798

0800cd74 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800cd74:	b5b0      	push	{r4, r5, r7, lr}
 800cd76:	b08c      	sub	sp, #48	@ 0x30
 800cd78:	af04      	add	r7, sp, #16
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd86:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	331c      	adds	r3, #28
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <mg_send+0x32>
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800cda2:	2b04      	cmp	r3, #4
 800cda4:	d004      	beq.n	800cdb0 <mg_send+0x3c>
    mg_error(c, "net down");
 800cda6:	4934      	ldr	r1, [pc, #208]	@ (800ce78 <mg_send+0x104>)
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7f5 fc6f 	bl	800268c <mg_error>
 800cdae:	e05e      	b.n	800ce6e <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01e      	beq.n	800cdfe <mg_send+0x8a>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cdc6:	f003 0310 	and.w	r3, r3, #16
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d107      	bne.n	800cde0 <mg_send+0x6c>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cdd6:	f003 0308 	and.w	r3, r3, #8
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00e      	beq.n	800cdfe <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 800cde0:	4b26      	ldr	r3, [pc, #152]	@ (800ce7c <mg_send+0x108>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	dd42      	ble.n	800ce6e <mg_send+0xfa>
 800cde8:	4b25      	ldr	r3, [pc, #148]	@ (800ce80 <mg_send+0x10c>)
 800cdea:	f641 0297 	movw	r2, #6295	@ 0x1897
 800cdee:	4925      	ldr	r1, [pc, #148]	@ (800ce84 <mg_send+0x110>)
 800cdf0:	2004      	movs	r0, #4
 800cdf2:	f7fa ff35 	bl	8007c60 <mg_log_prefix>
 800cdf6:	4824      	ldr	r0, [pc, #144]	@ (800ce88 <mg_send+0x114>)
 800cdf8:	f7fa ff82 	bl	8007d00 <mg_log>
 800cdfc:	e037      	b.n	800ce6e <mg_send+0xfa>
  } else if (c->is_udp) {
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ce04:	f003 0301 	and.w	r3, r3, #1
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d020      	beq.n	800ce50 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	33b0      	adds	r3, #176	@ 0xb0
 800ce12:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7fe f9ec 	bl	800b1f4 <trim_len>
 800ce1c:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f103 0018 	add.w	r0, r3, #24
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	689c      	ldr	r4, [r3, #8]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	8b1d      	ldrh	r5, [r3, #24]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	9103      	str	r1, [sp, #12]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	9102      	str	r1, [sp, #8]
 800ce3a:	9201      	str	r2, [sp, #4]
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	462b      	mov	r3, r5
 800ce40:	4622      	mov	r2, r4
 800ce42:	4601      	mov	r1, r0
 800ce44:	69b8      	ldr	r0, [r7, #24]
 800ce46:	f7fd f806 	bl	8009e56 <tx_udp>
    res = true;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	77fb      	strb	r3, [r7, #31]
 800ce4e:	e00e      	b.n	800ce6e <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	f7f9 ffbd 	bl	8006ddc <mg_iobuf_add>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	bf14      	ite	ne
 800ce68:	2301      	movne	r3, #1
 800ce6a:	2300      	moveq	r3, #0
 800ce6c:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800ce6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bdb0      	pop	{r4, r5, r7, pc}
 800ce78:	080287ac 	.word	0x080287ac
 800ce7c:	24000240 	.word	0x24000240
 800ce80:	0802a854 	.word	0x0802a854
 800ce84:	08027148 	.word	0x08027148
 800ce88:	080287b8 	.word	0x080287b8

0800ce8c <mg_ota_begin>:

struct mg_otadata {
  uint32_t crc32, size, timestamp, status;
};

bool mg_ota_begin(size_t new_firmware_size) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  bool ok = false;
 800ce94:	2300      	movs	r3, #0
 800ce96:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 800ce98:	4b33      	ldr	r3, [pc, #204]	@ (800cf68 <mg_ota_begin+0xdc>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00e      	beq.n	800cebe <mg_ota_begin+0x32>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 800cea0:	4b32      	ldr	r3, [pc, #200]	@ (800cf6c <mg_ota_begin+0xe0>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	dd5a      	ble.n	800cf5e <mg_ota_begin+0xd2>
 800cea8:	4b31      	ldr	r3, [pc, #196]	@ (800cf70 <mg_ota_begin+0xe4>)
 800ceaa:	f641 1223 	movw	r2, #6435	@ 0x1923
 800ceae:	4931      	ldr	r1, [pc, #196]	@ (800cf74 <mg_ota_begin+0xe8>)
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	f7fa fed5 	bl	8007c60 <mg_log_prefix>
 800ceb6:	4830      	ldr	r0, [pc, #192]	@ (800cf78 <mg_ota_begin+0xec>)
 800ceb8:	f7fa ff22 	bl	8007d00 <mg_log>
 800cebc:	e04f      	b.n	800cf5e <mg_ota_begin+0xd2>
  } else {
    size_t half = mg_flash_size() / 2, max = half - mg_flash_sector_size();
 800cebe:	f019 fddc 	bl	8026a7a <mg_flash_size>
 800cec2:	4603      	mov	r3, r0
 800cec4:	085b      	lsrs	r3, r3, #1
 800cec6:	613b      	str	r3, [r7, #16]
 800cec8:	f019 fde4 	bl	8026a94 <mg_flash_sector_size>
 800cecc:	4602      	mov	r2, r0
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]
    s_crc32 = 0;
 800ced4:	4b29      	ldr	r3, [pc, #164]	@ (800cf7c <mg_ota_begin+0xf0>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	601a      	str	r2, [r3, #0]
    s_addr = (char *) mg_flash_start() + half;
 800ceda:	f019 fdc5 	bl	8026a68 <mg_flash_start>
 800cede:	4602      	mov	r2, r0
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	4413      	add	r3, r2
 800cee4:	4a26      	ldr	r2, [pc, #152]	@ (800cf80 <mg_ota_begin+0xf4>)
 800cee6:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Firmware %lu bytes, max %lu", new_firmware_size, max));
 800cee8:	4b20      	ldr	r3, [pc, #128]	@ (800cf6c <mg_ota_begin+0xe0>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	dd0b      	ble.n	800cf08 <mg_ota_begin+0x7c>
 800cef0:	4b1f      	ldr	r3, [pc, #124]	@ (800cf70 <mg_ota_begin+0xe4>)
 800cef2:	f641 1228 	movw	r2, #6440	@ 0x1928
 800cef6:	491f      	ldr	r1, [pc, #124]	@ (800cf74 <mg_ota_begin+0xe8>)
 800cef8:	2003      	movs	r0, #3
 800cefa:	f7fa feb1 	bl	8007c60 <mg_log_prefix>
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	4820      	ldr	r0, [pc, #128]	@ (800cf84 <mg_ota_begin+0xf8>)
 800cf04:	f7fa fefc 	bl	8007d00 <mg_log>
    if (new_firmware_size < max) {
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d216      	bcs.n	800cf3e <mg_ota_begin+0xb2>
      ok = true;
 800cf10:	2301      	movs	r3, #1
 800cf12:	75fb      	strb	r3, [r7, #23]
      s_size = new_firmware_size;
 800cf14:	4a14      	ldr	r2, [pc, #80]	@ (800cf68 <mg_ota_begin+0xdc>)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 800cf1a:	4b14      	ldr	r3, [pc, #80]	@ (800cf6c <mg_ota_begin+0xe0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	dd1d      	ble.n	800cf5e <mg_ota_begin+0xd2>
 800cf22:	4b13      	ldr	r3, [pc, #76]	@ (800cf70 <mg_ota_begin+0xe4>)
 800cf24:	f641 122c 	movw	r2, #6444	@ 0x192c
 800cf28:	4912      	ldr	r1, [pc, #72]	@ (800cf74 <mg_ota_begin+0xe8>)
 800cf2a:	2002      	movs	r0, #2
 800cf2c:	f7fa fe98 	bl	8007c60 <mg_log_prefix>
 800cf30:	4b0d      	ldr	r3, [pc, #52]	@ (800cf68 <mg_ota_begin+0xdc>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4619      	mov	r1, r3
 800cf36:	4814      	ldr	r0, [pc, #80]	@ (800cf88 <mg_ota_begin+0xfc>)
 800cf38:	f7fa fee2 	bl	8007d00 <mg_log>
 800cf3c:	e00f      	b.n	800cf5e <mg_ota_begin+0xd2>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, max));
 800cf3e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf6c <mg_ota_begin+0xe0>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	dd0b      	ble.n	800cf5e <mg_ota_begin+0xd2>
 800cf46:	4b0a      	ldr	r3, [pc, #40]	@ (800cf70 <mg_ota_begin+0xe4>)
 800cf48:	f641 122e 	movw	r2, #6446	@ 0x192e
 800cf4c:	4909      	ldr	r1, [pc, #36]	@ (800cf74 <mg_ota_begin+0xe8>)
 800cf4e:	2001      	movs	r0, #1
 800cf50:	f7fa fe86 	bl	8007c60 <mg_log_prefix>
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	480c      	ldr	r0, [pc, #48]	@ (800cf8c <mg_ota_begin+0x100>)
 800cf5a:	f7fa fed1 	bl	8007d00 <mg_log>
    }
  }
  return ok;
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	24000cfc 	.word	0x24000cfc
 800cf6c:	24000240 	.word	0x24000240
 800cf70:	0802a85c 	.word	0x0802a85c
 800cf74:	08027148 	.word	0x08027148
 800cf78:	080287cc 	.word	0x080287cc
 800cf7c:	24000d00 	.word	0x24000d00
 800cf80:	24000cf8 	.word	0x24000cf8
 800cf84:	080287f8 	.word	0x080287f8
 800cf88:	08028814 	.word	0x08028814
 800cf8c:	08028834 	.word	0x08028834

0800cf90 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 800cf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf94:	b08a      	sub	sp, #40	@ 0x28
 800cf96:	af02      	add	r7, sp, #8
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
  bool ok = false;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	77fb      	strb	r3, [r7, #31]
  if (s_size == 0) {
 800cfa0:	4b51      	ldr	r3, [pc, #324]	@ (800d0e8 <mg_ota_write+0x158>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10f      	bne.n	800cfc8 <mg_ota_write+0x38>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 800cfa8:	4b50      	ldr	r3, [pc, #320]	@ (800d0ec <mg_ota_write+0x15c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f340 8095 	ble.w	800d0dc <mg_ota_write+0x14c>
 800cfb2:	4b4f      	ldr	r3, [pc, #316]	@ (800d0f0 <mg_ota_write+0x160>)
 800cfb4:	f641 1237 	movw	r2, #6455	@ 0x1937
 800cfb8:	494e      	ldr	r1, [pc, #312]	@ (800d0f4 <mg_ota_write+0x164>)
 800cfba:	2001      	movs	r0, #1
 800cfbc:	f7fa fe50 	bl	8007c60 <mg_log_prefix>
 800cfc0:	484d      	ldr	r0, [pc, #308]	@ (800d0f8 <mg_ota_write+0x168>)
 800cfc2:	f7fa fe9d 	bl	8007d00 <mg_log>
 800cfc6:	e089      	b.n	800d0dc <mg_ota_write+0x14c>
  } else {
    size_t align = mg_flash_write_align();
 800cfc8:	f019 fd6d 	bl	8026aa6 <mg_flash_write_align>
 800cfcc:	61b8      	str	r0, [r7, #24]
    size_t len_aligned_down = MG_ROUND_DOWN(len, align);
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d007      	beq.n	800cfe4 <mg_ota_write+0x54>
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
 800cfe2:	e000      	b.n	800cfe6 <mg_ota_write+0x56>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	617b      	str	r3, [r7, #20]
    if (len_aligned_down) ok = mg_flash_write(s_addr, buf, len_aligned_down);
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d008      	beq.n	800d000 <mg_ota_write+0x70>
 800cfee:	4b43      	ldr	r3, [pc, #268]	@ (800d0fc <mg_ota_write+0x16c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f019 ff34 	bl	8026e64 <mg_flash_write>
 800cffc:	4603      	mov	r3, r0
 800cffe:	77fb      	strb	r3, [r7, #31]
    if (len_aligned_down < len) {
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	429a      	cmp	r2, r3
 800d006:	d242      	bcs.n	800d08e <mg_ota_write+0xfe>
 800d008:	466b      	mov	r3, sp
 800d00a:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	613b      	str	r3, [r7, #16]
      char tmp[align];
 800d014:	69be      	ldr	r6, [r7, #24]
 800d016:	4633      	mov	r3, r6
 800d018:	3b01      	subs	r3, #1
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	2300      	movs	r3, #0
 800d01e:	46b0      	mov	r8, r6
 800d020:	4699      	mov	r9, r3
 800d022:	f04f 0200 	mov.w	r2, #0
 800d026:	f04f 0300 	mov.w	r3, #0
 800d02a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d02e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d036:	2300      	movs	r3, #0
 800d038:	4634      	mov	r4, r6
 800d03a:	461d      	mov	r5, r3
 800d03c:	f04f 0200 	mov.w	r2, #0
 800d040:	f04f 0300 	mov.w	r3, #0
 800d044:	00eb      	lsls	r3, r5, #3
 800d046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d04a:	00e2      	lsls	r2, r4, #3
 800d04c:	1df3      	adds	r3, r6, #7
 800d04e:	08db      	lsrs	r3, r3, #3
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	ebad 0d03 	sub.w	sp, sp, r3
 800d056:	ab02      	add	r3, sp, #8
 800d058:	3300      	adds	r3, #0
 800d05a:	60bb      	str	r3, [r7, #8]
      memset(tmp, 0xff, sizeof(tmp));
 800d05c:	4632      	mov	r2, r6
 800d05e:	21ff      	movs	r1, #255	@ 0xff
 800d060:	68b8      	ldr	r0, [r7, #8]
 800d062:	f016 fb0f 	bl	8023684 <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	4413      	add	r3, r2
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	4619      	mov	r1, r3
 800d070:	68b8      	ldr	r0, [r7, #8]
 800d072:	f016 fbfc 	bl	802386e <memcpy>
      ok = mg_flash_write(s_addr + len_aligned_down, tmp, sizeof(tmp));
 800d076:	4b21      	ldr	r3, [pc, #132]	@ (800d0fc <mg_ota_write+0x16c>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	4413      	add	r3, r2
 800d07e:	4632      	mov	r2, r6
 800d080:	68b9      	ldr	r1, [r7, #8]
 800d082:	4618      	mov	r0, r3
 800d084:	f019 feee 	bl	8026e64 <mg_flash_write>
 800d088:	4603      	mov	r3, r0
 800d08a:	77fb      	strb	r3, [r7, #31]
 800d08c:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 800d08e:	4b1c      	ldr	r3, [pc, #112]	@ (800d100 <mg_ota_write+0x170>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	4618      	mov	r0, r3
 800d098:	f00a fb7c 	bl	8017794 <mg_crc32>
 800d09c:	4603      	mov	r3, r0
 800d09e:	4a18      	ldr	r2, [pc, #96]	@ (800d100 <mg_ota_write+0x170>)
 800d0a0:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 800d0a2:	4b12      	ldr	r3, [pc, #72]	@ (800d0ec <mg_ota_write+0x15c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	dd12      	ble.n	800d0d0 <mg_ota_write+0x140>
 800d0aa:	4b11      	ldr	r3, [pc, #68]	@ (800d0f0 <mg_ota_write+0x160>)
 800d0ac:	f641 1244 	movw	r2, #6468	@ 0x1944
 800d0b0:	4910      	ldr	r1, [pc, #64]	@ (800d0f4 <mg_ota_write+0x164>)
 800d0b2:	2003      	movs	r0, #3
 800d0b4:	f7fa fdd4 	bl	8007c60 <mg_log_prefix>
 800d0b8:	4b10      	ldr	r3, [pc, #64]	@ (800d0fc <mg_ota_write+0x16c>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	425b      	negs	r3, r3
 800d0c0:	18d1      	adds	r1, r2, r3
 800d0c2:	7ffb      	ldrb	r3, [r7, #31]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	480e      	ldr	r0, [pc, #56]	@ (800d104 <mg_ota_write+0x174>)
 800d0cc:	f7fa fe18 	bl	8007d00 <mg_log>
    s_addr += len;
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0fc <mg_ota_write+0x16c>)
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	4a08      	ldr	r2, [pc, #32]	@ (800d0fc <mg_ota_write+0x16c>)
 800d0da:	6013      	str	r3, [r2, #0]
  }
  return ok;
 800d0dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3720      	adds	r7, #32
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e8:	24000cfc 	.word	0x24000cfc
 800d0ec:	24000240 	.word	0x24000240
 800d0f0:	0802a86c 	.word	0x0802a86c
 800d0f4:	08027148 	.word	0x08027148
 800d0f8:	08028858 	.word	0x08028858
 800d0fc:	24000cf8 	.word	0x24000cf8
 800d100:	24000d00 	.word	0x24000d00
 800d104:	08028880 	.word	0x08028880

0800d108 <mg_ota_end>:
  return key;
}

static size_t swap_size(void);

bool mg_ota_end(void) {
 800d108:	b590      	push	{r4, r7, lr}
 800d10a:	b08f      	sub	sp, #60	@ 0x3c
 800d10c:	af02      	add	r7, sp, #8
  char *base = (char *) mg_flash_start() + mg_flash_size() / 2;
 800d10e:	f019 fcab 	bl	8026a68 <mg_flash_start>
 800d112:	4604      	mov	r4, r0
 800d114:	f019 fcb1 	bl	8026a7a <mg_flash_size>
 800d118:	4603      	mov	r3, r0
 800d11a:	085b      	lsrs	r3, r3, #1
 800d11c:	4423      	add	r3, r4
 800d11e:	627b      	str	r3, [r7, #36]	@ 0x24
  bool ok = false;
 800d120:	2300      	movs	r3, #0
 800d122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (s_size) {
 800d126:	4b46      	ldr	r3, [pc, #280]	@ (800d240 <mg_ota_end+0x138>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d06c      	beq.n	800d208 <mg_ota_end+0x100>
    size_t size = s_addr - base;
 800d12e:	4b45      	ldr	r3, [pc, #276]	@ (800d244 <mg_ota_end+0x13c>)
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	623b      	str	r3, [r7, #32]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 800d138:	4b41      	ldr	r3, [pc, #260]	@ (800d240 <mg_ota_end+0x138>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	461a      	mov	r2, r3
 800d13e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d140:	2000      	movs	r0, #0
 800d142:	f00a fb27 	bl	8017794 <mg_crc32>
 800d146:	61f8      	str	r0, [r7, #28]
    if (size == s_size && crc32 == s_crc32) {
 800d148:	4b3d      	ldr	r3, [pc, #244]	@ (800d240 <mg_ota_end+0x138>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6a3a      	ldr	r2, [r7, #32]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d125      	bne.n	800d19e <mg_ota_end+0x96>
 800d152:	4b3d      	ldr	r3, [pc, #244]	@ (800d248 <mg_ota_end+0x140>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	69fa      	ldr	r2, [r7, #28]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d120      	bne.n	800d19e <mg_ota_end+0x96>
      uint32_t now = (uint32_t) (mg_now() / 1000);
 800d15c:	f001 f982 	bl	800e464 <mg_now>
 800d160:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	f7f3 fb2e 	bl	80007c8 <__aeabi_uldivmod>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4613      	mov	r3, r2
 800d172:	61bb      	str	r3, [r7, #24]
      struct mg_otadata od = {crc32, size, now, MG_OTA_FIRST_BOOT};
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	607b      	str	r3, [r7, #4]
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	60bb      	str	r3, [r7, #8]
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	60fb      	str	r3, [r7, #12]
 800d180:	2301      	movs	r3, #1
 800d182:	613b      	str	r3, [r7, #16]
      uint32_t key = mg_fwkey(MG_FIRMWARE_PREVIOUS);
 800d184:	2001      	movs	r0, #1
 800d186:	f019 ff3d 	bl	8027004 <mg_fwkey>
 800d18a:	6178      	str	r0, [r7, #20]
      ok = mg_flash_save(NULL, key, &od, sizeof(od));
 800d18c:	1d3a      	adds	r2, r7, #4
 800d18e:	2310      	movs	r3, #16
 800d190:	6979      	ldr	r1, [r7, #20]
 800d192:	2000      	movs	r0, #0
 800d194:	f7f4 faa6 	bl	80016e4 <mg_flash_save>
 800d198:	4603      	mov	r3, r0
 800d19a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 800d19e:	4b2b      	ldr	r3, [pc, #172]	@ (800d24c <mg_ota_end+0x144>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	dd19      	ble.n	800d1da <mg_ota_end+0xd2>
 800d1a6:	4b2a      	ldr	r3, [pc, #168]	@ (800d250 <mg_ota_end+0x148>)
 800d1a8:	f44f 52cb 	mov.w	r2, #6496	@ 0x1960
 800d1ac:	4929      	ldr	r1, [pc, #164]	@ (800d254 <mg_ota_end+0x14c>)
 800d1ae:	2003      	movs	r0, #3
 800d1b0:	f7fa fd56 	bl	8007c60 <mg_log_prefix>
 800d1b4:	4b24      	ldr	r3, [pc, #144]	@ (800d248 <mg_ota_end+0x140>)
 800d1b6:	6819      	ldr	r1, [r3, #0]
 800d1b8:	4b21      	ldr	r3, [pc, #132]	@ (800d240 <mg_ota_end+0x138>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <mg_ota_end+0xc0>
 800d1c4:	4b24      	ldr	r3, [pc, #144]	@ (800d258 <mg_ota_end+0x150>)
 800d1c6:	e000      	b.n	800d1ca <mg_ota_end+0xc2>
 800d1c8:	4b24      	ldr	r3, [pc, #144]	@ (800d25c <mg_ota_end+0x154>)
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	69fa      	ldr	r2, [r7, #28]
 800d1d4:	4822      	ldr	r0, [pc, #136]	@ (800d260 <mg_ota_end+0x158>)
 800d1d6:	f7fa fd93 	bl	8007d00 <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 800d1da:	4b19      	ldr	r3, [pc, #100]	@ (800d240 <mg_ota_end+0x138>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	601a      	str	r2, [r3, #0]
    if (ok) {
 800d1e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00f      	beq.n	800d208 <mg_ota_end+0x100>
      size_t sz = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (mg_flash_bank() == 0) {
 800d1ec:	f019 fc63 	bl	8026ab6 <mg_flash_bank>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <mg_ota_end+0xf4>
        // No dual bank support.
        sz = swap_size();
 800d1f6:	f000 f837 	bl	800d268 <swap_size>
 800d1fa:	62b8      	str	r0, [r7, #40]	@ 0x28
      }
      ok = mg_flash_swap_bank(sz);
 800d1fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1fe:	f019 fdf1 	bl	8026de4 <mg_flash_swap_bank>
 800d202:	4603      	mov	r3, r0
 800d204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 800d208:	4b10      	ldr	r3, [pc, #64]	@ (800d24c <mg_ota_end+0x144>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	dd11      	ble.n	800d234 <mg_ota_end+0x12c>
 800d210:	4b0f      	ldr	r3, [pc, #60]	@ (800d250 <mg_ota_end+0x148>)
 800d212:	f641 126c 	movw	r2, #6508	@ 0x196c
 800d216:	490f      	ldr	r1, [pc, #60]	@ (800d254 <mg_ota_end+0x14c>)
 800d218:	2002      	movs	r0, #2
 800d21a:	f7fa fd21 	bl	8007c60 <mg_log_prefix>
 800d21e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <mg_ota_end+0x122>
 800d226:	4b0c      	ldr	r3, [pc, #48]	@ (800d258 <mg_ota_end+0x150>)
 800d228:	e000      	b.n	800d22c <mg_ota_end+0x124>
 800d22a:	4b0c      	ldr	r3, [pc, #48]	@ (800d25c <mg_ota_end+0x154>)
 800d22c:	4619      	mov	r1, r3
 800d22e:	480d      	ldr	r0, [pc, #52]	@ (800d264 <mg_ota_end+0x15c>)
 800d230:	f7fa fd66 	bl	8007d00 <mg_log>
  return ok;
 800d234:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3734      	adds	r7, #52	@ 0x34
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd90      	pop	{r4, r7, pc}
 800d240:	24000cfc 	.word	0x24000cfc
 800d244:	24000cf8 	.word	0x24000cf8
 800d248:	24000d00 	.word	0x24000d00
 800d24c:	24000240 	.word	0x24000240
 800d250:	0802a87c 	.word	0x0802a87c
 800d254:	08027148 	.word	0x08027148
 800d258:	08027300 	.word	0x08027300
 800d25c:	08027304 	.word	0x08027304
 800d260:	08028894 	.word	0x08028894
 800d264:	080288bc 	.word	0x080288bc

0800d268 <swap_size>:
  // MG_DEBUG(("Loaded OTA data. fw %d, bank %d, key %p", fw, bank, key));
  // mg_hexdump(&od, sizeof(od));
  return od;
}

static size_t swap_size(void) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08a      	sub	sp, #40	@ 0x28
 800d26c:	af00      	add	r7, sp, #0
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 800d26e:	f107 0314 	add.w	r3, r7, #20
 800d272:	2100      	movs	r1, #0
 800d274:	4618      	mov	r0, r3
 800d276:	f019 fee9 	bl	802704c <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 800d27a:	1d3b      	adds	r3, r7, #4
 800d27c:	2101      	movs	r1, #1
 800d27e:	4618      	mov	r0, r3
 800d280:	f019 fee4 	bl	802704c <mg_otadata>
  size_t sz = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	627b      	str	r3, [r7, #36]	@ 0x24
  if (curr.status != MG_OTA_UNAVAILABLE && prev.status != MG_OTA_UNAVAILABLE) {
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d008      	beq.n	800d2a0 <swap_size+0x38>
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d005      	beq.n	800d2a0 <swap_size+0x38>
    // We know exact sizes of both firmwares, use MAX(firmware1, firmware2)
    sz = (size_t) (curr.size > prev.size ? curr.size : prev.size);
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	4293      	cmp	r3, r2
 800d29a:	bf38      	it	cc
 800d29c:	4613      	movcc	r3, r2
 800d29e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return sz;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3728      	adds	r7, #40	@ 0x28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	6039      	str	r1, [r7, #0]
 800d2b4:	71fb      	strb	r3, [r7, #7]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 800d2be:	79bb      	ldrb	r3, [r7, #6]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00d      	beq.n	800d2e0 <mg_pfn_iobuf_private+0x36>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	1c9a      	adds	r2, r3, #2
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d906      	bls.n	800d2e0 <mg_pfn_iobuf_private+0x36>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	4619      	mov	r1, r3
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7f9 fcf2 	bl	8006cc4 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	1c9a      	adds	r2, r3, #2
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d811      	bhi.n	800d312 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	1c58      	adds	r0, r3, #1
 800d2f8:	68f9      	ldr	r1, [r7, #12]
 800d2fa:	6088      	str	r0, [r1, #8]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	79fa      	ldrb	r2, [r7, #7]
 800d300:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	4413      	add	r3, r2
 800d30c:	2200      	movs	r2, #0
 800d30e:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 800d310:	e00f      	b.n	800d332 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	689a      	ldr	r2, [r3, #8]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d209      	bcs.n	800d332 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	1c58      	adds	r0, r3, #1
 800d328:	68f9      	ldr	r1, [r7, #12]
 800d32a:	6088      	str	r0, [r1, #8]
 800d32c:	4413      	add	r3, r2
 800d32e:	2200      	movs	r2, #0
 800d330:	701a      	strb	r2, [r3, #0]
}
 800d332:	bf00      	nop
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b082      	sub	sp, #8
 800d33e:	af00      	add	r7, sp, #0
 800d340:	4603      	mov	r3, r0
 800d342:	6039      	str	r1, [r7, #0]
 800d344:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 800d346:	79fb      	ldrb	r3, [r7, #7]
 800d348:	2200      	movs	r2, #0
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff ffac 	bl	800d2aa <mg_pfn_iobuf_private>
}
 800d352:	bf00      	nop
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	4603      	mov	r3, r0
 800d362:	6039      	str	r1, [r7, #0]
 800d364:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	2201      	movs	r2, #1
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7ff ff9c 	bl	800d2aa <mg_pfn_iobuf_private>
}
 800d372:	bf00      	nop
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08a      	sub	sp, #40	@ 0x28
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	617b      	str	r3, [r7, #20]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	61bb      	str	r3, [r7, #24]
 800d392:	2300      	movs	r3, #0
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	2300      	movs	r3, #0
 800d398:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800d39a:	f107 0114 	add.w	r1, r7, #20
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	4809      	ldr	r0, [pc, #36]	@ (800d3c8 <mg_vsnprintf+0x4c>)
 800d3a4:	f7f5 fe20 	bl	8002fe8 <mg_vxprintf>
 800d3a8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 800d3aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d204      	bcs.n	800d3bc <mg_vsnprintf+0x40>
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b6:	4413      	add	r3, r2
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	701a      	strb	r2, [r3, #0]
  return n;
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3728      	adds	r7, #40	@ 0x28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	0800d33b 	.word	0x0800d33b

0800d3cc <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 800d3cc:	b40c      	push	{r2, r3}
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800d3d8:	f107 031c 	add.w	r3, r7, #28
 800d3dc:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 800d3de:	f107 0308 	add.w	r3, r7, #8
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	6839      	ldr	r1, [r7, #0]
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff ffc8 	bl	800d37c <mg_vsnprintf>
 800d3ec:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3fa:	b002      	add	sp, #8
 800d3fc:	4770      	bx	lr
	...

0800d400 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 800d40a:	2300      	movs	r3, #0
 800d40c:	60bb      	str	r3, [r7, #8]
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]
 800d412:	2300      	movs	r3, #0
 800d414:	613b      	str	r3, [r7, #16]
 800d416:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d41a:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 800d41c:	f107 0108 	add.w	r1, r7, #8
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4803      	ldr	r0, [pc, #12]	@ (800d434 <mg_vmprintf+0x34>)
 800d426:	f7f5 fddf 	bl	8002fe8 <mg_vxprintf>
  return (char *) io.buf;
 800d42a:	68bb      	ldr	r3, [r7, #8]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	0800d35b 	.word	0x0800d35b

0800d438 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 800d438:	b40f      	push	{r0, r1, r2, r3}
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 800d440:	f107 0314 	add.w	r3, r7, #20
 800d444:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 800d446:	463b      	mov	r3, r7
 800d448:	4619      	mov	r1, r3
 800d44a:	6938      	ldr	r0, [r7, #16]
 800d44c:	f7ff ffd8 	bl	800d400 <mg_vmprintf>
 800d450:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 800d452:	687b      	ldr	r3, [r7, #4]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d45e:	b004      	add	sp, #16
 800d460:	4770      	bx	lr

0800d462 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 800d462:	b580      	push	{r7, lr}
 800d464:	b082      	sub	sp, #8
 800d466:	af00      	add	r7, sp, #0
 800d468:	4603      	mov	r3, r0
 800d46a:	6039      	str	r1, [r7, #0]
 800d46c:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	4618      	mov	r0, r3
 800d472:	f015 ffa9 	bl	80233c8 <putchar>
  (void) param;
}
 800d476:	bf00      	nop
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 800d480:	b580      	push	{r7, lr}
 800d482:	b088      	sub	sp, #32
 800d484:	af04      	add	r7, sp, #16
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	4618      	mov	r0, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3301      	adds	r3, #1
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3302      	adds	r3, #2
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3303      	adds	r3, #3
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	9302      	str	r3, [sp, #8]
 800d4aa:	9101      	str	r1, [sp, #4]
 800d4ac:	9200      	str	r2, [sp, #0]
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	4a04      	ldr	r2, [pc, #16]	@ (800d4c4 <print_ip4+0x44>)
 800d4b2:	68b9      	ldr	r1, [r7, #8]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7f5 fd7c 	bl	8002fb2 <mg_xprintf>
 800d4ba:	4603      	mov	r3, r0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	08028938 	.word	0x08028938

0800d4c8 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	b08e      	sub	sp, #56	@ 0x38
 800d4ce:	af08      	add	r7, sp, #32
 800d4d0:	6178      	str	r0, [r7, #20]
 800d4d2:	6139      	str	r1, [r7, #16]
 800d4d4:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f00a f943 	bl	8017766 <mg_ntohs>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3302      	adds	r3, #2
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f00a f93b 	bl	8017766 <mg_ntohs>
 800d4f0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d4f2:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3304      	adds	r3, #4
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f00a f933 	bl	8017766 <mg_ntohs>
 800d500:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d502:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3306      	adds	r3, #6
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f00a f92b 	bl	8017766 <mg_ntohs>
 800d510:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d512:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3308      	adds	r3, #8
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f00a f923 	bl	8017766 <mg_ntohs>
 800d520:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d522:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	330a      	adds	r3, #10
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f00a f91b 	bl	8017766 <mg_ntohs>
 800d530:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d532:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	330c      	adds	r3, #12
 800d538:	881b      	ldrh	r3, [r3, #0]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f00a f913 	bl	8017766 <mg_ntohs>
 800d540:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d542:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	330e      	adds	r3, #14
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f00a f90b 	bl	8017766 <mg_ntohs>
 800d550:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d552:	9306      	str	r3, [sp, #24]
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	9205      	str	r2, [sp, #20]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	9204      	str	r2, [sp, #16]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	9303      	str	r3, [sp, #12]
 800d560:	9602      	str	r6, [sp, #8]
 800d562:	9501      	str	r5, [sp, #4]
 800d564:	9400      	str	r4, [sp, #0]
 800d566:	4643      	mov	r3, r8
 800d568:	4a05      	ldr	r2, [pc, #20]	@ (800d580 <print_ip6+0xb8>)
 800d56a:	6939      	ldr	r1, [r7, #16]
 800d56c:	6978      	ldr	r0, [r7, #20]
 800d56e:	f7f5 fd20 	bl	8002fb2 <mg_xprintf>
 800d572:	4603      	mov	r3, r0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3718      	adds	r7, #24
 800d578:	46bd      	mov	sp, r7
 800d57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57e:	bf00      	nop
 800d580:	08028944 	.word	0x08028944

0800d584 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	1d19      	adds	r1, r3, #4
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	6011      	str	r1, [r2, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	68b9      	ldr	r1, [r7, #8]
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f7ff ff6c 	bl	800d480 <print_ip4>
 800d5a8:	4603      	mov	r3, r0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b086      	sub	sp, #24
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	60f8      	str	r0, [r7, #12]
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	1d19      	adds	r1, r3, #4
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	6011      	str	r1, [r2, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	7cdb      	ldrb	r3, [r3, #19]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d007      	beq.n	800d5e4 <mg_print_ip+0x32>
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	68b9      	ldr	r1, [r7, #8]
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7ff ff74 	bl	800d4c8 <print_ip6>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	e006      	b.n	800d5f2 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f7ff ff48 	bl	800d480 <print_ip4>
 800d5f0:	4603      	mov	r3, r0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3718      	adds	r7, #24
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af02      	add	r7, sp, #8
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	1d19      	adds	r1, r3, #4
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	6011      	str	r1, [r2, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	8a1b      	ldrh	r3, [r3, #16]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f00a f8a3 	bl	8017766 <mg_ntohs>
 800d620:	4603      	mov	r3, r0
 800d622:	9301      	str	r3, [sp, #4]
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	4b05      	ldr	r3, [pc, #20]	@ (800d640 <mg_print_ip_port+0x44>)
 800d62a:	4a06      	ldr	r2, [pc, #24]	@ (800d644 <mg_print_ip_port+0x48>)
 800d62c:	68b9      	ldr	r1, [r7, #8]
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7f5 fcbf 	bl	8002fb2 <mg_xprintf>
 800d634:	4603      	mov	r3, r0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	0800d5b3 	.word	0x0800d5b3
 800d644:	08028960 	.word	0x08028960

0800d648 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b08c      	sub	sp, #48	@ 0x30
 800d64c:	af06      	add	r7, sp, #24
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	1d19      	adds	r1, r3, #4
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	6011      	str	r1, [r2, #0]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	461d      	mov	r5, r3
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	3301      	adds	r3, #1
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	3302      	adds	r3, #2
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	3303      	adds	r3, #3
 800d67c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d67e:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	3304      	adds	r3, #4
 800d684:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d686:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	3305      	adds	r3, #5
 800d68c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	9403      	str	r4, [sp, #12]
 800d692:	9002      	str	r0, [sp, #8]
 800d694:	9101      	str	r1, [sp, #4]
 800d696:	9200      	str	r2, [sp, #0]
 800d698:	462b      	mov	r3, r5
 800d69a:	4a05      	ldr	r2, [pc, #20]	@ (800d6b0 <mg_print_mac+0x68>)
 800d69c:	68b9      	ldr	r1, [r7, #8]
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7f5 fc87 	bl	8002fb2 <mg_xprintf>
 800d6a4:	4603      	mov	r3, r0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	08028968 	.word	0x08028968

0800d6b4 <mg_esc>:

static char mg_esc(int c, bool esc) {
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 800d6c0:	4b19      	ldr	r3, [pc, #100]	@ (800d728 <mg_esc+0x74>)
 800d6c2:	613b      	str	r3, [r7, #16]
 800d6c4:	4b19      	ldr	r3, [pc, #100]	@ (800d72c <mg_esc+0x78>)
 800d6c6:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d001      	beq.n	800d6d2 <mg_esc+0x1e>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	e000      	b.n	800d6d4 <mg_esc+0x20>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	617b      	str	r3, [r7, #20]
 800d6d6:	e01b      	b.n	800d710 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	461a      	mov	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d112      	bne.n	800d70a <mg_esc+0x56>
 800d6e4:	78fb      	ldrb	r3, [r7, #3]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d007      	beq.n	800d6fa <mg_esc+0x46>
 800d6ea:	697a      	ldr	r2, [r7, #20]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	e00f      	b.n	800d71a <mg_esc+0x66>
 800d6fa:	697a      	ldr	r2, [r7, #20]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	1ad3      	subs	r3, r2, r3
 800d700:	461a      	mov	r2, r3
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	4413      	add	r3, r2
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	e007      	b.n	800d71a <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	3301      	adds	r3, #1
 800d70e:	617b      	str	r3, [r7, #20]
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1df      	bne.n	800d6d8 <mg_esc+0x24>
  }
  return 0;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	371c      	adds	r7, #28
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	080280ac 	.word	0x080280ac
 800d72c:	080280b4 	.word	0x080280b4

0800d730 <mg_escape>:

static char mg_escape(int c) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 800d738:	2101      	movs	r1, #1
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff ffba 	bl	800d6b4 <mg_esc>
 800d740:	4603      	mov	r3, r0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b088      	sub	sp, #32
 800d74e:	af00      	add	r7, sp, #0
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	607a      	str	r2, [r7, #4]
 800d756:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	61fb      	str	r3, [r7, #28]
 800d75c:	2300      	movs	r3, #0
 800d75e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800d760:	2300      	movs	r3, #0
 800d762:	61fb      	str	r3, [r7, #28]
 800d764:	e023      	b.n	800d7ae <qcpy+0x64>
    char c = mg_escape(buf[i]);
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7ff ffde 	bl	800d730 <mg_escape>
 800d774:	4603      	mov	r3, r0
 800d776:	75fb      	strb	r3, [r7, #23]
    if (c) {
 800d778:	7dfb      	ldrb	r3, [r7, #23]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00c      	beq.n	800d798 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	68b9      	ldr	r1, [r7, #8]
 800d782:	205c      	movs	r0, #92	@ 0x5c
 800d784:	4798      	blx	r3
 800d786:	7dfa      	ldrb	r2, [r7, #23]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	68b9      	ldr	r1, [r7, #8]
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	3301      	adds	r3, #1
 800d794:	61bb      	str	r3, [r7, #24]
 800d796:	e007      	b.n	800d7a8 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	4413      	add	r3, r2
 800d79e:	781a      	ldrb	r2, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	68b9      	ldr	r1, [r7, #8]
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	61fb      	str	r3, [r7, #28]
 800d7ae:	69fa      	ldr	r2, [r7, #28]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d205      	bcs.n	800d7c2 <qcpy+0x78>
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1d1      	bne.n	800d766 <qcpy+0x1c>
    }
  }
  return i + extra;
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	4413      	add	r3, r2
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3720      	adds	r7, #32
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b088      	sub	sp, #32
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	1d19      	adds	r1, r3, #4
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	6011      	str	r1, [r2, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	1d19      	adds	r1, r3, #4
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6011      	str	r1, [r2, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 800d7f8:	4b16      	ldr	r3, [pc, #88]	@ (800d854 <mg_print_hex+0x84>)
 800d7fa:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61fb      	str	r3, [r7, #28]
 800d800:	e01e      	b.n	800d840 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	4413      	add	r3, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	091b      	lsrs	r3, r3, #4
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 030f 	and.w	r3, r3, #15
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	4413      	add	r3, r2
 800d816:	781a      	ldrb	r2, [r3, #0]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	68b9      	ldr	r1, [r7, #8]
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	4413      	add	r3, r2
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f003 030f 	and.w	r3, r3, #15
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	4413      	add	r3, r2
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	68b9      	ldr	r1, [r7, #8]
 800d836:	4610      	mov	r0, r2
 800d838:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	3301      	adds	r3, #1
 800d83e:	61fb      	str	r3, [r7, #28]
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	429a      	cmp	r2, r3
 800d846:	d3dc      	bcc.n	800d802 <mg_print_hex+0x32>
  }
  return 2 * bl;
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	005b      	lsls	r3, r3, #1
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3720      	adds	r7, #32
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	080274fc 	.word	0x080274fc

0800d858 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	1d19      	adds	r1, r3, #4
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6011      	str	r1, [r2, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	1d19      	adds	r1, r3, #4
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	6011      	str	r1, [r2, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d109      	bne.n	800d89a <mg_print_esc+0x42>
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <mg_print_esc+0x3e>
 800d88c:	6938      	ldr	r0, [r7, #16]
 800d88e:	f7f2 fd87 	bl	80003a0 <strlen>
 800d892:	4603      	mov	r3, r0
 800d894:	e000      	b.n	800d898 <mg_print_esc+0x40>
 800d896:	2300      	movs	r3, #0
 800d898:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	68b9      	ldr	r1, [r7, #8]
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7ff ff52 	bl	800d74a <qcpy>
 800d8a6:	4603      	mov	r3, r0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 800d8bc:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689a      	ldr	r2, [r3, #8]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d906      	bls.n	800d8ee <mg_queue_read_len+0x3e>
 800d8e0:	4b05      	ldr	r3, [pc, #20]	@ (800d8f8 <mg_queue_read_len+0x48>)
 800d8e2:	4a06      	ldr	r2, [pc, #24]	@ (800d8fc <mg_queue_read_len+0x4c>)
 800d8e4:	f641 21c9 	movw	r1, #6857	@ 0x1ac9
 800d8e8:	4805      	ldr	r0, [pc, #20]	@ (800d900 <mg_queue_read_len+0x50>)
 800d8ea:	f014 fc2d 	bl	8022148 <__assert_func>
  return n;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	080289cc 	.word	0x080289cc
 800d8fc:	0802a8a4 	.word	0x0802a8a4
 800d900:	08027148 	.word	0x08027148

0800d904 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	4413      	add	r3, r2
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 800d920:	f3bf 8f5b 	dmb	ish
}
 800d924:	bf00      	nop
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 800d93c:	2300      	movs	r3, #0
 800d93e:	617b      	str	r3, [r7, #20]
 800d940:	2308      	movs	r3, #8
 800d942:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	68da      	ldr	r2, [r3, #12]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d312      	bcc.n	800d976 <mg_queue_book+0x46>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	441a      	add	r2, r3
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	441a      	add	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	429a      	cmp	r2, r3
 800d962:	d808      	bhi.n	800d976 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	1ad2      	subs	r2, r2, r3
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	e011      	b.n	800d99a <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68da      	ldr	r2, [r3, #12]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d30b      	bcc.n	800d99a <mg_queue_book+0x6a>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d206      	bcs.n	800d99a <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 800d98c:	2100      	movs	r1, #0
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f7ff ffb8 	bl	800d904 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	441a      	add	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	441a      	add	r2, r3
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d207      	bcs.n	800d9be <mg_queue_book+0x8e>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	689a      	ldr	r2, [r3, #8]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	1ad2      	subs	r2, r2, r3
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <mg_queue_book+0xa4>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	441a      	add	r2, r3
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	601a      	str	r2, [r3, #0]
  return space;
 800d9d4:	697b      	ldr	r3, [r7, #20]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	689a      	ldr	r2, [r3, #8]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d013      	beq.n	800da22 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff ff58 	bl	800d8b0 <mg_queue_read_len>
 800da00:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10c      	bne.n	800da22 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68da      	ldr	r2, [r3, #12]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d903      	bls.n	800da22 <mg_queue_next+0x42>
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff ff48 	bl	800d8b0 <mg_queue_read_len>
 800da20:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d007      	beq.n	800da38 <mg_queue_next+0x58>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	3304      	adds	r3, #4
 800da32:	441a      	add	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	441a      	add	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	429a      	cmp	r2, r3
 800da46:	d906      	bls.n	800da56 <mg_queue_next+0x76>
 800da48:	4b05      	ldr	r3, [pc, #20]	@ (800da60 <mg_queue_next+0x80>)
 800da4a:	4a06      	ldr	r2, [pc, #24]	@ (800da64 <mg_queue_next+0x84>)
 800da4c:	f641 21ea 	movw	r1, #6890	@ 0x1aea
 800da50:	4805      	ldr	r0, [pc, #20]	@ (800da68 <mg_queue_next+0x88>)
 800da52:	f014 fb79 	bl	8022148 <__assert_func>
  return len;
 800da56:	68fb      	ldr	r3, [r7, #12]
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	080289f0 	.word	0x080289f0
 800da64:	0802a8b8 	.word	0x0802a8b8
 800da68:	08027148 	.word	0x08027148

0800da6c <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d106      	bne.n	800da8a <mg_queue_add+0x1e>
 800da7c:	4b13      	ldr	r3, [pc, #76]	@ (800dacc <mg_queue_add+0x60>)
 800da7e:	4a14      	ldr	r2, [pc, #80]	@ (800dad0 <mg_queue_add+0x64>)
 800da80:	f641 21ef 	movw	r1, #6895	@ 0x1aef
 800da84:	4813      	ldr	r0, [pc, #76]	@ (800dad4 <mg_queue_add+0x68>)
 800da86:	f014 fb5f 	bl	8022148 <__assert_func>
  mg_queue_write_len(q, len);
 800da8a:	6839      	ldr	r1, [r7, #0]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7ff ff39 	bl	800d904 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68da      	ldr	r2, [r3, #12]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	4413      	add	r3, r2
 800da9a:	f103 0208 	add.w	r2, r3, #8
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d906      	bls.n	800dab4 <mg_queue_add+0x48>
 800daa6:	4b0c      	ldr	r3, [pc, #48]	@ (800dad8 <mg_queue_add+0x6c>)
 800daa8:	4a09      	ldr	r2, [pc, #36]	@ (800dad0 <mg_queue_add+0x64>)
 800daaa:	f641 21f1 	movw	r1, #6897	@ 0x1af1
 800daae:	4809      	ldr	r0, [pc, #36]	@ (800dad4 <mg_queue_add+0x68>)
 800dab0:	f014 fb4a 	bl	8022148 <__assert_func>
  q->head += len + sizeof(uint32_t);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68da      	ldr	r2, [r3, #12]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	4413      	add	r3, r2
 800dabc:	1d1a      	adds	r2, r3, #4
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	60da      	str	r2, [r3, #12]
}
 800dac2:	bf00      	nop
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08028a0c 	.word	0x08028a0c
 800dad0:	0802a8c8 	.word	0x0802a8c8
 800dad4:	08027148 	.word	0x08027148
 800dad8:	08028a14 	.word	0x08028a14

0800dadc <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	689a      	ldr	r2, [r3, #8]
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	4413      	add	r3, r2
 800daee:	1d1a      	adds	r2, r3, #4
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	1d1a      	adds	r2, r3, #4
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d906      	bls.n	800db10 <mg_queue_del+0x34>
 800db02:	4b05      	ldr	r3, [pc, #20]	@ (800db18 <mg_queue_del+0x3c>)
 800db04:	4a05      	ldr	r2, [pc, #20]	@ (800db1c <mg_queue_del+0x40>)
 800db06:	f641 21f7 	movw	r1, #6903	@ 0x1af7
 800db0a:	4805      	ldr	r0, [pc, #20]	@ (800db20 <mg_queue_del+0x44>)
 800db0c:	f014 fb1c 	bl	8022148 <__assert_func>
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08028a44 	.word	0x08028a44
 800db1c:	0802a8d8 	.word	0x0802a8d8
 800db20:	08027148 	.word	0x08027148

0800db24 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 800db32:	6879      	ldr	r1, [r7, #4]
 800db34:	f04f 0200 	mov.w	r2, #0
 800db38:	f04f 0300 	mov.w	r3, #0
 800db3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a0e      	ldr	r2, [pc, #56]	@ (800db7c <mg_sha256_init+0x58>)
 800db44:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a0d      	ldr	r2, [pc, #52]	@ (800db80 <mg_sha256_init+0x5c>)
 800db4a:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a0d      	ldr	r2, [pc, #52]	@ (800db84 <mg_sha256_init+0x60>)
 800db50:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a0c      	ldr	r2, [pc, #48]	@ (800db88 <mg_sha256_init+0x64>)
 800db56:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a0c      	ldr	r2, [pc, #48]	@ (800db8c <mg_sha256_init+0x68>)
 800db5c:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a0b      	ldr	r2, [pc, #44]	@ (800db90 <mg_sha256_init+0x6c>)
 800db62:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a0b      	ldr	r2, [pc, #44]	@ (800db94 <mg_sha256_init+0x70>)
 800db68:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a0a      	ldr	r2, [pc, #40]	@ (800db98 <mg_sha256_init+0x74>)
 800db6e:	61da      	str	r2, [r3, #28]
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	6a09e667 	.word	0x6a09e667
 800db80:	bb67ae85 	.word	0xbb67ae85
 800db84:	3c6ef372 	.word	0x3c6ef372
 800db88:	a54ff53a 	.word	0xa54ff53a
 800db8c:	510e527f 	.word	0x510e527f
 800db90:	9b05688c 	.word	0x9b05688c
 800db94:	1f83d9ab 	.word	0x1f83d9ab
 800db98:	5be0cd19 	.word	0x5be0cd19

0800db9c <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 800db9c:	b480      	push	{r7}
 800db9e:	b0cf      	sub	sp, #316	@ 0x13c
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dba6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dbaa:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800dbac:	2300      	movs	r3, #0
 800dbae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800dbb8:	e043      	b.n	800dc42 <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800dbba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dbbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dbc8:	4413      	add	r3, r2
 800dbca:	332c      	adds	r3, #44	@ 0x2c
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800dbd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dbda:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dbde:	6809      	ldr	r1, [r1, #0]
 800dbe0:	440b      	add	r3, r1
 800dbe2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dbe6:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800dbe8:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 800dbea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dbee:	3302      	adds	r3, #2
 800dbf0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dbf4:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dbf8:	6809      	ldr	r1, [r1, #0]
 800dbfa:	440b      	add	r3, r1
 800dbfc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dc00:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800dc02:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 800dc04:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800dc08:	3203      	adds	r2, #3
 800dc0a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dc0e:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dc12:	6809      	ldr	r1, [r1, #0]
 800dc14:	440a      	add	r2, r1
 800dc16:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800dc1a:	ea43 0102 	orr.w	r1, r3, r2
 800dc1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc26:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800dc2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800dc2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dc32:	3301      	adds	r3, #1
 800dc34:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800dc38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800dc42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dc46:	2b0f      	cmp	r3, #15
 800dc48:	ddb7      	ble.n	800dbba <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 800dc4a:	e069      	b.n	800dd20 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 800dc4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dc50:	1e9a      	subs	r2, r3, #2
 800dc52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc5e:	ea4f 4273 	mov.w	r2, r3, ror #17
 800dc62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dc66:	1e99      	subs	r1, r3, #2
 800dc68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc6c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc74:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800dc78:	405a      	eors	r2, r3
 800dc7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dc7e:	1e99      	subs	r1, r3, #2
 800dc80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc84:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc8c:	0a9b      	lsrs	r3, r3, #10
 800dc8e:	405a      	eors	r2, r3
 800dc90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dc94:	1fd9      	subs	r1, r3, #7
 800dc96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc9a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dca2:	441a      	add	r2, r3
 800dca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dca8:	f1a3 010f 	sub.w	r1, r3, #15
 800dcac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dcb0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dcb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcb8:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800dcbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dcc0:	f1a3 000f 	sub.w	r0, r3, #15
 800dcc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dcc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dccc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dcd0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800dcd4:	4059      	eors	r1, r3
 800dcd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dcda:	f1a3 000f 	sub.w	r0, r3, #15
 800dcde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dce2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dce6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dcea:	08db      	lsrs	r3, r3, #3
 800dcec:	404b      	eors	r3, r1
 800dcee:	441a      	add	r2, r3
 800dcf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dcf4:	f1a3 0110 	sub.w	r1, r3, #16
 800dcf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dcfc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dd00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd04:	18d1      	adds	r1, r2, r3
 800dd06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dd0e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800dd12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 800dd16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800dd20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dd24:	2b3f      	cmp	r3, #63	@ 0x3f
 800dd26:	dd91      	ble.n	800dc4c <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 800dd28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 800dd38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 800dd48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 800dd58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 800dd68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 800dd78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	695b      	ldr	r3, [r3, #20]
 800dd84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 800dd88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 800dd98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dd9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	69db      	ldr	r3, [r3, #28]
 800dda4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800ddae:	e078      	b.n	800dea2 <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 800ddb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ddb4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800ddb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ddbc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800ddc0:	405a      	eors	r2, r3
 800ddc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ddc6:	ea4f 6373 	mov.w	r3, r3, ror #25
 800ddca:	405a      	eors	r2, r3
 800ddcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ddd0:	441a      	add	r2, r3
 800ddd2:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800ddd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ddda:	4019      	ands	r1, r3
 800dddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dde0:	43d8      	mvns	r0, r3
 800dde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dde6:	4003      	ands	r3, r0
 800dde8:	404b      	eors	r3, r1
 800ddea:	441a      	add	r2, r3
 800ddec:	496e      	ldr	r1, [pc, #440]	@ (800dfa8 <mg_sha256_chunk+0x40c>)
 800ddee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ddf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ddf6:	441a      	add	r2, r3
 800ddf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ddfc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800de00:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800de04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de08:	4413      	add	r3, r2
 800de0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 800de0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de12:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800de16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de1a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800de1e:	405a      	eors	r2, r3
 800de20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de24:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800de28:	405a      	eors	r2, r3
 800de2a:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800de2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800de32:	4059      	eors	r1, r3
 800de34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de38:	4019      	ands	r1, r3
 800de3a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800de3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800de42:	4003      	ands	r3, r0
 800de44:	404b      	eors	r3, r1
 800de46:	4413      	add	r3, r2
 800de48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 800de4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 800de54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800de58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 800de5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 800de64:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800de68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de6c:	4413      	add	r3, r2
 800de6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 800de72:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800de76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 800de7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 800de82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 800de8a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800de8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800de92:	4413      	add	r3, r2
 800de94:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 800de98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800de9c:	3301      	adds	r3, #1
 800de9e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800dea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dea6:	2b3f      	cmp	r3, #63	@ 0x3f
 800dea8:	dd82      	ble.n	800ddb0 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 800deaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800deae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800deba:	441a      	add	r2, r3
 800debc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dec0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 800dec8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800decc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685a      	ldr	r2, [r3, #4]
 800ded4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ded8:	441a      	add	r2, r3
 800deda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dede:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 800dee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800deea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	689a      	ldr	r2, [r3, #8]
 800def2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800def6:	441a      	add	r2, r3
 800def8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800defc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 800df04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800df14:	441a      	add	r2, r3
 800df16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df1a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 800df22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	691a      	ldr	r2, [r3, #16]
 800df2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df32:	441a      	add	r2, r3
 800df34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 800df40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	695a      	ldr	r2, [r3, #20]
 800df4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800df50:	441a      	add	r2, r3
 800df52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df56:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 800df5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	699a      	ldr	r2, [r3, #24]
 800df6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df6e:	441a      	add	r2, r3
 800df70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 800df7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	69da      	ldr	r2, [r3, #28]
 800df88:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800df8c:	441a      	add	r2, r3
 800df8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	61da      	str	r2, [r3, #28]
}
 800df9a:	bf00      	nop
 800df9c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	0802a484 	.word	0x0802a484

0800dfac <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 800dfac:	b5b0      	push	{r4, r5, r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 800dfb8:	2300      	movs	r3, #0
 800dfba:	617b      	str	r3, [r7, #20]
 800dfbc:	e026      	b.n	800e00c <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	441a      	add	r2, r3
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc8:	7811      	ldrb	r1, [r2, #0]
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	4413      	add	r3, r2
 800dfce:	460a      	mov	r2, r1
 800dfd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	629a      	str	r2, [r3, #40]	@ 0x28
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfe2:	2b40      	cmp	r3, #64	@ 0x40
 800dfe4:	d10f      	bne.n	800e006 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff fdd8 	bl	800db9c <mg_sha256_chunk>
      ctx->bits += 512;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dff2:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 800dff6:	f143 0500 	adc.w	r5, r3, #0
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	3301      	adds	r3, #1
 800e00a:	617b      	str	r3, [r7, #20]
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	429a      	cmp	r2, r3
 800e012:	d3d4      	bcc.n	800dfbe <mg_sha256_update+0x12>
    }
  }
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bdb0      	pop	{r4, r5, r7, pc}

0800e01e <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 800e01e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e02e:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b37      	cmp	r3, #55	@ 0x37
 800e034:	d814      	bhi.n	800e060 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	1c5a      	adds	r2, r3, #1
 800e03a:	60fa      	str	r2, [r7, #12]
 800e03c:	683a      	ldr	r2, [r7, #0]
 800e03e:	4413      	add	r3, r2
 800e040:	2280      	movs	r2, #128	@ 0x80
 800e042:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800e046:	e007      	b.n	800e058 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	60fa      	str	r2, [r7, #12]
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	4413      	add	r3, r2
 800e052:	2200      	movs	r2, #0
 800e054:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b37      	cmp	r3, #55	@ 0x37
 800e05c:	d9f4      	bls.n	800e048 <mg_sha256_final+0x2a>
 800e05e:	e01d      	b.n	800e09c <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	60fa      	str	r2, [r7, #12]
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	4413      	add	r3, r2
 800e06a:	2280      	movs	r2, #128	@ 0x80
 800e06c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800e070:	e007      	b.n	800e082 <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	60fa      	str	r2, [r7, #12]
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	4413      	add	r3, r2
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b3f      	cmp	r3, #63	@ 0x3f
 800e086:	d9f4      	bls.n	800e072 <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 800e088:	6838      	ldr	r0, [r7, #0]
 800e08a:	f7ff fd87 	bl	800db9c <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	332c      	adds	r3, #44	@ 0x2c
 800e092:	2238      	movs	r2, #56	@ 0x38
 800e094:	2100      	movs	r1, #0
 800e096:	4618      	mov	r0, r3
 800e098:	f015 faf4 	bl	8023684 <memset>
  }

  ctx->bits += ctx->len * 8;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e0a6:	00c9      	lsls	r1, r1, #3
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	eb12 0804 	adds.w	r8, r2, r4
 800e0b2:	eb43 0905 	adc.w	r9, r3, r5
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0c2:	b2d2      	uxtb	r2, r2
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e0d0:	f04f 0200 	mov.w	r2, #0
 800e0d4:	f04f 0300 	mov.w	r3, #0
 800e0d8:	0a02      	lsrs	r2, r0, #8
 800e0da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e0de:	0a0b      	lsrs	r3, r1, #8
 800e0e0:	b2d2      	uxtb	r2, r2
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	f04f 0300 	mov.w	r3, #0
 800e0f6:	0c02      	lsrs	r2, r0, #16
 800e0f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e0fc:	0c0b      	lsrs	r3, r1, #16
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e10c:	f04f 0200 	mov.w	r2, #0
 800e110:	f04f 0300 	mov.w	r3, #0
 800e114:	0e02      	lsrs	r2, r0, #24
 800e116:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e11a:	0e0b      	lsrs	r3, r1, #24
 800e11c:	b2d2      	uxtb	r2, r2
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e12a:	f04f 0200 	mov.w	r2, #0
 800e12e:	f04f 0300 	mov.w	r3, #0
 800e132:	000a      	movs	r2, r1
 800e134:	2300      	movs	r3, #0
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e144:	f04f 0200 	mov.w	r2, #0
 800e148:	f04f 0300 	mov.w	r3, #0
 800e14c:	0a0a      	lsrs	r2, r1, #8
 800e14e:	2300      	movs	r3, #0
 800e150:	b2d2      	uxtb	r2, r2
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e15e:	f04f 0200 	mov.w	r2, #0
 800e162:	f04f 0300 	mov.w	r3, #0
 800e166:	0c0a      	lsrs	r2, r1, #16
 800e168:	2300      	movs	r3, #0
 800e16a:	b2d2      	uxtb	r2, r2
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e178:	f04f 0200 	mov.w	r2, #0
 800e17c:	f04f 0300 	mov.w	r3, #0
 800e180:	0e0a      	lsrs	r2, r1, #24
 800e182:	2300      	movs	r3, #0
 800e184:	b2d2      	uxtb	r2, r2
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 800e18c:	6838      	ldr	r0, [r7, #0]
 800e18e:	f7ff fd05 	bl	800db9c <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 800e192:	2300      	movs	r3, #0
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	e071      	b.n	800e27c <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f1c3 0303 	rsb	r3, r3, #3
 800e1a2:	00db      	lsls	r3, r3, #3
 800e1a4:	fa22 f103 	lsr.w	r1, r2, r3
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	b2ca      	uxtb	r2, r1
 800e1b0:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	685a      	ldr	r2, [r3, #4]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f1c3 0303 	rsb	r3, r3, #3
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	fa22 f103 	lsr.w	r1, r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	b2ca      	uxtb	r2, r1
 800e1cc:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f1c3 0303 	rsb	r3, r3, #3
 800e1d8:	00db      	lsls	r3, r3, #3
 800e1da:	fa22 f103 	lsr.w	r1, r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	3308      	adds	r3, #8
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	b2ca      	uxtb	r2, r1
 800e1e8:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	68da      	ldr	r2, [r3, #12]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f1c3 0303 	rsb	r3, r3, #3
 800e1f4:	00db      	lsls	r3, r3, #3
 800e1f6:	fa22 f103 	lsr.w	r1, r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	330c      	adds	r3, #12
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	4413      	add	r3, r2
 800e202:	b2ca      	uxtb	r2, r1
 800e204:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	691a      	ldr	r2, [r3, #16]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f1c3 0303 	rsb	r3, r3, #3
 800e210:	00db      	lsls	r3, r3, #3
 800e212:	fa22 f103 	lsr.w	r1, r2, r3
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3310      	adds	r3, #16
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	4413      	add	r3, r2
 800e21e:	b2ca      	uxtb	r2, r1
 800e220:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	695a      	ldr	r2, [r3, #20]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f1c3 0303 	rsb	r3, r3, #3
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	fa22 f103 	lsr.w	r1, r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3314      	adds	r3, #20
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	4413      	add	r3, r2
 800e23a:	b2ca      	uxtb	r2, r1
 800e23c:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	699a      	ldr	r2, [r3, #24]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f1c3 0303 	rsb	r3, r3, #3
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	fa22 f103 	lsr.w	r1, r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3318      	adds	r3, #24
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	4413      	add	r3, r2
 800e256:	b2ca      	uxtb	r2, r1
 800e258:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	69da      	ldr	r2, [r3, #28]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f1c3 0303 	rsb	r3, r3, #3
 800e264:	00db      	lsls	r3, r3, #3
 800e266:	fa22 f103 	lsr.w	r1, r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	331c      	adds	r3, #28
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	4413      	add	r3, r2
 800e272:	b2ca      	uxtb	r2, r1
 800e274:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3301      	adds	r3, #1
 800e27a:	60fb      	str	r3, [r7, #12]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d98a      	bls.n	800e198 <mg_sha256_final+0x17a>
  }
}
 800e282:	bf00      	nop
 800e284:	bf00      	nop
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e28e <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 800e28e:	b590      	push	{r4, r7, lr}
 800e290:	b0d3      	sub	sp, #332	@ 0x14c
 800e292:	af00      	add	r7, sp, #0
 800e294:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800e298:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800e29c:	6020      	str	r0, [r4, #0]
 800e29e:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800e2a2:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800e2a6:	6001      	str	r1, [r0, #0]
 800e2a8:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800e2ac:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800e2b0:	600a      	str	r2, [r1, #0]
 800e2b2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e2b6:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800e2ba:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e2c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e2c6:	223c      	movs	r2, #60	@ 0x3c
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f015 f9da 	bl	8023684 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 800e2d0:	f107 0310 	add.w	r3, r7, #16
 800e2d4:	2240      	movs	r2, #64	@ 0x40
 800e2d6:	2136      	movs	r1, #54	@ 0x36
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f015 f9d3 	bl	8023684 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 800e2de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e2e2:	2240      	movs	r2, #64	@ 0x40
 800e2e4:	215c      	movs	r1, #92	@ 0x5c
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f015 f9cc 	bl	8023684 <memset>
  if (keysz < 64) {
 800e2ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e2f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b3f      	cmp	r3, #63	@ 0x3f
 800e2f8:	d815      	bhi.n	800e326 <mg_hmac_sha256+0x98>
    if (keysz > 0) memmove(k, key, keysz);
 800e2fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e2fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d029      	beq.n	800e35c <mg_hmac_sha256+0xce>
 800e308:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e30c:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e310:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e314:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800e318:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800e31c:	6812      	ldr	r2, [r2, #0]
 800e31e:	6819      	ldr	r1, [r3, #0]
 800e320:	f015 f996 	bl	8023650 <memmove>
 800e324:	e01a      	b.n	800e35c <mg_hmac_sha256+0xce>
  } else {
    mg_sha256_init(&ctx);
 800e326:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff fbfa 	bl	800db24 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 800e330:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e334:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e338:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e33c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800e340:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e344:	6812      	ldr	r2, [r2, #0]
 800e346:	6819      	ldr	r1, [r3, #0]
 800e348:	f7ff fe30 	bl	800dfac <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 800e34c:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e350:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800e354:	4611      	mov	r1, r2
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff fe61 	bl	800e01e <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 800e35c:	2300      	movs	r3, #0
 800e35e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e362:	e032      	b.n	800e3ca <mg_hmac_sha256+0x13c>
    i_pad[i] ^= k[i];
 800e364:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e368:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800e36c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e370:	4413      	add	r3, r2
 800e372:	781a      	ldrb	r2, [r3, #0]
 800e374:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800e378:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e37c:	440b      	add	r3, r1
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	4053      	eors	r3, r2
 800e382:	b2d9      	uxtb	r1, r3
 800e384:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e388:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800e38c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e390:	4413      	add	r3, r2
 800e392:	460a      	mov	r2, r1
 800e394:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 800e396:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e39a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e39e:	4413      	add	r3, r2
 800e3a0:	781a      	ldrb	r2, [r3, #0]
 800e3a2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800e3a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e3aa:	440b      	add	r3, r1
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	4053      	eors	r3, r2
 800e3b0:	b2d9      	uxtb	r1, r3
 800e3b2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e3b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e3ba:	4413      	add	r3, r2
 800e3bc:	460a      	mov	r2, r1
 800e3be:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 800e3c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e3ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e3ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800e3d0:	d9c8      	bls.n	800e364 <mg_hmac_sha256+0xd6>
  }
  mg_sha256_init(&ctx);
 800e3d2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fba4 	bl	800db24 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 800e3dc:	f107 0110 	add.w	r1, r7, #16
 800e3e0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e3e4:	2240      	movs	r2, #64	@ 0x40
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff fde0 	bl	800dfac <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 800e3ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e3f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800e3f4:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e3f8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800e3fc:	6819      	ldr	r1, [r3, #0]
 800e3fe:	f7ff fdd5 	bl	800dfac <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800e402:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e406:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e40a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e40e:	4611      	mov	r1, r2
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	f7ff fe04 	bl	800e01e <mg_sha256_final>
  mg_sha256_init(&ctx);
 800e416:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7ff fb82 	bl	800db24 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 800e420:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e424:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e428:	2240      	movs	r2, #64	@ 0x40
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff fdbe 	bl	800dfac <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 800e430:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e434:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e438:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e43c:	2220      	movs	r2, #32
 800e43e:	6819      	ldr	r1, [r3, #0]
 800e440:	f7ff fdb4 	bl	800dfac <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800e444:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e448:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e44c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e450:	4611      	mov	r1, r2
 800e452:	6818      	ldr	r0, [r3, #0]
 800e454:	f7ff fde3 	bl	800e01e <mg_sha256_final>
}
 800e458:	bf00      	nop
 800e45a:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd90      	pop	{r4, r7, pc}
	...

0800e464 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 800e464:	b5b0      	push	{r4, r5, r7, lr}
 800e466:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800e468:	f7f2 fc22 	bl	8000cb0 <mg_millis>
 800e46c:	4b05      	ldr	r3, [pc, #20]	@ (800e484 <mg_now+0x20>)
 800e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e472:	1884      	adds	r4, r0, r2
 800e474:	eb41 0503 	adc.w	r5, r1, r3
 800e478:	4622      	mov	r2, r4
 800e47a:	462b      	mov	r3, r5
}
 800e47c:	4610      	mov	r0, r2
 800e47e:	4619      	mov	r1, r3
 800e480:	bdb0      	pop	{r4, r5, r7, pc}
 800e482:	bf00      	nop
 800e484:	24000d08 	.word	0x24000d08

0800e488 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 800e488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e48c:	b086      	sub	sp, #24
 800e48e:	af00      	add	r7, sp, #0
 800e490:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4618      	mov	r0, r3
 800e498:	f009 f94c 	bl	8017734 <mg_ntohl>
 800e49c:	6178      	str	r0, [r7, #20]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f009 f945 	bl	8017734 <mg_ntohl>
 800e4aa:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <gettimestamp+0x32>
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	4b2e      	ldr	r3, [pc, #184]	@ (800e570 <gettimestamp+0xe8>)
 800e4b6:	4413      	add	r3, r2
 800e4b8:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4698      	mov	r8, r3
 800e4c0:	4691      	mov	r9, r2
 800e4c2:	4642      	mov	r2, r8
 800e4c4:	464b      	mov	r3, r9
 800e4c6:	f04f 0000 	mov.w	r0, #0
 800e4ca:	f04f 0100 	mov.w	r1, #0
 800e4ce:	0159      	lsls	r1, r3, #5
 800e4d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4d4:	0150      	lsls	r0, r2, #5
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	460b      	mov	r3, r1
 800e4da:	ebb2 0408 	subs.w	r4, r2, r8
 800e4de:	eb63 0509 	sbc.w	r5, r3, r9
 800e4e2:	f04f 0200 	mov.w	r2, #0
 800e4e6:	f04f 0300 	mov.w	r3, #0
 800e4ea:	00ab      	lsls	r3, r5, #2
 800e4ec:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e4f0:	00a2      	lsls	r2, r4, #2
 800e4f2:	4614      	mov	r4, r2
 800e4f4:	461d      	mov	r5, r3
 800e4f6:	eb14 0a08 	adds.w	sl, r4, r8
 800e4fa:	eb45 0b09 	adc.w	fp, r5, r9
 800e4fe:	f04f 0200 	mov.w	r2, #0
 800e502:	f04f 0300 	mov.w	r3, #0
 800e506:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e50a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e50e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e512:	4692      	mov	sl, r2
 800e514:	469b      	mov	fp, r3
 800e516:	4654      	mov	r4, sl
 800e518:	465d      	mov	r5, fp
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	ee07 3a90 	vmov	s15, r3
 800e520:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800e524:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800e560 <gettimestamp+0xd8>
 800e528:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e52c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800e568 <gettimestamp+0xe0>
 800e530:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e534:	ec51 0b17 	vmov	r0, r1, d7
 800e538:	f7f2 f95e 	bl	80007f8 <__aeabi_d2lz>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	18a1      	adds	r1, r4, r2
 800e542:	6039      	str	r1, [r7, #0]
 800e544:	eb45 0303 	adc.w	r3, r5, r3
 800e548:	607b      	str	r3, [r7, #4]
 800e54a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e54e:	4610      	mov	r0, r2
 800e550:	4619      	mov	r1, r3
 800e552:	3718      	adds	r7, #24
 800e554:	46bd      	mov	sp, r7
 800e556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e55a:	bf00      	nop
 800e55c:	f3af 8000 	nop.w
 800e560:	ffe00000 	.word	0xffe00000
 800e564:	41efffff 	.word	0x41efffff
 800e568:	00000000 	.word	0x00000000
 800e56c:	408f4000 	.word	0x408f4000
 800e570:	7c558180 	.word	0x7c558180

0800e574 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 800e574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e578:	b096      	sub	sp, #88	@ 0x58
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	61f8      	str	r0, [r7, #28]
 800e57e:	61b9      	str	r1, [r7, #24]
  int64_t epoch_milliseconds = -1;
 800e580:	f04f 32ff 	mov.w	r2, #4294967295
 800e584:	f04f 33ff 	mov.w	r3, #4294967295
 800e588:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  int mode = len > 0 ? buf[0] & 7 : 0;
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <mg_sntp_parse+0x28>
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	f003 0307 	and.w	r3, r3, #7
 800e59a:	e000      	b.n	800e59e <mg_sntp_parse+0x2a>
 800e59c:	2300      	movs	r3, #0
 800e59e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d006      	beq.n	800e5b4 <mg_sntp_parse+0x40>
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	08db      	lsrs	r3, r3, #3
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	f003 0307 	and.w	r3, r3, #7
 800e5b2:	e000      	b.n	800e5b6 <mg_sntp_parse+0x42>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (len < 48) {
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800e5bc:	d810      	bhi.n	800e5e0 <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 800e5be:	4b5c      	ldr	r3, [pc, #368]	@ (800e730 <mg_sntp_parse+0x1bc>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f340 80ab 	ble.w	800e71e <mg_sntp_parse+0x1aa>
 800e5c8:	4b5a      	ldr	r3, [pc, #360]	@ (800e734 <mg_sntp_parse+0x1c0>)
 800e5ca:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800e5ce:	495a      	ldr	r1, [pc, #360]	@ (800e738 <mg_sntp_parse+0x1c4>)
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	f7f9 fb45 	bl	8007c60 <mg_log_prefix>
 800e5d6:	4959      	ldr	r1, [pc, #356]	@ (800e73c <mg_sntp_parse+0x1c8>)
 800e5d8:	4859      	ldr	r0, [pc, #356]	@ (800e740 <mg_sntp_parse+0x1cc>)
 800e5da:	f7f9 fb91 	bl	8007d00 <mg_log>
 800e5de:	e09e      	b.n	800e71e <mg_sntp_parse+0x1aa>
  } else if (mode != 4 && mode != 5) {
 800e5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5e2:	2b04      	cmp	r3, #4
 800e5e4:	d013      	beq.n	800e60e <mg_sntp_parse+0x9a>
 800e5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5e8:	2b05      	cmp	r3, #5
 800e5ea:	d010      	beq.n	800e60e <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 800e5ec:	4b50      	ldr	r3, [pc, #320]	@ (800e730 <mg_sntp_parse+0x1bc>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f340 8094 	ble.w	800e71e <mg_sntp_parse+0x1aa>
 800e5f6:	4b4f      	ldr	r3, [pc, #316]	@ (800e734 <mg_sntp_parse+0x1c0>)
 800e5f8:	f641 5203 	movw	r2, #7427	@ 0x1d03
 800e5fc:	494e      	ldr	r1, [pc, #312]	@ (800e738 <mg_sntp_parse+0x1c4>)
 800e5fe:	2001      	movs	r0, #1
 800e600:	f7f9 fb2e 	bl	8007c60 <mg_log_prefix>
 800e604:	494f      	ldr	r1, [pc, #316]	@ (800e744 <mg_sntp_parse+0x1d0>)
 800e606:	484e      	ldr	r0, [pc, #312]	@ (800e740 <mg_sntp_parse+0x1cc>)
 800e608:	f7f9 fb7a 	bl	8007d00 <mg_log>
 800e60c:	e087      	b.n	800e71e <mg_sntp_parse+0x1aa>
  } else if (buf[1] == 0) {
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	3301      	adds	r3, #1
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10f      	bne.n	800e638 <mg_sntp_parse+0xc4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 800e618:	4b45      	ldr	r3, [pc, #276]	@ (800e730 <mg_sntp_parse+0x1bc>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dd7e      	ble.n	800e71e <mg_sntp_parse+0x1aa>
 800e620:	4b44      	ldr	r3, [pc, #272]	@ (800e734 <mg_sntp_parse+0x1c0>)
 800e622:	f641 5205 	movw	r2, #7429	@ 0x1d05
 800e626:	4944      	ldr	r1, [pc, #272]	@ (800e738 <mg_sntp_parse+0x1c4>)
 800e628:	2001      	movs	r0, #1
 800e62a:	f7f9 fb19 	bl	8007c60 <mg_log_prefix>
 800e62e:	4946      	ldr	r1, [pc, #280]	@ (800e748 <mg_sntp_parse+0x1d4>)
 800e630:	4843      	ldr	r0, [pc, #268]	@ (800e740 <mg_sntp_parse+0x1cc>)
 800e632:	f7f9 fb65 	bl	8007d00 <mg_log>
 800e636:	e072      	b.n	800e71e <mg_sntp_parse+0x1aa>
  } else if (version == 4 || version == 3) {
 800e638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	d002      	beq.n	800e644 <mg_sntp_parse+0xd0>
 800e63e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e640:	2b03      	cmp	r3, #3
 800e642:	d15d      	bne.n	800e700 <mg_sntp_parse+0x18c>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	3318      	adds	r3, #24
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff ff1d 	bl	800e488 <gettimestamp>
 800e64e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	3320      	adds	r3, #32
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff ff16 	bl	800e488 <gettimestamp>
 800e65c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	3328      	adds	r3, #40	@ 0x28
 800e664:	4618      	mov	r0, r3
 800e666:	f7ff ff0f 	bl	800e488 <gettimestamp>
 800e66a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    int64_t now = (int64_t) mg_millis();
 800e66e:	f7f2 fb1f 	bl	8000cb0 <mg_millis>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 800e67a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800e67e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e682:	ebb0 0802 	subs.w	r8, r0, r2
 800e686:	eb61 0903 	sbc.w	r9, r1, r3
 800e68a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e68e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e692:	1a84      	subs	r4, r0, r2
 800e694:	eb61 0503 	sbc.w	r5, r1, r3
 800e698:	ebb8 0304 	subs.w	r3, r8, r4
 800e69c:	60bb      	str	r3, [r7, #8]
 800e69e:	eb69 0305 	sbc.w	r3, r9, r5
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e6a8:	e9c7 3408 	strd	r3, r4, [r7, #32]
    epoch_milliseconds = transmit_time + latency / 2;
 800e6ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	da06      	bge.n	800e6c2 <mg_sntp_parse+0x14e>
 800e6b4:	1c51      	adds	r1, r2, #1
 800e6b6:	6039      	str	r1, [r7, #0]
 800e6b8:	f143 0300 	adc.w	r3, r3, #0
 800e6bc:	607b      	str	r3, [r7, #4]
 800e6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6c2:	f04f 0000 	mov.w	r0, #0
 800e6c6:	f04f 0100 	mov.w	r1, #0
 800e6ca:	0850      	lsrs	r0, r2, #1
 800e6cc:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800e6d0:	1059      	asrs	r1, r3, #1
 800e6d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e6d6:	eb12 0a00 	adds.w	sl, r2, r0
 800e6da:	eb43 0b01 	adc.w	fp, r3, r1
 800e6de:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 800e6e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e6e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e6ea:	1a84      	subs	r4, r0, r2
 800e6ec:	613c      	str	r4, [r7, #16]
 800e6ee:	eb61 0303 	sbc.w	r3, r1, r3
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e6f8:	4914      	ldr	r1, [pc, #80]	@ (800e74c <mg_sntp_parse+0x1d8>)
 800e6fa:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 800e6fe:	e00e      	b.n	800e71e <mg_sntp_parse+0x1aa>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 800e700:	4b0b      	ldr	r3, [pc, #44]	@ (800e730 <mg_sntp_parse+0x1bc>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	dd0a      	ble.n	800e71e <mg_sntp_parse+0x1aa>
 800e708:	4b0a      	ldr	r3, [pc, #40]	@ (800e734 <mg_sntp_parse+0x1c0>)
 800e70a:	f641 5210 	movw	r2, #7440	@ 0x1d10
 800e70e:	490a      	ldr	r1, [pc, #40]	@ (800e738 <mg_sntp_parse+0x1c4>)
 800e710:	2001      	movs	r0, #1
 800e712:	f7f9 faa5 	bl	8007c60 <mg_log_prefix>
 800e716:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e718:	480d      	ldr	r0, [pc, #52]	@ (800e750 <mg_sntp_parse+0x1dc>)
 800e71a:	f7f9 faf1 	bl	8007d00 <mg_log>
  }
  return epoch_milliseconds;
 800e71e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
}
 800e722:	4610      	mov	r0, r2
 800e724:	4619      	mov	r1, r3
 800e726:	3758      	adds	r7, #88	@ 0x58
 800e728:	46bd      	mov	sp, r7
 800e72a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e72e:	bf00      	nop
 800e730:	24000240 	.word	0x24000240
 800e734:	0802a8e8 	.word	0x0802a8e8
 800e738:	08027148 	.word	0x08027148
 800e73c:	08028b1c 	.word	0x08028b1c
 800e740:	080274e0 	.word	0x080274e0
 800e744:	08028b2c 	.word	0x08028b2c
 800e748:	08028b40 	.word	0x08028b40
 800e74c:	24000d08 	.word	0x24000d08
 800e750:	08028b5c 	.word	0x08028b5c

0800e754 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 800e754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e758:	b088      	sub	sp, #32
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3388      	adds	r3, #136	@ 0x88
 800e766:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d10c      	bne.n	800e788 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800e76e:	f7f2 fa9f 	bl	8000cb0 <mg_millis>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800e77a:	1854      	adds	r4, r2, r1
 800e77c:	f143 0500 	adc.w	r5, r3, #0
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 800e786:	e05d      	b.n	800e844 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2b04      	cmp	r3, #4
 800e78c:	d103      	bne.n	800e796 <sntp_cb+0x42>
    mg_sntp_request(c);
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f000 f86a 	bl	800e868 <mg_sntp_request>
}
 800e794:	e056      	b.n	800e844 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2b07      	cmp	r3, #7
 800e79a:	d141      	bne.n	800e820 <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	4610      	mov	r0, r2
 800e7a8:	f7ff fee4 	bl	800e574 <mg_sntp_parse>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 800e7b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e7b8:	2a01      	cmp	r2, #1
 800e7ba:	f173 0300 	sbcs.w	r3, r3, #0
 800e7be:	db27      	blt.n	800e810 <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 800e7c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	461d      	mov	r5, r3
 800e7c8:	f7f2 fa72 	bl	8000cb0 <mg_millis>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	ebb4 0802 	subs.w	r8, r4, r2
 800e7d4:	eb65 0903 	sbc.w	r9, r5, r3
 800e7d8:	4b1d      	ldr	r3, [pc, #116]	@ (800e850 <sntp_cb+0xfc>)
 800e7da:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 800e7de:	f107 0310 	add.w	r3, r7, #16
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	2112      	movs	r1, #18
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f7f3 ff30 	bl	800264c <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 800e7ec:	4b19      	ldr	r3, [pc, #100]	@ (800e854 <sntp_cb+0x100>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	dd0d      	ble.n	800e810 <sntp_cb+0xbc>
 800e7f4:	4b18      	ldr	r3, [pc, #96]	@ (800e858 <sntp_cb+0x104>)
 800e7f6:	f44f 52e9 	mov.w	r2, #7456	@ 0x1d20
 800e7fa:	4918      	ldr	r1, [pc, #96]	@ (800e85c <sntp_cb+0x108>)
 800e7fc:	2003      	movs	r0, #3
 800e7fe:	f7f9 fa2f 	bl	8007c60 <mg_log_prefix>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e806:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e80a:	4815      	ldr	r0, [pc, #84]	@ (800e860 <sntp_cb+0x10c>)
 800e80c:	f7f9 fa78 	bl	8007d00 <mg_log>
    c->is_closing = 1;
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e816:	f043 0320 	orr.w	r3, r3, #32
 800e81a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800e81e:	e011      	b.n	800e844 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	2b02      	cmp	r3, #2
 800e824:	d10e      	bne.n	800e844 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800e826:	f7f2 fa43 	bl	8000cb0 <mg_millis>
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e830:	4282      	cmp	r2, r0
 800e832:	418b      	sbcs	r3, r1
 800e834:	d206      	bcs.n	800e844 <sntp_cb+0xf0>
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e83c:	f043 0320 	orr.w	r3, r3, #32
 800e840:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800e844:	bf00      	nop
 800e846:	3720      	adds	r7, #32
 800e848:	46bd      	mov	sp, r7
 800e84a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e84e:	bf00      	nop
 800e850:	24000d08 	.word	0x24000d08
 800e854:	24000240 	.word	0x24000240
 800e858:	0802a8f8 	.word	0x0802a8f8
 800e85c:	08027148 	.word	0x08027148
 800e860:	08028b74 	.word	0x08028b74
 800e864:	00000000 	.word	0x00000000

0800e868 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 800e868:	b590      	push	{r4, r7, lr}
 800e86a:	b095      	sub	sp, #84	@ 0x54
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e876:	f003 0308 	and.w	r3, r3, #8
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d011      	beq.n	800e8a4 <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 800e880:	4b37      	ldr	r3, [pc, #220]	@ (800e960 <mg_sntp_request+0xf8>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd5f      	ble.n	800e948 <mg_sntp_request+0xe0>
 800e888:	4b36      	ldr	r3, [pc, #216]	@ (800e964 <mg_sntp_request+0xfc>)
 800e88a:	f641 522d 	movw	r2, #7469	@ 0x1d2d
 800e88e:	4936      	ldr	r1, [pc, #216]	@ (800e968 <mg_sntp_request+0x100>)
 800e890:	2001      	movs	r0, #1
 800e892:	f7f9 f9e5 	bl	8007c60 <mg_log_prefix>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e89a:	4619      	mov	r1, r3
 800e89c:	4833      	ldr	r0, [pc, #204]	@ (800e96c <mg_sntp_request+0x104>)
 800e89e:	f7f9 fa2f 	bl	8007d00 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 800e8a2:	e051      	b.n	800e948 <mg_sntp_request+0xe0>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 800e8a4:	f7f2 fa04 	bl	8000cb0 <mg_millis>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	60bb      	str	r3, [r7, #8]
 800e8b4:	f107 030c 	add.w	r3, r7, #12
 800e8b8:	222c      	movs	r2, #44	@ 0x2c
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f014 fee1 	bl	8023684 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 800e8c2:	f107 0308 	add.w	r3, r7, #8
 800e8c6:	3328      	adds	r3, #40	@ 0x28
 800e8c8:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 800e8ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800e8ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e8d2:	f04f 0300 	mov.w	r3, #0
 800e8d6:	f7f1 ff27 	bl	8000728 <__aeabi_ldivmod>
 800e8da:	4610      	mov	r0, r2
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f7f1 fef5 	bl	80006cc <__aeabi_l2d>
 800e8e2:	ec41 0b15 	vmov	d5, r0, r1
 800e8e6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 800e950 <mg_sntp_request+0xe8>
 800e8ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e8ee:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 800e958 <mg_sntp_request+0xf0>
 800e8f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8f6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 800e8fa:	2323      	movs	r3, #35	@ 0x23
 800e8fc:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 800e8fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800e902:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e906:	f04f 0300 	mov.w	r3, #0
 800e90a:	f7f1 ff0d 	bl	8000728 <__aeabi_ldivmod>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	4b17      	ldr	r3, [pc, #92]	@ (800e970 <mg_sntp_request+0x108>)
 800e914:	4413      	add	r3, r2
 800e916:	4618      	mov	r0, r3
 800e918:	f008 ff0c 	bl	8017734 <mg_ntohl>
 800e91c:	4602      	mov	r2, r0
 800e91e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e920:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 800e922:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800e926:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e92a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e92c:	1d1c      	adds	r4, r3, #4
 800e92e:	ee17 0a90 	vmov	r0, s15
 800e932:	f008 feff 	bl	8017734 <mg_ntohl>
 800e936:	4603      	mov	r3, r0
 800e938:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 800e93a:	f107 0308 	add.w	r3, r7, #8
 800e93e:	2230      	movs	r2, #48	@ 0x30
 800e940:	4619      	mov	r1, r3
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7fe fa16 	bl	800cd74 <mg_send>
}
 800e948:	bf00      	nop
 800e94a:	3754      	adds	r7, #84	@ 0x54
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd90      	pop	{r4, r7, pc}
 800e950:	00000000 	.word	0x00000000
 800e954:	408f4000 	.word	0x408f4000
 800e958:	ffe00000 	.word	0xffe00000
 800e95c:	41efffff 	.word	0x41efffff
 800e960:	24000240 	.word	0x24000240
 800e964:	0802a900 	.word	0x0802a900
 800e968:	08027148 	.word	0x08027148
 800e96c:	08028b98 	.word	0x08028b98
 800e970:	83aa7e80 	.word	0x83aa7e80

0800e974 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d101      	bne.n	800e990 <mg_sntp_connect+0x1c>
 800e98c:	4b0c      	ldr	r3, [pc, #48]	@ (800e9c0 <mg_sntp_connect+0x4c>)
 800e98e:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7fa fe06 	bl	80095a8 <mg_connect>
 800e99c:	6178      	str	r0, [r7, #20]
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d008      	beq.n	800e9b6 <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	4a07      	ldr	r2, [pc, #28]	@ (800e9c4 <mg_sntp_connect+0x50>)
 800e9a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	2101      	movs	r1, #1
 800e9b0:	6978      	ldr	r0, [r7, #20]
 800e9b2:	f7ff fecf 	bl	800e754 <sntp_cb>
  }
  return c;
 800e9b6:	697b      	ldr	r3, [r7, #20]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	08028bb0 	.word	0x08028bb0
 800e9c4:	0800e755 	.word	0x0800e755

0800e9c8 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800e9d4:	4b05      	ldr	r3, [pc, #20]	@ (800e9ec <mg_http_serve_ssi+0x24>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f7f6 fba1 	bl	8005124 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800e9e2:	bf00      	nop
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	08028bcc 	.word	0x08028bcc

0800e9f0 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	60bb      	str	r3, [r7, #8]
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d004      	beq.n	800ea0e <mg_str_s+0x1e>
 800ea04:	6838      	ldr	r0, [r7, #0]
 800ea06:	f7f1 fccb 	bl	80003a0 <strlen>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	e000      	b.n	800ea10 <mg_str_s+0x20>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	60fb      	str	r3, [r7, #12]
  return str;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	461a      	mov	r2, r3
 800ea16:	f107 0308 	add.w	r3, r7, #8
 800ea1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea1e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800ea2a:	b480      	push	{r7}
 800ea2c:	b087      	sub	sp, #28
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	60f8      	str	r0, [r7, #12]
 800ea32:	60b9      	str	r1, [r7, #8]
 800ea34:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	613b      	str	r3, [r7, #16]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	617b      	str	r3, [r7, #20]
  return str;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	461a      	mov	r2, r3
 800ea42:	f107 0310 	add.w	r3, r7, #16
 800ea46:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	371c      	adds	r7, #28
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <mg_tolc>:

static int mg_tolc(char c) {
 800ea5a:	b480      	push	{r7}
 800ea5c:	b083      	sub	sp, #12
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	4603      	mov	r3, r0
 800ea62:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 800ea64:	79fb      	ldrb	r3, [r7, #7]
 800ea66:	2b40      	cmp	r3, #64	@ 0x40
 800ea68:	d905      	bls.n	800ea76 <mg_tolc+0x1c>
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	2b5a      	cmp	r3, #90	@ 0x5a
 800ea6e:	d802      	bhi.n	800ea76 <mg_tolc+0x1c>
 800ea70:	79fb      	ldrb	r3, [r7, #7]
 800ea72:	3320      	adds	r3, #32
 800ea74:	e000      	b.n	800ea78 <mg_tolc+0x1e>
 800ea76:	79fb      	ldrb	r3, [r7, #7]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	1d3b      	adds	r3, r7, #4
 800ea8e:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 800ea92:	2300      	movs	r3, #0
 800ea94:	617b      	str	r3, [r7, #20]
 800ea96:	2300      	movs	r3, #0
 800ea98:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d01c      	beq.n	800eada <mg_strdup+0x56>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d019      	beq.n	800eada <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	4619      	mov	r1, r3
 800eaac:	2001      	movs	r0, #1
 800eaae:	f013 fb6d 	bl	802218c <calloc>
 800eab2:	4603      	mov	r3, r0
 800eab4:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d00e      	beq.n	800eada <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	4619      	mov	r1, r3
 800eac2:	69f8      	ldr	r0, [r7, #28]
 800eac4:	f014 fed3 	bl	802386e <memcpy>
      sc[s.len] = '\0';
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	4413      	add	r3, r2
 800eace:	2200      	movs	r2, #0
 800ead0:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	461a      	mov	r2, r3
 800eade:	f107 0314 	add.w	r3, r7, #20
 800eae2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eae6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	3720      	adds	r7, #32
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800eaf2:	b490      	push	{r4, r7}
 800eaf4:	b088      	sub	sp, #32
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	f107 0408 	add.w	r4, r7, #8
 800eafc:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb00:	4639      	mov	r1, r7
 800eb02:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800eb0a:	e019      	b.n	800eb40 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	4413      	add	r3, r2
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800eb20:	69ba      	ldr	r2, [r7, #24]
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	da02      	bge.n	800eb2e <mg_strcmp+0x3c>
 800eb28:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2c:	e01e      	b.n	800eb6c <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 800eb2e:	69ba      	ldr	r2, [r7, #24]
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	dd01      	ble.n	800eb3a <mg_strcmp+0x48>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e018      	b.n	800eb6c <mg_strcmp+0x7a>
    i++;
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	69fa      	ldr	r2, [r7, #28]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d203      	bcs.n	800eb50 <mg_strcmp+0x5e>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	69fa      	ldr	r2, [r7, #28]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d3dd      	bcc.n	800eb0c <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	69fa      	ldr	r2, [r7, #28]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d201      	bcs.n	800eb5c <mg_strcmp+0x6a>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e007      	b.n	800eb6c <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	69fa      	ldr	r2, [r7, #28]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d202      	bcs.n	800eb6a <mg_strcmp+0x78>
 800eb64:	f04f 33ff 	mov.w	r3, #4294967295
 800eb68:	e000      	b.n	800eb6c <mg_strcmp+0x7a>
  return 0;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bc90      	pop	{r4, r7}
 800eb74:	4770      	bx	lr

0800eb76 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 800eb76:	b590      	push	{r4, r7, lr}
 800eb78:	b089      	sub	sp, #36	@ 0x24
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	f107 0408 	add.w	r4, r7, #8
 800eb80:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb84:	4639      	mov	r1, r7
 800eb86:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800eb8e:	e01f      	b.n	800ebd0 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	4413      	add	r3, r2
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7ff ff5e 	bl	800ea5a <mg_tolc>
 800eb9e:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	4413      	add	r3, r2
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7ff ff56 	bl	800ea5a <mg_tolc>
 800ebae:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	da02      	bge.n	800ebbe <mg_strcasecmp+0x48>
 800ebb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebbc:	e01e      	b.n	800ebfc <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 800ebbe:	69ba      	ldr	r2, [r7, #24]
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	dd01      	ble.n	800ebca <mg_strcasecmp+0x54>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e018      	b.n	800ebfc <mg_strcasecmp+0x86>
    i++;
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	69fa      	ldr	r2, [r7, #28]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d203      	bcs.n	800ebe0 <mg_strcasecmp+0x6a>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	69fa      	ldr	r2, [r7, #28]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d3d7      	bcc.n	800eb90 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	69fa      	ldr	r2, [r7, #28]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d201      	bcs.n	800ebec <mg_strcasecmp+0x76>
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e007      	b.n	800ebfc <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d202      	bcs.n	800ebfa <mg_strcasecmp+0x84>
 800ebf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf8:	e000      	b.n	800ebfc <mg_strcasecmp+0x86>
  return 0;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3724      	adds	r7, #36	@ 0x24
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd90      	pop	{r4, r7, pc}

0800ec04 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800ec04:	b490      	push	{r4, r7}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	f107 0408 	add.w	r4, r7, #8
 800ec0e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec12:	4639      	mov	r1, r7
 800ec14:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	61fb      	str	r3, [r7, #28]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	61bb      	str	r3, [r7, #24]
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
 800ec24:	2300      	movs	r3, #0
 800ec26:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 800ec28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 80ba 	beq.w	800eda4 <mg_match+0x1a0>
 800ec30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec38:	2200      	movs	r2, #0
 800ec3a:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800ec3c:	e0b2      	b.n	800eda4 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	69fa      	ldr	r2, [r7, #28]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d25b      	bcs.n	800ecfe <mg_match+0xfa>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	69ba      	ldr	r2, [r7, #24]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d257      	bcs.n	800ecfe <mg_match+0xfa>
        (p.buf[i] == '?' ||
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	4413      	add	r3, r2
 800ec54:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 800ec56:	2b3f      	cmp	r3, #63	@ 0x3f
 800ec58:	d015      	beq.n	800ec86 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	4413      	add	r3, r2
 800ec60:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 800ec62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec64:	d04b      	beq.n	800ecfe <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b23      	cmp	r3, #35	@ 0x23
 800ec70:	d045      	beq.n	800ecfe <mg_match+0xfa>
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	4413      	add	r3, r2
 800ec78:	781a      	ldrb	r2, [r3, #0]
 800ec7a:	6839      	ldr	r1, [r7, #0]
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	440b      	add	r3, r1
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d13b      	bne.n	800ecfe <mg_match+0xfa>
      if (caps == NULL) {
 800ec86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d031      	beq.n	800ecf0 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	4413      	add	r3, r2
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b3f      	cmp	r3, #63	@ 0x3f
 800ec96:	d111      	bne.n	800ecbc <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	441a      	add	r2, r3
 800ec9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca0:	601a      	str	r2, [r3, #0]
 800eca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca4:	2201      	movs	r2, #1
 800eca6:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 800eca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecaa:	3308      	adds	r3, #8
 800ecac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	605a      	str	r2, [r3, #4]
 800ecba:	e019      	b.n	800ecf0 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 800ecbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d015      	beq.n	800ecf0 <mg_match+0xec>
 800ecc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d111      	bne.n	800ecf0 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	441a      	add	r2, r3
 800ecd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	461a      	mov	r2, r3
 800ecda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecdc:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 800ecde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece0:	3308      	adds	r3, #8
 800ece2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ece4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece6:	2200      	movs	r2, #0
 800ece8:	605a      	str	r2, [r3, #4]
 800ecea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	61fb      	str	r3, [r7, #28]
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	61bb      	str	r3, [r7, #24]
 800ecfc:	e052      	b.n	800eda4 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	69fa      	ldr	r2, [r7, #28]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d222      	bcs.n	800ed4c <mg_match+0x148>
 800ed06:	683a      	ldr	r2, [r7, #0]
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed10:	d005      	beq.n	800ed1e <mg_match+0x11a>
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	4413      	add	r3, r2
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	2b23      	cmp	r3, #35	@ 0x23
 800ed1c:	d116      	bne.n	800ed4c <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 800ed1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d00b      	beq.n	800ed3c <mg_match+0x138>
 800ed24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d107      	bne.n	800ed3c <mg_match+0x138>
 800ed2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2e:	2200      	movs	r2, #0
 800ed30:	605a      	str	r2, [r3, #4]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	441a      	add	r2, r3
 800ed38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3a:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	1c5a      	adds	r2, r3, #1
 800ed40:	61fa      	str	r2, [r7, #28]
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	3301      	adds	r3, #1
 800ed48:	613b      	str	r3, [r7, #16]
 800ed4a:	e02b      	b.n	800eda4 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d025      	beq.n	800ed9e <mg_match+0x19a>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d821      	bhi.n	800ed9e <mg_match+0x19a>
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	4413      	add	r3, r2
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	2b23      	cmp	r3, #35	@ 0x23
 800ed64:	d005      	beq.n	800ed72 <mg_match+0x16e>
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	2b2f      	cmp	r3, #47	@ 0x2f
 800ed70:	d015      	beq.n	800ed9e <mg_match+0x19a>
      i = ni, j = nj;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	61fb      	str	r3, [r7, #28]
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800ed7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d010      	beq.n	800eda2 <mg_match+0x19e>
 800ed80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10c      	bne.n	800eda2 <mg_match+0x19e>
 800ed88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d108      	bne.n	800eda2 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 800ed90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed92:	3b08      	subs	r3, #8
 800ed94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed98:	2200      	movs	r2, #0
 800ed9a:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800ed9c:	e001      	b.n	800eda2 <mg_match+0x19e>
      }
    } else {
      return false;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e01f      	b.n	800ede2 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 800eda2:	bf00      	nop
  while (i < p.len || j < s.len) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	69fa      	ldr	r2, [r7, #28]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	f4ff af48 	bcc.w	800ec3e <mg_match+0x3a>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	69ba      	ldr	r2, [r7, #24]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	f4ff af43 	bcc.w	800ec3e <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 800edb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d010      	beq.n	800ede0 <mg_match+0x1dc>
 800edbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00c      	beq.n	800ede0 <mg_match+0x1dc>
 800edc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d108      	bne.n	800ede0 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	441a      	add	r2, r3
 800edd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	461a      	mov	r2, r3
 800eddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edde:	605a      	str	r2, [r3, #4]
  }
  return true;
 800ede0:	2301      	movs	r3, #1
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3720      	adds	r7, #32
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bc90      	pop	{r4, r7}
 800edea:	4770      	bx	lr

0800edec <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b089      	sub	sp, #36	@ 0x24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	f107 0410 	add.w	r4, r7, #16
 800edf6:	e884 0003 	stmia.w	r4, {r0, r1}
 800edfa:	60fa      	str	r2, [r7, #12]
 800edfc:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <mg_span+0x1e>
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d101      	bne.n	800ee0e <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e047      	b.n	800ee9e <mg_span+0xb2>
  } else {
    size_t len = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 800ee12:	e002      	b.n	800ee1a <mg_span+0x2e>
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	3301      	adds	r3, #1
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	69fa      	ldr	r2, [r7, #28]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d207      	bcs.n	800ee32 <mg_span+0x46>
 800ee22:	693a      	ldr	r2, [r7, #16]
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	4413      	add	r3, r2
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d1f0      	bne.n	800ee14 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00c      	beq.n	800ee52 <mg_span+0x66>
 800ee38:	6939      	ldr	r1, [r7, #16]
 800ee3a:	68fc      	ldr	r4, [r7, #12]
 800ee3c:	463b      	mov	r3, r7
 800ee3e:	69fa      	ldr	r2, [r7, #28]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff fdf2 	bl	800ea2a <mg_str_n>
 800ee46:	4622      	mov	r2, r4
 800ee48:	463b      	mov	r3, r7
 800ee4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee4e:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d010      	beq.n	800ee7a <mg_span+0x8e>
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	18d1      	adds	r1, r2, r3
 800ee5e:	697a      	ldr	r2, [r7, #20]
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	1ad2      	subs	r2, r2, r3
 800ee64:	68bc      	ldr	r4, [r7, #8]
 800ee66:	463b      	mov	r3, r7
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7ff fdde 	bl	800ea2a <mg_str_n>
 800ee6e:	4622      	mov	r2, r4
 800ee70:	463b      	mov	r3, r7
 800ee72:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee76:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00d      	beq.n	800ee9c <mg_span+0xb0>
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	69fa      	ldr	r2, [r7, #28]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d209      	bcs.n	800ee9c <mg_span+0xb0>
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	1e5a      	subs	r2, r3, #1
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	605a      	str	r2, [r3, #4]
    return true;
 800ee9c:	2301      	movs	r3, #1
  }
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3724      	adds	r7, #36	@ 0x24
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd90      	pop	{r4, r7, pc}

0800eea6 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 800eea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeaa:	b0a5      	sub	sp, #148	@ 0x94
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800eeb2:	e884 0003 	stmia.w	r4, {r0, r1}
 800eeb6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800eeb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eec0:	2300      	movs	r3, #0
 800eec2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800eec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d016      	beq.n	800eefc <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800eece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	d00d      	beq.n	800eef2 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 800eed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eeda:	2b04      	cmp	r3, #4
 800eedc:	d104      	bne.n	800eee8 <mg_str_to_num+0x42>
 800eede:	f04f 32ff 	mov.w	r2, #4294967295
 800eee2:	f04f 0300 	mov.w	r3, #0
 800eee6:	e00d      	b.n	800ef04 <mg_str_to_num+0x5e>
 800eee8:	f04f 32ff 	mov.w	r2, #4294967295
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295
 800eef0:	e008      	b.n	800ef04 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800eef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eef6:	f04f 0300 	mov.w	r3, #0
 800eefa:	e003      	b.n	800ef04 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800eefc:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 800ef00:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 800ef04:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 800ef08:	f04f 0200 	mov.w	r2, #0
 800ef0c:	f04f 0300 	mov.w	r3, #0
 800ef10:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 800ef14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800ef18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1c:	bf08      	it	eq
 800ef1e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800ef22:	d105      	bne.n	800ef30 <mg_str_to_num+0x8a>
 800ef24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef28:	2b08      	cmp	r3, #8
 800ef2a:	d001      	beq.n	800ef30 <mg_str_to_num+0x8a>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	e1e8      	b.n	800f302 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 800ef30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d12d      	bne.n	800ef92 <mg_str_to_num+0xec>
 800ef36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d92a      	bls.n	800ef92 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 800ef3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef42:	4413      	add	r3, r2
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b30      	cmp	r3, #48	@ 0x30
 800ef48:	d121      	bne.n	800ef8e <mg_str_to_num+0xe8>
      i++;
 800ef4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef4e:	3301      	adds	r3, #1
 800ef50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 800ef54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef5a:	4413      	add	r3, r2
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	2b62      	cmp	r3, #98	@ 0x62
 800ef60:	d00a      	beq.n	800ef78 <mg_str_to_num+0xd2>
 800ef62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef68:	4413      	add	r3, r2
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b78      	cmp	r3, #120	@ 0x78
 800ef6e:	d101      	bne.n	800ef74 <mg_str_to_num+0xce>
 800ef70:	2310      	movs	r3, #16
 800ef72:	e002      	b.n	800ef7a <mg_str_to_num+0xd4>
 800ef74:	230a      	movs	r3, #10
 800ef76:	e000      	b.n	800ef7a <mg_str_to_num+0xd4>
 800ef78:	2302      	movs	r3, #2
 800ef7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 800ef7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef7e:	2b0a      	cmp	r3, #10
 800ef80:	d007      	beq.n	800ef92 <mg_str_to_num+0xec>
 800ef82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef86:	3301      	adds	r3, #1
 800ef88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ef8c:	e001      	b.n	800ef92 <mg_str_to_num+0xec>
    } else {
      base = 10;
 800ef8e:	230a      	movs	r3, #10
 800ef90:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 800ef92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef94:	2b10      	cmp	r3, #16
 800ef96:	f000 8178 	beq.w	800f28a <mg_str_to_num+0x3e4>
 800ef9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef9c:	2b10      	cmp	r3, #16
 800ef9e:	f300 817d 	bgt.w	800f29c <mg_str_to_num+0x3f6>
 800efa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efa4:	2b02      	cmp	r3, #2
 800efa6:	d052      	beq.n	800f04e <mg_str_to_num+0x1a8>
 800efa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efaa:	2b0a      	cmp	r3, #10
 800efac:	f000 80cd 	beq.w	800f14a <mg_str_to_num+0x2a4>
 800efb0:	e174      	b.n	800f29c <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800efb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800efb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800efb8:	4413      	add	r3, r2
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	3b30      	subs	r3, #48	@ 0x30
 800efbe:	17da      	asrs	r2, r3, #31
 800efc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800efc2:	637a      	str	r2, [r7, #52]	@ 0x34
 800efc4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800efc8:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 800efcc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800efd0:	f04f 0200 	mov.w	r2, #0
 800efd4:	f04f 0300 	mov.w	r3, #0
 800efd8:	0842      	lsrs	r2, r0, #1
 800efda:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800efde:	084b      	lsrs	r3, r1, #1
 800efe0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800efe4:	4282      	cmp	r2, r0
 800efe6:	418b      	sbcs	r3, r1
 800efe8:	d201      	bcs.n	800efee <mg_str_to_num+0x148>
 800efea:	2300      	movs	r3, #0
 800efec:	e189      	b.n	800f302 <mg_str_to_num+0x45c>
        result *= 2;
 800efee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800eff2:	1891      	adds	r1, r2, r2
 800eff4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eff6:	415b      	adcs	r3, r3
 800eff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800effa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800effe:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f002:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f00a:	1a85      	subs	r5, r0, r2
 800f00c:	eb61 0603 	sbc.w	r6, r1, r3
 800f010:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f014:	4295      	cmp	r5, r2
 800f016:	eb76 0303 	sbcs.w	r3, r6, r3
 800f01a:	d201      	bcs.n	800f020 <mg_str_to_num+0x17a>
 800f01c:	2300      	movs	r3, #0
 800f01e:	e170      	b.n	800f302 <mg_str_to_num+0x45c>
        result += digit;
 800f020:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f028:	1884      	adds	r4, r0, r2
 800f02a:	623c      	str	r4, [r7, #32]
 800f02c:	eb41 0303 	adc.w	r3, r1, r3
 800f030:	627b      	str	r3, [r7, #36]	@ 0x24
 800f032:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f036:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f03a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f03e:	3301      	adds	r3, #1
 800f040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f044:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f048:	3301      	adds	r3, #1
 800f04a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 800f04e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f050:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f054:	429a      	cmp	r2, r3
 800f056:	f080 8123 	bcs.w	800f2a0 <mg_str_to_num+0x3fa>
 800f05a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f05c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f060:	4413      	add	r3, r2
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	2b30      	cmp	r3, #48	@ 0x30
 800f066:	d0a4      	beq.n	800efb2 <mg_str_to_num+0x10c>
 800f068:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f06a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f06e:	4413      	add	r3, r2
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b31      	cmp	r3, #49	@ 0x31
 800f074:	d09d      	beq.n	800efb2 <mg_str_to_num+0x10c>
      }
      break;
 800f076:	e113      	b.n	800f2a0 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800f078:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f07a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f07e:	4413      	add	r3, r2
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	3b30      	subs	r3, #48	@ 0x30
 800f084:	17da      	asrs	r2, r3, #31
 800f086:	61bb      	str	r3, [r7, #24]
 800f088:	61fa      	str	r2, [r7, #28]
 800f08a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f08e:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 800f092:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f096:	f04f 020a 	mov.w	r2, #10
 800f09a:	f04f 0300 	mov.w	r3, #0
 800f09e:	f7f1 fb93 	bl	80007c8 <__aeabi_uldivmod>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f0ae:	4290      	cmp	r0, r2
 800f0b0:	eb71 0303 	sbcs.w	r3, r1, r3
 800f0b4:	d201      	bcs.n	800f0ba <mg_str_to_num+0x214>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	e123      	b.n	800f302 <mg_str_to_num+0x45c>
        result *= 10;
 800f0ba:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800f0be:	4622      	mov	r2, r4
 800f0c0:	462b      	mov	r3, r5
 800f0c2:	f04f 0000 	mov.w	r0, #0
 800f0c6:	f04f 0100 	mov.w	r1, #0
 800f0ca:	0099      	lsls	r1, r3, #2
 800f0cc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800f0d0:	0090      	lsls	r0, r2, #2
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	eb12 0804 	adds.w	r8, r2, r4
 800f0da:	eb43 0905 	adc.w	r9, r3, r5
 800f0de:	eb18 0308 	adds.w	r3, r8, r8
 800f0e2:	613b      	str	r3, [r7, #16]
 800f0e4:	eb49 0309 	adc.w	r3, r9, r9
 800f0e8:	617b      	str	r3, [r7, #20]
 800f0ea:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800f0ee:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f0f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f0f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f0fa:	1a84      	subs	r4, r0, r2
 800f0fc:	63bc      	str	r4, [r7, #56]	@ 0x38
 800f0fe:	eb61 0303 	sbc.w	r3, r1, r3
 800f102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f104:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f108:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800f10c:	4621      	mov	r1, r4
 800f10e:	4291      	cmp	r1, r2
 800f110:	4629      	mov	r1, r5
 800f112:	eb71 0303 	sbcs.w	r3, r1, r3
 800f116:	d201      	bcs.n	800f11c <mg_str_to_num+0x276>
 800f118:	2300      	movs	r3, #0
 800f11a:	e0f2      	b.n	800f302 <mg_str_to_num+0x45c>
        result += digit;
 800f11c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f120:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f124:	1884      	adds	r4, r0, r2
 800f126:	60bc      	str	r4, [r7, #8]
 800f128:	eb41 0303 	adc.w	r3, r1, r3
 800f12c:	60fb      	str	r3, [r7, #12]
 800f12e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f132:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f13a:	3301      	adds	r3, #1
 800f13c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f140:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f144:	3301      	adds	r3, #1
 800f146:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800f14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f14c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f150:	429a      	cmp	r2, r3
 800f152:	f080 80a7 	bcs.w	800f2a4 <mg_str_to_num+0x3fe>
 800f156:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f15c:	4413      	add	r3, r2
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	2b2f      	cmp	r3, #47	@ 0x2f
 800f162:	f240 809f 	bls.w	800f2a4 <mg_str_to_num+0x3fe>
 800f166:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f16c:	4413      	add	r3, r2
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	2b39      	cmp	r3, #57	@ 0x39
 800f172:	d981      	bls.n	800f078 <mg_str_to_num+0x1d2>
      }
      break;
 800f174:	e096      	b.n	800f2a4 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 800f176:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f17c:	4413      	add	r3, r2
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f184:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f188:	2b2f      	cmp	r3, #47	@ 0x2f
 800f18a:	d90a      	bls.n	800f1a2 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800f18c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f190:	2b39      	cmp	r3, #57	@ 0x39
 800f192:	d806      	bhi.n	800f1a2 <mg_str_to_num+0x2fc>
 800f194:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f198:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f19a:	17da      	asrs	r2, r3, #31
 800f19c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f19e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1a0:	e023      	b.n	800f1ea <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f1a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1a6:	2b40      	cmp	r3, #64	@ 0x40
 800f1a8:	d90a      	bls.n	800f1c0 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f1aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1ae:	2b46      	cmp	r3, #70	@ 0x46
 800f1b0:	d806      	bhi.n	800f1c0 <mg_str_to_num+0x31a>
 800f1b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1b6:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f1b8:	17da      	asrs	r2, r3, #31
 800f1ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1bc:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1be:	e014      	b.n	800f1ea <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 800f1c0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1c4:	2b60      	cmp	r3, #96	@ 0x60
 800f1c6:	d90a      	bls.n	800f1de <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f1c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1cc:	2b66      	cmp	r3, #102	@ 0x66
 800f1ce:	d806      	bhi.n	800f1de <mg_str_to_num+0x338>
 800f1d0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1d4:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 800f1d6:	17da      	asrs	r2, r3, #31
 800f1d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1da:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1dc:	e005      	b.n	800f1ea <mg_str_to_num+0x344>
 800f1de:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e2:	f04f 34ff 	mov.w	r4, #4294967295
 800f1e6:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800f1ea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800f1ee:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 800f1f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1fa:	bf08      	it	eq
 800f1fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800f200:	d04a      	beq.n	800f298 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 800f202:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f206:	f04f 0200 	mov.w	r2, #0
 800f20a:	f04f 0300 	mov.w	r3, #0
 800f20e:	0902      	lsrs	r2, r0, #4
 800f210:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800f214:	090b      	lsrs	r3, r1, #4
 800f216:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f21a:	4282      	cmp	r2, r0
 800f21c:	418b      	sbcs	r3, r1
 800f21e:	d201      	bcs.n	800f224 <mg_str_to_num+0x37e>
 800f220:	2300      	movs	r3, #0
 800f222:	e06e      	b.n	800f302 <mg_str_to_num+0x45c>
        result *= 16;
 800f224:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f228:	f04f 0200 	mov.w	r2, #0
 800f22c:	f04f 0300 	mov.w	r3, #0
 800f230:	010b      	lsls	r3, r1, #4
 800f232:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800f236:	0102      	lsls	r2, r0, #4
 800f238:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f23c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f240:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f244:	ebb0 0a02 	subs.w	sl, r0, r2
 800f248:	eb61 0b03 	sbc.w	fp, r1, r3
 800f24c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f250:	4592      	cmp	sl, r2
 800f252:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f256:	d201      	bcs.n	800f25c <mg_str_to_num+0x3b6>
 800f258:	2300      	movs	r3, #0
 800f25a:	e052      	b.n	800f302 <mg_str_to_num+0x45c>
        result += digit;
 800f25c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f260:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f264:	1884      	adds	r4, r0, r2
 800f266:	603c      	str	r4, [r7, #0]
 800f268:	eb41 0303 	adc.w	r3, r1, r3
 800f26c:	607b      	str	r3, [r7, #4]
 800f26e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f272:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f27a:	3301      	adds	r3, #1
 800f27c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f284:	3301      	adds	r3, #1
 800f286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 800f28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f28c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f290:	429a      	cmp	r2, r3
 800f292:	f4ff af70 	bcc.w	800f176 <mg_str_to_num+0x2d0>
      }
      break;
 800f296:	e006      	b.n	800f2a6 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 800f298:	bf00      	nop
      break;
 800f29a:	e004      	b.n	800f2a6 <mg_str_to_num+0x400>
    default:
      return false;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e030      	b.n	800f302 <mg_str_to_num+0x45c>
      break;
 800f2a0:	bf00      	nop
 800f2a2:	e000      	b.n	800f2a6 <mg_str_to_num+0x400>
      break;
 800f2a4:	bf00      	nop
  }
  if (ndigits == 0) return false;
 800f2a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <mg_str_to_num+0x40c>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e027      	b.n	800f302 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 800f2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d001      	beq.n	800f2c0 <mg_str_to_num+0x41a>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e020      	b.n	800f302 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 800f2c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d104      	bne.n	800f2d2 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 800f2c8:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800f2cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2ce:	701a      	strb	r2, [r3, #0]
 800f2d0:	e016      	b.n	800f300 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 800f2d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d104      	bne.n	800f2e4 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 800f2da:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 800f2de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2e0:	801a      	strh	r2, [r3, #0]
 800f2e2:	e00d      	b.n	800f300 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 800f2e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f2e8:	2b04      	cmp	r3, #4
 800f2ea:	d104      	bne.n	800f2f6 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 800f2ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	e004      	b.n	800f300 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 800f2f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f2f8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f2fc:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 800f300:	2301      	movs	r3, #1
}
 800f302:	4618      	mov	r0, r3
 800f304:	3794      	adds	r7, #148	@ 0x94
 800f306:	46bd      	mov	sp, r7
 800f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f30c <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f326:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f32a:	68b9      	ldr	r1, [r7, #8]
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	f04f 0300 	mov.w	r3, #0
 800f334:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	69ba      	ldr	r2, [r7, #24]
 800f33c:	619a      	str	r2, [r3, #24]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	69fa      	ldr	r2, [r7, #28]
 800f342:	61da      	str	r2, [r3, #28]
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	6a3a      	ldr	r2, [r7, #32]
 800f348:	621a      	str	r2, [r3, #32]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	601a      	str	r2, [r3, #0]
}
 800f358:	bf00      	nop
 800f35a:	3714      	adds	r7, #20
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800f364:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f368:	b086      	sub	sp, #24
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6178      	str	r0, [r7, #20]
 800f36e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800f372:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f37a:	eb10 0a02 	adds.w	sl, r0, r2
 800f37e:	eb41 0b03 	adc.w	fp, r1, r3
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	4592      	cmp	sl, r2
 800f38a:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f38e:	d206      	bcs.n	800f39e <mg_timer_expired+0x3a>
 800f390:	6979      	ldr	r1, [r7, #20]
 800f392:	f04f 0200 	mov.w	r2, #0
 800f396:	f04f 0300 	mov.w	r3, #0
 800f39a:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	d10d      	bne.n	800f3c4 <mg_timer_expired+0x60>
 800f3a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f3ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f3b0:	1886      	adds	r6, r0, r2
 800f3b2:	603e      	str	r6, [r7, #0]
 800f3b4:	eb41 0303 	adc.w	r3, r1, r3
 800f3b8:	607b      	str	r3, [r7, #4]
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f3c0:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f3ce:	4290      	cmp	r0, r2
 800f3d0:	eb71 0303 	sbcs.w	r3, r1, r3
 800f3d4:	d201      	bcs.n	800f3da <mg_timer_expired+0x76>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	e022      	b.n	800f420 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f3e4:	ebb0 0802 	subs.w	r8, r0, r2
 800f3e8:	eb61 0903 	sbc.w	r9, r1, r3
 800f3ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f3f0:	4542      	cmp	r2, r8
 800f3f2:	eb73 0309 	sbcs.w	r3, r3, r9
 800f3f6:	d207      	bcs.n	800f408 <mg_timer_expired+0xa4>
 800f3f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f3fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f400:	1884      	adds	r4, r0, r2
 800f402:	eb41 0503 	adc.w	r5, r1, r3
 800f406:	e007      	b.n	800f418 <mg_timer_expired+0xb4>
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f40e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f412:	1884      	adds	r4, r0, r2
 800f414:	eb41 0503 	adc.w	r5, r1, r3
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800f41e:	2301      	movs	r3, #1
}
 800f420:	4618      	mov	r0, r3
 800f422:	3718      	adds	r7, #24
 800f424:	46bd      	mov	sp, r7
 800f426:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f42a:	4770      	bx	lr

0800f42c <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800f42c:	b590      	push	{r4, r7, lr}
 800f42e:	b08b      	sub	sp, #44	@ 0x2c
 800f430:	af02      	add	r7, sp, #8
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	61fb      	str	r3, [r7, #28]
 800f43e:	e054      	b.n	800f4ea <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f446:	4313      	orrs	r3, r2
 800f448:	d10d      	bne.n	800f466 <mg_timer_poll+0x3a>
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	699b      	ldr	r3, [r3, #24]
 800f44e:	f003 0302 	and.w	r3, r3, #2
 800f452:	2b00      	cmp	r3, #0
 800f454:	d007      	beq.n	800f466 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	699b      	ldr	r3, [r3, #24]
 800f45a:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <mg_timer_poll+0x3a>
 800f462:	2301      	movs	r3, #1
 800f464:	e000      	b.n	800f468 <mg_timer_poll+0x3c>
 800f466:	2300      	movs	r3, #0
 800f468:	76fb      	strb	r3, [r7, #27]
 800f46a:	7efb      	ldrb	r3, [r7, #27]
 800f46c:	f003 0301 	and.w	r3, r3, #1
 800f470:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	f103 0410 	add.w	r4, r3, #16
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f47e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f482:	e9cd 2300 	strd	r2, r3, [sp]
 800f486:	4602      	mov	r2, r0
 800f488:	460b      	mov	r3, r1
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7ff ff6a 	bl	800f364 <mg_timer_expired>
 800f490:	4603      	mov	r3, r0
 800f492:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f498:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800f49a:	7efb      	ldrb	r3, [r7, #27]
 800f49c:	f083 0301 	eor.w	r3, r3, #1
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d005      	beq.n	800f4b2 <mg_timer_poll+0x86>
 800f4a6:	7ebb      	ldrb	r3, [r7, #26]
 800f4a8:	f083 0301 	eor.w	r3, r3, #1
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d118      	bne.n	800f4e4 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d105      	bne.n	800f4ca <mg_timer_poll+0x9e>
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	699b      	ldr	r3, [r3, #24]
 800f4c2:	f003 0304 	and.w	r3, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d105      	bne.n	800f4d6 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	69fa      	ldr	r2, [r7, #28]
 800f4d0:	6a12      	ldr	r2, [r2, #32]
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	699b      	ldr	r3, [r3, #24]
 800f4da:	f043 0204 	orr.w	r2, r3, #4
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	619a      	str	r2, [r3, #24]
 800f4e2:	e000      	b.n	800f4e6 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800f4e4:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	61fb      	str	r3, [r7, #28]
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d1a7      	bne.n	800f440 <mg_timer_poll+0x14>
  }
}
 800f4f0:	bf00      	nop
 800f4f2:	bf00      	nop
 800f4f4:	3724      	adds	r7, #36	@ 0x24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd90      	pop	{r4, r7, pc}
	...

0800f4fc <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af02      	add	r7, sp, #8
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 800f508:	4b0b      	ldr	r3, [pc, #44]	@ (800f538 <mg_tls_hexdump+0x3c>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b03      	cmp	r3, #3
 800f50e:	dd0e      	ble.n	800f52e <mg_tls_hexdump+0x32>
 800f510:	4b0a      	ldr	r3, [pc, #40]	@ (800f53c <mg_tls_hexdump+0x40>)
 800f512:	f242 6262 	movw	r2, #9826	@ 0x2662
 800f516:	490a      	ldr	r1, [pc, #40]	@ (800f540 <mg_tls_hexdump+0x44>)
 800f518:	2004      	movs	r0, #4
 800f51a:	f7f8 fba1 	bl	8007c60 <mg_log_prefix>
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a07      	ldr	r2, [pc, #28]	@ (800f544 <mg_tls_hexdump+0x48>)
 800f526:	68f9      	ldr	r1, [r7, #12]
 800f528:	4807      	ldr	r0, [pc, #28]	@ (800f548 <mg_tls_hexdump+0x4c>)
 800f52a:	f7f8 fbe9 	bl	8007d00 <mg_log>
}
 800f52e:	bf00      	nop
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	24000240 	.word	0x24000240
 800f53c:	0802a910 	.word	0x0802a910
 800f540:	08027148 	.word	0x08027148
 800f544:	0800d7d1 	.word	0x0800d7d1
 800f548:	08028bdc 	.word	0x08028bdc

0800f54c <mg_der_to_tlv>:
  uint32_t len;
  uint8_t *value;
};

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 800f54c:	b480      	push	{r7}
 800f54e:	b087      	sub	sp, #28
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d802      	bhi.n	800f564 <mg_der_to_tlv+0x18>
    return -1;
 800f55e:	f04f 33ff 	mov.w	r3, #4294967295
 800f562:	e041      	b.n	800f5e8 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	781a      	ldrb	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3301      	adds	r3, #1
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	461a      	mov	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	1c9a      	adds	r2, r3, #2
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	2b7f      	cmp	r3, #127	@ 0x7f
 800f586:	d921      	bls.n	800f5cc <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	3b80      	subs	r3, #128	@ 0x80
 800f58e:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800f596:	2300      	movs	r3, #0
 800f598:	617b      	str	r3, [r7, #20]
 800f59a:	e00d      	b.n	800f5b8 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	021b      	lsls	r3, r3, #8
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	3202      	adds	r2, #2
 800f5a6:	68f9      	ldr	r1, [r7, #12]
 800f5a8:	440a      	add	r2, r1
 800f5aa:	7812      	ldrb	r2, [r2, #0]
 800f5ac:	431a      	orrs	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]
 800f5b8:	697a      	ldr	r2, [r7, #20]
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d3ed      	bcc.n	800f59c <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	3302      	adds	r3, #2
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	441a      	add	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	441a      	add	r2, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6899      	ldr	r1, [r3, #8]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	440b      	add	r3, r1
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d202      	bcs.n	800f5e6 <mg_der_to_tlv+0x9a>
    return -1;
 800f5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e4:	e000      	b.n	800f5e8 <mg_der_to_tlv+0x9c>
  }
  return 0;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	371c      	adds	r7, #28
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <mg_der_find>:

static int mg_der_find(uint8_t *der, size_t dersz, uint8_t *oid, size_t oidsz,
                       struct mg_der_tlv *tlv) {
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b08c      	sub	sp, #48	@ 0x30
 800f5f8:	af02      	add	r7, sp, #8
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
 800f600:	603b      	str	r3, [r7, #0]
  uint8_t *p, *end;
  struct mg_der_tlv child = {0, 0, NULL};
 800f602:	2300      	movs	r3, #0
 800f604:	743b      	strb	r3, [r7, #16]
 800f606:	2300      	movs	r3, #0
 800f608:	617b      	str	r3, [r7, #20]
 800f60a:	2300      	movs	r3, #0
 800f60c:	61bb      	str	r3, [r7, #24]
  if (mg_der_to_tlv(der, dersz, tlv) < 0) {
 800f60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f7ff ff9a 	bl	800f54c <mg_der_to_tlv>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	da02      	bge.n	800f624 <mg_der_find+0x30>
    return -1;                  // invalid DER
 800f61e:	f04f 33ff 	mov.w	r3, #4294967295
 800f622:	e052      	b.n	800f6ca <mg_der_find+0xd6>
  } else if (tlv->type == 6) {  // found OID, check value
 800f624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b06      	cmp	r3, #6
 800f62a:	d112      	bne.n	800f652 <mg_der_find+0x5e>
    return (tlv->len == oidsz && memcmp(tlv->value, oid, oidsz) == 0);
 800f62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	683a      	ldr	r2, [r7, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d10b      	bne.n	800f64e <mg_der_find+0x5a>
 800f636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	683a      	ldr	r2, [r7, #0]
 800f63c:	6879      	ldr	r1, [r7, #4]
 800f63e:	4618      	mov	r0, r3
 800f640:	f013 fff6 	bl	8023630 <memcmp>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d101      	bne.n	800f64e <mg_der_find+0x5a>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e03d      	b.n	800f6ca <mg_der_find+0xd6>
 800f64e:	2300      	movs	r3, #0
 800f650:	e03b      	b.n	800f6ca <mg_der_find+0xd6>
  } else if ((tlv->type & 0x20) == 0) {
 800f652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	f003 0320 	and.w	r3, r3, #32
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <mg_der_find+0x6e>
    return 0;  // Primitive, but not OID: not found
 800f65e:	2300      	movs	r3, #0
 800f660:	e033      	b.n	800f6ca <mg_der_find+0xd6>
  }
  // Constructed object: scan children
  p = tlv->value;
 800f662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	627b      	str	r3, [r7, #36]	@ 0x24
  end = tlv->value + tlv->len;
 800f668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f66a:	689a      	ldr	r2, [r3, #8]
 800f66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	4413      	add	r3, r2
 800f672:	623b      	str	r3, [r7, #32]
  while (end > p) {
 800f674:	e024      	b.n	800f6c0 <mg_der_find+0xcc>
    int r;
    mg_der_to_tlv(p, (size_t) (end - p), &child);
 800f676:	6a3a      	ldr	r2, [r7, #32]
 800f678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	4619      	mov	r1, r3
 800f67e:	f107 0310 	add.w	r3, r7, #16
 800f682:	461a      	mov	r2, r3
 800f684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f686:	f7ff ff61 	bl	800f54c <mg_der_to_tlv>
    r = mg_der_find(p, (size_t) (end - p), oid, oidsz, tlv);
 800f68a:	6a3a      	ldr	r2, [r7, #32]
 800f68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68e:	1ad3      	subs	r3, r2, r3
 800f690:	4619      	mov	r1, r3
 800f692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f69c:	f7ff ffaa 	bl	800f5f4 <mg_der_find>
 800f6a0:	61f8      	str	r0, [r7, #28]
    if (r < 0) return -1;  // error
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	da02      	bge.n	800f6ae <mg_der_find+0xba>
 800f6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ac:	e00d      	b.n	800f6ca <mg_der_find+0xd6>
    if (r > 0) return 1;   // found OID!
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	dd01      	ble.n	800f6b8 <mg_der_find+0xc4>
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e008      	b.n	800f6ca <mg_der_find+0xd6>
    p = child.value + child.len;
 800f6b8:	69ba      	ldr	r2, [r7, #24]
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	4413      	add	r3, r2
 800f6be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (end > p) {
 800f6c0:	6a3a      	ldr	r2, [r7, #32]
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d8d6      	bhi.n	800f676 <mg_der_find+0x82>
  }
  return 0;  // not found
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3728      	adds	r7, #40	@ 0x28
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 800f6d2:	b480      	push	{r7}
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d914      	bls.n	800f70c <mg_tls_got_record+0x3a>
         c->rtls.len >=
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f6ea:	3203      	adds	r2, #3
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	0212      	lsls	r2, r2, #8
 800f6f0:	b211      	sxth	r1, r2
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f6f6:	3204      	adds	r2, #4
 800f6f8:	7812      	ldrb	r2, [r2, #0]
 800f6fa:	b212      	sxth	r2, r2
 800f6fc:	430a      	orrs	r2, r1
 800f6fe:	b212      	sxth	r2, r2
 800f700:	b292      	uxth	r2, r2
 800f702:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800f704:	4293      	cmp	r3, r2
 800f706:	d301      	bcc.n	800f70c <mg_tls_got_record+0x3a>
 800f708:	2301      	movs	r3, #1
 800f70a:	e000      	b.n	800f70e <mg_tls_got_record+0x3c>
 800f70c:	2300      	movs	r3, #0
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	b2db      	uxtb	r3, r3
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	3368      	adds	r3, #104	@ 0x68
 800f72c:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3303      	adds	r3, #3
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	021b      	lsls	r3, r3, #8
 800f738:	b21a      	sxth	r2, r3
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3304      	adds	r3, #4
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	b21b      	sxth	r3, r3
 800f744:	4313      	orrs	r3, r2
 800f746:	b21b      	sxth	r3, r3
 800f748:	b29b      	uxth	r3, r3
 800f74a:	3305      	adds	r3, #5
 800f74c:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 800f74e:	897b      	ldrh	r3, [r7, #10]
 800f750:	461a      	mov	r2, r3
 800f752:	2100      	movs	r1, #0
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7f7 fb93 	bl	8006e80 <mg_iobuf_del>
}
 800f75a:	bf00      	nop
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
	...

0800f764 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 800f764:	b580      	push	{r7, lr}
 800f766:	b086      	sub	sp, #24
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f772:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	695b      	ldr	r3, [r3, #20]
 800f77c:	4413      	add	r3, r2
 800f77e:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	699b      	ldr	r3, [r3, #24]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d033      	beq.n	800f7f0 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	3301      	adds	r3, #1
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	041a      	lsls	r2, r3, #16
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	3302      	adds	r3, #2
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	021b      	lsls	r3, r3, #8
 800f798:	4313      	orrs	r3, r2
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	3203      	adds	r2, #3
 800f79e:	7812      	ldrb	r2, [r2, #0]
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d904      	bls.n	800f7ba <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 800f7b0:	4911      	ldr	r1, [pc, #68]	@ (800f7f8 <mg_tls_drop_message+0x94>)
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7f2 ff6a 	bl	800268c <mg_error>
    return;
 800f7b8:	e01b      	b.n	800f7f2 <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	3320      	adds	r3, #32
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	6939      	ldr	r1, [r7, #16]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fe fbf2 	bl	800dfac <mg_sha256_update>
  tls->recv_offset += len;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	695a      	ldr	r2, [r3, #20]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	441a      	add	r2, r3
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	699a      	ldr	r2, [r3, #24]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	1ad2      	subs	r2, r2, r3
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	699b      	ldr	r3, [r3, #24]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d104      	bne.n	800f7f2 <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7ff ff99 	bl	800f720 <mg_tls_drop_record>
 800f7ee:	e000      	b.n	800f7f2 <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 800f7f0:	bf00      	nop
  }
}
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	08028be4 	.word	0x08028be4

0800f7fc <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 800f7fc:	b590      	push	{r4, r7, lr}
 800f7fe:	b0d1      	sub	sp, #324	@ 0x144
 800f800:	af02      	add	r7, sp, #8
 800f802:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800f806:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 800f80a:	6020      	str	r0, [r4, #0]
 800f80c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800f810:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 800f814:	6001      	str	r1, [r0, #0]
 800f816:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800f81a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800f81e:	600a      	str	r2, [r1, #0]
 800f820:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f824:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800f828:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 800f82a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f82e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f832:	6818      	ldr	r0, [r3, #0]
 800f834:	f7f0 fdb4 	bl	80003a0 <strlen>
 800f838:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 800f83c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f840:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800f844:	4618      	mov	r0, r3
 800f846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f84a:	461a      	mov	r2, r3
 800f84c:	2100      	movs	r1, #0
 800f84e:	f013 ff19 	bl	8023684 <memset>
 800f852:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800f856:	b2da      	uxtb	r2, r3
 800f858:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f85c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800f860:	705a      	strb	r2, [r3, #1]
 800f862:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f866:	b2da      	uxtb	r2, r3
 800f868:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f86c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800f870:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 800f872:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00c      	beq.n	800f894 <mg_tls_derive_secret+0x98>
 800f87a:	f107 0314 	add.w	r3, r7, #20
 800f87e:	3303      	adds	r3, #3
 800f880:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f884:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 800f888:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800f88c:	6809      	ldr	r1, [r1, #0]
 800f88e:	4618      	mov	r0, r3
 800f890:	f013 fede 	bl	8023650 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 800f894:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f898:	3303      	adds	r3, #3
 800f89a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800f89e:	b2d1      	uxtb	r1, r2
 800f8a0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f8a4:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800f8a8:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 800f8aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00e      	beq.n	800f8d0 <mg_tls_derive_secret+0xd4>
 800f8b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	f107 0214 	add.w	r2, r7, #20
 800f8bc:	18d0      	adds	r0, r2, r3
 800f8be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f8c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f8c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800f8ca:	6819      	ldr	r1, [r3, #0]
 800f8cc:	f013 fec0 	bl	8023650 <memmove>
  packed[4 + labelsz + datasz] = 1;
 800f8d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800f8d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f8d8:	4413      	add	r3, r2
 800f8da:	3304      	adds	r3, #4
 800f8dc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f8e0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800f8e4:	2101      	movs	r1, #1
 800f8e6:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 800f8e8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800f8ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f8f0:	4413      	add	r3, r2
 800f8f2:	3305      	adds	r3, #5
 800f8f4:	f107 0414 	add.w	r4, r7, #20
 800f8f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f8fc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800f900:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800f904:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 800f908:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	4623      	mov	r3, r4
 800f910:	6812      	ldr	r2, [r2, #0]
 800f912:	6809      	ldr	r1, [r1, #0]
 800f914:	f7fe fcbb 	bl	800e28e <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 800f918:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800f91c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800f920:	4619      	mov	r1, r3
 800f922:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 800f926:	f013 fe93 	bl	8023650 <memmove>
}
 800f92a:	bf00      	nop
 800f92c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f930:	46bd      	mov	sp, r7
 800f932:	bd90      	pop	{r4, r7, pc}

0800f934 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 800f934:	b580      	push	{r7, lr}
 800f936:	b0cc      	sub	sp, #304	@ 0x130
 800f938:	af04      	add	r7, sp, #16
 800f93a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f93e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f942:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f944:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f948:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f952:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800f956:	2320      	movs	r3, #32
 800f958:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 800f95c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800f960:	2320      	movs	r3, #32
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	4b89      	ldr	r3, [pc, #548]	@ (800fb8c <mg_tls_generate_handshake_keys+0x258>)
 800f966:	2200      	movs	r2, #0
 800f968:	2100      	movs	r1, #0
 800f96a:	f7fe fc90 	bl	800e28e <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 800f96e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800f972:	2320      	movs	r3, #32
 800f974:	9302      	str	r3, [sp, #8]
 800f976:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f97a:	9301      	str	r3, [sp, #4]
 800f97c:	2320      	movs	r3, #32
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	4b83      	ldr	r3, [pc, #524]	@ (800fb90 <mg_tls_generate_handshake_keys+0x25c>)
 800f982:	2220      	movs	r2, #32
 800f984:	4883      	ldr	r0, [pc, #524]	@ (800fb94 <mg_tls_generate_handshake_keys+0x260>)
 800f986:	f7ff ff39 	bl	800f7fc <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800f98a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f98e:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
                 sizeof(pre_extract_secret), tls->x25519_sec,
 800f992:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f996:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800f998:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800f99c:	2220      	movs	r2, #32
 800f99e:	9200      	str	r2, [sp, #0]
 800f9a0:	2220      	movs	r2, #32
 800f9a2:	f7fe fc74 	bl	800e28e <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 800f9a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f9aa:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800f9ae:	2220      	movs	r2, #32
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4879      	ldr	r0, [pc, #484]	@ (800fb98 <mg_tls_generate_handshake_keys+0x264>)
 800f9b4:	f7ff fda2 	bl	800f4fc <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800f9b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f9bc:	f103 0120 	add.w	r1, r3, #32
 800f9c0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f9c4:	2270      	movs	r2, #112	@ 0x70
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f013 fe42 	bl	8023650 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 800f9cc:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800f9d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fe fb21 	bl	800e01e <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 800f9dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800f9e0:	2220      	movs	r2, #32
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	486d      	ldr	r0, [pc, #436]	@ (800fb9c <mg_tls_generate_handshake_keys+0x268>)
 800f9e6:	f7ff fd89 	bl	800f4fc <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 800f9ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f9ee:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800f9f2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800f9f6:	2320      	movs	r3, #32
 800f9f8:	9302      	str	r3, [sp, #8]
 800f9fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	2320      	movs	r3, #32
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	4613      	mov	r3, r2
 800fa06:	2220      	movs	r2, #32
 800fa08:	4865      	ldr	r0, [pc, #404]	@ (800fba0 <mg_tls_generate_handshake_keys+0x26c>)
 800fa0a:	f7ff fef7 	bl	800f7fc <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 800fa0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fa12:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fa16:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800fa1a:	2320      	movs	r3, #32
 800fa1c:	9302      	str	r3, [sp, #8]
 800fa1e:	f107 0308 	add.w	r3, r7, #8
 800fa22:	9301      	str	r3, [sp, #4]
 800fa24:	2320      	movs	r3, #32
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	2220      	movs	r2, #32
 800fa2c:	485d      	ldr	r0, [pc, #372]	@ (800fba4 <mg_tls_generate_handshake_keys+0x270>)
 800fa2e:	f7ff fee5 	bl	800f7fc <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800fa32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fa36:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 800fa3a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fa3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fa42:	9202      	str	r2, [sp, #8]
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	2300      	movs	r3, #0
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2220      	movs	r2, #32
 800fa4e:	4856      	ldr	r0, [pc, #344]	@ (800fba8 <mg_tls_generate_handshake_keys+0x274>)
 800fa50:	f7ff fed4 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800fa54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fa58:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 800fa5c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fa60:	220c      	movs	r2, #12
 800fa62:	9202      	str	r2, [sp, #8]
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	2300      	movs	r3, #0
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	2220      	movs	r2, #32
 800fa6e:	484f      	ldr	r0, [pc, #316]	@ (800fbac <mg_tls_generate_handshake_keys+0x278>)
 800fa70:	f7ff fec4 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 800fa74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fa78:	f503 7345 	add.w	r3, r3, #788	@ 0x314
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 800fa7c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fa80:	2220      	movs	r2, #32
 800fa82:	9202      	str	r2, [sp, #8]
 800fa84:	9301      	str	r3, [sp, #4]
 800fa86:	2300      	movs	r3, #0
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	2220      	movs	r2, #32
 800fa8e:	4848      	ldr	r0, [pc, #288]	@ (800fbb0 <mg_tls_generate_handshake_keys+0x27c>)
 800fa90:	f7ff feb4 	bl	800f7fc <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800fa94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fa98:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 800fa9c:	f107 0108 	add.w	r1, r7, #8
 800faa0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800faa4:	9202      	str	r2, [sp, #8]
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	2300      	movs	r3, #0
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	2300      	movs	r3, #0
 800faae:	2220      	movs	r2, #32
 800fab0:	483d      	ldr	r0, [pc, #244]	@ (800fba8 <mg_tls_generate_handshake_keys+0x274>)
 800fab2:	f7ff fea3 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800fab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800faba:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 800fabe:	f107 0108 	add.w	r1, r7, #8
 800fac2:	220c      	movs	r2, #12
 800fac4:	9202      	str	r2, [sp, #8]
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	2300      	movs	r3, #0
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	2300      	movs	r3, #0
 800face:	2220      	movs	r2, #32
 800fad0:	4836      	ldr	r0, [pc, #216]	@ (800fbac <mg_tls_generate_handshake_keys+0x278>)
 800fad2:	f7ff fe93 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 800fad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fada:	f503 7358 	add.w	r3, r3, #864	@ 0x360
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 800fade:	f107 0108 	add.w	r1, r7, #8
 800fae2:	2220      	movs	r2, #32
 800fae4:	9202      	str	r2, [sp, #8]
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	2300      	movs	r3, #0
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	2300      	movs	r3, #0
 800faee:	2220      	movs	r2, #32
 800faf0:	482f      	ldr	r0, [pc, #188]	@ (800fbb0 <mg_tls_generate_handshake_keys+0x27c>)
 800faf2:	f7ff fe83 	bl	800f7fc <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 800faf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fafa:	2220      	movs	r2, #32
 800fafc:	4619      	mov	r1, r3
 800fafe:	482d      	ldr	r0, [pc, #180]	@ (800fbb4 <mg_tls_generate_handshake_keys+0x280>)
 800fb00:	f7ff fcfc 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800fb04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fb08:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800fb0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fb10:	4619      	mov	r1, r3
 800fb12:	4829      	ldr	r0, [pc, #164]	@ (800fbb8 <mg_tls_generate_handshake_keys+0x284>)
 800fb14:	f7ff fcf2 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 800fb18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fb1c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800fb20:	220c      	movs	r2, #12
 800fb22:	4619      	mov	r1, r3
 800fb24:	4825      	ldr	r0, [pc, #148]	@ (800fbbc <mg_tls_generate_handshake_keys+0x288>)
 800fb26:	f7ff fce9 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 800fb2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fb2e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800fb32:	2220      	movs	r2, #32
 800fb34:	4619      	mov	r1, r3
 800fb36:	4822      	ldr	r0, [pc, #136]	@ (800fbc0 <mg_tls_generate_handshake_keys+0x28c>)
 800fb38:	f7ff fce0 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 800fb3c:	f107 0308 	add.w	r3, r7, #8
 800fb40:	2220      	movs	r2, #32
 800fb42:	4619      	mov	r1, r3
 800fb44:	481f      	ldr	r0, [pc, #124]	@ (800fbc4 <mg_tls_generate_handshake_keys+0x290>)
 800fb46:	f7ff fcd9 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 800fb4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fb4e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800fb52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fb56:	4619      	mov	r1, r3
 800fb58:	481b      	ldr	r0, [pc, #108]	@ (800fbc8 <mg_tls_generate_handshake_keys+0x294>)
 800fb5a:	f7ff fccf 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 800fb5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fb62:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800fb66:	220c      	movs	r2, #12
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4818      	ldr	r0, [pc, #96]	@ (800fbcc <mg_tls_generate_handshake_keys+0x298>)
 800fb6c:	f7ff fcc6 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 800fb70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fb74:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800fb78:	2220      	movs	r2, #32
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4814      	ldr	r0, [pc, #80]	@ (800fbd0 <mg_tls_generate_handshake_keys+0x29c>)
 800fb7e:	f7ff fcbd 	bl	800f4fc <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 800fb82:	bf00      	nop
 800fb84:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	24000d10 	.word	0x24000d10
 800fb90:	24000248 	.word	0x24000248
 800fb94:	08028bf0 	.word	0x08028bf0
 800fb98:	08028c00 	.word	0x08028c00
 800fb9c:	08028c0c 	.word	0x08028c0c
 800fba0:	08028c18 	.word	0x08028c18
 800fba4:	08028c2c 	.word	0x08028c2c
 800fba8:	08028c40 	.word	0x08028c40
 800fbac:	08028c4c 	.word	0x08028c4c
 800fbb0:	08028c58 	.word	0x08028c58
 800fbb4:	08028c68 	.word	0x08028c68
 800fbb8:	08028c78 	.word	0x08028c78
 800fbbc:	08028c80 	.word	0x08028c80
 800fbc0:	08028c88 	.word	0x08028c88
 800fbc4:	08028c94 	.word	0x08028c94
 800fbc8:	08028ca4 	.word	0x08028ca4
 800fbcc:	08028cac 	.word	0x08028cac
 800fbd0:	08028cb4 	.word	0x08028cb4

0800fbd4 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b0cc      	sub	sp, #304	@ 0x130
 800fbd8:	af04      	add	r7, sp, #16
 800fbda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fbde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fbe2:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fbe4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fbe8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fbf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800fbf6:	2320      	movs	r3, #32
 800fbf8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800fbfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc00:	f103 0120 	add.w	r1, r3, #32
 800fc04:	f107 0308 	add.w	r3, r7, #8
 800fc08:	2270      	movs	r2, #112	@ 0x70
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f013 fd20 	bl	8023650 <memmove>
  mg_sha256_final(hash, &sha256);
 800fc10:	f107 0208 	add.w	r2, r7, #8
 800fc14:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800fc18:	4611      	mov	r1, r2
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe f9ff 	bl	800e01e <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 800fc20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc24:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fc28:	2320      	movs	r3, #32
 800fc2a:	9302      	str	r3, [sp, #8]
 800fc2c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800fc30:	9301      	str	r3, [sp, #4]
 800fc32:	2320      	movs	r3, #32
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	4b64      	ldr	r3, [pc, #400]	@ (800fdc8 <mg_tls_generate_application_keys+0x1f4>)
 800fc38:	2220      	movs	r2, #32
 800fc3a:	4864      	ldr	r0, [pc, #400]	@ (800fdcc <mg_tls_generate_application_keys+0x1f8>)
 800fc3c:	f7ff fdde 	bl	800f7fc <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 800fc40:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800fc44:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800fc48:	2320      	movs	r3, #32
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	4b60      	ldr	r3, [pc, #384]	@ (800fdd0 <mg_tls_generate_application_keys+0x1fc>)
 800fc4e:	2220      	movs	r2, #32
 800fc50:	f7fe fb1d 	bl	800e28e <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 800fc54:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800fc58:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800fc5c:	2320      	movs	r3, #32
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800fc64:	9301      	str	r3, [sp, #4]
 800fc66:	2320      	movs	r3, #32
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	2220      	movs	r2, #32
 800fc6e:	4859      	ldr	r0, [pc, #356]	@ (800fdd4 <mg_tls_generate_application_keys+0x200>)
 800fc70:	f7ff fdc4 	bl	800f7fc <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800fc74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc78:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 800fc7c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800fc80:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fc84:	9202      	str	r2, [sp, #8]
 800fc86:	9301      	str	r3, [sp, #4]
 800fc88:	2300      	movs	r3, #0
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	2220      	movs	r2, #32
 800fc90:	4851      	ldr	r0, [pc, #324]	@ (800fdd8 <mg_tls_generate_application_keys+0x204>)
 800fc92:	f7ff fdb3 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800fc96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc9a:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 800fc9e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800fca2:	220c      	movs	r2, #12
 800fca4:	9202      	str	r2, [sp, #8]
 800fca6:	9301      	str	r3, [sp, #4]
 800fca8:	2300      	movs	r3, #0
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	2300      	movs	r3, #0
 800fcae:	2220      	movs	r2, #32
 800fcb0:	484a      	ldr	r0, [pc, #296]	@ (800fddc <mg_tls_generate_application_keys+0x208>)
 800fcb2:	f7ff fda3 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 800fcb6:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800fcba:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800fcbe:	2320      	movs	r3, #32
 800fcc0:	9302      	str	r3, [sp, #8]
 800fcc2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	2320      	movs	r3, #32
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	4613      	mov	r3, r2
 800fcce:	2220      	movs	r2, #32
 800fcd0:	4843      	ldr	r0, [pc, #268]	@ (800fde0 <mg_tls_generate_application_keys+0x20c>)
 800fcd2:	f7ff fd93 	bl	800f7fc <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800fcd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fcda:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 800fcde:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800fce2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fce6:	9202      	str	r2, [sp, #8]
 800fce8:	9301      	str	r3, [sp, #4]
 800fcea:	2300      	movs	r3, #0
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	2300      	movs	r3, #0
 800fcf0:	2220      	movs	r2, #32
 800fcf2:	4839      	ldr	r0, [pc, #228]	@ (800fdd8 <mg_tls_generate_application_keys+0x204>)
 800fcf4:	f7ff fd82 	bl	800f7fc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800fcf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fcfc:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 800fd00:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800fd04:	220c      	movs	r2, #12
 800fd06:	9202      	str	r2, [sp, #8]
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	2300      	movs	r3, #0
 800fd10:	2220      	movs	r2, #32
 800fd12:	4832      	ldr	r0, [pc, #200]	@ (800fddc <mg_tls_generate_application_keys+0x208>)
 800fd14:	f7ff fd72 	bl	800f7fc <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 800fd18:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800fd1c:	2220      	movs	r2, #32
 800fd1e:	4619      	mov	r1, r3
 800fd20:	4830      	ldr	r0, [pc, #192]	@ (800fde4 <mg_tls_generate_application_keys+0x210>)
 800fd22:	f7ff fbeb 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800fd26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd2a:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800fd2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fd32:	4619      	mov	r1, r3
 800fd34:	482c      	ldr	r0, [pc, #176]	@ (800fde8 <mg_tls_generate_application_keys+0x214>)
 800fd36:	f7ff fbe1 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 800fd3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd3e:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800fd42:	220c      	movs	r2, #12
 800fd44:	4619      	mov	r1, r3
 800fd46:	4829      	ldr	r0, [pc, #164]	@ (800fdec <mg_tls_generate_application_keys+0x218>)
 800fd48:	f7ff fbd8 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 800fd4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd50:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800fd54:	2220      	movs	r2, #32
 800fd56:	4619      	mov	r1, r3
 800fd58:	4825      	ldr	r0, [pc, #148]	@ (800fdf0 <mg_tls_generate_application_keys+0x21c>)
 800fd5a:	f7ff fbcf 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 800fd5e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800fd62:	2220      	movs	r2, #32
 800fd64:	4619      	mov	r1, r3
 800fd66:	4823      	ldr	r0, [pc, #140]	@ (800fdf4 <mg_tls_generate_application_keys+0x220>)
 800fd68:	f7ff fbc8 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 800fd6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd70:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800fd74:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fd78:	4619      	mov	r1, r3
 800fd7a:	481f      	ldr	r0, [pc, #124]	@ (800fdf8 <mg_tls_generate_application_keys+0x224>)
 800fd7c:	f7ff fbbe 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 800fd80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd84:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800fd88:	220c      	movs	r2, #12
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	481b      	ldr	r0, [pc, #108]	@ (800fdfc <mg_tls_generate_application_keys+0x228>)
 800fd8e:	f7ff fbb5 	bl	800f4fc <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 800fd92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd96:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800fd9a:	2220      	movs	r2, #32
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	4818      	ldr	r0, [pc, #96]	@ (800fe00 <mg_tls_generate_application_keys+0x22c>)
 800fda0:	f7ff fbac 	bl	800f4fc <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 800fda4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800fdae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdb2:	f8d3 22c4 	ldr.w	r2, [r3, #708]	@ 0x2c4
 800fdb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdba:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 800fdbe:	bf00      	nop
 800fdc0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	24000248 	.word	0x24000248
 800fdcc:	08028bf0 	.word	0x08028bf0
 800fdd0:	24000d10 	.word	0x24000d10
 800fdd4:	08028cc0 	.word	0x08028cc0
 800fdd8:	08028c40 	.word	0x08028c40
 800fddc:	08028c4c 	.word	0x08028c4c
 800fde0:	08028cd4 	.word	0x08028cd4
 800fde4:	08028ce8 	.word	0x08028ce8
 800fde8:	08028c78 	.word	0x08028c78
 800fdec:	08028c80 	.word	0x08028c80
 800fdf0:	08028c88 	.word	0x08028c88
 800fdf4:	08028cf8 	.word	0x08028cf8
 800fdf8:	08028ca4 	.word	0x08028ca4
 800fdfc:	08028cac 	.word	0x08028cac
 800fe00:	08028cb4 	.word	0x08028cb4

0800fe04 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b09a      	sub	sp, #104	@ 0x68
 800fe08:	af04      	add	r7, sp, #16
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
 800fe10:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fe18:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 800fe1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe1c:	3304      	adds	r3, #4
 800fe1e:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3311      	adds	r3, #17
 800fe24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800fe26:	2317      	movs	r3, #23
 800fe28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800fe32:	2303      	movs	r3, #3
 800fe34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 800fe38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe3a:	0a1b      	lsrs	r3, r3, #8
 800fe3c:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800fe3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 800fe42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe44:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800fe46:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800fe4a:	2317      	movs	r3, #23
 800fe4c:	773b      	strb	r3, [r7, #28]
 800fe4e:	2303      	movs	r3, #3
 800fe50:	777b      	strb	r3, [r7, #29]
 800fe52:	2303      	movs	r3, #3
 800fe54:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 800fe56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe58:	0a1b      	lsrs	r3, r3, #8
 800fe5a:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800fe5c:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 800fe5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe60:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800fe62:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fe6c:	f003 0302 	and.w	r3, r3, #2
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d003      	beq.n	800fe7e <mg_tls_encrypt+0x7a>
 800fe76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fe7c:	e002      	b.n	800fe84 <mg_tls_encrypt+0x80>
 800fe7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fe84:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d003      	beq.n	800fe9e <mg_tls_encrypt+0x9a>
 800fe96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe98:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800fe9c:	e002      	b.n	800fea4 <mg_tls_encrypt+0xa0>
 800fe9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fea0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  uint8_t *key =
 800fea4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800feac:	f003 0302 	and.w	r3, r3, #2
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d003      	beq.n	800febe <mg_tls_encrypt+0xba>
 800feb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feb8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800febc:	e002      	b.n	800fec4 <mg_tls_encrypt+0xc0>
 800febe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fec0:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  uint8_t *iv =
 800fec4:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 800fec6:	f107 0310 	add.w	r3, r7, #16
 800feca:	220c      	movs	r2, #12
 800fecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fece:	4618      	mov	r0, r3
 800fed0:	f013 fbbe 	bl	8023650 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 800fed4:	7e3a      	ldrb	r2, [r7, #24]
 800fed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fed8:	0e1b      	lsrs	r3, r3, #24
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	4053      	eors	r3, r2
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 800fee2:	7e7a      	ldrb	r2, [r7, #25]
 800fee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fee6:	0c1b      	lsrs	r3, r3, #16
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	4053      	eors	r3, r2
 800feec:	b2db      	uxtb	r3, r3
 800feee:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 800fef0:	7eba      	ldrb	r2, [r7, #26]
 800fef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fef4:	0a1b      	lsrs	r3, r3, #8
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	4053      	eors	r3, r2
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 800fefe:	7efa      	ldrb	r2, [r7, #27]
 800ff00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	4053      	eors	r3, r2
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 800ff0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff0c:	6899      	ldr	r1, [r3, #8]
 800ff0e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ff12:	2305      	movs	r3, #5
 800ff14:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ff16:	f7f6 ff61 	bl	8006ddc <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 800ff1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff1c:	689a      	ldr	r2, [r3, #8]
 800ff1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff20:	4413      	add	r3, r2
 800ff22:	4619      	mov	r1, r3
 800ff24:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ff26:	f7f6 fecd 	bl	8006cc4 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 800ff2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	4413      	add	r3, r2
 800ff34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 800ff36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff3c:	6899      	ldr	r1, [r3, #8]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	440b      	add	r3, r1
 800ff42:	3301      	adds	r3, #1
 800ff44:	4413      	add	r3, r2
 800ff46:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	68b9      	ldr	r1, [r7, #8]
 800ff4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ff4e:	f013 fb7f 	bl	8023650 <memmove>
  outmsg[msgsz] = msgtype;
 800ff52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4413      	add	r3, r2
 800ff58:	78fa      	ldrb	r2, [r7, #3]
 800ff5a:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 800ff5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff60:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 800ff62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff64:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ff68:	4619      	mov	r1, r3
 800ff6a:	2001      	movs	r0, #1
 800ff6c:	f012 f90e 	bl	802218c <calloc>
 800ff70:	4603      	mov	r3, r0
 800ff72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 800ff74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d104      	bne.n	800ff84 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 800ff7a:	491f      	ldr	r1, [pc, #124]	@ (800fff8 <mg_tls_encrypt+0x1f4>)
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f7f2 fb85 	bl	800268c <mg_error>
 800ff82:	e035      	b.n	800fff0 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	3301      	adds	r3, #1
 800ff88:	f107 011c 	add.w	r1, r7, #28
 800ff8c:	f107 0210 	add.w	r2, r7, #16
 800ff90:	9302      	str	r3, [sp, #8]
 800ff92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	2305      	movs	r3, #5
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ff9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ffa0:	f004 f89d 	bl	80140de <mg_chacha20_poly1305_encrypt>
 800ffa4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 800ffa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ffaa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ffac:	f013 fb50 	bl	8023650 <memmove>
      free(enc);
 800ffb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ffb2:	f012 f90f 	bl	80221d4 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ffbc:	f003 0302 	and.w	r3, r3, #2
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d007      	beq.n	800ffd6 <mg_tls_encrypt+0x1d2>
 800ffc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ffcc:	1c5a      	adds	r2, r3, #1
 800ffce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffd0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800ffd4:	e006      	b.n	800ffe4 <mg_tls_encrypt+0x1e0>
 800ffd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ffdc:	1c5a      	adds	r2, r3, #1
 800ffde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffe0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  wio->len += encsz;
 800ffe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffe6:	689a      	ldr	r2, [r3, #8]
 800ffe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffea:	441a      	add	r2, r3
 800ffec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffee:	609a      	str	r2, [r3, #8]
}
 800fff0:	3758      	adds	r7, #88	@ 0x58
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	08028d08 	.word	0x08028d08

0800fffc <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b092      	sub	sp, #72	@ 0x48
 8010000:	af02      	add	r7, sp, #8
 8010002:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801000a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	3368      	adds	r3, #104	@ 0x68
 8010010:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010018:	f003 0302 	and.w	r3, r3, #2
 801001c:	b2db      	uxtb	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	d003      	beq.n	801002a <mg_tls_recv_record+0x2e>
 8010022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010028:	e002      	b.n	8010030 <mg_tls_recv_record+0x34>
 801002a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801002c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010030:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010038:	f003 0302 	and.w	r3, r3, #2
 801003c:	b2db      	uxtb	r3, r3
 801003e:	2b00      	cmp	r3, #0
 8010040:	d003      	beq.n	801004a <mg_tls_recv_record+0x4e>
 8010042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010044:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8010048:	e002      	b.n	8010050 <mg_tls_recv_record+0x54>
 801004a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801004c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  uint8_t *key =
 8010050:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010058:	f003 0302 	and.w	r3, r3, #2
 801005c:	b2db      	uxtb	r3, r3
 801005e:	2b00      	cmp	r3, #0
 8010060:	d003      	beq.n	801006a <mg_tls_recv_record+0x6e>
 8010062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010064:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8010068:	e002      	b.n	8010070 <mg_tls_recv_record+0x74>
 801006a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801006c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  uint8_t *iv =
 8010070:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8010072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010074:	699b      	ldr	r3, [r3, #24]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 801007a:	2300      	movs	r3, #0
 801007c:	e0bc      	b.n	80101f8 <mg_tls_recv_record+0x1fc>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7ff fb27 	bl	800f6d2 <mg_tls_got_record>
 8010084:	4603      	mov	r3, r0
 8010086:	f083 0301 	eor.w	r3, r3, #1
 801008a:	b2db      	uxtb	r3, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8010090:	f06f 0301 	mvn.w	r3, #1
 8010094:	e0b0      	b.n	80101f8 <mg_tls_recv_record+0x1fc>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 8010096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	2b17      	cmp	r3, #23
 801009e:	d026      	beq.n	80100ee <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 80100a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	2b14      	cmp	r3, #20
 80100a8:	d103      	bne.n	80100b2 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff fb38 	bl	800f720 <mg_tls_drop_record>
 80100b0:	e7e5      	b.n	801007e <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 80100b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b15      	cmp	r3, #21
 80100ba:	d111      	bne.n	80100e0 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 80100bc:	4b50      	ldr	r3, [pc, #320]	@ (8010200 <mg_tls_recv_record+0x204>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	dd09      	ble.n	80100d8 <mg_tls_recv_record+0xdc>
 80100c4:	4b4f      	ldr	r3, [pc, #316]	@ (8010204 <mg_tls_recv_record+0x208>)
 80100c6:	f242 729d 	movw	r2, #10141	@ 0x279d
 80100ca:	494f      	ldr	r1, [pc, #316]	@ (8010208 <mg_tls_recv_record+0x20c>)
 80100cc:	2002      	movs	r0, #2
 80100ce:	f7f7 fdc7 	bl	8007c60 <mg_log_prefix>
 80100d2:	484e      	ldr	r0, [pc, #312]	@ (801020c <mg_tls_recv_record+0x210>)
 80100d4:	f7f7 fe14 	bl	8007d00 <mg_log>
      mg_tls_drop_record(c);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7ff fb21 	bl	800f720 <mg_tls_drop_record>
 80100de:	e7ce      	b.n	801007e <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 80100e0:	494b      	ldr	r1, [pc, #300]	@ (8010210 <mg_tls_recv_record+0x214>)
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7f2 fad2 	bl	800268c <mg_error>
      return -1;
 80100e8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ec:	e084      	b.n	80101f8 <mg_tls_recv_record+0x1fc>
      break;
 80100ee:	bf00      	nop

#if !CHACHA20
  mg_gcm_initialize();
#endif

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80100f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3303      	adds	r3, #3
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	021b      	lsls	r3, r3, #8
 80100fa:	b21a      	sxth	r2, r3
 80100fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	3304      	adds	r3, #4
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	b21b      	sxth	r3, r3
 8010106:	4313      	orrs	r3, r2
 8010108:	b21b      	sxth	r3, r3
 801010a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 801010c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	3305      	adds	r3, #5
 8010112:	627b      	str	r3, [r7, #36]	@ 0x24
  memmove(nonce, iv, sizeof(nonce));
 8010114:	f107 030c 	add.w	r3, r7, #12
 8010118:	220c      	movs	r2, #12
 801011a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801011c:	4618      	mov	r0, r3
 801011e:	f013 fa97 	bl	8023650 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8010122:	7d3a      	ldrb	r2, [r7, #20]
 8010124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010126:	0e1b      	lsrs	r3, r3, #24
 8010128:	b2db      	uxtb	r3, r3
 801012a:	4053      	eors	r3, r2
 801012c:	b2db      	uxtb	r3, r3
 801012e:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8010130:	7d7a      	ldrb	r2, [r7, #21]
 8010132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010134:	0c1b      	lsrs	r3, r3, #16
 8010136:	b2db      	uxtb	r3, r3
 8010138:	4053      	eors	r3, r2
 801013a:	b2db      	uxtb	r3, r3
 801013c:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 801013e:	7dba      	ldrb	r2, [r7, #22]
 8010140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010142:	0a1b      	lsrs	r3, r3, #8
 8010144:	b2db      	uxtb	r3, r3
 8010146:	4053      	eors	r3, r2
 8010148:	b2db      	uxtb	r3, r3
 801014a:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 801014c:	7dfa      	ldrb	r2, [r7, #23]
 801014e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010150:	b2db      	uxtb	r3, r3
 8010152:	4053      	eors	r3, r2
 8010154:	b2db      	uxtb	r3, r3
 8010156:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8010158:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801015a:	4619      	mov	r1, r3
 801015c:	2001      	movs	r0, #1
 801015e:	f012 f815 	bl	802218c <calloc>
 8010162:	4603      	mov	r3, r0
 8010164:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d106      	bne.n	801017a <mg_tls_recv_record+0x17e>
      mg_error(c, "TLS OOM");
 801016c:	4929      	ldr	r1, [pc, #164]	@ (8010214 <mg_tls_recv_record+0x218>)
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7f2 fa8c 	bl	800268c <mg_error>
      return -1;
 8010174:	f04f 33ff 	mov.w	r3, #4294967295
 8010178:	e03e      	b.n	80101f8 <mg_tls_recv_record+0x1fc>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 801017a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801017c:	f107 020c 	add.w	r2, r7, #12
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010186:	6a38      	ldr	r0, [r7, #32]
 8010188:	f003 ffe1 	bl	801414e <mg_chacha20_poly1305_decrypt>
 801018c:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 801018e:	69fa      	ldr	r2, [r7, #28]
 8010190:	6a39      	ldr	r1, [r7, #32]
 8010192:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010194:	f013 fa5c 	bl	8023650 <memmove>
    free(dec);
 8010198:	6a38      	ldr	r0, [r7, #32]
 801019a:	f012 f81b 	bl	80221d4 <free>
    mg_error(c, "wrong size");
    return -1;
  }
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif
  r = msgsz - 16 - 1;
 801019e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80101a0:	3b11      	subs	r3, #17
 80101a2:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 80101a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80101a6:	3b11      	subs	r3, #17
 80101a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101aa:	4413      	add	r3, r2
 80101ac:	781a      	ldrb	r2, [r3, #0]
 80101ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101b0:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 80101b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101b6:	6812      	ldr	r2, [r2, #0]
 80101b8:	1a9a      	subs	r2, r3, r2
 80101ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101bc:	615a      	str	r2, [r3, #20]
  tls->recv_len = msgsz - 16 - 1;
 80101be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80101c0:	3b11      	subs	r3, #17
 80101c2:	461a      	mov	r2, r3
 80101c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101c6:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80101ce:	f003 0302 	and.w	r3, r3, #2
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d007      	beq.n	80101e8 <mg_tls_recv_record+0x1ec>
 80101d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101e2:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 80101e6:	e006      	b.n	80101f6 <mg_tls_recv_record+0x1fa>
 80101e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101f2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  return r;
 80101f6:	69bb      	ldr	r3, [r7, #24]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3740      	adds	r7, #64	@ 0x40
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	24000240 	.word	0x24000240
 8010204:	0802a920 	.word	0x0802a920
 8010208:	08027148 	.word	0x08027148
 801020c:	08028d10 	.word	0x08028d10
 8010210:	08028d2c 	.word	0x08028d2c
 8010214:	08028d08 	.word	0x08028d08

08010218 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 8010218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801021a:	b0d5      	sub	sp, #340	@ 0x154
 801021c:	af00      	add	r7, sp, #0
 801021e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010222:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010226:	6018      	str	r0, [r3, #0]
 8010228:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801022c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8010230:	6019      	str	r1, [r3, #0]
 8010232:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010236:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801023a:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801023c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010240:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801024a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 801024e:	4b41      	ldr	r3, [pc, #260]	@ (8010354 <mg_tls_calc_cert_verify_hash+0x13c>)
 8010250:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8010254:	461d      	mov	r5, r3
 8010256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801025e:	682b      	ldr	r3, [r5, #0]
 8010260:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8010262:	4b3d      	ldr	r3, [pc, #244]	@ (8010358 <mg_tls_calc_cert_verify_hash+0x140>)
 8010264:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8010268:	461d      	mov	r5, r3
 801026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801026e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010272:	682b      	ldr	r3, [r5, #0]
 8010274:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 8010276:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801027a:	2240      	movs	r2, #64	@ 0x40
 801027c:	2120      	movs	r1, #32
 801027e:	4618      	mov	r0, r3
 8010280:	f013 fa00 	bl	8023684 <memset>
  if (is_client) {
 8010284:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010288:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d018      	beq.n	80102c4 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 8010292:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010296:	3340      	adds	r3, #64	@ 0x40
 8010298:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 801029c:	469c      	mov	ip, r3
 801029e:	f104 0e20 	add.w	lr, r4, #32
 80102a2:	4665      	mov	r5, ip
 80102a4:	4626      	mov	r6, r4
 80102a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80102a8:	6028      	str	r0, [r5, #0]
 80102aa:	6069      	str	r1, [r5, #4]
 80102ac:	60aa      	str	r2, [r5, #8]
 80102ae:	60eb      	str	r3, [r5, #12]
 80102b0:	3410      	adds	r4, #16
 80102b2:	f10c 0c10 	add.w	ip, ip, #16
 80102b6:	4574      	cmp	r4, lr
 80102b8:	d1f3      	bne.n	80102a2 <mg_tls_calc_cert_verify_hash+0x8a>
 80102ba:	4662      	mov	r2, ip
 80102bc:	4623      	mov	r3, r4
 80102be:	881b      	ldrh	r3, [r3, #0]
 80102c0:	8013      	strh	r3, [r2, #0]
 80102c2:	e017      	b.n	80102f4 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 80102c4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80102c8:	3340      	adds	r3, #64	@ 0x40
 80102ca:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80102ce:	469c      	mov	ip, r3
 80102d0:	f104 0e20 	add.w	lr, r4, #32
 80102d4:	4665      	mov	r5, ip
 80102d6:	4626      	mov	r6, r4
 80102d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80102da:	6028      	str	r0, [r5, #0]
 80102dc:	6069      	str	r1, [r5, #4]
 80102de:	60aa      	str	r2, [r5, #8]
 80102e0:	60eb      	str	r3, [r5, #12]
 80102e2:	3410      	adds	r4, #16
 80102e4:	f10c 0c10 	add.w	ip, ip, #16
 80102e8:	4574      	cmp	r4, lr
 80102ea:	d1f3      	bne.n	80102d4 <mg_tls_calc_cert_verify_hash+0xbc>
 80102ec:	4662      	mov	r2, ip
 80102ee:	4623      	mov	r3, r4
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80102f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80102f8:	f103 0120 	add.w	r1, r3, #32
 80102fc:	f107 0310 	add.w	r3, r7, #16
 8010300:	2270      	movs	r2, #112	@ 0x70
 8010302:	4618      	mov	r0, r3
 8010304:	f013 f9a4 	bl	8023650 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 8010308:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801030c:	3362      	adds	r3, #98	@ 0x62
 801030e:	f107 0210 	add.w	r2, r7, #16
 8010312:	4611      	mov	r1, r2
 8010314:	4618      	mov	r0, r3
 8010316:	f7fd fe82 	bl	800e01e <mg_sha256_final>

  mg_sha256_init(&sha256);
 801031a:	f107 0310 	add.w	r3, r7, #16
 801031e:	4618      	mov	r0, r3
 8010320:	f7fd fc00 	bl	800db24 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 8010324:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8010328:	f107 0310 	add.w	r3, r7, #16
 801032c:	2282      	movs	r2, #130	@ 0x82
 801032e:	4618      	mov	r0, r3
 8010330:	f7fd fe3c 	bl	800dfac <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8010334:	f107 0210 	add.w	r2, r7, #16
 8010338:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801033c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8010340:	4611      	mov	r1, r2
 8010342:	6818      	ldr	r0, [r3, #0]
 8010344:	f7fd fe6b 	bl	800e01e <mg_sha256_final>
}
 8010348:	bf00      	nop
 801034a:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 801034e:	46bd      	mov	sp, r7
 8010350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010352:	bf00      	nop
 8010354:	08028d40 	.word	0x08028d40
 8010358:	08028d64 	.word	0x08028d64

0801035c <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 801035c:	b580      	push	{r7, lr}
 801035e:	b08c      	sub	sp, #48	@ 0x30
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801036a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3368      	adds	r3, #104	@ 0x68
 8010370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff f9ad 	bl	800f6d2 <mg_tls_got_record>
 8010378:	4603      	mov	r3, r0
 801037a:	f083 0301 	eor.w	r3, r3, #1
 801037e:	b2db      	uxtb	r3, r3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d002      	beq.n	801038a <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8010384:	f06f 0301 	mvn.w	r3, #1
 8010388:	e14b      	b.n	8010622 <mg_tls_server_recv_hello+0x2c6>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 801038a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b16      	cmp	r3, #22
 8010392:	d105      	bne.n	80103a0 <mg_tls_server_recv_hello+0x44>
 8010394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	3305      	adds	r3, #5
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d006      	beq.n	80103ae <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 80103a0:	49a2      	ldr	r1, [pc, #648]	@ (801062c <mg_tls_server_recv_hello+0x2d0>)
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7f2 f972 	bl	800268c <mg_error>
    return -1;
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295
 80103ac:	e139      	b.n	8010622 <mg_tls_server_recv_hello+0x2c6>
  }
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80103ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3303      	adds	r3, #3
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	021b      	lsls	r3, r3, #8
 80103b8:	b21a      	sxth	r2, r3
 80103ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	3304      	adds	r3, #4
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	b21b      	sxth	r3, r3
 80103c4:	4313      	orrs	r3, r2
 80103c6:	b21b      	sxth	r3, r3
 80103c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80103ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103cc:	f103 0020 	add.w	r0, r3, #32
 80103d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	3305      	adds	r3, #5
 80103d6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80103d8:	4619      	mov	r1, r3
 80103da:	f7fd fde7 	bl	800dfac <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80103de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80103e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	330b      	adds	r3, #11
 80103ea:	2220      	movs	r2, #32
 80103ec:	4619      	mov	r1, r3
 80103ee:	f013 f92f 	bl	8023650 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80103f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80103fa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80103fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010402:	2b20      	cmp	r3, #32
 8010404:	d10b      	bne.n	801041e <mg_tls_server_recv_hello+0xc2>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 8010406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010408:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 801040c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	332c      	adds	r3, #44	@ 0x2c
 8010412:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8010416:	4619      	mov	r1, r3
 8010418:	f013 f91a 	bl	8023650 <memmove>
 801041c:	e011      	b.n	8010442 <mg_tls_server_recv_hello+0xe6>
  } else if (session_id_len != 0) {
 801041e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00d      	beq.n	8010442 <mg_tls_server_recv_hello+0xe6>
    MG_INFO(("bad session id len"));
 8010426:	4b82      	ldr	r3, [pc, #520]	@ (8010630 <mg_tls_server_recv_hello+0x2d4>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b01      	cmp	r3, #1
 801042c:	dd09      	ble.n	8010442 <mg_tls_server_recv_hello+0xe6>
 801042e:	4b81      	ldr	r3, [pc, #516]	@ (8010634 <mg_tls_server_recv_hello+0x2d8>)
 8010430:	f242 72fd 	movw	r2, #10237	@ 0x27fd
 8010434:	4980      	ldr	r1, [pc, #512]	@ (8010638 <mg_tls_server_recv_hello+0x2dc>)
 8010436:	2002      	movs	r0, #2
 8010438:	f7f7 fc12 	bl	8007c60 <mg_log_prefix>
 801043c:	487f      	ldr	r0, [pc, #508]	@ (801063c <mg_tls_server_recv_hello+0x2e0>)
 801043e:	f7f7 fc5f 	bl	8007d00 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8010442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801044a:	332c      	adds	r3, #44	@ 0x2c
 801044c:	4413      	add	r3, r2
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	021b      	lsls	r3, r3, #8
 8010452:	b21a      	sxth	r2, r3
 8010454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010456:	6819      	ldr	r1, [r3, #0]
 8010458:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801045c:	332d      	adds	r3, #45	@ 0x2d
 801045e:	440b      	add	r3, r1
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	b21b      	sxth	r3, r3
 8010464:	4313      	orrs	r3, r2
 8010466:	b21b      	sxth	r3, r3
 8010468:	83fb      	strh	r3, [r7, #30]
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 801046a:	8bfa      	ldrh	r2, [r7, #30]
 801046c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046e:	6899      	ldr	r1, [r3, #8]
 8010470:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010474:	1acb      	subs	r3, r1, r3
 8010476:	3b2e      	subs	r3, #46	@ 0x2e
 8010478:	429a      	cmp	r2, r3
 801047a:	f200 80c5 	bhi.w	8010608 <mg_tls_server_recv_hello+0x2ac>
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 801047e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8010486:	8bfb      	ldrh	r3, [r7, #30]
 8010488:	440b      	add	r3, r1
 801048a:	3330      	adds	r3, #48	@ 0x30
 801048c:	4413      	add	r3, r2
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	021b      	lsls	r3, r3, #8
 8010492:	b21a      	sxth	r2, r3
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	6819      	ldr	r1, [r3, #0]
 8010498:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 801049c:	8bfb      	ldrh	r3, [r7, #30]
 801049e:	4403      	add	r3, r0
 80104a0:	3331      	adds	r3, #49	@ 0x31
 80104a2:	440b      	add	r3, r1
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	b21b      	sxth	r3, r3
 80104a8:	4313      	orrs	r3, r2
 80104aa:	b21b      	sxth	r3, r3
 80104ac:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 80104ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80104b6:	8bfb      	ldrh	r3, [r7, #30]
 80104b8:	440b      	add	r3, r1
 80104ba:	3332      	adds	r3, #50	@ 0x32
 80104bc:	4413      	add	r3, r2
 80104be:	61bb      	str	r3, [r7, #24]
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 80104c0:	8bba      	ldrh	r2, [r7, #28]
 80104c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c4:	6899      	ldr	r1, [r3, #8]
 80104c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80104ca:	1ac9      	subs	r1, r1, r3
 80104cc:	8bfb      	ldrh	r3, [r7, #30]
 80104ce:	1acb      	subs	r3, r1, r3
 80104d0:	3b32      	subs	r3, #50	@ 0x32
 80104d2:	429a      	cmp	r2, r3
 80104d4:	f200 809a 	bhi.w	801060c <mg_tls_server_recv_hello+0x2b0>
  for (j = 0; j < ext_len;) {
 80104d8:	2300      	movs	r3, #0
 80104da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80104dc:	e08e      	b.n	80105fc <mg_tls_server_recv_hello+0x2a0>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80104de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80104e0:	3302      	adds	r3, #2
 80104e2:	69ba      	ldr	r2, [r7, #24]
 80104e4:	4413      	add	r3, r2
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	021b      	lsls	r3, r3, #8
 80104ea:	b21a      	sxth	r2, r3
 80104ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80104ee:	3303      	adds	r3, #3
 80104f0:	69b9      	ldr	r1, [r7, #24]
 80104f2:	440b      	add	r3, r1
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	b21b      	sxth	r3, r3
 80104f8:	4313      	orrs	r3, r2
 80104fa:	b21b      	sxth	r3, r3
 80104fc:	82fb      	strh	r3, [r7, #22]
    if (ext[j] != 0x00 ||
 80104fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010500:	69ba      	ldr	r2, [r7, #24]
 8010502:	4413      	add	r3, r2
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <mg_tls_server_recv_hello+0x1bc>
        ext[j + 1] != 0x33) {  // not a key share extension, ignore
 801050a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801050c:	3301      	adds	r3, #1
 801050e:	69ba      	ldr	r2, [r7, #24]
 8010510:	4413      	add	r3, r2
 8010512:	781b      	ldrb	r3, [r3, #0]
    if (ext[j] != 0x00 ||
 8010514:	2b33      	cmp	r3, #51	@ 0x33
 8010516:	d006      	beq.n	8010526 <mg_tls_server_recv_hello+0x1ca>
      j += (uint16_t) (n + 4);
 8010518:	8afa      	ldrh	r2, [r7, #22]
 801051a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801051c:	4413      	add	r3, r2
 801051e:	b29b      	uxth	r3, r3
 8010520:	3304      	adds	r3, #4
 8010522:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8010524:	e06a      	b.n	80105fc <mg_tls_server_recv_hello+0x2a0>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8010526:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010528:	3304      	adds	r3, #4
 801052a:	69ba      	ldr	r2, [r7, #24]
 801052c:	4413      	add	r3, r2
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	021b      	lsls	r3, r3, #8
 8010532:	b21a      	sxth	r2, r3
 8010534:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010536:	3305      	adds	r3, #5
 8010538:	69b9      	ldr	r1, [r7, #24]
 801053a:	440b      	add	r3, r1
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	b21b      	sxth	r3, r3
 8010540:	4313      	orrs	r3, r2
 8010542:	b21b      	sxth	r3, r3
 8010544:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8010546:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010548:	3306      	adds	r3, #6
 801054a:	69ba      	ldr	r2, [r7, #24]
 801054c:	4413      	add	r3, r2
 801054e:	613b      	str	r3, [r7, #16]
    if (key_exchange_len >
 8010550:	8aba      	ldrh	r2, [r7, #20]
        rio->len - (uint16_t) ((size_t) key_exchange - (size_t) rio->buf) - 2)
 8010552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	6939      	ldr	r1, [r7, #16]
 8010558:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801055a:	6800      	ldr	r0, [r0, #0]
 801055c:	1a09      	subs	r1, r1, r0
 801055e:	b289      	uxth	r1, r1
 8010560:	1a5b      	subs	r3, r3, r1
 8010562:	3b02      	subs	r3, #2
    if (key_exchange_len >
 8010564:	429a      	cmp	r2, r3
 8010566:	d853      	bhi.n	8010610 <mg_tls_server_recv_hello+0x2b4>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8010568:	2300      	movs	r3, #0
 801056a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801056c:	e03c      	b.n	80105e8 <mg_tls_server_recv_hello+0x28c>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 801056e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010570:	3302      	adds	r3, #2
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	4413      	add	r3, r2
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	021b      	lsls	r3, r3, #8
 801057a:	b21a      	sxth	r2, r3
 801057c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801057e:	3303      	adds	r3, #3
 8010580:	6939      	ldr	r1, [r7, #16]
 8010582:	440b      	add	r3, r1
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	b21b      	sxth	r3, r3
 8010588:	4313      	orrs	r3, r2
 801058a:	b21b      	sxth	r3, r3
 801058c:	81fb      	strh	r3, [r7, #14]
      if (m > (key_exchange_len - k - 4)) goto fail;
 801058e:	8aba      	ldrh	r2, [r7, #20]
 8010590:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	1eda      	subs	r2, r3, #3
 8010596:	89fb      	ldrh	r3, [r7, #14]
 8010598:	429a      	cmp	r2, r3
 801059a:	dd3b      	ble.n	8010614 <mg_tls_server_recv_hello+0x2b8>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 801059c:	89fb      	ldrh	r3, [r7, #14]
 801059e:	2b20      	cmp	r3, #32
 80105a0:	d11c      	bne.n	80105dc <mg_tls_server_recv_hello+0x280>
 80105a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d116      	bne.n	80105dc <mg_tls_server_recv_hello+0x280>
 80105ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80105b0:	3301      	adds	r3, #1
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	4413      	add	r3, r2
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b1d      	cmp	r3, #29
 80105ba:	d10f      	bne.n	80105dc <mg_tls_server_recv_hello+0x280>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 80105bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105be:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 80105c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80105c4:	3304      	adds	r3, #4
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	4413      	add	r3, r2
 80105ca:	89fa      	ldrh	r2, [r7, #14]
 80105cc:	4619      	mov	r1, r3
 80105ce:	f013 f83f 	bl	8023650 <memmove>
        mg_tls_drop_record(c);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7ff f8a4 	bl	800f720 <mg_tls_drop_record>
        return 0;
 80105d8:	2300      	movs	r3, #0
 80105da:	e022      	b.n	8010622 <mg_tls_server_recv_hello+0x2c6>
      }
      k += (uint16_t) (m + 4);
 80105dc:	89fa      	ldrh	r2, [r7, #14]
 80105de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80105e0:	4413      	add	r3, r2
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	3304      	adds	r3, #4
 80105e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 80105e8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80105ea:	8abb      	ldrh	r3, [r7, #20]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d3be      	bcc.n	801056e <mg_tls_server_recv_hello+0x212>
    }
    j += (uint16_t) (n + 4);
 80105f0:	8afa      	ldrh	r2, [r7, #22]
 80105f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80105f4:	4413      	add	r3, r2
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	3304      	adds	r3, #4
 80105fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 80105fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80105fe:	8bbb      	ldrh	r3, [r7, #28]
 8010600:	429a      	cmp	r2, r3
 8010602:	f4ff af6c 	bcc.w	80104de <mg_tls_server_recv_hello+0x182>
  }
fail:
 8010606:	e006      	b.n	8010616 <mg_tls_server_recv_hello+0x2ba>
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 8010608:	bf00      	nop
 801060a:	e004      	b.n	8010616 <mg_tls_server_recv_hello+0x2ba>
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 801060c:	bf00      	nop
 801060e:	e002      	b.n	8010616 <mg_tls_server_recv_hello+0x2ba>
      goto fail;
 8010610:	bf00      	nop
 8010612:	e000      	b.n	8010616 <mg_tls_server_recv_hello+0x2ba>
      if (m > (key_exchange_len - k - 4)) goto fail;
 8010614:	bf00      	nop
  mg_error(c, "bad client hello");
 8010616:	490a      	ldr	r1, [pc, #40]	@ (8010640 <mg_tls_server_recv_hello+0x2e4>)
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7f2 f837 	bl	800268c <mg_error>
  return -1;
 801061e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010622:	4618      	mov	r0, r3
 8010624:	3730      	adds	r7, #48	@ 0x30
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	08028d88 	.word	0x08028d88
 8010630:	24000240 	.word	0x24000240
 8010634:	0802a934 	.word	0x0802a934
 8010638:	08027148 	.word	0x08027148
 801063c:	08028da4 	.word	0x08028da4
 8010640:	08028db8 	.word	0x08028db8

08010644 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8010644:	b5b0      	push	{r4, r5, r7, lr}
 8010646:	b0b4      	sub	sp, #208	@ 0xd0
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010652:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8010656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801065a:	3304      	adds	r3, #4
 801065c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8010660:	4a4c      	ldr	r2, [pc, #304]	@ (8010794 <mg_tls_server_send_hello+0x150>)
 8010662:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010666:	4611      	mov	r1, r2
 8010668:	227a      	movs	r2, #122	@ 0x7a
 801066a:	4618      	mov	r0, r3
 801066c:	f013 f8ff 	bl	802386e <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8010670:	f107 030c 	add.w	r3, r7, #12
 8010674:	2120      	movs	r1, #32
 8010676:	4618      	mov	r0, r3
 8010678:	f7f0 faec 	bl	8000c54 <mg_random>
 801067c:	4603      	mov	r3, r0
 801067e:	f083 0301 	eor.w	r3, r3, #1
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d003      	beq.n	8010690 <mg_tls_server_send_hello+0x4c>
 8010688:	4943      	ldr	r1, [pc, #268]	@ (8010798 <mg_tls_server_send_hello+0x154>)
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f7f1 fffe 	bl	800268c <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8010690:	f107 010c 	add.w	r1, r7, #12
 8010694:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8010698:	2301      	movs	r3, #1
 801069a:	4a40      	ldr	r2, [pc, #256]	@ (801079c <mg_tls_server_send_hello+0x158>)
 801069c:	f006 fdbe 	bl	801721c <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 80106a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80106a4:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80106a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80106ac:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80106b0:	f107 010c 	add.w	r1, r7, #12
 80106b4:	2301      	movs	r3, #1
 80106b6:	f006 fdb1 	bl	801721c <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 80106ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80106be:	33f0      	adds	r3, #240	@ 0xf0
 80106c0:	2220      	movs	r2, #32
 80106c2:	4619      	mov	r1, r3
 80106c4:	4836      	ldr	r0, [pc, #216]	@ (80107a0 <mg_tls_server_send_hello+0x15c>)
 80106c6:	f7fe ff19 	bl	800f4fc <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 80106ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80106ce:	3306      	adds	r3, #6
 80106d0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80106d4:	3290      	adds	r2, #144	@ 0x90
 80106d6:	6815      	ldr	r5, [r2, #0]
 80106d8:	6854      	ldr	r4, [r2, #4]
 80106da:	6890      	ldr	r0, [r2, #8]
 80106dc:	68d1      	ldr	r1, [r2, #12]
 80106de:	601d      	str	r5, [r3, #0]
 80106e0:	605c      	str	r4, [r3, #4]
 80106e2:	6098      	str	r0, [r3, #8]
 80106e4:	60d9      	str	r1, [r3, #12]
 80106e6:	6915      	ldr	r5, [r2, #16]
 80106e8:	6954      	ldr	r4, [r2, #20]
 80106ea:	6990      	ldr	r0, [r2, #24]
 80106ec:	69d1      	ldr	r1, [r2, #28]
 80106ee:	611d      	str	r5, [r3, #16]
 80106f0:	615c      	str	r4, [r3, #20]
 80106f2:	6198      	str	r0, [r3, #24]
 80106f4:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 80106f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80106fa:	3327      	adds	r3, #39	@ 0x27
 80106fc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010700:	32b0      	adds	r2, #176	@ 0xb0
 8010702:	6815      	ldr	r5, [r2, #0]
 8010704:	6854      	ldr	r4, [r2, #4]
 8010706:	6890      	ldr	r0, [r2, #8]
 8010708:	68d1      	ldr	r1, [r2, #12]
 801070a:	601d      	str	r5, [r3, #0]
 801070c:	605c      	str	r4, [r3, #4]
 801070e:	6098      	str	r0, [r3, #8]
 8010710:	60d9      	str	r1, [r3, #12]
 8010712:	6915      	ldr	r5, [r2, #16]
 8010714:	6954      	ldr	r4, [r2, #20]
 8010716:	6990      	ldr	r0, [r2, #24]
 8010718:	69d1      	ldr	r1, [r2, #28]
 801071a:	611d      	str	r5, [r3, #16]
 801071c:	615c      	str	r4, [r3, #20]
 801071e:	6198      	str	r0, [r3, #24]
 8010720:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8010722:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010726:	3354      	adds	r3, #84	@ 0x54
 8010728:	461d      	mov	r5, r3
 801072a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 801072e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010730:	6028      	str	r0, [r5, #0]
 8010732:	6069      	str	r1, [r5, #4]
 8010734:	60aa      	str	r2, [r5, #8]
 8010736:	60eb      	str	r3, [r5, #12]
 8010738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801073a:	6128      	str	r0, [r5, #16]
 801073c:	6169      	str	r1, [r5, #20]
 801073e:	61aa      	str	r2, [r5, #24]
 8010740:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8010742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010746:	6899      	ldr	r1, [r3, #8]
 8010748:	2305      	movs	r3, #5
 801074a:	4a16      	ldr	r2, [pc, #88]	@ (80107a4 <mg_tls_server_send_hello+0x160>)
 801074c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010750:	f7f6 fb44 	bl	8006ddc <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8010754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010758:	6899      	ldr	r1, [r3, #8]
 801075a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801075e:	237a      	movs	r3, #122	@ 0x7a
 8010760:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010764:	f7f6 fb3a 	bl	8006ddc <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8010768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801076c:	3320      	adds	r3, #32
 801076e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010772:	227a      	movs	r2, #122	@ 0x7a
 8010774:	4618      	mov	r0, r3
 8010776:	f7fd fc19 	bl	800dfac <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 801077a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801077e:	6899      	ldr	r1, [r3, #8]
 8010780:	2306      	movs	r3, #6
 8010782:	4a09      	ldr	r2, [pc, #36]	@ (80107a8 <mg_tls_server_send_hello+0x164>)
 8010784:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010788:	f7f6 fb28 	bl	8006ddc <mg_iobuf_add>
}
 801078c:	bf00      	nop
 801078e:	37d0      	adds	r7, #208	@ 0xd0
 8010790:	46bd      	mov	sp, r7
 8010792:	bdb0      	pop	{r4, r5, r7, pc}
 8010794:	08028df0 	.word	0x08028df0
 8010798:	08028dcc 	.word	0x08028dcc
 801079c:	0802a638 	.word	0x0802a638
 80107a0:	08028dd0 	.word	0x08028dd0
 80107a4:	08028de0 	.word	0x08028de0
 80107a8:	08028de8 	.word	0x08028de8

080107ac <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80107ba:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 80107bc:	4a0d      	ldr	r2, [pc, #52]	@ (80107f4 <mg_tls_server_send_ext+0x48>)
 80107be:	f107 030c 	add.w	r3, r7, #12
 80107c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107c6:	6018      	str	r0, [r3, #0]
 80107c8:	3304      	adds	r3, #4
 80107ca:	8019      	strh	r1, [r3, #0]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	3320      	adds	r3, #32
 80107d0:	f107 010c 	add.w	r1, r7, #12
 80107d4:	2206      	movs	r2, #6
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fd fbe8 	bl	800dfac <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 80107dc:	f107 010c 	add.w	r1, r7, #12
 80107e0:	2316      	movs	r3, #22
 80107e2:	2206      	movs	r2, #6
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7ff fb0d 	bl	800fe04 <mg_tls_encrypt>
}
 80107ea:	bf00      	nop
 80107ec:	3718      	adds	r7, #24
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	08028e6c 	.word	0x08028e6c

080107f8 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b086      	sub	sp, #24
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010806:	617b      	str	r3, [r7, #20]
  // server DER certificate (empty)
  size_t n = tls->cert_der.len;
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801080e:	613b      	str	r3, [r7, #16]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	330d      	adds	r3, #13
 8010814:	4619      	mov	r1, r3
 8010816:	2001      	movs	r0, #1
 8010818:	f011 fcb8 	bl	802218c <calloc>
 801081c:	4603      	mov	r3, r0
 801081e:	60fb      	str	r3, [r7, #12]
  if (cert == NULL) {
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d104      	bne.n	8010830 <mg_tls_server_send_cert+0x38>
    mg_error(c, "tls cert oom");
 8010826:	493a      	ldr	r1, [pc, #232]	@ (8010910 <mg_tls_server_send_cert+0x118>)
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7f1 ff2f 	bl	800268c <mg_error>
    return;
 801082e:	e06b      	b.n	8010908 <mg_tls_server_send_cert+0x110>
  }
  cert[0] = 0x0b;                                // handshake header
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	220b      	movs	r2, #11
 8010834:	701a      	strb	r2, [r3, #0]
  cert[1] = (uint8_t) (((n + 9) >> 16) & 255U);  // 3 bytes: payload length
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	3309      	adds	r3, #9
 801083a:	0c1a      	lsrs	r2, r3, #16
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3301      	adds	r3, #1
 8010840:	b2d2      	uxtb	r2, r2
 8010842:	701a      	strb	r2, [r3, #0]
  cert[2] = (uint8_t) (((n + 9) >> 8) & 255U);
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	3309      	adds	r3, #9
 8010848:	0a1a      	lsrs	r2, r3, #8
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	3302      	adds	r3, #2
 801084e:	b2d2      	uxtb	r2, r2
 8010850:	701a      	strb	r2, [r3, #0]
  cert[3] = (uint8_t) ((n + 9) & 255U);
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	b2da      	uxtb	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	3303      	adds	r3, #3
 801085a:	3209      	adds	r2, #9
 801085c:	b2d2      	uxtb	r2, r2
 801085e:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                   // request context
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	3304      	adds	r3, #4
 8010864:	2200      	movs	r2, #0
 8010866:	701a      	strb	r2, [r3, #0]
  cert[5] = (uint8_t) (((n + 5) >> 16) & 255U);  // 3 bytes: cert (s) length
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	3305      	adds	r3, #5
 801086c:	0c1a      	lsrs	r2, r3, #16
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	3305      	adds	r3, #5
 8010872:	b2d2      	uxtb	r2, r2
 8010874:	701a      	strb	r2, [r3, #0]
  cert[6] = (uint8_t) (((n + 5) >> 8) & 255U);
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	3305      	adds	r3, #5
 801087a:	0a1a      	lsrs	r2, r3, #8
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	3306      	adds	r3, #6
 8010880:	b2d2      	uxtb	r2, r2
 8010882:	701a      	strb	r2, [r3, #0]
  cert[7] = (uint8_t) ((n + 5) & 255U);
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	b2da      	uxtb	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	3307      	adds	r3, #7
 801088c:	3205      	adds	r2, #5
 801088e:	b2d2      	uxtb	r2, r2
 8010890:	701a      	strb	r2, [r3, #0]
  cert[8] =
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	0c1a      	lsrs	r2, r3, #16
  cert[8] =
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	3308      	adds	r3, #8
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 801089a:	b2d2      	uxtb	r2, r2
  cert[8] =
 801089c:	701a      	strb	r2, [r3, #0]
  cert[9] = (uint8_t) (((n) >> 8) & 255U);
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	0a1a      	lsrs	r2, r3, #8
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	3309      	adds	r3, #9
 80108a6:	b2d2      	uxtb	r2, r2
 80108a8:	701a      	strb	r2, [r3, #0]
  cert[10] = (uint8_t) (n & 255U);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	330a      	adds	r3, #10
 80108ae:	693a      	ldr	r2, [r7, #16]
 80108b0:	b2d2      	uxtb	r2, r2
 80108b2:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, n);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f103 000b 	add.w	r0, r3, #11
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80108c0:	693a      	ldr	r2, [r7, #16]
 80108c2:	4619      	mov	r1, r3
 80108c4:	f012 fec4 	bl	8023650 <memmove>
  cert[11 + n] = cert[12 + n] = 0;  // certificate extensions (none)
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	330c      	adds	r3, #12
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	4413      	add	r3, r2
 80108d0:	2200      	movs	r2, #0
 80108d2:	701a      	strb	r2, [r3, #0]
 80108d4:	693a      	ldr	r2, [r7, #16]
 80108d6:	320b      	adds	r2, #11
 80108d8:	68f9      	ldr	r1, [r7, #12]
 80108da:	440a      	add	r2, r1
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	7013      	strb	r3, [r2, #0]
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	f103 0020 	add.w	r0, r3, #32
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	330d      	adds	r3, #13
 80108ea:	461a      	mov	r2, r3
 80108ec:	68f9      	ldr	r1, [r7, #12]
 80108ee:	f7fd fb5d 	bl	800dfac <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f103 020d 	add.w	r2, r3, #13
 80108f8:	2316      	movs	r3, #22
 80108fa:	68f9      	ldr	r1, [r7, #12]
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f7ff fa81 	bl	800fe04 <mg_tls_encrypt>
  free(cert);
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f011 fc66 	bl	80221d4 <free>
}
 8010908:	3718      	adds	r7, #24
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	08028e74 	.word	0x08028e74

08010914 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	3318      	adds	r3, #24
 8010924:	4618      	mov	r0, r3
 8010926:	f7fd f8fd 	bl	800db24 <mg_sha256_init>
}
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8010932:	b580      	push	{r7, lr}
 8010934:	b086      	sub	sp, #24
 8010936:	af00      	add	r7, sp, #0
 8010938:	60f8      	str	r0, [r7, #12]
 801093a:	60b9      	str	r1, [r7, #8]
 801093c:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	3318      	adds	r3, #24
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	68b9      	ldr	r1, [r7, #8]
 801094a:	4618      	mov	r0, r3
 801094c:	f7fd fb2e 	bl	800dfac <mg_sha256_update>
}
 8010950:	bf00      	nop
 8010952:	3718      	adds	r7, #24
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	3318      	adds	r3, #24
 801096a:	4619      	mov	r1, r3
 801096c:	6838      	ldr	r0, [r7, #0]
 801096e:	f7fd fb56 	bl	800e01e <mg_sha256_final>
}
 8010972:	bf00      	nop
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
	...

0801097c <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 801097c:	b590      	push	{r4, r7, lr}
 801097e:	b0f9      	sub	sp, #484	@ 0x1e4
 8010980:	af02      	add	r7, sp, #8
 8010982:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010986:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801098a:	6018      	str	r0, [r3, #0]
 801098c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010990:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8010994:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010996:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801099a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80109a4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 80109a8:	4a8f      	ldr	r2, [pc, #572]	@ (8010be8 <mg_tls_send_cert_verify+0x26c>)
 80109aa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80109ae:	6810      	ldr	r0, [r2, #0]
 80109b0:	6851      	ldr	r1, [r2, #4]
 80109b2:	c303      	stmia	r3!, {r0, r1}
 80109b4:	7a12      	ldrb	r2, [r2, #8]
 80109b6:	701a      	strb	r2, [r3, #0]
 80109b8:	f207 1379 	addw	r3, r7, #377	@ 0x179
 80109bc:	2249      	movs	r2, #73	@ 0x49
 80109be:	2100      	movs	r1, #0
 80109c0:	4618      	mov	r0, r3
 80109c2:	f012 fe5f 	bl	8023684 <memset>
  size_t sigsz, verifysz = 0;
 80109c6:	2300      	movs	r3, #0
 80109c8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 80109cc:	2300      	movs	r3, #0
 80109ce:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80109d2:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80109d6:	2200      	movs	r2, #0
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	605a      	str	r2, [r3, #4]
 80109dc:	609a      	str	r2, [r3, #8]
 80109de:	60da      	str	r2, [r3, #12]
 80109e0:	611a      	str	r2, [r3, #16]
 80109e2:	615a      	str	r2, [r3, #20]
 80109e4:	619a      	str	r2, [r3, #24]
 80109e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80109ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80109ee:	2200      	movs	r2, #0
 80109f0:	601a      	str	r2, [r3, #0]
 80109f2:	3304      	adds	r3, #4
 80109f4:	227c      	movs	r2, #124	@ 0x7c
 80109f6:	2100      	movs	r1, #0
 80109f8:	4618      	mov	r0, r3
 80109fa:	f012 fe43 	bl	8023684 <memset>
  struct SHA256_HashContext ctx = {
 80109fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a06:	4618      	mov	r0, r3
 8010a08:	2388      	movs	r3, #136	@ 0x88
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	f012 fe39 	bl	8023684 <memset>
 8010a12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a16:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a1a:	4a74      	ldr	r2, [pc, #464]	@ (8010bec <mg_tls_send_cert_verify+0x270>)
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a26:	4a72      	ldr	r2, [pc, #456]	@ (8010bf0 <mg_tls_send_cert_verify+0x274>)
 8010a28:	605a      	str	r2, [r3, #4]
 8010a2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a2e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a32:	4a70      	ldr	r2, [pc, #448]	@ (8010bf4 <mg_tls_send_cert_verify+0x278>)
 8010a34:	609a      	str	r2, [r3, #8]
 8010a36:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a3e:	2240      	movs	r2, #64	@ 0x40
 8010a40:	60da      	str	r2, [r3, #12]
 8010a42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a4a:	2220      	movs	r2, #32
 8010a4c:	611a      	str	r2, [r3, #16]
 8010a4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a52:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a56:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8010a5a:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8010a5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a60:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010a64:	2200      	movs	r2, #0
 8010a66:	601a      	str	r2, [r3, #0]
 8010a68:	3304      	adds	r3, #4
 8010a6a:	223c      	movs	r2, #60	@ 0x3c
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f012 fe08 	bl	8023684 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8010a74:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a78:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8010a7c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8010a80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010a84:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010a88:	6812      	ldr	r2, [r2, #0]
 8010a8a:	6818      	ldr	r0, [r3, #0]
 8010a8c:	f7ff fbc4 	bl	8010218 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8010a90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8010a94:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8010a98:	f004 fb6c 	bl	8015174 <mg_uecc_secp256r1>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010aa2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8010aa6:	9301      	str	r3, [sp, #4]
 8010aa8:	f107 0308 	add.w	r3, r7, #8
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	2220      	movs	r2, #32
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f005 fbce 	bl	8016254 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8010ab8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010abc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	b25b      	sxtb	r3, r3
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	09db      	lsrs	r3, r3, #7
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8010ace:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010ad2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ada:	b25b      	sxtb	r3, r3
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	09db      	lsrs	r3, r3, #7
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8010ae6:	2330      	movs	r3, #48	@ 0x30
 8010ae8:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8010aec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	4413      	add	r3, r2
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	3344      	adds	r3, #68	@ 0x44
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8010b04:	2302      	movs	r3, #2
 8010b06:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8010b0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	3320      	adds	r3, #32
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8010b18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010b1c:	330c      	adds	r3, #12
 8010b1e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8010b22:	4413      	add	r3, r2
 8010b24:	f107 0108 	add.w	r1, r7, #8
 8010b28:	2220      	movs	r2, #32
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f012 fd90 	bl	8023650 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8010b30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010b34:	332c      	adds	r3, #44	@ 0x2c
 8010b36:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8010b3a:	443b      	add	r3, r7
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8010b42:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010b4c:	332d      	adds	r3, #45	@ 0x2d
 8010b4e:	3220      	adds	r2, #32
 8010b50:	b2d2      	uxtb	r2, r2
 8010b52:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8010b56:	443b      	add	r3, r7
 8010b58:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8010b5c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8010b60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010b64:	4413      	add	r3, r2
 8010b66:	332e      	adds	r3, #46	@ 0x2e
 8010b68:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8010b6c:	18d0      	adds	r0, r2, r3
 8010b6e:	f107 0308 	add.w	r3, r7, #8
 8010b72:	3320      	adds	r3, #32
 8010b74:	2220      	movs	r2, #32
 8010b76:	4619      	mov	r1, r3
 8010b78:	f012 fd6a 	bl	8023650 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8010b7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010b80:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8010b84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010b88:	4413      	add	r3, r2
 8010b8a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8010b8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010b92:	3308      	adds	r3, #8
 8010b94:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8010b98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8010ba6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8010bb0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8010bb4:	3320      	adds	r3, #32
 8010bb6:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8010bba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fd f9f4 	bl	800dfac <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8010bc4:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8010bc8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010bcc:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8010bd0:	2316      	movs	r3, #22
 8010bd2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8010bd6:	6800      	ldr	r0, [r0, #0]
 8010bd8:	f7ff f914 	bl	800fe04 <mg_tls_encrypt>
}
 8010bdc:	bf00      	nop
 8010bde:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd90      	pop	{r4, r7, pc}
 8010be6:	bf00      	nop
 8010be8:	08028e84 	.word	0x08028e84
 8010bec:	08010915 	.word	0x08010915
 8010bf0:	08010933 	.word	0x08010933
 8010bf4:	08010959 	.word	0x08010959

08010bf8 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b0b4      	sub	sp, #208	@ 0xd0
 8010bfc:	af02      	add	r7, sp, #8
 8010bfe:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010c06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8010c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010c0e:	3304      	adds	r3, #4
 8010c10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8010c14:	4a28      	ldr	r2, [pc, #160]	@ (8010cb8 <mg_tls_server_send_finish+0xc0>)
 8010c16:	f107 030c 	add.w	r3, r7, #12
 8010c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c1e:	6018      	str	r0, [r3, #0]
 8010c20:	3304      	adds	r3, #4
 8010c22:	7019      	strb	r1, [r3, #0]
 8010c24:	f107 0311 	add.w	r3, r7, #17
 8010c28:	221f      	movs	r2, #31
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f012 fd29 	bl	8023684 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8010c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010c36:	f103 0120 	add.w	r1, r3, #32
 8010c3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010c3e:	2270      	movs	r2, #112	@ 0x70
 8010c40:	4618      	mov	r0, r3
 8010c42:	f012 fd05 	bl	8023650 <memmove>
  mg_sha256_final(hash, &sha256);
 8010c46:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8010c4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010c4e:	4611      	mov	r1, r2
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fd f9e4 	bl	800e01e <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8010c56:	f107 000c 	add.w	r0, r7, #12
 8010c5a:	3004      	adds	r0, #4
 8010c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010c60:	f503 7145 	add.w	r1, r3, #788	@ 0x314
 8010c64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010c68:	2220      	movs	r2, #32
 8010c6a:	9200      	str	r2, [sp, #0]
 8010c6c:	2220      	movs	r2, #32
 8010c6e:	f7fd fb0e 	bl	800e28e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8010c72:	f107 010c 	add.w	r1, r7, #12
 8010c76:	2316      	movs	r3, #22
 8010c78:	2224      	movs	r2, #36	@ 0x24
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7ff f8c2 	bl	800fe04 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 8010c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010c84:	6819      	ldr	r1, [r3, #0]
 8010c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f7fa fb3e 	bl	800b310 <mg_io_send>
  wio->len = 0;
 8010c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010c98:	2200      	movs	r2, #0
 8010c9a:	609a      	str	r2, [r3, #8]

  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8010c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010ca0:	3320      	adds	r3, #32
 8010ca2:	f107 010c 	add.w	r1, r7, #12
 8010ca6:	2224      	movs	r2, #36	@ 0x24
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fd f97f 	bl	800dfac <mg_sha256_update>
}
 8010cae:	bf00      	nop
 8010cb0:	37c8      	adds	r7, #200	@ 0xc8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	08028e90 	.word	0x08028e90

08010cbc <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b0a0      	sub	sp, #128	@ 0x80
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8010ccc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010cce:	f107 0008 	add.w	r0, r7, #8
 8010cd2:	3320      	adds	r3, #32
 8010cd4:	2270      	movs	r2, #112	@ 0x70
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	f012 fdc9 	bl	802386e <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff f98d 	bl	800fffc <mg_tls_recv_record>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	da02      	bge.n	8010cee <mg_tls_server_recv_finish+0x32>
    return -1;
 8010ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cec:	e01f      	b.n	8010d2e <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010cf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8010cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b14      	cmp	r3, #20
 8010d00:	d009      	beq.n	8010d16 <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8010d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	461a      	mov	r2, r3
 8010d08:	490b      	ldr	r1, [pc, #44]	@ (8010d38 <mg_tls_server_recv_finish+0x7c>)
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7f1 fcbe 	bl	800268c <mg_error>
    return -1;
 8010d10:	f04f 33ff 	mov.w	r3, #4294967295
 8010d14:	e00b      	b.n	8010d2e <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7fe fd24 	bl	800f764 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8010d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010d1e:	3320      	adds	r3, #32
 8010d20:	f107 0108 	add.w	r1, r7, #8
 8010d24:	2270      	movs	r2, #112	@ 0x70
 8010d26:	4618      	mov	r0, r3
 8010d28:	f012 fda1 	bl	802386e <memcpy>
  return 0;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3780      	adds	r7, #128	@ 0x80
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	08028eb4 	.word	0x08028eb4

08010d3c <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8010d3c:	b5b0      	push	{r4, r5, r7, lr}
 8010d3e:	b0c4      	sub	sp, #272	@ 0x110
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d4a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010d4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010d5a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  struct mg_iobuf *wio = &tls->send;
 8010d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010d62:	3304      	adds	r3, #4
 8010d64:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  uint8_t x25519_pub[X25519_BYTES];

  // the only signature algorithm we actually support
  uint8_t secp256r1_sig_algs[8] = {
 8010d68:	4a28      	ldr	r2, [pc, #160]	@ (8010e0c <mg_tls_client_send_hello+0xd0>)
 8010d6a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8010d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d72:	e883 0003 	stmia.w	r3, {r0, r1}
      0x00, 0x0d, 0x00, 0x04, 0x00, 0x02, 0x04, 0x03,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8010d76:	4b26      	ldr	r3, [pc, #152]	@ (8010e10 <mg_tls_client_send_hello+0xd4>)
 8010d78:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8010d7c:	461d      	mov	r5, r3
 8010d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d86:	682b      	ldr	r3, [r5, #0]
 8010d88:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8010d8a:	4a22      	ldr	r2, [pc, #136]	@ (8010e14 <mg_tls_client_send_hello+0xd8>)
 8010d8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8010d90:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d92:	c303      	stmia	r3!, {r0, r1}
 8010d94:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8010d96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8010e18 <mg_tls_client_send_hello+0xdc>)
 8010da0:	4618      	mov	r0, r3
 8010da2:	4611      	mov	r1, r2
 8010da4:	2391      	movs	r3, #145	@ 0x91
 8010da6:	461a      	mov	r2, r3
 8010da8:	f012 fd61 	bl	802386e <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8010dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010db0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8010db4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  size_t hostnamesz = strlen(tls->hostname);
 8010db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010dbc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ef faed 	bl	80003a0 <strlen>
 8010dc6:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8010dca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <mg_tls_client_send_hello+0x9e>
 8010dd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010dd6:	3309      	adds	r3, #9
 8010dd8:	e000      	b.n	8010ddc <mg_tls_client_send_hello+0xa0>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 8010de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010de4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <mg_tls_client_send_hello+0xb6>
 8010dec:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8010df0:	e001      	b.n	8010df6 <mg_tls_client_send_hello+0xba>
 8010df2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8010df6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8010dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010dfe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00a      	beq.n	8010e1c <mg_tls_client_send_hello+0xe0>
 8010e06:	2322      	movs	r3, #34	@ 0x22
 8010e08:	e009      	b.n	8010e1e <mg_tls_client_send_hello+0xe2>
 8010e0a:	bf00      	nop
 8010e0c:	08028ed8 	.word	0x08028ed8
 8010e10:	08028ee0 	.word	0x08028ee0
 8010e14:	08028f04 	.word	0x08028f04
 8010e18:	08028f10 	.word	0x08028f10
 8010e1c:	2308      	movs	r3, #8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8010e1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8010e22:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8010e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e2a:	4413      	add	r3, r2
 8010e2c:	338c      	adds	r3, #140	@ 0x8c
 8010e2e:	0a1b      	lsrs	r3, r3, #8
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e3a:	70da      	strb	r2, [r3, #3]
 8010e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	4413      	add	r3, r2
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	3b74      	subs	r3, #116	@ 0x74
 8010e4e:	b2da      	uxtb	r2, r3
 8010e50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e58:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8010e5a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8010e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e62:	4413      	add	r3, r2
 8010e64:	3388      	adds	r3, #136	@ 0x88
 8010e66:	0a1b      	lsrs	r3, r3, #8
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e72:	71da      	strb	r2, [r3, #7]
 8010e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010e78:	b2da      	uxtb	r2, r3
 8010e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	4413      	add	r3, r2
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	3b78      	subs	r3, #120	@ 0x78
 8010e86:	b2da      	uxtb	r2, r3
 8010e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e90:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 8010e92:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8010e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e9a:	4413      	add	r3, r2
 8010e9c:	333d      	adds	r3, #61	@ 0x3d
 8010e9e:	0a1b      	lsrs	r3, r3, #8
 8010ea0:	b2da      	uxtb	r2, r3
 8010ea2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010eaa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8010eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	4413      	add	r3, r2
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	333d      	adds	r3, #61	@ 0x3d
 8010ec0:	b2da      	uxtb	r2, r3
 8010ec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010eca:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8010ece:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d026      	beq.n	8010f24 <mg_tls_client_send_hello+0x1e8>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 8010ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010eda:	3305      	adds	r3, #5
 8010edc:	0a1b      	lsrs	r3, r3, #8
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8010ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	3305      	adds	r3, #5
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 8010ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010ef6:	3303      	adds	r3, #3
 8010ef8:	0a1b      	lsrs	r3, r3, #8
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 8010f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	3303      	adds	r3, #3
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8010f0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010f12:	0a1b      	lsrs	r3, r3, #8
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8010f1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 8010f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010f28:	33d0      	adds	r3, #208	@ 0xd0
 8010f2a:	2120      	movs	r1, #32
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ef fe91 	bl	8000c54 <mg_random>
 8010f32:	4603      	mov	r3, r0
 8010f34:	f083 0301 	eor.w	r3, r3, #1
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d007      	beq.n	8010f4e <mg_tls_client_send_hello+0x212>
 8010f3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010f42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f46:	4974      	ldr	r1, [pc, #464]	@ (8011118 <mg_tls_client_send_hello+0x3dc>)
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f7f1 fb9f 	bl	800268c <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 8010f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010f52:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8010f56:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	4a6f      	ldr	r2, [pc, #444]	@ (801111c <mg_tls_client_send_hello+0x3e0>)
 8010f5e:	f006 f95d 	bl	801721c <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 8010f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010f66:	33b0      	adds	r3, #176	@ 0xb0
 8010f68:	2120      	movs	r1, #32
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7ef fe72 	bl	8000c54 <mg_random>
 8010f70:	4603      	mov	r3, r0
 8010f72:	f083 0301 	eor.w	r3, r3, #1
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d007      	beq.n	8010f8c <mg_tls_client_send_hello+0x250>
 8010f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010f80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f84:	4964      	ldr	r1, [pc, #400]	@ (8011118 <mg_tls_client_send_hello+0x3dc>)
 8010f86:	6818      	ldr	r0, [r3, #0]
 8010f88:	f7f1 fb80 	bl	800268c <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 8010f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010f90:	3390      	adds	r3, #144	@ 0x90
 8010f92:	2120      	movs	r1, #32
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ef fe5d 	bl	8000c54 <mg_random>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	f083 0301 	eor.w	r3, r3, #1
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d007      	beq.n	8010fb6 <mg_tls_client_send_hello+0x27a>
 8010fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010faa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010fae:	495a      	ldr	r1, [pc, #360]	@ (8011118 <mg_tls_client_send_hello+0x3dc>)
 8010fb0:	6818      	ldr	r0, [r3, #0]
 8010fb2:	f7f1 fb6b 	bl	800268c <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 8010fb6:	f107 0308 	add.w	r3, r7, #8
 8010fba:	330b      	adds	r3, #11
 8010fbc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8010fc0:	3290      	adds	r2, #144	@ 0x90
 8010fc2:	6815      	ldr	r5, [r2, #0]
 8010fc4:	6854      	ldr	r4, [r2, #4]
 8010fc6:	6890      	ldr	r0, [r2, #8]
 8010fc8:	68d1      	ldr	r1, [r2, #12]
 8010fca:	601d      	str	r5, [r3, #0]
 8010fcc:	605c      	str	r4, [r3, #4]
 8010fce:	6098      	str	r0, [r3, #8]
 8010fd0:	60d9      	str	r1, [r3, #12]
 8010fd2:	6915      	ldr	r5, [r2, #16]
 8010fd4:	6954      	ldr	r4, [r2, #20]
 8010fd6:	6990      	ldr	r0, [r2, #24]
 8010fd8:	69d1      	ldr	r1, [r2, #28]
 8010fda:	611d      	str	r5, [r3, #16]
 8010fdc:	615c      	str	r4, [r3, #20]
 8010fde:	6198      	str	r0, [r3, #24]
 8010fe0:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 8010fe2:	f107 0308 	add.w	r3, r7, #8
 8010fe6:	332c      	adds	r3, #44	@ 0x2c
 8010fe8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8010fec:	32b0      	adds	r2, #176	@ 0xb0
 8010fee:	6815      	ldr	r5, [r2, #0]
 8010ff0:	6854      	ldr	r4, [r2, #4]
 8010ff2:	6890      	ldr	r0, [r2, #8]
 8010ff4:	68d1      	ldr	r1, [r2, #12]
 8010ff6:	601d      	str	r5, [r3, #0]
 8010ff8:	605c      	str	r4, [r3, #4]
 8010ffa:	6098      	str	r0, [r3, #8]
 8010ffc:	60d9      	str	r1, [r3, #12]
 8010ffe:	6915      	ldr	r5, [r2, #16]
 8011000:	6954      	ldr	r4, [r2, #20]
 8011002:	6990      	ldr	r0, [r2, #24]
 8011004:	69d1      	ldr	r1, [r2, #28]
 8011006:	611d      	str	r5, [r3, #16]
 8011008:	615c      	str	r4, [r3, #20]
 801100a:	6198      	str	r0, [r3, #24]
 801100c:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 801100e:	f107 0308 	add.w	r3, r7, #8
 8011012:	335e      	adds	r3, #94	@ 0x5e
 8011014:	461d      	mov	r5, r3
 8011016:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 801101a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801101c:	6028      	str	r0, [r5, #0]
 801101e:	6069      	str	r1, [r5, #4]
 8011020:	60aa      	str	r2, [r5, #8]
 8011022:	60eb      	str	r3, [r5, #12]
 8011024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011026:	6128      	str	r0, [r5, #16]
 8011028:	6169      	str	r1, [r5, #20]
 801102a:	61aa      	str	r2, [r5, #24]
 801102c:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 801102e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8011032:	6899      	ldr	r1, [r3, #8]
 8011034:	f107 0208 	add.w	r2, r7, #8
 8011038:	2391      	movs	r3, #145	@ 0x91
 801103a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801103e:	f7f5 fecd 	bl	8006ddc <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 8011042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011046:	f103 0020 	add.w	r0, r3, #32
 801104a:	f107 0308 	add.w	r3, r7, #8
 801104e:	3305      	adds	r3, #5
 8011050:	228c      	movs	r2, #140	@ 0x8c
 8011052:	4619      	mov	r1, r3
 8011054:	f7fc ffaa 	bl	800dfac <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8011058:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801105c:	6899      	ldr	r1, [r3, #8]
 801105e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011062:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8011066:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801106a:	f7f5 feb7 	bl	8006ddc <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 801106e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011072:	3320      	adds	r3, #32
 8011074:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8011078:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 801107c:	4618      	mov	r0, r3
 801107e:	f7fc ff95 	bl	800dfac <mg_sha256_update>
  if (hostnamesz > 0) {
 8011082:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011086:	2b00      	cmp	r3, #0
 8011088:	d027      	beq.n	80110da <mg_tls_client_send_hello+0x39e>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 801108a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801108e:	6899      	ldr	r1, [r3, #8]
 8011090:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8011094:	2309      	movs	r3, #9
 8011096:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801109a:	f7f5 fe9f 	bl	8006ddc <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 801109e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80110a2:	6899      	ldr	r1, [r3, #8]
 80110a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80110a8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80110ac:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80110b0:	f7f5 fe94 	bl	8006ddc <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 80110b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80110b8:	3320      	adds	r3, #32
 80110ba:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80110be:	2209      	movs	r2, #9
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fc ff73 	bl	800dfac <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 80110c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80110ca:	3320      	adds	r3, #32
 80110cc:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80110d0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fc ff69 	bl	800dfac <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 80110da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80110de:	6899      	ldr	r1, [r3, #8]
 80110e0:	2306      	movs	r3, #6
 80110e2:	4a0f      	ldr	r2, [pc, #60]	@ (8011120 <mg_tls_client_send_hello+0x3e4>)
 80110e4:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80110e8:	f7f5 fe78 	bl	8006ddc <mg_iobuf_add>
  mg_io_send(c, wio->buf, wio->len);
 80110ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80110f0:	6819      	ldr	r1, [r3, #0]
 80110f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80110f6:	689a      	ldr	r2, [r3, #8]
 80110f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80110fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011100:	6818      	ldr	r0, [r3, #0]
 8011102:	f7fa f905 	bl	800b310 <mg_io_send>
  wio->len = 0;
 8011106:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801110a:	2200      	movs	r2, #0
 801110c:	609a      	str	r2, [r3, #8]
}
 801110e:	bf00      	nop
 8011110:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8011114:	46bd      	mov	sp, r7
 8011116:	bdb0      	pop	{r4, r5, r7, pc}
 8011118:	08028dcc 	.word	0x08028dcc
 801111c:	0802a638 	.word	0x0802a638
 8011120:	08028de8 	.word	0x08028de8

08011124 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 8011124:	b580      	push	{r7, lr}
 8011126:	b08a      	sub	sp, #40	@ 0x28
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011132:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	3368      	adds	r3, #104	@ 0x68
 8011138:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7fe fac9 	bl	800f6d2 <mg_tls_got_record>
 8011140:	4603      	mov	r3, r0
 8011142:	f083 0301 	eor.w	r3, r3, #1
 8011146:	b2db      	uxtb	r3, r3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d002      	beq.n	8011152 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 801114c:	f06f 0301 	mvn.w	r3, #1
 8011150:	e103      	b.n	801135a <mg_tls_client_recv_hello+0x236>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	2b16      	cmp	r3, #22
 801115a:	d105      	bne.n	8011168 <mg_tls_client_recv_hello+0x44>
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	3305      	adds	r3, #5
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	2b02      	cmp	r3, #2
 8011166:	d032      	beq.n	80111ce <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	2b15      	cmp	r3, #21
 8011170:	d10f      	bne.n	8011192 <mg_tls_client_recv_hello+0x6e>
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	2b06      	cmp	r3, #6
 8011178:	d90b      	bls.n	8011192 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3306      	adds	r3, #6
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	461a      	mov	r2, r3
 8011184:	4977      	ldr	r1, [pc, #476]	@ (8011364 <mg_tls_client_recv_hello+0x240>)
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7f1 fa80 	bl	800268c <mg_error>
      return -1;
 801118c:	f04f 33ff 	mov.w	r3, #4294967295
 8011190:	e0e3      	b.n	801135a <mg_tls_client_recv_hello+0x236>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 8011192:	4b75      	ldr	r3, [pc, #468]	@ (8011368 <mg_tls_client_recv_hello+0x244>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b01      	cmp	r3, #1
 8011198:	dd12      	ble.n	80111c0 <mg_tls_client_recv_hello+0x9c>
 801119a:	4b74      	ldr	r3, [pc, #464]	@ (801136c <mg_tls_client_recv_hello+0x248>)
 801119c:	f642 1256 	movw	r2, #10582	@ 0x2956
 80111a0:	4973      	ldr	r1, [pc, #460]	@ (8011370 <mg_tls_client_recv_hello+0x24c>)
 80111a2:	2002      	movs	r0, #2
 80111a4:	f7f6 fd5c 	bl	8007c60 <mg_log_prefix>
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	4619      	mov	r1, r3
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	3305      	adds	r3, #5
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	461a      	mov	r2, r3
 80111ba:	486e      	ldr	r0, [pc, #440]	@ (8011374 <mg_tls_client_recv_hello+0x250>)
 80111bc:	f7f6 fda0 	bl	8007d00 <mg_log>
    mg_error(c, "not a server hello packet");
 80111c0:	496d      	ldr	r1, [pc, #436]	@ (8011378 <mg_tls_client_recv_hello+0x254>)
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f7f1 fa62 	bl	800268c <mg_error>
    return -1;
 80111c8:	f04f 33ff 	mov.w	r3, #4294967295
 80111cc:	e0c5      	b.n	801135a <mg_tls_client_recv_hello+0x236>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	3303      	adds	r3, #3
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	021b      	lsls	r3, r3, #8
 80111d8:	b21a      	sxth	r2, r3
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	3304      	adds	r3, #4
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	b21b      	sxth	r3, r3
 80111e4:	4313      	orrs	r3, r2
 80111e6:	b21b      	sxth	r3, r3
 80111e8:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80111ea:	6a3b      	ldr	r3, [r7, #32]
 80111ec:	f103 0020 	add.w	r0, r3, #32
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3305      	adds	r3, #5
 80111f6:	8b7a      	ldrh	r2, [r7, #26]
 80111f8:	4619      	mov	r1, r3
 80111fa:	f7fc fed7 	bl	800dfac <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	334f      	adds	r3, #79	@ 0x4f
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	021b      	lsls	r3, r3, #8
 8011208:	b21a      	sxth	r2, r3
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	3350      	adds	r3, #80	@ 0x50
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	b21b      	sxth	r3, r3
 8011214:	4313      	orrs	r3, r2
 8011216:	b21b      	sxth	r3, r3
 8011218:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	3351      	adds	r3, #81	@ 0x51
 8011220:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8011222:	8b3a      	ldrh	r2, [r7, #24]
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	3b51      	subs	r3, #81	@ 0x51
 801122a:	429a      	cmp	r2, r3
 801122c:	f200 808c 	bhi.w	8011348 <mg_tls_client_recv_hello+0x224>

  for (j = 0; j < ext_len;) {
 8011230:	2300      	movs	r3, #0
 8011232:	627b      	str	r3, [r7, #36]	@ 0x24
 8011234:	e082      	b.n	801133c <mg_tls_client_recv_hello+0x218>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 8011236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011238:	697a      	ldr	r2, [r7, #20]
 801123a:	4413      	add	r3, r2
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	021b      	lsls	r3, r3, #8
 8011240:	b21a      	sxth	r2, r3
 8011242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011244:	3301      	adds	r3, #1
 8011246:	6979      	ldr	r1, [r7, #20]
 8011248:	440b      	add	r3, r1
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	b21b      	sxth	r3, r3
 801124e:	4313      	orrs	r3, r2
 8011250:	b21b      	sxth	r3, r3
 8011252:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 8011254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011256:	3302      	adds	r3, #2
 8011258:	697a      	ldr	r2, [r7, #20]
 801125a:	4413      	add	r3, r2
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	021b      	lsls	r3, r3, #8
 8011260:	b21a      	sxth	r2, r3
 8011262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011264:	3303      	adds	r3, #3
 8011266:	6979      	ldr	r1, [r7, #20]
 8011268:	440b      	add	r3, r1
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	b21b      	sxth	r3, r3
 801126e:	4313      	orrs	r3, r2
 8011270:	b21b      	sxth	r3, r3
 8011272:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8011274:	8b3a      	ldrh	r2, [r7, #24]
 8011276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	1eda      	subs	r2, r3, #3
 801127c:	8a3b      	ldrh	r3, [r7, #16]
 801127e:	429a      	cmp	r2, r3
 8011280:	dd64      	ble.n	801134c <mg_tls_client_recv_hello+0x228>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 8011282:	8a7b      	ldrh	r3, [r7, #18]
 8011284:	2b33      	cmp	r3, #51	@ 0x33
 8011286:	d007      	beq.n	8011298 <mg_tls_client_recv_hello+0x174>
      j += (uint16_t) (ext_len2 + 4);
 8011288:	8a3b      	ldrh	r3, [r7, #16]
 801128a:	3304      	adds	r3, #4
 801128c:	b29b      	uxth	r3, r3
 801128e:	461a      	mov	r2, r3
 8011290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011292:	4413      	add	r3, r2
 8011294:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8011296:	e051      	b.n	801133c <mg_tls_client_recv_hello+0x218>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8011298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801129a:	3304      	adds	r3, #4
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	4413      	add	r3, r2
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	021b      	lsls	r3, r3, #8
 80112a4:	b21a      	sxth	r2, r3
 80112a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a8:	3305      	adds	r3, #5
 80112aa:	6979      	ldr	r1, [r7, #20]
 80112ac:	440b      	add	r3, r1
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	b21b      	sxth	r3, r3
 80112b2:	4313      	orrs	r3, r2
 80112b4:	b21b      	sxth	r3, r3
 80112b6:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 80112b8:	89fb      	ldrh	r3, [r7, #14]
 80112ba:	2b1d      	cmp	r3, #29
 80112bc:	d006      	beq.n	80112cc <mg_tls_client_recv_hello+0x1a8>
      mg_error(c, "bad key exchange group");
 80112be:	492f      	ldr	r1, [pc, #188]	@ (801137c <mg_tls_client_recv_hello+0x258>)
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7f1 f9e3 	bl	800268c <mg_error>
      return -1;
 80112c6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ca:	e046      	b.n	801135a <mg_tls_client_recv_hello+0x236>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 80112cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ce:	3306      	adds	r3, #6
 80112d0:	697a      	ldr	r2, [r7, #20]
 80112d2:	4413      	add	r3, r2
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	021b      	lsls	r3, r3, #8
 80112d8:	b21a      	sxth	r2, r3
 80112da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112dc:	3307      	adds	r3, #7
 80112de:	6979      	ldr	r1, [r7, #20]
 80112e0:	440b      	add	r3, r1
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	b21b      	sxth	r3, r3
 80112e6:	4313      	orrs	r3, r2
 80112e8:	b21b      	sxth	r3, r3
 80112ea:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 80112ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ee:	3308      	adds	r3, #8
 80112f0:	697a      	ldr	r2, [r7, #20]
 80112f2:	4413      	add	r3, r2
 80112f4:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 80112f6:	89bb      	ldrh	r3, [r7, #12]
 80112f8:	2b20      	cmp	r3, #32
 80112fa:	d006      	beq.n	801130a <mg_tls_client_recv_hello+0x1e6>
      mg_error(c, "bad key exchange length");
 80112fc:	4920      	ldr	r1, [pc, #128]	@ (8011380 <mg_tls_client_recv_hello+0x25c>)
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7f1 f9c4 	bl	800268c <mg_error>
      return -1;
 8011304:	f04f 33ff 	mov.w	r3, #4294967295
 8011308:	e027      	b.n	801135a <mg_tls_client_recv_hello+0x236>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 801130a:	6a3b      	ldr	r3, [r7, #32]
 801130c:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8011310:	6a3b      	ldr	r3, [r7, #32]
 8011312:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8011316:	2301      	movs	r3, #1
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	f005 ff7f 	bl	801721c <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 801131e:	6a3b      	ldr	r3, [r7, #32]
 8011320:	33f0      	adds	r3, #240	@ 0xf0
 8011322:	2220      	movs	r2, #32
 8011324:	4619      	mov	r1, r3
 8011326:	4817      	ldr	r0, [pc, #92]	@ (8011384 <mg_tls_client_recv_hello+0x260>)
 8011328:	f7fe f8e8 	bl	800f4fc <mg_tls_hexdump>
    mg_tls_drop_record(c);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7fe f9f7 	bl	800f720 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f7fe fafe 	bl	800f934 <mg_tls_generate_handshake_keys>
    return 0;
 8011338:	2300      	movs	r3, #0
 801133a:	e00e      	b.n	801135a <mg_tls_client_recv_hello+0x236>
  for (j = 0; j < ext_len;) {
 801133c:	8b3b      	ldrh	r3, [r7, #24]
 801133e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011340:	429a      	cmp	r2, r3
 8011342:	f6ff af78 	blt.w	8011236 <mg_tls_client_recv_hello+0x112>
  }
fail:
 8011346:	e002      	b.n	801134e <mg_tls_client_recv_hello+0x22a>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8011348:	bf00      	nop
 801134a:	e000      	b.n	801134e <mg_tls_client_recv_hello+0x22a>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801134c:	bf00      	nop
  mg_error(c, "bad client hello");
 801134e:	490e      	ldr	r1, [pc, #56]	@ (8011388 <mg_tls_client_recv_hello+0x264>)
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7f1 f99b 	bl	800268c <mg_error>
  return -1;
 8011356:	f04f 33ff 	mov.w	r3, #4294967295
}
 801135a:	4618      	mov	r0, r3
 801135c:	3728      	adds	r7, #40	@ 0x28
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	08028fa4 	.word	0x08028fa4
 8011368:	24000240 	.word	0x24000240
 801136c:	0802a950 	.word	0x0802a950
 8011370:	08027148 	.word	0x08027148
 8011374:	08028fb4 	.word	0x08028fb4
 8011378:	08028fd4 	.word	0x08028fd4
 801137c:	08028ff0 	.word	0x08028ff0
 8011380:	08029008 	.word	0x08029008
 8011384:	08029020 	.word	0x08029020
 8011388:	08028db8 	.word	0x08028db8

0801138c <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801139a:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f7fe fe2d 	bl	800fffc <mg_tls_recv_record>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	da02      	bge.n	80113ae <mg_tls_client_recv_ext+0x22>
    return -1;
 80113a8:	f04f 33ff 	mov.w	r3, #4294967295
 80113ac:	e017      	b.n	80113de <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	4413      	add	r3, r2
 80113b8:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	2b08      	cmp	r3, #8
 80113c0:	d009      	beq.n	80113d6 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	461a      	mov	r2, r3
 80113c8:	4907      	ldr	r1, [pc, #28]	@ (80113e8 <mg_tls_client_recv_ext+0x5c>)
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7f1 f95e 	bl	800268c <mg_error>
    return -1;
 80113d0:	f04f 33ff 	mov.w	r3, #4294967295
 80113d4:	e003      	b.n	80113de <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7fe f9c4 	bl	800f764 <mg_tls_drop_message>
  return 0;
 80113dc:	2300      	movs	r3, #0
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3710      	adds	r7, #16
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	08029030 	.word	0x08029030

080113ec <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b09a      	sub	sp, #104	@ 0x68
 80113f0:	af02      	add	r7, sp, #8
 80113f2:	6078      	str	r0, [r7, #4]
  uint8_t *cert;
  uint32_t certsz;
  struct mg_der_tlv oid, pubkey, seq, subj;
  int subj_match = 0;
 80113f4:	2300      	movs	r3, #0
 80113f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  struct tls_data *tls = (struct tls_data *) c->tls;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80113fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fe fdfb 	bl	800fffc <mg_tls_recv_record>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	da02      	bge.n	8011412 <mg_tls_client_recv_cert+0x26>
    return -1;
 801140c:	f04f 33ff 	mov.w	r3, #4294967295
 8011410:	e191      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011418:	695b      	ldr	r3, [r3, #20]
 801141a:	4413      	add	r3, r2
 801141c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 801141e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	2b0d      	cmp	r3, #13
 8011424:	d117      	bne.n	8011456 <mg_tls_client_recv_cert+0x6a>
    MG_VERBOSE(("got certificate request"));
 8011426:	4b9f      	ldr	r3, [pc, #636]	@ (80116a4 <mg_tls_client_recv_cert+0x2b8>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2b03      	cmp	r3, #3
 801142c:	dd09      	ble.n	8011442 <mg_tls_client_recv_cert+0x56>
 801142e:	4b9e      	ldr	r3, [pc, #632]	@ (80116a8 <mg_tls_client_recv_cert+0x2bc>)
 8011430:	f642 129f 	movw	r2, #10655	@ 0x299f
 8011434:	499d      	ldr	r1, [pc, #628]	@ (80116ac <mg_tls_client_recv_cert+0x2c0>)
 8011436:	2004      	movs	r0, #4
 8011438:	f7f6 fc12 	bl	8007c60 <mg_log_prefix>
 801143c:	489c      	ldr	r0, [pc, #624]	@ (80116b0 <mg_tls_client_recv_cert+0x2c4>)
 801143e:	f7f6 fc5f 	bl	8007d00 <mg_log>
    mg_tls_drop_message(c);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f7fe f98e 	bl	800f764 <mg_tls_drop_message>
    tls->cert_requested = 1;
 8011448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801144a:	2201      	movs	r2, #1
 801144c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 8011450:	f04f 33ff 	mov.w	r3, #4294967295
 8011454:	e16f      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
  }
  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 8011456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b0b      	cmp	r3, #11
 801145c:	d009      	beq.n	8011472 <mg_tls_client_recv_cert+0x86>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 801145e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	461a      	mov	r2, r3
 8011464:	4993      	ldr	r1, [pc, #588]	@ (80116b4 <mg_tls_client_recv_cert+0x2c8>)
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7f1 f910 	bl	800268c <mg_error>
    return -1;
 801146c:	f04f 33ff 	mov.w	r3, #4294967295
 8011470:	e161      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
  }
  if (tls->skip_verification) {
 8011472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011474:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011478:	2b00      	cmp	r3, #0
 801147a:	d004      	beq.n	8011486 <mg_tls_client_recv_cert+0x9a>
    mg_tls_drop_message(c);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7fe f971 	bl	800f764 <mg_tls_drop_message>
    return 0;
 8011482:	2300      	movs	r3, #0
 8011484:	e157      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
  }

  if (tls->recv_len < 11) {
 8011486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011488:	699b      	ldr	r3, [r3, #24]
 801148a:	2b0a      	cmp	r3, #10
 801148c:	d806      	bhi.n	801149c <mg_tls_client_recv_cert+0xb0>
    mg_error(c, "certificate list too short");
 801148e:	498a      	ldr	r1, [pc, #552]	@ (80116b8 <mg_tls_client_recv_cert+0x2cc>)
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7f1 f8fb 	bl	800268c <mg_error>
    return -1;
 8011496:	f04f 33ff 	mov.w	r3, #4294967295
 801149a:	e14c      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
  }

  cert = recv_buf + 11;
 801149c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801149e:	330b      	adds	r3, #11
 80114a0:	653b      	str	r3, [r7, #80]	@ 0x50
  certsz = MG_LOAD_BE24(recv_buf + 8);
 80114a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114a4:	3308      	adds	r3, #8
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	041a      	lsls	r2, r3, #16
 80114aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114ac:	3309      	adds	r3, #9
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	021b      	lsls	r3, r3, #8
 80114b2:	4313      	orrs	r3, r2
 80114b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80114b6:	320a      	adds	r2, #10
 80114b8:	7812      	ldrb	r2, [r2, #0]
 80114ba:	4313      	orrs	r3, r2
 80114bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (certsz > tls->recv_len - 11) {
 80114be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114c0:	699b      	ldr	r3, [r3, #24]
 80114c2:	3b0b      	subs	r3, #11
 80114c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d90a      	bls.n	80114e0 <mg_tls_client_recv_cert+0xf4>
    mg_error(c, "certificate too long: %d vs %d", certsz, tls->recv_len - 11);
 80114ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114cc:	699b      	ldr	r3, [r3, #24]
 80114ce:	3b0b      	subs	r3, #11
 80114d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114d2:	497a      	ldr	r1, [pc, #488]	@ (80116bc <mg_tls_client_recv_cert+0x2d0>)
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f7f1 f8d9 	bl	800268c <mg_error>
    return -1;
 80114da:	f04f 33ff 	mov.w	r3, #4294967295
 80114de:	e12a      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
  }

  do {
    // secp256r1 public key
    if (mg_der_find(cert, certsz,
 80114e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	2308      	movs	r3, #8
 80114e8:	4a75      	ldr	r2, [pc, #468]	@ (80116c0 <mg_tls_client_recv_cert+0x2d4>)
 80114ea:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80114ec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80114ee:	f7fe f881 	bl	800f5f4 <mg_der_find>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	da06      	bge.n	8011506 <mg_tls_client_recv_cert+0x11a>
                    (uint8_t *) "\x2A\x86\x48\xCE\x3D\x03\x01\x07", 8,
                    &oid) < 0) {
      mg_error(c, "certificate secp256r1 public key OID not found");
 80114f8:	4972      	ldr	r1, [pc, #456]	@ (80116c4 <mg_tls_client_recv_cert+0x2d8>)
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f7f1 f8c6 	bl	800268c <mg_error>
      return -1;
 8011500:	f04f 33ff 	mov.w	r3, #4294967295
 8011504:	e117      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 8011506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801150a:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 801150c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801150e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011510:	441a      	add	r2, r3
 8011512:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011516:	440b      	add	r3, r1
 8011518:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 801151a:	4619      	mov	r1, r3
 801151c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011520:	461a      	mov	r2, r3
 8011522:	f7fe f813 	bl	800f54c <mg_der_to_tlv>
 8011526:	4603      	mov	r3, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	da06      	bge.n	801153a <mg_tls_client_recv_cert+0x14e>
                      &pubkey) < 0) {
      mg_error(c, "certificate secp256r1 public key not found");
 801152c:	4966      	ldr	r1, [pc, #408]	@ (80116c8 <mg_tls_client_recv_cert+0x2dc>)
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7f1 f8ac 	bl	800268c <mg_error>
      return -1;
 8011534:	f04f 33ff 	mov.w	r3, #4294967295
 8011538:	e0fd      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }

    // expect BIT STRING, unpadded, uncompressed: [0]+[4]+32+32 content bytes
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 801153a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801153e:	2b03      	cmp	r3, #3
 8011540:	d10b      	bne.n	801155a <mg_tls_client_recv_cert+0x16e>
 8011542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011544:	2b42      	cmp	r3, #66	@ 0x42
 8011546:	d108      	bne.n	801155a <mg_tls_client_recv_cert+0x16e>
 8011548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d104      	bne.n	801155a <mg_tls_client_recv_cert+0x16e>
        pubkey.value[1] != 4) {
 8011550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011552:	3301      	adds	r3, #1
 8011554:	781b      	ldrb	r3, [r3, #0]
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 8011556:	2b04      	cmp	r3, #4
 8011558:	d006      	beq.n	8011568 <mg_tls_client_recv_cert+0x17c>
      mg_error(c, "unsupported public key bitstring encoding");
 801155a:	495c      	ldr	r1, [pc, #368]	@ (80116cc <mg_tls_client_recv_cert+0x2e0>)
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f7f1 f895 	bl	800268c <mg_error>
      return -1;
 8011562:	f04f 33ff 	mov.w	r3, #4294967295
 8011566:	e0e6      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }
    memmove(tls->pubkey, pubkey.value + 2, pubkey.len - 2);
 8011568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801156a:	f203 205e 	addw	r0, r3, #606	@ 0x25e
 801156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011570:	1c99      	adds	r1, r3, #2
 8011572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011574:	3b02      	subs	r3, #2
 8011576:	461a      	mov	r2, r3
 8011578:	f012 f86a 	bl	8023650 <memmove>
  } while (0);

  // Subject Alternative Names
  do {
    if (mg_der_find(cert, certsz, (uint8_t *) "\x55\x1d\x11", 3, &oid) < 0) {
 801157c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011580:	9300      	str	r3, [sp, #0]
 8011582:	2303      	movs	r3, #3
 8011584:	4a52      	ldr	r2, [pc, #328]	@ (80116d0 <mg_tls_client_recv_cert+0x2e4>)
 8011586:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011588:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801158a:	f7fe f833 	bl	800f5f4 <mg_der_find>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	da06      	bge.n	80115a2 <mg_tls_client_recv_cert+0x1b6>
      mg_error(c, "certificate does not contain subject alternative names");
 8011594:	494f      	ldr	r1, [pc, #316]	@ (80116d4 <mg_tls_client_recv_cert+0x2e8>)
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7f1 f878 	bl	800268c <mg_error>
      return -1;
 801159c:	f04f 33ff 	mov.w	r3, #4294967295
 80115a0:	e0c9      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 80115a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115a6:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 80115a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115ac:	441a      	add	r2, r3
 80115ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80115b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115b2:	440b      	add	r3, r1
 80115b4:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 80115b6:	4619      	mov	r1, r3
 80115b8:	f107 0318 	add.w	r3, r7, #24
 80115bc:	461a      	mov	r2, r3
 80115be:	f7fd ffc5 	bl	800f54c <mg_der_to_tlv>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	da06      	bge.n	80115d6 <mg_tls_client_recv_cert+0x1ea>
                      &seq) < 0) {
      mg_error(c, "certificate subject alternative names not found");
 80115c8:	4943      	ldr	r1, [pc, #268]	@ (80116d8 <mg_tls_client_recv_cert+0x2ec>)
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f7f1 f85e 	bl	800268c <mg_error>
      return -1;
 80115d0:	f04f 33ff 	mov.w	r3, #4294967295
 80115d4:	e0af      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &seq) < 0) {
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	69f9      	ldr	r1, [r7, #28]
 80115da:	f107 0218 	add.w	r2, r7, #24
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fd ffb4 	bl	800f54c <mg_der_to_tlv>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	da06      	bge.n	80115f8 <mg_tls_client_recv_cert+0x20c>
      mg_error(
 80115ea:	493c      	ldr	r1, [pc, #240]	@ (80116dc <mg_tls_client_recv_cert+0x2f0>)
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7f1 f84d 	bl	800268c <mg_error>
          c,
          "certificate subject alternative names is not a constructed object");
      return -1;
 80115f2:	f04f 33ff 	mov.w	r3, #4294967295
 80115f6:	e09e      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }
    MG_VERBOSE(("verify hostname %s", tls->hostname));
 80115f8:	4b2a      	ldr	r3, [pc, #168]	@ (80116a4 <mg_tls_client_recv_cert+0x2b8>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b03      	cmp	r3, #3
 80115fe:	f340 8081 	ble.w	8011704 <mg_tls_client_recv_cert+0x318>
 8011602:	4b29      	ldr	r3, [pc, #164]	@ (80116a8 <mg_tls_client_recv_cert+0x2bc>)
 8011604:	f642 12e3 	movw	r2, #10723	@ 0x29e3
 8011608:	4928      	ldr	r1, [pc, #160]	@ (80116ac <mg_tls_client_recv_cert+0x2c0>)
 801160a:	2004      	movs	r0, #4
 801160c:	f7f6 fb28 	bl	8007c60 <mg_log_prefix>
 8011610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011612:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8011616:	4619      	mov	r1, r3
 8011618:	4831      	ldr	r0, [pc, #196]	@ (80116e0 <mg_tls_client_recv_cert+0x2f4>)
 801161a:	f7f6 fb71 	bl	8007d00 <mg_log>
    while (seq.len > 0) {
 801161e:	e071      	b.n	8011704 <mg_tls_client_recv_cert+0x318>
      if (mg_der_to_tlv(seq.value, seq.len, &subj) < 0) {
 8011620:	6a3b      	ldr	r3, [r7, #32]
 8011622:	69f9      	ldr	r1, [r7, #28]
 8011624:	f107 020c 	add.w	r2, r7, #12
 8011628:	4618      	mov	r0, r3
 801162a:	f7fd ff8f 	bl	800f54c <mg_der_to_tlv>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	da06      	bge.n	8011642 <mg_tls_client_recv_cert+0x256>
        mg_error(c, "bad subject alternative name");
 8011634:	492b      	ldr	r1, [pc, #172]	@ (80116e4 <mg_tls_client_recv_cert+0x2f8>)
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7f1 f828 	bl	800268c <mg_error>
        return -1;
 801163c:	f04f 33ff 	mov.w	r3, #4294967295
 8011640:	e079      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
      }
      MG_VERBOSE(("subj=%.*s", subj.len, subj.value));
 8011642:	4b18      	ldr	r3, [pc, #96]	@ (80116a4 <mg_tls_client_recv_cert+0x2b8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b03      	cmp	r3, #3
 8011648:	dd0c      	ble.n	8011664 <mg_tls_client_recv_cert+0x278>
 801164a:	4b17      	ldr	r3, [pc, #92]	@ (80116a8 <mg_tls_client_recv_cert+0x2bc>)
 801164c:	f642 12e9 	movw	r2, #10729	@ 0x29e9
 8011650:	4916      	ldr	r1, [pc, #88]	@ (80116ac <mg_tls_client_recv_cert+0x2c0>)
 8011652:	2004      	movs	r0, #4
 8011654:	f7f6 fb04 	bl	8007c60 <mg_log_prefix>
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	697a      	ldr	r2, [r7, #20]
 801165c:	4619      	mov	r1, r3
 801165e:	4822      	ldr	r0, [pc, #136]	@ (80116e8 <mg_tls_client_recv_cert+0x2fc>)
 8011660:	f7f6 fb4e 	bl	8007d00 <mg_log>
      if (mg_match(mg_str((const char *) tls->hostname),
 8011664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011666:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 801166a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801166e:	4611      	mov	r1, r2
 8011670:	4618      	mov	r0, r3
 8011672:	f7fd f9bd 	bl	800e9f0 <mg_str_s>
                   mg_str_n((const char *) subj.value, subj.len), NULL)) {
 8011676:	6979      	ldr	r1, [r7, #20]
 8011678:	693a      	ldr	r2, [r7, #16]
      if (mg_match(mg_str((const char *) tls->hostname),
 801167a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801167e:	4618      	mov	r0, r3
 8011680:	f7fd f9d3 	bl	800ea2a <mg_str_n>
 8011684:	2300      	movs	r3, #0
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801168c:	cb0c      	ldmia	r3, {r2, r3}
 801168e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8011692:	c903      	ldmia	r1, {r0, r1}
 8011694:	f7fd fab6 	bl	800ec04 <mg_match>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d026      	beq.n	80116ec <mg_tls_client_recv_cert+0x300>
        subj_match = 1;
 801169e:	2301      	movs	r3, #1
 80116a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
        break;
 80116a2:	e032      	b.n	801170a <mg_tls_client_recv_cert+0x31e>
 80116a4:	24000240 	.word	0x24000240
 80116a8:	0802a96c 	.word	0x0802a96c
 80116ac:	08027148 	.word	0x08027148
 80116b0:	08029060 	.word	0x08029060
 80116b4:	08029078 	.word	0x08029078
 80116b8:	080290a8 	.word	0x080290a8
 80116bc:	080290c4 	.word	0x080290c4
 80116c0:	080290e4 	.word	0x080290e4
 80116c4:	080290f0 	.word	0x080290f0
 80116c8:	08029120 	.word	0x08029120
 80116cc:	0802914c 	.word	0x0802914c
 80116d0:	08029178 	.word	0x08029178
 80116d4:	0802917c 	.word	0x0802917c
 80116d8:	080291b4 	.word	0x080291b4
 80116dc:	080291e4 	.word	0x080291e4
 80116e0:	08029228 	.word	0x08029228
 80116e4:	0802923c 	.word	0x0802923c
 80116e8:	0802925c 	.word	0x0802925c
      }
      seq.len = (uint32_t) (seq.value + seq.len - (subj.value + subj.len));
 80116ec:	6a3a      	ldr	r2, [r7, #32]
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	441a      	add	r2, r3
 80116f2:	6979      	ldr	r1, [r7, #20]
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	440b      	add	r3, r1
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	61fb      	str	r3, [r7, #28]
      seq.value = subj.value + subj.len;
 80116fc:	697a      	ldr	r2, [r7, #20]
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	4413      	add	r3, r2
 8011702:	623b      	str	r3, [r7, #32]
    while (seq.len > 0) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d18a      	bne.n	8011620 <mg_tls_client_recv_cert+0x234>
    }
    if (!subj_match) {
 801170a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801170c:	2b00      	cmp	r3, #0
 801170e:	d106      	bne.n	801171e <mg_tls_client_recv_cert+0x332>
      mg_error(c, "certificate did not match the hostname");
 8011710:	490b      	ldr	r1, [pc, #44]	@ (8011740 <mg_tls_client_recv_cert+0x354>)
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7f0 ffba 	bl	800268c <mg_error>
      return -1;
 8011718:	f04f 33ff 	mov.w	r3, #4294967295
 801171c:	e00b      	b.n	8011736 <mg_tls_client_recv_cert+0x34a>
    }
  } while (0);

  mg_tls_drop_message(c);
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f7fe f820 	bl	800f764 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 8011724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011726:	f203 239e 	addw	r3, r3, #670	@ 0x29e
 801172a:	2200      	movs	r2, #0
 801172c:	4619      	mov	r1, r3
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f7fe fd72 	bl	8010218 <mg_tls_calc_cert_verify_hash>
  return 0;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3760      	adds	r7, #96	@ 0x60
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	08029268 	.word	0x08029268

08011744 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 8011744:	b5b0      	push	{r4, r5, r7, lr}
 8011746:	b0a0      	sub	sp, #128	@ 0x80
 8011748:	af02      	add	r7, sp, #8
 801174a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011752:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f7fe fc51 	bl	800fffc <mg_tls_recv_record>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	da02      	bge.n	8011766 <mg_tls_client_recv_cert_verify+0x22>
    return -1;
 8011760:	f04f 33ff 	mov.w	r3, #4294967295
 8011764:	e09a      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801176a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801176c:	695b      	ldr	r3, [r3, #20]
 801176e:	4413      	add	r3, r2
 8011770:	673b      	str	r3, [r7, #112]	@ 0x70
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8011772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	2b0f      	cmp	r3, #15
 8011778:	d009      	beq.n	801178e <mg_tls_client_recv_cert_verify+0x4a>
    mg_error(c, "expected server certificate verify but got msg 0x%02x", recv_buf[0]);
 801177a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	461a      	mov	r2, r3
 8011780:	4948      	ldr	r1, [pc, #288]	@ (80118a4 <mg_tls_client_recv_cert_verify+0x160>)
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f7f0 ff82 	bl	800268c <mg_error>
    return -1;
 8011788:	f04f 33ff 	mov.w	r3, #4294967295
 801178c:	e086      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>
  }
  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 801178e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011790:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011794:	2b00      	cmp	r3, #0
 8011796:	d004      	beq.n	80117a2 <mg_tls_client_recv_cert_verify+0x5e>
    mg_tls_drop_message(c);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7fd ffe3 	bl	800f764 <mg_tls_drop_message>
    return 0;
 801179e:	2300      	movs	r3, #0
 80117a0:	e07c      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>

  // Extract certificate signature and verify it using pubkey and sighash
  do {
    uint8_t sig[64];
    struct mg_der_tlv seq, a, b;
    if (mg_der_to_tlv(recv_buf + 8, tls->recv_len - 8, &seq) < 0) {
 80117a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117a4:	f103 0008 	add.w	r0, r3, #8
 80117a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117aa:	699b      	ldr	r3, [r3, #24]
 80117ac:	3b08      	subs	r3, #8
 80117ae:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80117b2:	4619      	mov	r1, r3
 80117b4:	f7fd feca 	bl	800f54c <mg_der_to_tlv>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	da06      	bge.n	80117cc <mg_tls_client_recv_cert_verify+0x88>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 80117be:	493a      	ldr	r1, [pc, #232]	@ (80118a8 <mg_tls_client_recv_cert_verify+0x164>)
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f7f0 ff63 	bl	800268c <mg_error>
      return -1;
 80117c6:	f04f 33ff 	mov.w	r3, #4294967295
 80117ca:	e067      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &a) < 0) {
 80117cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80117d0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7fd feb9 	bl	800f54c <mg_der_to_tlv>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	da06      	bge.n	80117ee <mg_tls_client_recv_cert_verify+0xaa>
      mg_error(c, "missing first part of the signature");
 80117e0:	4932      	ldr	r1, [pc, #200]	@ (80118ac <mg_tls_client_recv_cert_verify+0x168>)
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7f0 ff52 	bl	800268c <mg_error>
      return -1;
 80117e8:	f04f 33ff 	mov.w	r3, #4294967295
 80117ec:	e056      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(a.value + a.len, seq.len - a.len, &b) < 0) {
 80117ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80117f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117f2:	18d0      	adds	r0, r2, r3
 80117f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80117f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80117fe:	4619      	mov	r1, r3
 8011800:	f7fd fea4 	bl	800f54c <mg_der_to_tlv>
 8011804:	4603      	mov	r3, r0
 8011806:	2b00      	cmp	r3, #0
 8011808:	da06      	bge.n	8011818 <mg_tls_client_recv_cert_verify+0xd4>
      mg_error(c, "missing second part of the signature");
 801180a:	4929      	ldr	r1, [pc, #164]	@ (80118b0 <mg_tls_client_recv_cert_verify+0x16c>)
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7f0 ff3d 	bl	800268c <mg_error>
      return -1;
 8011812:	f04f 33ff 	mov.w	r3, #4294967295
 8011816:	e041      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>
    }
    // Integers may be padded with zeroes
    if (a.len > 32) {
 8011818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801181a:	2b20      	cmp	r3, #32
 801181c:	d906      	bls.n	801182c <mg_tls_client_recv_cert_verify+0xe8>
      a.value = a.value + (a.len - 32);
 801181e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011822:	3b20      	subs	r3, #32
 8011824:	4413      	add	r3, r2
 8011826:	663b      	str	r3, [r7, #96]	@ 0x60
      a.len = 32;
 8011828:	2320      	movs	r3, #32
 801182a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    if (b.len > 32) {
 801182c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801182e:	2b20      	cmp	r3, #32
 8011830:	d906      	bls.n	8011840 <mg_tls_client_recv_cert_verify+0xfc>
      b.value = b.value + (b.len - 32);
 8011832:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011836:	3b20      	subs	r3, #32
 8011838:	4413      	add	r3, r2
 801183a:	657b      	str	r3, [r7, #84]	@ 0x54
      b.len = 32;
 801183c:	2320      	movs	r3, #32
 801183e:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    memmove(sig, a.value, a.len);
 8011840:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011842:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011844:	f107 030c 	add.w	r3, r7, #12
 8011848:	4618      	mov	r0, r3
 801184a:	f011 ff01 	bl	8023650 <memmove>
    memmove(sig + 32, b.value, b.len);
 801184e:	f107 030c 	add.w	r3, r7, #12
 8011852:	3320      	adds	r3, #32
 8011854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011856:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011858:	4618      	mov	r0, r3
 801185a:	f011 fef9 	bl	8023650 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 801185e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011860:	f203 245e 	addw	r4, r3, #606	@ 0x25e
 8011864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011866:	f203 259e 	addw	r5, r3, #670	@ 0x29e
 801186a:	f003 fc83 	bl	8015174 <mg_uecc_secp256r1>
 801186e:	4602      	mov	r2, r0
 8011870:	f107 030c 	add.w	r3, r7, #12
 8011874:	9200      	str	r2, [sp, #0]
 8011876:	2220      	movs	r2, #32
 8011878:	4629      	mov	r1, r5
 801187a:	4620      	mov	r0, r4
 801187c:	f004 fe16 	bl	80164ac <mg_uecc_verify>
 8011880:	4603      	mov	r3, r0
 8011882:	2b01      	cmp	r3, #1
 8011884:	d006      	beq.n	8011894 <mg_tls_client_recv_cert_verify+0x150>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify certificate");
 8011886:	490b      	ldr	r1, [pc, #44]	@ (80118b4 <mg_tls_client_recv_cert_verify+0x170>)
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7f0 feff 	bl	800268c <mg_error>
      return -1;
 801188e:	f04f 33ff 	mov.w	r3, #4294967295
 8011892:	e003      	b.n	801189c <mg_tls_client_recv_cert_verify+0x158>
    }
  } while (0);

  mg_tls_drop_message(c);
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f7fd ff65 	bl	800f764 <mg_tls_drop_message>
  return 0;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3778      	adds	r7, #120	@ 0x78
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bdb0      	pop	{r4, r5, r7, pc}
 80118a4:	08029290 	.word	0x08029290
 80118a8:	080292c8 	.word	0x080292c8
 80118ac:	080292fc 	.word	0x080292fc
 80118b0:	08029320 	.word	0x08029320
 80118b4:	08029348 	.word	0x08029348

080118b8 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80118c6:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f7fe fb97 	bl	800fffc <mg_tls_recv_record>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	da02      	bge.n	80118da <mg_tls_client_recv_finish+0x22>
    return -1;
 80118d4:	f04f 33ff 	mov.w	r3, #4294967295
 80118d8:	e017      	b.n	801190a <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	695b      	ldr	r3, [r3, #20]
 80118e2:	4413      	add	r3, r2
 80118e4:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	2b14      	cmp	r3, #20
 80118ec:	d009      	beq.n	8011902 <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	461a      	mov	r2, r3
 80118f4:	4907      	ldr	r1, [pc, #28]	@ (8011914 <mg_tls_client_recv_finish+0x5c>)
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7f0 fec8 	bl	800268c <mg_error>
    return -1;
 80118fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011900:	e003      	b.n	801190a <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7fd ff2e 	bl	800f764 <mg_tls_drop_message>
  return 0;
 8011908:	2300      	movs	r3, #0
}
 801190a:	4618      	mov	r0, r3
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	08029368 	.word	0x08029368

08011918 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8011918:	b580      	push	{r7, lr}
 801191a:	b0b4      	sub	sp, #208	@ 0xd0
 801191c:	af02      	add	r7, sp, #8
 801191e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 801192a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801192e:	3304      	adds	r3, #4
 8011930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8011934:	4a23      	ldr	r2, [pc, #140]	@ (80119c4 <mg_tls_client_send_finish+0xac>)
 8011936:	f107 030c 	add.w	r3, r7, #12
 801193a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801193e:	6018      	str	r0, [r3, #0]
 8011940:	3304      	adds	r3, #4
 8011942:	7019      	strb	r1, [r3, #0]
 8011944:	f107 0311 	add.w	r3, r7, #17
 8011948:	221f      	movs	r2, #31
 801194a:	2100      	movs	r1, #0
 801194c:	4618      	mov	r0, r3
 801194e:	f011 fe99 	bl	8023684 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8011952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011956:	f103 0120 	add.w	r1, r3, #32
 801195a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801195e:	2270      	movs	r2, #112	@ 0x70
 8011960:	4618      	mov	r0, r3
 8011962:	f011 fe75 	bl	8023650 <memmove>
  mg_sha256_final(hash, &sha256);
 8011966:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801196a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801196e:	4611      	mov	r1, r2
 8011970:	4618      	mov	r0, r3
 8011972:	f7fc fb54 	bl	800e01e <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8011976:	f107 000c 	add.w	r0, r7, #12
 801197a:	3004      	adds	r0, #4
 801197c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011980:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8011984:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011988:	2220      	movs	r2, #32
 801198a:	9200      	str	r2, [sp, #0]
 801198c:	2220      	movs	r2, #32
 801198e:	f7fc fc7e 	bl	800e28e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8011992:	f107 010c 	add.w	r1, r7, #12
 8011996:	2316      	movs	r3, #22
 8011998:	2224      	movs	r2, #36	@ 0x24
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f7fe fa32 	bl	800fe04 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 80119a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80119a4:	6819      	ldr	r1, [r3, #0]
 80119a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	461a      	mov	r2, r3
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7f9 fcae 	bl	800b310 <mg_io_send>
  wio->len = 0;
 80119b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80119b8:	2200      	movs	r2, #0
 80119ba:	609a      	str	r2, [r3, #8]
}
 80119bc:	bf00      	nop
 80119be:	37c8      	adds	r7, #200	@ 0xc8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	08028e90 	.word	0x08028e90

080119c8 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b0e4      	sub	sp, #400	@ 0x190
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80119d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80119d6:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80119d8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80119dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80119e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 80119ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b05      	cmp	r3, #5
 80119f2:	f200 80d1 	bhi.w	8011b98 <mg_tls_client_handshake+0x1d0>
 80119f6:	a201      	add	r2, pc, #4	@ (adr r2, 80119fc <mg_tls_client_handshake+0x34>)
 80119f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119fc:	08011a15 	.word	0x08011a15
 8011a00:	08011a2b 	.word	0x08011a2b
 8011a04:	08011a49 	.word	0x08011a49
 8011a08:	08011a67 	.word	0x08011a67
 8011a0c:	08011a85 	.word	0x08011a85
 8011a10:	08011aa3 	.word	0x08011aa3
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 8011a14:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011a18:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011a1c:	6818      	ldr	r0, [r3, #0]
 8011a1e:	f7ff f98d 	bl	8010d3c <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 8011a22:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011a26:	2201      	movs	r2, #1
 8011a28:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8011a2a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011a2e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011a32:	6818      	ldr	r0, [r3, #0]
 8011a34:	f7ff fb76 	bl	8011124 <mg_tls_client_recv_hello>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	f2c0 80b9 	blt.w	8011bb2 <mg_tls_client_handshake+0x1ea>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8011a40:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011a44:	2202      	movs	r2, #2
 8011a46:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8011a48:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011a4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011a50:	6818      	ldr	r0, [r3, #0]
 8011a52:	f7ff fc9b 	bl	801138c <mg_tls_client_recv_ext>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f2c0 80ac 	blt.w	8011bb6 <mg_tls_client_handshake+0x1ee>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 8011a5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011a62:	2203      	movs	r2, #3
 8011a64:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 8011a66:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011a6a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011a6e:	6818      	ldr	r0, [r3, #0]
 8011a70:	f7ff fcbc 	bl	80113ec <mg_tls_client_recv_cert>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f2c0 809f 	blt.w	8011bba <mg_tls_client_handshake+0x1f2>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 8011a7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011a80:	2204      	movs	r2, #4
 8011a82:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 8011a84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011a88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011a8c:	6818      	ldr	r0, [r3, #0]
 8011a8e:	f7ff fe59 	bl	8011744 <mg_tls_client_recv_cert_verify>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f2c0 8092 	blt.w	8011bbe <mg_tls_client_handshake+0x1f6>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISHED;
 8011a9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011a9e:	2205      	movs	r2, #5
 8011aa0:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISHED:
      if (mg_tls_client_recv_finish(c) < 0) {
 8011aa2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011aa6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011aaa:	6818      	ldr	r0, [r3, #0]
 8011aac:	f7ff ff04 	bl	80118b8 <mg_tls_client_recv_finish>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f2c0 8085 	blt.w	8011bc2 <mg_tls_client_handshake+0x1fa>
        break;
      }
      if (tls->cert_requested) {
 8011ab8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011abc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d04b      	beq.n	8011b5c <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 8011ac4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011ac8:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8011acc:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011ad0:	22c0      	movs	r2, #192	@ 0xc0
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	f011 fecb 	bl	802386e <memcpy>
        mg_tls_generate_application_keys(c);
 8011ad8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011adc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ae0:	6818      	ldr	r0, [r3, #0]
 8011ae2:	f7fe f877 	bl	800fbd4 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 8011ae6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011aea:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8011aee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011af2:	4610      	mov	r0, r2
 8011af4:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011af8:	22c0      	movs	r2, #192	@ 0xc0
 8011afa:	4619      	mov	r1, r3
 8011afc:	f011 feb7 	bl	802386e <memcpy>
        tls->enc = hs_keys;
 8011b00:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011b04:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011b08:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8011b0c:	22c0      	movs	r2, #192	@ 0xc0
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f011 fead 	bl	802386e <memcpy>
        mg_tls_server_send_cert(c);
 8011b14:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011b18:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b1c:	6818      	ldr	r0, [r3, #0]
 8011b1e:	f7fe fe6b 	bl	80107f8 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 8011b22:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011b26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b2a:	2101      	movs	r1, #1
 8011b2c:	6818      	ldr	r0, [r3, #0]
 8011b2e:	f7fe ff25 	bl	801097c <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 8011b32:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011b36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b3a:	6818      	ldr	r0, [r3, #0]
 8011b3c:	f7ff feec 	bl	8011918 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 8011b40:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011b44:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8011b48:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8011b4c:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011b50:	4611      	mov	r1, r2
 8011b52:	22c0      	movs	r2, #192	@ 0xc0
 8011b54:	4618      	mov	r0, r3
 8011b56:	f011 fe8a 	bl	802386e <memcpy>
 8011b5a:	e00d      	b.n	8011b78 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 8011b5c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011b60:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b64:	6818      	ldr	r0, [r3, #0]
 8011b66:	f7ff fed7 	bl	8011918 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 8011b6a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011b6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b72:	6818      	ldr	r0, [r3, #0]
 8011b74:	f7fe f82e 	bl	800fbd4 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 8011b78:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011b7c:	2206      	movs	r2, #6
 8011b7e:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8011b80:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011b84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011b8e:	f36f 13c7 	bfc	r3, #7, #1
 8011b92:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      break;
 8011b96:	e015      	b.n	8011bc4 <mg_tls_client_handshake+0x1fc>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 8011b98:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011ba4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ba8:	4909      	ldr	r1, [pc, #36]	@ (8011bd0 <mg_tls_client_handshake+0x208>)
 8011baa:	6818      	ldr	r0, [r3, #0]
 8011bac:	f7f0 fd6e 	bl	800268c <mg_error>
      break;
 8011bb0:	e008      	b.n	8011bc4 <mg_tls_client_handshake+0x1fc>
        break;
 8011bb2:	bf00      	nop
 8011bb4:	e006      	b.n	8011bc4 <mg_tls_client_handshake+0x1fc>
        break;
 8011bb6:	bf00      	nop
 8011bb8:	e004      	b.n	8011bc4 <mg_tls_client_handshake+0x1fc>
        break;
 8011bba:	bf00      	nop
 8011bbc:	e002      	b.n	8011bc4 <mg_tls_client_handshake+0x1fc>
        break;
 8011bbe:	bf00      	nop
 8011bc0:	e000      	b.n	8011bc4 <mg_tls_client_handshake+0x1fc>
        break;
 8011bc2:	bf00      	nop
  }
}
 8011bc4:	bf00      	nop
 8011bc6:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	08029394 	.word	0x08029394

08011bd4 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b084      	sub	sp, #16
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011be2:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b07      	cmp	r3, #7
 8011bea:	d002      	beq.n	8011bf2 <mg_tls_server_handshake+0x1e>
 8011bec:	2b08      	cmp	r3, #8
 8011bee:	d01c      	beq.n	8011c2a <mg_tls_server_handshake+0x56>
 8011bf0:	e02f      	b.n	8011c52 <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7fe fbb2 	bl	801035c <mg_tls_server_recv_hello>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	db31      	blt.n	8011c62 <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7fe fd20 	bl	8010644 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7fd fe95 	bl	800f934 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f7fe fdce 	bl	80107ac <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7fe fdf1 	bl	80107f8 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 8011c16:	2100      	movs	r1, #0
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f7fe feaf 	bl	801097c <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7fe ffea 	bl	8010bf8 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2208      	movs	r2, #8
 8011c28:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f7ff f846 	bl	8010cbc <mg_tls_server_recv_finish>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	db17      	blt.n	8011c66 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7fd ffcc 	bl	800fbd4 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2209      	movs	r2, #9
 8011c40:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011c48:	f36f 13c7 	bfc	r3, #7, #1
 8011c4c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8011c50:	e00a      	b.n	8011c68 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	461a      	mov	r2, r3
 8011c58:	4905      	ldr	r1, [pc, #20]	@ (8011c70 <mg_tls_server_handshake+0x9c>)
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7f0 fd16 	bl	800268c <mg_error>
      break;
 8011c60:	e002      	b.n	8011c68 <mg_tls_server_handshake+0x94>
        return;
 8011c62:	bf00      	nop
 8011c64:	e000      	b.n	8011c68 <mg_tls_server_handshake+0x94>
        return;
 8011c66:	bf00      	nop
  }
}
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	080293b0 	.word	0x080293b0

08011c74 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  if (c->is_client) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011c82:	f003 0302 	and.w	r3, r3, #2
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d003      	beq.n	8011c94 <mg_tls_handshake+0x20>
    mg_tls_client_handshake(c);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7ff fe9b 	bl	80119c8 <mg_tls_client_handshake>
  } else {
    mg_tls_server_handshake(c);
  }
}
 8011c92:	e002      	b.n	8011c9a <mg_tls_handshake+0x26>
    mg_tls_server_handshake(c);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff ff9d 	bl	8011bd4 <mg_tls_server_handshake>
}
 8011c9a:	bf00      	nop
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
	...

08011ca4 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 8011ca4:	b590      	push	{r4, r7, lr}
 8011ca6:	b09b      	sub	sp, #108	@ 0x6c
 8011ca8:	af02      	add	r7, sp, #8
 8011caa:	f107 0410 	add.w	r4, r7, #16
 8011cae:	e884 0003 	stmia.w	r4, {r0, r1}
 8011cb2:	f107 0108 	add.w	r1, r7, #8
 8011cb6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 8011cc2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011cc6:	4946      	ldr	r1, [pc, #280]	@ (8011de0 <mg_parse_pem+0x13c>)
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fc fe91 	bl	800e9f0 <mg_str_s>
 8011cce:	f107 0318 	add.w	r3, r7, #24
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011cd8:	cb0c      	ldmia	r3, {r2, r3}
 8011cda:	f107 0110 	add.w	r1, r7, #16
 8011cde:	c903      	ldmia	r1, {r0, r1}
 8011ce0:	f7fc ff90 	bl	800ec04 <mg_match>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	f083 0301 	eor.w	r3, r3, #1
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00f      	beq.n	8011d10 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 8011cf0:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8011cf2:	4638      	mov	r0, r7
 8011cf4:	f107 0310 	add.w	r3, r7, #16
 8011cf8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011cfc:	f7fc fec2 	bl	800ea84 <mg_strdup>
 8011d00:	4622      	mov	r2, r4
 8011d02:	463b      	mov	r3, r7
 8011d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d08:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	e062      	b.n	8011dd6 <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 8011d10:	f107 0308 	add.w	r3, r7, #8
 8011d14:	cb0c      	ldmia	r3, {r2, r3}
 8011d16:	f107 0120 	add.w	r1, r7, #32
 8011d1a:	c903      	ldmia	r1, {r0, r1}
 8011d1c:	f7fc fee9 	bl	800eaf2 <mg_strcmp>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d10a      	bne.n	8011d3c <mg_parse_pem+0x98>
 8011d26:	f107 0308 	add.w	r3, r7, #8
 8011d2a:	cb0c      	ldmia	r3, {r2, r3}
 8011d2c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011d30:	c903      	ldmia	r1, {r0, r1}
 8011d32:	f7fc fede 	bl	800eaf2 <mg_strcmp>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d002      	beq.n	8011d42 <mg_parse_pem+0x9e>
    return -1;  // bad label
 8011d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d40:	e049      	b.n	8011dd6 <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 8011d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d44:	4619      	mov	r1, r3
 8011d46:	2001      	movs	r0, #1
 8011d48:	f010 fa20 	bl	802218c <calloc>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d102      	bne.n	8011d5c <mg_parse_pem+0xb8>
    return -1;
 8011d56:	f04f 33ff 	mov.w	r3, #4294967295
 8011d5a:	e03c      	b.n	8011dd6 <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8011d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d60:	e01c      	b.n	8011d9c <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 8011d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b20      	cmp	r3, #32
 8011d68:	d014      	beq.n	8011d94 <mg_parse_pem+0xf0>
 8011d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b0a      	cmp	r3, #10
 8011d70:	d010      	beq.n	8011d94 <mg_parse_pem+0xf0>
 8011d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	2b0d      	cmp	r3, #13
 8011d78:	d00c      	beq.n	8011d94 <mg_parse_pem+0xf0>
 8011d7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	2b09      	cmp	r3, #9
 8011d80:	d008      	beq.n	8011d94 <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 8011d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d84:	1c5a      	adds	r2, r3, #1
 8011d86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011d88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d8a:	4413      	add	r3, r2
 8011d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d8e:	7812      	ldrb	r2, [r2, #0]
 8011d90:	701a      	strb	r2, [r3, #0]
 8011d92:	e000      	b.n	8011d96 <mg_parse_pem+0xf2>
      continue;
 8011d94:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8011d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d98:	3301      	adds	r3, #1
 8011d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da0:	4413      	add	r3, r2
 8011da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d3dc      	bcc.n	8011d62 <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 8011da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011daa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011dac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011dae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011db0:	f7ef fa36 	bl	8001220 <mg_base64_decode>
 8011db4:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 8011db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d105      	bne.n	8011dc8 <mg_parse_pem+0x124>
    free(s);
 8011dbc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011dbe:	f010 fa09 	bl	80221d4 <free>
    return -1;
 8011dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc6:	e006      	b.n	8011dd6 <mg_parse_pem+0x132>
  }
  der->buf = s;
 8011dc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011dca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011dcc:	601a      	str	r2, [r3, #0]
  der->len = m;
 8011dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011dd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3764      	adds	r7, #100	@ 0x64
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd90      	pop	{r4, r7, pc}
 8011dde:	bf00      	nop
 8011de0:	080293cc 	.word	0x080293cc

08011de4 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b08e      	sub	sp, #56	@ 0x38
 8011de8:	af02      	add	r7, sp, #8
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 8011dee:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8011df2:	2001      	movs	r0, #1
 8011df4:	f010 f9ca 	bl	802218c <calloc>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (tls == NULL) {
 8011dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d104      	bne.n	8011e0c <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 8011e02:	4990      	ldr	r1, [pc, #576]	@ (8012044 <mg_tls_init+0x260>)
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7f0 fc41 	bl	800268c <mg_error>
    return;
 8011e0a:	e117      	b.n	801203c <mg_tls_init+0x258>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011e12:	f003 0302 	and.w	r3, r3, #2
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <mg_tls_init+0x3c>
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	e000      	b.n	8011e22 <mg_tls_init+0x3e>
 8011e20:	2207      	movs	r2, #7
  tls->state =
 8011e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e24:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	6a1a      	ldr	r2, [r3, #32]
 8011e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e2c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  //tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e42:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011e4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011e50:	b2d9      	uxtb	r1, r3
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011e58:	f361 1386 	bfi	r3, r1, #6, #1
 8011e5c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 8011e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e62:	3320      	adds	r3, #32
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fb fe5d 	bl	800db24 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	69db      	ldr	r3, [r3, #28]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d018      	beq.n	8011ea4 <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	69db      	ldr	r3, [r3, #28]
 8011e76:	2bfc      	cmp	r3, #252	@ 0xfc
 8011e78:	d904      	bls.n	8011e84 <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 8011e7a:	4973      	ldr	r1, [pc, #460]	@ (8012048 <mg_tls_init+0x264>)
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7f0 fc05 	bl	800268c <mg_error>
      return;
 8011e82:	e0db      	b.n	801203c <mg_tls_init+0x258>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 8011e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e86:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	699b      	ldr	r3, [r3, #24]
 8011e8e:	22fd      	movs	r2, #253	@ 0xfd
 8011e90:	4619      	mov	r1, r3
 8011e92:	f011 fc1e 	bl	80236d2 <strncpy>
    tls->hostname[opts->name.len] = 0;
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	69db      	ldr	r3, [r3, #28]
 8011e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e9c:	4413      	add	r3, r2
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
  }

  if (opts->cert.buf == NULL) {
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10f      	bne.n	8011ecc <mg_tls_init+0xe8>
    MG_VERBOSE(("no certificate provided"));
 8011eac:	4b67      	ldr	r3, [pc, #412]	@ (801204c <mg_tls_init+0x268>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2b03      	cmp	r3, #3
 8011eb2:	f340 80bc 	ble.w	801202e <mg_tls_init+0x24a>
 8011eb6:	4b66      	ldr	r3, [pc, #408]	@ (8012050 <mg_tls_init+0x26c>)
 8011eb8:	f642 22f3 	movw	r2, #10995	@ 0x2af3
 8011ebc:	4965      	ldr	r1, [pc, #404]	@ (8012054 <mg_tls_init+0x270>)
 8011ebe:	2004      	movs	r0, #4
 8011ec0:	f7f5 fece 	bl	8007c60 <mg_log_prefix>
 8011ec4:	4864      	ldr	r0, [pc, #400]	@ (8012058 <mg_tls_init+0x274>)
 8011ec6:	f7f5 ff1b 	bl	8007d00 <mg_log>
    return;
 8011eca:	e0b0      	b.n	801202e <mg_tls_init+0x24a>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 8011ecc:	f107 0314 	add.w	r3, r7, #20
 8011ed0:	4962      	ldr	r1, [pc, #392]	@ (801205c <mg_tls_init+0x278>)
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fc fd8c 	bl	800e9f0 <mg_str_s>
 8011ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eda:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	9300      	str	r3, [sp, #0]
 8011ee2:	f107 0314 	add.w	r3, r7, #20
 8011ee6:	cb0c      	ldmia	r3, {r2, r3}
 8011ee8:	3108      	adds	r1, #8
 8011eea:	c903      	ldmia	r1, {r0, r1}
 8011eec:	f7ff feda 	bl	8011ca4 <mg_parse_pem>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	da0f      	bge.n	8011f16 <mg_tls_init+0x132>
    MG_ERROR(("Failed to load certificate"));
 8011ef6:	4b55      	ldr	r3, [pc, #340]	@ (801204c <mg_tls_init+0x268>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f340 8099 	ble.w	8012032 <mg_tls_init+0x24e>
 8011f00:	4b53      	ldr	r3, [pc, #332]	@ (8012050 <mg_tls_init+0x26c>)
 8011f02:	f642 22f9 	movw	r2, #11001	@ 0x2af9
 8011f06:	4953      	ldr	r1, [pc, #332]	@ (8012054 <mg_tls_init+0x270>)
 8011f08:	2001      	movs	r0, #1
 8011f0a:	f7f5 fea9 	bl	8007c60 <mg_log_prefix>
 8011f0e:	4854      	ldr	r0, [pc, #336]	@ (8012060 <mg_tls_init+0x27c>)
 8011f10:	f7f5 fef6 	bl	8007d00 <mg_log>
    return;
 8011f14:	e08d      	b.n	8012032 <mg_tls_init+0x24e>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	691b      	ldr	r3, [r3, #16]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d104      	bne.n	8011f28 <mg_tls_init+0x144>
    mg_error(c, "certificate provided without a private key");
 8011f1e:	4951      	ldr	r1, [pc, #324]	@ (8012064 <mg_tls_init+0x280>)
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7f0 fbb3 	bl	800268c <mg_error>
    return;
 8011f26:	e089      	b.n	801203c <mg_tls_init+0x258>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 8011f28:	f107 031c 	add.w	r3, r7, #28
 8011f2c:	494e      	ldr	r1, [pc, #312]	@ (8012068 <mg_tls_init+0x284>)
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fc fd5e 	bl	800e9f0 <mg_str_s>
 8011f34:	6839      	ldr	r1, [r7, #0]
 8011f36:	f107 030c 	add.w	r3, r7, #12
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	f107 031c 	add.w	r3, r7, #28
 8011f40:	cb0c      	ldmia	r3, {r2, r3}
 8011f42:	3110      	adds	r1, #16
 8011f44:	c903      	ldmia	r1, {r0, r1}
 8011f46:	f7ff fead 	bl	8011ca4 <mg_parse_pem>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d150      	bne.n	8011ff2 <mg_tls_init+0x20e>
    if (key.len < 39) {
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	2b26      	cmp	r3, #38	@ 0x26
 8011f54:	d80e      	bhi.n	8011f74 <mg_tls_init+0x190>
      MG_ERROR(("EC private key too short"));
 8011f56:	4b3d      	ldr	r3, [pc, #244]	@ (801204c <mg_tls_init+0x268>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	dd6b      	ble.n	8012036 <mg_tls_init+0x252>
 8011f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8012050 <mg_tls_init+0x26c>)
 8011f60:	f642 3205 	movw	r2, #11013	@ 0x2b05
 8011f64:	493b      	ldr	r1, [pc, #236]	@ (8012054 <mg_tls_init+0x270>)
 8011f66:	2001      	movs	r0, #1
 8011f68:	f7f5 fe7a 	bl	8007c60 <mg_log_prefix>
 8011f6c:	483f      	ldr	r0, [pc, #252]	@ (801206c <mg_tls_init+0x288>)
 8011f6e:	f7f5 fec7 	bl	8007d00 <mg_log>
      return;
 8011f72:	e060      	b.n	8012036 <mg_tls_init+0x252>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	2b30      	cmp	r3, #48	@ 0x30
 8011f7a:	d105      	bne.n	8011f88 <mg_tls_init+0x1a4>
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	b25b      	sxtb	r3, r3
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	da0e      	bge.n	8011fa6 <mg_tls_init+0x1c2>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 8011f88:	4b30      	ldr	r3, [pc, #192]	@ (801204c <mg_tls_init+0x268>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	dd54      	ble.n	801203a <mg_tls_init+0x256>
 8011f90:	4b2f      	ldr	r3, [pc, #188]	@ (8012050 <mg_tls_init+0x26c>)
 8011f92:	f642 320b 	movw	r2, #11019	@ 0x2b0b
 8011f96:	492f      	ldr	r1, [pc, #188]	@ (8012054 <mg_tls_init+0x270>)
 8011f98:	2001      	movs	r0, #1
 8011f9a:	f7f5 fe61 	bl	8007c60 <mg_log_prefix>
 8011f9e:	4834      	ldr	r0, [pc, #208]	@ (8012070 <mg_tls_init+0x28c>)
 8011fa0:	f7f5 feae 	bl	8007d00 <mg_log>
      return;
 8011fa4:	e049      	b.n	801203a <mg_tls_init+0x256>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	3302      	adds	r3, #2
 8011faa:	2205      	movs	r2, #5
 8011fac:	4931      	ldr	r1, [pc, #196]	@ (8012074 <mg_tls_init+0x290>)
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f011 fb3e 	bl	8023630 <memcmp>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00d      	beq.n	8011fd6 <mg_tls_init+0x1f2>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 8011fba:	4b24      	ldr	r3, [pc, #144]	@ (801204c <mg_tls_init+0x268>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	dd09      	ble.n	8011fd6 <mg_tls_init+0x1f2>
 8011fc2:	4b23      	ldr	r3, [pc, #140]	@ (8012050 <mg_tls_init+0x26c>)
 8011fc4:	f642 320f 	movw	r2, #11023	@ 0x2b0f
 8011fc8:	4922      	ldr	r1, [pc, #136]	@ (8012054 <mg_tls_init+0x270>)
 8011fca:	2001      	movs	r0, #1
 8011fcc:	f7f5 fe48 	bl	8007c60 <mg_log_prefix>
 8011fd0:	4829      	ldr	r0, [pc, #164]	@ (8012078 <mg_tls_init+0x294>)
 8011fd2:	f7f5 fe95 	bl	8007d00 <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 8011fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fd8:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	3307      	adds	r3, #7
 8011fe0:	2220      	movs	r2, #32
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	f011 fb34 	bl	8023650 <memmove>
    free((void *) key.buf);
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	4618      	mov	r0, r3
 8011fec:	f010 f8f2 	bl	80221d4 <free>
 8011ff0:	e024      	b.n	801203c <mg_tls_init+0x258>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 8011ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011ff6:	4921      	ldr	r1, [pc, #132]	@ (801207c <mg_tls_init+0x298>)
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fc fcf9 	bl	800e9f0 <mg_str_s>
 8011ffe:	6839      	ldr	r1, [r7, #0]
 8012000:	f107 030c 	add.w	r3, r7, #12
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801200a:	cb0c      	ldmia	r3, {r2, r3}
 801200c:	3110      	adds	r1, #16
 801200e:	c903      	ldmia	r1, {r0, r1}
 8012010:	f7ff fe48 	bl	8011ca4 <mg_parse_pem>
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d104      	bne.n	8012024 <mg_tls_init+0x240>
    mg_error(c, "PKCS8 private key format is not supported");
 801201a:	4919      	ldr	r1, [pc, #100]	@ (8012080 <mg_tls_init+0x29c>)
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7f0 fb35 	bl	800268c <mg_error>
 8012022:	e00b      	b.n	801203c <mg_tls_init+0x258>
  } else {
    mg_error(c, "expected EC PRIVATE KEY or PRIVATE KEY");
 8012024:	4917      	ldr	r1, [pc, #92]	@ (8012084 <mg_tls_init+0x2a0>)
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7f0 fb30 	bl	800268c <mg_error>
 801202c:	e006      	b.n	801203c <mg_tls_init+0x258>
    return;
 801202e:	bf00      	nop
 8012030:	e004      	b.n	801203c <mg_tls_init+0x258>
    return;
 8012032:	bf00      	nop
 8012034:	e002      	b.n	801203c <mg_tls_init+0x258>
      return;
 8012036:	bf00      	nop
 8012038:	e000      	b.n	801203c <mg_tls_init+0x258>
      return;
 801203a:	bf00      	nop
  }
}
 801203c:	3730      	adds	r7, #48	@ 0x30
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	080293f0 	.word	0x080293f0
 8012048:	080293f8 	.word	0x080293f8
 801204c:	24000240 	.word	0x24000240
 8012050:	0802a984 	.word	0x0802a984
 8012054:	08027148 	.word	0x08027148
 8012058:	0802940c 	.word	0x0802940c
 801205c:	08029424 	.word	0x08029424
 8012060:	08029430 	.word	0x08029430
 8012064:	0802944c 	.word	0x0802944c
 8012068:	08029478 	.word	0x08029478
 801206c:	08029488 	.word	0x08029488
 8012070:	080294a4 	.word	0x080294a4
 8012074:	080294c8 	.word	0x080294c8
 8012078:	080294d0 	.word	0x080294d0
 801207c:	080294f0 	.word	0x080294f0
 8012080:	080294fc 	.word	0x080294fc
 8012084:	08029528 	.word	0x08029528

08012088 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012096:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00a      	beq.n	80120b4 <mg_tls_free+0x2c>
    mg_iobuf_free(&tls->send);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	3304      	adds	r3, #4
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7f4 ff37 	bl	8006f16 <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80120ae:	4618      	mov	r0, r3
 80120b0:	f010 f890 	bl	80221d4 <free>
  }
  free(c->tls);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80120ba:	4618      	mov	r0, r3
 80120bc:	f010 f88a 	bl	80221d4 <free>
  c->tls = NULL;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2200      	movs	r2, #0
 80120c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 80120c8:	bf00      	nop
 80120ca:	3710      	adds	r7, #16
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b086      	sub	sp, #24
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80120e2:	613b      	str	r3, [r7, #16]
  long n = MG_IO_WAIT;
 80120e4:	f06f 0301 	mvn.w	r3, #1
 80120e8:	617b      	str	r3, [r7, #20]
  if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120f0:	d902      	bls.n	80120f8 <mg_tls_send+0x28>
 80120f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80120f6:	607b      	str	r3, [r7, #4]
  if (len > 16384) len = 16384;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80120fe:	d902      	bls.n	8012106 <mg_tls_send+0x36>
 8012100:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012104:	607b      	str	r3, [r7, #4]
  mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 8012106:	2317      	movs	r3, #23
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	68b9      	ldr	r1, [r7, #8]
 801210c:	68f8      	ldr	r0, [r7, #12]
 801210e:	f7fd fe79 	bl	800fe04 <mg_tls_encrypt>
  while (tls->send.len > 0 &&
 8012112:	e006      	b.n	8012122 <mg_tls_send+0x52>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	3304      	adds	r3, #4
 8012118:	697a      	ldr	r2, [r7, #20]
 801211a:	2100      	movs	r1, #0
 801211c:	4618      	mov	r0, r3
 801211e:	f7f4 feaf 	bl	8006e80 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d00b      	beq.n	8012142 <mg_tls_send+0x72>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	6859      	ldr	r1, [r3, #4]
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	461a      	mov	r2, r3
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f7f9 f8eb 	bl	800b310 <mg_io_send>
 801213a:	6178      	str	r0, [r7, #20]
  while (tls->send.len > 0 &&
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	2b00      	cmp	r3, #0
 8012140:	dce8      	bgt.n	8012114 <mg_tls_send+0x44>
  }
  if (n == MG_IO_ERR || n == MG_IO_WAIT) return n;
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012148:	d003      	beq.n	8012152 <mg_tls_send+0x82>
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	f113 0f02 	cmn.w	r3, #2
 8012150:	d101      	bne.n	8012156 <mg_tls_send+0x86>
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	e000      	b.n	8012158 <mg_tls_send+0x88>
  return (long) len;
 8012156:	687b      	ldr	r3, [r7, #4]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3718      	adds	r7, #24
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8012160:	b580      	push	{r7, lr}
 8012162:	b088      	sub	sp, #32
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
  int r = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012176:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f7fd ff3f 	bl	800fffc <mg_tls_recv_record>
 801217e:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	2b00      	cmp	r3, #0
 8012184:	da01      	bge.n	801218a <mg_tls_recv+0x2a>
    return r;
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	e032      	b.n	80121f0 <mg_tls_recv+0x90>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	695b      	ldr	r3, [r3, #20]
 8012192:	4413      	add	r3, r2
 8012194:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	7f1b      	ldrb	r3, [r3, #28]
 801219a:	2b17      	cmp	r3, #23
 801219c:	d008      	beq.n	80121b0 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	2200      	movs	r2, #0
 80121a2:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f7fd fabb 	bl	800f720 <mg_tls_drop_record>
    return MG_IO_WAIT;
 80121aa:	f06f 0301 	mvn.w	r3, #1
 80121ae:	e01f      	b.n	80121f0 <mg_tls_recv+0x90>
  }
  minlen = len < tls->recv_len ? len : tls->recv_len;
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	699b      	ldr	r3, [r3, #24]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4293      	cmp	r3, r2
 80121b8:	bf28      	it	cs
 80121ba:	4613      	movcs	r3, r2
 80121bc:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 80121be:	693a      	ldr	r2, [r7, #16]
 80121c0:	6979      	ldr	r1, [r7, #20]
 80121c2:	68b8      	ldr	r0, [r7, #8]
 80121c4:	f011 fa44 	bl	8023650 <memmove>
  tls->recv_offset += minlen;
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	695a      	ldr	r2, [r3, #20]
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	441a      	add	r2, r3
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	699a      	ldr	r2, [r3, #24]
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	1ad2      	subs	r2, r2, r3
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	699b      	ldr	r3, [r3, #24]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d102      	bne.n	80121ee <mg_tls_recv+0x8e>
    mg_tls_drop_record(c);
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7fd fa99 	bl	800f720 <mg_tls_drop_record>
  }
  return (long) minlen;
 80121ee:	693b      	ldr	r3, [r7, #16]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3720      	adds	r7, #32
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  return mg_tls_got_record(c) ? 1 : 0;
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7fd fa66 	bl	800f6d2 <mg_tls_got_record>
 8012206:	4603      	mov	r3, r0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 8012218:	bf00      	nop
 801221a:	370c      	adds	r7, #12
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr

08012224 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
 8012230:	603b      	str	r3, [r7, #0]
#ifdef static_assert
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
  state[0] = 0x61707865;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	4a2b      	ldr	r2, [pc, #172]	@ (80122e4 <initialize_state+0xc0>)
 8012236:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	3304      	adds	r3, #4
 801223c:	4a2a      	ldr	r2, [pc, #168]	@ (80122e8 <initialize_state+0xc4>)
 801223e:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	3308      	adds	r3, #8
 8012244:	4a29      	ldr	r2, [pc, #164]	@ (80122ec <initialize_state+0xc8>)
 8012246:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	330c      	adds	r3, #12
 801224c:	4a28      	ldr	r2, [pc, #160]	@ (80122f0 <initialize_state+0xcc>)
 801224e:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	3310      	adds	r3, #16
 8012254:	68ba      	ldr	r2, [r7, #8]
 8012256:	6812      	ldr	r2, [r2, #0]
 8012258:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	3314      	adds	r3, #20
 801225e:	68ba      	ldr	r2, [r7, #8]
 8012260:	3204      	adds	r2, #4
 8012262:	6812      	ldr	r2, [r2, #0]
 8012264:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	3318      	adds	r3, #24
 801226a:	68ba      	ldr	r2, [r7, #8]
 801226c:	3208      	adds	r2, #8
 801226e:	6812      	ldr	r2, [r2, #0]
 8012270:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	331c      	adds	r3, #28
 8012276:	68ba      	ldr	r2, [r7, #8]
 8012278:	320c      	adds	r2, #12
 801227a:	6812      	ldr	r2, [r2, #0]
 801227c:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	3320      	adds	r3, #32
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	3210      	adds	r2, #16
 8012286:	6812      	ldr	r2, [r2, #0]
 8012288:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3324      	adds	r3, #36	@ 0x24
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	3214      	adds	r2, #20
 8012292:	6812      	ldr	r2, [r2, #0]
 8012294:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	3328      	adds	r3, #40	@ 0x28
 801229a:	68ba      	ldr	r2, [r7, #8]
 801229c:	3218      	adds	r2, #24
 801229e:	6812      	ldr	r2, [r2, #0]
 80122a0:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	332c      	adds	r3, #44	@ 0x2c
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	321c      	adds	r2, #28
 80122aa:	6812      	ldr	r2, [r2, #0]
 80122ac:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	3330      	adds	r3, #48	@ 0x30
 80122b2:	683a      	ldr	r2, [r7, #0]
 80122b4:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	3334      	adds	r3, #52	@ 0x34
 80122ba:	687a      	ldr	r2, [r7, #4]
 80122bc:	6812      	ldr	r2, [r2, #0]
 80122be:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	3338      	adds	r3, #56	@ 0x38
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	3204      	adds	r2, #4
 80122c8:	6812      	ldr	r2, [r2, #0]
 80122ca:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	333c      	adds	r3, #60	@ 0x3c
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	3208      	adds	r2, #8
 80122d4:	6812      	ldr	r2, [r2, #0]
 80122d6:	601a      	str	r2, [r3, #0]
}
 80122d8:	bf00      	nop
 80122da:	3714      	adds	r7, #20
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr
 80122e4:	61707865 	.word	0x61707865
 80122e8:	3320646e 	.word	0x3320646e
 80122ec:	79622d32 	.word	0x79622d32
 80122f0:	6b206574 	.word	0x6b206574

080122f4 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 80122f4:	b480      	push	{r7}
 80122f6:	b095      	sub	sp, #84	@ 0x54
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3304      	adds	r3, #4
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	647b      	str	r3, [r7, #68]	@ 0x44
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3308      	adds	r3, #8
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	643b      	str	r3, [r7, #64]	@ 0x40
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	330c      	adds	r3, #12
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	3310      	adds	r3, #16
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3314      	adds	r3, #20
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	637b      	str	r3, [r7, #52]	@ 0x34
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	3318      	adds	r3, #24
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	633b      	str	r3, [r7, #48]	@ 0x30
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	331c      	adds	r3, #28
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	3320      	adds	r3, #32
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3324      	adds	r3, #36	@ 0x24
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	627b      	str	r3, [r7, #36]	@ 0x24
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	3328      	adds	r3, #40	@ 0x28
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	623b      	str	r3, [r7, #32]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	332c      	adds	r3, #44	@ 0x2c
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	61fb      	str	r3, [r7, #28]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	3330      	adds	r3, #48	@ 0x30
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	61bb      	str	r3, [r7, #24]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	3334      	adds	r3, #52	@ 0x34
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	617b      	str	r3, [r7, #20]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3338      	adds	r3, #56	@ 0x38
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	613b      	str	r3, [r7, #16]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	333c      	adds	r3, #60	@ 0x3c
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801237c:	2300      	movs	r3, #0
 801237e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012380:	e182      	b.n	8012688 <core_block+0x394>
    __Q(0, 4, 8, 12);
 8012382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012386:	4413      	add	r3, r2
 8012388:	64bb      	str	r3, [r7, #72]	@ 0x48
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801238e:	4053      	eors	r3, r2
 8012390:	61bb      	str	r3, [r7, #24]
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012398:	61bb      	str	r3, [r7, #24]
 801239a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801239c:	69bb      	ldr	r3, [r7, #24]
 801239e:	4413      	add	r3, r2
 80123a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a6:	4053      	eors	r3, r2
 80123a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ac:	ea4f 5333 	mov.w	r3, r3, ror #20
 80123b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80123b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123b6:	4413      	add	r3, r2
 80123b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80123ba:	69ba      	ldr	r2, [r7, #24]
 80123bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123be:	4053      	eors	r3, r2
 80123c0:	61bb      	str	r3, [r7, #24]
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	ea4f 6333 	mov.w	r3, r3, ror #24
 80123c8:	61bb      	str	r3, [r7, #24]
 80123ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123cc:	69bb      	ldr	r3, [r7, #24]
 80123ce:	4413      	add	r3, r2
 80123d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123d6:	4053      	eors	r3, r2
 80123d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123dc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80123e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 80123e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80123e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123e6:	4413      	add	r3, r2
 80123e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80123ea:	697a      	ldr	r2, [r7, #20]
 80123ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123ee:	4053      	eors	r3, r2
 80123f0:	617b      	str	r3, [r7, #20]
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	4413      	add	r3, r2
 8012400:	627b      	str	r3, [r7, #36]	@ 0x24
 8012402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012406:	4053      	eors	r3, r2
 8012408:	637b      	str	r3, [r7, #52]	@ 0x34
 801240a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801240c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012410:	637b      	str	r3, [r7, #52]	@ 0x34
 8012412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012416:	4413      	add	r3, r2
 8012418:	647b      	str	r3, [r7, #68]	@ 0x44
 801241a:	697a      	ldr	r2, [r7, #20]
 801241c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801241e:	4053      	eors	r3, r2
 8012420:	617b      	str	r3, [r7, #20]
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012428:	617b      	str	r3, [r7, #20]
 801242a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	4413      	add	r3, r2
 8012430:	627b      	str	r3, [r7, #36]	@ 0x24
 8012432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012436:	4053      	eors	r3, r2
 8012438:	637b      	str	r3, [r7, #52]	@ 0x34
 801243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801243c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012440:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 8012442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012446:	4413      	add	r3, r2
 8012448:	643b      	str	r3, [r7, #64]	@ 0x40
 801244a:	693a      	ldr	r2, [r7, #16]
 801244c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801244e:	4053      	eors	r3, r2
 8012450:	613b      	str	r3, [r7, #16]
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012458:	613b      	str	r3, [r7, #16]
 801245a:	6a3a      	ldr	r2, [r7, #32]
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	4413      	add	r3, r2
 8012460:	623b      	str	r3, [r7, #32]
 8012462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012464:	6a3b      	ldr	r3, [r7, #32]
 8012466:	4053      	eors	r3, r2
 8012468:	633b      	str	r3, [r7, #48]	@ 0x30
 801246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801246c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012470:	633b      	str	r3, [r7, #48]	@ 0x30
 8012472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012476:	4413      	add	r3, r2
 8012478:	643b      	str	r3, [r7, #64]	@ 0x40
 801247a:	693a      	ldr	r2, [r7, #16]
 801247c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801247e:	4053      	eors	r3, r2
 8012480:	613b      	str	r3, [r7, #16]
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012488:	613b      	str	r3, [r7, #16]
 801248a:	6a3a      	ldr	r2, [r7, #32]
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	4413      	add	r3, r2
 8012490:	623b      	str	r3, [r7, #32]
 8012492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012494:	6a3b      	ldr	r3, [r7, #32]
 8012496:	4053      	eors	r3, r2
 8012498:	633b      	str	r3, [r7, #48]	@ 0x30
 801249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801249c:	ea4f 6373 	mov.w	r3, r3, ror #25
 80124a0:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 80124a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80124a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124a6:	4413      	add	r3, r2
 80124a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124ae:	4053      	eors	r3, r2
 80124b0:	60fb      	str	r3, [r7, #12]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80124b8:	60fb      	str	r3, [r7, #12]
 80124ba:	69fa      	ldr	r2, [r7, #28]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4413      	add	r3, r2
 80124c0:	61fb      	str	r3, [r7, #28]
 80124c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	4053      	eors	r3, r2
 80124c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124cc:	ea4f 5333 	mov.w	r3, r3, ror #20
 80124d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80124d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124d6:	4413      	add	r3, r2
 80124d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80124da:	68fa      	ldr	r2, [r7, #12]
 80124dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124de:	4053      	eors	r3, r2
 80124e0:	60fb      	str	r3, [r7, #12]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	ea4f 6333 	mov.w	r3, r3, ror #24
 80124e8:	60fb      	str	r3, [r7, #12]
 80124ea:	69fa      	ldr	r2, [r7, #28]
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	4413      	add	r3, r2
 80124f0:	61fb      	str	r3, [r7, #28]
 80124f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	4053      	eors	r3, r2
 80124f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 8012502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012506:	4413      	add	r3, r2
 8012508:	64bb      	str	r3, [r7, #72]	@ 0x48
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801250e:	4053      	eors	r3, r2
 8012510:	60fb      	str	r3, [r7, #12]
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012518:	60fb      	str	r3, [r7, #12]
 801251a:	6a3a      	ldr	r2, [r7, #32]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	4413      	add	r3, r2
 8012520:	623b      	str	r3, [r7, #32]
 8012522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012524:	6a3b      	ldr	r3, [r7, #32]
 8012526:	4053      	eors	r3, r2
 8012528:	637b      	str	r3, [r7, #52]	@ 0x34
 801252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801252c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012530:	637b      	str	r3, [r7, #52]	@ 0x34
 8012532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012536:	4413      	add	r3, r2
 8012538:	64bb      	str	r3, [r7, #72]	@ 0x48
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801253e:	4053      	eors	r3, r2
 8012540:	60fb      	str	r3, [r7, #12]
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012548:	60fb      	str	r3, [r7, #12]
 801254a:	6a3a      	ldr	r2, [r7, #32]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	4413      	add	r3, r2
 8012550:	623b      	str	r3, [r7, #32]
 8012552:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	4053      	eors	r3, r2
 8012558:	637b      	str	r3, [r7, #52]	@ 0x34
 801255a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801255c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012560:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 8012562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012566:	4413      	add	r3, r2
 8012568:	647b      	str	r3, [r7, #68]	@ 0x44
 801256a:	69ba      	ldr	r2, [r7, #24]
 801256c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801256e:	4053      	eors	r3, r2
 8012570:	61bb      	str	r3, [r7, #24]
 8012572:	69bb      	ldr	r3, [r7, #24]
 8012574:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012578:	61bb      	str	r3, [r7, #24]
 801257a:	69fa      	ldr	r2, [r7, #28]
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	4413      	add	r3, r2
 8012580:	61fb      	str	r3, [r7, #28]
 8012582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	4053      	eors	r3, r2
 8012588:	633b      	str	r3, [r7, #48]	@ 0x30
 801258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801258c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012590:	633b      	str	r3, [r7, #48]	@ 0x30
 8012592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012596:	4413      	add	r3, r2
 8012598:	647b      	str	r3, [r7, #68]	@ 0x44
 801259a:	69ba      	ldr	r2, [r7, #24]
 801259c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801259e:	4053      	eors	r3, r2
 80125a0:	61bb      	str	r3, [r7, #24]
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	ea4f 6333 	mov.w	r3, r3, ror #24
 80125a8:	61bb      	str	r3, [r7, #24]
 80125aa:	69fa      	ldr	r2, [r7, #28]
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	4413      	add	r3, r2
 80125b0:	61fb      	str	r3, [r7, #28]
 80125b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	4053      	eors	r3, r2
 80125b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80125ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125bc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80125c0:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 80125c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80125c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c6:	4413      	add	r3, r2
 80125c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80125ca:	697a      	ldr	r2, [r7, #20]
 80125cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125ce:	4053      	eors	r3, r2
 80125d0:	617b      	str	r3, [r7, #20]
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80125d8:	617b      	str	r3, [r7, #20]
 80125da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	4413      	add	r3, r2
 80125e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125e6:	4053      	eors	r3, r2
 80125e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ec:	ea4f 5333 	mov.w	r3, r3, ror #20
 80125f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80125f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f6:	4413      	add	r3, r2
 80125f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80125fa:	697a      	ldr	r2, [r7, #20]
 80125fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125fe:	4053      	eors	r3, r2
 8012600:	617b      	str	r3, [r7, #20]
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012608:	617b      	str	r3, [r7, #20]
 801260a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	4413      	add	r3, r2
 8012610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012616:	4053      	eors	r3, r2
 8012618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801261a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801261c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 8012622:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012626:	4413      	add	r3, r2
 8012628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801262a:	693a      	ldr	r2, [r7, #16]
 801262c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801262e:	4053      	eors	r3, r2
 8012630:	613b      	str	r3, [r7, #16]
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012638:	613b      	str	r3, [r7, #16]
 801263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	4413      	add	r3, r2
 8012640:	627b      	str	r3, [r7, #36]	@ 0x24
 8012642:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012646:	4053      	eors	r3, r2
 8012648:	63bb      	str	r3, [r7, #56]	@ 0x38
 801264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801264c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012652:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012656:	4413      	add	r3, r2
 8012658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801265a:	693a      	ldr	r2, [r7, #16]
 801265c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801265e:	4053      	eors	r3, r2
 8012660:	613b      	str	r3, [r7, #16]
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012668:	613b      	str	r3, [r7, #16]
 801266a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	4413      	add	r3, r2
 8012670:	627b      	str	r3, [r7, #36]	@ 0x24
 8012672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012676:	4053      	eors	r3, r2
 8012678:	63bb      	str	r3, [r7, #56]	@ 0x38
 801267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801267c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012680:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 8012682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012684:	3301      	adds	r3, #1
 8012686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801268a:	2b09      	cmp	r3, #9
 801268c:	f77f ae79 	ble.w	8012382 <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012696:	441a      	add	r2, r3
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3304      	adds	r3, #4
 80126a0:	6819      	ldr	r1, [r3, #0]
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	3304      	adds	r3, #4
 80126a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126a8:	440a      	add	r2, r1
 80126aa:	601a      	str	r2, [r3, #0]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	3308      	adds	r3, #8
 80126b0:	6819      	ldr	r1, [r3, #0]
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	3308      	adds	r3, #8
 80126b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80126b8:	440a      	add	r2, r1
 80126ba:	601a      	str	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	330c      	adds	r3, #12
 80126c0:	6819      	ldr	r1, [r3, #0]
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	330c      	adds	r3, #12
 80126c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126c8:	440a      	add	r2, r1
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3310      	adds	r3, #16
 80126d0:	6819      	ldr	r1, [r3, #0]
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	3310      	adds	r3, #16
 80126d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126d8:	440a      	add	r2, r1
 80126da:	601a      	str	r2, [r3, #0]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	3314      	adds	r3, #20
 80126e0:	6819      	ldr	r1, [r3, #0]
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	3314      	adds	r3, #20
 80126e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126e8:	440a      	add	r2, r1
 80126ea:	601a      	str	r2, [r3, #0]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3318      	adds	r3, #24
 80126f0:	6819      	ldr	r1, [r3, #0]
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	3318      	adds	r3, #24
 80126f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126f8:	440a      	add	r2, r1
 80126fa:	601a      	str	r2, [r3, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	331c      	adds	r3, #28
 8012700:	6819      	ldr	r1, [r3, #0]
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	331c      	adds	r3, #28
 8012706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012708:	440a      	add	r2, r1
 801270a:	601a      	str	r2, [r3, #0]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	3320      	adds	r3, #32
 8012710:	6819      	ldr	r1, [r3, #0]
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	3320      	adds	r3, #32
 8012716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012718:	440a      	add	r2, r1
 801271a:	601a      	str	r2, [r3, #0]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3324      	adds	r3, #36	@ 0x24
 8012720:	6819      	ldr	r1, [r3, #0]
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	3324      	adds	r3, #36	@ 0x24
 8012726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012728:	440a      	add	r2, r1
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	3328      	adds	r3, #40	@ 0x28
 8012730:	6819      	ldr	r1, [r3, #0]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	3328      	adds	r3, #40	@ 0x28
 8012736:	6a3a      	ldr	r2, [r7, #32]
 8012738:	440a      	add	r2, r1
 801273a:	601a      	str	r2, [r3, #0]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	332c      	adds	r3, #44	@ 0x2c
 8012740:	6819      	ldr	r1, [r3, #0]
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	332c      	adds	r3, #44	@ 0x2c
 8012746:	69fa      	ldr	r2, [r7, #28]
 8012748:	440a      	add	r2, r1
 801274a:	601a      	str	r2, [r3, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	3330      	adds	r3, #48	@ 0x30
 8012750:	6819      	ldr	r1, [r3, #0]
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	3330      	adds	r3, #48	@ 0x30
 8012756:	69ba      	ldr	r2, [r7, #24]
 8012758:	440a      	add	r2, r1
 801275a:	601a      	str	r2, [r3, #0]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	3334      	adds	r3, #52	@ 0x34
 8012760:	6819      	ldr	r1, [r3, #0]
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	3334      	adds	r3, #52	@ 0x34
 8012766:	697a      	ldr	r2, [r7, #20]
 8012768:	440a      	add	r2, r1
 801276a:	601a      	str	r2, [r3, #0]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3338      	adds	r3, #56	@ 0x38
 8012770:	6819      	ldr	r1, [r3, #0]
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	3338      	adds	r3, #56	@ 0x38
 8012776:	693a      	ldr	r2, [r7, #16]
 8012778:	440a      	add	r2, r1
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	333c      	adds	r3, #60	@ 0x3c
 8012780:	6819      	ldr	r1, [r3, #0]
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	333c      	adds	r3, #60	@ 0x3c
 8012786:	68fa      	ldr	r2, [r7, #12]
 8012788:	440a      	add	r2, r1
 801278a:	601a      	str	r2, [r3, #0]
}
 801278c:	bf00      	nop
 801278e:	3754      	adds	r7, #84	@ 0x54
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr

08012798 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 8012798:	b480      	push	{r7}
 801279a:	b089      	sub	sp, #36	@ 0x24
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	089b      	lsrs	r3, r3, #2
 80127aa:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 80127ac:	2300      	movs	r3, #0
 80127ae:	61fb      	str	r3, [r7, #28]
 80127b0:	e016      	b.n	80127e0 <xor_block+0x48>
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	4413      	add	r3, r2
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	617b      	str	r3, [r7, #20]
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	4413      	add	r3, r2
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	4053      	eors	r3, r2
 80127cc:	617b      	str	r3, [r7, #20]
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	4413      	add	r3, r2
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	3301      	adds	r3, #1
 80127de:	61fb      	str	r3, [r7, #28]
 80127e0:	69fa      	ldr	r2, [r7, #28]
 80127e2:	69bb      	ldr	r3, [r7, #24]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d3e4      	bcc.n	80127b2 <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	68ba      	ldr	r2, [r7, #8]
 80127f8:	4413      	add	r3, r2
 80127fa:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	4413      	add	r3, r2
 8012804:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	f003 0303 	and.w	r3, r3, #3
 801280c:	2b03      	cmp	r3, #3
 801280e:	d026      	beq.n	801285e <xor_block+0xc6>
 8012810:	2b03      	cmp	r3, #3
 8012812:	d846      	bhi.n	80128a2 <xor_block+0x10a>
 8012814:	2b01      	cmp	r3, #1
 8012816:	d002      	beq.n	801281e <xor_block+0x86>
 8012818:	2b02      	cmp	r3, #2
 801281a:	d00a      	beq.n	8012832 <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 801281c:	e041      	b.n	80128a2 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	781a      	ldrb	r2, [r3, #0]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	b2db      	uxtb	r3, r3
 8012828:	4053      	eors	r3, r2
 801282a:	b2da      	uxtb	r2, r3
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	701a      	strb	r2, [r3, #0]
      break;
 8012830:	e037      	b.n	80128a2 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	781a      	ldrb	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	b2db      	uxtb	r3, r3
 801283c:	4053      	eors	r3, r2
 801283e:	b2da      	uxtb	r2, r3
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	3301      	adds	r3, #1
 8012848:	7819      	ldrb	r1, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	0a1b      	lsrs	r3, r3, #8
 8012850:	b2da      	uxtb	r2, r3
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	3301      	adds	r3, #1
 8012856:	404a      	eors	r2, r1
 8012858:	b2d2      	uxtb	r2, r2
 801285a:	701a      	strb	r2, [r3, #0]
      break;
 801285c:	e021      	b.n	80128a2 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	781a      	ldrb	r2, [r3, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	b2db      	uxtb	r3, r3
 8012868:	4053      	eors	r3, r2
 801286a:	b2da      	uxtb	r2, r3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	3301      	adds	r3, #1
 8012874:	7819      	ldrb	r1, [r3, #0]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	0a1b      	lsrs	r3, r3, #8
 801287c:	b2da      	uxtb	r2, r3
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	3301      	adds	r3, #1
 8012882:	404a      	eors	r2, r1
 8012884:	b2d2      	uxtb	r2, r2
 8012886:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	3302      	adds	r3, #2
 801288c:	7819      	ldrb	r1, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	0c1b      	lsrs	r3, r3, #16
 8012894:	b2da      	uxtb	r2, r3
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	3302      	adds	r3, #2
 801289a:	404a      	eors	r2, r1
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	701a      	strb	r2, [r3, #0]
      break;
 80128a0:	bf00      	nop
}
 80128a2:	bf00      	nop
 80128a4:	3724      	adds	r7, #36	@ 0x24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr

080128ae <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b0aa      	sub	sp, #168	@ 0xa8
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	60f8      	str	r0, [r7, #12]
 80128b6:	60b9      	str	r1, [r7, #8]
 80128b8:	607a      	str	r2, [r7, #4]
 80128ba:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	099b      	lsrs	r3, r3, #6
 80128c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 80128c4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80128c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80128cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80128d0:	6839      	ldr	r1, [r7, #0]
 80128d2:	f7ff fca7 	bl	8012224 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 80128d6:	2300      	movs	r3, #0
 80128d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80128dc:	e03c      	b.n	8012958 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 80128de:	f107 0218 	add.w	r2, r7, #24
 80128e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80128e6:	4611      	mov	r1, r2
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7ff fd03 	bl	80122f4 <core_block>
    increment_counter(state);
 80128ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80128f2:	3301      	adds	r3, #1
 80128f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 80128f8:	2300      	movs	r3, #0
 80128fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80128fe:	e01c      	b.n	801293a <chacha20_xor_stream+0x8c>
 8012900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	68ba      	ldr	r2, [r7, #8]
 8012908:	4413      	add	r3, r2
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	617b      	str	r3, [r7, #20]
 801290e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	f107 0218 	add.w	r2, r7, #24
 8012918:	4413      	add	r3, r2
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	4053      	eors	r3, r2
 8012920:	617b      	str	r3, [r7, #20]
 8012922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	4413      	add	r3, r2
 801292c:	697a      	ldr	r2, [r7, #20]
 801292e:	601a      	str	r2, [r3, #0]
 8012930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012934:	3301      	adds	r3, #1
 8012936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801293a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801293e:	2b0f      	cmp	r3, #15
 8012940:	d9de      	bls.n	8012900 <chacha20_xor_stream+0x52>
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	3340      	adds	r3, #64	@ 0x40
 8012946:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	3340      	adds	r3, #64	@ 0x40
 801294c:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 801294e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012952:	3301      	adds	r3, #1
 8012954:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012958:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801295c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012960:	429a      	cmp	r2, r3
 8012962:	d3bc      	bcc.n	80128de <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801296a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801296e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012972:	2b00      	cmp	r3, #0
 8012974:	d00f      	beq.n	8012996 <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 8012976:	f107 0218 	add.w	r2, r7, #24
 801297a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801297e:	4611      	mov	r1, r2
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff fcb7 	bl	80122f4 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 8012986:	f107 0218 	add.w	r2, r7, #24
 801298a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f7ff ff01 	bl	8012798 <xor_block>
  }
}
 8012996:	bf00      	nop
 8012998:	37a8      	adds	r7, #168	@ 0xa8
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}

0801299e <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801299e:	b580      	push	{r7, lr}
 80129a0:	b0a4      	sub	sp, #144	@ 0x90
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	60f8      	str	r0, [r7, #12]
 80129a6:	60b9      	str	r1, [r7, #8]
 80129a8:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 80129aa:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80129ae:	2300      	movs	r3, #0
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	68b9      	ldr	r1, [r7, #8]
 80129b4:	f7ff fc36 	bl	8012224 <initialize_state>
  core_block(state, result);
 80129b8:	f107 0210 	add.w	r2, r7, #16
 80129bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80129c0:	4611      	mov	r1, r2
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff fc96 	bl	80122f4 <core_block>
  serialize(poly_key, result);
 80129c8:	f107 0310 	add.w	r3, r7, #16
 80129cc:	2220      	movs	r2, #32
 80129ce:	4619      	mov	r1, r3
 80129d0:	68f8      	ldr	r0, [r7, #12]
 80129d2:	f010 ff4c 	bl	802386e <memcpy>
  (void) i;
}
 80129d6:	bf00      	nop
 80129d8:	3790      	adds	r7, #144	@ 0x90
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 80129de:	b480      	push	{r7}
 80129e0:	b083      	sub	sp, #12
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3301      	adds	r3, #1
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 80129f4:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	3302      	adds	r3, #2
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 80129fe:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	3303      	adds	r3, #3
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 8012a08:	4313      	orrs	r3, r2
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	370c      	adds	r7, #12
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a14:	4770      	bx	lr

08012a16 <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 8012a16:	b480      	push	{r7}
 8012a18:	b083      	sub	sp, #12
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	6078      	str	r0, [r7, #4]
 8012a1e:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	b2da      	uxtb	r2, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	0a1a      	lsrs	r2, r3, #8
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	3301      	adds	r3, #1
 8012a30:	b2d2      	uxtb	r2, r2
 8012a32:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	0c1a      	lsrs	r2, r3, #16
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	3302      	adds	r3, #2
 8012a3c:	b2d2      	uxtb	r2, r2
 8012a3e:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	0e1a      	lsrs	r2, r3, #24
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3303      	adds	r3, #3
 8012a48:	b2d2      	uxtb	r2, r2
 8012a4a:	701a      	strb	r2, [r3, #0]
}
 8012a4c:	bf00      	nop
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 8012a66:	6838      	ldr	r0, [r7, #0]
 8012a68:	f7ff ffb9 	bl	80129de <U8TO32>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	3303      	adds	r3, #3
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7ff ffaf 	bl	80129de <U8TO32>
 8012a80:	4603      	mov	r3, r0
 8012a82:	089a      	lsrs	r2, r3, #2
 8012a84:	4b2f      	ldr	r3, [pc, #188]	@ (8012b44 <poly1305_init+0xec>)
 8012a86:	4013      	ands	r3, r2
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	3306      	adds	r3, #6
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7ff ffa4 	bl	80129de <U8TO32>
 8012a96:	4603      	mov	r3, r0
 8012a98:	091a      	lsrs	r2, r3, #4
 8012a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8012b48 <poly1305_init+0xf0>)
 8012a9c:	4013      	ands	r3, r2
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	3309      	adds	r3, #9
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7ff ff99 	bl	80129de <U8TO32>
 8012aac:	4603      	mov	r3, r0
 8012aae:	099a      	lsrs	r2, r3, #6
 8012ab0:	4b26      	ldr	r3, [pc, #152]	@ (8012b4c <poly1305_init+0xf4>)
 8012ab2:	4013      	ands	r3, r2
 8012ab4:	68fa      	ldr	r2, [r7, #12]
 8012ab6:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	330c      	adds	r3, #12
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7ff ff8e 	bl	80129de <U8TO32>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	0a1b      	lsrs	r3, r3, #8
 8012ac6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2200      	movs	r2, #0
 8012ade:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	3310      	adds	r3, #16
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff ff74 	bl	80129de <U8TO32>
 8012af6:	4602      	mov	r2, r0
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	3314      	adds	r3, #20
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7ff ff6c 	bl	80129de <U8TO32>
 8012b06:	4602      	mov	r2, r0
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	3318      	adds	r3, #24
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ff ff64 	bl	80129de <U8TO32>
 8012b16:	4602      	mov	r2, r0
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	331c      	adds	r3, #28
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7ff ff5c 	bl	80129de <U8TO32>
 8012b26:	4602      	mov	r2, r0
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2200      	movs	r2, #0
 8012b36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8012b3a:	bf00      	nop
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	03ffff03 	.word	0x03ffff03
 8012b48:	03ffc0ff 	.word	0x03ffc0ff
 8012b4c:	03f03fff 	.word	0x03f03fff

08012b50 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 8012b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012b54:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8012b5e:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8012b62:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 8012b66:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012b6a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <poly1305_blocks+0x26>
 8012b72:	2300      	movs	r3, #0
 8012b74:	e001      	b.n	8012b7a <poly1305_blocks+0x2a>
 8012b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012b7a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 8012b7e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 8012b88:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 8012b92:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012b96:	689b      	ldr	r3, [r3, #8]
 8012b98:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8012b9c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 8012ba6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 8012bb0:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	4413      	add	r3, r2
 8012bba:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 8012bbe:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8012bc2:	4613      	mov	r3, r2
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	4413      	add	r3, r2
 8012bc8:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8012bcc:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 8012bda:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8012bde:	4613      	mov	r3, r2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	4413      	add	r3, r2
 8012be4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 8012be8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012bec:	695b      	ldr	r3, [r3, #20]
 8012bee:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 8012bf2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012bf6:	699b      	ldr	r3, [r3, #24]
 8012bf8:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 8012bfc:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012c00:	69db      	ldr	r3, [r3, #28]
 8012c02:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 8012c06:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012c0a:	6a1b      	ldr	r3, [r3, #32]
 8012c0c:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 8012c10:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c16:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 8012c1a:	f000 be78 	b.w	801390e <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 8012c1e:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8012c22:	f7ff fedc 	bl	80129de <U8TO32>
 8012c26:	4603      	mov	r3, r0
 8012c28:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012c2c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012c30:	4413      	add	r3, r2
 8012c32:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 8012c36:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012c3a:	3303      	adds	r3, #3
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7ff fece 	bl	80129de <U8TO32>
 8012c42:	4603      	mov	r3, r0
 8012c44:	089b      	lsrs	r3, r3, #2
 8012c46:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012c4a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8012c4e:	4413      	add	r3, r2
 8012c50:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 8012c54:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012c58:	3306      	adds	r3, #6
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff febf 	bl	80129de <U8TO32>
 8012c60:	4603      	mov	r3, r0
 8012c62:	091b      	lsrs	r3, r3, #4
 8012c64:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012c68:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 8012c72:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012c76:	3309      	adds	r3, #9
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7ff feb0 	bl	80129de <U8TO32>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	099b      	lsrs	r3, r3, #6
 8012c82:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012c86:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012c8a:	4413      	add	r3, r2
 8012c8c:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 8012c90:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012c94:	330c      	adds	r3, #12
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ff fea1 	bl	80129de <U8TO32>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	0a1a      	lsrs	r2, r3, #8
 8012ca0:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8012ca4:	431a      	orrs	r2, r3
 8012ca6:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8012caa:	4413      	add	r3, r2
 8012cac:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8012cb0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8012cba:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8012cbe:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8012cc8:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8012ccc:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 8012cd6:	fb02 f203 	mul.w	r2, r2, r3
 8012cda:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8012cde:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 8012ce2:	4601      	mov	r1, r0
 8012ce4:	fb01 f303 	mul.w	r3, r1, r3
 8012ce8:	4413      	add	r3, r2
 8012cea:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8012cee:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 8012cf2:	fba2 1201 	umull	r1, r2, r2, r1
 8012cf6:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8012cfa:	460a      	mov	r2, r1
 8012cfc:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 8012d00:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8012d04:	4413      	add	r3, r2
 8012d06:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8012d0a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8012d0e:	2200      	movs	r2, #0
 8012d10:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8012d14:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8012d18:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8012d22:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8012d26:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8012d2a:	460b      	mov	r3, r1
 8012d2c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8012d30:	fb02 f203 	mul.w	r2, r2, r3
 8012d34:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8012d38:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 8012d3c:	4601      	mov	r1, r0
 8012d3e:	fb01 f303 	mul.w	r3, r1, r3
 8012d42:	4413      	add	r3, r2
 8012d44:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 8012d48:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 8012d4c:	fba2 1201 	umull	r1, r2, r2, r1
 8012d50:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8012d54:	460a      	mov	r2, r1
 8012d56:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 8012d5a:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8012d5e:	4413      	add	r3, r2
 8012d60:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8012d64:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8012d68:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	189b      	adds	r3, r3, r2
 8012d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012d74:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8012d78:	460a      	mov	r2, r1
 8012d7a:	4153      	adcs	r3, r2
 8012d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8012d80:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012d84:	2200      	movs	r2, #0
 8012d86:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8012d8a:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8012d8e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8012d92:	2200      	movs	r2, #0
 8012d94:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8012d98:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8012d9c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8012da0:	460b      	mov	r3, r1
 8012da2:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8012da6:	fb02 f203 	mul.w	r2, r2, r3
 8012daa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8012dae:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 8012db2:	4601      	mov	r1, r0
 8012db4:	fb01 f303 	mul.w	r3, r1, r3
 8012db8:	4413      	add	r3, r2
 8012dba:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8012dbe:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 8012dc2:	fba2 1201 	umull	r1, r2, r2, r1
 8012dc6:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8012dca:	460a      	mov	r2, r1
 8012dcc:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 8012dd0:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8012dd4:	4413      	add	r3, r2
 8012dd6:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8012dda:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8012dde:	2200      	movs	r2, #0
 8012de0:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8012de4:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8012de8:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8012dec:	2200      	movs	r2, #0
 8012dee:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8012df2:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 8012df6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8012e00:	fb02 f203 	mul.w	r2, r2, r3
 8012e04:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8012e08:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 8012e0c:	4601      	mov	r1, r0
 8012e0e:	fb01 f303 	mul.w	r3, r1, r3
 8012e12:	4413      	add	r3, r2
 8012e14:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8012e18:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 8012e1c:	fba2 1201 	umull	r1, r2, r2, r1
 8012e20:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8012e24:	460a      	mov	r2, r1
 8012e26:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 8012e2a:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8012e2e:	4413      	add	r3, r2
 8012e30:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8012e34:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8012e38:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	189b      	adds	r3, r3, r2
 8012e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e42:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8012e46:	460a      	mov	r2, r1
 8012e48:	4153      	adcs	r3, r2
 8012e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012e50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8012e54:	4602      	mov	r2, r0
 8012e56:	189b      	adds	r3, r3, r2
 8012e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012e60:	460a      	mov	r2, r1
 8012e62:	4153      	adcs	r3, r2
 8012e64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8012e68:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8012e72:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8012e76:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8012e80:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8012e84:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8012e88:	460b      	mov	r3, r1
 8012e8a:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8012e8e:	fb02 f203 	mul.w	r2, r2, r3
 8012e92:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8012e96:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 8012e9a:	4601      	mov	r1, r0
 8012e9c:	fb01 f303 	mul.w	r3, r1, r3
 8012ea0:	4413      	add	r3, r2
 8012ea2:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8012ea6:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 8012eaa:	fba2 1201 	umull	r1, r2, r2, r1
 8012eae:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8012eb2:	460a      	mov	r2, r1
 8012eb4:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8012eb8:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8012ebc:	4413      	add	r3, r2
 8012ebe:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8012ec2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012ec6:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8012eca:	4602      	mov	r2, r0
 8012ecc:	189b      	adds	r3, r3, r2
 8012ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012ed4:	460a      	mov	r2, r1
 8012ed6:	4153      	adcs	r3, r2
 8012ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8012eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8012ede:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8012ee2:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8012eec:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8012ef0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8012efa:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8012efe:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8012f02:	460b      	mov	r3, r1
 8012f04:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8012f08:	fb02 f203 	mul.w	r2, r2, r3
 8012f0c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8012f10:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 8012f14:	4601      	mov	r1, r0
 8012f16:	fb01 f303 	mul.w	r3, r1, r3
 8012f1a:	4413      	add	r3, r2
 8012f1c:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8012f20:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8012f24:	fba2 1201 	umull	r1, r2, r2, r1
 8012f28:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8012f2c:	460a      	mov	r2, r1
 8012f2e:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 8012f32:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8012f36:	4413      	add	r3, r2
 8012f38:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8012f3c:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8012f40:	2200      	movs	r2, #0
 8012f42:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8012f46:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8012f4a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8012f4e:	2200      	movs	r2, #0
 8012f50:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8012f54:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8012f58:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8012f62:	fb02 f203 	mul.w	r2, r2, r3
 8012f66:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8012f6a:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 8012f6e:	4601      	mov	r1, r0
 8012f70:	fb01 f303 	mul.w	r3, r1, r3
 8012f74:	4413      	add	r3, r2
 8012f76:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8012f7a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8012f7e:	fba2 1201 	umull	r1, r2, r2, r1
 8012f82:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8012f86:	460a      	mov	r2, r1
 8012f88:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 8012f8c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8012f90:	4413      	add	r3, r2
 8012f92:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8012f96:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8012f9a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	189b      	adds	r3, r3, r2
 8012fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012fa6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8012faa:	460a      	mov	r2, r1
 8012fac:	4153      	adcs	r3, r2
 8012fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8012fb2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8012fbc:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8012fc0:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8012fca:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8012fce:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8012fd2:	460b      	mov	r3, r1
 8012fd4:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8012fd8:	fb02 f203 	mul.w	r2, r2, r3
 8012fdc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8012fe0:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 8012fe4:	4601      	mov	r1, r0
 8012fe6:	fb01 f303 	mul.w	r3, r1, r3
 8012fea:	4413      	add	r3, r2
 8012fec:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8012ff0:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8012ff4:	fba2 1201 	umull	r1, r2, r2, r1
 8012ff8:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 8012ffc:	460a      	mov	r2, r1
 8012ffe:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 8013002:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8013006:	4413      	add	r3, r2
 8013008:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801300c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013010:	2200      	movs	r2, #0
 8013012:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8013016:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 801301a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801301e:	2200      	movs	r2, #0
 8013020:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8013024:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8013028:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 801302c:	460b      	mov	r3, r1
 801302e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8013032:	fb02 f203 	mul.w	r2, r2, r3
 8013036:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801303a:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801303e:	4601      	mov	r1, r0
 8013040:	fb01 f303 	mul.w	r3, r1, r3
 8013044:	4413      	add	r3, r2
 8013046:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801304a:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801304e:	fba2 1201 	umull	r1, r2, r2, r1
 8013052:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8013056:	460a      	mov	r2, r1
 8013058:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801305c:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8013060:	4413      	add	r3, r2
 8013062:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8013066:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801306a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801306e:	4602      	mov	r2, r0
 8013070:	189b      	adds	r3, r3, r2
 8013072:	663b      	str	r3, [r7, #96]	@ 0x60
 8013074:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8013078:	460a      	mov	r2, r1
 801307a:	4153      	adcs	r3, r2
 801307c:	667b      	str	r3, [r7, #100]	@ 0x64
 801307e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013082:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8013086:	4602      	mov	r2, r0
 8013088:	189b      	adds	r3, r3, r2
 801308a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801308e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8013092:	460a      	mov	r2, r1
 8013094:	4153      	adcs	r3, r2
 8013096:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801309a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801309e:	2200      	movs	r2, #0
 80130a0:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80130a4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80130a8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80130ac:	2200      	movs	r2, #0
 80130ae:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 80130b2:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 80130b6:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80130ba:	460b      	mov	r3, r1
 80130bc:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80130c0:	fb02 f203 	mul.w	r2, r2, r3
 80130c4:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80130c8:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 80130cc:	4601      	mov	r1, r0
 80130ce:	fb01 f303 	mul.w	r3, r1, r3
 80130d2:	4413      	add	r3, r2
 80130d4:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80130d8:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 80130dc:	fba2 1201 	umull	r1, r2, r2, r1
 80130e0:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80130e4:	460a      	mov	r2, r1
 80130e6:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 80130ea:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80130ee:	4413      	add	r3, r2
 80130f0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80130f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80130f8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80130fc:	4602      	mov	r2, r0
 80130fe:	189b      	adds	r3, r3, r2
 8013100:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013106:	460a      	mov	r2, r1
 8013108:	4153      	adcs	r3, r2
 801310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8013110:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8013114:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013118:	2200      	movs	r2, #0
 801311a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801311e:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8013122:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8013126:	2200      	movs	r2, #0
 8013128:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801312c:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8013130:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8013134:	460b      	mov	r3, r1
 8013136:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801313a:	fb02 f203 	mul.w	r2, r2, r3
 801313e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8013142:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 8013146:	4601      	mov	r1, r0
 8013148:	fb01 f303 	mul.w	r3, r1, r3
 801314c:	4413      	add	r3, r2
 801314e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8013152:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8013156:	fba2 1201 	umull	r1, r2, r2, r1
 801315a:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801315e:	460a      	mov	r2, r1
 8013160:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 8013164:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8013168:	4413      	add	r3, r2
 801316a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801316e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013172:	2200      	movs	r2, #0
 8013174:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8013178:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801317c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013180:	2200      	movs	r2, #0
 8013182:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8013186:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801318a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801318e:	460b      	mov	r3, r1
 8013190:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8013194:	fb02 f203 	mul.w	r2, r2, r3
 8013198:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801319c:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 80131a0:	4601      	mov	r1, r0
 80131a2:	fb01 f303 	mul.w	r3, r1, r3
 80131a6:	4413      	add	r3, r2
 80131a8:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80131ac:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 80131b0:	fba2 1201 	umull	r1, r2, r2, r1
 80131b4:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80131b8:	460a      	mov	r2, r1
 80131ba:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 80131be:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 80131c2:	4413      	add	r3, r2
 80131c4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80131c8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80131cc:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 80131d0:	4602      	mov	r2, r0
 80131d2:	189b      	adds	r3, r3, r2
 80131d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80131d8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80131dc:	460a      	mov	r2, r1
 80131de:	4153      	adcs	r3, r2
 80131e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 80131e4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80131e8:	2200      	movs	r2, #0
 80131ea:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80131ee:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80131f2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80131f6:	2200      	movs	r2, #0
 80131f8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80131fc:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8013200:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8013204:	460b      	mov	r3, r1
 8013206:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801320a:	fb02 f203 	mul.w	r2, r2, r3
 801320e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8013212:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 8013216:	4601      	mov	r1, r0
 8013218:	fb01 f303 	mul.w	r3, r1, r3
 801321c:	4413      	add	r3, r2
 801321e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8013222:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 8013226:	fba2 1201 	umull	r1, r2, r2, r1
 801322a:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 801322e:	460a      	mov	r2, r1
 8013230:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 8013234:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8013238:	4413      	add	r3, r2
 801323a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801323e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013242:	2200      	movs	r2, #0
 8013244:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8013248:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801324c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013250:	2200      	movs	r2, #0
 8013252:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8013256:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801325a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801325e:	460b      	mov	r3, r1
 8013260:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8013264:	fb02 f203 	mul.w	r2, r2, r3
 8013268:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801326c:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8013270:	4601      	mov	r1, r0
 8013272:	fb01 f303 	mul.w	r3, r1, r3
 8013276:	4413      	add	r3, r2
 8013278:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801327c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8013280:	fba2 1201 	umull	r1, r2, r2, r1
 8013284:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8013288:	460a      	mov	r2, r1
 801328a:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801328e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8013292:	4413      	add	r3, r2
 8013294:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8013298:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801329c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 80132a0:	4602      	mov	r2, r0
 80132a2:	189b      	adds	r3, r3, r2
 80132a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80132a6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80132aa:	460a      	mov	r2, r1
 80132ac:	4153      	adcs	r3, r2
 80132ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80132b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80132b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80132b8:	4602      	mov	r2, r0
 80132ba:	189b      	adds	r3, r3, r2
 80132bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80132c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80132c4:	460a      	mov	r2, r1
 80132c6:	4153      	adcs	r3, r2
 80132c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 80132cc:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80132d0:	2200      	movs	r2, #0
 80132d2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80132d6:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80132da:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80132de:	2200      	movs	r2, #0
 80132e0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80132e4:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80132e8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 80132ec:	460b      	mov	r3, r1
 80132ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80132f2:	fb02 f203 	mul.w	r2, r2, r3
 80132f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80132fa:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 80132fe:	4601      	mov	r1, r0
 8013300:	fb01 f303 	mul.w	r3, r1, r3
 8013304:	4413      	add	r3, r2
 8013306:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801330a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801330e:	fba2 1201 	umull	r1, r2, r2, r1
 8013312:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8013316:	460a      	mov	r2, r1
 8013318:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801331c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8013320:	4413      	add	r3, r2
 8013322:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8013326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801332a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 801332e:	4602      	mov	r2, r0
 8013330:	189b      	adds	r3, r3, r2
 8013332:	633b      	str	r3, [r7, #48]	@ 0x30
 8013334:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013338:	460a      	mov	r2, r1
 801333a:	4153      	adcs	r3, r2
 801333c:	637b      	str	r3, [r7, #52]	@ 0x34
 801333e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8013342:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013346:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801334a:	2200      	movs	r2, #0
 801334c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8013350:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8013354:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013358:	2200      	movs	r2, #0
 801335a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801335e:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8013362:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8013366:	460b      	mov	r3, r1
 8013368:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801336c:	fb02 f203 	mul.w	r2, r2, r3
 8013370:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8013374:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8013378:	4601      	mov	r1, r0
 801337a:	fb01 f303 	mul.w	r3, r1, r3
 801337e:	4413      	add	r3, r2
 8013380:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8013384:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8013388:	fba2 1201 	umull	r1, r2, r2, r1
 801338c:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8013390:	460a      	mov	r2, r1
 8013392:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 8013396:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801339a:	4413      	add	r3, r2
 801339c:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80133a0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80133a4:	2200      	movs	r2, #0
 80133a6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80133aa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80133ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80133b2:	2200      	movs	r2, #0
 80133b4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80133b8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80133bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80133c0:	460b      	mov	r3, r1
 80133c2:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80133c6:	fb02 f203 	mul.w	r2, r2, r3
 80133ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80133ce:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 80133d2:	4601      	mov	r1, r0
 80133d4:	fb01 f303 	mul.w	r3, r1, r3
 80133d8:	4413      	add	r3, r2
 80133da:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80133de:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 80133e2:	fba2 1201 	umull	r1, r2, r2, r1
 80133e6:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80133ea:	460a      	mov	r2, r1
 80133ec:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 80133f0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80133f4:	4413      	add	r3, r2
 80133f6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80133fa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80133fe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8013402:	4602      	mov	r2, r0
 8013404:	189b      	adds	r3, r3, r2
 8013406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801340a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801340e:	460a      	mov	r2, r1
 8013410:	4153      	adcs	r3, r2
 8013412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8013416:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801341a:	2200      	movs	r2, #0
 801341c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8013420:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8013424:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013428:	2200      	movs	r2, #0
 801342a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801342e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8013432:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8013436:	460b      	mov	r3, r1
 8013438:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801343c:	fb02 f203 	mul.w	r2, r2, r3
 8013440:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8013444:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 8013448:	4601      	mov	r1, r0
 801344a:	fb01 f303 	mul.w	r3, r1, r3
 801344e:	4413      	add	r3, r2
 8013450:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8013454:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8013458:	fba2 ab01 	umull	sl, fp, r2, r1
 801345c:	445b      	add	r3, fp
 801345e:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013460:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013464:	2200      	movs	r2, #0
 8013466:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801346a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801346e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013472:	2200      	movs	r2, #0
 8013474:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8013478:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801347c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8013480:	460b      	mov	r3, r1
 8013482:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8013486:	fb02 f203 	mul.w	r2, r2, r3
 801348a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801348e:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 8013492:	4601      	mov	r1, r0
 8013494:	fb01 f303 	mul.w	r3, r1, r3
 8013498:	4413      	add	r3, r2
 801349a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801349e:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 80134a2:	fba2 1201 	umull	r1, r2, r2, r1
 80134a6:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80134aa:	460a      	mov	r2, r1
 80134ac:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 80134b0:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80134b4:	4413      	add	r3, r2
 80134b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80134ba:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 80134be:	460b      	mov	r3, r1
 80134c0:	eb1a 0303 	adds.w	r3, sl, r3
 80134c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80134c6:	4613      	mov	r3, r2
 80134c8:	eb4b 0303 	adc.w	r3, fp, r3
 80134cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80134ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80134d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80134d6:	4602      	mov	r2, r0
 80134d8:	189b      	adds	r3, r3, r2
 80134da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80134de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80134e2:	460a      	mov	r2, r1
 80134e4:	4153      	adcs	r3, r2
 80134e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 80134ea:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80134ee:	2200      	movs	r2, #0
 80134f0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80134f4:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80134f8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80134fc:	2200      	movs	r2, #0
 80134fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8013502:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8013506:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801350a:	460b      	mov	r3, r1
 801350c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8013510:	fb02 f203 	mul.w	r2, r2, r3
 8013514:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8013518:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801351c:	4601      	mov	r1, r0
 801351e:	fb01 f303 	mul.w	r3, r1, r3
 8013522:	4413      	add	r3, r2
 8013524:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8013528:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801352c:	fba2 1201 	umull	r1, r2, r2, r1
 8013530:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8013534:	460a      	mov	r2, r1
 8013536:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801353a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801353e:	4413      	add	r3, r2
 8013540:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013548:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801354c:	4602      	mov	r2, r0
 801354e:	189b      	adds	r3, r3, r2
 8013550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013556:	460a      	mov	r2, r1
 8013558:	4153      	adcs	r3, r2
 801355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801355c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013560:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8013564:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013568:	2200      	movs	r2, #0
 801356a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801356e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8013572:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8013576:	2200      	movs	r2, #0
 8013578:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801357c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8013580:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8013584:	460b      	mov	r3, r1
 8013586:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801358a:	fb02 f203 	mul.w	r2, r2, r3
 801358e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013592:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 8013596:	4601      	mov	r1, r0
 8013598:	fb01 f303 	mul.w	r3, r1, r3
 801359c:	4413      	add	r3, r2
 801359e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80135a2:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80135a6:	fba2 8901 	umull	r8, r9, r2, r1
 80135aa:	444b      	add	r3, r9
 80135ac:	4699      	mov	r9, r3
 80135ae:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80135b2:	2200      	movs	r2, #0
 80135b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80135b8:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80135bc:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80135c0:	2200      	movs	r2, #0
 80135c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80135c6:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80135ca:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80135ce:	460b      	mov	r3, r1
 80135d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80135d4:	fb02 f203 	mul.w	r2, r2, r3
 80135d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80135dc:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 80135e0:	4601      	mov	r1, r0
 80135e2:	fb01 f303 	mul.w	r3, r1, r3
 80135e6:	4413      	add	r3, r2
 80135e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80135ec:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80135f0:	fba2 1201 	umull	r1, r2, r2, r1
 80135f4:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80135f8:	460a      	mov	r2, r1
 80135fa:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80135fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8013602:	4413      	add	r3, r2
 8013604:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013608:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801360c:	460b      	mov	r3, r1
 801360e:	eb18 0303 	adds.w	r3, r8, r3
 8013612:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013616:	4613      	mov	r3, r2
 8013618:	eb49 0303 	adc.w	r3, r9, r3
 801361c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 8013620:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013624:	2200      	movs	r2, #0
 8013626:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801362a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801362e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013632:	2200      	movs	r2, #0
 8013634:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8013638:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801363c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8013640:	460b      	mov	r3, r1
 8013642:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8013646:	fb02 f203 	mul.w	r2, r2, r3
 801364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801364e:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 8013652:	4601      	mov	r1, r0
 8013654:	fb01 f303 	mul.w	r3, r1, r3
 8013658:	4413      	add	r3, r2
 801365a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801365e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8013662:	fba2 4501 	umull	r4, r5, r2, r1
 8013666:	442b      	add	r3, r5
 8013668:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801366a:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801366e:	2200      	movs	r2, #0
 8013670:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8013674:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8013678:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801367c:	2200      	movs	r2, #0
 801367e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8013682:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8013686:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801368a:	460b      	mov	r3, r1
 801368c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8013690:	fb02 f203 	mul.w	r2, r2, r3
 8013694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013698:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801369c:	4601      	mov	r1, r0
 801369e:	fb01 f303 	mul.w	r3, r1, r3
 80136a2:	4413      	add	r3, r2
 80136a4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80136a8:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80136ac:	fba2 1201 	umull	r1, r2, r2, r1
 80136b0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80136b4:	460a      	mov	r2, r1
 80136b6:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80136ba:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80136be:	4413      	add	r3, r2
 80136c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80136c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80136c8:	460b      	mov	r3, r1
 80136ca:	18e3      	adds	r3, r4, r3
 80136cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136ce:	4613      	mov	r3, r2
 80136d0:	eb45 0303 	adc.w	r3, r5, r3
 80136d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80136d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80136da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80136de:	4602      	mov	r2, r0
 80136e0:	189b      	adds	r3, r3, r2
 80136e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80136e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80136ea:	460a      	mov	r2, r1
 80136ec:	4153      	adcs	r3, r2
 80136ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 80136f2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80136f6:	2200      	movs	r2, #0
 80136f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80136fc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8013700:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013704:	2200      	movs	r2, #0
 8013706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801370a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801370e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8013712:	460b      	mov	r3, r1
 8013714:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013718:	fb02 f203 	mul.w	r2, r2, r3
 801371c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8013720:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 8013724:	4601      	mov	r1, r0
 8013726:	fb01 f303 	mul.w	r3, r1, r3
 801372a:	4413      	add	r3, r2
 801372c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013730:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8013734:	fba2 1201 	umull	r1, r2, r2, r1
 8013738:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801373c:	460a      	mov	r2, r1
 801373e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8013742:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013746:	4413      	add	r3, r2
 8013748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801374c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013750:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8013754:	4602      	mov	r2, r0
 8013756:	189b      	adds	r3, r3, r2
 8013758:	623b      	str	r3, [r7, #32]
 801375a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801375e:	460a      	mov	r2, r1
 8013760:	4153      	adcs	r3, r2
 8013762:	627b      	str	r3, [r7, #36]	@ 0x24
 8013764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013768:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801376c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8013770:	f04f 0000 	mov.w	r0, #0
 8013774:	f04f 0100 	mov.w	r1, #0
 8013778:	0e90      	lsrs	r0, r2, #26
 801377a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801377e:	0e99      	lsrs	r1, r3, #26
 8013780:	4603      	mov	r3, r0
 8013782:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 8013786:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801378a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801378e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 8013792:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013796:	2200      	movs	r2, #0
 8013798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801379c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80137a0:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 80137a4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80137a8:	1851      	adds	r1, r2, r1
 80137aa:	61b9      	str	r1, [r7, #24]
 80137ac:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80137b0:	414b      	adcs	r3, r1
 80137b2:	61fb      	str	r3, [r7, #28]
 80137b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80137b8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 80137bc:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 80137c0:	f04f 0000 	mov.w	r0, #0
 80137c4:	f04f 0100 	mov.w	r1, #0
 80137c8:	0e90      	lsrs	r0, r2, #26
 80137ca:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 80137ce:	0e99      	lsrs	r1, r3, #26
 80137d0:	4603      	mov	r3, r0
 80137d2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 80137d6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80137da:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80137de:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 80137e2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80137e6:	2200      	movs	r2, #0
 80137e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80137ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80137f0:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 80137f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80137f8:	1851      	adds	r1, r2, r1
 80137fa:	6139      	str	r1, [r7, #16]
 80137fc:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8013800:	414b      	adcs	r3, r1
 8013802:	617b      	str	r3, [r7, #20]
 8013804:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013808:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801380c:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8013810:	f04f 0000 	mov.w	r0, #0
 8013814:	f04f 0100 	mov.w	r1, #0
 8013818:	0e90      	lsrs	r0, r2, #26
 801381a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801381e:	0e99      	lsrs	r1, r3, #26
 8013820:	4603      	mov	r3, r0
 8013822:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 8013826:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801382a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801382e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 8013832:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013836:	2200      	movs	r2, #0
 8013838:	67bb      	str	r3, [r7, #120]	@ 0x78
 801383a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801383c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8013840:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013842:	1851      	adds	r1, r2, r1
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013848:	414b      	adcs	r3, r1
 801384a:	60fb      	str	r3, [r7, #12]
 801384c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013850:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 8013854:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8013858:	f04f 0000 	mov.w	r0, #0
 801385c:	f04f 0100 	mov.w	r1, #0
 8013860:	0e90      	lsrs	r0, r2, #26
 8013862:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013866:	0e99      	lsrs	r1, r3, #26
 8013868:	4603      	mov	r3, r0
 801386a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801386e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013872:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013876:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801387a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801387e:	2200      	movs	r2, #0
 8013880:	673b      	str	r3, [r7, #112]	@ 0x70
 8013882:	677a      	str	r2, [r7, #116]	@ 0x74
 8013884:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8013888:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801388a:	1851      	adds	r1, r2, r1
 801388c:	6039      	str	r1, [r7, #0]
 801388e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8013890:	414b      	adcs	r3, r1
 8013892:	607b      	str	r3, [r7, #4]
 8013894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013898:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801389c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 80138a0:	f04f 0000 	mov.w	r0, #0
 80138a4:	f04f 0100 	mov.w	r1, #0
 80138a8:	0e90      	lsrs	r0, r2, #26
 80138aa:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 80138ae:	0e99      	lsrs	r1, r3, #26
 80138b0:	4603      	mov	r3, r0
 80138b2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 80138b6:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80138ba:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80138be:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 80138c2:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80138c6:	4613      	mov	r3, r2
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	441a      	add	r2, r3
 80138cc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80138d0:	4413      	add	r3, r2
 80138d2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 80138d6:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80138da:	0e9b      	lsrs	r3, r3, #26
 80138dc:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 80138e0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80138e4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80138e8:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 80138ec:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 80138f0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80138f4:	4413      	add	r3, r2
 80138f6:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 80138fa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80138fe:	3310      	adds	r3, #16
 8013900:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 8013904:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8013908:	3b10      	subs	r3, #16
 801390a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801390e:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8013912:	2b0f      	cmp	r3, #15
 8013914:	f63f a983 	bhi.w	8012c1e <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 8013918:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801391c:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8013920:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 8013922:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013926:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801392a:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801392c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013930:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8013934:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 8013936:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801393a:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801393e:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 8013940:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013944:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8013948:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801394a:	bf00      	nop
 801394c:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 8013950:	46bd      	mov	sp, r7
 8013952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013956 <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 8013956:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801395a:	b0aa      	sub	sp, #168	@ 0xa8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6678      	str	r0, [r7, #100]	@ 0x64
 8013960:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8013962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 8013968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801396e:	2b00      	cmp	r3, #0
 8013970:	d030      	beq.n	80139d4 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 8013972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801397c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013980:	1c53      	adds	r3, r2, #1
 8013982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801398a:	441a      	add	r2, r3
 801398c:	2301      	movs	r3, #1
 801398e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 8013992:	e00d      	b.n	80139b0 <poly1305_finish+0x5a>
 8013994:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8013998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801399c:	4413      	add	r3, r2
 801399e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80139a2:	2300      	movs	r3, #0
 80139a4:	7013      	strb	r3, [r2, #0]
 80139a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80139aa:	3301      	adds	r3, #1
 80139ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80139b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80139b4:	2b0f      	cmp	r3, #15
 80139b6:	d9ed      	bls.n	8013994 <poly1305_finish+0x3e>
    st->final = 1;
 80139b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80139bc:	2301      	movs	r3, #1
 80139be:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 80139c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80139c6:	333c      	adds	r3, #60	@ 0x3c
 80139c8:	2210      	movs	r2, #16
 80139ca:	4619      	mov	r1, r3
 80139cc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80139d0:	f7ff f8be 	bl	8012b50 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 80139d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80139d8:	695b      	ldr	r3, [r3, #20]
 80139da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 80139de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80139e2:	699b      	ldr	r3, [r3, #24]
 80139e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 80139e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 80139f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 80139fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 8013a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013a0a:	0e9b      	lsrs	r3, r3, #26
 8013a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 8013a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013a14:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 8013a1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013a24:	4413      	add	r3, r2
 8013a26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 8013a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013a2e:	0e9b      	lsrs	r3, r3, #26
 8013a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 8013a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013a38:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013a3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 8013a40:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013a48:	4413      	add	r3, r2
 8013a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 8013a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a52:	0e9b      	lsrs	r3, r3, #26
 8013a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 8013a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a5c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013a60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 8013a64:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 8013a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a76:	0e9b      	lsrs	r3, r3, #26
 8013a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 8013a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a80:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 8013a88:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	441a      	add	r2, r3
 8013a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013a96:	4413      	add	r3, r2
 8013a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 8013a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013aa0:	0e9b      	lsrs	r3, r3, #26
 8013aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 8013aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013aaa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 8013ab2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013aba:	4413      	add	r3, r2
 8013abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 8013ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013ac4:	3305      	adds	r3, #5
 8013ac6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 8013aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ace:	0e9b      	lsrs	r3, r3, #26
 8013ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 8013ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ad8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 8013ae0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ae8:	4413      	add	r3, r2
 8013aea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 8013aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013af2:	0e9b      	lsrs	r3, r3, #26
 8013af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 8013af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013afc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 8013b04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b0c:	4413      	add	r3, r2
 8013b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 8013b10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013b12:	0e9b      	lsrs	r3, r3, #26
 8013b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 8013b18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013b1a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 8013b20:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b28:	4413      	add	r3, r2
 8013b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 8013b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b2e:	0e9b      	lsrs	r3, r3, #26
 8013b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 8013b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b36:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 8013b3c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b44:	4413      	add	r3, r2
 8013b46:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 8013b4a:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 8013b4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013b4e:	0fdb      	lsrs	r3, r3, #31
 8013b50:	3b01      	subs	r3, #1
 8013b52:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 8013b54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013b58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b5a:	4013      	ands	r3, r2
 8013b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 8013b60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b66:	4013      	ands	r3, r2
 8013b68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 8013b6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b70:	4013      	ands	r3, r2
 8013b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 8013b74:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b78:	4013      	ands	r3, r2
 8013b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 8013b7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b80:	4013      	ands	r3, r2
 8013b82:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 8013b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b86:	43db      	mvns	r3, r3
 8013b88:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 8013b8a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013b90:	401a      	ands	r2, r3
 8013b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b96:	4313      	orrs	r3, r2
 8013b98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 8013b9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013ba0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013ba2:	401a      	ands	r2, r3
 8013ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 8013bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013bb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013bb4:	401a      	ands	r2, r3
 8013bb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013bb8:	4313      	orrs	r3, r2
 8013bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 8013bbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013bc4:	401a      	ands	r2, r3
 8013bc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013bc8:	4313      	orrs	r3, r2
 8013bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 8013bce:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013bd4:	401a      	ands	r2, r3
 8013bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 8013bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013be2:	069a      	lsls	r2, r3, #26
 8013be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013be8:	4313      	orrs	r3, r2
 8013bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 8013bee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013bf2:	099a      	lsrs	r2, r3, #6
 8013bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013bf8:	051b      	lsls	r3, r3, #20
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 8013c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013c04:	0b1a      	lsrs	r2, r3, #12
 8013c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c0a:	039b      	lsls	r3, r3, #14
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 8013c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c16:	0c9a      	lsrs	r2, r3, #18
 8013c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c1c:	021b      	lsls	r3, r3, #8
 8013c1e:	4313      	orrs	r3, r2
 8013c20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 8013c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013c28:	2200      	movs	r2, #0
 8013c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c2c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8013c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c34:	2200      	movs	r2, #0
 8013c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013c3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8013c40:	4602      	mov	r2, r0
 8013c42:	189b      	adds	r3, r3, r2
 8013c44:	61bb      	str	r3, [r7, #24]
 8013c46:	460b      	mov	r3, r1
 8013c48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c4a:	eb42 0303 	adc.w	r3, r2, r3
 8013c4e:	61fb      	str	r3, [r7, #28]
 8013c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013c54:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 8013c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 8013c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013c62:	2200      	movs	r2, #0
 8013c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c66:	657a      	str	r2, [r7, #84]	@ 0x54
 8013c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c6e:	2200      	movs	r2, #0
 8013c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8013c72:	647a      	str	r2, [r7, #68]	@ 0x44
 8013c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	189c      	adds	r4, r3, r2
 8013c7e:	460b      	mov	r3, r1
 8013c80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013c82:	eb42 0303 	adc.w	r3, r2, r3
 8013c86:	461d      	mov	r5, r3
 8013c88:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8013c8c:	f04f 0000 	mov.w	r0, #0
 8013c90:	f04f 0100 	mov.w	r1, #0
 8013c94:	0018      	movs	r0, r3
 8013c96:	2100      	movs	r1, #0
 8013c98:	1823      	adds	r3, r4, r0
 8013c9a:	613b      	str	r3, [r7, #16]
 8013c9c:	eb45 0301 	adc.w	r3, r5, r1
 8013ca0:	617b      	str	r3, [r7, #20]
 8013ca2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013ca6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 8013caa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 8013cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013cb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8013cc4:	637a      	str	r2, [r7, #52]	@ 0x34
 8013cc6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8013cca:	4623      	mov	r3, r4
 8013ccc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8013cd0:	4602      	mov	r2, r0
 8013cd2:	eb13 0a02 	adds.w	sl, r3, r2
 8013cd6:	462b      	mov	r3, r5
 8013cd8:	460a      	mov	r2, r1
 8013cda:	eb43 0b02 	adc.w	fp, r3, r2
 8013cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8013ce2:	f04f 0200 	mov.w	r2, #0
 8013ce6:	f04f 0300 	mov.w	r3, #0
 8013cea:	000a      	movs	r2, r1
 8013cec:	2300      	movs	r3, #0
 8013cee:	eb1a 0102 	adds.w	r1, sl, r2
 8013cf2:	60b9      	str	r1, [r7, #8]
 8013cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8013cf8:	60fb      	str	r3, [r7, #12]
 8013cfa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013cfe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 8013d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 8013d08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013d10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d18:	2200      	movs	r2, #0
 8013d1a:	623b      	str	r3, [r7, #32]
 8013d1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8013d1e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8013d22:	4623      	mov	r3, r4
 8013d24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013d28:	4602      	mov	r2, r0
 8013d2a:	eb13 0802 	adds.w	r8, r3, r2
 8013d2e:	462b      	mov	r3, r5
 8013d30:	460a      	mov	r2, r1
 8013d32:	eb43 0902 	adc.w	r9, r3, r2
 8013d36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8013d3a:	f04f 0200 	mov.w	r2, #0
 8013d3e:	f04f 0300 	mov.w	r3, #0
 8013d42:	000a      	movs	r2, r1
 8013d44:	2300      	movs	r3, #0
 8013d46:	eb18 0102 	adds.w	r1, r8, r2
 8013d4a:	6039      	str	r1, [r7, #0]
 8013d4c:	eb49 0303 	adc.w	r3, r9, r3
 8013d50:	607b      	str	r3, [r7, #4]
 8013d52:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013d56:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 8013d5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 8013d60:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8013d64:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013d66:	f7fe fe56 	bl	8012a16 <U32TO8>
  U32TO8(mac + 4, h1);
 8013d6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d6c:	3304      	adds	r3, #4
 8013d6e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fe fe4f 	bl	8012a16 <U32TO8>
  U32TO8(mac + 8, h2);
 8013d78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fe fe48 	bl	8012a16 <U32TO8>
  U32TO8(mac + 12, h3);
 8013d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d88:	330c      	adds	r3, #12
 8013d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fe fe41 	bl	8012a16 <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 8013d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d98:	2200      	movs	r2, #0
 8013d9a:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8013d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013da0:	2200      	movs	r2, #0
 8013da2:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8013da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013da8:	2200      	movs	r2, #0
 8013daa:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8013dac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013db0:	2200      	movs	r2, #0
 8013db2:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8013db4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013db8:	2200      	movs	r2, #0
 8013dba:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 8013dbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 8013dc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dc8:	2200      	movs	r2, #0
 8013dca:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 8013dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 8013dd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dd8:	2200      	movs	r2, #0
 8013dda:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 8013ddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013de0:	2200      	movs	r2, #0
 8013de2:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 8013de4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013de8:	2200      	movs	r2, #0
 8013dea:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 8013dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013df0:	2200      	movs	r2, #0
 8013df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 8013df4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013df8:	2200      	movs	r2, #0
 8013dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 8013dfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013e00:	2200      	movs	r2, #0
 8013e02:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8013e04:	bf00      	nop
 8013e06:	37a8      	adds	r7, #168	@ 0xa8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013e0e <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b088      	sub	sp, #32
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	60f8      	str	r0, [r7, #12]
 8013e16:	60b9      	str	r1, [r7, #8]
 8013e18:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d03d      	beq.n	8013ea2 <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e2a:	f1c3 0310 	rsb	r3, r3, #16
 8013e2e:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 8013e30:	69ba      	ldr	r2, [r7, #24]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d901      	bls.n	8013e3c <poly1305_update+0x2e>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	61fb      	str	r3, [r7, #28]
 8013e40:	e00f      	b.n	8013e62 <poly1305_update+0x54>
 8013e42:	68ba      	ldr	r2, [r7, #8]
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	441a      	add	r2, r3
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	440b      	add	r3, r1
 8013e50:	7811      	ldrb	r1, [r2, #0]
 8013e52:	697a      	ldr	r2, [r7, #20]
 8013e54:	4413      	add	r3, r2
 8013e56:	460a      	mov	r2, r1
 8013e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	61fb      	str	r3, [r7, #28]
 8013e62:	69fa      	ldr	r2, [r7, #28]
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d3eb      	bcc.n	8013e42 <poly1305_update+0x34>
    bytes -= want;
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	69bb      	ldr	r3, [r7, #24]
 8013e6e:	1ad3      	subs	r3, r2, r3
 8013e70:	607b      	str	r3, [r7, #4]
    m += want;
 8013e72:	68ba      	ldr	r2, [r7, #8]
 8013e74:	69bb      	ldr	r3, [r7, #24]
 8013e76:	4413      	add	r3, r2
 8013e78:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e7e:	69bb      	ldr	r3, [r7, #24]
 8013e80:	441a      	add	r2, r3
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e8a:	2b0f      	cmp	r3, #15
 8013e8c:	d93e      	bls.n	8013f0c <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	333c      	adds	r3, #60	@ 0x3c
 8013e92:	2210      	movs	r2, #16
 8013e94:	4619      	mov	r1, r3
 8013e96:	6978      	ldr	r0, [r7, #20]
 8013e98:	f7fe fe5a 	bl	8012b50 <poly1305_blocks>
    st->leftover = 0;
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b0f      	cmp	r3, #15
 8013ea6:	d910      	bls.n	8013eca <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f023 030f 	bic.w	r3, r3, #15
 8013eae:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 8013eb0:	693a      	ldr	r2, [r7, #16]
 8013eb2:	68b9      	ldr	r1, [r7, #8]
 8013eb4:	6978      	ldr	r0, [r7, #20]
 8013eb6:	f7fe fe4b 	bl	8012b50 <poly1305_blocks>
    m += want;
 8013eba:	68ba      	ldr	r2, [r7, #8]
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	4413      	add	r3, r2
 8013ec0:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d01e      	beq.n	8013f0e <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	61fb      	str	r3, [r7, #28]
 8013ed4:	e00f      	b.n	8013ef6 <poly1305_update+0xe8>
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	441a      	add	r2, r3
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	440b      	add	r3, r1
 8013ee4:	7811      	ldrb	r1, [r2, #0]
 8013ee6:	697a      	ldr	r2, [r7, #20]
 8013ee8:	4413      	add	r3, r2
 8013eea:	460a      	mov	r2, r1
 8013eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	61fb      	str	r3, [r7, #28]
 8013ef6:	69fa      	ldr	r2, [r7, #28]
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d3eb      	bcc.n	8013ed6 <poly1305_update+0xc8>
    st->leftover += bytes;
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	441a      	add	r2, r3
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8013f0a:	e000      	b.n	8013f0e <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 8013f0c:	bf00      	nop
  }
}
 8013f0e:	3720      	adds	r7, #32
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	f003 030f 	and.w	r3, r3, #15
 8013f24:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d007      	beq.n	8013f3c <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f1c3 0310 	rsb	r3, r3, #16
 8013f32:	461a      	mov	r2, r3
 8013f34:	4903      	ldr	r1, [pc, #12]	@ (8013f44 <pad_if_needed+0x30>)
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff ff69 	bl	8013e0e <poly1305_update>
  }
}
 8013f3c:	bf00      	nop
 8013f3e:	3710      	adds	r7, #16
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	24000d30 	.word	0x24000d30

08013f48 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	60f8      	str	r0, [r7, #12]
 8013f50:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 8013f54:	783b      	ldrb	r3, [r7, #0]
 8013f56:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 8013f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013f5c:	f04f 0200 	mov.w	r2, #0
 8013f60:	f04f 0300 	mov.w	r3, #0
 8013f64:	0a02      	lsrs	r2, r0, #8
 8013f66:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013f6a:	0a0b      	lsrs	r3, r1, #8
 8013f6c:	b2d3      	uxtb	r3, r2
 8013f6e:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 8013f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013f74:	f04f 0200 	mov.w	r2, #0
 8013f78:	f04f 0300 	mov.w	r3, #0
 8013f7c:	0c02      	lsrs	r2, r0, #16
 8013f7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013f82:	0c0b      	lsrs	r3, r1, #16
 8013f84:	b2d3      	uxtb	r3, r2
 8013f86:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 8013f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013f8c:	f04f 0200 	mov.w	r2, #0
 8013f90:	f04f 0300 	mov.w	r3, #0
 8013f94:	0e02      	lsrs	r2, r0, #24
 8013f96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013f9a:	0e0b      	lsrs	r3, r1, #24
 8013f9c:	b2d3      	uxtb	r3, r2
 8013f9e:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 8013fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013fa4:	f04f 0200 	mov.w	r2, #0
 8013fa8:	f04f 0300 	mov.w	r3, #0
 8013fac:	000a      	movs	r2, r1
 8013fae:	2300      	movs	r3, #0
 8013fb0:	b2d3      	uxtb	r3, r2
 8013fb2:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 8013fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013fb8:	f04f 0200 	mov.w	r2, #0
 8013fbc:	f04f 0300 	mov.w	r3, #0
 8013fc0:	0a0a      	lsrs	r2, r1, #8
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	b2d3      	uxtb	r3, r2
 8013fc6:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 8013fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013fcc:	f04f 0200 	mov.w	r2, #0
 8013fd0:	f04f 0300 	mov.w	r3, #0
 8013fd4:	0c0a      	lsrs	r2, r1, #16
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	b2d3      	uxtb	r3, r2
 8013fda:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 8013fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013fe0:	f04f 0200 	mov.w	r2, #0
 8013fe4:	f04f 0300 	mov.w	r3, #0
 8013fe8:	0e0a      	lsrs	r2, r1, #24
 8013fea:	2300      	movs	r3, #0
 8013fec:	b2d3      	uxtb	r3, r2
 8013fee:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 8013ff0:	f107 0310 	add.w	r3, r7, #16
 8013ff4:	2208      	movs	r2, #8
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	68f8      	ldr	r0, [r7, #12]
 8013ffa:	f7ff ff08 	bl	8013e0e <poly1305_update>
}
 8013ffe:	bf00      	nop
 8014000:	3718      	adds	r7, #24
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 8014006:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801400a:	b0b0      	sub	sp, #192	@ 0xc0
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 8014016:	2300      	movs	r3, #0
 8014018:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801401c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8014020:	2200      	movs	r2, #0
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	605a      	str	r2, [r3, #4]
 8014026:	609a      	str	r2, [r3, #8]
 8014028:	60da      	str	r2, [r3, #12]
 801402a:	611a      	str	r2, [r3, #16]
 801402c:	615a      	str	r2, [r3, #20]
 801402e:	619a      	str	r2, [r3, #24]
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 8014030:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8014034:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8014038:	6839      	ldr	r1, [r7, #0]
 801403a:	4618      	mov	r0, r3
 801403c:	f7fe fcaf 	bl	801299e <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 8014040:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8014044:	f107 0314 	add.w	r3, r7, #20
 8014048:	4611      	mov	r1, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f7fe fd04 	bl	8012a58 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 8014050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014054:	2b00      	cmp	r3, #0
 8014056:	d013      	beq.n	8014080 <poly1305_calculate_mac+0x7a>
 8014058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801405c:	2b00      	cmp	r3, #0
 801405e:	d00f      	beq.n	8014080 <poly1305_calculate_mac+0x7a>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 8014060:	f107 0314 	add.w	r3, r7, #20
 8014064:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8014068:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff fece 	bl	8013e0e <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 8014072:	f107 0314 	add.w	r3, r7, #20
 8014076:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801407a:	4618      	mov	r0, r3
 801407c:	f7ff ff4a 	bl	8013f14 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 8014080:	f107 0314 	add.w	r3, r7, #20
 8014084:	687a      	ldr	r2, [r7, #4]
 8014086:	68b9      	ldr	r1, [r7, #8]
 8014088:	4618      	mov	r0, r3
 801408a:	f7ff fec0 	bl	8013e0e <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801408e:	f107 0314 	add.w	r3, r7, #20
 8014092:	6879      	ldr	r1, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	f7ff ff3d 	bl	8013f14 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801409e:	2200      	movs	r2, #0
 80140a0:	4698      	mov	r8, r3
 80140a2:	4691      	mov	r9, r2
 80140a4:	f107 0114 	add.w	r1, r7, #20
 80140a8:	4642      	mov	r2, r8
 80140aa:	464b      	mov	r3, r9
 80140ac:	4608      	mov	r0, r1
 80140ae:	f7ff ff4b 	bl	8013f48 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2200      	movs	r2, #0
 80140b6:	461c      	mov	r4, r3
 80140b8:	4615      	mov	r5, r2
 80140ba:	f107 0114 	add.w	r1, r7, #20
 80140be:	4622      	mov	r2, r4
 80140c0:	462b      	mov	r3, r5
 80140c2:	4608      	mov	r0, r1
 80140c4:	f7ff ff40 	bl	8013f48 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 80140c8:	f107 0314 	add.w	r3, r7, #20
 80140cc:	68f9      	ldr	r1, [r7, #12]
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7ff fc41 	bl	8013956 <poly1305_finish>
}
 80140d4:	bf00      	nop
 80140d6:	37c0      	adds	r7, #192	@ 0xc0
 80140d8:	46bd      	mov	sp, r7
 80140da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080140de <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 80140de:	b580      	push	{r7, lr}
 80140e0:	b08a      	sub	sp, #40	@ 0x28
 80140e2:	af04      	add	r7, sp, #16
 80140e4:	60f8      	str	r0, [r7, #12]
 80140e6:	60b9      	str	r1, [r7, #8]
 80140e8:	607a      	str	r2, [r7, #4]
 80140ea:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 80140ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ee:	3310      	adds	r3, #16
 80140f0:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	4413      	add	r3, r2
 80140f8:	461a      	mov	r2, r3
 80140fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d909      	bls.n	8014114 <mg_chacha20_poly1305_encrypt+0x36>
 8014100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014104:	4413      	add	r3, r2
 8014106:	461a      	mov	r2, r3
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	429a      	cmp	r2, r3
 801410c:	d902      	bls.n	8014114 <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801410e:	f04f 33ff 	mov.w	r3, #4294967295
 8014112:	e018      	b.n	8014146 <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 8014114:	2301      	movs	r3, #1
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f7fe fbc3 	bl	80128ae <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801412c:	18d0      	adds	r0, r2, r3
 801412e:	6a3b      	ldr	r3, [r7, #32]
 8014130:	9302      	str	r3, [sp, #8]
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801413e:	68f9      	ldr	r1, [r7, #12]
 8014140:	f7ff ff61 	bl	8014006 <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 8014144:	697b      	ldr	r3, [r7, #20]
}
 8014146:	4618      	mov	r0, r3
 8014148:	3718      	adds	r7, #24
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}

0801414e <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801414e:	b580      	push	{r7, lr}
 8014150:	b088      	sub	sp, #32
 8014152:	af02      	add	r7, sp, #8
 8014154:	60f8      	str	r0, [r7, #12]
 8014156:	60b9      	str	r1, [r7, #8]
 8014158:	607a      	str	r2, [r7, #4]
 801415a:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801415c:	6a3b      	ldr	r3, [r7, #32]
 801415e:	3b10      	subs	r3, #16
 8014160:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 8014162:	683a      	ldr	r2, [r7, #0]
 8014164:	6a3b      	ldr	r3, [r7, #32]
 8014166:	4413      	add	r3, r2
 8014168:	461a      	mov	r2, r3
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	429a      	cmp	r2, r3
 801416e:	d909      	bls.n	8014184 <mg_chacha20_poly1305_decrypt+0x36>
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	4413      	add	r3, r2
 8014176:	461a      	mov	r2, r3
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d902      	bls.n	8014184 <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801417e:	f04f 33ff 	mov.w	r3, #4294967295
 8014182:	e00a      	b.n	801419a <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 8014184:	2301      	movs	r3, #1
 8014186:	9301      	str	r3, [sp, #4]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	9300      	str	r3, [sp, #0]
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	697a      	ldr	r2, [r7, #20]
 8014190:	6839      	ldr	r1, [r7, #0]
 8014192:	68f8      	ldr	r0, [r7, #12]
 8014194:	f7fe fb8b 	bl	80128ae <chacha20_xor_stream>
  return actual_size;
 8014198:	697b      	ldr	r3, [r7, #20]
}
 801419a:	4618      	mov	r0, r3
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 80141a2:	b480      	push	{r7}
 80141a4:	b085      	sub	sp, #20
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	6078      	str	r0, [r7, #4]
 80141aa:	460b      	mov	r3, r1
 80141ac:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80141ae:	2300      	movs	r3, #0
 80141b0:	73fb      	strb	r3, [r7, #15]
 80141b2:	e00a      	b.n	80141ca <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 80141b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	4413      	add	r3, r2
 80141be:	2200      	movs	r2, #0
 80141c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	3301      	adds	r3, #1
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	73fb      	strb	r3, [r7, #15]
 80141ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80141ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	dbee      	blt.n	80141b4 <mg_uecc_vli_clear+0x12>
  }
}
 80141d6:	bf00      	nop
 80141d8:	bf00      	nop
 80141da:	3714      	adds	r7, #20
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr

080141e4 <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 80141e4:	b480      	push	{r7}
 80141e6:	b085      	sub	sp, #20
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	460b      	mov	r3, r1
 80141ee:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 80141f0:	2300      	movs	r3, #0
 80141f2:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80141f4:	2300      	movs	r3, #0
 80141f6:	72fb      	strb	r3, [r7, #11]
 80141f8:	e00c      	b.n	8014214 <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 80141fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80141fe:	009b      	lsls	r3, r3, #2
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	4413      	add	r3, r2
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	4313      	orrs	r3, r2
 801420a:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801420c:	7afb      	ldrb	r3, [r7, #11]
 801420e:	3301      	adds	r3, #1
 8014210:	b2db      	uxtb	r3, r3
 8014212:	72fb      	strb	r3, [r7, #11]
 8014214:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801421c:	429a      	cmp	r2, r3
 801421e:	dbec      	blt.n	80141fa <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	2b00      	cmp	r3, #0
 8014224:	bf0c      	ite	eq
 8014226:	2301      	moveq	r3, #1
 8014228:	2300      	movne	r3, #0
 801422a:	b2db      	uxtb	r3, r3
}
 801422c:	4618      	mov	r0, r3
 801422e:	3714      	adds	r7, #20
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr

08014238 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	460b      	mov	r3, r1
 8014242:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8014244:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014248:	115b      	asrs	r3, r3, #5
 801424a:	b21b      	sxth	r3, r3
 801424c:	009b      	lsls	r3, r3, #2
 801424e:	687a      	ldr	r2, [r7, #4]
 8014250:	4413      	add	r3, r2
 8014252:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 8014254:	887b      	ldrh	r3, [r7, #2]
 8014256:	f003 031f 	and.w	r3, r3, #31
 801425a:	2101      	movs	r1, #1
 801425c:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8014260:	4013      	ands	r3, r2
}
 8014262:	4618      	mov	r0, r3
 8014264:	370c      	adds	r7, #12
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr

0801426e <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801426e:	b480      	push	{r7}
 8014270:	b085      	sub	sp, #20
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
 8014276:	460b      	mov	r3, r1
 8014278:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801427a:	78fb      	ldrb	r3, [r7, #3]
 801427c:	3b01      	subs	r3, #1
 801427e:	b2db      	uxtb	r3, r3
 8014280:	73fb      	strb	r3, [r7, #15]
 8014282:	e003      	b.n	801428c <vli_numDigits+0x1e>
 8014284:	7bfb      	ldrb	r3, [r7, #15]
 8014286:	3b01      	subs	r3, #1
 8014288:	b2db      	uxtb	r3, r3
 801428a:	73fb      	strb	r3, [r7, #15]
 801428c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014290:	2b00      	cmp	r3, #0
 8014292:	db07      	blt.n	80142a4 <vli_numDigits+0x36>
 8014294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	4413      	add	r3, r2
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d0ef      	beq.n	8014284 <vli_numDigits+0x16>
  }

  return (i + 1);
 80142a4:	7bfb      	ldrb	r3, [r7, #15]
 80142a6:	3301      	adds	r3, #1
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	b25b      	sxtb	r3, r3
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3714      	adds	r7, #20
 80142b0:	46bd      	mov	sp, r7
 80142b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b6:	4770      	bx	lr

080142b8 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b086      	sub	sp, #24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	460b      	mov	r3, r1
 80142c2:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 80142c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80142c8:	4619      	mov	r1, r3
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f7ff ffcf 	bl	801426e <vli_numDigits>
 80142d0:	4603      	mov	r3, r0
 80142d2:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 80142d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d101      	bne.n	80142e0 <mg_uecc_vli_numBits+0x28>
    return 0;
 80142dc:	2300      	movs	r3, #0
 80142de:	e01f      	b.n	8014320 <mg_uecc_vli_numBits+0x68>
  }

  digit = vli[num_digits - 1];
 80142e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80142e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80142e8:	4413      	add	r3, r2
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	4413      	add	r3, r2
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80142f4:	2300      	movs	r3, #0
 80142f6:	617b      	str	r3, [r7, #20]
 80142f8:	e005      	b.n	8014306 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	085b      	lsrs	r3, r3, #1
 80142fe:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	3301      	adds	r3, #1
 8014304:	617b      	str	r3, [r7, #20]
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1f6      	bne.n	80142fa <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801430c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014310:	3b01      	subs	r3, #1
 8014312:	015b      	lsls	r3, r3, #5
 8014314:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801431a:	4413      	add	r3, r2
 801431c:	b29b      	uxth	r3, r3
 801431e:	b21b      	sxth	r3, r3
}
 8014320:	4618      	mov	r0, r3
 8014322:	3718      	adds	r7, #24
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 8014328:	b480      	push	{r7}
 801432a:	b087      	sub	sp, #28
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	4613      	mov	r3, r2
 8014334:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8014336:	2300      	movs	r3, #0
 8014338:	75fb      	strb	r3, [r7, #23]
 801433a:	e00f      	b.n	801435c <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801433c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	68ba      	ldr	r2, [r7, #8]
 8014344:	441a      	add	r2, r3
 8014346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	68f9      	ldr	r1, [r7, #12]
 801434e:	440b      	add	r3, r1
 8014350:	6812      	ldr	r2, [r2, #0]
 8014352:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8014354:	7dfb      	ldrb	r3, [r7, #23]
 8014356:	3301      	adds	r3, #1
 8014358:	b2db      	uxtb	r3, r3
 801435a:	75fb      	strb	r3, [r7, #23]
 801435c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014364:	429a      	cmp	r2, r3
 8014366:	dbe9      	blt.n	801433c <mg_uecc_vli_set+0x14>
  }
}
 8014368:	bf00      	nop
 801436a:	bf00      	nop
 801436c:	371c      	adds	r7, #28
 801436e:	46bd      	mov	sp, r7
 8014370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014374:	4770      	bx	lr

08014376 <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 8014376:	b480      	push	{r7}
 8014378:	b087      	sub	sp, #28
 801437a:	af00      	add	r7, sp, #0
 801437c:	60f8      	str	r0, [r7, #12]
 801437e:	60b9      	str	r1, [r7, #8]
 8014380:	4613      	mov	r3, r2
 8014382:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 8014384:	79fb      	ldrb	r3, [r7, #7]
 8014386:	3b01      	subs	r3, #1
 8014388:	b2db      	uxtb	r3, r3
 801438a:	75fb      	strb	r3, [r7, #23]
 801438c:	e024      	b.n	80143d8 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801438e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	68fa      	ldr	r2, [r7, #12]
 8014396:	4413      	add	r3, r2
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	68b9      	ldr	r1, [r7, #8]
 80143a2:	440b      	add	r3, r1
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d901      	bls.n	80143ae <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 80143aa:	2301      	movs	r3, #1
 80143ac:	e019      	b.n	80143e2 <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 80143ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143b2:	009b      	lsls	r3, r3, #2
 80143b4:	68fa      	ldr	r2, [r7, #12]
 80143b6:	4413      	add	r3, r2
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	68b9      	ldr	r1, [r7, #8]
 80143c2:	440b      	add	r3, r1
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d202      	bcs.n	80143d0 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 80143ca:	f04f 33ff 	mov.w	r3, #4294967295
 80143ce:	e008      	b.n	80143e2 <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 80143d0:	7dfb      	ldrb	r3, [r7, #23]
 80143d2:	3b01      	subs	r3, #1
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	75fb      	strb	r3, [r7, #23]
 80143d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	dad6      	bge.n	801438e <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 80143e0:	2300      	movs	r3, #0
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	371c      	adds	r7, #28
 80143e6:	46bd      	mov	sp, r7
 80143e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ec:	4770      	bx	lr

080143ee <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 80143ee:	b480      	push	{r7}
 80143f0:	b087      	sub	sp, #28
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	60f8      	str	r0, [r7, #12]
 80143f6:	60b9      	str	r1, [r7, #8]
 80143f8:	4613      	mov	r3, r2
 80143fa:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 80143fc:	2300      	movs	r3, #0
 80143fe:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 8014400:	79fb      	ldrb	r3, [r7, #7]
 8014402:	3b01      	subs	r3, #1
 8014404:	b2db      	uxtb	r3, r3
 8014406:	74fb      	strb	r3, [r7, #19]
 8014408:	e013      	b.n	8014432 <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801440a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	4413      	add	r3, r2
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801441a:	009b      	lsls	r3, r3, #2
 801441c:	68b9      	ldr	r1, [r7, #8]
 801441e:	440b      	add	r3, r1
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	4053      	eors	r3, r2
 8014424:	697a      	ldr	r2, [r7, #20]
 8014426:	4313      	orrs	r3, r2
 8014428:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801442a:	7cfb      	ldrb	r3, [r7, #19]
 801442c:	3b01      	subs	r3, #1
 801442e:	b2db      	uxtb	r3, r3
 8014430:	74fb      	strb	r3, [r7, #19]
 8014432:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014436:	2b00      	cmp	r3, #0
 8014438:	dae7      	bge.n	801440a <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	2b00      	cmp	r3, #0
 801443e:	bf0c      	ite	eq
 8014440:	2301      	moveq	r3, #1
 8014442:	2300      	movne	r3, #0
 8014444:	b2db      	uxtb	r3, r3
}
 8014446:	4618      	mov	r0, r3
 8014448:	371c      	adds	r7, #28
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr

08014452 <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 8014452:	b580      	push	{r7, lr}
 8014454:	b08e      	sub	sp, #56	@ 0x38
 8014456:	af00      	add	r7, sp, #0
 8014458:	60f8      	str	r0, [r7, #12]
 801445a:	60b9      	str	r1, [r7, #8]
 801445c:	4613      	mov	r3, r2
 801445e:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 8014460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014464:	f107 0010 	add.w	r0, r7, #16
 8014468:	68ba      	ldr	r2, [r7, #8]
 801446a:	68f9      	ldr	r1, [r7, #12]
 801446c:	f000 f896 	bl	801459c <mg_uecc_vli_sub>
 8014470:	4603      	mov	r3, r0
 8014472:	2b00      	cmp	r3, #0
 8014474:	bf14      	ite	ne
 8014476:	2301      	movne	r3, #1
 8014478:	2300      	moveq	r3, #0
 801447a:	b2db      	uxtb	r3, r3
 801447c:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801447e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014482:	f107 0310 	add.w	r3, r7, #16
 8014486:	4611      	mov	r1, r2
 8014488:	4618      	mov	r0, r3
 801448a:	f7ff feab 	bl	80141e4 <mg_uecc_vli_isZero>
 801448e:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 8014490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014492:	2b00      	cmp	r3, #0
 8014494:	bf0c      	ite	eq
 8014496:	2301      	moveq	r3, #1
 8014498:	2300      	movne	r3, #0
 801449a:	b2db      	uxtb	r3, r3
 801449c:	461a      	mov	r2, r3
 801449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144a0:	b2db      	uxtb	r3, r3
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	b25b      	sxtb	r3, r3
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3738      	adds	r7, #56	@ 0x38
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 80144b4:	b480      	push	{r7}
 80144b6:	b087      	sub	sp, #28
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 80144c4:	2300      	movs	r3, #0
 80144c6:	617b      	str	r3, [r7, #20]

  vli += num_words;
 80144c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	4413      	add	r3, r2
 80144d2:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 80144d4:	e00b      	b.n	80144ee <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	085a      	lsrs	r2, r3, #1
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	431a      	orrs	r2, r3
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	07db      	lsls	r3, r3, #31
 80144ec:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	1f1a      	subs	r2, r3, #4
 80144f2:	607a      	str	r2, [r7, #4]
 80144f4:	693a      	ldr	r2, [r7, #16]
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d3ed      	bcc.n	80144d6 <mg_uecc_vli_rshift1+0x22>
  }
}
 80144fa:	bf00      	nop
 80144fc:	bf00      	nop
 80144fe:	371c      	adds	r7, #28
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 8014508:	b480      	push	{r7}
 801450a:	b089      	sub	sp, #36	@ 0x24
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	60b9      	str	r1, [r7, #8]
 8014512:	607a      	str	r2, [r7, #4]
 8014514:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 8014516:	2300      	movs	r3, #0
 8014518:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801451a:	2300      	movs	r3, #0
 801451c:	76fb      	strb	r3, [r7, #27]
 801451e:	e030      	b.n	8014582 <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 8014520:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014524:	009b      	lsls	r3, r3, #2
 8014526:	68ba      	ldr	r2, [r7, #8]
 8014528:	4413      	add	r3, r2
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	6879      	ldr	r1, [r7, #4]
 8014534:	440b      	add	r3, r1
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	4413      	add	r3, r2
 801453a:	69fa      	ldr	r2, [r7, #28]
 801453c:	4413      	add	r3, r2
 801453e:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 8014540:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	68ba      	ldr	r2, [r7, #8]
 8014548:	4413      	add	r3, r2
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	697a      	ldr	r2, [r7, #20]
 801454e:	429a      	cmp	r2, r3
 8014550:	d00c      	beq.n	801456c <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 8014552:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014556:	009b      	lsls	r3, r3, #2
 8014558:	68ba      	ldr	r2, [r7, #8]
 801455a:	4413      	add	r3, r2
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	697a      	ldr	r2, [r7, #20]
 8014560:	429a      	cmp	r2, r3
 8014562:	bf34      	ite	cc
 8014564:	2301      	movcc	r3, #1
 8014566:	2300      	movcs	r3, #0
 8014568:	b2db      	uxtb	r3, r3
 801456a:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801456c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	4413      	add	r3, r2
 8014576:	697a      	ldr	r2, [r7, #20]
 8014578:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801457a:	7efb      	ldrb	r3, [r7, #27]
 801457c:	3301      	adds	r3, #1
 801457e:	b2db      	uxtb	r3, r3
 8014580:	76fb      	strb	r3, [r7, #27]
 8014582:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8014586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801458a:	429a      	cmp	r2, r3
 801458c:	dbc8      	blt.n	8014520 <mg_uecc_vli_add+0x18>
  }
  return carry;
 801458e:	69fb      	ldr	r3, [r7, #28]
}
 8014590:	4618      	mov	r0, r3
 8014592:	3724      	adds	r7, #36	@ 0x24
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr

0801459c <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801459c:	b480      	push	{r7}
 801459e:	b089      	sub	sp, #36	@ 0x24
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	60f8      	str	r0, [r7, #12]
 80145a4:	60b9      	str	r1, [r7, #8]
 80145a6:	607a      	str	r2, [r7, #4]
 80145a8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 80145aa:	2300      	movs	r3, #0
 80145ac:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80145ae:	2300      	movs	r3, #0
 80145b0:	76fb      	strb	r3, [r7, #27]
 80145b2:	e030      	b.n	8014616 <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 80145b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145b8:	009b      	lsls	r3, r3, #2
 80145ba:	68ba      	ldr	r2, [r7, #8]
 80145bc:	4413      	add	r3, r2
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145c4:	009b      	lsls	r3, r3, #2
 80145c6:	6879      	ldr	r1, [r7, #4]
 80145c8:	440b      	add	r3, r1
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	1ad2      	subs	r2, r2, r3
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	1ad3      	subs	r3, r2, r3
 80145d2:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 80145d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	68ba      	ldr	r2, [r7, #8]
 80145dc:	4413      	add	r3, r2
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	697a      	ldr	r2, [r7, #20]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d00c      	beq.n	8014600 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 80145e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	4413      	add	r3, r2
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	697a      	ldr	r2, [r7, #20]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	bf8c      	ite	hi
 80145f8:	2301      	movhi	r3, #1
 80145fa:	2300      	movls	r3, #0
 80145fc:	b2db      	uxtb	r3, r3
 80145fe:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 8014600:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	68fa      	ldr	r2, [r7, #12]
 8014608:	4413      	add	r3, r2
 801460a:	697a      	ldr	r2, [r7, #20]
 801460c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801460e:	7efb      	ldrb	r3, [r7, #27]
 8014610:	3301      	adds	r3, #1
 8014612:	b2db      	uxtb	r3, r3
 8014614:	76fb      	strb	r3, [r7, #27]
 8014616:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801461a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801461e:	429a      	cmp	r2, r3
 8014620:	dbc8      	blt.n	80145b4 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 8014622:	69fb      	ldr	r3, [r7, #28]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3724      	adds	r7, #36	@ 0x24
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 8014630:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014634:	b091      	sub	sp, #68	@ 0x44
 8014636:	af00      	add	r7, sp, #0
 8014638:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801463a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801463c:	627a      	str	r2, [r7, #36]	@ 0x24
 801463e:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 8014640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014642:	2200      	movs	r2, #0
 8014644:	4698      	mov	r8, r3
 8014646:	4691      	mov	r9, r2
 8014648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801464a:	2200      	movs	r2, #0
 801464c:	469a      	mov	sl, r3
 801464e:	4693      	mov	fp, r2
 8014650:	fb0a f209 	mul.w	r2, sl, r9
 8014654:	fb08 f30b 	mul.w	r3, r8, fp
 8014658:	4413      	add	r3, r2
 801465a:	fba8 450a 	umull	r4, r5, r8, sl
 801465e:	442b      	add	r3, r5
 8014660:	461d      	mov	r5, r3
 8014662:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 8014666:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801466a:	6a3b      	ldr	r3, [r7, #32]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2200      	movs	r2, #0
 8014670:	61bb      	str	r3, [r7, #24]
 8014672:	61fa      	str	r2, [r7, #28]
 8014674:	f04f 0200 	mov.w	r2, #0
 8014678:	f04f 0300 	mov.w	r3, #0
 801467c:	69b9      	ldr	r1, [r7, #24]
 801467e:	000b      	movs	r3, r1
 8014680:	2200      	movs	r2, #0
 8014682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014684:	6809      	ldr	r1, [r1, #0]
 8014686:	2000      	movs	r0, #0
 8014688:	6139      	str	r1, [r7, #16]
 801468a:	6178      	str	r0, [r7, #20]
 801468c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014690:	4621      	mov	r1, r4
 8014692:	4311      	orrs	r1, r2
 8014694:	60b9      	str	r1, [r7, #8]
 8014696:	4629      	mov	r1, r5
 8014698:	4319      	orrs	r1, r3
 801469a:	60f9      	str	r1, [r7, #12]
 801469c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80146a0:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 80146a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80146a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80146ac:	1884      	adds	r4, r0, r2
 80146ae:	603c      	str	r4, [r7, #0]
 80146b0:	eb41 0303 	adc.w	r3, r1, r3
 80146b4:	607b      	str	r3, [r7, #4]
 80146b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80146ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 80146be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80146c0:	681c      	ldr	r4, [r3, #0]
 80146c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80146c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80146ca:	4290      	cmp	r0, r2
 80146cc:	eb71 0303 	sbcs.w	r3, r1, r3
 80146d0:	bf34      	ite	cc
 80146d2:	2301      	movcc	r3, #1
 80146d4:	2300      	movcs	r3, #0
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	18e2      	adds	r2, r4, r3
 80146da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80146dc:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 80146de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80146e2:	f04f 0200 	mov.w	r2, #0
 80146e6:	f04f 0300 	mov.w	r3, #0
 80146ea:	000a      	movs	r2, r1
 80146ec:	2300      	movs	r3, #0
 80146ee:	6a3b      	ldr	r3, [r7, #32]
 80146f0:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 80146f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f6:	601a      	str	r2, [r3, #0]
#endif
}
 80146f8:	bf00      	nop
 80146fa:	3744      	adds	r7, #68	@ 0x44
 80146fc:	46bd      	mov	sp, r7
 80146fe:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014702:	4770      	bx	lr

08014704 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 8014704:	b590      	push	{r4, r7, lr}
 8014706:	b08b      	sub	sp, #44	@ 0x2c
 8014708:	af02      	add	r7, sp, #8
 801470a:	60f8      	str	r0, [r7, #12]
 801470c:	60b9      	str	r1, [r7, #8]
 801470e:	607a      	str	r2, [r7, #4]
 8014710:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 8014712:	2300      	movs	r3, #0
 8014714:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 8014716:	2300      	movs	r3, #0
 8014718:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801471a:	2300      	movs	r3, #0
 801471c:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801471e:	2300      	movs	r3, #0
 8014720:	77bb      	strb	r3, [r7, #30]
 8014722:	e036      	b.n	8014792 <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 8014724:	2300      	movs	r3, #0
 8014726:	77fb      	strb	r3, [r7, #31]
 8014728:	e01c      	b.n	8014764 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801472a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801472e:	009b      	lsls	r3, r3, #2
 8014730:	68ba      	ldr	r2, [r7, #8]
 8014732:	4413      	add	r3, r2
 8014734:	6818      	ldr	r0, [r3, #0]
 8014736:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801473a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801473e:	1ad3      	subs	r3, r2, r3
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	4413      	add	r3, r2
 8014746:	6819      	ldr	r1, [r3, #0]
 8014748:	f107 0414 	add.w	r4, r7, #20
 801474c:	f107 0218 	add.w	r2, r7, #24
 8014750:	f107 0310 	add.w	r3, r7, #16
 8014754:	9300      	str	r3, [sp, #0]
 8014756:	4623      	mov	r3, r4
 8014758:	f7ff ff6a 	bl	8014630 <muladd>
    for (i = 0; i <= k; ++i) {
 801475c:	7ffb      	ldrb	r3, [r7, #31]
 801475e:	3301      	adds	r3, #1
 8014760:	b2db      	uxtb	r3, r3
 8014762:	77fb      	strb	r3, [r7, #31]
 8014764:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8014768:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801476c:	429a      	cmp	r2, r3
 801476e:	dddc      	ble.n	801472a <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 8014770:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	68fa      	ldr	r2, [r7, #12]
 8014778:	4413      	add	r3, r2
 801477a:	69ba      	ldr	r2, [r7, #24]
 801477c:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8014786:	2300      	movs	r3, #0
 8014788:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801478a:	7fbb      	ldrb	r3, [r7, #30]
 801478c:	3301      	adds	r3, #1
 801478e:	b2db      	uxtb	r3, r3
 8014790:	77bb      	strb	r3, [r7, #30]
 8014792:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801479a:	429a      	cmp	r2, r3
 801479c:	dbc2      	blt.n	8014724 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801479e:	78fb      	ldrb	r3, [r7, #3]
 80147a0:	77bb      	strb	r3, [r7, #30]
 80147a2:	e03b      	b.n	801481c <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 80147a4:	7fba      	ldrb	r2, [r7, #30]
 80147a6:	78fb      	ldrb	r3, [r7, #3]
 80147a8:	1ad3      	subs	r3, r2, r3
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	3301      	adds	r3, #1
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	77fb      	strb	r3, [r7, #31]
 80147b2:	e01c      	b.n	80147ee <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 80147b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	68ba      	ldr	r2, [r7, #8]
 80147bc:	4413      	add	r3, r2
 80147be:	6818      	ldr	r0, [r3, #0]
 80147c0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80147c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80147c8:	1ad3      	subs	r3, r2, r3
 80147ca:	009b      	lsls	r3, r3, #2
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	4413      	add	r3, r2
 80147d0:	6819      	ldr	r1, [r3, #0]
 80147d2:	f107 0414 	add.w	r4, r7, #20
 80147d6:	f107 0218 	add.w	r2, r7, #24
 80147da:	f107 0310 	add.w	r3, r7, #16
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	4623      	mov	r3, r4
 80147e2:	f7ff ff25 	bl	8014630 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 80147e6:	7ffb      	ldrb	r3, [r7, #31]
 80147e8:	3301      	adds	r3, #1
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	77fb      	strb	r3, [r7, #31]
 80147ee:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80147f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	dbdc      	blt.n	80147b4 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 80147fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	4413      	add	r3, r2
 8014804:	69ba      	ldr	r2, [r7, #24]
 8014806:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8014810:	2300      	movs	r3, #0
 8014812:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8014814:	7fbb      	ldrb	r3, [r7, #30]
 8014816:	3301      	adds	r3, #1
 8014818:	b2db      	uxtb	r3, r3
 801481a:	77bb      	strb	r3, [r7, #30]
 801481c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014824:	005b      	lsls	r3, r3, #1
 8014826:	3b01      	subs	r3, #1
 8014828:	429a      	cmp	r2, r3
 801482a:	dbbb      	blt.n	80147a4 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801482c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014830:	00db      	lsls	r3, r3, #3
 8014832:	3b04      	subs	r3, #4
 8014834:	68fa      	ldr	r2, [r7, #12]
 8014836:	4413      	add	r3, r2
 8014838:	69ba      	ldr	r2, [r7, #24]
 801483a:	601a      	str	r2, [r3, #0]
}
 801483c:	bf00      	nop
 801483e:	3724      	adds	r7, #36	@ 0x24
 8014840:	46bd      	mov	sp, r7
 8014842:	bd90      	pop	{r4, r7, pc}

08014844 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
 8014850:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 8014852:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	68b9      	ldr	r1, [r7, #8]
 801485a:	68f8      	ldr	r0, [r7, #12]
 801485c:	f7ff fe54 	bl	8014508 <mg_uecc_vli_add>
 8014860:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d109      	bne.n	801487c <mg_uecc_vli_modAdd+0x38>
 8014868:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801486c:	461a      	mov	r2, r3
 801486e:	68f9      	ldr	r1, [r7, #12]
 8014870:	6838      	ldr	r0, [r7, #0]
 8014872:	f7ff fd80 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8014876:	4603      	mov	r3, r0
 8014878:	2b01      	cmp	r3, #1
 801487a:	d006      	beq.n	801488a <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801487c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014880:	683a      	ldr	r2, [r7, #0]
 8014882:	68f9      	ldr	r1, [r7, #12]
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff fe89 	bl	801459c <mg_uecc_vli_sub>
  }
}
 801488a:	bf00      	nop
 801488c:	3718      	adds	r7, #24
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014892:	b580      	push	{r7, lr}
 8014894:	b086      	sub	sp, #24
 8014896:	af00      	add	r7, sp, #0
 8014898:	60f8      	str	r0, [r7, #12]
 801489a:	60b9      	str	r1, [r7, #8]
 801489c:	607a      	str	r2, [r7, #4]
 801489e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 80148a0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	68b9      	ldr	r1, [r7, #8]
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f7ff fe77 	bl	801459c <mg_uecc_vli_sub>
 80148ae:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d006      	beq.n	80148c4 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 80148b6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80148ba:	683a      	ldr	r2, [r7, #0]
 80148bc:	68f9      	ldr	r1, [r7, #12]
 80148be:	68f8      	ldr	r0, [r7, #12]
 80148c0:	f7ff fe22 	bl	8014508 <mg_uecc_vli_add>
  }
}
 80148c4:	bf00      	nop
 80148c6:	3718      	adds	r7, #24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b0ad      	sub	sp, #180	@ 0xb4
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 80148da:	f107 0318 	add.w	r3, r7, #24
 80148de:	613b      	str	r3, [r7, #16]
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 80148e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	019b      	lsls	r3, r3, #6
 80148ec:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 80148ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80148f2:	4619      	mov	r1, r3
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f7ff fcdf 	bl	80142b8 <mg_uecc_vli_numBits>
 80148fa:	4603      	mov	r3, r0
 80148fc:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 80148fe:	1ae3      	subs	r3, r4, r3
 8014900:	b29b      	uxth	r3, r3
 8014902:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 8014906:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801490a:	2b00      	cmp	r3, #0
 801490c:	da00      	bge.n	8014910 <mg_uecc_vli_mmod+0x44>
 801490e:	331f      	adds	r3, #31
 8014910:	115b      	asrs	r3, r3, #5
 8014912:	b21b      	sxth	r3, r3
 8014914:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 8014918:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801491c:	425a      	negs	r2, r3
 801491e:	f003 031f 	and.w	r3, r3, #31
 8014922:	f002 021f 	and.w	r2, r2, #31
 8014926:	bf58      	it	pl
 8014928:	4253      	negpl	r3, r2
 801492a:	b21b      	sxth	r3, r3
 801492c:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 8014936:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801493a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801493e:	4611      	mov	r1, r2
 8014940:	4618      	mov	r0, r3
 8014942:	f7ff fc2e 	bl	80141a2 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 8014946:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801494a:	2b00      	cmp	r3, #0
 801494c:	dd34      	ble.n	80149b8 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801494e:	2300      	movs	r3, #0
 8014950:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014954:	e029      	b.n	80149aa <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8014956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	687a      	ldr	r2, [r7, #4]
 801495e:	4413      	add	r3, r2
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014966:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801496a:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801496e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014972:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8014974:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014978:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801497a:	009b      	lsls	r3, r3, #2
 801497c:	33b0      	adds	r3, #176	@ 0xb0
 801497e:	443b      	add	r3, r7
 8014980:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 8014984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	687a      	ldr	r2, [r7, #4]
 801498c:	4413      	add	r3, r2
 801498e:	681a      	ldr	r2, [r3, #0]
 8014990:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014994:	f1c3 0320 	rsb	r3, r3, #32
 8014998:	fa22 f303 	lsr.w	r3, r2, r3
 801499c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 80149a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80149a4:	3301      	adds	r3, #1
 80149a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80149aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d3cf      	bcc.n	8014956 <mg_uecc_vli_mmod+0x8a>
 80149b6:	e00b      	b.n	80149d0 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 80149b8:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 80149bc:	009b      	lsls	r3, r3, #2
 80149be:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80149c2:	4413      	add	r3, r2
 80149c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80149c8:	6879      	ldr	r1, [r7, #4]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7ff fcac 	bl	8014328 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 80149d0:	2301      	movs	r3, #1
 80149d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80149d6:	e09f      	b.n	8014b18 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 80149d8:	2300      	movs	r3, #0
 80149da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 80149de:	2300      	movs	r3, #0
 80149e0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80149e4:	e053      	b.n	8014a8e <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 80149e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	33b0      	adds	r3, #176	@ 0xb0
 80149ee:	443b      	add	r3, r7
 80149f0:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80149f4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	4413      	add	r3, r2
 80149fc:	681a      	ldr	r2, [r3, #0]
 80149fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	33b0      	adds	r3, #176	@ 0xb0
 8014a06:	443b      	add	r3, r7
 8014a08:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8014a0c:	1ad2      	subs	r2, r2, r3
 8014a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 8014a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	33b0      	adds	r3, #176	@ 0xb0
 8014a20:	443b      	add	r3, r7
 8014a22:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014a26:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	4413      	add	r3, r2
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d014      	beq.n	8014a62 <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 8014a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	33b0      	adds	r3, #176	@ 0xb0
 8014a40:	443b      	add	r3, r7
 8014a42:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014a46:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4413      	add	r3, r2
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014a54:	429a      	cmp	r2, r3
 8014a56:	bf8c      	ite	hi
 8014a58:	2301      	movhi	r3, #1
 8014a5a:	2300      	movls	r3, #0
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 8014a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014a66:	f1c3 0301 	rsb	r3, r3, #1
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	33b0      	adds	r3, #176	@ 0xb0
 8014a6e:	443b      	add	r3, r7
 8014a70:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014a74:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014a78:	009b      	lsls	r3, r3, #2
 8014a7a:	4413      	add	r3, r2
 8014a7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014a80:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 8014a82:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014a86:	3301      	adds	r3, #1
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8014a8e:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 8014a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a96:	005b      	lsls	r3, r3, #1
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	dba4      	blt.n	80149e6 <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8014a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014aa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	bf0c      	ite	eq
 8014aa8:	2301      	moveq	r3, #1
 8014aaa:	2300      	movne	r3, #0
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 8014ab2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ab6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014aba:	4611      	mov	r1, r2
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7ff fcf9 	bl	80144b4 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8014ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ac6:	3b01      	subs	r3, #1
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	33b0      	adds	r3, #176	@ 0xb0
 8014acc:	443b      	add	r3, r7
 8014ace:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8014ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	33b0      	adds	r3, #176	@ 0xb0
 8014ada:	443b      	add	r3, r7
 8014adc:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 8014ae0:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8014ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ae6:	3b01      	subs	r3, #1
 8014ae8:	430a      	orrs	r2, r1
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	33b0      	adds	r3, #176	@ 0xb0
 8014aee:	443b      	add	r3, r7
 8014af0:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 8014af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8014afe:	4413      	add	r3, r2
 8014b00:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014b04:	4611      	mov	r1, r2
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7ff fcd4 	bl	80144b4 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 8014b0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8014b10:	3b01      	subs	r3, #1
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 8014b18:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	f6bf af5b 	bge.w	80149d8 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 8014b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014b26:	009b      	lsls	r3, r3, #2
 8014b28:	33b0      	adds	r3, #176	@ 0xb0
 8014b2a:	443b      	add	r3, r7
 8014b2c:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8014b30:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014b34:	4619      	mov	r1, r3
 8014b36:	68f8      	ldr	r0, [r7, #12]
 8014b38:	f7ff fbf6 	bl	8014328 <mg_uecc_vli_set>
}
 8014b3c:	bf00      	nop
 8014b3e:	37b4      	adds	r7, #180	@ 0xb4
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd90      	pop	{r4, r7, pc}

08014b44 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b094      	sub	sp, #80	@ 0x50
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	60b9      	str	r1, [r7, #8]
 8014b4e:	607a      	str	r2, [r7, #4]
 8014b50:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 8014b52:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8014b56:	f107 0010 	add.w	r0, r7, #16
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	68b9      	ldr	r1, [r7, #8]
 8014b5e:	f7ff fdd1 	bl	8014704 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 8014b62:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8014b66:	f107 0110 	add.w	r1, r7, #16
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	68f8      	ldr	r0, [r7, #12]
 8014b6e:	f7ff fead 	bl	80148cc <mg_uecc_vli_mmod>
}
 8014b72:	bf00      	nop
 8014b74:	3750      	adds	r7, #80	@ 0x50
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}

08014b7a <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 8014b7a:	b580      	push	{r7, lr}
 8014b7c:	b094      	sub	sp, #80	@ 0x50
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	60f8      	str	r0, [r7, #12]
 8014b82:	60b9      	str	r1, [r7, #8]
 8014b84:	607a      	str	r2, [r7, #4]
 8014b86:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8014b8e:	f107 0010 	add.w	r0, r7, #16
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	68b9      	ldr	r1, [r7, #8]
 8014b96:	f7ff fdb5 	bl	8014704 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014ba0:	f107 0210 	add.w	r2, r7, #16
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	68f8      	ldr	r0, [r7, #12]
 8014ba8:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8014baa:	bf00      	nop
 8014bac:	3750      	adds	r7, #80	@ 0x50
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b084      	sub	sp, #16
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	60f8      	str	r0, [r7, #12]
 8014bba:	60b9      	str	r1, [r7, #8]
 8014bbc:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	68b9      	ldr	r1, [r7, #8]
 8014bc4:	68f8      	ldr	r0, [r7, #12]
 8014bc6:	f7ff ffd8 	bl	8014b7a <mg_uecc_vli_modMult_fast>
}
 8014bca:	bf00      	nop
 8014bcc:	3710      	adds	r7, #16
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b086      	sub	sp, #24
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	60f8      	str	r0, [r7, #12]
 8014bda:	60b9      	str	r1, [r7, #8]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 8014be0:	2300      	movs	r3, #0
 8014be2:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	f003 0301 	and.w	r3, r3, #1
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d007      	beq.n	8014c00 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 8014bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014bf4:	68ba      	ldr	r2, [r7, #8]
 8014bf6:	68f9      	ldr	r1, [r7, #12]
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f7ff fc85 	bl	8014508 <mg_uecc_vli_add>
 8014bfe:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 8014c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014c04:	4619      	mov	r1, r3
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7ff fc54 	bl	80144b4 <mg_uecc_vli_rshift1>
  if (carry) {
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d013      	beq.n	8014c3a <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 8014c12:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014c16:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014c1a:	4413      	add	r3, r2
 8014c1c:	009b      	lsls	r3, r3, #2
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	4413      	add	r3, r2
 8014c22:	681a      	ldr	r2, [r3, #0]
 8014c24:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014c28:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014c2c:	440b      	add	r3, r1
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	68f9      	ldr	r1, [r7, #12]
 8014c32:	440b      	add	r3, r1
 8014c34:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014c38:	601a      	str	r2, [r3, #0]
  }
}
 8014c3a:	bf00      	nop
 8014c3c:	3718      	adds	r7, #24
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}

08014c42 <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014c42:	b580      	push	{r7, lr}
 8014c44:	b0a6      	sub	sp, #152	@ 0x98
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	60f8      	str	r0, [r7, #12]
 8014c4a:	60b9      	str	r1, [r7, #8]
 8014c4c:	607a      	str	r2, [r7, #4]
 8014c4e:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 8014c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c54:	4619      	mov	r1, r3
 8014c56:	68b8      	ldr	r0, [r7, #8]
 8014c58:	f7ff fac4 	bl	80141e4 <mg_uecc_vli_isZero>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d006      	beq.n	8014c70 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 8014c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c66:	4619      	mov	r1, r3
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f7ff fa9a 	bl	80141a2 <mg_uecc_vli_clear>
 8014c6e:	e0de      	b.n	8014e2e <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 8014c70:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014c74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014c78:	68b9      	ldr	r1, [r7, #8]
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7ff fb54 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 8014c80:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014c84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014c88:	6879      	ldr	r1, [r7, #4]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7ff fb4c 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 8014c90:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014c94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014c98:	4611      	mov	r1, r2
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7ff fa81 	bl	80141a2 <mg_uecc_vli_clear>
  u[0] = 1;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 8014ca4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ca8:	f107 0314 	add.w	r3, r7, #20
 8014cac:	4611      	mov	r1, r2
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff fa77 	bl	80141a2 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8014cb4:	e0a2      	b.n	8014dfc <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 8014cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014cb8:	f003 0301 	and.w	r3, r3, #1
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d110      	bne.n	8014ce2 <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 8014cc0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014cc4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014cc8:	4611      	mov	r1, r2
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7ff fbf2 	bl	80144b4 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 8014cd0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014cd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014cd8:	6879      	ldr	r1, [r7, #4]
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7ff ff79 	bl	8014bd2 <vli_modInv_update>
 8014ce0:	e08c      	b.n	8014dfc <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 8014ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ce4:	f003 0301 	and.w	r3, r3, #1
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d110      	bne.n	8014d0e <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 8014cec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014cf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7ff fbdc 	bl	80144b4 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 8014cfc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014d00:	f107 0314 	add.w	r3, r7, #20
 8014d04:	6879      	ldr	r1, [r7, #4]
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7ff ff63 	bl	8014bd2 <vli_modInv_update>
 8014d0c:	e076      	b.n	8014dfc <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 8014d0e:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	dd39      	ble.n	8014d8a <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 8014d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d1a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8014d1e:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8014d22:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8014d26:	f7ff fc39 	bl	801459c <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 8014d2a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014d2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014d32:	4611      	mov	r1, r2
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7ff fbbd 	bl	80144b4 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 8014d3a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014d3e:	f107 0114 	add.w	r1, r7, #20
 8014d42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7ff fb15 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	da08      	bge.n	8014d64 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 8014d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d56:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8014d5a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	f7ff fbd2 	bl	8014508 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 8014d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d68:	f107 0214 	add.w	r2, r7, #20
 8014d6c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8014d70:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8014d74:	f7ff fc12 	bl	801459c <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 8014d78:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014d7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014d80:	6879      	ldr	r1, [r7, #4]
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7ff ff25 	bl	8014bd2 <vli_modInv_update>
 8014d88:	e038      	b.n	8014dfc <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 8014d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d8e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8014d92:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8014d96:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8014d9a:	f7ff fbff 	bl	801459c <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 8014d9e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014da2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014da6:	4611      	mov	r1, r2
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7ff fb83 	bl	80144b4 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 8014dae:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014db2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8014db6:	f107 0314 	add.w	r3, r7, #20
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7ff fadb 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	da08      	bge.n	8014dd8 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 8014dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014dca:	f107 0114 	add.w	r1, r7, #20
 8014dce:	f107 0014 	add.w	r0, r7, #20
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	f7ff fb98 	bl	8014508 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 8014dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ddc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8014de0:	f107 0114 	add.w	r1, r7, #20
 8014de4:	f107 0014 	add.w	r0, r7, #20
 8014de8:	f7ff fbd8 	bl	801459c <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 8014dec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014df0:	f107 0314 	add.w	r3, r7, #20
 8014df4:	6879      	ldr	r1, [r7, #4]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7ff feeb 	bl	8014bd2 <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8014dfc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014e00:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8014e04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7ff fab4 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014e14:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f47f af4c 	bne.w	8014cb6 <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 8014e1e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014e22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014e26:	4619      	mov	r1, r3
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f7ff fa7d 	bl	8014328 <mg_uecc_vli_set>
}
 8014e2e:	3798      	adds	r7, #152	@ 0x98
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b098      	sub	sp, #96	@ 0x60
 8014e38:	af02      	add	r7, sp, #8
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
 8014e40:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 8014e4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014e4e:	4619      	mov	r1, r3
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff f9c7 	bl	80141e4 <mg_uecc_vli_isZero>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	f040 80e6 	bne.w	801502a <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8014e5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014e62:	683a      	ldr	r2, [r7, #0]
 8014e64:	68b9      	ldr	r1, [r7, #8]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7ff fea3 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8014e6c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014e70:	f107 0010 	add.w	r0, r7, #16
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	68f9      	ldr	r1, [r7, #12]
 8014e78:	f7ff fe7f 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8014e7c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014e80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7ff fe93 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	68b9      	ldr	r1, [r7, #8]
 8014e92:	68b8      	ldr	r0, [r7, #8]
 8014e94:	f7ff fe71 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8014e98:	683a      	ldr	r2, [r7, #0]
 8014e9a:	6879      	ldr	r1, [r7, #4]
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f7ff fe88 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	1d1a      	adds	r2, r3, #4
 8014ea6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014eaa:	9300      	str	r3, [sp, #0]
 8014eac:	4613      	mov	r3, r2
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	68f9      	ldr	r1, [r7, #12]
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f7ff fcc6 	bl	8014844 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	1d1a      	adds	r2, r3, #4
 8014ebc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	6879      	ldr	r1, [r7, #4]
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f7ff fcbb 	bl	8014844 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	1d1a      	adds	r2, r3, #4
 8014ed2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014ed6:	9300      	str	r3, [sp, #0]
 8014ed8:	4613      	mov	r3, r2
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	68f9      	ldr	r1, [r7, #12]
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7ff fcd7 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	68f9      	ldr	r1, [r7, #12]
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f7ff fe45 	bl	8014b7a <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	1d1a      	adds	r2, r3, #4
 8014ef4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014ef8:	9300      	str	r3, [sp, #0]
 8014efa:	4613      	mov	r3, r2
 8014efc:	68fa      	ldr	r2, [r7, #12]
 8014efe:	68f9      	ldr	r1, [r7, #12]
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f7ff fc9f 	bl	8014844 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	1d1a      	adds	r2, r3, #4
 8014f0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014f0e:	9300      	str	r3, [sp, #0]
 8014f10:	4613      	mov	r3, r2
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	68f9      	ldr	r1, [r7, #12]
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f7ff fc94 	bl	8014844 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	f7ff f98a 	bl	8014238 <mg_uecc_vli_testBit>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d024      	beq.n	8014f74 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	1d1a      	adds	r2, r3, #4
 8014f2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014f32:	68f9      	ldr	r1, [r7, #12]
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	f7ff fae7 	bl	8014508 <mg_uecc_vli_add>
 8014f3a:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 8014f3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014f40:	4619      	mov	r1, r3
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f7ff fab6 	bl	80144b4 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 8014f48:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8014f4c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014f50:	4413      	add	r3, r2
 8014f52:	009b      	lsls	r3, r3, #2
 8014f54:	68fa      	ldr	r2, [r7, #12]
 8014f56:	4413      	add	r3, r2
 8014f58:	6819      	ldr	r1, [r3, #0]
 8014f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f5c:	07da      	lsls	r2, r3, #31
 8014f5e:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 8014f62:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014f66:	4403      	add	r3, r0
 8014f68:	009b      	lsls	r3, r3, #2
 8014f6a:	68f8      	ldr	r0, [r7, #12]
 8014f6c:	4403      	add	r3, r0
 8014f6e:	430a      	orrs	r2, r1
 8014f70:	601a      	str	r2, [r3, #0]
 8014f72:	e005      	b.n	8014f80 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 8014f74:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014f78:	4619      	mov	r1, r3
 8014f7a:	68f8      	ldr	r0, [r7, #12]
 8014f7c:	f7ff fa9a 	bl	80144b4 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 8014f80:	683a      	ldr	r2, [r7, #0]
 8014f82:	68f9      	ldr	r1, [r7, #12]
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f7ff fe14 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	1d19      	adds	r1, r3, #4
 8014f8e:	f107 0210 	add.w	r2, r7, #16
 8014f92:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	460b      	mov	r3, r1
 8014f9a:	6879      	ldr	r1, [r7, #4]
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7ff fc78 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	1d19      	adds	r1, r3, #4
 8014fa6:	f107 0210 	add.w	r2, r7, #16
 8014faa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	6879      	ldr	r1, [r7, #4]
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f7ff fc6c 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	1d1a      	adds	r2, r3, #4
 8014fbe:	f107 0110 	add.w	r1, r7, #16
 8014fc2:	f107 0010 	add.w	r0, r7, #16
 8014fc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	4613      	mov	r3, r2
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	f7ff fc5f 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 8014fd4:	f107 0210 	add.w	r2, r7, #16
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	68f9      	ldr	r1, [r7, #12]
 8014fdc:	68f8      	ldr	r0, [r7, #12]
 8014fde:	f7ff fdcc 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	1d19      	adds	r1, r3, #4
 8014fe6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014fea:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8014fee:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	68f9      	ldr	r1, [r7, #12]
 8014ff8:	f7ff fc4b 	bl	8014892 <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 8014ffc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015000:	461a      	mov	r2, r3
 8015002:	6879      	ldr	r1, [r7, #4]
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7ff f98f 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801500a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801500e:	461a      	mov	r2, r3
 8015010:	68b9      	ldr	r1, [r7, #8]
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7ff f988 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 8015018:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801501c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015020:	4619      	mov	r1, r3
 8015022:	68b8      	ldr	r0, [r7, #8]
 8015024:	f7ff f980 	bl	8014328 <mg_uecc_vli_set>
 8015028:	e000      	b.n	801502c <double_jacobian_default+0x1f8>
    return;
 801502a:	bf00      	nop
}
 801502c:	3758      	adds	r7, #88	@ 0x58
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}

08015032 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 8015032:	b580      	push	{r7, lr}
 8015034:	b090      	sub	sp, #64	@ 0x40
 8015036:	af02      	add	r7, sp, #8
 8015038:	60f8      	str	r0, [r7, #12]
 801503a:	60b9      	str	r1, [r7, #8]
 801503c:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801503e:	f107 0314 	add.w	r3, r7, #20
 8015042:	2220      	movs	r2, #32
 8015044:	2100      	movs	r1, #0
 8015046:	4618      	mov	r0, r3
 8015048:	f00e fb1c 	bl	8023684 <memset>
 801504c:	2303      	movs	r3, #3
 801504e:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 8015058:	687a      	ldr	r2, [r7, #4]
 801505a:	68b9      	ldr	r1, [r7, #8]
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	f7ff fda8 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	1d19      	adds	r1, r3, #4
 8015066:	f107 0214 	add.w	r2, r7, #20
 801506a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801506e:	9300      	str	r3, [sp, #0]
 8015070:	460b      	mov	r3, r1
 8015072:	68f9      	ldr	r1, [r7, #12]
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f7ff fc0c 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	68ba      	ldr	r2, [r7, #8]
 801507e:	68f9      	ldr	r1, [r7, #12]
 8015080:	68f8      	ldr	r0, [r7, #12]
 8015082:	f7ff fd7a 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	1d19      	adds	r1, r3, #4
 8015090:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	460b      	mov	r3, r1
 8015098:	68f9      	ldr	r1, [r7, #12]
 801509a:	68f8      	ldr	r0, [r7, #12]
 801509c:	f7ff fbd2 	bl	8014844 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 80150a0:	bf00      	nop
 80150a2:	3738      	adds	r7, #56	@ 0x38
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b094      	sub	sp, #80	@ 0x50
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 80150b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80150b6:	2220      	movs	r2, #32
 80150b8:	2100      	movs	r1, #0
 80150ba:	4618      	mov	r0, r3
 80150bc:	f00e fae2 	bl	8023684 <memset>
 80150c0:	2301      	movs	r3, #1
 80150c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 80150c4:	f107 030c 	add.w	r3, r7, #12
 80150c8:	2220      	movs	r2, #32
 80150ca:	2100      	movs	r1, #0
 80150cc:	4618      	mov	r0, r3
 80150ce:	f00e fad9 	bl	8023684 <memset>
 80150d2:	2301      	movs	r3, #1
 80150d4:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	1d19      	adds	r1, r3, #4
 80150e2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80150e6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80150ea:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80150ee:	f7ff fa0b 	bl	8014508 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 80150f2:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80150f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80150fa:	4611      	mov	r1, r2
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7ff f8db 	bl	80142b8 <mg_uecc_vli_numBits>
 8015102:	4603      	mov	r3, r0
 8015104:	b29b      	uxth	r3, r3
 8015106:	3b01      	subs	r3, #1
 8015108:	b29b      	uxth	r3, r3
 801510a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801510e:	e020      	b.n	8015152 <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 8015110:	f107 010c 	add.w	r1, r7, #12
 8015114:	f107 030c 	add.w	r3, r7, #12
 8015118:	683a      	ldr	r2, [r7, #0]
 801511a:	4618      	mov	r0, r3
 801511c:	f7ff fd49 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 8015120:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8015124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015128:	4611      	mov	r1, r2
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff f884 	bl	8014238 <mg_uecc_vli_testBit>
 8015130:	4603      	mov	r3, r0
 8015132:	2b00      	cmp	r3, #0
 8015134:	d007      	beq.n	8015146 <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 8015136:	f107 010c 	add.w	r1, r7, #12
 801513a:	f107 000c 	add.w	r0, r7, #12
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	f7ff fd1a 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8015146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801514a:	3b01      	subs	r3, #1
 801514c:	b29b      	uxth	r3, r3
 801514e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8015152:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015156:	2b01      	cmp	r3, #1
 8015158:	dcda      	bgt.n	8015110 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801515a:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801515e:	f107 030c 	add.w	r3, r7, #12
 8015162:	4619      	mov	r1, r3
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7ff f8df 	bl	8014328 <mg_uecc_vli_set>
}
 801516a:	bf00      	nop
 801516c:	3750      	adds	r7, #80	@ 0x50
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
	...

08015174 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 8015174:	b480      	push	{r7}
 8015176:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 8015178:	4b02      	ldr	r3, [pc, #8]	@ (8015184 <mg_uecc_secp256r1+0x10>)
}
 801517a:	4618      	mov	r0, r3
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr
 8015184:	0802a584 	.word	0x0802a584

08015188 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8015188:	b580      	push	{r7, lr}
 801518a:	b08c      	sub	sp, #48	@ 0x30
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 8015192:	2208      	movs	r2, #8
 8015194:	6839      	ldr	r1, [r7, #0]
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7ff f8c6 	bl	8014328 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801519c:	2300      	movs	r3, #0
 801519e:	617b      	str	r3, [r7, #20]
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	613b      	str	r3, [r7, #16]
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ac:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151b2:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80151b8:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151be:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80151c6:	f107 020c 	add.w	r2, r7, #12
 80151ca:	f107 010c 	add.w	r1, r7, #12
 80151ce:	f107 000c 	add.w	r0, r7, #12
 80151d2:	2308      	movs	r3, #8
 80151d4:	f7ff f998 	bl	8014508 <mg_uecc_vli_add>
 80151d8:	4603      	mov	r3, r0
 80151da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80151dc:	f107 020c 	add.w	r2, r7, #12
 80151e0:	2308      	movs	r3, #8
 80151e2:	6879      	ldr	r1, [r7, #4]
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7ff f98f 	bl	8014508 <mg_uecc_vli_add>
 80151ea:	4603      	mov	r3, r0
 80151ec:	461a      	mov	r2, r3
 80151ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f0:	4413      	add	r3, r2
 80151f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151f8:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80151fe:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015204:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801520a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801520c:	2300      	movs	r3, #0
 801520e:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8015210:	f107 020c 	add.w	r2, r7, #12
 8015214:	f107 010c 	add.w	r1, r7, #12
 8015218:	f107 000c 	add.w	r0, r7, #12
 801521c:	2308      	movs	r3, #8
 801521e:	f7ff f973 	bl	8014508 <mg_uecc_vli_add>
 8015222:	4603      	mov	r3, r0
 8015224:	461a      	mov	r2, r3
 8015226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015228:	4413      	add	r3, r2
 801522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801522c:	f107 020c 	add.w	r2, r7, #12
 8015230:	2308      	movs	r3, #8
 8015232:	6879      	ldr	r1, [r7, #4]
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f7ff f967 	bl	8014508 <mg_uecc_vli_add>
 801523a:	4603      	mov	r3, r0
 801523c:	461a      	mov	r2, r3
 801523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015240:	4413      	add	r3, r2
 8015242:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	6a1b      	ldr	r3, [r3, #32]
 8015248:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801524e:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015254:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 8015256:	2300      	movs	r3, #0
 8015258:	623b      	str	r3, [r7, #32]
 801525a:	6a3b      	ldr	r3, [r7, #32]
 801525c:	61fb      	str	r3, [r7, #28]
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015266:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801526c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801526e:	f107 020c 	add.w	r2, r7, #12
 8015272:	2308      	movs	r3, #8
 8015274:	6879      	ldr	r1, [r7, #4]
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f7ff f946 	bl	8014508 <mg_uecc_vli_add>
 801527c:	4603      	mov	r3, r0
 801527e:	461a      	mov	r2, r3
 8015280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015282:	4413      	add	r3, r2
 8015284:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801528a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015290:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015296:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801529c:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152a2:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152a8:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152ae:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	6a1b      	ldr	r3, [r3, #32]
 80152b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80152b6:	f107 020c 	add.w	r2, r7, #12
 80152ba:	2308      	movs	r3, #8
 80152bc:	6879      	ldr	r1, [r7, #4]
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7ff f922 	bl	8014508 <mg_uecc_vli_add>
 80152c4:	4603      	mov	r3, r0
 80152c6:	461a      	mov	r2, r3
 80152c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ca:	4413      	add	r3, r2
 80152cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152d2:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152d8:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152de:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 80152e0:	2300      	movs	r3, #0
 80152e2:	623b      	str	r3, [r7, #32]
 80152e4:	6a3b      	ldr	r3, [r7, #32]
 80152e6:	61fb      	str	r3, [r7, #28]
 80152e8:	69fb      	ldr	r3, [r7, #28]
 80152ea:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	6a1b      	ldr	r3, [r3, #32]
 80152f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 80152f8:	f107 020c 	add.w	r2, r7, #12
 80152fc:	2308      	movs	r3, #8
 80152fe:	6879      	ldr	r1, [r7, #4]
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7ff f94b 	bl	801459c <mg_uecc_vli_sub>
 8015306:	4603      	mov	r3, r0
 8015308:	461a      	mov	r2, r3
 801530a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530c:	1a9b      	subs	r3, r3, r2
 801530e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015314:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801531a:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015320:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015326:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 8015328:	2300      	movs	r3, #0
 801532a:	623b      	str	r3, [r7, #32]
 801532c:	6a3b      	ldr	r3, [r7, #32]
 801532e:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015334:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801533a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801533c:	f107 020c 	add.w	r2, r7, #12
 8015340:	2308      	movs	r3, #8
 8015342:	6879      	ldr	r1, [r7, #4]
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f7ff f929 	bl	801459c <mg_uecc_vli_sub>
 801534a:	4603      	mov	r3, r0
 801534c:	461a      	mov	r2, r3
 801534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015350:	1a9b      	subs	r3, r3, r2
 8015352:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015358:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801535e:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015364:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	6a1b      	ldr	r3, [r3, #32]
 801536a:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015370:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015376:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8015378:	2300      	movs	r3, #0
 801537a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015380:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8015382:	f107 020c 	add.w	r2, r7, #12
 8015386:	2308      	movs	r3, #8
 8015388:	6879      	ldr	r1, [r7, #4]
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f7ff f906 	bl	801459c <mg_uecc_vli_sub>
 8015390:	4603      	mov	r3, r0
 8015392:	461a      	mov	r2, r3
 8015394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015396:	1a9b      	subs	r3, r3, r2
 8015398:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801539e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153a4:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 80153a6:	2300      	movs	r3, #0
 80153a8:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153ae:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153b4:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ba:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 80153bc:	2300      	movs	r3, #0
 80153be:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 80153c6:	f107 020c 	add.w	r2, r7, #12
 80153ca:	2308      	movs	r3, #8
 80153cc:	6879      	ldr	r1, [r7, #4]
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f7ff f8e4 	bl	801459c <mg_uecc_vli_sub>
 80153d4:	4603      	mov	r3, r0
 80153d6:	461a      	mov	r2, r3
 80153d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153da:	1a9b      	subs	r3, r3, r2
 80153dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 80153de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	da19      	bge.n	8015418 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 80153e4:	2308      	movs	r3, #8
 80153e6:	4a14      	ldr	r2, [pc, #80]	@ (8015438 <vli_mmod_fast_secp256r1+0x2b0>)
 80153e8:	6879      	ldr	r1, [r7, #4]
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f7ff f88c 	bl	8014508 <mg_uecc_vli_add>
 80153f0:	4603      	mov	r3, r0
 80153f2:	461a      	mov	r2, r3
 80153f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f6:	4413      	add	r3, r2
 80153f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 80153fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	dbf1      	blt.n	80153e4 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 8015400:	e015      	b.n	801542e <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 8015402:	2308      	movs	r3, #8
 8015404:	4a0c      	ldr	r2, [pc, #48]	@ (8015438 <vli_mmod_fast_secp256r1+0x2b0>)
 8015406:	6879      	ldr	r1, [r7, #4]
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f7ff f8c7 	bl	801459c <mg_uecc_vli_sub>
 801540e:	4603      	mov	r3, r0
 8015410:	461a      	mov	r2, r3
 8015412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015414:	1a9b      	subs	r3, r3, r2
 8015416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 8015418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541a:	2b00      	cmp	r3, #0
 801541c:	d1f1      	bne.n	8015402 <vli_mmod_fast_secp256r1+0x27a>
 801541e:	2208      	movs	r2, #8
 8015420:	6879      	ldr	r1, [r7, #4]
 8015422:	4805      	ldr	r0, [pc, #20]	@ (8015438 <vli_mmod_fast_secp256r1+0x2b0>)
 8015424:	f7fe ffa7 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8015428:	4603      	mov	r3, r0
 801542a:	2b01      	cmp	r3, #1
 801542c:	d1e9      	bne.n	8015402 <vli_mmod_fast_secp256r1+0x27a>
}
 801542e:	bf00      	nop
 8015430:	3730      	adds	r7, #48	@ 0x30
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}
 8015436:	bf00      	nop
 8015438:	0802a588 	.word	0x0802a588

0801543c <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801543c:	b580      	push	{r7, lr}
 801543e:	b08c      	sub	sp, #48	@ 0x30
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
 8015448:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801544a:	f107 0310 	add.w	r3, r7, #16
 801544e:	683a      	ldr	r2, [r7, #0]
 8015450:	6879      	ldr	r1, [r7, #4]
 8015452:	4618      	mov	r0, r3
 8015454:	f7ff fbad 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8015458:	f107 0210 	add.w	r2, r7, #16
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	68f9      	ldr	r1, [r7, #12]
 8015460:	68f8      	ldr	r0, [r7, #12]
 8015462:	f7ff fb8a 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8015466:	f107 0110 	add.w	r1, r7, #16
 801546a:	f107 0010 	add.w	r0, r7, #16
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	f7ff fb82 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8015476:	f107 0210 	add.w	r2, r7, #16
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	68b9      	ldr	r1, [r7, #8]
 801547e:	68b8      	ldr	r0, [r7, #8]
 8015480:	f7ff fb7b 	bl	8014b7a <mg_uecc_vli_modMult_fast>
}
 8015484:	bf00      	nop
 8015486:	3730      	adds	r7, #48	@ 0x30
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801548c:	b590      	push	{r4, r7, lr}
 801548e:	b08f      	sub	sp, #60	@ 0x3c
 8015490:	af00      	add	r7, sp, #0
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	607a      	str	r2, [r7, #4]
 8015498:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 80154a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d008      	beq.n	80154ba <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 80154a8:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80154ac:	f107 0314 	add.w	r3, r7, #20
 80154b0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fe ff38 	bl	8014328 <mg_uecc_vli_set>
 80154b8:	e009      	b.n	80154ce <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 80154ba:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80154be:	f107 0314 	add.w	r3, r7, #20
 80154c2:	4611      	mov	r1, r2
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7fe fe6c 	bl	80141a2 <mg_uecc_vli_clear>
    z[0] = 1;
 80154ca:	2301      	movs	r3, #1
 80154cc:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 80154ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80154d2:	461a      	mov	r2, r3
 80154d4:	68f9      	ldr	r1, [r7, #12]
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f7fe ff26 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 80154dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80154e0:	461a      	mov	r2, r3
 80154e2:	68b9      	ldr	r1, [r7, #8]
 80154e4:	6838      	ldr	r0, [r7, #0]
 80154e6:	f7fe ff1f 	bl	8014328 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 80154ea:	f107 0214 	add.w	r2, r7, #20
 80154ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154f0:	68b9      	ldr	r1, [r7, #8]
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff ffa2 	bl	801543c <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 80154f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154fa:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80154fe:	f107 0214 	add.w	r2, r7, #20
 8015502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015504:	68b9      	ldr	r1, [r7, #8]
 8015506:	68f8      	ldr	r0, [r7, #12]
 8015508:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801550a:	f107 0214 	add.w	r2, r7, #20
 801550e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015510:	6839      	ldr	r1, [r7, #0]
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f7ff ff92 	bl	801543c <apply_z>
}
 8015518:	bf00      	nop
 801551a:	373c      	adds	r7, #60	@ 0x3c
 801551c:	46bd      	mov	sp, r7
 801551e:	bd90      	pop	{r4, r7, pc}

08015520 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 8015520:	b580      	push	{r7, lr}
 8015522:	b090      	sub	sp, #64	@ 0x40
 8015524:	af02      	add	r7, sp, #8
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	60b9      	str	r1, [r7, #8]
 801552a:	607a      	str	r2, [r7, #4]
 801552c:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801552e:	f107 0314 	add.w	r3, r7, #20
 8015532:	2220      	movs	r2, #32
 8015534:	2100      	movs	r1, #0
 8015536:	4618      	mov	r0, r3
 8015538:	f00e f8a4 	bl	8023684 <memset>
  wordcount_t num_words = curve->num_words;
 801553c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8015544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015546:	1d1a      	adds	r2, r3, #4
 8015548:	f107 0014 	add.w	r0, r7, #20
 801554c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015550:	9300      	str	r3, [sp, #0]
 8015552:	4613      	mov	r3, r2
 8015554:	68fa      	ldr	r2, [r7, #12]
 8015556:	6879      	ldr	r1, [r7, #4]
 8015558:	f7ff f99b 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801555c:	f107 0114 	add.w	r1, r7, #20
 8015560:	f107 0314 	add.w	r3, r7, #20
 8015564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015566:	4618      	mov	r0, r3
 8015568:	f7ff fb23 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801556c:	f107 0214 	add.w	r2, r7, #20
 8015570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015572:	68f9      	ldr	r1, [r7, #12]
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f7ff fb00 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801557a:	f107 0214 	add.w	r2, r7, #20
 801557e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015580:	6879      	ldr	r1, [r7, #4]
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f7ff faf9 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8015588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801558a:	1d1a      	adds	r2, r3, #4
 801558c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015590:	9300      	str	r3, [sp, #0]
 8015592:	4613      	mov	r3, r2
 8015594:	68ba      	ldr	r2, [r7, #8]
 8015596:	6839      	ldr	r1, [r7, #0]
 8015598:	6838      	ldr	r0, [r7, #0]
 801559a:	f7ff f97a 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801559e:	f107 0314 	add.w	r3, r7, #20
 80155a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80155a4:	6839      	ldr	r1, [r7, #0]
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7ff fb03 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 80155ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155ae:	1d1a      	adds	r2, r3, #4
 80155b0:	f107 0114 	add.w	r1, r7, #20
 80155b4:	f107 0014 	add.w	r0, r7, #20
 80155b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80155bc:	9300      	str	r3, [sp, #0]
 80155be:	4613      	mov	r3, r2
 80155c0:	68fa      	ldr	r2, [r7, #12]
 80155c2:	f7ff f966 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 80155c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155c8:	1d1a      	adds	r2, r3, #4
 80155ca:	f107 0114 	add.w	r1, r7, #20
 80155ce:	f107 0014 	add.w	r0, r7, #20
 80155d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	4613      	mov	r3, r2
 80155da:	687a      	ldr	r2, [r7, #4]
 80155dc:	f7ff f959 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80155e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155e2:	1d1a      	adds	r2, r3, #4
 80155e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80155e8:	9300      	str	r3, [sp, #0]
 80155ea:	4613      	mov	r3, r2
 80155ec:	68fa      	ldr	r2, [r7, #12]
 80155ee:	6879      	ldr	r1, [r7, #4]
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7ff f94e 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 80155f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	68b9      	ldr	r1, [r7, #8]
 80155fc:	68b8      	ldr	r0, [r7, #8]
 80155fe:	f7ff fabc 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8015602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015604:	1d19      	adds	r1, r3, #4
 8015606:	f107 0214 	add.w	r2, r7, #20
 801560a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801560e:	9300      	str	r3, [sp, #0]
 8015610:	460b      	mov	r3, r1
 8015612:	68f9      	ldr	r1, [r7, #12]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7ff f93c 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801561a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	6839      	ldr	r1, [r7, #0]
 8015620:	6838      	ldr	r0, [r7, #0]
 8015622:	f7ff faaa 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8015626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015628:	1d1a      	adds	r2, r3, #4
 801562a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	4613      	mov	r3, r2
 8015632:	68ba      	ldr	r2, [r7, #8]
 8015634:	6839      	ldr	r1, [r7, #0]
 8015636:	6838      	ldr	r0, [r7, #0]
 8015638:	f7ff f92b 	bl	8014892 <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801563c:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8015640:	f107 0314 	add.w	r3, r7, #20
 8015644:	4619      	mov	r1, r3
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f7fe fe6e 	bl	8014328 <mg_uecc_vli_set>
}
 801564c:	bf00      	nop
 801564e:	3738      	adds	r7, #56	@ 0x38
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 8015654:	b590      	push	{r4, r7, lr}
 8015656:	b0a1      	sub	sp, #132	@ 0x84
 8015658:	af02      	add	r7, sp, #8
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
 8015660:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8015662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015666:	2220      	movs	r2, #32
 8015668:	2100      	movs	r1, #0
 801566a:	4618      	mov	r0, r3
 801566c:	f00e f80a 	bl	8023684 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8015670:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801567a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801567e:	1d1a      	adds	r2, r3, #4
 8015680:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8015684:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	4613      	mov	r3, r2
 801568c:	68fa      	ldr	r2, [r7, #12]
 801568e:	6879      	ldr	r1, [r7, #4]
 8015690:	f7ff f8ff 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8015694:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8015698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801569c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7ff fa86 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 80156a6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80156aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80156ae:	68f9      	ldr	r1, [r7, #12]
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f7ff fa62 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 80156b6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80156ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80156be:	6879      	ldr	r1, [r7, #4]
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7ff fa5a 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 80156c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80156ca:	1d1a      	adds	r2, r3, #4
 80156cc:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80156d0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	4613      	mov	r3, r2
 80156d8:	68ba      	ldr	r2, [r7, #8]
 80156da:	6839      	ldr	r1, [r7, #0]
 80156dc:	f7ff f8b2 	bl	8014844 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80156e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80156e4:	1d1a      	adds	r2, r3, #4
 80156e6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80156ea:	9300      	str	r3, [sp, #0]
 80156ec:	4613      	mov	r3, r2
 80156ee:	68ba      	ldr	r2, [r7, #8]
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6838      	ldr	r0, [r7, #0]
 80156f4:	f7ff f8cd 	bl	8014892 <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 80156f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80156fc:	1d1a      	adds	r2, r3, #4
 80156fe:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015702:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	4613      	mov	r3, r2
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	6879      	ldr	r1, [r7, #4]
 801570e:	f7ff f8c0 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 8015712:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801571a:	68b9      	ldr	r1, [r7, #8]
 801571c:	68b8      	ldr	r0, [r7, #8]
 801571e:	f7ff fa2c 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8015722:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015726:	1d1a      	adds	r2, r3, #4
 8015728:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801572c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015730:	9300      	str	r3, [sp, #0]
 8015732:	4613      	mov	r3, r2
 8015734:	687a      	ldr	r2, [r7, #4]
 8015736:	68f9      	ldr	r1, [r7, #12]
 8015738:	f7ff f884 	bl	8014844 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801573c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015740:	6839      	ldr	r1, [r7, #0]
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7ff fa35 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 8015748:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801574c:	1d19      	adds	r1, r3, #4
 801574e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015752:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015756:	9300      	str	r3, [sp, #0]
 8015758:	460b      	mov	r3, r1
 801575a:	6879      	ldr	r1, [r7, #4]
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7ff f898 	bl	8014892 <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8015762:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015766:	1d1a      	adds	r2, r3, #4
 8015768:	f107 0014 	add.w	r0, r7, #20
 801576c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015770:	9300      	str	r3, [sp, #0]
 8015772:	4613      	mov	r3, r2
 8015774:	687a      	ldr	r2, [r7, #4]
 8015776:	68f9      	ldr	r1, [r7, #12]
 8015778:	f7ff f88b 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801577c:	f107 0214 	add.w	r2, r7, #20
 8015780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015784:	6839      	ldr	r1, [r7, #0]
 8015786:	6838      	ldr	r0, [r7, #0]
 8015788:	f7ff f9f7 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801578c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015790:	1d1a      	adds	r2, r3, #4
 8015792:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015796:	9300      	str	r3, [sp, #0]
 8015798:	4613      	mov	r3, r2
 801579a:	68ba      	ldr	r2, [r7, #8]
 801579c:	6839      	ldr	r1, [r7, #0]
 801579e:	6838      	ldr	r0, [r7, #0]
 80157a0:	f7ff f877 	bl	8014892 <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 80157a4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80157a8:	f107 0314 	add.w	r3, r7, #20
 80157ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7ff f9fe 	bl	8014bb2 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 80157b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80157ba:	1d1c      	adds	r4, r3, #4
 80157bc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80157c0:	f107 0114 	add.w	r1, r7, #20
 80157c4:	f107 0014 	add.w	r0, r7, #20
 80157c8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	4623      	mov	r3, r4
 80157d0:	f7ff f85f 	bl	8014892 <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 80157d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80157d8:	1d1a      	adds	r2, r3, #4
 80157da:	f107 0114 	add.w	r1, r7, #20
 80157de:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80157e2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	4613      	mov	r3, r2
 80157ea:	68fa      	ldr	r2, [r7, #12]
 80157ec:	f7ff f851 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 80157f0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80157f4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80157f8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80157fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015800:	f7ff f9bb 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 8015804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015808:	1d1a      	adds	r2, r3, #4
 801580a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801580e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	4613      	mov	r3, r2
 8015816:	68ba      	ldr	r2, [r7, #8]
 8015818:	68b8      	ldr	r0, [r7, #8]
 801581a:	f7ff f83a 	bl	8014892 <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801581e:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 8015822:	f107 0314 	add.w	r3, r7, #20
 8015826:	4619      	mov	r1, r3
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f7fe fd7d 	bl	8014328 <mg_uecc_vli_set>
}
 801582e:	bf00      	nop
 8015830:	377c      	adds	r7, #124	@ 0x7c
 8015832:	46bd      	mov	sp, r7
 8015834:	bd90      	pop	{r4, r7, pc}

08015836 <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 8015836:	b590      	push	{r4, r7, lr}
 8015838:	b0b1      	sub	sp, #196	@ 0xc4
 801583a:	af02      	add	r7, sp, #8
 801583c:	60f8      	str	r0, [r7, #12]
 801583e:	60b9      	str	r1, [r7, #8]
 8015840:	607a      	str	r2, [r7, #4]
 8015842:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 8015844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801584e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015852:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015856:	3320      	adds	r3, #32
 8015858:	68b9      	ldr	r1, [r7, #8]
 801585a:	4618      	mov	r0, r3
 801585c:	f7fe fd64 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 8015860:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015864:	009b      	lsls	r3, r3, #2
 8015866:	68ba      	ldr	r2, [r7, #8]
 8015868:	18d1      	adds	r1, r2, r3
 801586a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801586e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015872:	3320      	adds	r3, #32
 8015874:	4618      	mov	r0, r3
 8015876:	f7fe fd57 	bl	8014328 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801587a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801587e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015882:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015886:	f103 0120 	add.w	r1, r3, #32
 801588a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801588e:	f103 0020 	add.w	r0, r3, #32
 8015892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015896:	9301      	str	r3, [sp, #4]
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	9300      	str	r3, [sp, #0]
 801589c:	4623      	mov	r3, r4
 801589e:	f7ff fdf5 	bl	801548c <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 80158a2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80158a6:	3b02      	subs	r3, #2
 80158a8:	b29b      	uxth	r3, r3
 80158aa:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 80158ae:	e059      	b.n	8015964 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 80158b0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 80158b4:	4619      	mov	r1, r3
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f7fe fcbe 	bl	8014238 <mg_uecc_vli_testBit>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	bf0c      	ite	eq
 80158c2:	2301      	moveq	r3, #1
 80158c4:	2300      	movne	r3, #0
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80158cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80158d0:	f1c3 0301 	rsb	r3, r3, #1
 80158d4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80158d8:	015b      	lsls	r3, r3, #5
 80158da:	18d0      	adds	r0, r2, r3
 80158dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80158e0:	f1c3 0301 	rsb	r3, r3, #1
 80158e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80158e8:	015b      	lsls	r3, r3, #5
 80158ea:	18d1      	adds	r1, r2, r3
 80158ec:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80158f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80158f4:	015b      	lsls	r3, r3, #5
 80158f6:	18d4      	adds	r4, r2, r3
 80158f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80158fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015900:	015b      	lsls	r3, r3, #5
 8015902:	441a      	add	r2, r3
 8015904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	4613      	mov	r3, r2
 801590c:	4622      	mov	r2, r4
 801590e:	f7ff fea1 	bl	8015654 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8015912:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801591a:	015b      	lsls	r3, r3, #5
 801591c:	18d0      	adds	r0, r2, r3
 801591e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015926:	015b      	lsls	r3, r3, #5
 8015928:	18d1      	adds	r1, r2, r3
 801592a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801592e:	f1c3 0301 	rsb	r3, r3, #1
 8015932:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015936:	015b      	lsls	r3, r3, #5
 8015938:	18d4      	adds	r4, r2, r3
 801593a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801593e:	f1c3 0301 	rsb	r3, r3, #1
 8015942:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015946:	015b      	lsls	r3, r3, #5
 8015948:	441a      	add	r2, r3
 801594a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801594e:	9300      	str	r3, [sp, #0]
 8015950:	4613      	mov	r3, r2
 8015952:	4622      	mov	r2, r4
 8015954:	f7ff fde4 	bl	8015520 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 8015958:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801595c:	3b01      	subs	r3, #1
 801595e:	b29b      	uxth	r3, r3
 8015960:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8015964:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8015968:	2b00      	cmp	r3, #0
 801596a:	dca1      	bgt.n	80158b0 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801596c:	2100      	movs	r1, #0
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7fe fc62 	bl	8014238 <mg_uecc_vli_testBit>
 8015974:	4603      	mov	r3, r0
 8015976:	2b00      	cmp	r3, #0
 8015978:	bf0c      	ite	eq
 801597a:	2301      	moveq	r3, #1
 801597c:	2300      	movne	r3, #0
 801597e:	b2db      	uxtb	r3, r3
 8015980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8015984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015988:	f1c3 0301 	rsb	r3, r3, #1
 801598c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015990:	015b      	lsls	r3, r3, #5
 8015992:	18d0      	adds	r0, r2, r3
 8015994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015998:	f1c3 0301 	rsb	r3, r3, #1
 801599c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80159a0:	015b      	lsls	r3, r3, #5
 80159a2:	18d1      	adds	r1, r2, r3
 80159a4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80159a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80159ac:	015b      	lsls	r3, r3, #5
 80159ae:	18d4      	adds	r4, r2, r3
 80159b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80159b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80159b8:	015b      	lsls	r3, r3, #5
 80159ba:	441a      	add	r2, r3
 80159bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	4613      	mov	r3, r2
 80159c4:	4622      	mov	r2, r4
 80159c6:	f7ff fe45 	bl	8015654 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 80159ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80159ce:	1d1c      	adds	r4, r3, #4
 80159d0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80159d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80159d8:	f103 0120 	add.w	r1, r3, #32
 80159dc:	f107 0010 	add.w	r0, r7, #16
 80159e0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 80159e4:	9300      	str	r3, [sp, #0]
 80159e6:	4623      	mov	r3, r4
 80159e8:	f7fe ff53 	bl	8014892 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 80159ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80159f0:	f1c3 0301 	rsb	r3, r3, #1
 80159f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80159f8:	015b      	lsls	r3, r3, #5
 80159fa:	441a      	add	r2, r3
 80159fc:	f107 0110 	add.w	r1, r7, #16
 8015a00:	f107 0010 	add.w	r0, r7, #16
 8015a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a08:	f7ff f8b7 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8015a0c:	f107 0110 	add.w	r1, r7, #16
 8015a10:	f107 0010 	add.w	r0, r7, #16
 8015a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a18:	68ba      	ldr	r2, [r7, #8]
 8015a1a:	f7ff f8ae 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 8015a1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a22:	1d1a      	adds	r2, r3, #4
 8015a24:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015a28:	f107 0110 	add.w	r1, r7, #16
 8015a2c:	f107 0010 	add.w	r0, r7, #16
 8015a30:	f7ff f907 	bl	8014c42 <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 8015a34:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	68ba      	ldr	r2, [r7, #8]
 8015a3c:	441a      	add	r2, r3
 8015a3e:	f107 0110 	add.w	r1, r7, #16
 8015a42:	f107 0010 	add.w	r0, r7, #16
 8015a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a4a:	f7ff f896 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 8015a4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015a52:	f1c3 0301 	rsb	r3, r3, #1
 8015a56:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015a5a:	015b      	lsls	r3, r3, #5
 8015a5c:	441a      	add	r2, r3
 8015a5e:	f107 0110 	add.w	r1, r7, #16
 8015a62:	f107 0010 	add.w	r0, r7, #16
 8015a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a6a:	f7ff f886 	bl	8014b7a <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8015a6e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015a72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015a76:	015b      	lsls	r3, r3, #5
 8015a78:	18d0      	adds	r0, r2, r3
 8015a7a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015a82:	015b      	lsls	r3, r3, #5
 8015a84:	18d1      	adds	r1, r2, r3
 8015a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015a8a:	f1c3 0301 	rsb	r3, r3, #1
 8015a8e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015a92:	015b      	lsls	r3, r3, #5
 8015a94:	18d4      	adds	r4, r2, r3
 8015a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015a9a:	f1c3 0301 	rsb	r3, r3, #1
 8015a9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015aa2:	015b      	lsls	r3, r3, #5
 8015aa4:	441a      	add	r2, r3
 8015aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015aaa:	9300      	str	r3, [sp, #0]
 8015aac:	4613      	mov	r3, r2
 8015aae:	4622      	mov	r2, r4
 8015ab0:	f7ff fd36 	bl	8015520 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8015ab4:	f107 0210 	add.w	r2, r7, #16
 8015ab8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015abc:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8015ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015ac4:	f7ff fcba 	bl	801543c <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8015ac8:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015acc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f7fe fc28 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8015ad8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	68fa      	ldr	r2, [r7, #12]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015ae6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fe fc1c 	bl	8014328 <mg_uecc_vli_set>
}
 8015af0:	bf00      	nop
 8015af2:	37bc      	adds	r7, #188	@ 0xbc
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd90      	pop	{r4, r7, pc}

08015af8 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b086      	sub	sp, #24
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	607a      	str	r2, [r7, #4]
 8015b04:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b0c:	331f      	adds	r3, #31
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	da00      	bge.n	8015b14 <regularize_k+0x1c>
 8015b12:	331f      	adds	r3, #31
 8015b14:	115b      	asrs	r3, r3, #5
 8015b16:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	885b      	ldrh	r3, [r3, #2]
 8015b1c:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b28:	68f9      	ldr	r1, [r7, #12]
 8015b2a:	68b8      	ldr	r0, [r7, #8]
 8015b2c:	f7fe fcec 	bl	8014508 <mg_uecc_vli_add>
 8015b30:	4603      	mov	r3, r0
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d10f      	bne.n	8015b56 <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8015b36:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b3e:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015b40:	429a      	cmp	r2, r3
 8015b42:	da0a      	bge.n	8015b5a <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 8015b44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015b48:	4619      	mov	r1, r3
 8015b4a:	68b8      	ldr	r0, [r7, #8]
 8015b4c:	f7fe fb74 	bl	8014238 <mg_uecc_vli_testBit>
 8015b50:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015b56:	2301      	movs	r3, #1
 8015b58:	e000      	b.n	8015b5c <regularize_k+0x64>
 8015b5a:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 8015b5c:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b68:	68b9      	ldr	r1, [r7, #8]
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f7fe fccc 	bl	8014508 <mg_uecc_vli_add>
  return carry;
 8015b70:	693b      	ldr	r3, [r7, #16]
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3718      	adds	r7, #24
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
	...

08015b7c <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b088      	sub	sp, #32
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	60f8      	str	r0, [r7, #12]
 8015b84:	60b9      	str	r1, [r7, #8]
 8015b86:	4613      	mov	r3, r2
 8015b88:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8015b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b8e:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8015b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b94:	4619      	mov	r1, r3
 8015b96:	68b8      	ldr	r0, [r7, #8]
 8015b98:	f7fe fb8e 	bl	80142b8 <mg_uecc_vli_numBits>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8015ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8015c4c <mg_uecc_generate_random_int+0xd0>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d101      	bne.n	8015bac <mg_uecc_generate_random_int+0x30>
    return 0;
 8015ba8:	2300      	movs	r3, #0
 8015baa:	e04b      	b.n	8015c44 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8015bac:	2300      	movs	r3, #0
 8015bae:	61fb      	str	r3, [r7, #28]
 8015bb0:	e044      	b.n	8015c3c <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 8015bb2:	4b26      	ldr	r3, [pc, #152]	@ (8015c4c <mg_uecc_generate_random_int+0xd0>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 8015bb6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015bba:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	4798      	blx	r3
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d101      	bne.n	8015bcc <mg_uecc_generate_random_int+0x50>
      return 0;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	e03b      	b.n	8015c44 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8015bcc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015bd0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015bd4:	4413      	add	r3, r2
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	68fa      	ldr	r2, [r7, #12]
 8015bda:	4413      	add	r3, r2
 8015bdc:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8015bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015be2:	b29b      	uxth	r3, r3
 8015be4:	015b      	lsls	r3, r3, #5
 8015be6:	b29a      	uxth	r2, r3
 8015be8:	8afb      	ldrh	r3, [r7, #22]
 8015bea:	1ad3      	subs	r3, r2, r3
 8015bec:	b29b      	uxth	r3, r3
 8015bee:	b21b      	sxth	r3, r3
 8015bf0:	461a      	mov	r2, r3
 8015bf2:	69bb      	ldr	r3, [r7, #24]
 8015bf4:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 8015bf8:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8015bfc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015c00:	4403      	add	r3, r0
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	68f8      	ldr	r0, [r7, #12]
 8015c06:	4403      	add	r3, r0
 8015c08:	400a      	ands	r2, r1
 8015c0a:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8015c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c10:	4619      	mov	r1, r3
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f7fe fae6 	bl	80141e4 <mg_uecc_vli_isZero>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d10b      	bne.n	8015c36 <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 8015c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c22:	461a      	mov	r2, r3
 8015c24:	68f9      	ldr	r1, [r7, #12]
 8015c26:	68b8      	ldr	r0, [r7, #8]
 8015c28:	f7fe fc13 	bl	8014452 <mg_uecc_vli_cmp>
 8015c2c:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d101      	bne.n	8015c36 <mg_uecc_generate_random_int+0xba>
      return 1;
 8015c32:	2301      	movs	r3, #1
 8015c34:	e006      	b.n	8015c44 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8015c36:	69fb      	ldr	r3, [r7, #28]
 8015c38:	3301      	adds	r3, #1
 8015c3a:	61fb      	str	r3, [r7, #28]
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8015c40:	d9b7      	bls.n	8015bb2 <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 8015c42:	2300      	movs	r3, #0
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3720      	adds	r7, #32
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	24000d40 	.word	0x24000d40

08015c50 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 8015c50:	b480      	push	{r7}
 8015c52:	b087      	sub	sp, #28
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	617b      	str	r3, [r7, #20]
 8015c60:	e018      	b.n	8015c94 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	1e5a      	subs	r2, r3, #1
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	f023 0303 	bic.w	r3, r3, #3
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	4413      	add	r3, r2
 8015c76:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	f003 0303 	and.w	r3, r3, #3
 8015c7e:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8015c80:	fa22 f103 	lsr.w	r1, r2, r3
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	68fa      	ldr	r2, [r7, #12]
 8015c88:	4413      	add	r3, r2
 8015c8a:	b2ca      	uxtb	r2, r1
 8015c8c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	3301      	adds	r3, #1
 8015c92:	617b      	str	r3, [r7, #20]
 8015c94:	697a      	ldr	r2, [r7, #20]
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	dbe2      	blt.n	8015c62 <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8015c9c:	bf00      	nop
 8015c9e:	bf00      	nop
 8015ca0:	371c      	adds	r7, #28
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca8:	4770      	bx	lr

08015caa <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 8015caa:	b580      	push	{r7, lr}
 8015cac:	b086      	sub	sp, #24
 8015cae:	af00      	add	r7, sp, #0
 8015cb0:	60f8      	str	r0, [r7, #12]
 8015cb2:	60b9      	str	r1, [r7, #8]
 8015cb4:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	3303      	adds	r3, #3
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	da00      	bge.n	8015cc0 <mg_uecc_vli_bytesToNative+0x16>
 8015cbe:	3303      	adds	r3, #3
 8015cc0:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 8015cc2:	b25b      	sxtb	r3, r3
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f7fe fa6b 	bl	80141a2 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8015ccc:	2300      	movs	r3, #0
 8015cce:	617b      	str	r3, [r7, #20]
 8015cd0:	e01e      	b.n	8015d10 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	1e5a      	subs	r2, r3, #1
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	1ad3      	subs	r3, r2, r3
 8015cda:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	f023 0303 	bic.w	r3, r3, #3
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	6819      	ldr	r1, [r3, #0]
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	68ba      	ldr	r2, [r7, #8]
 8015cec:	4413      	add	r3, r2
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	f003 0303 	and.w	r3, r3, #3
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	f023 0303 	bic.w	r3, r3, #3
 8015d02:	68f8      	ldr	r0, [r7, #12]
 8015d04:	4403      	add	r3, r0
 8015d06:	430a      	orrs	r2, r1
 8015d08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	617b      	str	r3, [r7, #20]
 8015d10:	697a      	ldr	r2, [r7, #20]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	dbdc      	blt.n	8015cd2 <mg_uecc_vli_bytesToNative+0x28>
  }
}
 8015d18:	bf00      	nop
 8015d1a:	bf00      	nop
 8015d1c:	3718      	adds	r7, #24
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b08a      	sub	sp, #40	@ 0x28
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	60f8      	str	r0, [r7, #12]
 8015d2a:	60b9      	str	r1, [r7, #8]
 8015d2c:	607a      	str	r2, [r7, #4]
 8015d2e:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015d36:	3307      	adds	r3, #7
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	da00      	bge.n	8015d3e <bits2int+0x1c>
 8015d3c:	3307      	adds	r3, #7
 8015d3e:	10db      	asrs	r3, r3, #3
 8015d40:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015d48:	331f      	adds	r3, #31
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	da00      	bge.n	8015d50 <bits2int+0x2e>
 8015d4e:	331f      	adds	r3, #31
 8015d50:	115b      	asrs	r3, r3, #5
 8015d52:	b25b      	sxtb	r3, r3
 8015d54:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 8015d56:	687a      	ldr	r2, [r7, #4]
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d901      	bls.n	8015d62 <bits2int+0x40>
    bits_size = num_n_bytes;
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	b25b      	sxtb	r3, r3
 8015d66:	4619      	mov	r1, r3
 8015d68:	68f8      	ldr	r0, [r7, #12]
 8015d6a:	f7fe fa1a 	bl	80141a2 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	461a      	mov	r2, r3
 8015d72:	68b9      	ldr	r1, [r7, #8]
 8015d74:	68f8      	ldr	r0, [r7, #12]
 8015d76:	f7ff ff98 	bl	8015caa <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	00db      	lsls	r3, r3, #3
 8015d7e:	683a      	ldr	r2, [r7, #0]
 8015d80:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015d84:	4293      	cmp	r3, r2
 8015d86:	d93a      	bls.n	8015dfe <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	00db      	lsls	r3, r3, #3
 8015d8c:	683a      	ldr	r2, [r7, #0]
 8015d8e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015d92:	1a9b      	subs	r3, r3, r2
 8015d94:	617b      	str	r3, [r7, #20]
  carry = 0;
 8015d96:	2300      	movs	r3, #0
 8015d98:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 8015d9a:	69bb      	ldr	r3, [r7, #24]
 8015d9c:	009b      	lsls	r3, r3, #2
 8015d9e:	68fa      	ldr	r2, [r7, #12]
 8015da0:	4413      	add	r3, r2
 8015da2:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 8015da4:	e010      	b.n	8015dc8 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 8015da6:	6a3b      	ldr	r3, [r7, #32]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 8015dac:	693a      	ldr	r2, [r7, #16]
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	40da      	lsrs	r2, r3
 8015db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015db4:	431a      	orrs	r2, r3
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	f1c3 0320 	rsb	r3, r3, #32
 8015dc0:	693a      	ldr	r2, [r7, #16]
 8015dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8015dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 8015dc8:	6a3b      	ldr	r3, [r7, #32]
 8015dca:	1f1a      	subs	r2, r3, #4
 8015dcc:	623a      	str	r2, [r7, #32]
 8015dce:	68fa      	ldr	r2, [r7, #12]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d3e8      	bcc.n	8015da6 <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	3324      	adds	r3, #36	@ 0x24
 8015dd8:	69ba      	ldr	r2, [r7, #24]
 8015dda:	b252      	sxtb	r2, r2
 8015ddc:	68f9      	ldr	r1, [r7, #12]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7fe fac9 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8015de4:	4603      	mov	r3, r0
 8015de6:	2b01      	cmp	r3, #1
 8015de8:	d00a      	beq.n	8015e00 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015df0:	69bb      	ldr	r3, [r7, #24]
 8015df2:	b25b      	sxtb	r3, r3
 8015df4:	68f9      	ldr	r1, [r7, #12]
 8015df6:	68f8      	ldr	r0, [r7, #12]
 8015df8:	f7fe fbd0 	bl	801459c <mg_uecc_vli_sub>
 8015dfc:	e000      	b.n	8015e00 <bits2int+0xde>
    return;
 8015dfe:	bf00      	nop
  }
}
 8015e00:	3728      	adds	r7, #40	@ 0x28
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
	...

08015e08 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 8015e08:	b590      	push	{r4, r7, lr}
 8015e0a:	b0ad      	sub	sp, #180	@ 0xb4
 8015e0c:	af02      	add	r7, sp, #8
 8015e0e:	60f8      	str	r0, [r7, #12]
 8015e10:	60b9      	str	r1, [r7, #8]
 8015e12:	607a      	str	r2, [r7, #4]
 8015e14:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 8015e16:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8015e1c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8015e20:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 8015e28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8015e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e3a:	331f      	adds	r3, #31
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	da00      	bge.n	8015e42 <mg_uecc_sign_with_k_internal+0x3a>
 8015e40:	331f      	adds	r3, #31
 8015e42:	115b      	asrs	r3, r3, #5
 8015e44:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 8015e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e4c:	885b      	ldrh	r3, [r3, #2]
 8015e4e:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 8015e52:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8015e56:	4619      	mov	r1, r3
 8015e58:	6838      	ldr	r0, [r7, #0]
 8015e5a:	f7fe f9c3 	bl	80141e4 <mg_uecc_vli_isZero>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d10b      	bne.n	8015e7c <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 8015e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e68:	3324      	adds	r3, #36	@ 0x24
 8015e6a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8015e6e:	6839      	ldr	r1, [r7, #0]
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7fe faee 	bl	8014452 <mg_uecc_vli_cmp>
 8015e76:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 8015e78:	2b01      	cmp	r3, #1
 8015e7a:	d001      	beq.n	8015e80 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	e128      	b.n	80160d2 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 8015e80:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8015e84:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8015e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e8c:	6838      	ldr	r0, [r7, #0]
 8015e8e:	f7ff fe33 	bl	8015af8 <regularize_k>
 8015e92:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 8015e96:	4b91      	ldr	r3, [pc, #580]	@ (80160dc <mg_uecc_sign_with_k_internal+0x2d4>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d01c      	beq.n	8015ed8 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 8015e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	33a8      	adds	r3, #168	@ 0xa8
 8015ea6:	443b      	add	r3, r7
 8015ea8:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8015eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015eb0:	3304      	adds	r3, #4
 8015eb2:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8015eb6:	4619      	mov	r1, r3
 8015eb8:	f7ff fe60 	bl	8015b7c <mg_uecc_generate_random_int>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d101      	bne.n	8015ec6 <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	e105      	b.n	80160d2 <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 8015ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	33a8      	adds	r3, #168	@ 0xa8
 8015ece:	443b      	add	r3, r7
 8015ed0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8015ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 8015ed8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015edc:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8015ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	bf0c      	ite	eq
 8015ee8:	2301      	moveq	r3, #1
 8015eea:	2300      	movne	r3, #0
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	33a8      	adds	r3, #168	@ 0xa8
 8015ef2:	443b      	add	r3, r7
 8015ef4:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 8015ef8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8015efc:	3301      	adds	r3, #1
 8015efe:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 8015f00:	b21b      	sxth	r3, r3
 8015f02:	f107 0014 	add.w	r0, r7, #20
 8015f06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8015f0a:	9201      	str	r2, [sp, #4]
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015f12:	4622      	mov	r2, r4
 8015f14:	f7ff fc8f 	bl	8015836 <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 8015f18:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8015f1c:	f107 0314 	add.w	r3, r7, #20
 8015f20:	4611      	mov	r1, r2
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7fe f95e 	bl	80141e4 <mg_uecc_vli_isZero>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d001      	beq.n	8015f32 <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	e0cf      	b.n	80160d2 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 8015f32:	4b6a      	ldr	r3, [pc, #424]	@ (80160dc <mg_uecc_sign_with_k_internal+0x2d4>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d10a      	bne.n	8015f50 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 8015f3a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8015f3e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015f42:	4611      	mov	r1, r2
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7fe f92c 	bl	80141a2 <mg_uecc_vli_clear>
    tmp[0] = 1;
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015f4e:	e00f      	b.n	8015f70 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 8015f50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015f54:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8015f58:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8015f5c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7ff fe0b 	bl	8015b7c <mg_uecc_generate_random_int>
 8015f66:	4603      	mov	r3, r0
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d101      	bne.n	8015f70 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	e0b0      	b.n	80160d2 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 8015f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015f74:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8015f78:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8015f7c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8015f80:	9300      	str	r3, [sp, #0]
 8015f82:	460b      	mov	r3, r1
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6838      	ldr	r0, [r7, #0]
 8015f88:	f7fe fddc 	bl	8014b44 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 8015f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015f90:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015f94:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8015f98:	6839      	ldr	r1, [r7, #0]
 8015f9a:	6838      	ldr	r0, [r7, #0]
 8015f9c:	f7fe fe51 	bl	8014c42 <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8015fa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015fa4:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8015fa8:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8015fac:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8015fb0:	9300      	str	r3, [sp, #0]
 8015fb2:	460b      	mov	r3, r1
 8015fb4:	6839      	ldr	r1, [r7, #0]
 8015fb6:	6838      	ldr	r0, [r7, #0]
 8015fb8:	f7fe fdc4 	bl	8014b44 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8015fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015fc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	f107 0314 	add.w	r3, r7, #20
 8015fca:	461a      	mov	r2, r3
 8015fcc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8015fd0:	f7ff fe3e 	bl	8015c50 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 8015fd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015fd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015fdc:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	da00      	bge.n	8015fe4 <mg_uecc_sign_with_k_internal+0x1dc>
 8015fe2:	3307      	adds	r3, #7
 8015fe4:	10db      	asrs	r3, r3, #3
 8015fe6:	461a      	mov	r2, r3
 8015fe8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015fec:	68f9      	ldr	r1, [r7, #12]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7ff fe5b 	bl	8015caa <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 8015ff4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	009b      	lsls	r3, r3, #2
 8015ffc:	33a8      	adds	r3, #168	@ 0xa8
 8015ffe:	443b      	add	r3, r7
 8016000:	2200      	movs	r2, #0
 8016002:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 8016006:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801600a:	f107 0114 	add.w	r1, r7, #20
 801600e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8016012:	4618      	mov	r0, r3
 8016014:	f7fe f988 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 8016018:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801601c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016020:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8016024:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8016028:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801602c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016030:	9300      	str	r3, [sp, #0]
 8016032:	4623      	mov	r3, r4
 8016034:	f7fe fd86 	bl	8014b44 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 8016038:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801603c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016040:	687a      	ldr	r2, [r7, #4]
 8016042:	68b9      	ldr	r1, [r7, #8]
 8016044:	f7ff fe6d 	bl	8015d22 <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 8016048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801604c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016050:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8016054:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8016058:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801605c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	4623      	mov	r3, r4
 8016064:	f7fe fbee 	bl	8014844 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 8016068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801606c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016070:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8016074:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8016078:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	4613      	mov	r3, r2
 8016080:	683a      	ldr	r2, [r7, #0]
 8016082:	f7fe fd5f 	bl	8014b44 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 8016086:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801608a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801608e:	4611      	mov	r1, r2
 8016090:	4618      	mov	r0, r3
 8016092:	f7fe f911 	bl	80142b8 <mg_uecc_vli_numBits>
 8016096:	4603      	mov	r3, r0
 8016098:	461a      	mov	r2, r3
 801609a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801609e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160a2:	00db      	lsls	r3, r3, #3
 80160a4:	429a      	cmp	r2, r3
 80160a6:	dd01      	ble.n	80160ac <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 80160a8:	2300      	movs	r3, #0
 80160aa:	e012      	b.n	80160d2 <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 80160ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80160b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160b4:	461a      	mov	r2, r3
 80160b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80160ba:	1898      	adds	r0, r3, r2
 80160bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80160c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160c4:	4619      	mov	r1, r3
 80160c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80160ca:	461a      	mov	r2, r3
 80160cc:	f7ff fdc0 	bl	8015c50 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 80160d0:	2301      	movs	r3, #1
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	37ac      	adds	r7, #172	@ 0xac
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd90      	pop	{r4, r7, pc}
 80160da:	bf00      	nop
 80160dc:	24000d40 	.word	0x24000d40

080160e0 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	695a      	ldr	r2, [r3, #20]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	691b      	ldr	r3, [r3, #16]
 80160f2:	005b      	lsls	r3, r3, #1
 80160f4:	4413      	add	r3, r2
 80160f6:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 80160f8:	2300      	movs	r3, #0
 80160fa:	60fb      	str	r3, [r7, #12]
 80160fc:	e00d      	b.n	801611a <HMAC_init+0x3a>
 80160fe:	683a      	ldr	r2, [r7, #0]
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	4413      	add	r3, r2
 8016104:	781a      	ldrb	r2, [r3, #0]
 8016106:	68b9      	ldr	r1, [r7, #8]
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	440b      	add	r3, r1
 801610c:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 8016110:	b2d2      	uxtb	r2, r2
 8016112:	701a      	strb	r2, [r3, #0]
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	3301      	adds	r3, #1
 8016118:	60fb      	str	r3, [r7, #12]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	691b      	ldr	r3, [r3, #16]
 801611e:	68fa      	ldr	r2, [r7, #12]
 8016120:	429a      	cmp	r2, r3
 8016122:	d3ec      	bcc.n	80160fe <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 8016124:	e007      	b.n	8016136 <HMAC_init+0x56>
 8016126:	68ba      	ldr	r2, [r7, #8]
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	4413      	add	r3, r2
 801612c:	2236      	movs	r2, #54	@ 0x36
 801612e:	701a      	strb	r2, [r3, #0]
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	3301      	adds	r3, #1
 8016134:	60fb      	str	r3, [r7, #12]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	68db      	ldr	r3, [r3, #12]
 801613a:	68fa      	ldr	r2, [r7, #12]
 801613c:	429a      	cmp	r2, r3
 801613e:	d3f2      	bcc.n	8016126 <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	685b      	ldr	r3, [r3, #4]
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	68d2      	ldr	r2, [r2, #12]
 8016150:	68b9      	ldr	r1, [r7, #8]
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	4798      	blx	r3
}
 8016156:	bf00      	nop
 8016158:	3710      	adds	r7, #16
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}

0801615e <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801615e:	b580      	push	{r7, lr}
 8016160:	b084      	sub	sp, #16
 8016162:	af00      	add	r7, sp, #0
 8016164:	60f8      	str	r0, [r7, #12]
 8016166:	60b9      	str	r1, [r7, #8]
 8016168:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	68b9      	ldr	r1, [r7, #8]
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	4798      	blx	r3
}
 8016176:	bf00      	nop
 8016178:	3710      	adds	r7, #16
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}

0801617e <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801617e:	b580      	push	{r7, lr}
 8016180:	b086      	sub	sp, #24
 8016182:	af00      	add	r7, sp, #0
 8016184:	60f8      	str	r0, [r7, #12]
 8016186:	60b9      	str	r1, [r7, #8]
 8016188:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	695a      	ldr	r2, [r3, #20]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	005b      	lsls	r3, r3, #1
 8016194:	4413      	add	r3, r2
 8016196:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 8016198:	2300      	movs	r3, #0
 801619a:	617b      	str	r3, [r7, #20]
 801619c:	e00d      	b.n	80161ba <HMAC_finish+0x3c>
 801619e:	68ba      	ldr	r2, [r7, #8]
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	4413      	add	r3, r2
 80161a4:	781a      	ldrb	r2, [r3, #0]
 80161a6:	6939      	ldr	r1, [r7, #16]
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	440b      	add	r3, r1
 80161ac:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 80161b0:	b2d2      	uxtb	r2, r2
 80161b2:	701a      	strb	r2, [r3, #0]
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	3301      	adds	r3, #1
 80161b8:	617b      	str	r3, [r7, #20]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	691b      	ldr	r3, [r3, #16]
 80161be:	697a      	ldr	r2, [r7, #20]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d3ec      	bcc.n	801619e <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 80161c4:	e007      	b.n	80161d6 <HMAC_finish+0x58>
 80161c6:	693a      	ldr	r2, [r7, #16]
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	4413      	add	r3, r2
 80161cc:	225c      	movs	r2, #92	@ 0x5c
 80161ce:	701a      	strb	r2, [r3, #0]
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	3301      	adds	r3, #1
 80161d4:	617b      	str	r3, [r7, #20]
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	697a      	ldr	r2, [r7, #20]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d3f2      	bcc.n	80161c6 <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	689b      	ldr	r3, [r3, #8]
 80161e4:	6879      	ldr	r1, [r7, #4]
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	685b      	ldr	r3, [r3, #4]
 80161f6:	68fa      	ldr	r2, [r7, #12]
 80161f8:	68d2      	ldr	r2, [r2, #12]
 80161fa:	6939      	ldr	r1, [r7, #16]
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	68fa      	ldr	r2, [r7, #12]
 8016206:	6912      	ldr	r2, [r2, #16]
 8016208:	6879      	ldr	r1, [r7, #4]
 801620a:	68f8      	ldr	r0, [r7, #12]
 801620c:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	689b      	ldr	r3, [r3, #8]
 8016212:	6879      	ldr	r1, [r7, #4]
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	4798      	blx	r3
}
 8016218:	bf00      	nop
 801621a:	3718      	adds	r7, #24
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	60b9      	str	r1, [r7, #8]
 801622a:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 801622c:	68b9      	ldr	r1, [r7, #8]
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f7ff ff56 	bl	80160e0 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	691b      	ldr	r3, [r3, #16]
 8016238:	461a      	mov	r2, r3
 801623a:	6879      	ldr	r1, [r7, #4]
 801623c:	68f8      	ldr	r0, [r7, #12]
 801623e:	f7ff ff8e 	bl	801615e <HMAC_update>
  HMAC_finish(hash_context, K, V);
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	68b9      	ldr	r1, [r7, #8]
 8016246:	68f8      	ldr	r0, [r7, #12]
 8016248:	f7ff ff99 	bl	801617e <HMAC_finish>
}
 801624c:	bf00      	nop
 801624e:	3710      	adds	r7, #16
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 8016254:	b580      	push	{r7, lr}
 8016256:	b096      	sub	sp, #88	@ 0x58
 8016258:	af02      	add	r7, sp, #8
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
 8016260:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	695b      	ldr	r3, [r3, #20]
 8016266:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	691b      	ldr	r3, [r3, #16]
 801626c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801626e:	4413      	add	r3, r2
 8016270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 8016272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016274:	785b      	ldrb	r3, [r3, #1]
 8016276:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801627a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801627c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016280:	331f      	adds	r3, #31
 8016282:	2b00      	cmp	r3, #0
 8016284:	da00      	bge.n	8016288 <mg_uecc_sign_deterministic+0x34>
 8016286:	331f      	adds	r3, #31
 8016288:	115b      	asrs	r3, r3, #5
 801628a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801628e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016290:	885b      	ldrh	r3, [r3, #2]
 8016292:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 8016294:	2300      	movs	r3, #0
 8016296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016298:	e00c      	b.n	80162b4 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801629a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801629c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801629e:	4413      	add	r3, r2
 80162a0:	2201      	movs	r2, #1
 80162a2:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 80162a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80162a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162a8:	4413      	add	r3, r2
 80162aa:	2200      	movs	r2, #0
 80162ac:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 80162ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162b0:	3301      	adds	r3, #1
 80162b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	691b      	ldr	r3, [r3, #16]
 80162b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d3ed      	bcc.n	801629a <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 80162be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80162c0:	6838      	ldr	r0, [r7, #0]
 80162c2:	f7ff ff0d 	bl	80160e0 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	691b      	ldr	r3, [r3, #16]
 80162ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80162cc:	4413      	add	r3, r2
 80162ce:	2200      	movs	r2, #0
 80162d0:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	691b      	ldr	r3, [r3, #16]
 80162d6:	3301      	adds	r3, #1
 80162d8:	461a      	mov	r2, r3
 80162da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80162dc:	6838      	ldr	r0, [r7, #0]
 80162de:	f7ff ff3e 	bl	801615e <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 80162e2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80162e6:	461a      	mov	r2, r3
 80162e8:	68f9      	ldr	r1, [r7, #12]
 80162ea:	6838      	ldr	r0, [r7, #0]
 80162ec:	f7ff ff37 	bl	801615e <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 80162f0:	687a      	ldr	r2, [r7, #4]
 80162f2:	68b9      	ldr	r1, [r7, #8]
 80162f4:	6838      	ldr	r0, [r7, #0]
 80162f6:	f7ff ff32 	bl	801615e <HMAC_update>
  HMAC_finish(hash_context, K, K);
 80162fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80162fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80162fe:	6838      	ldr	r0, [r7, #0]
 8016300:	f7ff ff3d 	bl	801617e <HMAC_finish>

  update_V(hash_context, K, V);
 8016304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016308:	6838      	ldr	r0, [r7, #0]
 801630a:	f7ff ff89 	bl	8016220 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801630e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016310:	6838      	ldr	r0, [r7, #0]
 8016312:	f7ff fee5 	bl	80160e0 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	691b      	ldr	r3, [r3, #16]
 801631a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801631c:	4413      	add	r3, r2
 801631e:	2201      	movs	r2, #1
 8016320:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	691b      	ldr	r3, [r3, #16]
 8016326:	3301      	adds	r3, #1
 8016328:	461a      	mov	r2, r3
 801632a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801632c:	6838      	ldr	r0, [r7, #0]
 801632e:	f7ff ff16 	bl	801615e <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8016332:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8016336:	461a      	mov	r2, r3
 8016338:	68f9      	ldr	r1, [r7, #12]
 801633a:	6838      	ldr	r0, [r7, #0]
 801633c:	f7ff ff0f 	bl	801615e <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8016340:	687a      	ldr	r2, [r7, #4]
 8016342:	68b9      	ldr	r1, [r7, #8]
 8016344:	6838      	ldr	r0, [r7, #0]
 8016346:	f7ff ff0a 	bl	801615e <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801634a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801634c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801634e:	6838      	ldr	r0, [r7, #0]
 8016350:	f7ff ff15 	bl	801617e <HMAC_finish>

  update_V(hash_context, K, V);
 8016354:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016356:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016358:	6838      	ldr	r0, [r7, #0]
 801635a:	f7ff ff61 	bl	8016220 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801635e:	2300      	movs	r3, #0
 8016360:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016362:	e084      	b.n	801646e <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 8016364:	f107 0310 	add.w	r3, r7, #16
 8016368:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801636a:	2300      	movs	r3, #0
 801636c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 8016370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016372:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016374:	6838      	ldr	r0, [r7, #0]
 8016376:	f7ff ff53 	bl	8016220 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801637a:	2300      	movs	r3, #0
 801637c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801637e:	e017      	b.n	80163b0 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 8016380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016384:	441a      	add	r2, r3
 8016386:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801638a:	b2cb      	uxtb	r3, r1
 801638c:	3301      	adds	r3, #1
 801638e:	b2db      	uxtb	r3, r3
 8016390:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016396:	440b      	add	r3, r1
 8016398:	7812      	ldrb	r2, [r2, #0]
 801639a:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801639c:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 80163a0:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80163a4:	009b      	lsls	r3, r3, #2
 80163a6:	429a      	cmp	r2, r3
 80163a8:	da08      	bge.n	80163bc <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 80163aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163ac:	3301      	adds	r3, #1
 80163ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	691b      	ldr	r3, [r3, #16]
 80163b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d3e2      	bcc.n	8016380 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 80163ba:	e7d9      	b.n	8016370 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 80163bc:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 80163be:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80163c2:	015a      	lsls	r2, r3, #5
 80163c4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80163c8:	429a      	cmp	r2, r3
 80163ca:	dd20      	ble.n	801640e <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 80163cc:	f04f 33ff 	mov.w	r3, #4294967295
 80163d0:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 80163d2:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80163d6:	3b01      	subs	r3, #1
 80163d8:	009b      	lsls	r3, r3, #2
 80163da:	3350      	adds	r3, #80	@ 0x50
 80163dc:	443b      	add	r3, r7
 80163de:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 80163e2:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80163e6:	b29b      	uxth	r3, r3
 80163e8:	015b      	lsls	r3, r3, #5
 80163ea:	b29a      	uxth	r2, r3
 80163ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80163ee:	1ad3      	subs	r3, r2, r3
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	b21b      	sxth	r3, r3
 80163f4:	461a      	mov	r2, r3
          mask >>
 80163f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163f8:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 80163fc:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8016400:	3b01      	subs	r3, #1
 8016402:	400a      	ands	r2, r1
 8016404:	009b      	lsls	r3, r3, #2
 8016406:	3350      	adds	r3, #80	@ 0x50
 8016408:	443b      	add	r3, r7
 801640a:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 801640e:	f107 0210 	add.w	r2, r7, #16
 8016412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016414:	9301      	str	r3, [sp, #4]
 8016416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016418:	9300      	str	r3, [sp, #0]
 801641a:	4613      	mov	r3, r2
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	68b9      	ldr	r1, [r7, #8]
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f7ff fcf1 	bl	8015e08 <mg_uecc_sign_with_k_internal>
 8016426:	4603      	mov	r3, r0
 8016428:	2b00      	cmp	r3, #0
 801642a:	d001      	beq.n	8016430 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 801642c:	2301      	movs	r3, #1
 801642e:	e023      	b.n	8016478 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 8016430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016432:	6838      	ldr	r0, [r7, #0]
 8016434:	f7ff fe54 	bl	80160e0 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 8016438:	683b      	ldr	r3, [r7, #0]
 801643a:	691b      	ldr	r3, [r3, #16]
 801643c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801643e:	4413      	add	r3, r2
 8016440:	2200      	movs	r2, #0
 8016442:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	691b      	ldr	r3, [r3, #16]
 8016448:	3301      	adds	r3, #1
 801644a:	461a      	mov	r2, r3
 801644c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801644e:	6838      	ldr	r0, [r7, #0]
 8016450:	f7ff fe85 	bl	801615e <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8016454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016458:	6838      	ldr	r0, [r7, #0]
 801645a:	f7ff fe90 	bl	801617e <HMAC_finish>

    update_V(hash_context, K, V);
 801645e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016462:	6838      	ldr	r0, [r7, #0]
 8016464:	f7ff fedc 	bl	8016220 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8016468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801646a:	3301      	adds	r3, #1
 801646c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801646e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016470:	2b3f      	cmp	r3, #63	@ 0x3f
 8016472:	f67f af77 	bls.w	8016364 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 8016476:	2300      	movs	r3, #0
}
 8016478:	4618      	mov	r0, r3
 801647a:	3750      	adds	r7, #80	@ 0x50
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}

08016480 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8016480:	b480      	push	{r7}
 8016482:	b083      	sub	sp, #12
 8016484:	af00      	add	r7, sp, #0
 8016486:	4603      	mov	r3, r0
 8016488:	460a      	mov	r2, r1
 801648a:	80fb      	strh	r3, [r7, #6]
 801648c:	4613      	mov	r3, r2
 801648e:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 8016490:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016498:	4293      	cmp	r3, r2
 801649a:	bfb8      	it	lt
 801649c:	4613      	movlt	r3, r2
 801649e:	b21b      	sxth	r3, r3
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	370c      	adds	r7, #12
 80164a4:	46bd      	mov	sp, r7
 80164a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164aa:	4770      	bx	lr

080164ac <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 80164ac:	b590      	push	{r4, r7, lr}
 80164ae:	b0ff      	sub	sp, #508	@ 0x1fc
 80164b0:	af02      	add	r7, sp, #8
 80164b2:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 80164b6:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 80164ba:	6020      	str	r0, [r4, #0]
 80164bc:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 80164c0:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 80164c4:	6001      	str	r1, [r0, #0]
 80164c6:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 80164ca:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 80164ce:	600a      	str	r2, [r1, #0]
 80164d0:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 80164d4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80164d8:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 80164da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80164e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80164e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80164ec:	331f      	adds	r3, #31
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	da00      	bge.n	80164f4 <mg_uecc_verify+0x48>
 80164f2:	331f      	adds	r3, #31
 80164f4:	115b      	asrs	r3, r3, #5
 80164f6:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 80164fa:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80164fe:	3b01      	subs	r3, #1
 8016500:	009b      	lsls	r3, r3, #2
 8016502:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8016506:	443b      	add	r3, r7
 8016508:	2200      	movs	r2, #0
 801650a:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 801650e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016512:	1e5a      	subs	r2, r3, #1
 8016514:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016518:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801651c:	2100      	movs	r1, #0
 801651e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 8016522:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016526:	1e5a      	subs	r2, r3, #1
 8016528:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801652c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8016530:	2100      	movs	r1, #0
 8016532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8016536:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801653a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801653e:	461a      	mov	r2, r3
 8016540:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016544:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016548:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801654c:	6819      	ldr	r1, [r3, #0]
 801654e:	f7ff fbac 	bl	8015caa <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8016552:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016556:	009b      	lsls	r3, r3, #2
 8016558:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801655c:	18d0      	adds	r0, r2, r3
 801655e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016562:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016566:	461a      	mov	r2, r3
 8016568:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801656c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 8016574:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016578:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801657c:	461a      	mov	r2, r3
 801657e:	f7ff fb94 	bl	8015caa <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 8016582:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016586:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801658a:	461a      	mov	r2, r3
 801658c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016590:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8016594:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8016598:	6819      	ldr	r1, [r3, #0]
 801659a:	f7ff fb86 	bl	8015caa <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801659e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80165a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165a6:	461a      	mov	r2, r3
 80165a8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80165ac:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	1899      	adds	r1, r3, r2
 80165b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80165b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165bc:	461a      	mov	r2, r3
 80165be:	f107 0310 	add.w	r3, r7, #16
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7ff fb71 	bl	8015caa <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 80165c8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80165cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80165d0:	4611      	mov	r1, r2
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7fd fe06 	bl	80141e4 <mg_uecc_vli_isZero>
 80165d8:	4603      	mov	r3, r0
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d10a      	bne.n	80165f4 <mg_uecc_verify+0x148>
 80165de:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80165e2:	f107 0310 	add.w	r3, r7, #16
 80165e6:	4611      	mov	r1, r2
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7fd fdfb 	bl	80141e4 <mg_uecc_vli_isZero>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d001      	beq.n	80165f8 <mg_uecc_verify+0x14c>
    return 0;
 80165f4:	2300      	movs	r3, #0
 80165f6:	e220      	b.n	8016a3a <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80165f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80165fc:	3324      	adds	r3, #36	@ 0x24
 80165fe:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016602:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8016606:	4618      	mov	r0, r3
 8016608:	f7fd feb5 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 801660c:	4603      	mov	r3, r0
 801660e:	2b01      	cmp	r3, #1
 8016610:	d10c      	bne.n	801662c <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8016612:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016616:	3324      	adds	r3, #36	@ 0x24
 8016618:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801661c:	f107 0110 	add.w	r1, r7, #16
 8016620:	4618      	mov	r0, r3
 8016622:	f7fd fea8 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8016626:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8016628:	2b01      	cmp	r3, #1
 801662a:	d001      	beq.n	8016630 <mg_uecc_verify+0x184>
    return 0;
 801662c:	2300      	movs	r3, #0
 801662e:	e204      	b.n	8016a3a <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8016630:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016634:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016638:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801663c:	f107 0110 	add.w	r1, r7, #16
 8016640:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016644:	f7fe fafd 	bl	8014c42 <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8016648:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801664c:	3b01      	subs	r3, #1
 801664e:	009b      	lsls	r3, r3, #2
 8016650:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8016654:	443b      	add	r3, r7
 8016656:	2200      	movs	r2, #0
 8016658:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 801665c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016660:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8016664:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016668:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 801666c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016670:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016674:	6812      	ldr	r2, [r2, #0]
 8016676:	6809      	ldr	r1, [r1, #0]
 8016678:	f7ff fb53 	bl	8015d22 <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 801667c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016680:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016684:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016688:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 801668c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016690:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016694:	9300      	str	r3, [sp, #0]
 8016696:	4623      	mov	r3, r4
 8016698:	f7fe fa54 	bl	8014b44 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 801669c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80166a0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80166a4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80166a8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80166ac:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80166b0:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	4623      	mov	r3, r4
 80166b8:	f7fe fa44 	bl	8014b44 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 80166bc:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80166c0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80166c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7fd fe2d 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 80166ce:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80166d2:	009b      	lsls	r3, r3, #2
 80166d4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80166d8:	18d0      	adds	r0, r2, r3
 80166da:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80166de:	009b      	lsls	r3, r3, #2
 80166e0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80166e4:	4413      	add	r3, r2
 80166e6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80166ea:	4619      	mov	r1, r3
 80166ec:	f7fd fe1c 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 80166f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80166f4:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80166f8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80166fc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8016700:	4618      	mov	r0, r3
 8016702:	f7fd fe11 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8016706:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801670a:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801670e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	18d1      	adds	r1, r2, r3
 8016716:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801671a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801671e:	4618      	mov	r0, r3
 8016720:	f7fd fe02 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8016724:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016728:	1d1c      	adds	r4, r3, #4
 801672a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801672e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8016732:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016736:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	4623      	mov	r3, r4
 801673e:	f7fe f8a8 	bl	8014892 <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8016742:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801674c:	18d4      	adds	r4, r2, r3
 801674e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016752:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016756:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801675a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801675e:	9300      	str	r3, [sp, #0]
 8016760:	4623      	mov	r3, r4
 8016762:	f7fe fedd 	bl	8015520 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8016766:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801676a:	1d1a      	adds	r2, r3, #4
 801676c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016770:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016774:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016778:	f7fe fa63 	bl	8014c42 <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 801677c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016786:	18d1      	adds	r1, r2, r3
 8016788:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801678c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8016790:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016794:	f7fe fe52 	bl	801543c <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8016798:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801679c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80167a0:	2200      	movs	r2, #0
 80167a2:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 80167a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80167a8:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80167ac:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80167b0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80167b4:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 80167b6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80167ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80167be:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80167c2:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 80167c4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80167c8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80167cc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80167d0:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 80167d2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80167d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80167da:	4611      	mov	r1, r2
 80167dc:	4618      	mov	r0, r3
 80167de:	f7fd fd6b 	bl	80142b8 <mg_uecc_vli_numBits>
 80167e2:	4603      	mov	r3, r0
 80167e4:	461c      	mov	r4, r3
 80167e6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80167ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80167ee:	4611      	mov	r1, r2
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7fd fd61 	bl	80142b8 <mg_uecc_vli_numBits>
 80167f6:	4603      	mov	r3, r0
 80167f8:	4619      	mov	r1, r3
 80167fa:	4620      	mov	r0, r4
 80167fc:	f7ff fe40 	bl	8016480 <smax>
 8016800:	4603      	mov	r3, r0
 8016802:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8016806:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801680a:	3b01      	subs	r3, #1
 801680c:	b29b      	uxth	r3, r3
 801680e:	b21a      	sxth	r2, r3
 8016810:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016814:	4611      	mov	r1, r2
 8016816:	4618      	mov	r0, r3
 8016818:	f7fd fd0e 	bl	8014238 <mg_uecc_vli_testBit>
 801681c:	4603      	mov	r3, r0
 801681e:	2b00      	cmp	r3, #0
 8016820:	bf14      	ite	ne
 8016822:	2301      	movne	r3, #1
 8016824:	2300      	moveq	r3, #0
 8016826:	b2db      	uxtb	r3, r3
 8016828:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 801682a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801682e:	3b01      	subs	r3, #1
 8016830:	b29b      	uxth	r3, r3
 8016832:	b21a      	sxth	r2, r3
 8016834:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016838:	4611      	mov	r1, r2
 801683a:	4618      	mov	r0, r3
 801683c:	f7fd fcfc 	bl	8014238 <mg_uecc_vli_testBit>
 8016840:	4603      	mov	r3, r0
 8016842:	2b00      	cmp	r3, #0
 8016844:	d001      	beq.n	801684a <mg_uecc_verify+0x39e>
 8016846:	2302      	movs	r3, #2
 8016848:	e000      	b.n	801684c <mg_uecc_verify+0x3a0>
 801684a:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801684c:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8016850:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016854:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801685c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8016860:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016864:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016868:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801686c:	4618      	mov	r0, r3
 801686e:	f7fd fd5b 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 8016872:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016876:	009b      	lsls	r3, r3, #2
 8016878:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801687c:	18d1      	adds	r1, r2, r3
 801687e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016882:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8016886:	4618      	mov	r0, r3
 8016888:	f7fd fd4e 	bl	8014328 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 801688c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016890:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8016894:	4611      	mov	r1, r2
 8016896:	4618      	mov	r0, r3
 8016898:	f7fd fc83 	bl	80141a2 <mg_uecc_vli_clear>
  z[0] = 1;
 801689c:	2301      	movs	r3, #1
 801689e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 80168a2:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80168a6:	3b02      	subs	r3, #2
 80168a8:	b29b      	uxth	r3, r3
 80168aa:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80168ae:	e087      	b.n	80169c0 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 80168b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80168b4:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80168b8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80168bc:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80168c0:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80168c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80168c8:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 80168ca:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 80168ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80168d2:	4611      	mov	r1, r2
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7fd fcaf 	bl	8014238 <mg_uecc_vli_testBit>
 80168da:	4603      	mov	r3, r0
 80168dc:	2b00      	cmp	r3, #0
 80168de:	bf14      	ite	ne
 80168e0:	2301      	movne	r3, #1
 80168e2:	2300      	moveq	r3, #0
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 80168e8:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 80168ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80168f0:	4611      	mov	r1, r2
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7fd fca0 	bl	8014238 <mg_uecc_vli_testBit>
 80168f8:	4603      	mov	r3, r0
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d001      	beq.n	8016902 <mg_uecc_verify+0x456>
 80168fe:	2302      	movs	r3, #2
 8016900:	e000      	b.n	8016904 <mg_uecc_verify+0x458>
 8016902:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8016904:	4323      	orrs	r3, r4
 8016906:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 801690a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801690e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016912:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801691a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 801691e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016922:	2b00      	cmp	r3, #0
 8016924:	d046      	beq.n	80169b4 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8016926:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801692a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801692e:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8016932:	4618      	mov	r0, r3
 8016934:	f7fd fcf8 	bl	8014328 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8016938:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8016942:	18d1      	adds	r1, r2, r3
 8016944:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016948:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801694c:	4618      	mov	r0, r3
 801694e:	f7fd fceb 	bl	8014328 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 8016952:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016956:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801695a:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801695e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016962:	f7fe fd6b 	bl	801543c <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8016966:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801696a:	1d1c      	adds	r4, r3, #4
 801696c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8016970:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016974:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8016978:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801697c:	9300      	str	r3, [sp, #0]
 801697e:	4623      	mov	r3, r4
 8016980:	f7fd ff87 	bl	8014892 <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 8016984:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8016988:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801698c:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016990:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016994:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	4623      	mov	r3, r4
 801699c:	f7fe fdc0 	bl	8015520 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 80169a0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80169a4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80169a8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80169ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169b0:	f7fe f8e3 	bl	8014b7a <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 80169b4:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 80169b8:	3b01      	subs	r3, #1
 80169ba:	b29b      	uxth	r3, r3
 80169bc:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80169c0:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	f6bf af73 	bge.w	80168b0 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 80169ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169ce:	1d1a      	adds	r2, r3, #4
 80169d0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80169d4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80169d8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80169dc:	f7fe f931 	bl	8014c42 <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 80169e0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80169e4:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80169e8:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80169ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169f0:	f7fe fd24 	bl	801543c <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 80169f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169f8:	3324      	adds	r3, #36	@ 0x24
 80169fa:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80169fe:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7fd fcb7 	bl	8014376 <mg_uecc_vli_cmp_unsafe>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d00b      	beq.n	8016a26 <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8016a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a12:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016a16:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016a1a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016a1e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016a22:	f7fd fdbb 	bl	801459c <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8016a26:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016a2a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8016a2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fd fcdb 	bl	80143ee <mg_uecc_vli_equal>
 8016a38:	4603      	mov	r3, r0
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd90      	pop	{r4, r7, pc}

08016a44 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 8016a44:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016a48:	b08f      	sub	sp, #60	@ 0x3c
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016a4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016a50:	627a      	str	r2, [r7, #36]	@ 0x24
 8016a52:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 8016a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a56:	2200      	movs	r2, #0
 8016a58:	469a      	mov	sl, r3
 8016a5a:	4693      	mov	fp, r2
 8016a5c:	6a3b      	ldr	r3, [r7, #32]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	61bb      	str	r3, [r7, #24]
 8016a62:	61fa      	str	r2, [r7, #28]
 8016a64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016a68:	4603      	mov	r3, r0
 8016a6a:	fb03 f20b 	mul.w	r2, r3, fp
 8016a6e:	460b      	mov	r3, r1
 8016a70:	fb0a f303 	mul.w	r3, sl, r3
 8016a74:	4413      	add	r3, r2
 8016a76:	4602      	mov	r2, r0
 8016a78:	fbaa 4502 	umull	r4, r5, sl, r2
 8016a7c:	442b      	add	r3, r5
 8016a7e:	461d      	mov	r5, r3
 8016a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a82:	2200      	movs	r2, #0
 8016a84:	613b      	str	r3, [r7, #16]
 8016a86:	617a      	str	r2, [r7, #20]
 8016a88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	eb14 0803 	adds.w	r8, r4, r3
 8016a92:	4613      	mov	r3, r2
 8016a94:	eb45 0903 	adc.w	r9, r5, r3
 8016a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	60bb      	str	r3, [r7, #8]
 8016aa0:	60fa      	str	r2, [r7, #12]
 8016aa2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016aa6:	460b      	mov	r3, r1
 8016aa8:	eb18 0303 	adds.w	r3, r8, r3
 8016aac:	603b      	str	r3, [r7, #0]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	eb49 0303 	adc.w	r3, r9, r3
 8016ab4:	607b      	str	r3, [r7, #4]
 8016ab6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016aba:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 8016abe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8016ac2:	f04f 0200 	mov.w	r2, #0
 8016ac6:	f04f 0300 	mov.w	r3, #0
 8016aca:	000a      	movs	r2, r1
 8016acc:	2300      	movs	r3, #0
 8016ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad0:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 8016ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	373c      	adds	r7, #60	@ 0x3c
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016ade:	4770      	bx	lr

08016ae0 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8016ae0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016ae4:	b08b      	sub	sp, #44	@ 0x2c
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	61f8      	str	r0, [r7, #28]
 8016aea:	61b9      	str	r1, [r7, #24]
 8016aec:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8016aee:	69fb      	ldr	r3, [r7, #28]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	2200      	movs	r2, #0
 8016af4:	60bb      	str	r3, [r7, #8]
 8016af6:	60fa      	str	r2, [r7, #12]
 8016af8:	69bb      	ldr	r3, [r7, #24]
 8016afa:	2200      	movs	r2, #0
 8016afc:	469a      	mov	sl, r3
 8016afe:	4693      	mov	fp, r2
 8016b00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016b04:	460b      	mov	r3, r1
 8016b06:	eb13 040a 	adds.w	r4, r3, sl
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	eb43 050b 	adc.w	r5, r3, fp
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	2200      	movs	r2, #0
 8016b14:	4698      	mov	r8, r3
 8016b16:	4691      	mov	r9, r2
 8016b18:	eb14 0308 	adds.w	r3, r4, r8
 8016b1c:	603b      	str	r3, [r7, #0]
 8016b1e:	eb45 0309 	adc.w	r3, r5, r9
 8016b22:	607b      	str	r3, [r7, #4]
 8016b24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016b28:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8016b2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016b30:	f04f 0200 	mov.w	r2, #0
 8016b34:	f04f 0300 	mov.w	r3, #0
 8016b38:	000a      	movs	r2, r1
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	69fb      	ldr	r3, [r7, #28]
 8016b3e:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8016b40:	6a3b      	ldr	r3, [r7, #32]
}
 8016b42:	4618      	mov	r0, r3
 8016b44:	372c      	adds	r7, #44	@ 0x2c
 8016b46:	46bd      	mov	sp, r7
 8016b48:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016b4c:	4770      	bx	lr

08016b4e <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 8016b4e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8016b52:	b085      	sub	sp, #20
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 8016b5a:	6879      	ldr	r1, [r7, #4]
 8016b5c:	6809      	ldr	r1, [r1, #0]
 8016b5e:	2000      	movs	r0, #0
 8016b60:	460c      	mov	r4, r1
 8016b62:	4605      	mov	r5, r0
 8016b64:	6839      	ldr	r1, [r7, #0]
 8016b66:	2000      	movs	r0, #0
 8016b68:	460a      	mov	r2, r1
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	eb14 0802 	adds.w	r8, r4, r2
 8016b70:	eb45 0903 	adc.w	r9, r5, r3
 8016b74:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 8016b78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016b7c:	f04f 0200 	mov.w	r2, #0
 8016b80:	f04f 0300 	mov.w	r3, #0
 8016b84:	000a      	movs	r2, r1
 8016b86:	2300      	movs	r3, #0
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8016b8c:	68bb      	ldr	r3, [r7, #8]
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3714      	adds	r7, #20
 8016b92:	46bd      	mov	sp, r7
 8016b94:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8016b98:	4770      	bx	lr

08016b9a <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 8016b9a:	b590      	push	{r4, r7, lr}
 8016b9c:	b085      	sub	sp, #20
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	331c      	adds	r3, #28
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	0fda      	lsrs	r2, r3, #31
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	4313      	orrs	r3, r2
 8016bb2:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	331c      	adds	r3, #28
 8016bb8:	681a      	ldr	r2, [r3, #0]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	331c      	adds	r3, #28
 8016bbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8016bc2:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8016bc4:	683a      	ldr	r2, [r7, #0]
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	00db      	lsls	r3, r3, #3
 8016bca:	4413      	add	r3, r2
 8016bcc:	005b      	lsls	r3, r3, #1
 8016bce:	4413      	add	r3, r2
 8016bd0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	60fb      	str	r3, [r7, #12]
 8016bd6:	e012      	b.n	8016bfe <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	009b      	lsls	r3, r3, #2
 8016bdc:	687a      	ldr	r2, [r7, #4]
 8016bde:	4413      	add	r3, r2
 8016be0:	6819      	ldr	r1, [r3, #0]
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	009b      	lsls	r3, r3, #2
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	18d4      	adds	r4, r2, r3
 8016bea:	f107 0308 	add.w	r3, r7, #8
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ff ffad 	bl	8016b4e <adc0>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	60fb      	str	r3, [r7, #12]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	2b07      	cmp	r3, #7
 8016c02:	d9e9      	bls.n	8016bd8 <propagate+0x3e>
  }
}
 8016c04:	bf00      	nop
 8016c06:	bf00      	nop
 8016c08:	3714      	adds	r7, #20
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd90      	pop	{r4, r7, pc}

08016c0e <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 8016c0e:	b590      	push	{r4, r7, lr}
 8016c10:	b087      	sub	sp, #28
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	60f8      	str	r0, [r7, #12]
 8016c16:	60b9      	str	r1, [r7, #8]
 8016c18:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 8016c1e:	2300      	movs	r3, #0
 8016c20:	617b      	str	r3, [r7, #20]
 8016c22:	e018      	b.n	8016c56 <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	009b      	lsls	r3, r3, #2
 8016c28:	68ba      	ldr	r2, [r7, #8]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	6819      	ldr	r1, [r3, #0]
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	4413      	add	r3, r2
 8016c36:	6818      	ldr	r0, [r3, #0]
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	68fa      	ldr	r2, [r7, #12]
 8016c3e:	18d4      	adds	r4, r2, r3
 8016c40:	f107 0310 	add.w	r3, r7, #16
 8016c44:	4602      	mov	r2, r0
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7ff ff4a 	bl	8016ae0 <adc>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	3301      	adds	r3, #1
 8016c54:	617b      	str	r3, [r7, #20]
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	2b07      	cmp	r3, #7
 8016c5a:	d9e3      	bls.n	8016c24 <add+0x16>
  }
  propagate(out, carry);
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	68f8      	ldr	r0, [r7, #12]
 8016c62:	f7ff ff9a 	bl	8016b9a <propagate>
}
 8016c66:	bf00      	nop
 8016c68:	371c      	adds	r7, #28
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd90      	pop	{r4, r7, pc}

08016c6e <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 8016c6e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016c72:	b08a      	sub	sp, #40	@ 0x28
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6178      	str	r0, [r7, #20]
 8016c78:	6139      	str	r1, [r7, #16]
 8016c7a:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 8016c7c:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 8016c80:	f04f 33ff 	mov.w	r3, #4294967295
 8016c84:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8016c88:	2300      	movs	r3, #0
 8016c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c8c:	e032      	b.n	8016cf4 <sub+0x86>
    carry = carry + a[i] - b[i];
 8016c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c90:	009b      	lsls	r3, r3, #2
 8016c92:	693a      	ldr	r2, [r7, #16]
 8016c94:	4413      	add	r3, r2
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	4698      	mov	r8, r3
 8016c9c:	4691      	mov	r9, r2
 8016c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016ca2:	eb18 0402 	adds.w	r4, r8, r2
 8016ca6:	eb49 0503 	adc.w	r5, r9, r3
 8016caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cac:	009b      	lsls	r3, r3, #2
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	4413      	add	r3, r2
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	469a      	mov	sl, r3
 8016cb8:	4693      	mov	fp, r2
 8016cba:	ebb4 030a 	subs.w	r3, r4, sl
 8016cbe:	603b      	str	r3, [r7, #0]
 8016cc0:	eb65 030b 	sbc.w	r3, r5, fp
 8016cc4:	607b      	str	r3, [r7, #4]
 8016cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8016cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd0:	009b      	lsls	r3, r3, #2
 8016cd2:	697a      	ldr	r2, [r7, #20]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	69ba      	ldr	r2, [r7, #24]
 8016cd8:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 8016cda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016cde:	f04f 0200 	mov.w	r2, #0
 8016ce2:	f04f 0300 	mov.w	r3, #0
 8016ce6:	000a      	movs	r2, r1
 8016ce8:	17cb      	asrs	r3, r1, #31
 8016cea:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8016cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf6:	2b07      	cmp	r3, #7
 8016cf8:	d9c9      	bls.n	8016c8e <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 8016cfa:	69bb      	ldr	r3, [r7, #24]
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	4619      	mov	r1, r3
 8016d00:	6978      	ldr	r0, [r7, #20]
 8016d02:	f7ff ff4a 	bl	8016b9a <propagate>
}
 8016d06:	bf00      	nop
 8016d08:	3728      	adds	r7, #40	@ 0x28
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016d10 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 8016d10:	b5b0      	push	{r4, r5, r7, lr}
 8016d12:	b09a      	sub	sp, #104	@ 0x68
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	60f8      	str	r0, [r7, #12]
 8016d18:	60b9      	str	r1, [r7, #8]
 8016d1a:	607a      	str	r2, [r7, #4]
 8016d1c:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 8016d1e:	f107 031c 	add.w	r3, r7, #28
 8016d22:	2240      	movs	r2, #64	@ 0x40
 8016d24:	2100      	movs	r1, #0
 8016d26:	4618      	mov	r0, r3
 8016d28:	f00c fcac 	bl	8023684 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8016d30:	e03a      	b.n	8016da8 <mul+0x98>
    limb_t mand = b[i];
 8016d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016d34:	009b      	lsls	r3, r3, #2
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	4413      	add	r3, r2
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 8016d42:	2300      	movs	r3, #0
 8016d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8016d46:	e020      	b.n	8016d8a <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 8016d48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d4a:	009b      	lsls	r3, r3, #2
 8016d4c:	68ba      	ldr	r2, [r7, #8]
 8016d4e:	4413      	add	r3, r2
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 8016d54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d58:	4413      	add	r3, r2
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	3368      	adds	r3, #104	@ 0x68
 8016d5e:	443b      	add	r3, r7
 8016d60:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8016d64:	697d      	ldr	r5, [r7, #20]
 8016d66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d6a:	18d4      	adds	r4, r2, r3
 8016d6c:	f107 0018 	add.w	r0, r7, #24
 8016d70:	462b      	mov	r3, r5
 8016d72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016d74:	f7ff fe66 	bl	8016a44 <umaal>
 8016d78:	4602      	mov	r2, r0
 8016d7a:	00a3      	lsls	r3, r4, #2
 8016d7c:	3368      	adds	r3, #104	@ 0x68
 8016d7e:	443b      	add	r3, r7
 8016d80:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 8016d84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d86:	3301      	adds	r3, #1
 8016d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8016d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d8c:	2b07      	cmp	r3, #7
 8016d8e:	d9db      	bls.n	8016d48 <mul+0x38>
    }
    accum[i + j] = carry2;
 8016d90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d94:	4413      	add	r3, r2
 8016d96:	69ba      	ldr	r2, [r7, #24]
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	3368      	adds	r3, #104	@ 0x68
 8016d9c:	443b      	add	r3, r7
 8016d9e:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 8016da2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016da4:	3301      	adds	r3, #1
 8016da6:	667b      	str	r3, [r7, #100]	@ 0x64
 8016da8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d3c0      	bcc.n	8016d32 <mul+0x22>
  }

  carry2 = 0;
 8016db0:	2300      	movs	r3, #0
 8016db2:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 8016db4:	2300      	movs	r3, #0
 8016db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8016db8:	e01b      	b.n	8016df2 <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 8016dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	3368      	adds	r3, #104	@ 0x68
 8016dc0:	443b      	add	r3, r7
 8016dc2:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8016dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016dc8:	3308      	adds	r3, #8
 8016dca:	009b      	lsls	r3, r3, #2
 8016dcc:	3368      	adds	r3, #104	@ 0x68
 8016dce:	443b      	add	r3, r7
 8016dd0:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8016dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016dd6:	009b      	lsls	r3, r3, #2
 8016dd8:	68fa      	ldr	r2, [r7, #12]
 8016dda:	18d4      	adds	r4, r2, r3
 8016ddc:	f107 0018 	add.w	r0, r7, #24
 8016de0:	462b      	mov	r3, r5
 8016de2:	2226      	movs	r2, #38	@ 0x26
 8016de4:	f7ff fe2e 	bl	8016a44 <umaal>
 8016de8:	4603      	mov	r3, r0
 8016dea:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8016dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016dee:	3301      	adds	r3, #1
 8016df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8016df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016df4:	2b07      	cmp	r3, #7
 8016df6:	d9e0      	bls.n	8016dba <mul+0xaa>
  }
  propagate(out, carry2);
 8016df8:	69bb      	ldr	r3, [r7, #24]
 8016dfa:	4619      	mov	r1, r3
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7ff fecc 	bl	8016b9a <propagate>
}
 8016e02:	bf00      	nop
 8016e04:	3768      	adds	r7, #104	@ 0x68
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bdb0      	pop	{r4, r5, r7, pc}

08016e0a <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b082      	sub	sp, #8
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
 8016e12:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 8016e14:	2308      	movs	r3, #8
 8016e16:	683a      	ldr	r2, [r7, #0]
 8016e18:	6839      	ldr	r1, [r7, #0]
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f7ff ff78 	bl	8016d10 <mul>
}
 8016e20:	bf00      	nop
 8016e22:	3708      	adds	r7, #8
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}

08016e28 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 8016e32:	2308      	movs	r3, #8
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	6839      	ldr	r1, [r7, #0]
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f7ff ff69 	bl	8016d10 <mul>
}
 8016e3e:	bf00      	nop
 8016e40:	3708      	adds	r7, #8
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}

08016e46 <sqr1>:
static void sqr1(mg_fe a) {
 8016e46:	b580      	push	{r7, lr}
 8016e48:	b082      	sub	sp, #8
 8016e4a:	af00      	add	r7, sp, #0
 8016e4c:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 8016e4e:	6879      	ldr	r1, [r7, #4]
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f7ff ffe9 	bl	8016e28 <mul1>
}
 8016e56:	bf00      	nop
 8016e58:	3708      	adds	r7, #8
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}

08016e5e <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 8016e5e:	b480      	push	{r7}
 8016e60:	b087      	sub	sp, #28
 8016e62:	af00      	add	r7, sp, #0
 8016e64:	60f8      	str	r0, [r7, #12]
 8016e66:	60b9      	str	r1, [r7, #8]
 8016e68:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	617b      	str	r3, [r7, #20]
 8016e6e:	e028      	b.n	8016ec2 <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	68fa      	ldr	r2, [r7, #12]
 8016e76:	4413      	add	r3, r2
 8016e78:	681a      	ldr	r2, [r3, #0]
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	009b      	lsls	r3, r3, #2
 8016e7e:	68b9      	ldr	r1, [r7, #8]
 8016e80:	440b      	add	r3, r1
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	4053      	eors	r3, r2
 8016e86:	687a      	ldr	r2, [r7, #4]
 8016e88:	4013      	ands	r3, r2
 8016e8a:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	009b      	lsls	r3, r3, #2
 8016e90:	68fa      	ldr	r2, [r7, #12]
 8016e92:	4413      	add	r3, r2
 8016e94:	6819      	ldr	r1, [r3, #0]
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	009b      	lsls	r3, r3, #2
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	693a      	ldr	r2, [r7, #16]
 8016ea0:	404a      	eors	r2, r1
 8016ea2:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 8016ea4:	697b      	ldr	r3, [r7, #20]
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	68ba      	ldr	r2, [r7, #8]
 8016eaa:	4413      	add	r3, r2
 8016eac:	6819      	ldr	r1, [r3, #0]
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	009b      	lsls	r3, r3, #2
 8016eb2:	68ba      	ldr	r2, [r7, #8]
 8016eb4:	4413      	add	r3, r2
 8016eb6:	693a      	ldr	r2, [r7, #16]
 8016eb8:	404a      	eors	r2, r1
 8016eba:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8016ebc:	697b      	ldr	r3, [r7, #20]
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	617b      	str	r3, [r7, #20]
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	2b0f      	cmp	r3, #15
 8016ec6:	d9d3      	bls.n	8016e70 <condswap+0x12>
  }
}
 8016ec8:	bf00      	nop
 8016eca:	bf00      	nop
 8016ecc:	371c      	adds	r7, #28
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed4:	4770      	bx	lr

08016ed6 <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 8016ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eda:	b08b      	sub	sp, #44	@ 0x2c
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 8016ee0:	2313      	movs	r3, #19
 8016ee2:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ee8:	e012      	b.n	8016f10 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 8016eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eec:	009b      	lsls	r3, r3, #2
 8016eee:	68fa      	ldr	r2, [r7, #12]
 8016ef0:	4413      	add	r3, r2
 8016ef2:	6819      	ldr	r1, [r3, #0]
 8016ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	68fa      	ldr	r2, [r7, #12]
 8016efa:	18d6      	adds	r6, r2, r3
 8016efc:	f107 0314 	add.w	r3, r7, #20
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff fe24 	bl	8016b4e <adc0>
 8016f06:	4603      	mov	r3, r0
 8016f08:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f12:	2b07      	cmp	r3, #7
 8016f14:	d9e9      	bls.n	8016eea <canon+0x14>
  }
  propagate(x, carry0);
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	4619      	mov	r1, r3
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f7ff fe3d 	bl	8016b9a <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 8016f20:	f06f 0212 	mvn.w	r2, #18
 8016f24:	f04f 33ff 	mov.w	r3, #4294967295
 8016f28:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 8016f30:	2300      	movs	r3, #0
 8016f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f34:	e02a      	b.n	8016f8c <canon+0xb6>
    carry += x[i];
 8016f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f38:	009b      	lsls	r3, r3, #2
 8016f3a:	68fa      	ldr	r2, [r7, #12]
 8016f3c:	4413      	add	r3, r2
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	2200      	movs	r2, #0
 8016f42:	4698      	mov	r8, r3
 8016f44:	4691      	mov	r9, r2
 8016f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016f4a:	eb12 0108 	adds.w	r1, r2, r8
 8016f4e:	6039      	str	r1, [r7, #0]
 8016f50:	eb43 0309 	adc.w	r3, r3, r9
 8016f54:	607b      	str	r3, [r7, #4]
 8016f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 8016f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f60:	009b      	lsls	r3, r3, #2
 8016f62:	68fa      	ldr	r2, [r7, #12]
 8016f64:	4413      	add	r3, r2
 8016f66:	69ba      	ldr	r2, [r7, #24]
 8016f68:	601a      	str	r2, [r3, #0]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	6a3a      	ldr	r2, [r7, #32]
 8016f6e:	4313      	orrs	r3, r2
 8016f70:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 8016f72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016f76:	f04f 0200 	mov.w	r2, #0
 8016f7a:	f04f 0300 	mov.w	r3, #0
 8016f7e:	000a      	movs	r2, r1
 8016f80:	17cb      	asrs	r3, r1, #31
 8016f82:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8016f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f88:	3301      	adds	r3, #1
 8016f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f8e:	2b07      	cmp	r3, #7
 8016f90:	d9d1      	bls.n	8016f36 <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 8016f92:	6a3b      	ldr	r3, [r7, #32]
 8016f94:	2200      	movs	r2, #0
 8016f96:	461c      	mov	r4, r3
 8016f98:	4615      	mov	r5, r2
 8016f9a:	f114 3aff 	adds.w	sl, r4, #4294967295
 8016f9e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8016fa2:	f04f 0200 	mov.w	r2, #0
 8016fa6:	f04f 0300 	mov.w	r3, #0
 8016faa:	465a      	mov	r2, fp
 8016fac:	2300      	movs	r3, #0
 8016fae:	4613      	mov	r3, r2
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	372c      	adds	r7, #44	@ 0x2c
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016fbc <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b088      	sub	sp, #32
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	61fb      	str	r3, [r7, #28]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	3320      	adds	r3, #32
 8016fcc:	61bb      	str	r3, [r7, #24]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	3340      	adds	r3, #64	@ 0x40
 8016fd2:	617b      	str	r3, [r7, #20]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	3360      	adds	r3, #96	@ 0x60
 8016fd8:	613b      	str	r3, [r7, #16]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	3380      	adds	r3, #128	@ 0x80
 8016fde:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8016fe0:	69ba      	ldr	r2, [r7, #24]
 8016fe2:	69f9      	ldr	r1, [r7, #28]
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	f7ff fe12 	bl	8016c0e <add>
  sub(z2, x2, z2);                                 // z2 = B
 8016fea:	69ba      	ldr	r2, [r7, #24]
 8016fec:	69f9      	ldr	r1, [r7, #28]
 8016fee:	69b8      	ldr	r0, [r7, #24]
 8016ff0:	f7ff fe3d 	bl	8016c6e <sub>
  add(x2, x3, z3);                                 // x2 = C
 8016ff4:	693a      	ldr	r2, [r7, #16]
 8016ff6:	6979      	ldr	r1, [r7, #20]
 8016ff8:	69f8      	ldr	r0, [r7, #28]
 8016ffa:	f7ff fe08 	bl	8016c0e <add>
  sub(z3, x3, z3);                                 // z3 = D
 8016ffe:	693a      	ldr	r2, [r7, #16]
 8017000:	6979      	ldr	r1, [r7, #20]
 8017002:	6938      	ldr	r0, [r7, #16]
 8017004:	f7ff fe33 	bl	8016c6e <sub>
  mul1(z3, t1);                                    // z3 = DA
 8017008:	68f9      	ldr	r1, [r7, #12]
 801700a:	6938      	ldr	r0, [r7, #16]
 801700c:	f7ff ff0c 	bl	8016e28 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 8017010:	69b9      	ldr	r1, [r7, #24]
 8017012:	69f8      	ldr	r0, [r7, #28]
 8017014:	f7ff ff08 	bl	8016e28 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 8017018:	69fa      	ldr	r2, [r7, #28]
 801701a:	6939      	ldr	r1, [r7, #16]
 801701c:	6978      	ldr	r0, [r7, #20]
 801701e:	f7ff fdf6 	bl	8016c0e <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 8017022:	69fa      	ldr	r2, [r7, #28]
 8017024:	6939      	ldr	r1, [r7, #16]
 8017026:	6938      	ldr	r0, [r7, #16]
 8017028:	f7ff fe21 	bl	8016c6e <sub>
  sqr1(t1);                                        // t1 = AA
 801702c:	68f8      	ldr	r0, [r7, #12]
 801702e:	f7ff ff0a 	bl	8016e46 <sqr1>
  sqr1(z2);                                        // z2 = BB
 8017032:	69b8      	ldr	r0, [r7, #24]
 8017034:	f7ff ff07 	bl	8016e46 <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 8017038:	69ba      	ldr	r2, [r7, #24]
 801703a:	68f9      	ldr	r1, [r7, #12]
 801703c:	69f8      	ldr	r0, [r7, #28]
 801703e:	f7ff fe16 	bl	8016c6e <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 8017042:	2301      	movs	r3, #1
 8017044:	4a06      	ldr	r2, [pc, #24]	@ (8017060 <ladder_part1+0xa4>)
 8017046:	69f9      	ldr	r1, [r7, #28]
 8017048:	69b8      	ldr	r0, [r7, #24]
 801704a:	f7ff fe61 	bl	8016d10 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 801704e:	68fa      	ldr	r2, [r7, #12]
 8017050:	69b9      	ldr	r1, [r7, #24]
 8017052:	69b8      	ldr	r0, [r7, #24]
 8017054:	f7ff fddb 	bl	8016c0e <add>
}
 8017058:	bf00      	nop
 801705a:	3720      	adds	r7, #32
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	0802a658 	.word	0x0802a658

08017064 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 8017064:	b580      	push	{r7, lr}
 8017066:	b088      	sub	sp, #32
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	61fb      	str	r3, [r7, #28]
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	3320      	adds	r3, #32
 8017076:	61bb      	str	r3, [r7, #24]
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	3340      	adds	r3, #64	@ 0x40
 801707c:	617b      	str	r3, [r7, #20]
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	3360      	adds	r3, #96	@ 0x60
 8017082:	613b      	str	r3, [r7, #16]
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	3380      	adds	r3, #128	@ 0x80
 8017088:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 801708a:	6938      	ldr	r0, [r7, #16]
 801708c:	f7ff fedb 	bl	8016e46 <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8017090:	6839      	ldr	r1, [r7, #0]
 8017092:	6938      	ldr	r0, [r7, #16]
 8017094:	f7ff fec8 	bl	8016e28 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8017098:	6978      	ldr	r0, [r7, #20]
 801709a:	f7ff fed4 	bl	8016e46 <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 801709e:	69f9      	ldr	r1, [r7, #28]
 80170a0:	69b8      	ldr	r0, [r7, #24]
 80170a2:	f7ff fec1 	bl	8016e28 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 80170a6:	69fa      	ldr	r2, [r7, #28]
 80170a8:	68f9      	ldr	r1, [r7, #12]
 80170aa:	69f8      	ldr	r0, [r7, #28]
 80170ac:	f7ff fddf 	bl	8016c6e <sub>
  mul1(x2, t1);     // x2 = AA*BB
 80170b0:	68f9      	ldr	r1, [r7, #12]
 80170b2:	69f8      	ldr	r0, [r7, #28]
 80170b4:	f7ff feb8 	bl	8016e28 <mul1>
}
 80170b8:	bf00      	nop
 80170ba:	3720      	adds	r7, #32
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}

080170c0 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b094      	sub	sp, #80	@ 0x50
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	60f8      	str	r0, [r7, #12]
 80170c8:	60b9      	str	r1, [r7, #8]
 80170ca:	607a      	str	r2, [r7, #4]
 80170cc:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 80170ce:	2300      	movs	r3, #0
 80170d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	3340      	adds	r3, #64	@ 0x40
 80170da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	3360      	adds	r3, #96	@ 0x60
 80170e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 80170e2:	2280      	movs	r2, #128	@ 0x80
 80170e4:	2100      	movs	r1, #0
 80170e6:	68f8      	ldr	r0, [r7, #12]
 80170e8:	f00c facc 	bl	8023684 <memset>
  x2[0] = z3[0] = 1;
 80170ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170ee:	2201      	movs	r2, #1
 80170f0:	601a      	str	r2, [r3, #0]
 80170f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170f4:	681a      	ldr	r2, [r3, #0]
 80170f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80170f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 80170fa:	2300      	movs	r3, #0
 80170fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80170fe:	e031      	b.n	8017164 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 8017100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	3303      	adds	r3, #3
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	4413      	add	r3, r2
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	061a      	lsls	r2, r3, #24
 801710e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	3302      	adds	r3, #2
 8017114:	6879      	ldr	r1, [r7, #4]
 8017116:	440b      	add	r3, r1
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	041b      	lsls	r3, r3, #16
 801711c:	431a      	orrs	r2, r3
 801711e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017120:	009b      	lsls	r3, r3, #2
 8017122:	3301      	adds	r3, #1
 8017124:	6879      	ldr	r1, [r7, #4]
 8017126:	440b      	add	r3, r1
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	021b      	lsls	r3, r3, #8
 801712c:	4313      	orrs	r3, r2
 801712e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017130:	0092      	lsls	r2, r2, #2
 8017132:	4611      	mov	r1, r2
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	440a      	add	r2, r1
 8017138:	7812      	ldrb	r2, [r2, #0]
 801713a:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 801713c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	3350      	adds	r3, #80	@ 0x50
 8017142:	443b      	add	r3, r7
 8017144:	f843 2c3c 	str.w	r2, [r3, #-60]
 8017148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801714e:	441a      	add	r2, r3
 8017150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	3350      	adds	r3, #80	@ 0x50
 8017156:	443b      	add	r3, r7
 8017158:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801715c:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 801715e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017160:	3301      	adds	r3, #1
 8017162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017166:	2b07      	cmp	r3, #7
 8017168:	ddca      	ble.n	8017100 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 801716a:	23ff      	movs	r3, #255	@ 0xff
 801716c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801716e:	e049      	b.n	8017204 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8017170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017172:	2b00      	cmp	r3, #0
 8017174:	da00      	bge.n	8017178 <x25519_core+0xb8>
 8017176:	3307      	adds	r3, #7
 8017178:	10db      	asrs	r3, r3, #3
 801717a:	461a      	mov	r2, r3
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	4413      	add	r3, r2
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d01a      	beq.n	80171c2 <x25519_core+0x102>
      if (i / 8 == 0) {
 801718c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801718e:	3307      	adds	r3, #7
 8017190:	2b0e      	cmp	r3, #14
 8017192:	d806      	bhi.n	80171a2 <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8017194:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017198:	f023 0307 	bic.w	r3, r3, #7
 801719c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80171a0:	e00f      	b.n	80171c2 <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 80171a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171a4:	3bf8      	subs	r3, #248	@ 0xf8
 80171a6:	2b07      	cmp	r3, #7
 80171a8:	d80b      	bhi.n	80171c2 <x25519_core+0x102>
        bytei &= 0x7F;
 80171aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80171ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80171b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 80171b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80171ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 80171c2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80171c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171c8:	f003 0307 	and.w	r3, r3, #7
 80171cc:	fa42 f303 	asr.w	r3, r2, r3
 80171d0:	f003 0301 	and.w	r3, r3, #1
 80171d4:	425b      	negs	r3, r3
 80171d6:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 80171d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80171da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171dc:	4053      	eors	r3, r2
 80171de:	461a      	mov	r2, r3
 80171e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80171e2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80171e4:	f7ff fe3b 	bl	8016e5e <condswap>
    swap = doswap;
 80171e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171ea:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 80171ec:	68f8      	ldr	r0, [r7, #12]
 80171ee:	f7ff fee5 	bl	8016fbc <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 80171f2:	f107 0314 	add.w	r3, r7, #20
 80171f6:	4619      	mov	r1, r3
 80171f8:	68f8      	ldr	r0, [r7, #12]
 80171fa:	f7ff ff33 	bl	8017064 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 80171fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017200:	3b01      	subs	r3, #1
 8017202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017206:	2b00      	cmp	r3, #0
 8017208:	dab2      	bge.n	8017170 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 801720a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801720c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801720e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8017210:	f7ff fe25 	bl	8016e5e <condswap>
}
 8017214:	bf00      	nop
 8017216:	3750      	adds	r7, #80	@ 0x50
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}

0801721c <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 801721c:	b580      	push	{r7, lr}
 801721e:	b0be      	sub	sp, #248	@ 0xf8
 8017220:	af00      	add	r7, sp, #0
 8017222:	60f8      	str	r0, [r7, #12]
 8017224:	60b9      	str	r1, [r7, #8]
 8017226:	607a      	str	r2, [r7, #4]
 8017228:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 801722a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	687a      	ldr	r2, [r7, #4]
 8017232:	68b9      	ldr	r1, [r7, #8]
 8017234:	f7ff ff44 	bl	80170c0 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8017238:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801723c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8017240:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017244:	3320      	adds	r3, #32
 8017246:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 801724a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801724e:	3360      	adds	r3, #96	@ 0x60
 8017250:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8017254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017258:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 801725c:	2300      	movs	r3, #0
 801725e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8017262:	e043      	b.n	80172ec <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8017264:	4952      	ldr	r1, [pc, #328]	@ (80173b0 <mg_tls_x25519+0x194>)
 8017266:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801726a:	4613      	mov	r3, r2
 801726c:	005b      	lsls	r3, r3, #1
 801726e:	4413      	add	r3, r2
 8017270:	440b      	add	r3, r1
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8017278:	015b      	lsls	r3, r3, #5
 801727a:	4413      	add	r3, r2
 801727c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8017280:	494b      	ldr	r1, [pc, #300]	@ (80173b0 <mg_tls_x25519+0x194>)
 8017282:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8017286:	4613      	mov	r3, r2
 8017288:	005b      	lsls	r3, r3, #1
 801728a:	4413      	add	r3, r2
 801728c:	440b      	add	r3, r1
 801728e:	3302      	adds	r3, #2
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017296:	e00e      	b.n	80172b6 <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8017298:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 801729c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80172a0:	f7ff fdb3 	bl	8016e0a <sqr>
      prev = a;
 80172a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80172a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 80172ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80172b0:	3b01      	subs	r3, #1
 80172b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80172b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	dcec      	bgt.n	8017298 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 80172be:	493c      	ldr	r1, [pc, #240]	@ (80173b0 <mg_tls_x25519+0x194>)
 80172c0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80172c4:	4613      	mov	r3, r2
 80172c6:	005b      	lsls	r3, r3, #1
 80172c8:	4413      	add	r3, r2
 80172ca:	440b      	add	r3, r1
 80172cc:	3301      	adds	r3, #1
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80172d4:	015b      	lsls	r3, r3, #5
 80172d6:	4413      	add	r3, r2
 80172d8:	4619      	mov	r1, r3
 80172da:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80172de:	f7ff fda3 	bl	8016e28 <mul1>
  for (i = 0; i < 13; i++) {
 80172e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80172e6:	3301      	adds	r3, #1
 80172e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80172ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80172f0:	2b0c      	cmp	r3, #12
 80172f2:	ddb7      	ble.n	8017264 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 80172f4:	f107 0014 	add.w	r0, r7, #20
 80172f8:	2308      	movs	r3, #8
 80172fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80172fe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8017302:	f7ff fd05 	bl	8016d10 <mul>
  ret = (int) canon(out_limbs);
 8017306:	f107 0314 	add.w	r3, r7, #20
 801730a:	4618      	mov	r0, r3
 801730c:	f7ff fde3 	bl	8016ed6 <canon>
 8017310:	4603      	mov	r3, r0
 8017312:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d102      	bne.n	8017322 <mg_tls_x25519+0x106>
 801731c:	2300      	movs	r3, #0
 801731e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 8017322:	2300      	movs	r3, #0
 8017324:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8017328:	e038      	b.n	801739c <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 801732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	33f8      	adds	r3, #248	@ 0xf8
 8017332:	443b      	add	r3, r7
 8017334:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8017338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 801733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017340:	009b      	lsls	r3, r3, #2
 8017342:	461a      	mov	r2, r3
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	4413      	add	r3, r2
 8017348:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801734c:	b2d2      	uxtb	r2, r2
 801734e:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8017350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017354:	0a19      	lsrs	r1, r3, #8
 8017356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	3301      	adds	r3, #1
 801735e:	68fa      	ldr	r2, [r7, #12]
 8017360:	4413      	add	r3, r2
 8017362:	b2ca      	uxtb	r2, r1
 8017364:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 8017366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801736a:	0c19      	lsrs	r1, r3, #16
 801736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017370:	009b      	lsls	r3, r3, #2
 8017372:	3302      	adds	r3, #2
 8017374:	68fa      	ldr	r2, [r7, #12]
 8017376:	4413      	add	r3, r2
 8017378:	b2ca      	uxtb	r2, r1
 801737a:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 801737c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017380:	0e19      	lsrs	r1, r3, #24
 8017382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017386:	009b      	lsls	r3, r3, #2
 8017388:	3303      	adds	r3, #3
 801738a:	68fa      	ldr	r2, [r7, #12]
 801738c:	4413      	add	r3, r2
 801738e:	b2ca      	uxtb	r2, r1
 8017390:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8017392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017396:	3301      	adds	r3, #1
 8017398:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801739c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80173a0:	2b07      	cmp	r3, #7
 80173a2:	ddc2      	ble.n	801732a <mg_tls_x25519+0x10e>
  }
  return ret;
 80173a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	37f8      	adds	r7, #248	@ 0xf8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}
 80173b0:	0802a990 	.word	0x0802a990

080173b4 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80173bc:	2204      	movs	r2, #4
 80173be:	491b      	ldr	r1, [pc, #108]	@ (801742c <mg_url_is_ssl+0x78>)
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f00c f974 	bl	80236ae <strncmp>
 80173c6:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d027      	beq.n	801741c <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80173cc:	2206      	movs	r2, #6
 80173ce:	4918      	ldr	r1, [pc, #96]	@ (8017430 <mg_url_is_ssl+0x7c>)
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f00c f96c 	bl	80236ae <strncmp>
 80173d6:	4603      	mov	r3, r0
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d01f      	beq.n	801741c <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80173dc:	2206      	movs	r2, #6
 80173de:	4915      	ldr	r1, [pc, #84]	@ (8017434 <mg_url_is_ssl+0x80>)
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f00c f964 	bl	80236ae <strncmp>
 80173e6:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d017      	beq.n	801741c <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80173ec:	2204      	movs	r2, #4
 80173ee:	4912      	ldr	r1, [pc, #72]	@ (8017438 <mg_url_is_ssl+0x84>)
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f00c f95c 	bl	80236ae <strncmp>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d00f      	beq.n	801741c <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80173fc:	2204      	movs	r2, #4
 80173fe:	490f      	ldr	r1, [pc, #60]	@ (801743c <mg_url_is_ssl+0x88>)
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f00c f954 	bl	80236ae <strncmp>
 8017406:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8017408:	2b00      	cmp	r3, #0
 801740a:	d007      	beq.n	801741c <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801740c:	2205      	movs	r2, #5
 801740e:	490c      	ldr	r1, [pc, #48]	@ (8017440 <mg_url_is_ssl+0x8c>)
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f00c f94c 	bl	80236ae <strncmp>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	d101      	bne.n	8017420 <mg_url_is_ssl+0x6c>
 801741c:	2301      	movs	r3, #1
 801741e:	e000      	b.n	8017422 <mg_url_is_ssl+0x6e>
 8017420:	2300      	movs	r3, #0
}
 8017422:	4618      	mov	r0, r3
 8017424:	3708      	adds	r7, #8
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	08029550 	.word	0x08029550
 8017430:	08029558 	.word	0x08029558
 8017434:	08029560 	.word	0x08029560
 8017438:	08029568 	.word	0x08029568
 801743c:	08029570 	.word	0x08029570
 8017440:	08029578 	.word	0x08029578

08017444 <urlparse>:

static struct url urlparse(const char *url) {
 8017444:	b5b0      	push	{r4, r5, r7, lr}
 8017446:	b08a      	sub	sp, #40	@ 0x28
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801744e:	f107 0308 	add.w	r3, r7, #8
 8017452:	221c      	movs	r2, #28
 8017454:	2100      	movs	r1, #0
 8017456:	4618      	mov	r0, r3
 8017458:	f00c f914 	bl	8023684 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801745c:	2300      	movs	r3, #0
 801745e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017460:	e05b      	b.n	801751a <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8017462:	683a      	ldr	r2, [r7, #0]
 8017464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017466:	4413      	add	r3, r2
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	2b2f      	cmp	r3, #47	@ 0x2f
 801746c:	d112      	bne.n	8017494 <urlparse+0x50>
 801746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017470:	2b00      	cmp	r3, #0
 8017472:	d00f      	beq.n	8017494 <urlparse+0x50>
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d10c      	bne.n	8017494 <urlparse+0x50>
 801747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801747c:	3b01      	subs	r3, #1
 801747e:	683a      	ldr	r2, [r7, #0]
 8017480:	4413      	add	r3, r2
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	2b2f      	cmp	r3, #47	@ 0x2f
 8017486:	d105      	bne.n	8017494 <urlparse+0x50>
      u.host = i + 1;
 8017488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801748a:	3301      	adds	r3, #1
 801748c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801748e:	2300      	movs	r3, #0
 8017490:	61bb      	str	r3, [r7, #24]
 8017492:	e03f      	b.n	8017514 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8017494:	683a      	ldr	r2, [r7, #0]
 8017496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017498:	4413      	add	r3, r2
 801749a:	781b      	ldrb	r3, [r3, #0]
 801749c:	2b5d      	cmp	r3, #93	@ 0x5d
 801749e:	d102      	bne.n	80174a6 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 80174a0:	2300      	movs	r3, #0
 80174a2:	61bb      	str	r3, [r7, #24]
 80174a4:	e036      	b.n	8017514 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80174a6:	683a      	ldr	r2, [r7, #0]
 80174a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174aa:	4413      	add	r3, r2
 80174ac:	781b      	ldrb	r3, [r3, #0]
 80174ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80174b0:	d109      	bne.n	80174c6 <urlparse+0x82>
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d106      	bne.n	80174c6 <urlparse+0x82>
 80174b8:	69fb      	ldr	r3, [r7, #28]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d103      	bne.n	80174c6 <urlparse+0x82>
      u.port = i + 1;
 80174be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c0:	3301      	adds	r3, #1
 80174c2:	61bb      	str	r3, [r7, #24]
 80174c4:	e026      	b.n	8017514 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80174c6:	683a      	ldr	r2, [r7, #0]
 80174c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ca:	4413      	add	r3, r2
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2b40      	cmp	r3, #64	@ 0x40
 80174d0:	d112      	bne.n	80174f8 <urlparse+0xb4>
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d10f      	bne.n	80174f8 <urlparse+0xb4>
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d10c      	bne.n	80174f8 <urlparse+0xb4>
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d109      	bne.n	80174f8 <urlparse+0xb4>
      u.user = u.host;
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80174e8:	69bb      	ldr	r3, [r7, #24]
 80174ea:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80174ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ee:	3301      	adds	r3, #1
 80174f0:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80174f2:	2300      	movs	r3, #0
 80174f4:	61bb      	str	r3, [r7, #24]
 80174f6:	e00d      	b.n	8017514 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80174f8:	683a      	ldr	r2, [r7, #0]
 80174fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174fc:	4413      	add	r3, r2
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	2b2f      	cmp	r3, #47	@ 0x2f
 8017502:	d107      	bne.n	8017514 <urlparse+0xd0>
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d004      	beq.n	8017514 <urlparse+0xd0>
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d101      	bne.n	8017514 <urlparse+0xd0>
      u.uri = i;
 8017510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017512:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8017514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017516:	3301      	adds	r3, #1
 8017518:	627b      	str	r3, [r7, #36]	@ 0x24
 801751a:	683a      	ldr	r2, [r7, #0]
 801751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801751e:	4413      	add	r3, r2
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d19d      	bne.n	8017462 <urlparse+0x1e>
    }
  }
  u.end = i;
 8017526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017528:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	461d      	mov	r5, r3
 801752e:	f107 0408 	add.w	r4, r7, #8
 8017532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017536:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801753a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	3728      	adds	r7, #40	@ 0x28
 8017542:	46bd      	mov	sp, r7
 8017544:	bdb0      	pop	{r4, r5, r7, pc}

08017546 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8017546:	b580      	push	{r7, lr}
 8017548:	b08c      	sub	sp, #48	@ 0x30
 801754a:	af00      	add	r7, sp, #0
 801754c:	6078      	str	r0, [r7, #4]
 801754e:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8017550:	f107 0310 	add.w	r3, r7, #16
 8017554:	6839      	ldr	r1, [r7, #0]
 8017556:	4618      	mov	r0, r3
 8017558:	f7ff ff74 	bl	8017444 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 801755c:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 801755e:	2b00      	cmp	r3, #0
 8017560:	d004      	beq.n	801756c <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8017562:	6a3a      	ldr	r2, [r7, #32]
 8017564:	69fb      	ldr	r3, [r7, #28]
 8017566:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8017568:	3b01      	subs	r3, #1
 801756a:	e009      	b.n	8017580 <mg_url_host+0x3a>
 801756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 801756e:	2b00      	cmp	r3, #0
 8017570:	d003      	beq.n	801757a <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8017572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017574:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8017576:	1ad3      	subs	r3, r2, r3
 8017578:	e002      	b.n	8017580 <mg_url_host+0x3a>
 801757a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8017580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	683a      	ldr	r2, [r7, #0]
 8017586:	18d1      	adds	r1, r2, r3
 8017588:	f107 0308 	add.w	r3, r7, #8
 801758c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801758e:	4618      	mov	r0, r3
 8017590:	f7f7 fa4b 	bl	800ea2a <mg_str_n>
  return s;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	461a      	mov	r2, r3
 8017598:	f107 0308 	add.w	r3, r7, #8
 801759c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80175a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	3730      	adds	r7, #48	@ 0x30
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b08a      	sub	sp, #40	@ 0x28
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 80175b4:	f107 0308 	add.w	r3, r7, #8
 80175b8:	6879      	ldr	r1, [r7, #4]
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7ff ff42 	bl	8017444 <urlparse>
  unsigned short port = 0;
 80175c0:	2300      	movs	r3, #0
 80175c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80175c4:	2205      	movs	r2, #5
 80175c6:	4925      	ldr	r1, [pc, #148]	@ (801765c <mg_url_port+0xb0>)
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f00c f870 	bl	80236ae <strncmp>
 80175ce:	4603      	mov	r3, r0
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d007      	beq.n	80175e4 <mg_url_port+0x38>
 80175d4:	2203      	movs	r2, #3
 80175d6:	4922      	ldr	r1, [pc, #136]	@ (8017660 <mg_url_port+0xb4>)
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f00c f868 	bl	80236ae <strncmp>
 80175de:	4603      	mov	r3, r0
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d101      	bne.n	80175e8 <mg_url_port+0x3c>
 80175e4:	2350      	movs	r3, #80	@ 0x50
 80175e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80175e8:	2204      	movs	r2, #4
 80175ea:	491e      	ldr	r1, [pc, #120]	@ (8017664 <mg_url_port+0xb8>)
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f00c f85e 	bl	80236ae <strncmp>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d007      	beq.n	8017608 <mg_url_port+0x5c>
 80175f8:	2206      	movs	r2, #6
 80175fa:	491b      	ldr	r1, [pc, #108]	@ (8017668 <mg_url_port+0xbc>)
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f00c f856 	bl	80236ae <strncmp>
 8017602:	4603      	mov	r3, r0
 8017604:	2b00      	cmp	r3, #0
 8017606:	d102      	bne.n	801760e <mg_url_port+0x62>
    port = 443;
 8017608:	f240 13bb 	movw	r3, #443	@ 0x1bb
 801760c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 801760e:	2205      	movs	r2, #5
 8017610:	4916      	ldr	r1, [pc, #88]	@ (801766c <mg_url_port+0xc0>)
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f00c f84b 	bl	80236ae <strncmp>
 8017618:	4603      	mov	r3, r0
 801761a:	2b00      	cmp	r3, #0
 801761c:	d102      	bne.n	8017624 <mg_url_port+0x78>
 801761e:	f240 735b 	movw	r3, #1883	@ 0x75b
 8017622:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8017624:	2206      	movs	r2, #6
 8017626:	4912      	ldr	r1, [pc, #72]	@ (8017670 <mg_url_port+0xc4>)
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f00c f840 	bl	80236ae <strncmp>
 801762e:	4603      	mov	r3, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	d102      	bne.n	801763a <mg_url_port+0x8e>
 8017634:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8017638:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801763a:	69bb      	ldr	r3, [r7, #24]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d007      	beq.n	8017650 <mg_url_port+0xa4>
 8017640:	69bb      	ldr	r3, [r7, #24]
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	4413      	add	r3, r2
 8017646:	4618      	mov	r0, r3
 8017648:	f00a fd9c 	bl	8022184 <atoi>
 801764c:	4603      	mov	r3, r0
 801764e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8017650:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8017652:	4618      	mov	r0, r3
 8017654:	3728      	adds	r7, #40	@ 0x28
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
 801765a:	bf00      	nop
 801765c:	08029580 	.word	0x08029580
 8017660:	08029588 	.word	0x08029588
 8017664:	08029550 	.word	0x08029550
 8017668:	08029558 	.word	0x08029558
 801766c:	0802958c 	.word	0x0802958c
 8017670:	08029560 	.word	0x08029560

08017674 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8017674:	b480      	push	{r7}
 8017676:	b083      	sub	sp, #12
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d00a      	beq.n	801769a <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8017684:	e004      	b.n	8017690 <mg_bzero+0x1c>
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	1c5a      	adds	r2, r3, #1
 801768a:	607a      	str	r2, [r7, #4]
 801768c:	2200      	movs	r2, #0
 801768e:	701a      	strb	r2, [r3, #0]
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	1e5a      	subs	r2, r3, #1
 8017694:	603a      	str	r2, [r7, #0]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d1f5      	bne.n	8017686 <mg_bzero+0x12>
  }
}
 801769a:	bf00      	nop
 801769c:	370c      	adds	r7, #12
 801769e:	46bd      	mov	sp, r7
 80176a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a4:	4770      	bx	lr
	...

080176a8 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b084      	sub	sp, #16
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 80176b2:	6839      	ldr	r1, [r7, #0]
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f7e9 facd 	bl	8000c54 <mg_random>
  for (i = 0; i < len; i++) {
 80176ba:	2300      	movs	r3, #0
 80176bc:	60fb      	str	r3, [r7, #12]
 80176be:	e02d      	b.n	801771c <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	4413      	add	r3, r2
 80176c6:	781a      	ldrb	r2, [r3, #0]
 80176c8:	0853      	lsrs	r3, r2, #1
 80176ca:	4919      	ldr	r1, [pc, #100]	@ (8017730 <mg_random_str+0x88>)
 80176cc:	fba1 1303 	umull	r1, r3, r1, r3
 80176d0:	0919      	lsrs	r1, r3, #4
 80176d2:	460b      	mov	r3, r1
 80176d4:	015b      	lsls	r3, r3, #5
 80176d6:	1a5b      	subs	r3, r3, r1
 80176d8:	005b      	lsls	r3, r3, #1
 80176da:	1ad3      	subs	r3, r2, r3
 80176dc:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	3b01      	subs	r3, #1
 80176e2:	68fa      	ldr	r2, [r7, #12]
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d011      	beq.n	801770c <mg_random_str+0x64>
 80176e8:	7afb      	ldrb	r3, [r7, #11]
 80176ea:	2b19      	cmp	r3, #25
 80176ec:	d803      	bhi.n	80176f6 <mg_random_str+0x4e>
 80176ee:	7afb      	ldrb	r3, [r7, #11]
 80176f0:	3361      	adds	r3, #97	@ 0x61
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	e00b      	b.n	801770e <mg_random_str+0x66>
 80176f6:	7afb      	ldrb	r3, [r7, #11]
 80176f8:	2b33      	cmp	r3, #51	@ 0x33
 80176fa:	d803      	bhi.n	8017704 <mg_random_str+0x5c>
 80176fc:	7afb      	ldrb	r3, [r7, #11]
 80176fe:	3327      	adds	r3, #39	@ 0x27
 8017700:	b2db      	uxtb	r3, r3
 8017702:	e004      	b.n	801770e <mg_random_str+0x66>
 8017704:	7afb      	ldrb	r3, [r7, #11]
 8017706:	3b04      	subs	r3, #4
 8017708:	b2db      	uxtb	r3, r3
 801770a:	e000      	b.n	801770e <mg_random_str+0x66>
 801770c:	2300      	movs	r3, #0
 801770e:	6879      	ldr	r1, [r7, #4]
 8017710:	68fa      	ldr	r2, [r7, #12]
 8017712:	440a      	add	r2, r1
 8017714:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	3301      	adds	r3, #1
 801771a:	60fb      	str	r3, [r7, #12]
 801771c:	68fa      	ldr	r2, [r7, #12]
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	429a      	cmp	r2, r3
 8017722:	d3cd      	bcc.n	80176c0 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8017724:	687b      	ldr	r3, [r7, #4]
}
 8017726:	4618      	mov	r0, r3
 8017728:	3710      	adds	r7, #16
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	84210843 	.word	0x84210843

08017734 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8017734:	b480      	push	{r7}
 8017736:	b085      	sub	sp, #20
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 801773c:	2300      	movs	r3, #0
 801773e:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8017744:	7bfb      	ldrb	r3, [r7, #15]
 8017746:	461a      	mov	r2, r3
 8017748:	7bbb      	ldrb	r3, [r7, #14]
 801774a:	021b      	lsls	r3, r3, #8
 801774c:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 801774e:	7b7b      	ldrb	r3, [r7, #13]
 8017750:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8017752:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8017754:	7b3b      	ldrb	r3, [r7, #12]
 8017756:	061b      	lsls	r3, r3, #24
 8017758:	4313      	orrs	r3, r2
}
 801775a:	4618      	mov	r0, r3
 801775c:	3714      	adds	r7, #20
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr

08017766 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8017766:	b480      	push	{r7}
 8017768:	b085      	sub	sp, #20
 801776a:	af00      	add	r7, sp, #0
 801776c:	4603      	mov	r3, r0
 801776e:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8017770:	2300      	movs	r3, #0
 8017772:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8017774:	88fb      	ldrh	r3, [r7, #6]
 8017776:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8017778:	7b7b      	ldrb	r3, [r7, #13]
 801777a:	b21a      	sxth	r2, r3
 801777c:	7b3b      	ldrb	r3, [r7, #12]
 801777e:	021b      	lsls	r3, r3, #8
 8017780:	b21b      	sxth	r3, r3
 8017782:	4313      	orrs	r3, r2
 8017784:	b21b      	sxth	r3, r3
 8017786:	b29b      	uxth	r3, r3
}
 8017788:	4618      	mov	r0, r3
 801778a:	3714      	adds	r7, #20
 801778c:	46bd      	mov	sp, r7
 801778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017792:	4770      	bx	lr

08017794 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8017794:	b480      	push	{r7}
 8017796:	b087      	sub	sp, #28
 8017798:	af00      	add	r7, sp, #0
 801779a:	60f8      	str	r0, [r7, #12]
 801779c:	60b9      	str	r1, [r7, #8]
 801779e:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	43db      	mvns	r3, r3
 80177a4:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80177a6:	e01f      	b.n	80177e8 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 80177a8:	68bb      	ldr	r3, [r7, #8]
 80177aa:	1c5a      	adds	r2, r3, #1
 80177ac:	60ba      	str	r2, [r7, #8]
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80177b2:	7dfa      	ldrb	r2, [r7, #23]
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	4053      	eors	r3, r2
 80177b8:	f003 030f 	and.w	r3, r3, #15
 80177bc:	4a11      	ldr	r2, [pc, #68]	@ (8017804 <mg_crc32+0x70>)
 80177be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	091b      	lsrs	r3, r3, #4
 80177c6:	4053      	eors	r3, r2
 80177c8:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80177ca:	7dfb      	ldrb	r3, [r7, #23]
 80177cc:	091b      	lsrs	r3, r3, #4
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	461a      	mov	r2, r3
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	4053      	eors	r3, r2
 80177d6:	f003 030f 	and.w	r3, r3, #15
 80177da:	4a0a      	ldr	r2, [pc, #40]	@ (8017804 <mg_crc32+0x70>)
 80177dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	091b      	lsrs	r3, r3, #4
 80177e4:	4053      	eors	r3, r2
 80177e6:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	1e5a      	subs	r2, r3, #1
 80177ec:	607a      	str	r2, [r7, #4]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d1da      	bne.n	80177a8 <mg_crc32+0x14>
  }
  return ~crc;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	43db      	mvns	r3, r3
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	371c      	adds	r7, #28
 80177fa:	46bd      	mov	sp, r7
 80177fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017800:	4770      	bx	lr
 8017802:	bf00      	nop
 8017804:	0802a9b8 	.word	0x0802a9b8

08017808 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8017808:	b480      	push	{r7}
 801780a:	b085      	sub	sp, #20
 801780c:	af00      	add	r7, sp, #0
 801780e:	463b      	mov	r3, r7
 8017810:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	2b2e      	cmp	r3, #46	@ 0x2e
 8017822:	d123      	bne.n	801786c <mg_path_is_sane+0x64>
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	3301      	adds	r3, #1
 8017828:	781b      	ldrb	r3, [r3, #0]
 801782a:	2b2e      	cmp	r3, #46	@ 0x2e
 801782c:	d11e      	bne.n	801786c <mg_path_is_sane+0x64>
 801782e:	2300      	movs	r3, #0
 8017830:	e024      	b.n	801787c <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	2b2f      	cmp	r3, #47	@ 0x2f
 8017838:	d003      	beq.n	8017842 <mg_path_is_sane+0x3a>
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	781b      	ldrb	r3, [r3, #0]
 801783e:	2b5c      	cmp	r3, #92	@ 0x5c
 8017840:	d10e      	bne.n	8017860 <mg_path_is_sane+0x58>
 8017842:	68bb      	ldr	r3, [r7, #8]
 8017844:	2b01      	cmp	r3, #1
 8017846:	d90b      	bls.n	8017860 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	3301      	adds	r3, #1
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017850:	d106      	bne.n	8017860 <mg_path_is_sane+0x58>
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	3302      	adds	r3, #2
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	2b2e      	cmp	r3, #46	@ 0x2e
 801785a:	d101      	bne.n	8017860 <mg_path_is_sane+0x58>
 801785c:	2300      	movs	r3, #0
 801785e:	e00d      	b.n	801787c <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	3301      	adds	r3, #1
 8017864:	60fb      	str	r3, [r7, #12]
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	3b01      	subs	r3, #1
 801786a:	60bb      	str	r3, [r7, #8]
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	781b      	ldrb	r3, [r3, #0]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d002      	beq.n	801787a <mg_path_is_sane+0x72>
 8017874:	68bb      	ldr	r3, [r7, #8]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d1db      	bne.n	8017832 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 801787a:	2301      	movs	r3, #1
}
 801787c:	4618      	mov	r0, r3
 801787e:	3714      	adds	r7, #20
 8017880:	46bd      	mov	sp, r7
 8017882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017886:	4770      	bx	lr

08017888 <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8017888:	b480      	push	{r7}
 801788a:	b083      	sub	sp, #12
 801788c:	af00      	add	r7, sp, #0
 801788e:	4603      	mov	r3, r0
 8017890:	460a      	mov	r2, r1
 8017892:	80fb      	strh	r3, [r7, #6]
 8017894:	4613      	mov	r3, r2
 8017896:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8017898:	88fb      	ldrh	r3, [r7, #6]
 801789a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801789e:	d00b      	beq.n	80178b8 <mg_phy_id_to_str+0x30>
 80178a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80178a4:	dc28      	bgt.n	80178f8 <mg_phy_id_to_str+0x70>
 80178a6:	2b22      	cmp	r3, #34	@ 0x22
 80178a8:	d020      	beq.n	80178ec <mg_phy_id_to_str+0x64>
 80178aa:	2b22      	cmp	r3, #34	@ 0x22
 80178ac:	dc24      	bgt.n	80178f8 <mg_phy_id_to_str+0x70>
 80178ae:	2b07      	cmp	r3, #7
 80178b0:	d01e      	beq.n	80178f0 <mg_phy_id_to_str+0x68>
 80178b2:	2b1c      	cmp	r3, #28
 80178b4:	d01e      	beq.n	80178f4 <mg_phy_id_to_str+0x6c>
 80178b6:	e01f      	b.n	80178f8 <mg_phy_id_to_str+0x70>
    case MG_PHY_DP83x:
      switch (id2) {
 80178b8:	88bb      	ldrh	r3, [r7, #4]
 80178ba:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80178be:	4293      	cmp	r3, r2
 80178c0:	d00c      	beq.n	80178dc <mg_phy_id_to_str+0x54>
 80178c2:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80178c6:	4293      	cmp	r3, r2
 80178c8:	dc0e      	bgt.n	80178e8 <mg_phy_id_to_str+0x60>
 80178ca:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 80178ce:	4293      	cmp	r3, r2
 80178d0:	d006      	beq.n	80178e0 <mg_phy_id_to_str+0x58>
 80178d2:	f24a 1240 	movw	r2, #41280	@ 0xa140
 80178d6:	4293      	cmp	r3, r2
 80178d8:	d004      	beq.n	80178e4 <mg_phy_id_to_str+0x5c>
 80178da:	e005      	b.n	80178e8 <mg_phy_id_to_str+0x60>
        case MG_PHY_DP83867:
          return "DP83867";
 80178dc:	4b0a      	ldr	r3, [pc, #40]	@ (8017908 <mg_phy_id_to_str+0x80>)
 80178de:	e00c      	b.n	80178fa <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83848:
          return "DP83848";
 80178e0:	4b0a      	ldr	r3, [pc, #40]	@ (801790c <mg_phy_id_to_str+0x84>)
 80178e2:	e00a      	b.n	80178fa <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83825:
          return "DP83825";
 80178e4:	4b0a      	ldr	r3, [pc, #40]	@ (8017910 <mg_phy_id_to_str+0x88>)
 80178e6:	e008      	b.n	80178fa <mg_phy_id_to_str+0x72>
        default:
          return "DP83x";
 80178e8:	4b0a      	ldr	r3, [pc, #40]	@ (8017914 <mg_phy_id_to_str+0x8c>)
 80178ea:	e006      	b.n	80178fa <mg_phy_id_to_str+0x72>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 80178ec:	4b0a      	ldr	r3, [pc, #40]	@ (8017918 <mg_phy_id_to_str+0x90>)
 80178ee:	e004      	b.n	80178fa <mg_phy_id_to_str+0x72>
    case MG_PHY_LAN87x:
      return "LAN87x";
 80178f0:	4b0a      	ldr	r3, [pc, #40]	@ (801791c <mg_phy_id_to_str+0x94>)
 80178f2:	e002      	b.n	80178fa <mg_phy_id_to_str+0x72>
    case MG_PHY_RTL8201:
      return "RTL8201";
 80178f4:	4b0a      	ldr	r3, [pc, #40]	@ (8017920 <mg_phy_id_to_str+0x98>)
 80178f6:	e000      	b.n	80178fa <mg_phy_id_to_str+0x72>
    default:
      return "unknown";
 80178f8:	4b0a      	ldr	r3, [pc, #40]	@ (8017924 <mg_phy_id_to_str+0x9c>)
  }
  (void) id2;
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	370c      	adds	r7, #12
 80178fe:	46bd      	mov	sp, r7
 8017900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017904:	4770      	bx	lr
 8017906:	bf00      	nop
 8017908:	0802978c 	.word	0x0802978c
 801790c:	08029794 	.word	0x08029794
 8017910:	0802979c 	.word	0x0802979c
 8017914:	080297a4 	.word	0x080297a4
 8017918:	080297ac 	.word	0x080297ac
 801791c:	080297b4 	.word	0x080297b4
 8017920:	080297bc 	.word	0x080297bc
 8017924:	080297c4 	.word	0x080297c4

08017928 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8017928:	b5b0      	push	{r4, r5, r7, lr}
 801792a:	b084      	sub	sp, #16
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	460b      	mov	r3, r1
 8017932:	70fb      	strb	r3, [r7, #3]
 8017934:	4613      	mov	r3, r2
 8017936:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	685b      	ldr	r3, [r3, #4]
 801793c:	78f8      	ldrb	r0, [r7, #3]
 801793e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8017942:	2100      	movs	r1, #0
 8017944:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8017946:	bf00      	nop
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	78fa      	ldrb	r2, [r7, #3]
 801794e:	2100      	movs	r1, #0
 8017950:	4610      	mov	r0, r2
 8017952:	4798      	blx	r3
 8017954:	4603      	mov	r3, r0
 8017956:	b21b      	sxth	r3, r3
 8017958:	2b00      	cmp	r3, #0
 801795a:	dbf5      	blt.n	8017948 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	78fa      	ldrb	r2, [r7, #3]
 8017962:	2102      	movs	r1, #2
 8017964:	4610      	mov	r0, r2
 8017966:	4798      	blx	r3
 8017968:	4603      	mov	r3, r0
 801796a:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	78fa      	ldrb	r2, [r7, #3]
 8017972:	2103      	movs	r1, #3
 8017974:	4610      	mov	r0, r2
 8017976:	4798      	blx	r3
 8017978:	4603      	mov	r3, r0
 801797a:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 801797c:	4b42      	ldr	r3, [pc, #264]	@ (8017a88 <mg_phy_init+0x160>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	2b01      	cmp	r3, #1
 8017982:	dd14      	ble.n	80179ae <mg_phy_init+0x86>
 8017984:	4b41      	ldr	r3, [pc, #260]	@ (8017a8c <mg_phy_init+0x164>)
 8017986:	f244 4232 	movw	r2, #17458	@ 0x4432
 801798a:	4941      	ldr	r1, [pc, #260]	@ (8017a90 <mg_phy_init+0x168>)
 801798c:	2002      	movs	r0, #2
 801798e:	f7f0 f967 	bl	8007c60 <mg_log_prefix>
 8017992:	89fc      	ldrh	r4, [r7, #14]
 8017994:	89bd      	ldrh	r5, [r7, #12]
 8017996:	89ba      	ldrh	r2, [r7, #12]
 8017998:	89fb      	ldrh	r3, [r7, #14]
 801799a:	4611      	mov	r1, r2
 801799c:	4618      	mov	r0, r3
 801799e:	f7ff ff73 	bl	8017888 <mg_phy_id_to_str>
 80179a2:	4603      	mov	r3, r0
 80179a4:	462a      	mov	r2, r5
 80179a6:	4621      	mov	r1, r4
 80179a8:	483a      	ldr	r0, [pc, #232]	@ (8017a94 <mg_phy_init+0x16c>)
 80179aa:	f7f0 f9a9 	bl	8007d00 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 80179ae:	89fb      	ldrh	r3, [r7, #14]
 80179b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80179b4:	d11f      	bne.n	80179f6 <mg_phy_init+0xce>
 80179b6:	89bb      	ldrh	r3, [r7, #12]
 80179b8:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80179bc:	4293      	cmp	r3, r2
 80179be:	d11a      	bne.n	80179f6 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	78f8      	ldrb	r0, [r7, #3]
 80179c6:	221f      	movs	r2, #31
 80179c8:	210d      	movs	r1, #13
 80179ca:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	78f8      	ldrb	r0, [r7, #3]
 80179d2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80179d6:	210e      	movs	r1, #14
 80179d8:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	78f8      	ldrb	r0, [r7, #3]
 80179e0:	f244 021f 	movw	r2, #16415	@ 0x401f
 80179e4:	210d      	movs	r1, #13
 80179e6:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	685b      	ldr	r3, [r3, #4]
 80179ec:	78f8      	ldrb	r0, [r7, #3]
 80179ee:	f240 120d 	movw	r2, #269	@ 0x10d
 80179f2:	210e      	movs	r1, #14
 80179f4:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 80179f6:	78bb      	ldrb	r3, [r7, #2]
 80179f8:	f003 0302 	and.w	r3, r3, #2
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d12e      	bne.n	8017a5e <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8017a00:	89fb      	ldrh	r3, [r7, #14]
 8017a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017a06:	d110      	bne.n	8017a2a <mg_phy_init+0x102>
 8017a08:	89bb      	ldrh	r3, [r7, #12]
 8017a0a:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017a0e:	4293      	cmp	r3, r2
 8017a10:	d00b      	beq.n	8017a2a <mg_phy_init+0x102>
 8017a12:	89bb      	ldrh	r3, [r7, #12]
 8017a14:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8017a18:	4293      	cmp	r3, r2
 8017a1a:	d006      	beq.n	8017a2a <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	685b      	ldr	r3, [r3, #4]
 8017a20:	78f8      	ldrb	r0, [r7, #3]
 8017a22:	2281      	movs	r2, #129	@ 0x81
 8017a24:	2117      	movs	r1, #23
 8017a26:	4798      	blx	r3
 8017a28:	e019      	b.n	8017a5e <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8017a2a:	89fb      	ldrh	r3, [r7, #14]
 8017a2c:	2b22      	cmp	r3, #34	@ 0x22
 8017a2e:	d116      	bne.n	8017a5e <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	78fa      	ldrb	r2, [r7, #3]
 8017a3a:	2100      	movs	r1, #0
 8017a3c:	4610      	mov	r0, r2
 8017a3e:	4798      	blx	r3
 8017a40:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8017a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017a46:	b29a      	uxth	r2, r3
 8017a48:	78fb      	ldrb	r3, [r7, #3]
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	685b      	ldr	r3, [r3, #4]
 8017a54:	78f8      	ldrb	r0, [r7, #3]
 8017a56:	f248 1280 	movw	r2, #33152	@ 0x8180
 8017a5a:	211f      	movs	r1, #31
 8017a5c:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8017a5e:	78bb      	ldrb	r3, [r7, #2]
 8017a60:	f003 0301 	and.w	r3, r3, #1
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d00a      	beq.n	8017a7e <mg_phy_init+0x156>
 8017a68:	89fb      	ldrh	r3, [r7, #14]
 8017a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017a6e:	d106      	bne.n	8017a7e <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	78f8      	ldrb	r0, [r7, #3]
 8017a76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017a7a:	2118      	movs	r1, #24
 8017a7c:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8017a7e:	bf00      	nop
 8017a80:	3710      	adds	r7, #16
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bdb0      	pop	{r4, r5, r7, pc}
 8017a86:	bf00      	nop
 8017a88:	24000240 	.word	0x24000240
 8017a8c:	0802a9f8 	.word	0x0802a9f8
 8017a90:	08027148 	.word	0x08027148
 8017a94:	080297cc 	.word	0x080297cc

08017a98 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b08a      	sub	sp, #40	@ 0x28
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	60f8      	str	r0, [r7, #12]
 8017aa0:	607a      	str	r2, [r7, #4]
 8017aa2:	603b      	str	r3, [r7, #0]
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	7afa      	ldrb	r2, [r7, #11]
 8017ab4:	2101      	movs	r1, #1
 8017ab6:	4610      	mov	r0, r2
 8017ab8:	4798      	blx	r3
 8017aba:	4603      	mov	r3, r0
 8017abc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8017abe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ac0:	f003 0320 	and.w	r3, r3, #32
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d00c      	beq.n	8017ae2 <mg_phy_up+0x4a>
 8017ac8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017aca:	f003 0304 	and.w	r3, r3, #4
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d107      	bne.n	8017ae2 <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	7afa      	ldrb	r2, [r7, #11]
 8017ad8:	2101      	movs	r1, #1
 8017ada:	4610      	mov	r0, r2
 8017adc:	4798      	blx	r3
 8017ade:	4603      	mov	r3, r0
 8017ae0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8017ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ae4:	f003 0304 	and.w	r3, r3, #4
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	bf14      	ite	ne
 8017aec:	2301      	movne	r3, #1
 8017aee:	2300      	moveq	r3, #0
 8017af0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8017af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f000 80bc 	beq.w	8017c76 <mg_phy_up+0x1de>
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	f000 80b8 	beq.w	8017c76 <mg_phy_up+0x1de>
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f000 80b4 	beq.w	8017c76 <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	7afa      	ldrb	r2, [r7, #11]
 8017b14:	2102      	movs	r1, #2
 8017b16:	4610      	mov	r0, r2
 8017b18:	4798      	blx	r3
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8017b1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017b24:	d14b      	bne.n	8017bbe <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	7afa      	ldrb	r2, [r7, #11]
 8017b2c:	2103      	movs	r1, #3
 8017b2e:	4610      	mov	r0, r2
 8017b30:	4798      	blx	r3
 8017b32:	4603      	mov	r3, r0
 8017b34:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 8017b36:	8b7b      	ldrh	r3, [r7, #26]
 8017b38:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d120      	bne.n	8017b82 <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	7afa      	ldrb	r2, [r7, #11]
 8017b46:	2111      	movs	r1, #17
 8017b48:	4610      	mov	r0, r2
 8017b4a:	4798      	blx	r3
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 8017b50:	8afb      	ldrh	r3, [r7, #22]
 8017b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	bf14      	ite	ne
 8017b5a:	2301      	movne	r3, #1
 8017b5c:	2300      	moveq	r3, #0
 8017b5e:	b2da      	uxtb	r2, r3
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8017b64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	db06      	blt.n	8017b7a <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8017b6c:	8afb      	ldrh	r3, [r7, #22]
 8017b6e:	0b9b      	lsrs	r3, r3, #14
 8017b70:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8017b72:	f003 0301 	and.w	r3, r3, #1
 8017b76:	b2da      	uxtb	r2, r3
 8017b78:	e000      	b.n	8017b7c <mg_phy_up+0xe4>
 8017b7a:	2202      	movs	r2, #2
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	701a      	strb	r2, [r3, #0]
 8017b80:	e079      	b.n	8017c76 <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	7afa      	ldrb	r2, [r7, #11]
 8017b88:	2110      	movs	r1, #16
 8017b8a:	4610      	mov	r0, r2
 8017b8c:	4798      	blx	r3
 8017b8e:	4603      	mov	r3, r0
 8017b90:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 8017b92:	8b3b      	ldrh	r3, [r7, #24]
 8017b94:	f003 0304 	and.w	r3, r3, #4
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	bf14      	ite	ne
 8017b9c:	2301      	movne	r3, #1
 8017b9e:	2300      	moveq	r3, #0
 8017ba0:	b2da      	uxtb	r2, r3
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8017ba6:	8b3b      	ldrh	r3, [r7, #24]
 8017ba8:	f003 0302 	and.w	r3, r3, #2
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	bf0c      	ite	eq
 8017bb0:	2301      	moveq	r3, #1
 8017bb2:	2300      	movne	r3, #0
 8017bb4:	b2db      	uxtb	r3, r3
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	701a      	strb	r2, [r3, #0]
 8017bbc:	e05b      	b.n	8017c76 <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8017bbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017bc0:	2b22      	cmp	r3, #34	@ 0x22
 8017bc2:	d11d      	bne.n	8017c00 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	7afa      	ldrb	r2, [r7, #11]
 8017bca:	211e      	movs	r1, #30
 8017bcc:	4610      	mov	r0, r2
 8017bce:	4798      	blx	r3
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 8017bd4:	8bbb      	ldrh	r3, [r7, #28]
 8017bd6:	f003 0304 	and.w	r3, r3, #4
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	bf14      	ite	ne
 8017bde:	2301      	movne	r3, #1
 8017be0:	2300      	moveq	r3, #0
 8017be2:	b2da      	uxtb	r2, r3
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8017be8:	8bbb      	ldrh	r3, [r7, #28]
 8017bea:	f003 0303 	and.w	r3, r3, #3
 8017bee:	2b01      	cmp	r3, #1
 8017bf0:	bf14      	ite	ne
 8017bf2:	2301      	movne	r3, #1
 8017bf4:	2300      	moveq	r3, #0
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	461a      	mov	r2, r3
 8017bfa:	683b      	ldr	r3, [r7, #0]
 8017bfc:	701a      	strb	r2, [r3, #0]
 8017bfe:	e03a      	b.n	8017c76 <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 8017c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c02:	2b07      	cmp	r3, #7
 8017c04:	d11a      	bne.n	8017c3c <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	7afa      	ldrb	r2, [r7, #11]
 8017c0c:	211f      	movs	r1, #31
 8017c0e:	4610      	mov	r0, r2
 8017c10:	4798      	blx	r3
 8017c12:	4603      	mov	r3, r0
 8017c14:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 8017c16:	8bfb      	ldrh	r3, [r7, #30]
 8017c18:	f003 0310 	and.w	r3, r3, #16
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	bf14      	ite	ne
 8017c20:	2301      	movne	r3, #1
 8017c22:	2300      	moveq	r3, #0
 8017c24:	b2da      	uxtb	r2, r3
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8017c2a:	8bfb      	ldrh	r3, [r7, #30]
 8017c2c:	08db      	lsrs	r3, r3, #3
 8017c2e:	b2db      	uxtb	r3, r3
 8017c30:	f003 0301 	and.w	r3, r3, #1
 8017c34:	b2da      	uxtb	r2, r3
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	701a      	strb	r2, [r3, #0]
 8017c3a:	e01c      	b.n	8017c76 <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 8017c3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c3e:	2b1c      	cmp	r3, #28
 8017c40:	d119      	bne.n	8017c76 <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	7afa      	ldrb	r2, [r7, #11]
 8017c48:	2100      	movs	r1, #0
 8017c4a:	4610      	mov	r0, r2
 8017c4c:	4798      	blx	r3
 8017c4e:	4603      	mov	r3, r0
 8017c50:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 8017c52:	8c3b      	ldrh	r3, [r7, #32]
 8017c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	bf14      	ite	ne
 8017c5c:	2301      	movne	r3, #1
 8017c5e:	2300      	moveq	r3, #0
 8017c60:	b2da      	uxtb	r2, r3
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8017c66:	8c3b      	ldrh	r3, [r7, #32]
 8017c68:	0b5b      	lsrs	r3, r3, #13
 8017c6a:	b2db      	uxtb	r3, r3
 8017c6c:	f003 0301 	and.w	r3, r3, #1
 8017c70:	b2da      	uxtb	r2, r3
 8017c72:	683b      	ldr	r3, [r7, #0]
 8017c74:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8017c76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3728      	adds	r7, #40	@ 0x28
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}
	...

08017c84 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8017c84:	b480      	push	{r7}
 8017c86:	b083      	sub	sp, #12
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	460a      	mov	r2, r1
 8017c8e:	71fb      	strb	r3, [r7, #7]
 8017c90:	4613      	mov	r3, r2
 8017c92:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8017c94:	4b17      	ldr	r3, [pc, #92]	@ (8017cf4 <eth_read_phy+0x70>)
 8017c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017c9a:	4a16      	ldr	r2, [pc, #88]	@ (8017cf4 <eth_read_phy+0x70>)
 8017c9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8017ca0:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8017ca4:	4b13      	ldr	r3, [pc, #76]	@ (8017cf4 <eth_read_phy+0x70>)
 8017ca6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8017caa:	79fb      	ldrb	r3, [r7, #7]
 8017cac:	0559      	lsls	r1, r3, #21
 8017cae:	79bb      	ldrb	r3, [r7, #6]
 8017cb0:	041b      	lsls	r3, r3, #16
 8017cb2:	430b      	orrs	r3, r1
 8017cb4:	4313      	orrs	r3, r2
 8017cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8017cf4 <eth_read_phy+0x70>)
 8017cb8:	f043 030c 	orr.w	r3, r3, #12
 8017cbc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8017cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8017cf4 <eth_read_phy+0x70>)
 8017cc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8017cf4 <eth_read_phy+0x70>)
 8017cc8:	f043 0301 	orr.w	r3, r3, #1
 8017ccc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8017cd0:	bf00      	nop
 8017cd2:	4b08      	ldr	r3, [pc, #32]	@ (8017cf4 <eth_read_phy+0x70>)
 8017cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017cd8:	f003 0301 	and.w	r3, r3, #1
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d1f8      	bne.n	8017cd2 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8017ce0:	4b04      	ldr	r3, [pc, #16]	@ (8017cf4 <eth_read_phy+0x70>)
 8017ce2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017ce6:	b29b      	uxth	r3, r3
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	370c      	adds	r7, #12
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr
 8017cf4:	40028000 	.word	0x40028000

08017cf8 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8017cf8:	b480      	push	{r7}
 8017cfa:	b083      	sub	sp, #12
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	4603      	mov	r3, r0
 8017d00:	71fb      	strb	r3, [r7, #7]
 8017d02:	460b      	mov	r3, r1
 8017d04:	71bb      	strb	r3, [r7, #6]
 8017d06:	4613      	mov	r3, r2
 8017d08:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8017d0a:	4a18      	ldr	r2, [pc, #96]	@ (8017d6c <eth_write_phy+0x74>)
 8017d0c:	88bb      	ldrh	r3, [r7, #4]
 8017d0e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 8017d12:	4b16      	ldr	r3, [pc, #88]	@ (8017d6c <eth_write_phy+0x74>)
 8017d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017d18:	4a14      	ldr	r2, [pc, #80]	@ (8017d6c <eth_write_phy+0x74>)
 8017d1a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8017d1e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 8017d22:	4b12      	ldr	r3, [pc, #72]	@ (8017d6c <eth_write_phy+0x74>)
 8017d24:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8017d28:	79fb      	ldrb	r3, [r7, #7]
 8017d2a:	0559      	lsls	r1, r3, #21
 8017d2c:	79bb      	ldrb	r3, [r7, #6]
 8017d2e:	041b      	lsls	r3, r3, #16
 8017d30:	430b      	orrs	r3, r1
 8017d32:	4313      	orrs	r3, r2
 8017d34:	4a0d      	ldr	r2, [pc, #52]	@ (8017d6c <eth_write_phy+0x74>)
 8017d36:	f043 0304 	orr.w	r3, r3, #4
 8017d3a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8017d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8017d6c <eth_write_phy+0x74>)
 8017d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017d44:	4a09      	ldr	r2, [pc, #36]	@ (8017d6c <eth_write_phy+0x74>)
 8017d46:	f043 0301 	orr.w	r3, r3, #1
 8017d4a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8017d4e:	bf00      	nop
 8017d50:	4b06      	ldr	r3, [pc, #24]	@ (8017d6c <eth_write_phy+0x74>)
 8017d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017d56:	f003 0301 	and.w	r3, r3, #1
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d1f8      	bne.n	8017d50 <eth_write_phy+0x58>
}
 8017d5e:	bf00      	nop
 8017d60:	bf00      	nop
 8017d62:	370c      	adds	r7, #12
 8017d64:	46bd      	mov	sp, r7
 8017d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6a:	4770      	bx	lr
 8017d6c:	40028000 	.word	0x40028000

08017d70 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b08a      	sub	sp, #40	@ 0x28
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d7c:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8017d7e:	4a8e      	ldr	r2, [pc, #568]	@ (8017fb8 <mg_tcpip_driver_stm32h_init+0x248>)
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8017d84:	69bb      	ldr	r3, [r7, #24]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d002      	beq.n	8017d90 <mg_tcpip_driver_stm32h_init+0x20>
 8017d8a:	69bb      	ldr	r3, [r7, #24]
 8017d8c:	791b      	ldrb	r3, [r3, #4]
 8017d8e:	e000      	b.n	8017d92 <mg_tcpip_driver_stm32h_init+0x22>
 8017d90:	2300      	movs	r3, #0
 8017d92:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8017d94:	69bb      	ldr	r3, [r7, #24]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d002      	beq.n	8017da0 <mg_tcpip_driver_stm32h_init+0x30>
 8017d9a:	69bb      	ldr	r3, [r7, #24]
 8017d9c:	795b      	ldrb	r3, [r3, #5]
 8017d9e:	e000      	b.n	8017da2 <mg_tcpip_driver_stm32h_init+0x32>
 8017da0:	2302      	movs	r3, #2
 8017da2:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8017da4:	2300      	movs	r3, #0
 8017da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8017da8:	e017      	b.n	8017dda <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8017daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dac:	f240 6204 	movw	r2, #1540	@ 0x604
 8017db0:	fb02 f303 	mul.w	r3, r2, r3
 8017db4:	4a81      	ldr	r2, [pc, #516]	@ (8017fbc <mg_tcpip_driver_stm32h_init+0x24c>)
 8017db6:	4413      	add	r3, r2
 8017db8:	4619      	mov	r1, r3
 8017dba:	4a81      	ldr	r2, [pc, #516]	@ (8017fc0 <mg_tcpip_driver_stm32h_init+0x250>)
 8017dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dbe:	011b      	lsls	r3, r3, #4
 8017dc0:	4413      	add	r3, r2
 8017dc2:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8017dc4:	4a7e      	ldr	r2, [pc, #504]	@ (8017fc0 <mg_tcpip_driver_stm32h_init+0x250>)
 8017dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc8:	011b      	lsls	r3, r3, #4
 8017dca:	4413      	add	r3, r2
 8017dcc:	330c      	adds	r3, #12
 8017dce:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8017dd2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ddc:	2b03      	cmp	r3, #3
 8017dde:	dde4      	ble.n	8017daa <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8017de0:	2300      	movs	r3, #0
 8017de2:	623b      	str	r3, [r7, #32]
 8017de4:	e00f      	b.n	8017e06 <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	f240 6204 	movw	r2, #1540	@ 0x604
 8017dec:	fb02 f303 	mul.w	r3, r2, r3
 8017df0:	4a74      	ldr	r2, [pc, #464]	@ (8017fc4 <mg_tcpip_driver_stm32h_init+0x254>)
 8017df2:	4413      	add	r3, r2
 8017df4:	4619      	mov	r1, r3
 8017df6:	4a74      	ldr	r2, [pc, #464]	@ (8017fc8 <mg_tcpip_driver_stm32h_init+0x258>)
 8017df8:	6a3b      	ldr	r3, [r7, #32]
 8017dfa:	011b      	lsls	r3, r3, #4
 8017dfc:	4413      	add	r3, r2
 8017dfe:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8017e00:	6a3b      	ldr	r3, [r7, #32]
 8017e02:	3301      	adds	r3, #1
 8017e04:	623b      	str	r3, [r7, #32]
 8017e06:	6a3b      	ldr	r3, [r7, #32]
 8017e08:	2b03      	cmp	r3, #3
 8017e0a:	ddec      	ble.n	8017de6 <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 8017e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	4a6d      	ldr	r2, [pc, #436]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e16:	f043 0301 	orr.w	r3, r3, #1
 8017e1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017e1e:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 8017e20:	2300      	movs	r3, #0
 8017e22:	61fb      	str	r3, [r7, #28]
 8017e24:	e002      	b.n	8017e2c <mg_tcpip_driver_stm32h_init+0xbc>
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	3301      	adds	r3, #1
 8017e2a:	61fb      	str	r3, [r7, #28]
 8017e2c:	69fb      	ldr	r3, [r7, #28]
 8017e2e:	2b03      	cmp	r3, #3
 8017e30:	ddf9      	ble.n	8017e26 <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8017e32:	bf00      	nop
 8017e34:	4b65      	ldr	r3, [pc, #404]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	f003 0301 	and.w	r3, r3, #1
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d1f7      	bne.n	8017e34 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 8017e44:	69bb      	ldr	r3, [r7, #24]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d006      	beq.n	8017e58 <mg_tcpip_driver_stm32h_init+0xe8>
 8017e4a:	69bb      	ldr	r3, [r7, #24]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	db02      	blt.n	8017e58 <mg_tcpip_driver_stm32h_init+0xe8>
 8017e52:	69bb      	ldr	r3, [r7, #24]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	e000      	b.n	8017e5a <mg_tcpip_driver_stm32h_init+0xea>
 8017e58:	2307      	movs	r3, #7
 8017e5a:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	021b      	lsls	r3, r3, #8
 8017e60:	4a5a      	ldr	r2, [pc, #360]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e62:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8017e66:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 8017e6a:	4b58      	ldr	r3, [pc, #352]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017e70:	461a      	mov	r2, r3
 8017e72:	2300      	movs	r3, #0
 8017e74:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8017e76:	4b55      	ldr	r3, [pc, #340]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017e7c:	685b      	ldr	r3, [r3, #4]
 8017e7e:	4a53      	ldr	r2, [pc, #332]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017e84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017e88:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 8017e8a:	4b50      	ldr	r3, [pc, #320]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8017e92:	4b4e      	ldr	r3, [pc, #312]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017e94:	2280      	movs	r2, #128	@ 0x80
 8017e96:	671a      	str	r2, [r3, #112]	@ 0x70
  // ETH->MACPFR = MG_BIT(31);  // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8017e98:	4a4d      	ldr	r2, [pc, #308]	@ (8017fd0 <mg_tcpip_driver_stm32h_init+0x260>)
 8017e9a:	f107 0308 	add.w	r3, r7, #8
 8017e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ea2:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 8017ea6:	7dba      	ldrb	r2, [r7, #22]
 8017ea8:	7df9      	ldrb	r1, [r7, #23]
 8017eaa:	f107 0308 	add.w	r3, r7, #8
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f7ff fd3a 	bl	8017928 <mg_phy_init>
  ETH->DMACRDLAR =
 8017eb4:	4a45      	ldr	r2, [pc, #276]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8017eb6:	4b42      	ldr	r3, [pc, #264]	@ (8017fc0 <mg_tcpip_driver_stm32h_init+0x250>)
  ETH->DMACRDLAR =
 8017eb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ebc:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8017ec0:	4b42      	ldr	r3, [pc, #264]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	2303      	movs	r3, #3
 8017eca:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8017ece:	4a3f      	ldr	r2, [pc, #252]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8017ed0:	4b40      	ldr	r3, [pc, #256]	@ (8017fd4 <mg_tcpip_driver_stm32h_init+0x264>)
  ETH->DMACRDTPR =
 8017ed2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ed6:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 8017eda:	4a3c      	ldr	r2, [pc, #240]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8017edc:	4b3a      	ldr	r3, [pc, #232]	@ (8017fc8 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDLAR =
 8017ede:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ee2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 8017ee6:	4b39      	ldr	r3, [pc, #228]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017eec:	461a      	mov	r2, r3
 8017eee:	2303      	movs	r3, #3
 8017ef0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8017ef4:	4a35      	ldr	r2, [pc, #212]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 8017ef6:	4b34      	ldr	r3, [pc, #208]	@ (8017fc8 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDTPR =
 8017ef8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017efc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8017f00:	4b32      	ldr	r3, [pc, #200]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017f06:	461a      	mov	r2, r3
 8017f08:	2300      	movs	r3, #0
 8017f0a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 8017f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017f14:	461a      	mov	r2, r3
 8017f16:	f248 0340 	movw	r3, #32832	@ 0x8040
 8017f1a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 8017f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f20:	f24e 0203 	movw	r2, #57347	@ 0xe003
 8017f24:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 8017f26:	4b29      	ldr	r3, [pc, #164]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f28:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8017f2c:	4a27      	ldr	r2, [pc, #156]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f2e:	f043 0302 	orr.w	r3, r3, #2
 8017f32:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 8017f36:	4b25      	ldr	r3, [pc, #148]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f38:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8017f3c:	4a23      	ldr	r2, [pc, #140]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f3e:	f043 0320 	orr.w	r3, r3, #32
 8017f42:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 8017f46:	4b21      	ldr	r3, [pc, #132]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017f4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017f50:	4a1e      	ldr	r2, [pc, #120]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f52:	f043 0301 	orr.w	r3, r3, #1
 8017f56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f5a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8017f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017f64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017f68:	4a18      	ldr	r2, [pc, #96]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f6a:	f043 0301 	orr.w	r3, r3, #1
 8017f6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f72:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	795b      	ldrb	r3, [r3, #5]
 8017f7a:	021b      	lsls	r3, r3, #8
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	7912      	ldrb	r2, [r2, #4]
 8017f80:	4611      	mov	r1, r2
 8017f82:	4a12      	ldr	r2, [pc, #72]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8017f84:	430b      	orrs	r3, r1
 8017f86:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	78db      	ldrb	r3, [r3, #3]
 8017f8e:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	789b      	ldrb	r3, [r3, #2]
 8017f94:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8017f96:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	785b      	ldrb	r3, [r3, #1]
 8017f9c:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8017f9e:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8017fa0:	687a      	ldr	r2, [r7, #4]
 8017fa2:	7812      	ldrb	r2, [r2, #0]
 8017fa4:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8017fa6:	4a09      	ldr	r2, [pc, #36]	@ (8017fcc <mg_tcpip_driver_stm32h_init+0x25c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8017fa8:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8017faa:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8017fae:	2301      	movs	r3, #1
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	3728      	adds	r7, #40	@ 0x28
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}
 8017fb8:	24003de4 	.word	0x24003de4
 8017fbc:	24000dc4 	.word	0x24000dc4
 8017fc0:	24000d44 	.word	0x24000d44
 8017fc4:	240025d4 	.word	0x240025d4
 8017fc8:	24000d84 	.word	0x24000d84
 8017fcc:	40028000 	.word	0x40028000
 8017fd0:	080297e8 	.word	0x080297e8
 8017fd4:	24000d74 	.word	0x24000d74

08017fd8 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b088      	sub	sp, #32
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	f240 6204 	movw	r2, #1540	@ 0x604
 8017fea:	4293      	cmp	r3, r2
 8017fec:	d912      	bls.n	8018014 <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8017fee:	4b5d      	ldr	r3, [pc, #372]	@ (8018164 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	dd0b      	ble.n	801800e <mg_tcpip_driver_stm32h_tx+0x36>
 8017ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8018168 <mg_tcpip_driver_stm32h_tx+0x190>)
 8017ff8:	f244 72e0 	movw	r2, #18400	@ 0x47e0
 8017ffc:	495b      	ldr	r1, [pc, #364]	@ (801816c <mg_tcpip_driver_stm32h_tx+0x194>)
 8017ffe:	2001      	movs	r0, #1
 8018000:	f7ef fe2e 	bl	8007c60 <mg_log_prefix>
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	4619      	mov	r1, r3
 8018008:	4859      	ldr	r0, [pc, #356]	@ (8018170 <mg_tcpip_driver_stm32h_tx+0x198>)
 801800a:	f7ef fe79 	bl	8007d00 <mg_log>
    len = 0;  // Frame is too big
 801800e:	2300      	movs	r3, #0
 8018010:	60bb      	str	r3, [r7, #8]
 8018012:	e08b      	b.n	801812c <mg_tcpip_driver_stm32h_tx+0x154>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 8018014:	4b57      	ldr	r3, [pc, #348]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4a57      	ldr	r2, [pc, #348]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 801801a:	011b      	lsls	r3, r3, #4
 801801c:	4413      	add	r3, r2
 801801e:	330c      	adds	r3, #12
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	2b00      	cmp	r3, #0
 8018024:	da48      	bge.n	80180b8 <mg_tcpip_driver_stm32h_tx+0xe0>
    ifp->nerr++;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801802a:	1c5a      	adds	r2, r3, #1
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	679a      	str	r2, [r3, #120]	@ 0x78
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8018030:	4b4c      	ldr	r3, [pc, #304]	@ (8018164 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	dd1e      	ble.n	8018076 <mg_tcpip_driver_stm32h_tx+0x9e>
 8018038:	4b4b      	ldr	r3, [pc, #300]	@ (8018168 <mg_tcpip_driver_stm32h_tx+0x190>)
 801803a:	f244 72e4 	movw	r2, #18404	@ 0x47e4
 801803e:	494b      	ldr	r1, [pc, #300]	@ (801816c <mg_tcpip_driver_stm32h_tx+0x194>)
 8018040:	2001      	movs	r0, #1
 8018042:	f7ef fe0d 	bl	8007c60 <mg_log_prefix>
 8018046:	4b4b      	ldr	r3, [pc, #300]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018048:	6819      	ldr	r1, [r3, #0]
 801804a:	4b4a      	ldr	r3, [pc, #296]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	4a4a      	ldr	r2, [pc, #296]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8018050:	011b      	lsls	r3, r3, #4
 8018052:	4413      	add	r3, r2
 8018054:	330c      	adds	r3, #12
 8018056:	681a      	ldr	r2, [r3, #0]
 8018058:	4b48      	ldr	r3, [pc, #288]	@ (801817c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 801805a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801805e:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 8018062:	4b46      	ldr	r3, [pc, #280]	@ (801817c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018068:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	4603      	mov	r3, r0
 8018070:	4843      	ldr	r0, [pc, #268]	@ (8018180 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8018072:	f7ef fe45 	bl	8007d00 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 8018076:	2300      	movs	r3, #0
 8018078:	617b      	str	r3, [r7, #20]
 801807a:	e017      	b.n	80180ac <mg_tcpip_driver_stm32h_tx+0xd4>
 801807c:	4b39      	ldr	r3, [pc, #228]	@ (8018164 <mg_tcpip_driver_stm32h_tx+0x18c>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	2b00      	cmp	r3, #0
 8018082:	dd10      	ble.n	80180a6 <mg_tcpip_driver_stm32h_tx+0xce>
 8018084:	4b38      	ldr	r3, [pc, #224]	@ (8018168 <mg_tcpip_driver_stm32h_tx+0x190>)
 8018086:	f244 72e6 	movw	r2, #18406	@ 0x47e6
 801808a:	4938      	ldr	r1, [pc, #224]	@ (801816c <mg_tcpip_driver_stm32h_tx+0x194>)
 801808c:	2001      	movs	r0, #1
 801808e:	f7ef fde7 	bl	8007c60 <mg_log_prefix>
 8018092:	4a39      	ldr	r2, [pc, #228]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8018094:	697b      	ldr	r3, [r7, #20]
 8018096:	011b      	lsls	r3, r3, #4
 8018098:	4413      	add	r3, r2
 801809a:	330c      	adds	r3, #12
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	4619      	mov	r1, r3
 80180a0:	4838      	ldr	r0, [pc, #224]	@ (8018184 <mg_tcpip_driver_stm32h_tx+0x1ac>)
 80180a2:	f7ef fe2d 	bl	8007d00 <mg_log>
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	3301      	adds	r3, #1
 80180aa:	617b      	str	r3, [r7, #20]
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	2b03      	cmp	r3, #3
 80180b0:	dde4      	ble.n	801807c <mg_tcpip_driver_stm32h_tx+0xa4>
    len = 0;  // All descriptors are busy, fail
 80180b2:	2300      	movs	r3, #0
 80180b4:	60bb      	str	r3, [r7, #8]
 80180b6:	e039      	b.n	801812c <mg_tcpip_driver_stm32h_tx+0x154>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 80180b8:	4b2e      	ldr	r3, [pc, #184]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	f240 6204 	movw	r2, #1540	@ 0x604
 80180c0:	fb02 f303 	mul.w	r3, r2, r3
 80180c4:	4a30      	ldr	r2, [pc, #192]	@ (8018188 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 80180c6:	4413      	add	r3, r2
 80180c8:	68ba      	ldr	r2, [r7, #8]
 80180ca:	68f9      	ldr	r1, [r7, #12]
 80180cc:	4618      	mov	r0, r3
 80180ce:	f00b fbce 	bl	802386e <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 80180d2:	4b28      	ldr	r3, [pc, #160]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	4a28      	ldr	r2, [pc, #160]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80180d8:	011b      	lsls	r3, r3, #4
 80180da:	4413      	add	r3, r2
 80180dc:	3308      	adds	r3, #8
 80180de:	68ba      	ldr	r2, [r7, #8]
 80180e0:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 80180e2:	4b24      	ldr	r3, [pc, #144]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	4a24      	ldr	r2, [pc, #144]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80180e8:	011b      	lsls	r3, r3, #4
 80180ea:	4413      	add	r3, r2
 80180ec:	330c      	adds	r3, #12
 80180ee:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80180f2:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 80180f4:	4b1f      	ldr	r3, [pc, #124]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	4a1f      	ldr	r2, [pc, #124]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80180fa:	011b      	lsls	r3, r3, #4
 80180fc:	4413      	add	r3, r2
 80180fe:	330c      	adds	r3, #12
 8018100:	681a      	ldr	r2, [r3, #0]
 8018102:	4b1c      	ldr	r3, [pc, #112]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801810a:	491b      	ldr	r1, [pc, #108]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 801810c:	011b      	lsls	r3, r3, #4
 801810e:	440b      	add	r3, r1
 8018110:	330c      	adds	r3, #12
 8018112:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8018114:	4b17      	ldr	r3, [pc, #92]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	3301      	adds	r3, #1
 801811a:	4a16      	ldr	r2, [pc, #88]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 801811c:	6013      	str	r3, [r2, #0]
 801811e:	4b15      	ldr	r3, [pc, #84]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	2b03      	cmp	r3, #3
 8018124:	d902      	bls.n	801812c <mg_tcpip_driver_stm32h_tx+0x154>
 8018126:	4b13      	ldr	r3, [pc, #76]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018128:	2200      	movs	r2, #0
 801812a:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 801812c:	4b13      	ldr	r3, [pc, #76]	@ (801817c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 801812e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018132:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018136:	4a11      	ldr	r2, [pc, #68]	@ (801817c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018138:	f043 0306 	orr.w	r3, r3, #6
 801813c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018140:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 8018144:	4b0b      	ldr	r3, [pc, #44]	@ (8018174 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	011b      	lsls	r3, r3, #4
 801814a:	4a0b      	ldr	r2, [pc, #44]	@ (8018178 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 801814c:	441a      	add	r2, r3
 801814e:	4b0b      	ldr	r3, [pc, #44]	@ (801817c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018154:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 8018158:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 801815a:	4618      	mov	r0, r3
 801815c:	3718      	adds	r7, #24
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}
 8018162:	bf00      	nop
 8018164:	24000240 	.word	0x24000240
 8018168:	0802aa04 	.word	0x0802aa04
 801816c:	08027148 	.word	0x08027148
 8018170:	080297f0 	.word	0x080297f0
 8018174:	24003de8 	.word	0x24003de8
 8018178:	24000d84 	.word	0x24000d84
 801817c:	40028000 	.word	0x40028000
 8018180:	08029804 	.word	0x08029804
 8018184:	0802982c 	.word	0x0802982c
 8018188:	240025d4 	.word	0x240025d4

0801818c <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 801818c:	b580      	push	{r7, lr}
 801818e:	b088      	sub	sp, #32
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018198:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801819a:	69bb      	ldr	r3, [r7, #24]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d002      	beq.n	80181a6 <mg_tcpip_driver_stm32h_up+0x1a>
 80181a0:	69bb      	ldr	r3, [r7, #24]
 80181a2:	791b      	ldrb	r3, [r3, #4]
 80181a4:	e000      	b.n	80181a8 <mg_tcpip_driver_stm32h_up+0x1c>
 80181a6:	2300      	movs	r3, #0
 80181a8:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 80181aa:	2300      	movs	r3, #0
 80181ac:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 80181ae:	2300      	movs	r3, #0
 80181b0:	75bb      	strb	r3, [r7, #22]
 80181b2:	2300      	movs	r3, #0
 80181b4:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80181b6:	4a2b      	ldr	r2, [pc, #172]	@ (8018264 <mg_tcpip_driver_stm32h_up+0xd8>)
 80181b8:	f107 030c 	add.w	r3, r7, #12
 80181bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181c0:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 80181c4:	f107 0315 	add.w	r3, r7, #21
 80181c8:	f107 0214 	add.w	r2, r7, #20
 80181cc:	7df9      	ldrb	r1, [r7, #23]
 80181ce:	f107 000c 	add.w	r0, r7, #12
 80181d2:	f7ff fc61 	bl	8017a98 <mg_phy_up>
 80181d6:	4603      	mov	r3, r0
 80181d8:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d13a      	bne.n	801825a <mg_tcpip_driver_stm32h_up+0xce>
 80181e4:	7dbb      	ldrb	r3, [r7, #22]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d037      	beq.n	801825a <mg_tcpip_driver_stm32h_up+0xce>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80181ea:	4b1f      	ldr	r3, [pc, #124]	@ (8018268 <mg_tcpip_driver_stm32h_up+0xdc>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80181f2:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80181f4:	7d7b      	ldrb	r3, [r7, #21]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d103      	bne.n	8018202 <mg_tcpip_driver_stm32h_up+0x76>
 80181fa:	69fb      	ldr	r3, [r7, #28]
 80181fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8018200:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 8018202:	7d3b      	ldrb	r3, [r7, #20]
 8018204:	f083 0301 	eor.w	r3, r3, #1
 8018208:	b2db      	uxtb	r3, r3
 801820a:	2b00      	cmp	r3, #0
 801820c:	d003      	beq.n	8018216 <mg_tcpip_driver_stm32h_up+0x8a>
 801820e:	69fb      	ldr	r3, [r7, #28]
 8018210:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8018214:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8018216:	4a14      	ldr	r2, [pc, #80]	@ (8018268 <mg_tcpip_driver_stm32h_up+0xdc>)
 8018218:	69fb      	ldr	r3, [r7, #28]
 801821a:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 801821c:	4b13      	ldr	r3, [pc, #76]	@ (801826c <mg_tcpip_driver_stm32h_up+0xe0>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2b02      	cmp	r3, #2
 8018222:	dd1a      	ble.n	801825a <mg_tcpip_driver_stm32h_up+0xce>
 8018224:	4b12      	ldr	r3, [pc, #72]	@ (8018270 <mg_tcpip_driver_stm32h_up+0xe4>)
 8018226:	f644 0205 	movw	r2, #18437	@ 0x4805
 801822a:	4912      	ldr	r1, [pc, #72]	@ (8018274 <mg_tcpip_driver_stm32h_up+0xe8>)
 801822c:	2003      	movs	r0, #3
 801822e:	f7ef fd17 	bl	8007c60 <mg_log_prefix>
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018238:	2b00      	cmp	r3, #0
 801823a:	d001      	beq.n	8018240 <mg_tcpip_driver_stm32h_up+0xb4>
 801823c:	2164      	movs	r1, #100	@ 0x64
 801823e:	e000      	b.n	8018242 <mg_tcpip_driver_stm32h_up+0xb6>
 8018240:	210a      	movs	r1, #10
 8018242:	69fb      	ldr	r3, [r7, #28]
 8018244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018248:	2b00      	cmp	r3, #0
 801824a:	d001      	beq.n	8018250 <mg_tcpip_driver_stm32h_up+0xc4>
 801824c:	4b0a      	ldr	r3, [pc, #40]	@ (8018278 <mg_tcpip_driver_stm32h_up+0xec>)
 801824e:	e000      	b.n	8018252 <mg_tcpip_driver_stm32h_up+0xc6>
 8018250:	4b0a      	ldr	r3, [pc, #40]	@ (801827c <mg_tcpip_driver_stm32h_up+0xf0>)
 8018252:	461a      	mov	r2, r3
 8018254:	480a      	ldr	r0, [pc, #40]	@ (8018280 <mg_tcpip_driver_stm32h_up+0xf4>)
 8018256:	f7ef fd53 	bl	8007d00 <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 801825a:	7dbb      	ldrb	r3, [r7, #22]
}
 801825c:	4618      	mov	r0, r3
 801825e:	3720      	adds	r7, #32
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	080297e8 	.word	0x080297e8
 8018268:	40028000 	.word	0x40028000
 801826c:	24000240 	.word	0x24000240
 8018270:	0802aa20 	.word	0x0802aa20
 8018274:	08027148 	.word	0x08027148
 8018278:	08029834 	.word	0x08029834
 801827c:	0802983c 	.word	0x0802983c
 8018280:	08029844 	.word	0x08029844

08018284 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 801828a:	4b40      	ldr	r3, [pc, #256]	@ (801838c <ETH_IRQHandler+0x108>)
 801828c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018290:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018298:	2b00      	cmp	r3, #0
 801829a:	d065      	beq.n	8018368 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 801829c:	4b3b      	ldr	r3, [pc, #236]	@ (801838c <ETH_IRQHandler+0x108>)
 801829e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80182a2:	461a      	mov	r2, r3
 80182a4:	f248 0340 	movw	r3, #32832	@ 0x8040
 80182a8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80182ac:	2300      	movs	r3, #0
 80182ae:	607b      	str	r3, [r7, #4]
 80182b0:	e055      	b.n	801835e <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 80182b2:	4b37      	ldr	r3, [pc, #220]	@ (8018390 <ETH_IRQHandler+0x10c>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	4a37      	ldr	r2, [pc, #220]	@ (8018394 <ETH_IRQHandler+0x110>)
 80182b8:	011b      	lsls	r3, r3, #4
 80182ba:	4413      	add	r3, r2
 80182bc:	330c      	adds	r3, #12
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	db50      	blt.n	8018366 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 80182c4:	4b32      	ldr	r3, [pc, #200]	@ (8018390 <ETH_IRQHandler+0x10c>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a32      	ldr	r2, [pc, #200]	@ (8018394 <ETH_IRQHandler+0x110>)
 80182ca:	011b      	lsls	r3, r3, #4
 80182cc:	4413      	add	r3, r2
 80182ce:	330c      	adds	r3, #12
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80182d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80182da:	d128      	bne.n	801832e <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 80182dc:	4b2c      	ldr	r3, [pc, #176]	@ (8018390 <ETH_IRQHandler+0x10c>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4a2c      	ldr	r2, [pc, #176]	@ (8018394 <ETH_IRQHandler+0x110>)
 80182e2:	011b      	lsls	r3, r3, #4
 80182e4:	4413      	add	r3, r2
 80182e6:	330c      	adds	r3, #12
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d11d      	bne.n	801832e <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80182f2:	4b27      	ldr	r3, [pc, #156]	@ (8018390 <ETH_IRQHandler+0x10c>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	4a27      	ldr	r2, [pc, #156]	@ (8018394 <ETH_IRQHandler+0x110>)
 80182f8:	011b      	lsls	r3, r3, #4
 80182fa:	4413      	add	r3, r2
 80182fc:	330c      	adds	r3, #12
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018304:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8018306:	4b22      	ldr	r3, [pc, #136]	@ (8018390 <ETH_IRQHandler+0x10c>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	f240 6204 	movw	r2, #1540	@ 0x604
 801830e:	fb02 f303 	mul.w	r3, r2, r3
 8018312:	4a21      	ldr	r2, [pc, #132]	@ (8018398 <ETH_IRQHandler+0x114>)
 8018314:	1898      	adds	r0, r3, r2
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	2b04      	cmp	r3, #4
 801831a:	d902      	bls.n	8018322 <ETH_IRQHandler+0x9e>
 801831c:	683b      	ldr	r3, [r7, #0]
 801831e:	3b04      	subs	r3, #4
 8018320:	e000      	b.n	8018324 <ETH_IRQHandler+0xa0>
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	4a1d      	ldr	r2, [pc, #116]	@ (801839c <ETH_IRQHandler+0x118>)
 8018326:	6812      	ldr	r2, [r2, #0]
 8018328:	4619      	mov	r1, r3
 801832a:	f7f4 f8fd 	bl	800c528 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 801832e:	4b18      	ldr	r3, [pc, #96]	@ (8018390 <ETH_IRQHandler+0x10c>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4a18      	ldr	r2, [pc, #96]	@ (8018394 <ETH_IRQHandler+0x110>)
 8018334:	011b      	lsls	r3, r3, #4
 8018336:	4413      	add	r3, r2
 8018338:	330c      	adds	r3, #12
 801833a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 801833e:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8018340:	4b13      	ldr	r3, [pc, #76]	@ (8018390 <ETH_IRQHandler+0x10c>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	3301      	adds	r3, #1
 8018346:	4a12      	ldr	r2, [pc, #72]	@ (8018390 <ETH_IRQHandler+0x10c>)
 8018348:	6013      	str	r3, [r2, #0]
 801834a:	4b11      	ldr	r3, [pc, #68]	@ (8018390 <ETH_IRQHandler+0x10c>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2b03      	cmp	r3, #3
 8018350:	d902      	bls.n	8018358 <ETH_IRQHandler+0xd4>
 8018352:	4b0f      	ldr	r3, [pc, #60]	@ (8018390 <ETH_IRQHandler+0x10c>)
 8018354:	2200      	movs	r2, #0
 8018356:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	3301      	adds	r3, #1
 801835c:	607b      	str	r3, [r7, #4]
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2b09      	cmp	r3, #9
 8018362:	d9a6      	bls.n	80182b2 <ETH_IRQHandler+0x2e>
 8018364:	e000      	b.n	8018368 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8018366:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8018368:	4b08      	ldr	r3, [pc, #32]	@ (801838c <ETH_IRQHandler+0x108>)
 801836a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801836e:	461a      	mov	r2, r3
 8018370:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8018374:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8018378:	4a04      	ldr	r2, [pc, #16]	@ (801838c <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 801837a:	4b09      	ldr	r3, [pc, #36]	@ (80183a0 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 801837c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018380:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8018384:	bf00      	nop
 8018386:	3708      	adds	r7, #8
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}
 801838c:	40028000 	.word	0x40028000
 8018390:	24003dec 	.word	0x24003dec
 8018394:	24000d44 	.word	0x24000d44
 8018398:	24000dc4 	.word	0x24000dc4
 801839c:	24003de4 	.word	0x24003de4
 80183a0:	24000d74 	.word	0x24000d74

080183a4 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1729663508},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 80183a4:	b480      	push	{r7}
 80183a6:	b083      	sub	sp, #12
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	6078      	str	r0, [r7, #4]
 80183ac:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 80183ae:	e005      	b.n	80183bc <scmp+0x18>
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	3301      	adds	r3, #1
 80183b4:	607b      	str	r3, [r7, #4]
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	3301      	adds	r3, #1
 80183ba:	603b      	str	r3, [r7, #0]
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d005      	beq.n	80183d0 <scmp+0x2c>
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	781a      	ldrb	r2, [r3, #0]
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d0ef      	beq.n	80183b0 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	461a      	mov	r2, r3
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	1ad3      	subs	r3, r2, r3
}
 80183dc:	4618      	mov	r0, r3
 80183de:	370c      	adds	r7, #12
 80183e0:	46bd      	mov	sp, r7
 80183e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e6:	4770      	bx	lr

080183e8 <mg_unlist>:
const char *mg_unlist(size_t no) {
 80183e8:	b480      	push	{r7}
 80183ea:	b083      	sub	sp, #12
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 80183f0:	4906      	ldr	r1, [pc, #24]	@ (801840c <mg_unlist+0x24>)
 80183f2:	687a      	ldr	r2, [r7, #4]
 80183f4:	4613      	mov	r3, r2
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	4413      	add	r3, r2
 80183fa:	00db      	lsls	r3, r3, #3
 80183fc:	440b      	add	r3, r1
 80183fe:	681b      	ldr	r3, [r3, #0]
}
 8018400:	4618      	mov	r0, r3
 8018402:	370c      	adds	r7, #12
 8018404:	46bd      	mov	sp, r7
 8018406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840a:	4770      	bx	lr
 801840c:	08036808 	.word	0x08036808

08018410 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 8018410:	b580      	push	{r7, lr}
 8018412:	b086      	sub	sp, #24
 8018414:	af00      	add	r7, sp, #0
 8018416:	60f8      	str	r0, [r7, #12]
 8018418:	60b9      	str	r1, [r7, #8]
 801841a:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 801841c:	4b16      	ldr	r3, [pc, #88]	@ (8018478 <mg_unpack+0x68>)
 801841e:	617b      	str	r3, [r7, #20]
 8018420:	e020      	b.n	8018464 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 8018422:	697b      	ldr	r3, [r7, #20]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	68f9      	ldr	r1, [r7, #12]
 8018428:	4618      	mov	r0, r3
 801842a:	f7ff ffbb 	bl	80183a4 <scmp>
 801842e:	4603      	mov	r3, r0
 8018430:	2b00      	cmp	r3, #0
 8018432:	d113      	bne.n	801845c <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d004      	beq.n	8018444 <mg_unpack+0x34>
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	689b      	ldr	r3, [r3, #8]
 801843e:	1e5a      	subs	r2, r3, #1
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d005      	beq.n	8018456 <mg_unpack+0x46>
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018450:	6879      	ldr	r1, [r7, #4]
 8018452:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8018456:	697b      	ldr	r3, [r7, #20]
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	e008      	b.n	801846e <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 801845c:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	3318      	adds	r3, #24
 8018462:	617b      	str	r3, [r7, #20]
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d1da      	bne.n	8018422 <mg_unpack+0x12>
  }
  return NULL;
 801846c:	2300      	movs	r3, #0
}
 801846e:	4618      	mov	r0, r3
 8018470:	3718      	adds	r7, #24
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}
 8018476:	bf00      	nop
 8018478:	08036808 	.word	0x08036808
 801847c:	00000000 	.word	0x00000000

08018480 <timer_fn_1>:
//	  }
//}
// Add this line in mongoose_glue.h
// Add extern declaration
extern volatile uint16_t uart_hex_value;
static void timer_fn_1(void *arg) {
 8018480:	b580      	push	{r7, lr}
 8018482:	b09a      	sub	sp, #104	@ 0x68
 8018484:	af02      	add	r7, sp, #8
 8018486:	60f8      	str	r0, [r7, #12]
  if (g_mqtt_conn != NULL) {
 8018488:	4b25      	ldr	r3, [pc, #148]	@ (8018520 <timer_fn_1+0xa0>)
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d03c      	beq.n	801850a <timer_fn_1+0x8a>
    struct mg_mqtt_opts opts;
    char msg[16];
    snprintf(msg, sizeof(msg), "%.3f", uart_hex_value*0.001); // Send as decimal
 8018490:	4b24      	ldr	r3, [pc, #144]	@ (8018524 <timer_fn_1+0xa4>)
 8018492:	881b      	ldrh	r3, [r3, #0]
 8018494:	b29b      	uxth	r3, r3
 8018496:	ee07 3a90 	vmov	s15, r3
 801849a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801849e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8018518 <timer_fn_1+0x98>
 80184a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80184a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80184aa:	ed8d 7b00 	vstr	d7, [sp]
 80184ae:	4a1e      	ldr	r2, [pc, #120]	@ (8018528 <timer_fn_1+0xa8>)
 80184b0:	2110      	movs	r1, #16
 80184b2:	4618      	mov	r0, r3
 80184b4:	f00a ff90 	bl	80233d8 <sniprintf>
    memset(&opts, 0, sizeof(opts));
 80184b8:	f107 0310 	add.w	r3, r7, #16
 80184bc:	2240      	movs	r2, #64	@ 0x40
 80184be:	2100      	movs	r1, #0
 80184c0:	4618      	mov	r0, r3
 80184c2:	f00b f8df 	bl	8023684 <memset>
    opts.topic = mg_str("companysix/d1/topic1|mils");
 80184c6:	463b      	mov	r3, r7
 80184c8:	4918      	ldr	r1, [pc, #96]	@ (801852c <timer_fn_1+0xac>)
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7f6 fa90 	bl	800e9f0 <mg_str_s>
 80184d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80184d4:	463a      	mov	r2, r7
 80184d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184da:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.message = mg_str(msg);
 80184de:	463b      	mov	r3, r7
 80184e0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80184e4:	4611      	mov	r1, r2
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f6 fa82 	bl	800e9f0 <mg_str_s>
 80184ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80184f0:	463a      	mov	r2, r7
 80184f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184f6:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_mqtt_pub(g_mqtt_conn, &opts);
 80184fa:	4b09      	ldr	r3, [pc, #36]	@ (8018520 <timer_fn_1+0xa0>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	f107 0210 	add.w	r2, r7, #16
 8018502:	4611      	mov	r1, r2
 8018504:	4618      	mov	r0, r3
 8018506:	f7f0 f93b 	bl	8008780 <mg_mqtt_pub>
  }
}
 801850a:	bf00      	nop
 801850c:	3760      	adds	r7, #96	@ 0x60
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	f3af 8000 	nop.w
 8018518:	d2f1a9fc 	.word	0xd2f1a9fc
 801851c:	3f50624d 	.word	0x3f50624d
 8018520:	24003ee4 	.word	0x24003ee4
 8018524:	24000c68 	.word	0x24000c68
 8018528:	08029878 	.word	0x08029878
 801852c:	08029880 	.word	0x08029880

08018530 <glue_init_1>:

void glue_init_1(void) {
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af04      	add	r7, sp, #16
	  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, timer_fn_1, NULL);
 8018536:	2300      	movs	r3, #0
 8018538:	9302      	str	r3, [sp, #8]
 801853a:	4b0d      	ldr	r3, [pc, #52]	@ (8018570 <glue_init_1+0x40>)
 801853c:	9301      	str	r3, [sp, #4]
 801853e:	2301      	movs	r3, #1
 8018540:	9300      	str	r3, [sp, #0]
 8018542:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018546:	f04f 0300 	mov.w	r3, #0
 801854a:	480a      	ldr	r0, [pc, #40]	@ (8018574 <glue_init_1+0x44>)
 801854c:	f7f1 f95c 	bl	8009808 <mg_timer_add>
  MG_DEBUG(("Custom init done"));
 8018550:	4b09      	ldr	r3, [pc, #36]	@ (8018578 <glue_init_1+0x48>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b02      	cmp	r3, #2
 8018556:	dd08      	ble.n	801856a <glue_init_1+0x3a>
 8018558:	4b08      	ldr	r3, [pc, #32]	@ (801857c <glue_init_1+0x4c>)
 801855a:	2271      	movs	r2, #113	@ 0x71
 801855c:	4908      	ldr	r1, [pc, #32]	@ (8018580 <glue_init_1+0x50>)
 801855e:	2003      	movs	r0, #3
 8018560:	f7ef fb7e 	bl	8007c60 <mg_log_prefix>
 8018564:	4807      	ldr	r0, [pc, #28]	@ (8018584 <glue_init_1+0x54>)
 8018566:	f7ef fbcb 	bl	8007d00 <mg_log>
}//2
 801856a:	bf00      	nop
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}
 8018570:	08018481 	.word	0x08018481
 8018574:	24003e88 	.word	0x24003e88
 8018578:	24000240 	.word	0x24000240
 801857c:	08036838 	.word	0x08036838
 8018580:	0802989c 	.word	0x0802989c
 8018584:	080298b8 	.word	0x080298b8

08018588 <glue_lock>:
//}

void glue_lock_init(void) {  // callback to initialize the MQTT semaphore
}

void glue_lock(void) {  // Lock mutex. Implement only if you use MQTT publish
 8018588:	b480      	push	{r7}
 801858a:	af00      	add	r7, sp, #0
}
 801858c:	bf00      	nop
 801858e:	46bd      	mov	sp, r7
 8018590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018594:	4770      	bx	lr

08018596 <glue_unlock>:

void glue_unlock(void) {  // Unlock mutex. Implement only if you use MQTT publish
 8018596:	b480      	push	{r7}
 8018598:	af00      	add	r7, sp, #0
}
 801859a:	bf00      	nop
 801859c:	46bd      	mov	sp, r7
 801859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a2:	4770      	bx	lr

080185a4 <glue_mqtt_tls_init>:

void glue_mqtt_tls_init(struct mg_connection *c) {
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b08c      	sub	sp, #48	@ 0x30
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
  bool is_tls = mg_url_is_ssl(WIZARD_MQTT_URL);
 80185ac:	481a      	ldr	r0, [pc, #104]	@ (8018618 <glue_mqtt_tls_init+0x74>)
 80185ae:	f7fe ff01 	bl	80173b4 <mg_url_is_ssl>
 80185b2:	4603      	mov	r3, r0
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	bf14      	ite	ne
 80185b8:	2301      	movne	r3, #1
 80185ba:	2300      	moveq	r3, #0
 80185bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  MG_DEBUG(("%lu TLS enabled: %s", c->id, is_tls ? "yes" : "no"));
 80185c0:	4b16      	ldr	r3, [pc, #88]	@ (801861c <glue_mqtt_tls_init+0x78>)
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2b02      	cmp	r3, #2
 80185c6:	dd12      	ble.n	80185ee <glue_mqtt_tls_init+0x4a>
 80185c8:	4b15      	ldr	r3, [pc, #84]	@ (8018620 <glue_mqtt_tls_init+0x7c>)
 80185ca:	22aa      	movs	r2, #170	@ 0xaa
 80185cc:	4915      	ldr	r1, [pc, #84]	@ (8018624 <glue_mqtt_tls_init+0x80>)
 80185ce:	2003      	movs	r0, #3
 80185d0:	f7ef fb46 	bl	8007c60 <mg_log_prefix>
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80185d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d001      	beq.n	80185e4 <glue_mqtt_tls_init+0x40>
 80185e0:	4b11      	ldr	r3, [pc, #68]	@ (8018628 <glue_mqtt_tls_init+0x84>)
 80185e2:	e000      	b.n	80185e6 <glue_mqtt_tls_init+0x42>
 80185e4:	4b11      	ldr	r3, [pc, #68]	@ (801862c <glue_mqtt_tls_init+0x88>)
 80185e6:	461a      	mov	r2, r3
 80185e8:	4811      	ldr	r0, [pc, #68]	@ (8018630 <glue_mqtt_tls_init+0x8c>)
 80185ea:	f7ef fb89 	bl	8007d00 <mg_log>
  if (is_tls) {
 80185ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d00c      	beq.n	8018610 <glue_mqtt_tls_init+0x6c>
    struct mg_tls_opts opts;
    memset(&opts, 0, sizeof(opts));
 80185f6:	f107 0308 	add.w	r3, r7, #8
 80185fa:	2224      	movs	r2, #36	@ 0x24
 80185fc:	2100      	movs	r1, #0
 80185fe:	4618      	mov	r0, r3
 8018600:	f00b f840 	bl	8023684 <memset>
    // opts.ca = mg_str(ca_certificate);
    mg_tls_init(c, &opts);
 8018604:	f107 0308 	add.w	r3, r7, #8
 8018608:	4619      	mov	r1, r3
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7f9 fbea 	bl	8011de4 <mg_tls_init>
  }
}
 8018610:	bf00      	nop
 8018612:	3730      	adds	r7, #48	@ 0x30
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}
 8018618:	080298f0 	.word	0x080298f0
 801861c:	24000240 	.word	0x24000240
 8018620:	08036844 	.word	0x08036844
 8018624:	0802989c 	.word	0x0802989c
 8018628:	08029904 	.word	0x08029904
 801862c:	08029908 	.word	0x08029908
 8018630:	0802990c 	.word	0x0802990c

08018634 <glue_mqtt_on_connect>:

// Called when we connected to the MQTT server
void glue_mqtt_on_connect(struct mg_connection *c, int code) {
 8018634:	b580      	push	{r7, lr}
 8018636:	b096      	sub	sp, #88	@ 0x58
 8018638:	af02      	add	r7, sp, #8
 801863a:	60f8      	str	r0, [r7, #12]
 801863c:	60b9      	str	r1, [r7, #8]
  struct mg_mqtt_opts opts;
  memset(&opts, 0, sizeof(opts));
 801863e:	f107 0310 	add.w	r3, r7, #16
 8018642:	2240      	movs	r2, #64	@ 0x40
 8018644:	2100      	movs	r1, #0
 8018646:	4618      	mov	r0, r3
 8018648:	f00b f81c 	bl	8023684 <memset>
  opts.user=mg_str("Sarayu");
 801864c:	463b      	mov	r3, r7
 801864e:	4922      	ldr	r1, [pc, #136]	@ (80186d8 <glue_mqtt_on_connect+0xa4>)
 8018650:	4618      	mov	r0, r3
 8018652:	f7f6 f9cd 	bl	800e9f0 <mg_str_s>
 8018656:	f107 0310 	add.w	r3, r7, #16
 801865a:	463a      	mov	r2, r7
 801865c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018660:	e883 0003 	stmia.w	r3, {r0, r1}
  opts.pass=mg_str("IOTteam@123");
 8018664:	463b      	mov	r3, r7
 8018666:	491d      	ldr	r1, [pc, #116]	@ (80186dc <glue_mqtt_on_connect+0xa8>)
 8018668:	4618      	mov	r0, r3
 801866a:	f7f6 f9c1 	bl	800e9f0 <mg_str_s>
 801866e:	f107 0318 	add.w	r3, r7, #24
 8018672:	463a      	mov	r2, r7
 8018674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018678:	e883 0003 	stmia.w	r3, {r0, r1}
  opts.qos = 1;
 801867c:	2301      	movs	r3, #1
 801867e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  opts.topic = mg_str("device1/rx");
 8018682:	463b      	mov	r3, r7
 8018684:	4916      	ldr	r1, [pc, #88]	@ (80186e0 <glue_mqtt_on_connect+0xac>)
 8018686:	4618      	mov	r0, r3
 8018688:	f7f6 f9b2 	bl	800e9f0 <mg_str_s>
 801868c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018690:	463a      	mov	r2, r7
 8018692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018696:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_mqtt_sub(c, &opts);
 801869a:	f107 0310 	add.w	r3, r7, #16
 801869e:	4619      	mov	r1, r3
 80186a0:	68f8      	ldr	r0, [r7, #12]
 80186a2:	f7f0 f93b 	bl	800891c <mg_mqtt_sub>
  MG_DEBUG(("%lu code %d. Subscribing to [%.*s]", c->id, code, opts.topic.len,
 80186a6:	4b0f      	ldr	r3, [pc, #60]	@ (80186e4 <glue_mqtt_on_connect+0xb0>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	2b02      	cmp	r3, #2
 80186ac:	dd0f      	ble.n	80186ce <glue_mqtt_on_connect+0x9a>
 80186ae:	4b0e      	ldr	r3, [pc, #56]	@ (80186e8 <glue_mqtt_on_connect+0xb4>)
 80186b0:	22bc      	movs	r2, #188	@ 0xbc
 80186b2:	490e      	ldr	r1, [pc, #56]	@ (80186ec <glue_mqtt_on_connect+0xb8>)
 80186b4:	2003      	movs	r0, #3
 80186b6:	f7ef fad3 	bl	8007c60 <mg_log_prefix>
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80186be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80186c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	4613      	mov	r3, r2
 80186c6:	68ba      	ldr	r2, [r7, #8]
 80186c8:	4809      	ldr	r0, [pc, #36]	@ (80186f0 <glue_mqtt_on_connect+0xbc>)
 80186ca:	f7ef fb19 	bl	8007d00 <mg_log>
            opts.topic.buf));
}
 80186ce:	bf00      	nop
 80186d0:	3750      	adds	r7, #80	@ 0x50
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
 80186d6:	bf00      	nop
 80186d8:	08029920 	.word	0x08029920
 80186dc:	08029928 	.word	0x08029928
 80186e0:	08029934 	.word	0x08029934
 80186e4:	24000240 	.word	0x24000240
 80186e8:	08036858 	.word	0x08036858
 80186ec:	0802989c 	.word	0x0802989c
 80186f0:	08029940 	.word	0x08029940

080186f4 <glue_mqtt_on_message>:

// This function gets called for every received MQTT message
void glue_mqtt_on_message(struct mg_connection *c, struct mg_str topic,
                          struct mg_str data) {
 80186f4:	b082      	sub	sp, #8
 80186f6:	b590      	push	{r4, r7, lr}
 80186f8:	b0b5      	sub	sp, #212	@ 0xd4
 80186fa:	af04      	add	r7, sp, #16
 80186fc:	6178      	str	r0, [r7, #20]
 80186fe:	f107 000c 	add.w	r0, r7, #12
 8018702:	e880 0006 	stmia.w	r0, {r1, r2}
 8018706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  char tmp[100];
  struct mg_mqtt_opts opts;

  mg_snprintf(tmp, sizeof(tmp), "Got [%.*s] -> [%.*s] !", topic.len, topic.buf,
 801870a:	693c      	ldr	r4, [r7, #16]
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8018712:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8018716:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801871a:	9102      	str	r1, [sp, #8]
 801871c:	9201      	str	r2, [sp, #4]
 801871e:	9300      	str	r3, [sp, #0]
 8018720:	4623      	mov	r3, r4
 8018722:	4a25      	ldr	r2, [pc, #148]	@ (80187b8 <glue_mqtt_on_message+0xc4>)
 8018724:	2164      	movs	r1, #100	@ 0x64
 8018726:	f7f4 fe51 	bl	800d3cc <mg_snprintf>
              data.len, data.buf);
  MG_DEBUG(("%lu %s", c->id, tmp));
 801872a:	4b24      	ldr	r3, [pc, #144]	@ (80187bc <glue_mqtt_on_message+0xc8>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	2b02      	cmp	r3, #2
 8018730:	dd0d      	ble.n	801874e <glue_mqtt_on_message+0x5a>
 8018732:	4b23      	ldr	r3, [pc, #140]	@ (80187c0 <glue_mqtt_on_message+0xcc>)
 8018734:	22c8      	movs	r2, #200	@ 0xc8
 8018736:	4923      	ldr	r1, [pc, #140]	@ (80187c4 <glue_mqtt_on_message+0xd0>)
 8018738:	2003      	movs	r0, #3
 801873a:	f7ef fa91 	bl	8007c60 <mg_log_prefix>
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018742:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8018746:	4619      	mov	r1, r3
 8018748:	481f      	ldr	r0, [pc, #124]	@ (80187c8 <glue_mqtt_on_message+0xd4>)
 801874a:	f7ef fad9 	bl	8007d00 <mg_log>

  // Send response to the TX topic
  if (g_mqtt_conn != NULL) {
 801874e:	4b1f      	ldr	r3, [pc, #124]	@ (80187cc <glue_mqtt_on_message+0xd8>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d028      	beq.n	80187a8 <glue_mqtt_on_message+0xb4>
    memset(&opts, 0, sizeof(opts));
 8018756:	f107 031c 	add.w	r3, r7, #28
 801875a:	2240      	movs	r2, #64	@ 0x40
 801875c:	2100      	movs	r1, #0
 801875e:	4618      	mov	r0, r3
 8018760:	f00a ff90 	bl	8023684 <memset>
    opts.topic = mg_str("device1/tx");
 8018764:	463b      	mov	r3, r7
 8018766:	491a      	ldr	r1, [pc, #104]	@ (80187d0 <glue_mqtt_on_message+0xdc>)
 8018768:	4618      	mov	r0, r3
 801876a:	f7f6 f941 	bl	800e9f0 <mg_str_s>
 801876e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018772:	463a      	mov	r2, r7
 8018774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018778:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.message = mg_str(tmp);
 801877c:	463b      	mov	r3, r7
 801877e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8018782:	4611      	mov	r1, r2
 8018784:	4618      	mov	r0, r3
 8018786:	f7f6 f933 	bl	800e9f0 <mg_str_s>
 801878a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801878e:	463a      	mov	r2, r7
 8018790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018794:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_mqtt_pub(g_mqtt_conn, &opts);
 8018798:	4b0c      	ldr	r3, [pc, #48]	@ (80187cc <glue_mqtt_on_message+0xd8>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	f107 021c 	add.w	r2, r7, #28
 80187a0:	4611      	mov	r1, r2
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7ef ffec 	bl	8008780 <mg_mqtt_pub>
  }
}
 80187a8:	bf00      	nop
 80187aa:	37c4      	adds	r7, #196	@ 0xc4
 80187ac:	46bd      	mov	sp, r7
 80187ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80187b2:	b002      	add	sp, #8
 80187b4:	4770      	bx	lr
 80187b6:	bf00      	nop
 80187b8:	08029964 	.word	0x08029964
 80187bc:	24000240 	.word	0x24000240
 80187c0:	08036870 	.word	0x08036870
 80187c4:	0802989c 	.word	0x0802989c
 80187c8:	0802997c 	.word	0x0802997c
 80187cc:	24003ee4 	.word	0x24003ee4
 80187d0:	08029984 	.word	0x08029984

080187d4 <glue_mqtt_on_cmd>:

void glue_mqtt_on_cmd(struct mg_connection *c, struct mg_mqtt_message *mm) {
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b082      	sub	sp, #8
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	6039      	str	r1, [r7, #0]
  MG_DEBUG(("%lu cmd %d qos %d", c->id, mm->cmd, mm->qos));
 80187de:	4b0c      	ldr	r3, [pc, #48]	@ (8018810 <glue_mqtt_on_cmd+0x3c>)
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2b02      	cmp	r3, #2
 80187e4:	dd0f      	ble.n	8018806 <glue_mqtt_on_cmd+0x32>
 80187e6:	4b0b      	ldr	r3, [pc, #44]	@ (8018814 <glue_mqtt_on_cmd+0x40>)
 80187e8:	22d4      	movs	r2, #212	@ 0xd4
 80187ea:	490b      	ldr	r1, [pc, #44]	@ (8018818 <glue_mqtt_on_cmd+0x44>)
 80187ec:	2003      	movs	r0, #3
 80187ee:	f7ef fa37 	bl	8007c60 <mg_log_prefix>
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	7e9b      	ldrb	r3, [r3, #26]
 80187fa:	461a      	mov	r2, r3
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	7edb      	ldrb	r3, [r3, #27]
 8018800:	4806      	ldr	r0, [pc, #24]	@ (801881c <glue_mqtt_on_cmd+0x48>)
 8018802:	f7ef fa7d 	bl	8007d00 <mg_log>
}
 8018806:	bf00      	nop
 8018808:	3708      	adds	r7, #8
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}
 801880e:	bf00      	nop
 8018810:	24000240 	.word	0x24000240
 8018814:	08036888 	.word	0x08036888
 8018818:	0802989c 	.word	0x0802989c
 801881c:	08029990 	.word	0x08029990

08018820 <glue_mqtt_connect>:

struct mg_connection *glue_mqtt_connect(struct mg_mgr *mgr,
                                        mg_event_handler_t fn) {
 8018820:	b580      	push	{r7, lr}
 8018822:	b098      	sub	sp, #96	@ 0x60
 8018824:	af02      	add	r7, sp, #8
 8018826:	60f8      	str	r0, [r7, #12]
 8018828:	60b9      	str	r1, [r7, #8]
  const char *url = WIZARD_MQTT_URL;
 801882a:	4b19      	ldr	r3, [pc, #100]	@ (8018890 <glue_mqtt_connect+0x70>)
 801882c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_mqtt_opts opts;
  memset(&opts, 0, sizeof(opts));
 801882e:	f107 0314 	add.w	r3, r7, #20
 8018832:	2240      	movs	r2, #64	@ 0x40
 8018834:	2100      	movs	r1, #0
 8018836:	4618      	mov	r0, r3
 8018838:	f00a ff24 	bl	8023684 <memset>
  opts.clean = true;
 801883c:	2301      	movs	r3, #1
 801883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  opts.user=mg_str("Sarayu");
 8018842:	463b      	mov	r3, r7
 8018844:	4913      	ldr	r1, [pc, #76]	@ (8018894 <glue_mqtt_connect+0x74>)
 8018846:	4618      	mov	r0, r3
 8018848:	f7f6 f8d2 	bl	800e9f0 <mg_str_s>
 801884c:	f107 0314 	add.w	r3, r7, #20
 8018850:	463a      	mov	r2, r7
 8018852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018856:	e883 0003 	stmia.w	r3, {r0, r1}
   opts.pass=mg_str("IOTteam@123");
 801885a:	463b      	mov	r3, r7
 801885c:	490e      	ldr	r1, [pc, #56]	@ (8018898 <glue_mqtt_connect+0x78>)
 801885e:	4618      	mov	r0, r3
 8018860:	f7f6 f8c6 	bl	800e9f0 <mg_str_s>
 8018864:	f107 031c 	add.w	r3, r7, #28
 8018868:	463a      	mov	r2, r7
 801886a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801886e:	e883 0003 	stmia.w	r3, {r0, r1}
  return mg_mqtt_connect(mgr, url, &opts, fn, NULL);
 8018872:	f107 0214 	add.w	r2, r7, #20
 8018876:	2300      	movs	r3, #0
 8018878:	9300      	str	r3, [sp, #0]
 801887a:	68bb      	ldr	r3, [r7, #8]
 801887c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801887e:	68f8      	ldr	r0, [r7, #12]
 8018880:	f7f0 fb26 	bl	8008ed0 <mg_mqtt_connect>
 8018884:	4603      	mov	r3, r0
}
 8018886:	4618      	mov	r0, r3
 8018888:	3758      	adds	r7, #88	@ 0x58
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	080298f0 	.word	0x080298f0
 8018894:	08029920 	.word	0x08029920
 8018898:	08029928 	.word	0x08029928

0801889c <glue_sntp_on_time>:


void glue_sntp_on_time(uint64_t utc_time_in_milliseconds) {
 801889c:	b580      	push	{r7, lr}
 801889e:	b084      	sub	sp, #16
 80188a0:	af02      	add	r7, sp, #8
 80188a2:	e9c7 0100 	strd	r0, r1, [r7]
  MG_INFO(("UTC time in milliseconds from SNTP: %llu, current time: %llu",
 80188a6:	4b0c      	ldr	r3, [pc, #48]	@ (80188d8 <glue_sntp_on_time+0x3c>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b01      	cmp	r3, #1
 80188ac:	dd10      	ble.n	80188d0 <glue_sntp_on_time+0x34>
 80188ae:	4b0b      	ldr	r3, [pc, #44]	@ (80188dc <glue_sntp_on_time+0x40>)
 80188b0:	22e4      	movs	r2, #228	@ 0xe4
 80188b2:	490b      	ldr	r1, [pc, #44]	@ (80188e0 <glue_sntp_on_time+0x44>)
 80188b4:	2002      	movs	r0, #2
 80188b6:	f7ef f9d3 	bl	8007c60 <mg_log_prefix>
 80188ba:	f7f5 fdd3 	bl	800e464 <mg_now>
 80188be:	4602      	mov	r2, r0
 80188c0:	460b      	mov	r3, r1
 80188c2:	e9cd 2300 	strd	r2, r3, [sp]
 80188c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80188ca:	4806      	ldr	r0, [pc, #24]	@ (80188e4 <glue_sntp_on_time+0x48>)
 80188cc:	f7ef fa18 	bl	8007d00 <mg_log>
           utc_time_in_milliseconds, mg_now()));
}
 80188d0:	bf00      	nop
 80188d2:	3708      	adds	r7, #8
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	24000240 	.word	0x24000240
 80188dc:	0803689c 	.word	0x0803689c
 80188e0:	0802989c 	.word	0x0802989c
 80188e4:	080299a4 	.word	0x080299a4

080188e8 <glue_modbus_read_reg>:

// Mock a device that has 5 read/write registers at address 1000
static uint16_t s_modbus_regs[] = {11, 22, 33, 44, 55};
static uint16_t s_modbus_base = 1000;  // Base address of our registers

bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b084      	sub	sp, #16
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	4603      	mov	r3, r0
 80188f0:	6039      	str	r1, [r7, #0]
 80188f2:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 80188f4:	2300      	movs	r3, #0
 80188f6:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 80188f8:	2305      	movs	r3, #5
 80188fa:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 80188fc:	4b19      	ldr	r3, [pc, #100]	@ (8018964 <glue_modbus_read_reg+0x7c>)
 80188fe:	881b      	ldrh	r3, [r3, #0]
 8018900:	88fa      	ldrh	r2, [r7, #6]
 8018902:	429a      	cmp	r2, r3
 8018904:	d312      	bcc.n	801892c <glue_modbus_read_reg+0x44>
 8018906:	88fa      	ldrh	r2, [r7, #6]
 8018908:	4b16      	ldr	r3, [pc, #88]	@ (8018964 <glue_modbus_read_reg+0x7c>)
 801890a:	881b      	ldrh	r3, [r3, #0]
 801890c:	4619      	mov	r1, r3
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	440b      	add	r3, r1
 8018912:	429a      	cmp	r2, r3
 8018914:	d20a      	bcs.n	801892c <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8018916:	88fb      	ldrh	r3, [r7, #6]
 8018918:	4a12      	ldr	r2, [pc, #72]	@ (8018964 <glue_modbus_read_reg+0x7c>)
 801891a:	8812      	ldrh	r2, [r2, #0]
 801891c:	1a9b      	subs	r3, r3, r2
 801891e:	4a12      	ldr	r2, [pc, #72]	@ (8018968 <glue_modbus_read_reg+0x80>)
 8018920:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	801a      	strh	r2, [r3, #0]
    success = true;
 8018928:	2301      	movs	r3, #1
 801892a:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, *value));
 801892c:	4b0f      	ldr	r3, [pc, #60]	@ (801896c <glue_modbus_read_reg+0x84>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	2b01      	cmp	r3, #1
 8018932:	dd11      	ble.n	8018958 <glue_modbus_read_reg+0x70>
 8018934:	4b0e      	ldr	r3, [pc, #56]	@ (8018970 <glue_modbus_read_reg+0x88>)
 8018936:	22f4      	movs	r2, #244	@ 0xf4
 8018938:	490e      	ldr	r1, [pc, #56]	@ (8018974 <glue_modbus_read_reg+0x8c>)
 801893a:	2002      	movs	r0, #2
 801893c:	f7ef f990 	bl	8007c60 <mg_log_prefix>
 8018940:	7bfb      	ldrb	r3, [r7, #15]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <glue_modbus_read_reg+0x62>
 8018946:	490c      	ldr	r1, [pc, #48]	@ (8018978 <glue_modbus_read_reg+0x90>)
 8018948:	e000      	b.n	801894c <glue_modbus_read_reg+0x64>
 801894a:	490c      	ldr	r1, [pc, #48]	@ (801897c <glue_modbus_read_reg+0x94>)
 801894c:	88fa      	ldrh	r2, [r7, #6]
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	881b      	ldrh	r3, [r3, #0]
 8018952:	480b      	ldr	r0, [pc, #44]	@ (8018980 <glue_modbus_read_reg+0x98>)
 8018954:	f7ef f9d4 	bl	8007d00 <mg_log>
  return success;
 8018958:	7bfb      	ldrb	r3, [r7, #15]
}
 801895a:	4618      	mov	r0, r3
 801895c:	3710      	adds	r7, #16
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	24000282 	.word	0x24000282
 8018968:	24000278 	.word	0x24000278
 801896c:	24000240 	.word	0x24000240
 8018970:	080368b0 	.word	0x080368b0
 8018974:	0802989c 	.word	0x0802989c
 8018978:	080299e4 	.word	0x080299e4
 801897c:	080299e8 	.word	0x080299e8
 8018980:	080299f0 	.word	0x080299f0

08018984 <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8018984:	b580      	push	{r7, lr}
 8018986:	b084      	sub	sp, #16
 8018988:	af00      	add	r7, sp, #0
 801898a:	4603      	mov	r3, r0
 801898c:	460a      	mov	r2, r1
 801898e:	80fb      	strh	r3, [r7, #6]
 8018990:	4613      	mov	r3, r2
 8018992:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8018994:	2300      	movs	r3, #0
 8018996:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8018998:	2305      	movs	r3, #5
 801899a:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 801899c:	4b18      	ldr	r3, [pc, #96]	@ (8018a00 <glue_modbus_write_reg+0x7c>)
 801899e:	881b      	ldrh	r3, [r3, #0]
 80189a0:	88fa      	ldrh	r2, [r7, #6]
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d311      	bcc.n	80189ca <glue_modbus_write_reg+0x46>
 80189a6:	88fa      	ldrh	r2, [r7, #6]
 80189a8:	4b15      	ldr	r3, [pc, #84]	@ (8018a00 <glue_modbus_write_reg+0x7c>)
 80189aa:	881b      	ldrh	r3, [r3, #0]
 80189ac:	4619      	mov	r1, r3
 80189ae:	68bb      	ldr	r3, [r7, #8]
 80189b0:	440b      	add	r3, r1
 80189b2:	429a      	cmp	r2, r3
 80189b4:	d209      	bcs.n	80189ca <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 80189b6:	88fb      	ldrh	r3, [r7, #6]
 80189b8:	4a11      	ldr	r2, [pc, #68]	@ (8018a00 <glue_modbus_write_reg+0x7c>)
 80189ba:	8812      	ldrh	r2, [r2, #0]
 80189bc:	1a9b      	subs	r3, r3, r2
 80189be:	4911      	ldr	r1, [pc, #68]	@ (8018a04 <glue_modbus_write_reg+0x80>)
 80189c0:	88ba      	ldrh	r2, [r7, #4]
 80189c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 80189c6:	2301      	movs	r3, #1
 80189c8:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, value));
 80189ca:	4b0f      	ldr	r3, [pc, #60]	@ (8018a08 <glue_modbus_write_reg+0x84>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	2b01      	cmp	r3, #1
 80189d0:	dd10      	ble.n	80189f4 <glue_modbus_write_reg+0x70>
 80189d2:	4b0e      	ldr	r3, [pc, #56]	@ (8018a0c <glue_modbus_write_reg+0x88>)
 80189d4:	22ff      	movs	r2, #255	@ 0xff
 80189d6:	490e      	ldr	r1, [pc, #56]	@ (8018a10 <glue_modbus_write_reg+0x8c>)
 80189d8:	2002      	movs	r0, #2
 80189da:	f7ef f941 	bl	8007c60 <mg_log_prefix>
 80189de:	7bfb      	ldrb	r3, [r7, #15]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d001      	beq.n	80189e8 <glue_modbus_write_reg+0x64>
 80189e4:	490b      	ldr	r1, [pc, #44]	@ (8018a14 <glue_modbus_write_reg+0x90>)
 80189e6:	e000      	b.n	80189ea <glue_modbus_write_reg+0x66>
 80189e8:	490b      	ldr	r1, [pc, #44]	@ (8018a18 <glue_modbus_write_reg+0x94>)
 80189ea:	88fa      	ldrh	r2, [r7, #6]
 80189ec:	88bb      	ldrh	r3, [r7, #4]
 80189ee:	480b      	ldr	r0, [pc, #44]	@ (8018a1c <glue_modbus_write_reg+0x98>)
 80189f0:	f7ef f986 	bl	8007d00 <mg_log>
  return success;
 80189f4:	7bfb      	ldrb	r3, [r7, #15]

}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3710      	adds	r7, #16
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	24000282 	.word	0x24000282
 8018a04:	24000278 	.word	0x24000278
 8018a08:	24000240 	.word	0x24000240
 8018a0c:	080368c8 	.word	0x080368c8
 8018a10:	0802989c 	.word	0x0802989c
 8018a14:	080299e4 	.word	0x080299e4
 8018a18:	080299e8 	.word	0x080299e8
 8018a1c:	080299f0 	.word	0x080299f0

08018a20 <glue_authenticate>:


// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "Sarayu") == 0 && strcmp(pass, "Sarayu@123") == 0) {
 8018a2e:	4913      	ldr	r1, [pc, #76]	@ (8018a7c <glue_authenticate+0x5c>)
 8018a30:	6878      	ldr	r0, [r7, #4]
 8018a32:	f7e7 fc55 	bl	80002e0 <strcmp>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d109      	bne.n	8018a50 <glue_authenticate+0x30>
 8018a3c:	4910      	ldr	r1, [pc, #64]	@ (8018a80 <glue_authenticate+0x60>)
 8018a3e:	6838      	ldr	r0, [r7, #0]
 8018a40:	f7e7 fc4e 	bl	80002e0 <strcmp>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d102      	bne.n	8018a50 <glue_authenticate+0x30>
    level = 7;  // Administrator
 8018a4a:	2307      	movs	r3, #7
 8018a4c:	60fb      	str	r3, [r7, #12]
 8018a4e:	e00f      	b.n	8018a70 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8018a50:	490c      	ldr	r1, [pc, #48]	@ (8018a84 <glue_authenticate+0x64>)
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f7e7 fc44 	bl	80002e0 <strcmp>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d108      	bne.n	8018a70 <glue_authenticate+0x50>
 8018a5e:	4909      	ldr	r1, [pc, #36]	@ (8018a84 <glue_authenticate+0x64>)
 8018a60:	6838      	ldr	r0, [r7, #0]
 8018a62:	f7e7 fc3d 	bl	80002e0 <strcmp>
 8018a66:	4603      	mov	r3, r0
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d101      	bne.n	8018a70 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8018a6c:	2303      	movs	r3, #3
 8018a6e:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8018a70:	68fb      	ldr	r3, [r7, #12]
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	3710      	adds	r7, #16
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop
 8018a7c:	08029920 	.word	0x08029920
 8018a80:	08029a00 	.word	0x08029a00
 8018a84:	08029a0c 	.word	0x08029a0c

08018a88 <glue_check_reboot>:


// reboot
static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8018a8c:	f7f5 fcea 	bl	800e464 <mg_now>
 8018a90:	4b05      	ldr	r3, [pc, #20]	@ (8018aa8 <glue_check_reboot+0x20>)
 8018a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a96:	4290      	cmp	r0, r2
 8018a98:	eb71 0303 	sbcs.w	r3, r1, r3
 8018a9c:	bf34      	ite	cc
 8018a9e:	2301      	movcc	r3, #1
 8018aa0:	2300      	movcs	r3, #0
 8018aa2:	b2db      	uxtb	r3, r3
}
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	24003e80 	.word	0x24003e80

08018aac <glue_start_reboot>:
void glue_start_reboot(void) {
 8018aac:	b5b0      	push	{r4, r5, r7, lr}
 8018aae:	af00      	add	r7, sp, #0
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8018ab0:	f7f5 fcd8 	bl	800e464 <mg_now>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	460b      	mov	r3, r1
 8018ab8:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8018abc:	f143 0500 	adc.w	r5, r3, #0
 8018ac0:	4b02      	ldr	r3, [pc, #8]	@ (8018acc <glue_start_reboot+0x20>)
 8018ac2:	e9c3 4500 	strd	r4, r5, [r3]
}
 8018ac6:	bf00      	nop
 8018ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8018aca:	bf00      	nop
 8018acc:	24003e80 	.word	0x24003e80

08018ad0 <glue_ota_begin_firmware_update>:

// firmware_update
void  *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b084      	sub	sp, #16
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8018ada:	6838      	ldr	r0, [r7, #0]
 8018adc:	f7f4 f9d6 	bl	800ce8c <mg_ota_begin>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8018ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8018b1c <glue_ota_begin_firmware_update+0x4c>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b02      	cmp	r3, #2
 8018aea:	dd0c      	ble.n	8018b06 <glue_ota_begin_firmware_update+0x36>
 8018aec:	4b0c      	ldr	r3, [pc, #48]	@ (8018b20 <glue_ota_begin_firmware_update+0x50>)
 8018aee:	f240 121f 	movw	r2, #287	@ 0x11f
 8018af2:	490c      	ldr	r1, [pc, #48]	@ (8018b24 <glue_ota_begin_firmware_update+0x54>)
 8018af4:	2003      	movs	r0, #3
 8018af6:	f7ef f8b3 	bl	8007c60 <mg_log_prefix>
 8018afa:	7bfb      	ldrb	r3, [r7, #15]
 8018afc:	683a      	ldr	r2, [r7, #0]
 8018afe:	6879      	ldr	r1, [r7, #4]
 8018b00:	4809      	ldr	r0, [pc, #36]	@ (8018b28 <glue_ota_begin_firmware_update+0x58>)
 8018b02:	f7ef f8fd 	bl	8007d00 <mg_log>
  return ok ? (void *) 1 : NULL;
 8018b06:	7bfb      	ldrb	r3, [r7, #15]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d001      	beq.n	8018b10 <glue_ota_begin_firmware_update+0x40>
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	e000      	b.n	8018b12 <glue_ota_begin_firmware_update+0x42>
 8018b10:	2300      	movs	r3, #0
}
 8018b12:	4618      	mov	r0, r3
 8018b14:	3710      	adds	r7, #16
 8018b16:	46bd      	mov	sp, r7
 8018b18:	bd80      	pop	{r7, pc}
 8018b1a:	bf00      	nop
 8018b1c:	24000240 	.word	0x24000240
 8018b20:	080368e0 	.word	0x080368e0
 8018b24:	0802989c 	.word	0x0802989c
 8018b28:	08029a14 	.word	0x08029a14

08018b2c <glue_ota_end_firmware_update>:
bool  glue_ota_end_firmware_update(void *context) {
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b088      	sub	sp, #32
 8018b30:	af04      	add	r7, sp, #16
 8018b32:	6078      	str	r0, [r7, #4]
  bool ok = mg_ota_end();
 8018b34:	f7f4 fae8 	bl	800d108 <mg_ota_end>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("ctx: %p, success: %d", context, ok));
 8018b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8018ba8 <glue_ota_end_firmware_update+0x7c>)
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	2b02      	cmp	r3, #2
 8018b42:	dd0c      	ble.n	8018b5e <glue_ota_end_firmware_update+0x32>
 8018b44:	4b19      	ldr	r3, [pc, #100]	@ (8018bac <glue_ota_end_firmware_update+0x80>)
 8018b46:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8018b4a:	4919      	ldr	r1, [pc, #100]	@ (8018bb0 <glue_ota_end_firmware_update+0x84>)
 8018b4c:	2003      	movs	r0, #3
 8018b4e:	f7ef f887 	bl	8007c60 <mg_log_prefix>
 8018b52:	7bfb      	ldrb	r3, [r7, #15]
 8018b54:	461a      	mov	r2, r3
 8018b56:	6879      	ldr	r1, [r7, #4]
 8018b58:	4816      	ldr	r0, [pc, #88]	@ (8018bb4 <glue_ota_end_firmware_update+0x88>)
 8018b5a:	f7ef f8d1 	bl	8007d00 <mg_log>
  if (ok) {
 8018b5e:	7bfb      	ldrb	r3, [r7, #15]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d01c      	beq.n	8018b9e <glue_ota_end_firmware_update+0x72>
    MG_INFO(("Rebooting in %lu ms", WIZARD_REBOOT_TIMEOUT_MS));
 8018b64:	4b10      	ldr	r3, [pc, #64]	@ (8018ba8 <glue_ota_end_firmware_update+0x7c>)
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	2b01      	cmp	r3, #1
 8018b6a:	dd0b      	ble.n	8018b84 <glue_ota_end_firmware_update+0x58>
 8018b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8018bac <glue_ota_end_firmware_update+0x80>)
 8018b6e:	f44f 7293 	mov.w	r2, #294	@ 0x126
 8018b72:	490f      	ldr	r1, [pc, #60]	@ (8018bb0 <glue_ota_end_firmware_update+0x84>)
 8018b74:	2002      	movs	r0, #2
 8018b76:	f7ef f873 	bl	8007c60 <mg_log_prefix>
 8018b7a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8018b7e:	480e      	ldr	r0, [pc, #56]	@ (8018bb8 <glue_ota_end_firmware_update+0x8c>)
 8018b80:	f7ef f8be 	bl	8007d00 <mg_log>
    mg_timer_add(&g_mgr, WIZARD_REBOOT_TIMEOUT_MS, 0,
 8018b84:	2300      	movs	r3, #0
 8018b86:	9302      	str	r3, [sp, #8]
 8018b88:	4b0c      	ldr	r3, [pc, #48]	@ (8018bbc <glue_ota_end_firmware_update+0x90>)
 8018b8a:	9301      	str	r3, [sp, #4]
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	9300      	str	r3, [sp, #0]
 8018b90:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8018b94:	f04f 0300 	mov.w	r3, #0
 8018b98:	4809      	ldr	r0, [pc, #36]	@ (8018bc0 <glue_ota_end_firmware_update+0x94>)
 8018b9a:	f7f0 fe35 	bl	8009808 <mg_timer_add>
      (void(*)(void *)) mg_device_reset, NULL);
  }
  return ok;
 8018b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	3710      	adds	r7, #16
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd80      	pop	{r7, pc}
 8018ba8:	24000240 	.word	0x24000240
 8018bac:	08036900 	.word	0x08036900
 8018bb0:	0802989c 	.word	0x0802989c
 8018bb4:	08029a28 	.word	0x08029a28
 8018bb8:	08029a40 	.word	0x08029a40
 8018bbc:	08026fe9 	.word	0x08026fe9
 8018bc0:	24003e88 	.word	0x24003e88

08018bc4 <glue_ota_write_firmware_update>:
bool  glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b084      	sub	sp, #16
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	60f8      	str	r0, [r7, #12]
 8018bcc:	60b9      	str	r1, [r7, #8]
 8018bce:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8018bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8018c04 <glue_ota_write_firmware_update+0x40>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	2b02      	cmp	r3, #2
 8018bd6:	dd0c      	ble.n	8018bf2 <glue_ota_write_firmware_update+0x2e>
 8018bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8018c08 <glue_ota_write_firmware_update+0x44>)
 8018bda:	f240 122d 	movw	r2, #301	@ 0x12d
 8018bde:	490b      	ldr	r1, [pc, #44]	@ (8018c0c <glue_ota_write_firmware_update+0x48>)
 8018be0:	2003      	movs	r0, #3
 8018be2:	f7ef f83d 	bl	8007c60 <mg_log_prefix>
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	68ba      	ldr	r2, [r7, #8]
 8018bea:	68f9      	ldr	r1, [r7, #12]
 8018bec:	4808      	ldr	r0, [pc, #32]	@ (8018c10 <glue_ota_write_firmware_update+0x4c>)
 8018bee:	f7ef f887 	bl	8007d00 <mg_log>
  return mg_ota_write(buf, len);
 8018bf2:	6879      	ldr	r1, [r7, #4]
 8018bf4:	68b8      	ldr	r0, [r7, #8]
 8018bf6:	f7f4 f9cb 	bl	800cf90 <mg_ota_write>
 8018bfa:	4603      	mov	r3, r0
}
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	3710      	adds	r7, #16
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}
 8018c04:	24000240 	.word	0x24000240
 8018c08:	08036920 	.word	0x08036920
 8018c0c:	0802989c 	.word	0x0802989c
 8018c10:	08029a54 	.word	0x08029a54

08018c14 <glue_file_open_file_upload>:

// file_upload
void  *glue_file_open_file_upload(char *file_name, size_t total_size) {
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b0a4      	sub	sp, #144	@ 0x90
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
 8018c1c:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 8018c1e:	2300      	movs	r3, #0
 8018c20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8018c24:	2300      	movs	r3, #0
 8018c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 8018c2a:	212f      	movs	r1, #47	@ 0x2f
 8018c2c:	6878      	ldr	r0, [r7, #4]
 8018c2e:	f00a fd63 	bl	80236f8 <strrchr>
 8018c32:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8018c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d102      	bne.n	8018c44 <glue_file_open_file_upload+0x30>
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8018c44:	f107 0008 	add.w	r0, r7, #8
 8018c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8018c88 <glue_file_open_file_upload+0x74>)
 8018c4e:	2180      	movs	r1, #128	@ 0x80
 8018c50:	f7f4 fbbc 	bl	800d3cc <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8018c54:	4b0d      	ldr	r3, [pc, #52]	@ (8018c8c <glue_file_open_file_upload+0x78>)
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2b02      	cmp	r3, #2
 8018c5a:	dd0e      	ble.n	8018c7a <glue_file_open_file_upload+0x66>
 8018c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8018c90 <glue_file_open_file_upload+0x7c>)
 8018c5e:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8018c62:	490c      	ldr	r1, [pc, #48]	@ (8018c94 <glue_file_open_file_upload+0x80>)
 8018c64:	2003      	movs	r0, #3
 8018c66:	f7ee fffb 	bl	8007c60 <mg_log_prefix>
 8018c6a:	f107 0108 	add.w	r1, r7, #8
 8018c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018c72:	683a      	ldr	r2, [r7, #0]
 8018c74:	4808      	ldr	r0, [pc, #32]	@ (8018c98 <glue_file_open_file_upload+0x84>)
 8018c76:	f7ef f843 	bl	8007d00 <mg_log>
  return fp;
 8018c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8018c7e:	4618      	mov	r0, r3
 8018c80:	3790      	adds	r7, #144	@ 0x90
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}
 8018c86:	bf00      	nop
 8018c88:	08029a64 	.word	0x08029a64
 8018c8c:	24000240 	.word	0x24000240
 8018c90:	08036940 	.word	0x08036940
 8018c94:	0802989c 	.word	0x0802989c
 8018c98:	08029a6c 	.word	0x08029a6c

08018c9c <glue_file_close_file_upload>:
bool  glue_file_close_file_upload(void *fp) {
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 8018ca4:	4b09      	ldr	r3, [pc, #36]	@ (8018ccc <glue_file_close_file_upload+0x30>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2b02      	cmp	r3, #2
 8018caa:	dd0a      	ble.n	8018cc2 <glue_file_close_file_upload+0x26>
 8018cac:	4b08      	ldr	r3, [pc, #32]	@ (8018cd0 <glue_file_close_file_upload+0x34>)
 8018cae:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 8018cb2:	4908      	ldr	r1, [pc, #32]	@ (8018cd4 <glue_file_close_file_upload+0x38>)
 8018cb4:	2003      	movs	r0, #3
 8018cb6:	f7ee ffd3 	bl	8007c60 <mg_log_prefix>
 8018cba:	6879      	ldr	r1, [r7, #4]
 8018cbc:	4806      	ldr	r0, [pc, #24]	@ (8018cd8 <glue_file_close_file_upload+0x3c>)
 8018cbe:	f7ef f81f 	bl	8007d00 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 8018cc2:	2300      	movs	r3, #0
#endif
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	24000240 	.word	0x24000240
 8018cd0:	0803695c 	.word	0x0803695c
 8018cd4:	0802989c 	.word	0x0802989c
 8018cd8:	08029a8c 	.word	0x08029a8c

08018cdc <glue_file_write_file_upload>:
bool  glue_file_write_file_upload(void *fp, void *buf, size_t len) {
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b084      	sub	sp, #16
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	60f8      	str	r0, [r7, #12]
 8018ce4:	60b9      	str	r1, [r7, #8]
 8018ce6:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 8018ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8018d14 <glue_file_write_file_upload+0x38>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b02      	cmp	r3, #2
 8018cee:	dd0c      	ble.n	8018d0a <glue_file_write_file_upload+0x2e>
 8018cf0:	4b09      	ldr	r3, [pc, #36]	@ (8018d18 <glue_file_write_file_upload+0x3c>)
 8018cf2:	f44f 72a3 	mov.w	r2, #326	@ 0x146
 8018cf6:	4909      	ldr	r1, [pc, #36]	@ (8018d1c <glue_file_write_file_upload+0x40>)
 8018cf8:	2003      	movs	r0, #3
 8018cfa:	f7ee ffb1 	bl	8007c60 <mg_log_prefix>
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	68ba      	ldr	r2, [r7, #8]
 8018d02:	68f9      	ldr	r1, [r7, #12]
 8018d04:	4806      	ldr	r0, [pc, #24]	@ (8018d20 <glue_file_write_file_upload+0x44>)
 8018d06:	f7ee fffb 	bl	8007d00 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8018d0a:	2300      	movs	r3, #0
#endif
}
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	3710      	adds	r7, #16
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	24000240 	.word	0x24000240
 8018d18:	08036978 	.word	0x08036978
 8018d1c:	0802989c 	.word	0x0802989c
 8018d20:	08029a98 	.word	0x08029a98

08018d24 <glue_graph_get_graph1>:

// graph1
size_t glue_graph_get_graph1(uint32_t from, uint32_t to,
                              uint32_t *x_values, double *y_values, size_t len) {
 8018d24:	b5b0      	push	{r4, r5, r7, lr}
 8018d26:	b0a4      	sub	sp, #144	@ 0x90
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	60f8      	str	r0, [r7, #12]
 8018d2c:	60b9      	str	r1, [r7, #8]
 8018d2e:	607a      	str	r2, [r7, #4]
 8018d30:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8018d32:	2300      	movs	r3, #0
 8018d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t timestamps[] = {1724576787,1724576847,1724576907,1724576967,1724577027,1724577087,1724577147,1724577207,1724577267,1724577327};  // Those are example values
 8018d38:	4b25      	ldr	r3, [pc, #148]	@ (8018dd0 <glue_graph_get_graph1+0xac>)
 8018d3a:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8018d3e:	461d      	mov	r5, r3
 8018d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d4c:	e884 0003 	stmia.w	r4, {r0, r1}
  double values[] = {20.3,27.2,29.7,27.9,25.1,23.8,22.5,22.2,23.3,23.9};  // Use real device data
 8018d50:	4a20      	ldr	r2, [pc, #128]	@ (8018dd4 <glue_graph_get_graph1+0xb0>)
 8018d52:	f107 0310 	add.w	r3, r7, #16
 8018d56:	4611      	mov	r1, r2
 8018d58:	2250      	movs	r2, #80	@ 0x50
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f00a fd87 	bl	802386e <memcpy>
  for (i = 0; i < len; i++) {
 8018d60:	2300      	movs	r3, #0
 8018d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8018d66:	e024      	b.n	8018db2 <glue_graph_get_graph1+0x8e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 8018d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018d6c:	2b09      	cmp	r3, #9
 8018d6e:	d827      	bhi.n	8018dc0 <glue_graph_get_graph1+0x9c>
    x_values[i] = timestamps[i];
 8018d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018d74:	009b      	lsls	r3, r3, #2
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	441a      	add	r2, r3
 8018d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018d7e:	009b      	lsls	r3, r3, #2
 8018d80:	3390      	adds	r3, #144	@ 0x90
 8018d82:	443b      	add	r3, r7
 8018d84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8018d88:	6013      	str	r3, [r2, #0]
    y_values[i] = values[i];
 8018d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018d8e:	00db      	lsls	r3, r3, #3
 8018d90:	683a      	ldr	r2, [r7, #0]
 8018d92:	18d1      	adds	r1, r2, r3
 8018d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018d98:	00db      	lsls	r3, r3, #3
 8018d9a:	3390      	adds	r3, #144	@ 0x90
 8018d9c:	443b      	add	r3, r7
 8018d9e:	3b80      	subs	r3, #128	@ 0x80
 8018da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da4:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < len; i++) {
 8018da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018dac:	3301      	adds	r3, #1
 8018dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8018db2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8018db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018dba:	429a      	cmp	r2, r3
 8018dbc:	d3d4      	bcc.n	8018d68 <glue_graph_get_graph1+0x44>
 8018dbe:	e000      	b.n	8018dc2 <glue_graph_get_graph1+0x9e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 8018dc0:	bf00      	nop
  }
  (void) from, (void) to;
  return i;
 8018dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	3790      	adds	r7, #144	@ 0x90
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	08029ab4 	.word	0x08029ab4
 8018dd4:	08029ae0 	.word	0x08029ae0

08018dd8 <glue_get_state>:

static struct state s_state = {42, 27, 70, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 8018dd8:	b4b0      	push	{r4, r5, r7}
 8018dda:	b083      	sub	sp, #12
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	4a08      	ldr	r2, [pc, #32]	@ (8018e04 <glue_get_state+0x2c>)
 8018de4:	461c      	mov	r4, r3
 8018de6:	4615      	mov	r5, r2
 8018de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018df0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018df8:	bf00      	nop
 8018dfa:	370c      	adds	r7, #12
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bcb0      	pop	{r4, r5, r7}
 8018e00:	4770      	bx	lr
 8018e02:	bf00      	nop
 8018e04:	24000284 	.word	0x24000284

08018e08 <glue_set_state>:
void glue_set_state(struct state *data) {
 8018e08:	b4b0      	push	{r4, r5, r7}
 8018e0a:	b083      	sub	sp, #12
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
  s_state = *data; // Sync with your device
 8018e10:	4a08      	ldr	r2, [pc, #32]	@ (8018e34 <glue_set_state+0x2c>)
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	4614      	mov	r4, r2
 8018e16:	461d      	mov	r5, r3
 8018e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018e28:	bf00      	nop
 8018e2a:	370c      	adds	r7, #12
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bcb0      	pop	{r4, r5, r7}
 8018e30:	4770      	bx	lr
 8018e32:	bf00      	nop
 8018e34:	24000284 	.word	0x24000284

08018e38 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8018e38:	b480      	push	{r7}
 8018e3a:	b083      	sub	sp, #12
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	4a05      	ldr	r2, [pc, #20]	@ (8018e58 <glue_get_leds+0x20>)
 8018e44:	8811      	ldrh	r1, [r2, #0]
 8018e46:	7892      	ldrb	r2, [r2, #2]
 8018e48:	8019      	strh	r1, [r3, #0]
 8018e4a:	709a      	strb	r2, [r3, #2]
}
 8018e4c:	bf00      	nop
 8018e4e:	370c      	adds	r7, #12
 8018e50:	46bd      	mov	sp, r7
 8018e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e56:	4770      	bx	lr
 8018e58:	240002b0 	.word	0x240002b0

08018e5c <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 8018e5c:	b480      	push	{r7}
 8018e5e:	b083      	sub	sp, #12
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 8018e64:	4b05      	ldr	r3, [pc, #20]	@ (8018e7c <glue_set_leds+0x20>)
 8018e66:	687a      	ldr	r2, [r7, #4]
 8018e68:	8811      	ldrh	r1, [r2, #0]
 8018e6a:	7892      	ldrb	r2, [r2, #2]
 8018e6c:	8019      	strh	r1, [r3, #0]
 8018e6e:	709a      	strb	r2, [r3, #2]
}
 8018e70:	bf00      	nop
 8018e72:	370c      	adds	r7, #12
 8018e74:	46bd      	mov	sp, r7
 8018e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7a:	4770      	bx	lr
 8018e7c:	240002b0 	.word	0x240002b0

08018e80 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", 2, 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 8018e80:	b4b0      	push	{r4, r5, r7}
 8018e82:	b083      	sub	sp, #12
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	4a09      	ldr	r2, [pc, #36]	@ (8018eb0 <glue_get_settings+0x30>)
 8018e8c:	461c      	mov	r4, r3
 8018e8e:	4615      	mov	r5, r2
 8018e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8018ea4:	bf00      	nop
 8018ea6:	370c      	adds	r7, #12
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bcb0      	pop	{r4, r5, r7}
 8018eac:	4770      	bx	lr
 8018eae:	bf00      	nop
 8018eb0:	240002b8 	.word	0x240002b8

08018eb4 <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 8018eb4:	b4b0      	push	{r4, r5, r7}
 8018eb6:	b083      	sub	sp, #12
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8018ebc:	4a09      	ldr	r2, [pc, #36]	@ (8018ee4 <glue_set_settings+0x30>)
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	4614      	mov	r4, r2
 8018ec2:	461d      	mov	r5, r3
 8018ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ed0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8018ed8:	bf00      	nop
 8018eda:	370c      	adds	r7, #12
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bcb0      	pop	{r4, r5, r7}
 8018ee0:	4770      	bx	lr
 8018ee2:	bf00      	nop
 8018ee4:	240002b8 	.word	0x240002b8

08018ee8 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b082      	sub	sp, #8
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	4a05      	ldr	r2, [pc, #20]	@ (8018f08 <glue_get_security+0x20>)
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	4611      	mov	r1, r2
 8018ef8:	2350      	movs	r3, #80	@ 0x50
 8018efa:	461a      	mov	r2, r3
 8018efc:	f00a fcb7 	bl	802386e <memcpy>
}
 8018f00:	bf00      	nop
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	240002f8 	.word	0x240002f8

08018f0c <glue_set_security>:
void glue_set_security(struct security *data) {
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b082      	sub	sp, #8
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 8018f14:	4a05      	ldr	r2, [pc, #20]	@ (8018f2c <glue_set_security+0x20>)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	4610      	mov	r0, r2
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	2350      	movs	r3, #80	@ 0x50
 8018f1e:	461a      	mov	r2, r3
 8018f20:	f00a fca5 	bl	802386e <memcpy>
}
 8018f24:	bf00      	nop
 8018f26:	3708      	adds	r7, #8
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bd80      	pop	{r7, pc}
 8018f2c:	240002f8 	.word	0x240002f8

08018f30 <find_handler>:
  {"settings", "object", false, 3, 7, 0UL, s_settings_attributes, (void (*)(void *)) glue_get_settings, (void (*)(void *)) glue_set_settings, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct settings)},
  {"security", "object", false, 7, 7, 0UL, s_security_attributes, (void (*)(void *)) glue_get_security, (void (*)(void *)) glue_set_security, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct security)},
  {"events", "array", false, 0, 0, 0UL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0}
};

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8018f30:	b590      	push	{r4, r7, lr}
 8018f32:	b089      	sub	sp, #36	@ 0x24
 8018f34:	af02      	add	r7, sp, #8
 8018f36:	6078      	str	r0, [r7, #4]
  size_t i;
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	68db      	ldr	r3, [r3, #12]
 8018f3c:	2b05      	cmp	r3, #5
 8018f3e:	d909      	bls.n	8018f54 <find_handler+0x24>
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	689b      	ldr	r3, [r3, #8]
 8018f44:	2205      	movs	r2, #5
 8018f46:	4932      	ldr	r1, [pc, #200]	@ (8019010 <find_handler+0xe0>)
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f00a fbb0 	bl	80236ae <strncmp>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d001      	beq.n	8018f58 <find_handler+0x28>
 8018f54:	2300      	movs	r3, #0
 8018f56:	e056      	b.n	8019006 <find_handler+0xd6>
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 8018f58:	2300      	movs	r3, #0
 8018f5a:	617b      	str	r3, [r7, #20]
 8018f5c:	e04f      	b.n	8018ffe <find_handler+0xce>
    struct apihandler *h = &s_apihandlers[i];
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	019b      	lsls	r3, r3, #6
 8018f62:	4a2c      	ldr	r2, [pc, #176]	@ (8019014 <find_handler+0xe4>)
 8018f64:	4413      	add	r3, r2
 8018f66:	613b      	str	r3, [r7, #16]
    size_t n = strlen(h->name);
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f7e7 fa17 	bl	80003a0 <strlen>
 8018f72:	60f8      	str	r0, [r7, #12]
    if (n + 5 > hm->uri.len) continue;
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	1d5a      	adds	r2, r3, #5
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	68db      	ldr	r3, [r3, #12]
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	d836      	bhi.n	8018fee <find_handler+0xbe>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	689b      	ldr	r3, [r3, #8]
 8018f84:	1d58      	adds	r0, r3, #5
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	68fa      	ldr	r2, [r7, #12]
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	f00a fb8e 	bl	80236ae <strncmp>
 8018f92:	4603      	mov	r3, r0
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d12c      	bne.n	8018ff2 <find_handler+0xc2>
    MG_INFO(("%.*s %s %lu %lu", hm->uri.len, hm->uri.buf, h->name, n + 5,
 8018f98:	4b1f      	ldr	r3, [pc, #124]	@ (8019018 <find_handler+0xe8>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	2b01      	cmp	r3, #1
 8018f9e:	dd16      	ble.n	8018fce <find_handler+0x9e>
 8018fa0:	4b1e      	ldr	r3, [pc, #120]	@ (801901c <find_handler+0xec>)
 8018fa2:	2282      	movs	r2, #130	@ 0x82
 8018fa4:	491e      	ldr	r1, [pc, #120]	@ (8019020 <find_handler+0xf0>)
 8018fa6:	2002      	movs	r0, #2
 8018fa8:	f7ee fe5a 	bl	8007c60 <mg_log_prefix>
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	68d9      	ldr	r1, [r3, #12]
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6898      	ldr	r0, [r3, #8]
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	681c      	ldr	r4, [r3, #0]
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	3305      	adds	r3, #5
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	68d2      	ldr	r2, [r2, #12]
 8018fc0:	9201      	str	r2, [sp, #4]
 8018fc2:	9300      	str	r3, [sp, #0]
 8018fc4:	4623      	mov	r3, r4
 8018fc6:	4602      	mov	r2, r0
 8018fc8:	4816      	ldr	r0, [pc, #88]	@ (8019024 <find_handler+0xf4>)
 8018fca:	f7ee fe99 	bl	8007d00 <mg_log>
             hm->uri.len));
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	1d5a      	adds	r2, r3, #5
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	68db      	ldr	r3, [r3, #12]
 8018fd6:	429a      	cmp	r2, r3
 8018fd8:	d207      	bcs.n	8018fea <find_handler+0xba>
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	689a      	ldr	r2, [r3, #8]
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	3305      	adds	r3, #5
 8018fe2:	4413      	add	r3, r2
 8018fe4:	781b      	ldrb	r3, [r3, #0]
 8018fe6:	2b2f      	cmp	r3, #47	@ 0x2f
 8018fe8:	d105      	bne.n	8018ff6 <find_handler+0xc6>
    return h;
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	e00b      	b.n	8019006 <find_handler+0xd6>
    if (n + 5 > hm->uri.len) continue;
 8018fee:	bf00      	nop
 8018ff0:	e002      	b.n	8018ff8 <find_handler+0xc8>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 8018ff2:	bf00      	nop
 8018ff4:	e000      	b.n	8018ff8 <find_handler+0xc8>
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 8018ff6:	bf00      	nop
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 8018ff8:	697b      	ldr	r3, [r7, #20]
 8018ffa:	3301      	adds	r3, #1
 8018ffc:	617b      	str	r3, [r7, #20]
 8018ffe:	697b      	ldr	r3, [r7, #20]
 8019000:	2b08      	cmp	r3, #8
 8019002:	d9ac      	bls.n	8018f5e <find_handler+0x2e>
  }
  return NULL;
 8019004:	2300      	movs	r3, #0
}
 8019006:	4618      	mov	r0, r3
 8019008:	371c      	adds	r7, #28
 801900a:	46bd      	mov	sp, r7
 801900c:	bd90      	pop	{r4, r7, pc}
 801900e:	bf00      	nop
 8019010:	08029c94 	.word	0x08029c94
 8019014:	24000558 	.word	0x24000558
 8019018:	24000240 	.word	0x24000240
 801901c:	08036994 	.word	0x08036994
 8019020:	08029c9c 	.word	0x08029c9c
 8019024:	08029cb8 	.word	0x08029cb8

08019028 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8019028:	b590      	push	{r4, r7, lr}
 801902a:	b089      	sub	sp, #36	@ 0x24
 801902c:	af00      	add	r7, sp, #0
 801902e:	f107 0408 	add.w	r4, r7, #8
 8019032:	e884 0003 	stmia.w	r4, {r0, r1}
 8019036:	607a      	str	r2, [r7, #4]
 8019038:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 801903a:	f107 0010 	add.w	r0, r7, #16
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f107 0208 	add.w	r2, r7, #8
 8019044:	ca06      	ldmia	r2, {r1, r2}
 8019046:	f7ee fc85 	bl	8007954 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 801904a:	697b      	ldr	r3, [r7, #20]
 801904c:	2b01      	cmp	r3, #1
 801904e:	d913      	bls.n	8019078 <mg_json_get_str2+0x50>
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	2b22      	cmp	r3, #34	@ 0x22
 8019056:	d10f      	bne.n	8019078 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	1c59      	adds	r1, r3, #1
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	1e9a      	subs	r2, r3, #2
 8019060:	f107 0318 	add.w	r3, r7, #24
 8019064:	4618      	mov	r0, r3
 8019066:	f7f5 fce0 	bl	800ea2a <mg_str_n>
 801906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801906c:	683a      	ldr	r2, [r7, #0]
 801906e:	f107 0118 	add.w	r1, r7, #24
 8019072:	c903      	ldmia	r1, {r0, r1}
 8019074:	f7ee fd14 	bl	8007aa0 <mg_json_unescape>
  }
}
 8019078:	bf00      	nop
 801907a:	3724      	adds	r7, #36	@ 0x24
 801907c:	46bd      	mov	sp, r7
 801907e:	bd90      	pop	{r4, r7, pc}

08019080 <authenticate>:
};

static struct user *s_users;  // List of authenticated users

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8019080:	b580      	push	{r7, lr}
 8019082:	b0ba      	sub	sp, #232	@ 0xe8
 8019084:	af02      	add	r7, sp, #8
 8019086:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8019088:	2300      	movs	r3, #0
 801908a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 801908e:	f107 030c 	add.w	r3, r7, #12
 8019092:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8019096:	2264      	movs	r2, #100	@ 0x64
 8019098:	9200      	str	r2, [sp, #0]
 801909a:	2264      	movs	r2, #100	@ 0x64
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	f7ec ffb7 	bl	8006010 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 80190a2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d06e      	beq.n	8019188 <authenticate+0x108>
 80190aa:	7b3b      	ldrb	r3, [r7, #12]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d06b      	beq.n	8019188 <authenticate+0x108>
    // Both user and password is set, auth by user/password via glue API
    int level = glue_authenticate(user, pass);
 80190b0:	f107 020c 	add.w	r2, r7, #12
 80190b4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80190b8:	4611      	mov	r1, r2
 80190ba:	4618      	mov	r0, r3
 80190bc:	f7ff fcb0 	bl	8018a20 <glue_authenticate>
 80190c0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 80190c4:	4b55      	ldr	r3, [pc, #340]	@ (801921c <authenticate+0x19c>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	2b02      	cmp	r3, #2
 80190ca:	dd0d      	ble.n	80190e8 <authenticate+0x68>
 80190cc:	4b54      	ldr	r3, [pc, #336]	@ (8019220 <authenticate+0x1a0>)
 80190ce:	22a6      	movs	r2, #166	@ 0xa6
 80190d0:	4954      	ldr	r1, [pc, #336]	@ (8019224 <authenticate+0x1a4>)
 80190d2:	2003      	movs	r0, #3
 80190d4:	f7ee fdc4 	bl	8007c60 <mg_log_prefix>
 80190d8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80190dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80190e0:	4619      	mov	r1, r3
 80190e2:	4851      	ldr	r0, [pc, #324]	@ (8019228 <authenticate+0x1a8>)
 80190e4:	f7ee fe0c 	bl	8007d00 <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 80190e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	dd75      	ble.n	80191dc <authenticate+0x15c>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80190f0:	4b4e      	ldr	r3, [pc, #312]	@ (801922c <authenticate+0x1ac>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80190f8:	e014      	b.n	8019124 <authenticate+0xa4>
        if (strcmp(user, u->name) == 0) result = u;
 80190fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80190fe:	1d1a      	adds	r2, r3, #4
 8019100:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019104:	4611      	mov	r1, r2
 8019106:	4618      	mov	r0, r3
 8019108:	f7e7 f8ea 	bl	80002e0 <strcmp>
 801910c:	4603      	mov	r3, r0
 801910e:	2b00      	cmp	r3, #0
 8019110:	d103      	bne.n	801911a <authenticate+0x9a>
 8019112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 801911a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8019124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019128:	2b00      	cmp	r3, #0
 801912a:	d003      	beq.n	8019134 <authenticate+0xb4>
 801912c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019130:	2b00      	cmp	r3, #0
 8019132:	d0e2      	beq.n	80190fa <authenticate+0x7a>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 8019134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019138:	2b00      	cmp	r3, #0
 801913a:	d14f      	bne.n	80191dc <authenticate+0x15c>
        result = (struct user *) calloc(1, sizeof(*result));
 801913c:	2140      	movs	r1, #64	@ 0x40
 801913e:	2001      	movs	r0, #1
 8019140:	f009 f824 	bl	802218c <calloc>
 8019144:	4603      	mov	r3, r0
 8019146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 801914a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801914e:	1d18      	adds	r0, r3, #4
 8019150:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019154:	4a36      	ldr	r2, [pc, #216]	@ (8019230 <authenticate+0x1b0>)
 8019156:	2120      	movs	r1, #32
 8019158:	f7f4 f938 	bl	800d3cc <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 801915c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019160:	3324      	adds	r3, #36	@ 0x24
 8019162:	2114      	movs	r1, #20
 8019164:	4618      	mov	r0, r3
 8019166:	f7fe fa9f 	bl	80176a8 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 801916a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801916e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8019172:	63da      	str	r2, [r3, #60]	@ 0x3c
 8019174:	4b2d      	ldr	r3, [pc, #180]	@ (801922c <authenticate+0x1ac>)
 8019176:	681a      	ldr	r2, [r3, #0]
 8019178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801917c:	601a      	str	r2, [r3, #0]
 801917e:	4a2b      	ldr	r2, [pc, #172]	@ (801922c <authenticate+0x1ac>)
 8019180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019184:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 8019186:	e029      	b.n	80191dc <authenticate+0x15c>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8019188:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 801918c:	2b00      	cmp	r3, #0
 801918e:	d126      	bne.n	80191de <authenticate+0x15e>
 8019190:	7b3b      	ldrb	r3, [r7, #12]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d023      	beq.n	80191de <authenticate+0x15e>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8019196:	4b25      	ldr	r3, [pc, #148]	@ (801922c <authenticate+0x1ac>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801919e:	e014      	b.n	80191ca <authenticate+0x14a>
      if (strcmp(u->token, pass) == 0) result = u;
 80191a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80191a4:	3324      	adds	r3, #36	@ 0x24
 80191a6:	f107 020c 	add.w	r2, r7, #12
 80191aa:	4611      	mov	r1, r2
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7e7 f897 	bl	80002e0 <strcmp>
 80191b2:	4603      	mov	r3, r0
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d103      	bne.n	80191c0 <authenticate+0x140>
 80191b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80191bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80191c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80191ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d005      	beq.n	80191de <authenticate+0x15e>
 80191d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d0e2      	beq.n	80191a0 <authenticate+0x120>
 80191da:	e000      	b.n	80191de <authenticate+0x15e>
  if (user[0] != '\0' && pass[0] != '\0') {
 80191dc:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 80191de:	4b0f      	ldr	r3, [pc, #60]	@ (801921c <authenticate+0x19c>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	2b03      	cmp	r3, #3
 80191e4:	dd13      	ble.n	801920e <authenticate+0x18e>
 80191e6:	4b0e      	ldr	r3, [pc, #56]	@ (8019220 <authenticate+0x1a0>)
 80191e8:	22b9      	movs	r2, #185	@ 0xb9
 80191ea:	490e      	ldr	r1, [pc, #56]	@ (8019224 <authenticate+0x1a4>)
 80191ec:	2004      	movs	r0, #4
 80191ee:	f7ee fd37 	bl	8007c60 <mg_log_prefix>
 80191f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d001      	beq.n	80191fe <authenticate+0x17e>
 80191fa:	4b0e      	ldr	r3, [pc, #56]	@ (8019234 <authenticate+0x1b4>)
 80191fc:	e000      	b.n	8019200 <authenticate+0x180>
 80191fe:	4b0e      	ldr	r3, [pc, #56]	@ (8019238 <authenticate+0x1b8>)
 8019200:	f107 020c 	add.w	r2, r7, #12
 8019204:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8019208:	480c      	ldr	r0, [pc, #48]	@ (801923c <authenticate+0x1bc>)
 801920a:	f7ee fd79 	bl	8007d00 <mg_log>
  return result;
 801920e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 8019212:	4618      	mov	r0, r3
 8019214:	37e0      	adds	r7, #224	@ 0xe0
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	24000240 	.word	0x24000240
 8019220:	080369a4 	.word	0x080369a4
 8019224:	08029c9c 	.word	0x08029c9c
 8019228:	08029cc8 	.word	0x08029cc8
 801922c:	24003ed4 	.word	0x24003ed4
 8019230:	08029cdc 	.word	0x08029cdc
 8019234:	08029ce0 	.word	0x08029ce0
 8019238:	08029ce4 	.word	0x08029ce4
 801923c:	08029cec 	.word	0x08029cec

08019240 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8019240:	b580      	push	{r7, lr}
 8019242:	b0cc      	sub	sp, #304	@ 0x130
 8019244:	af0a      	add	r7, sp, #40	@ 0x28
 8019246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801924a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801924e:	6018      	str	r0, [r3, #0]
 8019250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8019258:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 801925a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801925e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8019268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801926c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801927a:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 801927c:	2b00      	cmp	r3, #0
 801927e:	d001      	beq.n	8019284 <handle_login+0x44>
 8019280:	4b1e      	ldr	r3, [pc, #120]	@ (80192fc <handle_login+0xbc>)
 8019282:	e000      	b.n	8019286 <handle_login+0x46>
 8019284:	4b1e      	ldr	r3, [pc, #120]	@ (8019300 <handle_login+0xc0>)
 8019286:	f107 0008 	add.w	r0, r7, #8
 801928a:	491e      	ldr	r1, [pc, #120]	@ (8019304 <handle_login+0xc4>)
 801928c:	9101      	str	r1, [sp, #4]
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	4613      	mov	r3, r2
 8019292:	4a1d      	ldr	r2, [pc, #116]	@ (8019308 <handle_login+0xc8>)
 8019294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019298:	f7f4 f898 	bl	800d3cc <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
                MG_ESC("user"), MG_ESC(u->name),  //
 801929c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80192a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
 80192a8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80192ac:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80192b0:	6812      	ldr	r2, [r2, #0]
 80192b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80192b4:	f107 0108 	add.w	r1, r7, #8
 80192b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80192bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80192c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80192c2:	4a12      	ldr	r2, [pc, #72]	@ (801930c <handle_login+0xcc>)
 80192c4:	9208      	str	r2, [sp, #32]
 80192c6:	2200      	movs	r2, #0
 80192c8:	9207      	str	r2, [sp, #28]
 80192ca:	4a11      	ldr	r2, [pc, #68]	@ (8019310 <handle_login+0xd0>)
 80192cc:	9206      	str	r2, [sp, #24]
 80192ce:	9305      	str	r3, [sp, #20]
 80192d0:	2300      	movs	r3, #0
 80192d2:	9304      	str	r3, [sp, #16]
 80192d4:	4b0e      	ldr	r3, [pc, #56]	@ (8019310 <handle_login+0xd0>)
 80192d6:	9303      	str	r3, [sp, #12]
 80192d8:	4b0e      	ldr	r3, [pc, #56]	@ (8019314 <handle_login+0xd4>)
 80192da:	9302      	str	r3, [sp, #8]
 80192dc:	2300      	movs	r3, #0
 80192de:	9301      	str	r3, [sp, #4]
 80192e0:	4b0b      	ldr	r3, [pc, #44]	@ (8019310 <handle_login+0xd0>)
 80192e2:	9300      	str	r3, [sp, #0]
 80192e4:	4b0c      	ldr	r3, [pc, #48]	@ (8019318 <handle_login+0xd8>)
 80192e6:	460a      	mov	r2, r1
 80192e8:	21c8      	movs	r1, #200	@ 0xc8
 80192ea:	6800      	ldr	r0, [r0, #0]
 80192ec:	f7eb ff1a 	bl	8005124 <mg_http_reply>
                MG_ESC("level"), u->level);
}
 80192f0:	bf00      	nop
 80192f2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}
 80192fa:	bf00      	nop
 80192fc:	08029cfc 	.word	0x08029cfc
 8019300:	08029d08 	.word	0x08029d08
 8019304:	00015180 	.word	0x00015180
 8019308:	08029d0c 	.word	0x08029d0c
 801930c:	08029b84 	.word	0x08029b84
 8019310:	0800d859 	.word	0x0800d859
 8019314:	08029d68 	.word	0x08029d68
 8019318:	08029d58 	.word	0x08029d58

0801931c <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 801931c:	b580      	push	{r7, lr}
 801931e:	b0c2      	sub	sp, #264	@ 0x108
 8019320:	af00      	add	r7, sp, #0
 8019322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801932a:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 801932c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801933a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801933e:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8019340:	2b00      	cmp	r3, #0
 8019342:	d001      	beq.n	8019348 <handle_logout+0x2c>
 8019344:	4b0d      	ldr	r3, [pc, #52]	@ (801937c <handle_logout+0x60>)
 8019346:	e000      	b.n	801934a <handle_logout+0x2e>
 8019348:	4b0d      	ldr	r3, [pc, #52]	@ (8019380 <handle_logout+0x64>)
 801934a:	f107 0008 	add.w	r0, r7, #8
 801934e:	4a0d      	ldr	r2, [pc, #52]	@ (8019384 <handle_logout+0x68>)
 8019350:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019354:	f7f4 f83a 	bl	800d3cc <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8019358:	f107 0208 	add.w	r2, r7, #8
 801935c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019360:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8019364:	4b08      	ldr	r3, [pc, #32]	@ (8019388 <handle_logout+0x6c>)
 8019366:	f240 1191 	movw	r1, #401	@ 0x191
 801936a:	6800      	ldr	r0, [r0, #0]
 801936c:	f7eb feda 	bl	8005124 <mg_http_reply>
}
 8019370:	bf00      	nop
 8019372:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}
 801937a:	bf00      	nop
 801937c:	08029cfc 	.word	0x08029cfc
 8019380:	08029d08 	.word	0x08029d08
 8019384:	08029d70 	.word	0x08029d70
 8019388:	08029dd4 	.word	0x08029dd4

0801938c <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 801938c:	b580      	push	{r7, lr}
 801938e:	b082      	sub	sp, #8
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2200      	movs	r2, #0
 8019398:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	691b      	ldr	r3, [r3, #16]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d00c      	beq.n	80193bc <close_uploaded_file+0x30>
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	68db      	ldr	r3, [r3, #12]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d008      	beq.n	80193bc <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	691b      	ldr	r3, [r3, #16]
 80193ae:	687a      	ldr	r2, [r7, #4]
 80193b0:	68d2      	ldr	r2, [r2, #12]
 80193b2:	4610      	mov	r0, r2
 80193b4:	4798      	blx	r3
    us->fp = NULL;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	2200      	movs	r2, #0
 80193ba:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 80193bc:	2218      	movs	r2, #24
 80193be:	2100      	movs	r1, #0
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f00a f95f 	bl	8023684 <memset>
}
 80193c6:	bf00      	nop
 80193c8:	3708      	adds	r7, #8
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}
	...

080193d0 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 80193d0:	b590      	push	{r4, r7, lr}
 80193d2:	b08d      	sub	sp, #52	@ 0x34
 80193d4:	af04      	add	r7, sp, #16
 80193d6:	60f8      	str	r0, [r7, #12]
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	3388      	adds	r3, #136	@ 0x88
 80193e0:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80193e2:	69fb      	ldr	r3, [r7, #28]
 80193e4:	781b      	ldrb	r3, [r3, #0]
 80193e6:	2b55      	cmp	r3, #85	@ 0x55
 80193e8:	f040 80ac 	bne.w	8019544 <upload_handler+0x174>
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	2b07      	cmp	r3, #7
 80193f0:	f040 80a8 	bne.w	8019544 <upload_handler+0x174>
 80193f4:	69fb      	ldr	r3, [r7, #28]
 80193f6:	685b      	ldr	r3, [r3, #4]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	f000 80a3 	beq.w	8019544 <upload_handler+0x174>
      c->recv.len > 0) {
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8019402:	2b00      	cmp	r3, #0
 8019404:	f000 809e 	beq.w	8019544 <upload_handler+0x174>
    size_t alignment = 128;  // Maximum flash write granularity (MCXN947 ROM)
 8019408:	2380      	movs	r3, #128	@ 0x80
 801940a:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 801940c:	69fb      	ldr	r3, [r7, #28]
 801940e:	689a      	ldr	r2, [r3, #8]
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019414:	441a      	add	r2, r3
 8019416:	69fb      	ldr	r3, [r7, #28]
 8019418:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 801941a:	429a      	cmp	r2, r3
 801941c:	d210      	bcs.n	8019440 <upload_handler+0x70>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 801941e:	69bb      	ldr	r3, [r7, #24]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d102      	bne.n	801942a <upload_handler+0x5a>
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019428:	e007      	b.n	801943a <upload_handler+0x6a>
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801942e:	69bb      	ldr	r3, [r7, #24]
 8019430:	fbb2 f3f3 	udiv	r3, r2, r3
 8019434:	69ba      	ldr	r2, [r7, #24]
 8019436:	fb02 f303 	mul.w	r3, r2, r3
 801943a:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 801943c:	697b      	ldr	r3, [r7, #20]
 801943e:	e001      	b.n	8019444 <upload_handler+0x74>
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 8019444:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 8019446:	697b      	ldr	r3, [r7, #20]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d00a      	beq.n	8019462 <upload_handler+0x92>
 801944c:	69fb      	ldr	r3, [r7, #28]
 801944e:	695b      	ldr	r3, [r3, #20]
 8019450:	69fa      	ldr	r2, [r7, #28]
 8019452:	68d0      	ldr	r0, [r2, #12]
 8019454:	68fa      	ldr	r2, [r7, #12]
 8019456:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8019458:	697a      	ldr	r2, [r7, #20]
 801945a:	4798      	blx	r3
 801945c:	4603      	mov	r3, r0
 801945e:	2b00      	cmp	r3, #0
 8019460:	d001      	beq.n	8019466 <upload_handler+0x96>
 8019462:	2301      	movs	r3, #1
 8019464:	e000      	b.n	8019468 <upload_handler+0x98>
 8019466:	2300      	movs	r3, #0
 8019468:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 801946a:	69fb      	ldr	r3, [r7, #28]
 801946c:	689a      	ldr	r2, [r3, #8]
 801946e:	697b      	ldr	r3, [r7, #20]
 8019470:	441a      	add	r2, r3
 8019472:	69fb      	ldr	r3, [r7, #28]
 8019474:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 8019476:	4b3a      	ldr	r3, [pc, #232]	@ (8019560 <upload_handler+0x190>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	2b02      	cmp	r3, #2
 801947c:	dd17      	ble.n	80194ae <upload_handler+0xde>
 801947e:	4b39      	ldr	r3, [pc, #228]	@ (8019564 <upload_handler+0x194>)
 8019480:	22fb      	movs	r2, #251	@ 0xfb
 8019482:	4939      	ldr	r1, [pc, #228]	@ (8019568 <upload_handler+0x198>)
 8019484:	2003      	movs	r0, #3
 8019486:	f7ee fbeb 	bl	8007c60 <mg_log_prefix>
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8019492:	69fb      	ldr	r3, [r7, #28]
 8019494:	689b      	ldr	r3, [r3, #8]
 8019496:	69fa      	ldr	r2, [r7, #28]
 8019498:	6852      	ldr	r2, [r2, #4]
 801949a:	7cf9      	ldrb	r1, [r7, #19]
 801949c:	9102      	str	r1, [sp, #8]
 801949e:	9201      	str	r2, [sp, #4]
 80194a0:	9300      	str	r3, [sp, #0]
 80194a2:	4623      	mov	r3, r4
 80194a4:	697a      	ldr	r2, [r7, #20]
 80194a6:	4601      	mov	r1, r0
 80194a8:	4830      	ldr	r0, [pc, #192]	@ (801956c <upload_handler+0x19c>)
 80194aa:	f7ee fc29 	bl	8007d00 <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	3338      	adds	r3, #56	@ 0x38
 80194b2:	697a      	ldr	r2, [r7, #20]
 80194b4:	2100      	movs	r1, #0
 80194b6:	4618      	mov	r0, r3
 80194b8:	f7ed fce2 	bl	8006e80 <mg_iobuf_del>
    if (ok == false) {
 80194bc:	7cfb      	ldrb	r3, [r7, #19]
 80194be:	f083 0301 	eor.w	r3, r3, #1
 80194c2:	b2db      	uxtb	r3, r3
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d011      	beq.n	80194ec <upload_handler+0x11c>
      mg_http_reply(c, 400, "", "Upload error\n");
 80194c8:	4b29      	ldr	r3, [pc, #164]	@ (8019570 <upload_handler+0x1a0>)
 80194ca:	4a2a      	ldr	r2, [pc, #168]	@ (8019574 <upload_handler+0x1a4>)
 80194cc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80194d0:	68f8      	ldr	r0, [r7, #12]
 80194d2:	f7eb fe27 	bl	8005124 <mg_http_reply>
      close_uploaded_file(us);
 80194d6:	69f8      	ldr	r0, [r7, #28]
 80194d8:	f7ff ff58 	bl	801938c <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80194dc:	68fa      	ldr	r2, [r7, #12]
 80194de:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80194e2:	f043 0310 	orr.w	r3, r3, #16
 80194e6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 80194ea:	e02b      	b.n	8019544 <upload_handler+0x174>
    } else if (us->received >= us->expected) {
 80194ec:	69fb      	ldr	r3, [r7, #28]
 80194ee:	689a      	ldr	r2, [r3, #8]
 80194f0:	69fb      	ldr	r3, [r7, #28]
 80194f2:	685b      	ldr	r3, [r3, #4]
 80194f4:	429a      	cmp	r2, r3
 80194f6:	d325      	bcc.n	8019544 <upload_handler+0x174>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 80194f8:	4b19      	ldr	r3, [pc, #100]	@ (8019560 <upload_handler+0x190>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	2b01      	cmp	r3, #1
 80194fe:	dd0e      	ble.n	801951e <upload_handler+0x14e>
 8019500:	4b18      	ldr	r3, [pc, #96]	@ (8019564 <upload_handler+0x194>)
 8019502:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8019506:	4918      	ldr	r1, [pc, #96]	@ (8019568 <upload_handler+0x198>)
 8019508:	2002      	movs	r0, #2
 801950a:	f7ee fba9 	bl	8007c60 <mg_log_prefix>
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8019512:	69fb      	ldr	r3, [r7, #28]
 8019514:	689b      	ldr	r3, [r3, #8]
 8019516:	461a      	mov	r2, r3
 8019518:	4817      	ldr	r0, [pc, #92]	@ (8019578 <upload_handler+0x1a8>)
 801951a:	f7ee fbf1 	bl	8007d00 <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 801951e:	69fb      	ldr	r3, [r7, #28]
 8019520:	689b      	ldr	r3, [r3, #8]
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	4b15      	ldr	r3, [pc, #84]	@ (801957c <upload_handler+0x1ac>)
 8019526:	2200      	movs	r2, #0
 8019528:	21c8      	movs	r1, #200	@ 0xc8
 801952a:	68f8      	ldr	r0, [r7, #12]
 801952c:	f7eb fdfa 	bl	8005124 <mg_http_reply>
      close_uploaded_file(us);
 8019530:	69f8      	ldr	r0, [r7, #28]
 8019532:	f7ff ff2b 	bl	801938c <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8019536:	68fa      	ldr	r2, [r7, #12]
 8019538:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801953c:	f043 0310 	orr.w	r3, r3, #16
 8019540:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8019544:	69fb      	ldr	r3, [r7, #28]
 8019546:	781b      	ldrb	r3, [r3, #0]
 8019548:	2b55      	cmp	r3, #85	@ 0x55
 801954a:	d105      	bne.n	8019558 <upload_handler+0x188>
 801954c:	68bb      	ldr	r3, [r7, #8]
 801954e:	2b09      	cmp	r3, #9
 8019550:	d102      	bne.n	8019558 <upload_handler+0x188>
 8019552:	69f8      	ldr	r0, [r7, #28]
 8019554:	f7ff ff1a 	bl	801938c <close_uploaded_file>
  (void) ev_data;
}
 8019558:	3724      	adds	r7, #36	@ 0x24
 801955a:	46bd      	mov	sp, r7
 801955c:	bd90      	pop	{r4, r7, pc}
 801955e:	bf00      	nop
 8019560:	24000240 	.word	0x24000240
 8019564:	080369b4 	.word	0x080369b4
 8019568:	08029c9c 	.word	0x08029c9c
 801956c:	08029de4 	.word	0x08029de4
 8019570:	08029e08 	.word	0x08029e08
 8019574:	08029d08 	.word	0x08029d08
 8019578:	08029e18 	.word	0x08029e18
 801957c:	08029e2c 	.word	0x08029e2c

08019580 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8019580:	b580      	push	{r7, lr}
 8019582:	b0a8      	sub	sp, #160	@ 0xa0
 8019584:	af02      	add	r7, sp, #8
 8019586:	60f8      	str	r0, [r7, #12]
 8019588:	60b9      	str	r1, [r7, #8]
 801958a:	607a      	str	r2, [r7, #4]
 801958c:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	3388      	adds	r3, #136	@ 0x88
 8019592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  struct mg_str parts[3];
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));                    // Cleanup upload state
 8019596:	2218      	movs	r2, #24
 8019598:	2100      	movs	r1, #0
 801959a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 801959e:	f00a f871 	bl	8023684 <memset>
  memset(parts, 0, sizeof(parts));               // Init match parts
 80195a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80195a6:	2218      	movs	r2, #24
 80195a8:	2100      	movs	r1, #0
 80195aa:	4618      	mov	r0, r3
 80195ac:	f00a f86a 	bl	8023684 <memset>
  mg_match(hm->uri, mg_str("/api/*/#"), parts);  // Fetch file name
 80195b0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80195b4:	493e      	ldr	r1, [pc, #248]	@ (80196b0 <prep_upload+0x130>)
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7f5 fa1a 	bl	800e9f0 <mg_str_s>
 80195bc:	68b9      	ldr	r1, [r7, #8]
 80195be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80195c2:	9300      	str	r3, [sp, #0]
 80195c4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80195c8:	cb0c      	ldmia	r3, {r2, r3}
 80195ca:	3108      	adds	r1, #8
 80195cc:	c903      	ldmia	r1, {r0, r1}
 80195ce:	f7f5 fb19 	bl	800ec04 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, path, sizeof(path), 0);
 80195d2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80195d4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80195d8:	f107 0210 	add.w	r2, r7, #16
 80195dc:	2300      	movs	r3, #0
 80195de:	9300      	str	r3, [sp, #0]
 80195e0:	2364      	movs	r3, #100	@ 0x64
 80195e2:	f7ea fc86 	bl	8003ef2 <mg_url_decode>
  us->fp = fn_open(path, hm->body.len);
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 80195ec:	f107 0210 	add.w	r2, r7, #16
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	4610      	mov	r0, r2
 80195f4:	4798      	blx	r3
 80195f6:	4602      	mov	r2, r0
 80195f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80195fc:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 80195fe:	4b2d      	ldr	r3, [pc, #180]	@ (80196b4 <prep_upload+0x134>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2b02      	cmp	r3, #2
 8019604:	dd11      	ble.n	801962a <prep_upload+0xaa>
 8019606:	4b2c      	ldr	r3, [pc, #176]	@ (80196b8 <prep_upload+0x138>)
 8019608:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 801960c:	492b      	ldr	r1, [pc, #172]	@ (80196bc <prep_upload+0x13c>)
 801960e:	2003      	movs	r0, #3
 8019610:	f7ee fb26 	bl	8007c60 <mg_log_prefix>
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801961a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	f107 0110 	add.w	r1, r7, #16
 8019624:	4826      	ldr	r0, [pc, #152]	@ (80196c0 <prep_upload+0x140>)
 8019626:	f7ee fb6b 	bl	8007d00 <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 801962a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801962e:	2255      	movs	r2, #85	@ 0x55
 8019630:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8019632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019636:	68db      	ldr	r3, [r3, #12]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d10e      	bne.n	801965a <prep_upload+0xda>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 801963c:	4b21      	ldr	r3, [pc, #132]	@ (80196c4 <prep_upload+0x144>)
 801963e:	4a22      	ldr	r2, [pc, #136]	@ (80196c8 <prep_upload+0x148>)
 8019640:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019644:	68f8      	ldr	r0, [r7, #12]
 8019646:	f7eb fd6d 	bl	8005124 <mg_http_reply>
    c->is_draining = 1;
 801964a:	68fa      	ldr	r2, [r7, #12]
 801964c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019650:	f043 0310 	orr.w	r3, r3, #16
 8019654:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8019658:	e026      	b.n	80196a8 <prep_upload+0x128>
    us->expected = hm->body.len;              // Store number of bytes we expect
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019660:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019664:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8019666:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801966a:	683a      	ldr	r2, [r7, #0]
 801966c:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 801966e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019672:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8019676:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8019684:	461a      	mov	r2, r3
 8019686:	2100      	movs	r1, #0
 8019688:	f7ed fbfa 	bl	8006e80 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	4a0f      	ldr	r2, [pc, #60]	@ (80196cc <prep_upload+0x14c>)
 8019690:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	2200      	movs	r2, #0
 8019696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	3340      	adds	r3, #64	@ 0x40
 801969e:	461a      	mov	r2, r3
 80196a0:	2107      	movs	r1, #7
 80196a2:	68f8      	ldr	r0, [r7, #12]
 80196a4:	f7e8 ffd2 	bl	800264c <mg_call>
}
 80196a8:	bf00      	nop
 80196aa:	3798      	adds	r7, #152	@ 0x98
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	08029e34 	.word	0x08029e34
 80196b4:	24000240 	.word	0x24000240
 80196b8:	080369c4 	.word	0x080369c4
 80196bc:	08029c9c 	.word	0x08029c9c
 80196c0:	08029e40 	.word	0x08029e40
 80196c4:	08029e5c 	.word	0x08029e5c
 80196c8:	08029e70 	.word	0x08029e70
 80196cc:	080193d1 	.word	0x080193d1

080196d0 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b08c      	sub	sp, #48	@ 0x30
 80196d4:	af02      	add	r7, sp, #8
 80196d6:	60f8      	str	r0, [r7, #12]
 80196d8:	60b9      	str	r1, [r7, #8]
 80196da:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	3388      	adds	r3, #136	@ 0x88
 80196e0:	627b      	str	r3, [r7, #36]	@ 0x24

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0) {
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	2b0a      	cmp	r3, #10
 80196e6:	d160      	bne.n	80197aa <handle_uploads+0xda>
 80196e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196ea:	781b      	ldrb	r3, [r3, #0]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d15c      	bne.n	80197aa <handle_uploads+0xda>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	623b      	str	r3, [r7, #32]
    struct apihandler *h = find_handler(hm);
 80196f4:	6a38      	ldr	r0, [r7, #32]
 80196f6:	f7ff fc1b 	bl	8018f30 <find_handler>
 80196fa:	61f8      	str	r0, [r7, #28]
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 80196fc:	6a38      	ldr	r0, [r7, #32]
 80196fe:	f7ff fcbf 	bl	8019080 <authenticate>
 8019702:	61b8      	str	r0, [r7, #24]
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 8019704:	f107 0310 	add.w	r3, r7, #16
 8019708:	492a      	ldr	r1, [pc, #168]	@ (80197b4 <handle_uploads+0xe4>)
 801970a:	4618      	mov	r0, r3
 801970c:	f7f5 f970 	bl	800e9f0 <mg_str_s>
 8019710:	6a39      	ldr	r1, [r7, #32]
 8019712:	2300      	movs	r3, #0
 8019714:	9300      	str	r3, [sp, #0]
 8019716:	f107 0310 	add.w	r3, r7, #16
 801971a:	cb0c      	ldmia	r3, {r2, r3}
 801971c:	3108      	adds	r1, #8
 801971e:	c903      	ldmia	r1, {r0, r1}
 8019720:	f7f5 fa70 	bl	800ec04 <mg_match>
 8019724:	4603      	mov	r3, r0
 8019726:	2b00      	cmp	r3, #0
 8019728:	d01e      	beq.n	8019768 <handle_uploads+0x98>
 801972a:	69bb      	ldr	r3, [r7, #24]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d013      	beq.n	8019758 <handle_uploads+0x88>
        (u == NULL ||
 8019730:	69fb      	ldr	r3, [r7, #28]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d018      	beq.n	8019768 <handle_uploads+0x98>
         (h != NULL && (u->level < h->read_level ||
 8019736:	69bb      	ldr	r3, [r7, #24]
 8019738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801973a:	69fb      	ldr	r3, [r7, #28]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	429a      	cmp	r2, r3
 8019740:	db0a      	blt.n	8019758 <handle_uploads+0x88>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019742:	6a3b      	ldr	r3, [r7, #32]
 8019744:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 8019748:	2b00      	cmp	r3, #0
 801974a:	d00d      	beq.n	8019768 <handle_uploads+0x98>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 801974c:	69bb      	ldr	r3, [r7, #24]
 801974e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019750:	69fb      	ldr	r3, [r7, #28]
 8019752:	691b      	ldr	r3, [r3, #16]
 8019754:	429a      	cmp	r2, r3
 8019756:	da07      	bge.n	8019768 <handle_uploads+0x98>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8019758:	4b17      	ldr	r3, [pc, #92]	@ (80197b8 <handle_uploads+0xe8>)
 801975a:	4a18      	ldr	r2, [pc, #96]	@ (80197bc <handle_uploads+0xec>)
 801975c:	f240 1193 	movw	r1, #403	@ 0x193
 8019760:	68f8      	ldr	r0, [r7, #12]
 8019762:	f7eb fcdf 	bl	8005124 <mg_http_reply>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
      // OTA/upload endpoints
      prep_upload(c, hm, h->opener, h->closer, h->writer);
    }
  }
}
 8019766:	e020      	b.n	80197aa <handle_uploads+0xda>
        if (h != NULL &&
 8019768:	69fb      	ldr	r3, [r7, #28]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d01d      	beq.n	80197aa <handle_uploads+0xda>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 801976e:	69fb      	ldr	r3, [r7, #28]
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	4913      	ldr	r1, [pc, #76]	@ (80197c0 <handle_uploads+0xf0>)
 8019774:	4618      	mov	r0, r3
 8019776:	f7e6 fdb3 	bl	80002e0 <strcmp>
 801977a:	4603      	mov	r3, r0
        if (h != NULL &&
 801977c:	2b00      	cmp	r3, #0
 801977e:	d008      	beq.n	8019792 <handle_uploads+0xc2>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8019780:	69fb      	ldr	r3, [r7, #28]
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	490f      	ldr	r1, [pc, #60]	@ (80197c4 <handle_uploads+0xf4>)
 8019786:	4618      	mov	r0, r3
 8019788:	f7e6 fdaa 	bl	80002e0 <strcmp>
 801978c:	4603      	mov	r3, r0
 801978e:	2b00      	cmp	r3, #0
 8019790:	d10b      	bne.n	80197aa <handle_uploads+0xda>
      prep_upload(c, hm, h->opener, h->closer, h->writer);
 8019792:	69fb      	ldr	r3, [r7, #28]
 8019794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019796:	69fb      	ldr	r3, [r7, #28]
 8019798:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801979e:	9300      	str	r3, [sp, #0]
 80197a0:	460b      	mov	r3, r1
 80197a2:	6a39      	ldr	r1, [r7, #32]
 80197a4:	68f8      	ldr	r0, [r7, #12]
 80197a6:	f7ff feeb 	bl	8019580 <prep_upload>
}
 80197aa:	bf00      	nop
 80197ac:	3728      	adds	r7, #40	@ 0x28
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}
 80197b2:	bf00      	nop
 80197b4:	08029eac 	.word	0x08029eac
 80197b8:	08029eb4 	.word	0x08029eb4
 80197bc:	08029e70 	.word	0x08029e70
 80197c0:	08029c3c 	.word	0x08029c3c
 80197c4:	08029c2c 	.word	0x08029c2c

080197c8 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void), void (*start_fn)(void)) {
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b088      	sub	sp, #32
 80197cc:	af02      	add	r7, sp, #8
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
 80197d4:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d017      	beq.n	8019810 <handle_action+0x48>
    start_fn();
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	4798      	blx	r3
    if (check_fn()) {
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	4798      	blx	r3
 80197e8:	4603      	mov	r3, r0
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d009      	beq.n	8019802 <handle_action+0x3a>
      struct action_state *as = (struct action_state *) c->data;
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	3388      	adds	r3, #136	@ 0x88
 80197f2:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	2241      	movs	r2, #65	@ 0x41
 80197f8:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	687a      	ldr	r2, [r7, #4]
 80197fe:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8019800:	e015      	b.n	801982e <handle_action+0x66>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8019802:	4b0d      	ldr	r3, [pc, #52]	@ (8019838 <handle_action+0x70>)
 8019804:	4a0d      	ldr	r2, [pc, #52]	@ (801983c <handle_action+0x74>)
 8019806:	21c8      	movs	r1, #200	@ 0xc8
 8019808:	68f8      	ldr	r0, [r7, #12]
 801980a:	f7eb fc8b 	bl	8005124 <mg_http_reply>
}
 801980e:	e00e      	b.n	801982e <handle_action+0x66>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	4798      	blx	r3
 8019814:	4603      	mov	r3, r0
 8019816:	2b00      	cmp	r3, #0
 8019818:	d001      	beq.n	801981e <handle_action+0x56>
 801981a:	4b09      	ldr	r3, [pc, #36]	@ (8019840 <handle_action+0x78>)
 801981c:	e000      	b.n	8019820 <handle_action+0x58>
 801981e:	4b06      	ldr	r3, [pc, #24]	@ (8019838 <handle_action+0x70>)
 8019820:	9300      	str	r3, [sp, #0]
 8019822:	4b08      	ldr	r3, [pc, #32]	@ (8019844 <handle_action+0x7c>)
 8019824:	4a05      	ldr	r2, [pc, #20]	@ (801983c <handle_action+0x74>)
 8019826:	21c8      	movs	r1, #200	@ 0xc8
 8019828:	68f8      	ldr	r0, [r7, #12]
 801982a:	f7eb fc7b 	bl	8005124 <mg_http_reply>
}
 801982e:	bf00      	nop
 8019830:	3718      	adds	r7, #24
 8019832:	46bd      	mov	sp, r7
 8019834:	bd80      	pop	{r7, pc}
 8019836:	bf00      	nop
 8019838:	08029ec4 	.word	0x08029ec4
 801983c:	08029e70 	.word	0x08029e70
 8019840:	08029ecc 	.word	0x08029ecc
 8019844:	08029cdc 	.word	0x08029cdc

08019848 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8019848:	b580      	push	{r7, lr}
 801984a:	b08e      	sub	sp, #56	@ 0x38
 801984c:	af04      	add	r7, sp, #16
 801984e:	60f8      	str	r0, [r7, #12]
 8019850:	60b9      	str	r1, [r7, #8]
 8019852:	607a      	str	r2, [r7, #4]
  struct apihandler *h = va_arg(*ap, struct apihandler *);
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	1d19      	adds	r1, r3, #4
 801985a:	687a      	ldr	r2, [r7, #4]
 801985c:	6011      	str	r1, [r2, #0]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	1d19      	adds	r1, r3, #4
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	6011      	str	r1, [r2, #0]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8019870:	2300      	movs	r3, #0
 8019872:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 8019874:	2300      	movs	r3, #0
 8019876:	627b      	str	r3, [r7, #36]	@ 0x24
 8019878:	e0bf      	b.n	80199fa <print_struct+0x1b2>
    char *attrptr = data + h->attributes[i].offset;
 801987a:	69bb      	ldr	r3, [r7, #24]
 801987c:	6999      	ldr	r1, [r3, #24]
 801987e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019880:	4613      	mov	r3, r2
 8019882:	005b      	lsls	r3, r3, #1
 8019884:	4413      	add	r3, r2
 8019886:	00db      	lsls	r3, r3, #3
 8019888:	440b      	add	r3, r1
 801988a:	68db      	ldr	r3, [r3, #12]
 801988c:	697a      	ldr	r2, [r7, #20]
 801988e:	4413      	add	r3, r2
 8019890:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 8019892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019894:	2b00      	cmp	r3, #0
 8019896:	d101      	bne.n	801989c <print_struct+0x54>
 8019898:	4860      	ldr	r0, [pc, #384]	@ (8019a1c <print_struct+0x1d4>)
 801989a:	e000      	b.n	801989e <print_struct+0x56>
 801989c:	4860      	ldr	r0, [pc, #384]	@ (8019a20 <print_struct+0x1d8>)
                      MG_ESC(h->attributes[i].name));
 801989e:	69bb      	ldr	r3, [r7, #24]
 80198a0:	6999      	ldr	r1, [r3, #24]
 80198a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80198a4:	4613      	mov	r3, r2
 80198a6:	005b      	lsls	r3, r3, #1
 80198a8:	4413      	add	r3, r2
 80198aa:	00db      	lsls	r3, r3, #3
 80198ac:	440b      	add	r3, r1
 80198ae:	681b      	ldr	r3, [r3, #0]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 80198b0:	9302      	str	r3, [sp, #8]
 80198b2:	2300      	movs	r3, #0
 80198b4:	9301      	str	r3, [sp, #4]
 80198b6:	4b5b      	ldr	r3, [pc, #364]	@ (8019a24 <print_struct+0x1dc>)
 80198b8:	9300      	str	r3, [sp, #0]
 80198ba:	4603      	mov	r3, r0
 80198bc:	4a5a      	ldr	r2, [pc, #360]	@ (8019a28 <print_struct+0x1e0>)
 80198be:	68b9      	ldr	r1, [r7, #8]
 80198c0:	68f8      	ldr	r0, [r7, #12]
 80198c2:	f7e9 fb76 	bl	8002fb2 <mg_xprintf>
 80198c6:	4602      	mov	r2, r0
 80198c8:	6a3b      	ldr	r3, [r7, #32]
 80198ca:	4413      	add	r3, r2
 80198cc:	623b      	str	r3, [r7, #32]
    if (strcmp(h->attributes[i].type, "int") == 0) {
 80198ce:	69bb      	ldr	r3, [r7, #24]
 80198d0:	6999      	ldr	r1, [r3, #24]
 80198d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80198d4:	4613      	mov	r3, r2
 80198d6:	005b      	lsls	r3, r3, #1
 80198d8:	4413      	add	r3, r2
 80198da:	00db      	lsls	r3, r3, #3
 80198dc:	440b      	add	r3, r1
 80198de:	685b      	ldr	r3, [r3, #4]
 80198e0:	4952      	ldr	r1, [pc, #328]	@ (8019a2c <print_struct+0x1e4>)
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7e6 fcfc 	bl	80002e0 <strcmp>
 80198e8:	4603      	mov	r3, r0
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d10b      	bne.n	8019906 <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 80198ee:	693b      	ldr	r3, [r7, #16]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	4a4f      	ldr	r2, [pc, #316]	@ (8019a30 <print_struct+0x1e8>)
 80198f4:	68b9      	ldr	r1, [r7, #8]
 80198f6:	68f8      	ldr	r0, [r7, #12]
 80198f8:	f7e9 fb5b 	bl	8002fb2 <mg_xprintf>
 80198fc:	4602      	mov	r2, r0
 80198fe:	6a3b      	ldr	r3, [r7, #32]
 8019900:	4413      	add	r3, r2
 8019902:	623b      	str	r3, [r7, #32]
 8019904:	e076      	b.n	80199f4 <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "double") == 0) {
 8019906:	69bb      	ldr	r3, [r7, #24]
 8019908:	6999      	ldr	r1, [r3, #24]
 801990a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801990c:	4613      	mov	r3, r2
 801990e:	005b      	lsls	r3, r3, #1
 8019910:	4413      	add	r3, r2
 8019912:	00db      	lsls	r3, r3, #3
 8019914:	440b      	add	r3, r1
 8019916:	685b      	ldr	r3, [r3, #4]
 8019918:	4946      	ldr	r1, [pc, #280]	@ (8019a34 <print_struct+0x1ec>)
 801991a:	4618      	mov	r0, r3
 801991c:	f7e6 fce0 	bl	80002e0 <strcmp>
 8019920:	4603      	mov	r3, r0
 8019922:	2b00      	cmp	r3, #0
 8019924:	d11d      	bne.n	8019962 <print_struct+0x11a>
      const char *fmt = h->attributes[i].format;
 8019926:	69bb      	ldr	r3, [r7, #24]
 8019928:	6999      	ldr	r1, [r3, #24]
 801992a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801992c:	4613      	mov	r3, r2
 801992e:	005b      	lsls	r3, r3, #1
 8019930:	4413      	add	r3, r2
 8019932:	00db      	lsls	r3, r3, #3
 8019934:	440b      	add	r3, r1
 8019936:	689b      	ldr	r3, [r3, #8]
 8019938:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 801993a:	69fb      	ldr	r3, [r7, #28]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d101      	bne.n	8019944 <print_struct+0xfc>
 8019940:	4b3d      	ldr	r3, [pc, #244]	@ (8019a38 <print_struct+0x1f0>)
 8019942:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8019944:	693b      	ldr	r3, [r7, #16]
 8019946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801994a:	e9cd 2300 	strd	r2, r3, [sp]
 801994e:	69fa      	ldr	r2, [r7, #28]
 8019950:	68b9      	ldr	r1, [r7, #8]
 8019952:	68f8      	ldr	r0, [r7, #12]
 8019954:	f7e9 fb2d 	bl	8002fb2 <mg_xprintf>
 8019958:	4602      	mov	r2, r0
 801995a:	6a3b      	ldr	r3, [r7, #32]
 801995c:	4413      	add	r3, r2
 801995e:	623b      	str	r3, [r7, #32]
 8019960:	e048      	b.n	80199f4 <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "bool") == 0) {
 8019962:	69bb      	ldr	r3, [r7, #24]
 8019964:	6999      	ldr	r1, [r3, #24]
 8019966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019968:	4613      	mov	r3, r2
 801996a:	005b      	lsls	r3, r3, #1
 801996c:	4413      	add	r3, r2
 801996e:	00db      	lsls	r3, r3, #3
 8019970:	440b      	add	r3, r1
 8019972:	685b      	ldr	r3, [r3, #4]
 8019974:	4931      	ldr	r1, [pc, #196]	@ (8019a3c <print_struct+0x1f4>)
 8019976:	4618      	mov	r0, r3
 8019978:	f7e6 fcb2 	bl	80002e0 <strcmp>
 801997c:	4603      	mov	r3, r0
 801997e:	2b00      	cmp	r3, #0
 8019980:	d110      	bne.n	80199a4 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8019982:	693b      	ldr	r3, [r7, #16]
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d001      	beq.n	801998e <print_struct+0x146>
 801998a:	4b2d      	ldr	r3, [pc, #180]	@ (8019a40 <print_struct+0x1f8>)
 801998c:	e000      	b.n	8019990 <print_struct+0x148>
 801998e:	4b2d      	ldr	r3, [pc, #180]	@ (8019a44 <print_struct+0x1fc>)
 8019990:	4a2d      	ldr	r2, [pc, #180]	@ (8019a48 <print_struct+0x200>)
 8019992:	68b9      	ldr	r1, [r7, #8]
 8019994:	68f8      	ldr	r0, [r7, #12]
 8019996:	f7e9 fb0c 	bl	8002fb2 <mg_xprintf>
 801999a:	4602      	mov	r2, r0
 801999c:	6a3b      	ldr	r3, [r7, #32]
 801999e:	4413      	add	r3, r2
 80199a0:	623b      	str	r3, [r7, #32]
 80199a2:	e027      	b.n	80199f4 <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "string") == 0) {
 80199a4:	69bb      	ldr	r3, [r7, #24]
 80199a6:	6999      	ldr	r1, [r3, #24]
 80199a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80199aa:	4613      	mov	r3, r2
 80199ac:	005b      	lsls	r3, r3, #1
 80199ae:	4413      	add	r3, r2
 80199b0:	00db      	lsls	r3, r3, #3
 80199b2:	440b      	add	r3, r1
 80199b4:	685b      	ldr	r3, [r3, #4]
 80199b6:	4925      	ldr	r1, [pc, #148]	@ (8019a4c <print_struct+0x204>)
 80199b8:	4618      	mov	r0, r3
 80199ba:	f7e6 fc91 	bl	80002e0 <strcmp>
 80199be:	4603      	mov	r3, r0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d10e      	bne.n	80199e2 <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 80199c4:	693b      	ldr	r3, [r7, #16]
 80199c6:	9301      	str	r3, [sp, #4]
 80199c8:	2300      	movs	r3, #0
 80199ca:	9300      	str	r3, [sp, #0]
 80199cc:	4b15      	ldr	r3, [pc, #84]	@ (8019a24 <print_struct+0x1dc>)
 80199ce:	4a20      	ldr	r2, [pc, #128]	@ (8019a50 <print_struct+0x208>)
 80199d0:	68b9      	ldr	r1, [r7, #8]
 80199d2:	68f8      	ldr	r0, [r7, #12]
 80199d4:	f7e9 faed 	bl	8002fb2 <mg_xprintf>
 80199d8:	4602      	mov	r2, r0
 80199da:	6a3b      	ldr	r3, [r7, #32]
 80199dc:	4413      	add	r3, r2
 80199de:	623b      	str	r3, [r7, #32]
 80199e0:	e008      	b.n	80199f4 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 80199e2:	4a1c      	ldr	r2, [pc, #112]	@ (8019a54 <print_struct+0x20c>)
 80199e4:	68b9      	ldr	r1, [r7, #8]
 80199e6:	68f8      	ldr	r0, [r7, #12]
 80199e8:	f7e9 fae3 	bl	8002fb2 <mg_xprintf>
 80199ec:	4602      	mov	r2, r0
 80199ee:	6a3b      	ldr	r3, [r7, #32]
 80199f0:	4413      	add	r3, r2
 80199f2:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 80199f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199f6:	3301      	adds	r3, #1
 80199f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80199fa:	69bb      	ldr	r3, [r7, #24]
 80199fc:	6999      	ldr	r1, [r3, #24]
 80199fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a00:	4613      	mov	r3, r2
 8019a02:	005b      	lsls	r3, r3, #1
 8019a04:	4413      	add	r3, r2
 8019a06:	00db      	lsls	r3, r3, #3
 8019a08:	440b      	add	r3, r1
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	f47f af34 	bne.w	801987a <print_struct+0x32>
    }
  }
  return len;
 8019a12:	6a3b      	ldr	r3, [r7, #32]
}
 8019a14:	4618      	mov	r0, r3
 8019a16:	3728      	adds	r7, #40	@ 0x28
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	bd80      	pop	{r7, pc}
 8019a1c:	08029d08 	.word	0x08029d08
 8019a20:	08029ed4 	.word	0x08029ed4
 8019a24:	0800d859 	.word	0x0800d859
 8019a28:	08029ed8 	.word	0x08029ed8
 8019a2c:	08029b38 	.word	0x08029b38
 8019a30:	08029ee0 	.word	0x08029ee0
 8019a34:	08029bc8 	.word	0x08029bc8
 8019a38:	08029ee4 	.word	0x08029ee4
 8019a3c:	08029b74 	.word	0x08029b74
 8019a40:	08029ecc 	.word	0x08029ecc
 8019a44:	08029ec4 	.word	0x08029ec4
 8019a48:	08029cdc 	.word	0x08029cdc
 8019a4c:	08029b64 	.word	0x08029b64
 8019a50:	08029ee8 	.word	0x08029ee8
 8019a54:	08029eec 	.word	0x08029eec

08019a58 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler *h) {
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b0a8      	sub	sp, #160	@ 0xa0
 8019a5c:	af04      	add	r7, sp, #16
 8019a5e:	60f8      	str	r0, [r7, #12]
 8019a60:	60b9      	str	r1, [r7, #8]
 8019a62:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a68:	4619      	mov	r1, r3
 8019a6a:	2001      	movs	r0, #1
 8019a6c:	f008 fb8e 	bl	802218c <calloc>
 8019a70:	4603      	mov	r3, r0
 8019a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	69db      	ldr	r3, [r3, #28]
 8019a7a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019a7e:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	f000 80d6 	beq.w	8019c38 <handle_object+0x1e0>
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	f000 80d1 	beq.w	8019c38 <handle_object+0x1e0>
    char *tmp = calloc(1, h->data_size);
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a9a:	4619      	mov	r1, r3
 8019a9c:	2001      	movs	r0, #1
 8019a9e:	f008 fb75 	bl	802218c <calloc>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019aac:	461a      	mov	r2, r3
 8019aae:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8019ab2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019ab6:	f009 feda 	bl	802386e <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8019aba:	2300      	movs	r3, #0
 8019abc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019ac0:	e08e      	b.n	8019be0 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	6999      	ldr	r1, [r3, #24]
 8019ac6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019aca:	4613      	mov	r3, r2
 8019acc:	005b      	lsls	r3, r3, #1
 8019ace:	4413      	add	r3, r2
 8019ad0:	00db      	lsls	r3, r3, #3
 8019ad2:	440b      	add	r3, r1
 8019ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8019ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	f107 0010 	add.w	r0, r7, #16
 8019ae2:	4a60      	ldr	r2, [pc, #384]	@ (8019c64 <handle_object+0x20c>)
 8019ae4:	2164      	movs	r1, #100	@ 0x64
 8019ae6:	f7f3 fc71 	bl	800d3cc <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 8019aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	495d      	ldr	r1, [pc, #372]	@ (8019c68 <handle_object+0x210>)
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7e6 fbf4 	bl	80002e0 <strcmp>
 8019af8:	4603      	mov	r3, r0
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d11c      	bne.n	8019b38 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8019afe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019b02:	f107 0210 	add.w	r2, r7, #16
 8019b06:	68b9      	ldr	r1, [r7, #8]
 8019b08:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019b0c:	c903      	ldmia	r1, {r0, r1}
 8019b0e:	f7ed ff46 	bl	800799e <mg_json_get_num>
 8019b12:	4603      	mov	r3, r0
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d05e      	beq.n	8019bd6 <handle_object+0x17e>
          int v = (int) d;
 8019b18:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8019b1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019b20:	ee17 3a90 	vmov	r3, s15
 8019b24:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 8019b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b2a:	68db      	ldr	r3, [r3, #12]
 8019b2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b30:	4413      	add	r3, r2
 8019b32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8019b34:	601a      	str	r2, [r3, #0]
 8019b36:	e04e      	b.n	8019bd6 <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 8019b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b3c:	685b      	ldr	r3, [r3, #4]
 8019b3e:	494b      	ldr	r1, [pc, #300]	@ (8019c6c <handle_object+0x214>)
 8019b40:	4618      	mov	r0, r3
 8019b42:	f7e6 fbcd 	bl	80002e0 <strcmp>
 8019b46:	4603      	mov	r3, r0
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d10e      	bne.n	8019b6a <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8019b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b50:	68db      	ldr	r3, [r3, #12]
 8019b52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b56:	4413      	add	r3, r2
 8019b58:	f107 0210 	add.w	r2, r7, #16
 8019b5c:	68b9      	ldr	r1, [r7, #8]
 8019b5e:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019b62:	c903      	ldmia	r1, {r0, r1}
 8019b64:	f7ed ff60 	bl	8007a28 <mg_json_get_bool>
 8019b68:	e035      	b.n	8019bd6 <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 8019b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b6e:	685b      	ldr	r3, [r3, #4]
 8019b70:	493f      	ldr	r1, [pc, #252]	@ (8019c70 <handle_object+0x218>)
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7e6 fbb4 	bl	80002e0 <strcmp>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d10e      	bne.n	8019b9c <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8019b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b82:	68db      	ldr	r3, [r3, #12]
 8019b84:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b88:	4413      	add	r3, r2
 8019b8a:	f107 0210 	add.w	r2, r7, #16
 8019b8e:	68b9      	ldr	r1, [r7, #8]
 8019b90:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019b94:	c903      	ldmia	r1, {r0, r1}
 8019b96:	f7ed ff02 	bl	800799e <mg_json_get_num>
 8019b9a:	e01c      	b.n	8019bd6 <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8019b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ba0:	685b      	ldr	r3, [r3, #4]
 8019ba2:	4934      	ldr	r1, [pc, #208]	@ (8019c74 <handle_object+0x21c>)
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7e6 fb9b 	bl	80002e0 <strcmp>
 8019baa:	4603      	mov	r3, r0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d112      	bne.n	8019bd6 <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8019bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019bb4:	68db      	ldr	r3, [r3, #12]
 8019bb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019bba:	18d0      	adds	r0, r2, r3
 8019bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019bc0:	691b      	ldr	r3, [r3, #16]
 8019bc2:	f107 0210 	add.w	r2, r7, #16
 8019bc6:	68b9      	ldr	r1, [r7, #8]
 8019bc8:	9300      	str	r3, [sp, #0]
 8019bca:	4603      	mov	r3, r0
 8019bcc:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019bd0:	c903      	ldmia	r1, {r0, r1}
 8019bd2:	f7ff fa29 	bl	8019028 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8019bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019bda:	3301      	adds	r3, #1
 8019bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	6999      	ldr	r1, [r3, #24]
 8019be4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019be8:	4613      	mov	r3, r2
 8019bea:	005b      	lsls	r3, r3, #1
 8019bec:	4413      	add	r3, r2
 8019bee:	00db      	lsls	r3, r3, #3
 8019bf0:	440b      	add	r3, r1
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	f47f af64 	bne.w	8019ac2 <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019bfe:	461a      	mov	r2, r3
 8019c00:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8019c04:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019c08:	f009 fd12 	bl	8023630 <memcmp>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d004      	beq.n	8019c1c <handle_object+0x1c4>
 8019c12:	4b19      	ldr	r3, [pc, #100]	@ (8019c78 <handle_object+0x220>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	3301      	adds	r3, #1
 8019c18:	4a17      	ldr	r2, [pc, #92]	@ (8019c78 <handle_object+0x220>)
 8019c1a:	6013      	str	r3, [r2, #0]
    h->setter(tmp);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	6a1b      	ldr	r3, [r3, #32]
 8019c20:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019c24:	4798      	blx	r3
    free(tmp);
 8019c26:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019c2a:	f008 fad3 	bl	80221d4 <free>
    h->getter(data);  // Re-sync again after setting
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	69db      	ldr	r3, [r3, #28]
 8019c32:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019c36:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h, data);
 8019c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019c3c:	9302      	str	r3, [sp, #8]
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	9301      	str	r3, [sp, #4]
 8019c42:	4b0e      	ldr	r3, [pc, #56]	@ (8019c7c <handle_object+0x224>)
 8019c44:	9300      	str	r3, [sp, #0]
 8019c46:	4b0e      	ldr	r3, [pc, #56]	@ (8019c80 <handle_object+0x228>)
 8019c48:	4a0e      	ldr	r2, [pc, #56]	@ (8019c84 <handle_object+0x22c>)
 8019c4a:	21c8      	movs	r1, #200	@ 0xc8
 8019c4c:	68f8      	ldr	r0, [r7, #12]
 8019c4e:	f7eb fa69 	bl	8005124 <mg_http_reply>
  free(data);
 8019c52:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019c56:	f008 fabd 	bl	80221d4 <free>
}
 8019c5a:	bf00      	nop
 8019c5c:	3790      	adds	r7, #144	@ 0x90
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	bd80      	pop	{r7, pc}
 8019c62:	bf00      	nop
 8019c64:	08029ef4 	.word	0x08029ef4
 8019c68:	08029b38 	.word	0x08029b38
 8019c6c:	08029b74 	.word	0x08029b74
 8019c70:	08029bc8 	.word	0x08029bc8
 8019c74:	08029b64 	.word	0x08029b64
 8019c78:	24003ed0 	.word	0x24003ed0
 8019c7c:	08019849 	.word	0x08019849
 8019c80:	08029efc 	.word	0x08029efc
 8019c84:	08029e70 	.word	0x08029e70

08019c88 <print_timeseries>:

size_t print_timeseries(void (*out)(char, void *), void *ptr, va_list *ap) {
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b08e      	sub	sp, #56	@ 0x38
 8019c8c:	af04      	add	r7, sp, #16
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	607a      	str	r2, [r7, #4]
  uint32_t *timestamps = va_arg(*ap, uint32_t *);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	1d19      	adds	r1, r3, #4
 8019c9a:	687a      	ldr	r2, [r7, #4]
 8019c9c:	6011      	str	r1, [r2, #0]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	61fb      	str	r3, [r7, #28]
  double *values = va_arg(*ap, double *);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	1d19      	adds	r1, r3, #4
 8019ca8:	687a      	ldr	r2, [r7, #4]
 8019caa:	6011      	str	r1, [r2, #0]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	61bb      	str	r3, [r7, #24]
  size_t count = va_arg(*ap, size_t);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	1d19      	adds	r1, r3, #4
 8019cb6:	687a      	ldr	r2, [r7, #4]
 8019cb8:	6011      	str	r1, [r2, #0]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8019cc6:	e021      	b.n	8019d0c <print_timeseries+0x84>
    const char *comma = i == 0 ? "" : ",";
 8019cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d101      	bne.n	8019cd2 <print_timeseries+0x4a>
 8019cce:	4b14      	ldr	r3, [pc, #80]	@ (8019d20 <print_timeseries+0x98>)
 8019cd0:	e000      	b.n	8019cd4 <print_timeseries+0x4c>
 8019cd2:	4b14      	ldr	r3, [pc, #80]	@ (8019d24 <print_timeseries+0x9c>)
 8019cd4:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s[%lu,%g]", comma, timestamps[i], values[i]);
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cd8:	009b      	lsls	r3, r3, #2
 8019cda:	69fa      	ldr	r2, [r7, #28]
 8019cdc:	4413      	add	r3, r2
 8019cde:	6819      	ldr	r1, [r3, #0]
 8019ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ce2:	00db      	lsls	r3, r3, #3
 8019ce4:	69ba      	ldr	r2, [r7, #24]
 8019ce6:	4413      	add	r3, r2
 8019ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019cf0:	9100      	str	r1, [sp, #0]
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8019d28 <print_timeseries+0xa0>)
 8019cf6:	68b9      	ldr	r1, [r7, #8]
 8019cf8:	68f8      	ldr	r0, [r7, #12]
 8019cfa:	f7e9 f95a 	bl	8002fb2 <mg_xprintf>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	6a3b      	ldr	r3, [r7, #32]
 8019d02:	4413      	add	r3, r2
 8019d04:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 8019d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d08:	3301      	adds	r3, #1
 8019d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	429a      	cmp	r2, r3
 8019d12:	d3d9      	bcc.n	8019cc8 <print_timeseries+0x40>
  }
  return len;
 8019d14:	6a3b      	ldr	r3, [r7, #32]
}
 8019d16:	4618      	mov	r0, r3
 8019d18:	3728      	adds	r7, #40	@ 0x28
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd80      	pop	{r7, pc}
 8019d1e:	bf00      	nop
 8019d20:	08029d08 	.word	0x08029d08
 8019d24:	08029ed4 	.word	0x08029ed4
 8019d28:	08029f04 	.word	0x08029f04

08019d2c <handle_graph>:

static void handle_graph(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler *h) {
 8019d2c:	b5b0      	push	{r4, r5, r7, lr}
 8019d2e:	b0c8      	sub	sp, #288	@ 0x120
 8019d30:	af04      	add	r7, sp, #16
 8019d32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8019d3a:	6018      	str	r0, [r3, #0]
 8019d3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8019d44:	6019      	str	r1, [r3, #0]
 8019d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019d4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019d4e:	601a      	str	r2, [r3, #0]
  long from = mg_json_get_long(hm->body, "$.from", 0);
 8019d50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8019d58:	6819      	ldr	r1, [r3, #0]
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	4a21      	ldr	r2, [pc, #132]	@ (8019de4 <handle_graph+0xb8>)
 8019d5e:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019d62:	c903      	ldmia	r1, {r0, r1}
 8019d64:	f7ed ff2a 	bl	8007bbc <mg_json_get_long>
 8019d68:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  long to = mg_json_get_long(hm->body, "$.to", 0);
 8019d6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8019d74:	6819      	ldr	r1, [r3, #0]
 8019d76:	2300      	movs	r3, #0
 8019d78:	4a1b      	ldr	r2, [pc, #108]	@ (8019de8 <handle_graph+0xbc>)
 8019d7a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019d7e:	c903      	ldmia	r1, {r0, r1}
 8019d80:	f7ed ff1c 	bl	8007bbc <mg_json_get_long>
 8019d84:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  uint32_t timestamps[20];
  double values[sizeof(timestamps) / sizeof(timestamps[0])];
  size_t count = h->grapher(from, to, timestamps, values,
 8019d88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019d8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8019d94:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8019d98:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8019d9c:	f107 0310 	add.w	r3, r7, #16
 8019da0:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8019da4:	2514      	movs	r5, #20
 8019da6:	9500      	str	r5, [sp, #0]
 8019da8:	47a0      	blx	r4
 8019daa:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
                            sizeof(timestamps) / sizeof(timestamps[0]));
  mg_http_reply(c, 200, JSON_HEADERS, "[%M]\n", print_timeseries, timestamps,
 8019dae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019db2:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8019db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019dba:	9303      	str	r3, [sp, #12]
 8019dbc:	f107 0310 	add.w	r3, r7, #16
 8019dc0:	9302      	str	r3, [sp, #8]
 8019dc2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8019dc6:	9301      	str	r3, [sp, #4]
 8019dc8:	4b08      	ldr	r3, [pc, #32]	@ (8019dec <handle_graph+0xc0>)
 8019dca:	9300      	str	r3, [sp, #0]
 8019dcc:	4b08      	ldr	r3, [pc, #32]	@ (8019df0 <handle_graph+0xc4>)
 8019dce:	4a09      	ldr	r2, [pc, #36]	@ (8019df4 <handle_graph+0xc8>)
 8019dd0:	21c8      	movs	r1, #200	@ 0xc8
 8019dd2:	6800      	ldr	r0, [r0, #0]
 8019dd4:	f7eb f9a6 	bl	8005124 <mg_http_reply>
                values, count);
}
 8019dd8:	bf00      	nop
 8019dda:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bdb0      	pop	{r4, r5, r7, pc}
 8019de2:	bf00      	nop
 8019de4:	08029f10 	.word	0x08029f10
 8019de8:	08029f18 	.word	0x08029f18
 8019dec:	08019c89 	.word	0x08019c89
 8019df0:	08029f20 	.word	0x08029f20
 8019df4:	08029e70 	.word	0x08029e70

08019df8 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b086      	sub	sp, #24
 8019dfc:	af02      	add	r7, sp, #8
 8019dfe:	60f8      	str	r0, [r7, #12]
 8019e00:	60b9      	str	r1, [r7, #8]
 8019e02:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0) {
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	491d      	ldr	r1, [pc, #116]	@ (8019e80 <handle_api_call+0x88>)
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7e6 fa68 	bl	80002e0 <strcmp>
 8019e10:	4603      	mov	r3, r0
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d105      	bne.n	8019e22 <handle_api_call+0x2a>
    handle_object(c, hm, h);
 8019e16:	687a      	ldr	r2, [r7, #4]
 8019e18:	68b9      	ldr	r1, [r7, #8]
 8019e1a:	68f8      	ldr	r0, [r7, #12]
 8019e1c:	f7ff fe1c 	bl	8019a58 <handle_object>
  } else if (strcmp(h->type, "graph") == 0) {
    handle_graph(c, hm, h);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 8019e20:	e02a      	b.n	8019e78 <handle_api_call+0x80>
  } else if (strcmp(h->type, "action") == 0) {
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	685b      	ldr	r3, [r3, #4]
 8019e26:	4917      	ldr	r1, [pc, #92]	@ (8019e84 <handle_api_call+0x8c>)
 8019e28:	4618      	mov	r0, r3
 8019e2a:	f7e6 fa59 	bl	80002e0 <strcmp>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d108      	bne.n	8019e46 <handle_api_call+0x4e>
    handle_action(c, hm, h->checker, h->starter);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e3c:	68b9      	ldr	r1, [r7, #8]
 8019e3e:	68f8      	ldr	r0, [r7, #12]
 8019e40:	f7ff fcc2 	bl	80197c8 <handle_action>
}
 8019e44:	e018      	b.n	8019e78 <handle_api_call+0x80>
  } else if (strcmp(h->type, "graph") == 0) {
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	685b      	ldr	r3, [r3, #4]
 8019e4a:	490f      	ldr	r1, [pc, #60]	@ (8019e88 <handle_api_call+0x90>)
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f7e6 fa47 	bl	80002e0 <strcmp>
 8019e52:	4603      	mov	r3, r0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d105      	bne.n	8019e64 <handle_api_call+0x6c>
    handle_graph(c, hm, h);
 8019e58:	687a      	ldr	r2, [r7, #4]
 8019e5a:	68b9      	ldr	r1, [r7, #8]
 8019e5c:	68f8      	ldr	r0, [r7, #12]
 8019e5e:	f7ff ff65 	bl	8019d2c <handle_graph>
}
 8019e62:	e009      	b.n	8019e78 <handle_api_call+0x80>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	685b      	ldr	r3, [r3, #4]
 8019e68:	9300      	str	r3, [sp, #0]
 8019e6a:	4b08      	ldr	r3, [pc, #32]	@ (8019e8c <handle_api_call+0x94>)
 8019e6c:	4a08      	ldr	r2, [pc, #32]	@ (8019e90 <handle_api_call+0x98>)
 8019e6e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8019e72:	68f8      	ldr	r0, [r7, #12]
 8019e74:	f7eb f956 	bl	8005124 <mg_http_reply>
}
 8019e78:	bf00      	nop
 8019e7a:	3710      	adds	r7, #16
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}
 8019e80:	08029c5c 	.word	0x08029c5c
 8019e84:	08029c14 	.word	0x08029c14
 8019e88:	08029c4c 	.word	0x08029c4c
 8019e8c:	08029f28 	.word	0x08029f28
 8019e90:	08029e70 	.word	0x08029e70

08019e94 <http_ev_handler>:
  s_device_change_version++;
}
#endif  // WIZARD_ENABLE_HTTP_UI

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8019e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e96:	b0ad      	sub	sp, #180	@ 0xb4
 8019e98:	af06      	add	r7, sp, #24
 8019e9a:	61f8      	str	r0, [r7, #28]
 8019e9c:	61b9      	str	r1, [r7, #24]
 8019e9e:	617a      	str	r2, [r7, #20]
#if WIZARD_ENABLE_HTTP_UI
  handle_uploads(c, ev, ev_data);
 8019ea0:	697a      	ldr	r2, [r7, #20]
 8019ea2:	69b9      	ldr	r1, [r7, #24]
 8019ea4:	69f8      	ldr	r0, [r7, #28]
 8019ea6:	f7ff fc13 	bl	80196d0 <handle_uploads>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 8019eaa:	69bb      	ldr	r3, [r7, #24]
 8019eac:	2b02      	cmp	r3, #2
 8019eae:	d120      	bne.n	8019ef2 <http_ev_handler+0x5e>
 8019eb0:	69fb      	ldr	r3, [r7, #28]
 8019eb2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8019eb6:	2b41      	cmp	r3, #65	@ 0x41
 8019eb8:	d11b      	bne.n	8019ef2 <http_ev_handler+0x5e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 8019eba:	69fb      	ldr	r3, [r7, #28]
 8019ebc:	3388      	adds	r3, #136	@ 0x88
 8019ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (as->fn() == false) {
 8019ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019ec6:	685b      	ldr	r3, [r3, #4]
 8019ec8:	4798      	blx	r3
 8019eca:	4603      	mov	r3, r0
 8019ecc:	f083 0301 	eor.w	r3, r3, #1
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	f000 8157 	beq.w	801a186 <http_ev_handler+0x2f2>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8019ed8:	4bae      	ldr	r3, [pc, #696]	@ (801a194 <http_ev_handler+0x300>)
 8019eda:	4aaf      	ldr	r2, [pc, #700]	@ (801a198 <http_ev_handler+0x304>)
 8019edc:	21c8      	movs	r1, #200	@ 0xc8
 8019ede:	69f8      	ldr	r0, [r7, #28]
 8019ee0:	f7eb f920 	bl	8005124 <mg_http_reply>
      memset(as, 0, sizeof(*as));
 8019ee4:	2208      	movs	r2, #8
 8019ee6:	2100      	movs	r1, #0
 8019ee8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8019eec:	f009 fbca 	bl	8023684 <memset>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 8019ef0:	e149      	b.n	801a186 <http_ev_handler+0x2f2>
    }
  } else
#endif
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 8019ef2:	69bb      	ldr	r3, [r7, #24]
 8019ef4:	2b0b      	cmp	r3, #11
 8019ef6:	f040 8115 	bne.w	801a124 <http_ev_handler+0x290>
 8019efa:	69fb      	ldr	r3, [r7, #28]
 8019efc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8019f00:	2b55      	cmp	r3, #85	@ 0x55
 8019f02:	f000 810f 	beq.w	801a124 <http_ev_handler+0x290>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8019f06:	697b      	ldr	r3, [r7, #20]
 8019f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
#if WIZARD_ENABLE_HTTP_UI
    struct apihandler *h = find_handler(hm);
 8019f0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8019f10:	f7ff f80e 	bl	8018f30 <find_handler>
 8019f14:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8019f18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8019f1c:	f7ff f8b0 	bl	8019080 <authenticate>
 8019f20:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 8019f24:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8019f28:	499c      	ldr	r1, [pc, #624]	@ (801a19c <http_ev_handler+0x308>)
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f7f4 fd60 	bl	800e9f0 <mg_str_s>
 8019f30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8019f34:	2300      	movs	r3, #0
 8019f36:	9300      	str	r3, [sp, #0]
 8019f38:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8019f3c:	cb0c      	ldmia	r3, {r2, r3}
 8019f3e:	3108      	adds	r1, #8
 8019f40:	c903      	ldmia	r1, {r0, r1}
 8019f42:	f7f4 fe5f 	bl	800ec04 <mg_match>
 8019f46:	4603      	mov	r3, r0
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d025      	beq.n	8019f98 <http_ev_handler+0x104>
 8019f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d019      	beq.n	8019f88 <http_ev_handler+0xf4>
        (u == NULL ||
 8019f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d01d      	beq.n	8019f98 <http_ev_handler+0x104>
         (h != NULL && (u->level < h->read_level ||
 8019f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019f66:	68db      	ldr	r3, [r3, #12]
 8019f68:	429a      	cmp	r2, r3
 8019f6a:	db0d      	blt.n	8019f88 <http_ev_handler+0xf4>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019f70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d00f      	beq.n	8019f98 <http_ev_handler+0x104>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019f82:	691b      	ldr	r3, [r3, #16]
 8019f84:	429a      	cmp	r2, r3
 8019f86:	da07      	bge.n	8019f98 <http_ev_handler+0x104>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8019f88:	4b85      	ldr	r3, [pc, #532]	@ (801a1a0 <http_ev_handler+0x30c>)
 8019f8a:	4a83      	ldr	r2, [pc, #524]	@ (801a198 <http_ev_handler+0x304>)
 8019f8c:	f240 1193 	movw	r1, #403	@ 0x193
 8019f90:	69f8      	ldr	r0, [r7, #28]
 8019f92:	f7eb f8c7 	bl	8005124 <mg_http_reply>
 8019f96:	e091      	b.n	801a0bc <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8019f98:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8019f9c:	4981      	ldr	r1, [pc, #516]	@ (801a1a4 <http_ev_handler+0x310>)
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f7f4 fd26 	bl	800e9f0 <mg_str_s>
 8019fa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8019fa8:	2300      	movs	r3, #0
 8019faa:	9300      	str	r3, [sp, #0]
 8019fac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8019fb0:	cb0c      	ldmia	r3, {r2, r3}
 8019fb2:	3108      	adds	r1, #8
 8019fb4:	c903      	ldmia	r1, {r0, r1}
 8019fb6:	f7f4 fe25 	bl	800ec04 <mg_match>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d005      	beq.n	8019fcc <http_ev_handler+0x138>
      handle_login(c, u);
 8019fc0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8019fc4:	69f8      	ldr	r0, [r7, #28]
 8019fc6:	f7ff f93b 	bl	8019240 <handle_login>
 8019fca:	e077      	b.n	801a0bc <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8019fcc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019fd0:	4975      	ldr	r1, [pc, #468]	@ (801a1a8 <http_ev_handler+0x314>)
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	f7f4 fd0c 	bl	800e9f0 <mg_str_s>
 8019fd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8019fdc:	2300      	movs	r3, #0
 8019fde:	9300      	str	r3, [sp, #0]
 8019fe0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019fe4:	cb0c      	ldmia	r3, {r2, r3}
 8019fe6:	3108      	adds	r1, #8
 8019fe8:	c903      	ldmia	r1, {r0, r1}
 8019fea:	f7f4 fe0b 	bl	800ec04 <mg_match>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d003      	beq.n	8019ffc <http_ev_handler+0x168>
      handle_logout(c);
 8019ff4:	69f8      	ldr	r0, [r7, #28]
 8019ff6:	f7ff f991 	bl	801931c <handle_logout>
 8019ffa:	e05f      	b.n	801a0bc <http_ev_handler+0x228>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 8019ffc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a000:	496a      	ldr	r1, [pc, #424]	@ (801a1ac <http_ev_handler+0x318>)
 801a002:	4618      	mov	r0, r3
 801a004:	f7f4 fcf4 	bl	800e9f0 <mg_str_s>
 801a008:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a00c:	2300      	movs	r3, #0
 801a00e:	9300      	str	r3, [sp, #0]
 801a010:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a014:	cb0c      	ldmia	r3, {r2, r3}
 801a016:	3108      	adds	r1, #8
 801a018:	c903      	ldmia	r1, {r0, r1}
 801a01a:	f7f4 fdf3 	bl	800ec04 <mg_match>
 801a01e:	4603      	mov	r3, r0
 801a020:	2b00      	cmp	r3, #0
 801a022:	d006      	beq.n	801a032 <http_ev_handler+0x19e>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 801a024:	4b62      	ldr	r3, [pc, #392]	@ (801a1b0 <http_ev_handler+0x31c>)
 801a026:	4a5c      	ldr	r2, [pc, #368]	@ (801a198 <http_ev_handler+0x304>)
 801a028:	21c8      	movs	r1, #200	@ 0xc8
 801a02a:	69f8      	ldr	r0, [r7, #28]
 801a02c:	f7eb f87a 	bl	8005124 <mg_http_reply>
 801a030:	e044      	b.n	801a0bc <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 801a032:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801a036:	495f      	ldr	r1, [pc, #380]	@ (801a1b4 <http_ev_handler+0x320>)
 801a038:	4618      	mov	r0, r3
 801a03a:	f7f4 fcd9 	bl	800e9f0 <mg_str_s>
 801a03e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a042:	2300      	movs	r3, #0
 801a044:	9300      	str	r3, [sp, #0]
 801a046:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801a04a:	cb0c      	ldmia	r3, {r2, r3}
 801a04c:	3108      	adds	r1, #8
 801a04e:	c903      	ldmia	r1, {r0, r1}
 801a050:	f7f4 fdd8 	bl	800ec04 <mg_match>
 801a054:	4603      	mov	r3, r0
 801a056:	2b00      	cmp	r3, #0
 801a058:	d00f      	beq.n	801a07a <http_ev_handler+0x1e6>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 801a05a:	4b57      	ldr	r3, [pc, #348]	@ (801a1b8 <http_ev_handler+0x324>)
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	9303      	str	r3, [sp, #12]
 801a060:	4b56      	ldr	r3, [pc, #344]	@ (801a1bc <http_ev_handler+0x328>)
 801a062:	9302      	str	r3, [sp, #8]
 801a064:	2300      	movs	r3, #0
 801a066:	9301      	str	r3, [sp, #4]
 801a068:	4b55      	ldr	r3, [pc, #340]	@ (801a1c0 <http_ev_handler+0x32c>)
 801a06a:	9300      	str	r3, [sp, #0]
 801a06c:	4b55      	ldr	r3, [pc, #340]	@ (801a1c4 <http_ev_handler+0x330>)
 801a06e:	4a4a      	ldr	r2, [pc, #296]	@ (801a198 <http_ev_handler+0x304>)
 801a070:	21c8      	movs	r1, #200	@ 0xc8
 801a072:	69f8      	ldr	r0, [r7, #28]
 801a074:	f7eb f856 	bl	8005124 <mg_http_reply>
 801a078:	e020      	b.n	801a0bc <http_ev_handler+0x228>
                    s_device_change_version);
    } else if (h != NULL) {
 801a07a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d007      	beq.n	801a092 <http_ev_handler+0x1fe>
      handle_api_call(c, hm, h);
 801a082:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a086:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a08a:	69f8      	ldr	r0, [r7, #28]
 801a08c:	f7ff feb4 	bl	8019df8 <handle_api_call>
 801a090:	e014      	b.n	801a0bc <http_ev_handler+0x228>
    } else
#endif  // WIZARD_ENABLE_HTTP_UI
    {
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 801a092:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a096:	2218      	movs	r2, #24
 801a098:	2100      	movs	r1, #0
 801a09a:	4618      	mov	r0, r3
 801a09c:	f009 faf2 	bl	8023684 <memset>
      opts.root_dir = "/web_root/";
 801a0a0:	4b49      	ldr	r3, [pc, #292]	@ (801a1c8 <http_ev_handler+0x334>)
 801a0a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 801a0a4:	4b49      	ldr	r3, [pc, #292]	@ (801a1cc <http_ev_handler+0x338>)
 801a0a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 801a0a8:	4b49      	ldr	r3, [pc, #292]	@ (801a1d0 <http_ev_handler+0x33c>)
 801a0aa:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 801a0ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a0b0:	461a      	mov	r2, r3
 801a0b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a0b6:	69f8      	ldr	r0, [r7, #28]
 801a0b8:	f7eb ff46 	bl	8005f48 <mg_http_serve_dir>
    }
    // Show this request
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s", c->id, hm->method.len,
 801a0bc:	4b45      	ldr	r3, [pc, #276]	@ (801a1d4 <http_ev_handler+0x340>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	2b02      	cmp	r3, #2
 801a0c2:	dd62      	ble.n	801a18a <http_ev_handler+0x2f6>
 801a0c4:	4b44      	ldr	r3, [pc, #272]	@ (801a1d8 <http_ev_handler+0x344>)
 801a0c6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801a0ca:	4944      	ldr	r1, [pc, #272]	@ (801a1dc <http_ev_handler+0x348>)
 801a0cc:	2003      	movs	r0, #3
 801a0ce:	f7ed fdc7 	bl	8007c60 <mg_log_prefix>
 801a0d2:	69fb      	ldr	r3, [r7, #28]
 801a0d4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 801a0d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a0da:	685e      	ldr	r6, [r3, #4]
 801a0dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	607b      	str	r3, [r7, #4]
 801a0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a0e8:	68db      	ldr	r3, [r3, #12]
 801a0ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a0ee:	6892      	ldr	r2, [r2, #8]
 801a0f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a0f4:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 801a0f8:	69f8      	ldr	r0, [r7, #28]
 801a0fa:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801a0fc:	280f      	cmp	r0, #15
 801a0fe:	d901      	bls.n	801a104 <http_ev_handler+0x270>
 801a100:	2003      	movs	r0, #3
 801a102:	e000      	b.n	801a106 <http_ev_handler+0x272>
 801a104:	2000      	movs	r0, #0
 801a106:	69fc      	ldr	r4, [r7, #28]
 801a108:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 801a10a:	3409      	adds	r4, #9
 801a10c:	9404      	str	r4, [sp, #16]
 801a10e:	9003      	str	r0, [sp, #12]
 801a110:	9102      	str	r1, [sp, #8]
 801a112:	9201      	str	r2, [sp, #4]
 801a114:	9300      	str	r3, [sp, #0]
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	4632      	mov	r2, r6
 801a11a:	4629      	mov	r1, r5
 801a11c:	4830      	ldr	r0, [pc, #192]	@ (801a1e0 <http_ev_handler+0x34c>)
 801a11e:	f7ed fdef 	bl	8007d00 <mg_log>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a122:	e032      	b.n	801a18a <http_ev_handler+0x2f6>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9]));
  } else if (ev == MG_EV_ACCEPT) {
 801a124:	69bb      	ldr	r3, [r7, #24]
 801a126:	2b05      	cmp	r3, #5
 801a128:	d130      	bne.n	801a18c <http_ev_handler+0x2f8>
    if (c->fn_data != NULL) {  // TLS listener
 801a12a:	69fb      	ldr	r3, [r7, #28]
 801a12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d02c      	beq.n	801a18c <http_ev_handler+0x2f8>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 801a132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a136:	2224      	movs	r2, #36	@ 0x24
 801a138:	2100      	movs	r1, #0
 801a13a:	4618      	mov	r0, r3
 801a13c:	f009 faa2 	bl	8023684 <memset>
      opts.cert = mg_str(TLS_CERT);
 801a140:	f107 0308 	add.w	r3, r7, #8
 801a144:	4927      	ldr	r1, [pc, #156]	@ (801a1e4 <http_ev_handler+0x350>)
 801a146:	4618      	mov	r0, r3
 801a148:	f7f4 fc52 	bl	800e9f0 <mg_str_s>
 801a14c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a150:	f107 0208 	add.w	r2, r7, #8
 801a154:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a158:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 801a15c:	f107 0308 	add.w	r3, r7, #8
 801a160:	4921      	ldr	r1, [pc, #132]	@ (801a1e8 <http_ev_handler+0x354>)
 801a162:	4618      	mov	r0, r3
 801a164:	f7f4 fc44 	bl	800e9f0 <mg_str_s>
 801a168:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a16c:	f107 0208 	add.w	r2, r7, #8
 801a170:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a174:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 801a178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a17c:	4619      	mov	r1, r3
 801a17e:	69f8      	ldr	r0, [r7, #28]
 801a180:	f7f7 fe30 	bl	8011de4 <mg_tls_init>
    }
  }
}
 801a184:	e002      	b.n	801a18c <http_ev_handler+0x2f8>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a186:	bf00      	nop
 801a188:	e000      	b.n	801a18c <http_ev_handler+0x2f8>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a18a:	bf00      	nop
}
 801a18c:	bf00      	nop
 801a18e:	379c      	adds	r7, #156	@ 0x9c
 801a190:	46bd      	mov	sp, r7
 801a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a194:	08029ecc 	.word	0x08029ecc
 801a198:	08029e70 	.word	0x08029e70
 801a19c:	08029eac 	.word	0x08029eac
 801a1a0:	08029eb4 	.word	0x08029eb4
 801a1a4:	08029f40 	.word	0x08029f40
 801a1a8:	08029f4c 	.word	0x08029f4c
 801a1ac:	08029f58 	.word	0x08029f58
 801a1b0:	08029f60 	.word	0x08029f60
 801a1b4:	08029f68 	.word	0x08029f68
 801a1b8:	24003ed0 	.word	0x24003ed0
 801a1bc:	08029b5c 	.word	0x08029b5c
 801a1c0:	0800d859 	.word	0x0800d859
 801a1c4:	08029f78 	.word	0x08029f78
 801a1c8:	08029f84 	.word	0x08029f84
 801a1cc:	24000008 	.word	0x24000008
 801a1d0:	08029f90 	.word	0x08029f90
 801a1d4:	24000240 	.word	0x24000240
 801a1d8:	080369d0 	.word	0x080369d0
 801a1dc:	08029c9c 	.word	0x08029c9c
 801a1e0:	08029fac 	.word	0x08029fac
 801a1e4:	08029fc8 	.word	0x08029fc8
 801a1e8:	0802a1a4 	.word	0x0802a1a4

0801a1ec <sntp_ev_handler>:
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS

#if WIZARD_ENABLE_SNTP
static uint64_t s_sntp_timer = 0;
bool s_sntp_response_received = false;
static void sntp_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a1ec:	b5b0      	push	{r4, r5, r7, lr}
 801a1ee:	b086      	sub	sp, #24
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	60f8      	str	r0, [r7, #12]
 801a1f4:	60b9      	str	r1, [r7, #8]
 801a1f6:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	2b12      	cmp	r3, #18
 801a1fc:	d115      	bne.n	801a22a <sntp_ev_handler+0x3e>
    uint64_t t = *(uint64_t *) ev_data;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a204:	e9c7 2304 	strd	r2, r3, [r7, #16]
    glue_sntp_on_time(t);
 801a208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a20c:	f7fe fb46 	bl	801889c <glue_sntp_on_time>
    s_sntp_response_received = true;
 801a210:	4b08      	ldr	r3, [pc, #32]	@ (801a234 <sntp_ev_handler+0x48>)
 801a212:	2201      	movs	r2, #1
 801a214:	701a      	strb	r2, [r3, #0]
    s_sntp_timer += (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 801a216:	4b08      	ldr	r3, [pc, #32]	@ (801a238 <sntp_ev_handler+0x4c>)
 801a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21c:	4907      	ldr	r1, [pc, #28]	@ (801a23c <sntp_ev_handler+0x50>)
 801a21e:	1854      	adds	r4, r2, r1
 801a220:	f143 0500 	adc.w	r5, r3, #0
 801a224:	4b04      	ldr	r3, [pc, #16]	@ (801a238 <sntp_ev_handler+0x4c>)
 801a226:	e9c3 4500 	strd	r4, r5, [r3]
  }
  (void) c;
}
 801a22a:	bf00      	nop
 801a22c:	3718      	adds	r7, #24
 801a22e:	46bd      	mov	sp, r7
 801a230:	bdb0      	pop	{r4, r5, r7, pc}
 801a232:	bf00      	nop
 801a234:	24003ee0 	.word	0x24003ee0
 801a238:	24003ed8 	.word	0x24003ed8
 801a23c:	0036ee80 	.word	0x0036ee80

0801a240 <sntp_timer>:

static void sntp_timer(void *param) {
 801a240:	b580      	push	{r7, lr}
 801a242:	b086      	sub	sp, #24
 801a244:	af02      	add	r7, sp, #8
 801a246:	6078      	str	r0, [r7, #4]
  // uint64_t t1 = mg_now(), t2 = mg_millis();
  uint64_t timeout = (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 801a248:	4a14      	ldr	r2, [pc, #80]	@ (801a29c <sntp_timer+0x5c>)
 801a24a:	f04f 0300 	mov.w	r3, #0
 801a24e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (s_sntp_response_received == false) timeout = 1000;
 801a252:	4b13      	ldr	r3, [pc, #76]	@ (801a2a0 <sntp_timer+0x60>)
 801a254:	781b      	ldrb	r3, [r3, #0]
 801a256:	f083 0301 	eor.w	r3, r3, #1
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d005      	beq.n	801a26c <sntp_timer+0x2c>
 801a260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a264:	f04f 0300 	mov.w	r3, #0
 801a268:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // This function is called every second. Once we received a response,
  // trigger SNTP sync less frequently, as set by the define
  if (mg_timer_expired(&s_sntp_timer, timeout, mg_millis())) {
 801a26c:	f7e6 fd20 	bl	8000cb0 <mg_millis>
 801a270:	4602      	mov	r2, r0
 801a272:	460b      	mov	r3, r1
 801a274:	e9cd 2300 	strd	r2, r3, [sp]
 801a278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a27c:	4809      	ldr	r0, [pc, #36]	@ (801a2a4 <sntp_timer+0x64>)
 801a27e:	f7f5 f871 	bl	800f364 <mg_timer_expired>
 801a282:	4603      	mov	r3, r0
 801a284:	2b00      	cmp	r3, #0
 801a286:	d005      	beq.n	801a294 <sntp_timer+0x54>
    mg_sntp_connect(param, WIZARD_SNTP_URL, sntp_ev_handler, NULL);
 801a288:	2300      	movs	r3, #0
 801a28a:	4a07      	ldr	r2, [pc, #28]	@ (801a2a8 <sntp_timer+0x68>)
 801a28c:	4907      	ldr	r1, [pc, #28]	@ (801a2ac <sntp_timer+0x6c>)
 801a28e:	6878      	ldr	r0, [r7, #4]
 801a290:	f7f4 fb70 	bl	800e974 <mg_sntp_connect>
  }
}
 801a294:	bf00      	nop
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	0036ee80 	.word	0x0036ee80
 801a2a0:	24003ee0 	.word	0x24003ee0
 801a2a4:	24003ed8 	.word	0x24003ed8
 801a2a8:	0801a1ed 	.word	0x0801a1ed
 801a2ac:	0802a288 	.word	0x0802a288

0801a2b0 <mqtt_event_handler>:
#endif  // WIZARD_ENABLE_SNTP

#if WIZARD_ENABLE_MQTT
struct mg_connection *g_mqtt_conn;  // MQTT client connection

static void mqtt_event_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b088      	sub	sp, #32
 801a2b4:	af02      	add	r7, sp, #8
 801a2b6:	60f8      	str	r0, [r7, #12]
 801a2b8:	60b9      	str	r1, [r7, #8]
 801a2ba:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_CONNECT) {
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	2b04      	cmp	r3, #4
 801a2c0:	d103      	bne.n	801a2ca <mqtt_event_handler+0x1a>
    glue_mqtt_tls_init(c);
 801a2c2:	68f8      	ldr	r0, [r7, #12]
 801a2c4:	f7fe f96e 	bl	80185a4 <glue_mqtt_tls_init>
    glue_mqtt_on_message(c, mm->topic, mm->data);
  } else if (ev == MG_EV_CLOSE) {
    MG_DEBUG(("%lu Closing", c->id));
    g_mqtt_conn = NULL;
  }
}
 801a2c8:	e037      	b.n	801a33a <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_OPEN) {
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	2b11      	cmp	r3, #17
 801a2ce:	d106      	bne.n	801a2de <mqtt_event_handler+0x2e>
    glue_mqtt_on_connect(c, *(int *) ev_data);
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4619      	mov	r1, r3
 801a2d6:	68f8      	ldr	r0, [r7, #12]
 801a2d8:	f7fe f9ac 	bl	8018634 <glue_mqtt_on_connect>
}
 801a2dc:	e02d      	b.n	801a33a <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_CMD) {
 801a2de:	68bb      	ldr	r3, [r7, #8]
 801a2e0:	2b0f      	cmp	r3, #15
 801a2e2:	d104      	bne.n	801a2ee <mqtt_event_handler+0x3e>
    glue_mqtt_on_cmd(c, ev_data);
 801a2e4:	6879      	ldr	r1, [r7, #4]
 801a2e6:	68f8      	ldr	r0, [r7, #12]
 801a2e8:	f7fe fa74 	bl	80187d4 <glue_mqtt_on_cmd>
}
 801a2ec:	e025      	b.n	801a33a <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_MSG) {
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	2b10      	cmp	r3, #16
 801a2f2:	d10b      	bne.n	801a30c <mqtt_event_handler+0x5c>
    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	617b      	str	r3, [r7, #20]
    glue_mqtt_on_message(c, mm->topic, mm->data);
 801a2f8:	697b      	ldr	r3, [r7, #20]
 801a2fa:	697a      	ldr	r2, [r7, #20]
 801a2fc:	68d9      	ldr	r1, [r3, #12]
 801a2fe:	9100      	str	r1, [sp, #0]
 801a300:	689b      	ldr	r3, [r3, #8]
 801a302:	ca06      	ldmia	r2, {r1, r2}
 801a304:	68f8      	ldr	r0, [r7, #12]
 801a306:	f7fe f9f5 	bl	80186f4 <glue_mqtt_on_message>
}
 801a30a:	e016      	b.n	801a33a <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_CLOSE) {
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	2b09      	cmp	r3, #9
 801a310:	d113      	bne.n	801a33a <mqtt_event_handler+0x8a>
    MG_DEBUG(("%lu Closing", c->id));
 801a312:	4b0c      	ldr	r3, [pc, #48]	@ (801a344 <mqtt_event_handler+0x94>)
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	2b02      	cmp	r3, #2
 801a318:	dd0c      	ble.n	801a334 <mqtt_event_handler+0x84>
 801a31a:	4b0b      	ldr	r3, [pc, #44]	@ (801a348 <mqtt_event_handler+0x98>)
 801a31c:	f240 2225 	movw	r2, #549	@ 0x225
 801a320:	490a      	ldr	r1, [pc, #40]	@ (801a34c <mqtt_event_handler+0x9c>)
 801a322:	2003      	movs	r0, #3
 801a324:	f7ed fc9c 	bl	8007c60 <mg_log_prefix>
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a32c:	4619      	mov	r1, r3
 801a32e:	4808      	ldr	r0, [pc, #32]	@ (801a350 <mqtt_event_handler+0xa0>)
 801a330:	f7ed fce6 	bl	8007d00 <mg_log>
    g_mqtt_conn = NULL;
 801a334:	4b07      	ldr	r3, [pc, #28]	@ (801a354 <mqtt_event_handler+0xa4>)
 801a336:	2200      	movs	r2, #0
 801a338:	601a      	str	r2, [r3, #0]
}
 801a33a:	bf00      	nop
 801a33c:	3718      	adds	r7, #24
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
 801a342:	bf00      	nop
 801a344:	24000240 	.word	0x24000240
 801a348:	080369e0 	.word	0x080369e0
 801a34c:	08029c9c 	.word	0x08029c9c
 801a350:	0802a2a4 	.word	0x0802a2a4
 801a354:	24003ee4 	.word	0x24003ee4

0801a358 <mqtt_timer>:

static void mqtt_timer(void *arg) {
 801a358:	b580      	push	{r7, lr}
 801a35a:	b084      	sub	sp, #16
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	60fb      	str	r3, [r7, #12]
  if (g_mqtt_conn == NULL) {
 801a364:	4b07      	ldr	r3, [pc, #28]	@ (801a384 <mqtt_timer+0x2c>)
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d106      	bne.n	801a37a <mqtt_timer+0x22>
    g_mqtt_conn = glue_mqtt_connect(mgr, mqtt_event_handler);
 801a36c:	4906      	ldr	r1, [pc, #24]	@ (801a388 <mqtt_timer+0x30>)
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f7fe fa56 	bl	8018820 <glue_mqtt_connect>
 801a374:	4603      	mov	r3, r0
 801a376:	4a03      	ldr	r2, [pc, #12]	@ (801a384 <mqtt_timer+0x2c>)
 801a378:	6013      	str	r3, [r2, #0]
  }
}
 801a37a:	bf00      	nop
 801a37c:	3710      	adds	r7, #16
 801a37e:	46bd      	mov	sp, r7
 801a380:	bd80      	pop	{r7, pc}
 801a382:	bf00      	nop
 801a384:	24003ee4 	.word	0x24003ee4
 801a388:	0801a2b1 	.word	0x0801a2b1

0801a38c <handle_modbus_pdu>:
#endif  // WIZARD_ENABLE_MQTT

#if WIZARD_ENABLE_MODBUS
static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 801a38c:	b590      	push	{r4, r7, lr}
 801a38e:	b0d1      	sub	sp, #324	@ 0x144
 801a390:	af00      	add	r7, sp, #0
 801a392:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a396:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801a39a:	6018      	str	r0, [r3, #0]
 801a39c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3a0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a3a4:	6019      	str	r1, [r3, #0]
 801a3a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801a3ae:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 801a3b0:	4bcf      	ldr	r3, [pc, #828]	@ (801a6f0 <handle_modbus_pdu+0x364>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	2b02      	cmp	r3, #2
 801a3b6:	dd13      	ble.n	801a3e0 <handle_modbus_pdu+0x54>
 801a3b8:	4bce      	ldr	r3, [pc, #824]	@ (801a6f4 <handle_modbus_pdu+0x368>)
 801a3ba:	f240 2235 	movw	r2, #565	@ 0x235
 801a3be:	49ce      	ldr	r1, [pc, #824]	@ (801a6f8 <handle_modbus_pdu+0x36c>)
 801a3c0:	2003      	movs	r0, #3
 801a3c2:	f7ed fc4d 	bl	8007c60 <mg_log_prefix>
 801a3c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3ca:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 801a3ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a3d6:	6812      	ldr	r2, [r2, #0]
 801a3d8:	6819      	ldr	r1, [r3, #0]
 801a3da:	48c8      	ldr	r0, [pc, #800]	@ (801a6fc <handle_modbus_pdu+0x370>)
 801a3dc:	f7ed fc90 	bl	8007d00 <mg_log>
  mg_hexdump(buf, len);
 801a3e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3e4:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 801a3e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a3f0:	6811      	ldr	r1, [r2, #0]
 801a3f2:	6818      	ldr	r0, [r3, #0]
 801a3f4:	f7ed fcba 	bl	8007d6c <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 801a3f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a3fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	2b0b      	cmp	r3, #11
 801a404:	d80f      	bhi.n	801a426 <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 801a406:	4bba      	ldr	r3, [pc, #744]	@ (801a6f0 <handle_modbus_pdu+0x364>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	f340 81f5 	ble.w	801a7fa <handle_modbus_pdu+0x46e>
 801a410:	4bb8      	ldr	r3, [pc, #736]	@ (801a6f4 <handle_modbus_pdu+0x368>)
 801a412:	f240 2239 	movw	r2, #569	@ 0x239
 801a416:	49b8      	ldr	r1, [pc, #736]	@ (801a6f8 <handle_modbus_pdu+0x36c>)
 801a418:	2001      	movs	r0, #1
 801a41a:	f7ed fc21 	bl	8007c60 <mg_log_prefix>
 801a41e:	48b8      	ldr	r0, [pc, #736]	@ (801a700 <handle_modbus_pdu+0x374>)
 801a420:	f7ed fc6e 	bl	8007d00 <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 801a424:	e1e9      	b.n	801a7fa <handle_modbus_pdu+0x46e>
    uint8_t func = buf[7];  // Function
 801a426:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a42a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	79db      	ldrb	r3, [r3, #7]
 801a432:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 801a436:	2300      	movs	r3, #0
 801a438:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 801a43c:	2300      	movs	r3, #0
 801a43e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 801a442:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a446:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a44a:	f107 0014 	add.w	r0, r7, #20
 801a44e:	2208      	movs	r2, #8
 801a450:	6819      	ldr	r1, [r3, #0]
 801a452:	f009 fa0c 	bl	802386e <memcpy>
    if (func == 6) {  // write single holding register
 801a456:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a45a:	2b06      	cmp	r3, #6
 801a45c:	d155      	bne.n	801a50a <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a45e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a462:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	3308      	adds	r3, #8
 801a46a:	881b      	ldrh	r3, [r3, #0]
 801a46c:	4618      	mov	r0, r3
 801a46e:	f7fd f97a 	bl	8017766 <mg_ntohs>
 801a472:	4603      	mov	r3, r0
 801a474:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 801a478:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a47c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	330a      	adds	r3, #10
 801a484:	881b      	ldrh	r3, [r3, #0]
 801a486:	4618      	mov	r0, r3
 801a488:	f7fd f96d 	bl	8017766 <mg_ntohs>
 801a48c:	4603      	mov	r3, r0
 801a48e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = glue_modbus_write_reg(start, value);
 801a492:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 801a496:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 801a49a:	4611      	mov	r1, r2
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7fe fa71 	bl	8018984 <glue_modbus_write_reg>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 801a4a8:	f107 0314 	add.w	r3, r7, #20
 801a4ac:	f103 0408 	add.w	r4, r3, #8
 801a4b0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f7fd f956 	bl	8017766 <mg_ntohs>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 801a4be:	f107 0314 	add.w	r3, r7, #20
 801a4c2:	f103 040a 	add.w	r4, r3, #10
 801a4c6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f7fd f94b 	bl	8017766 <mg_ntohs>
 801a4d0:	4603      	mov	r3, r0
 801a4d2:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 801a4d4:	230c      	movs	r3, #12
 801a4d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801a4da:	4b85      	ldr	r3, [pc, #532]	@ (801a6f0 <handle_modbus_pdu+0x364>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	2b02      	cmp	r3, #2
 801a4e0:	f340 813f 	ble.w	801a762 <handle_modbus_pdu+0x3d6>
 801a4e4:	4b83      	ldr	r3, [pc, #524]	@ (801a6f4 <handle_modbus_pdu+0x368>)
 801a4e6:	f240 224b 	movw	r2, #587	@ 0x24b
 801a4ea:	4983      	ldr	r1, [pc, #524]	@ (801a6f8 <handle_modbus_pdu+0x36c>)
 801a4ec:	2003      	movs	r0, #3
 801a4ee:	f7ed fbb7 	bl	8007c60 <mg_log_prefix>
 801a4f2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d001      	beq.n	801a4fe <handle_modbus_pdu+0x172>
 801a4fa:	4b82      	ldr	r3, [pc, #520]	@ (801a704 <handle_modbus_pdu+0x378>)
 801a4fc:	e000      	b.n	801a500 <handle_modbus_pdu+0x174>
 801a4fe:	4b82      	ldr	r3, [pc, #520]	@ (801a708 <handle_modbus_pdu+0x37c>)
 801a500:	4619      	mov	r1, r3
 801a502:	4882      	ldr	r0, [pc, #520]	@ (801a70c <handle_modbus_pdu+0x380>)
 801a504:	f7ed fbfc 	bl	8007d00 <mg_log>
 801a508:	e12b      	b.n	801a762 <handle_modbus_pdu+0x3d6>
    } else if (func == 16) {  // Write multiple
 801a50a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a50e:	2b10      	cmp	r3, #16
 801a510:	f040 808b 	bne.w	801a62a <handle_modbus_pdu+0x29e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a514:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a518:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	3308      	adds	r3, #8
 801a520:	881b      	ldrh	r3, [r3, #0]
 801a522:	4618      	mov	r0, r3
 801a524:	f7fd f91f 	bl	8017766 <mg_ntohs>
 801a528:	4603      	mov	r3, r0
 801a52a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 801a52e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a532:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	330a      	adds	r3, #10
 801a53a:	881b      	ldrh	r3, [r3, #0]
 801a53c:	4618      	mov	r0, r3
 801a53e:	f7fd f912 	bl	8017766 <mg_ntohs>
 801a542:	4603      	mov	r3, r0
 801a544:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 801a548:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a54c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	330d      	adds	r3, #13
 801a554:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 801a558:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801a55c:	3305      	adds	r3, #5
 801a55e:	005b      	lsls	r3, r3, #1
 801a560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a564:	f080 80fd 	bcs.w	801a762 <handle_modbus_pdu+0x3d6>
        for (i = 0; i < num; i++) {
 801a568:	2300      	movs	r3, #0
 801a56a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801a56e:	e023      	b.n	801a5b8 <handle_modbus_pdu+0x22c>
              glue_modbus_write_reg((uint16_t) (start + i), mg_htons(data[i]));
 801a570:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 801a574:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801a578:	4413      	add	r3, r2
 801a57a:	b29c      	uxth	r4, r3
 801a57c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801a580:	005b      	lsls	r3, r3, #1
 801a582:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801a586:	4413      	add	r3, r2
 801a588:	881b      	ldrh	r3, [r3, #0]
 801a58a:	4618      	mov	r0, r3
 801a58c:	f7fd f8eb 	bl	8017766 <mg_ntohs>
 801a590:	4603      	mov	r3, r0
 801a592:	4619      	mov	r1, r3
 801a594:	4620      	mov	r0, r4
 801a596:	f7fe f9f5 	bl	8018984 <glue_modbus_write_reg>
 801a59a:	4603      	mov	r3, r0
 801a59c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 801a5a0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a5a4:	f083 0301 	eor.w	r3, r3, #1
 801a5a8:	b2db      	uxtb	r3, r3
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d10b      	bne.n	801a5c6 <handle_modbus_pdu+0x23a>
        for (i = 0; i < num; i++) {
 801a5ae:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801a5b2:	3301      	adds	r3, #1
 801a5b4:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801a5b8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 801a5bc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d3d5      	bcc.n	801a570 <handle_modbus_pdu+0x1e4>
 801a5c4:	e000      	b.n	801a5c8 <handle_modbus_pdu+0x23c>
          if (success == false) break;
 801a5c6:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 801a5c8:	f107 0314 	add.w	r3, r7, #20
 801a5cc:	f103 0408 	add.w	r4, r3, #8
 801a5d0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	f7fd f8c6 	bl	8017766 <mg_ntohs>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 801a5de:	f107 0314 	add.w	r3, r7, #20
 801a5e2:	f103 040a 	add.w	r4, r3, #10
 801a5e6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7fd f8bb 	bl	8017766 <mg_ntohs>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 801a5f4:	230c      	movs	r3, #12
 801a5f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801a5fa:	4b3d      	ldr	r3, [pc, #244]	@ (801a6f0 <handle_modbus_pdu+0x364>)
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	2b02      	cmp	r3, #2
 801a600:	f340 80af 	ble.w	801a762 <handle_modbus_pdu+0x3d6>
 801a604:	4b3b      	ldr	r3, [pc, #236]	@ (801a6f4 <handle_modbus_pdu+0x368>)
 801a606:	f240 2259 	movw	r2, #601	@ 0x259
 801a60a:	493b      	ldr	r1, [pc, #236]	@ (801a6f8 <handle_modbus_pdu+0x36c>)
 801a60c:	2003      	movs	r0, #3
 801a60e:	f7ed fb27 	bl	8007c60 <mg_log_prefix>
 801a612:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a616:	2b00      	cmp	r3, #0
 801a618:	d001      	beq.n	801a61e <handle_modbus_pdu+0x292>
 801a61a:	4b3a      	ldr	r3, [pc, #232]	@ (801a704 <handle_modbus_pdu+0x378>)
 801a61c:	e000      	b.n	801a620 <handle_modbus_pdu+0x294>
 801a61e:	4b3a      	ldr	r3, [pc, #232]	@ (801a708 <handle_modbus_pdu+0x37c>)
 801a620:	4619      	mov	r1, r3
 801a622:	483a      	ldr	r0, [pc, #232]	@ (801a70c <handle_modbus_pdu+0x380>)
 801a624:	f7ed fb6c 	bl	8007d00 <mg_log>
 801a628:	e09b      	b.n	801a762 <handle_modbus_pdu+0x3d6>
    } else if (func == 3 || func == 4) {  // Read multiple
 801a62a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a62e:	2b03      	cmp	r3, #3
 801a630:	d004      	beq.n	801a63c <handle_modbus_pdu+0x2b0>
 801a632:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a636:	2b04      	cmp	r3, #4
 801a638:	f040 8093 	bne.w	801a762 <handle_modbus_pdu+0x3d6>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a63c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a640:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	3308      	adds	r3, #8
 801a648:	881b      	ldrh	r3, [r3, #0]
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7fd f88b 	bl	8017766 <mg_ntohs>
 801a650:	4603      	mov	r3, r0
 801a652:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 801a656:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a65a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	330a      	adds	r3, #10
 801a662:	881b      	ldrh	r3, [r3, #0]
 801a664:	4618      	mov	r0, r3
 801a666:	f7fd f87e 	bl	8017766 <mg_ntohs>
 801a66a:	4603      	mov	r3, r0
 801a66c:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 801a670:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801a674:	005b      	lsls	r3, r3, #1
 801a676:	3309      	adds	r3, #9
 801a678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801a67c:	d271      	bcs.n	801a762 <handle_modbus_pdu+0x3d6>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 801a67e:	f107 0314 	add.w	r3, r7, #20
 801a682:	3309      	adds	r3, #9
 801a684:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 801a688:	2300      	movs	r3, #0
 801a68a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 801a68e:	e027      	b.n	801a6e0 <handle_modbus_pdu+0x354>
          success = glue_modbus_read_reg((uint16_t) (start + i), &val);
 801a690:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 801a694:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801a698:	4413      	add	r3, r2
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	f507 728d 	add.w	r2, r7, #282	@ 0x11a
 801a6a0:	4611      	mov	r1, r2
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f7fe f920 	bl	80188e8 <glue_modbus_read_reg>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 801a6ae:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a6b2:	f083 0301 	eor.w	r3, r3, #1
 801a6b6:	b2db      	uxtb	r3, r3
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d129      	bne.n	801a710 <handle_modbus_pdu+0x384>
          data[i] = mg_htons(val);
 801a6bc:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 801a6c0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801a6c4:	005b      	lsls	r3, r3, #1
 801a6c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801a6ca:	18d4      	adds	r4, r2, r3
 801a6cc:	4608      	mov	r0, r1
 801a6ce:	f7fd f84a 	bl	8017766 <mg_ntohs>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 801a6d6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801a6da:	3301      	adds	r3, #1
 801a6dc:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 801a6e0:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 801a6e4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d3d1      	bcc.n	801a690 <handle_modbus_pdu+0x304>
 801a6ec:	e011      	b.n	801a712 <handle_modbus_pdu+0x386>
 801a6ee:	bf00      	nop
 801a6f0:	24000240 	.word	0x24000240
 801a6f4:	080369f4 	.word	0x080369f4
 801a6f8:	08029c9c 	.word	0x08029c9c
 801a6fc:	0802a2b0 	.word	0x0802a2b0
 801a700:	0802a2d4 	.word	0x0802a2d4
 801a704:	0802a2e4 	.word	0x0802a2e4
 801a708:	0802a2ec 	.word	0x0802a2ec
 801a70c:	0802a2f4 	.word	0x0802a2f4
          if (success == false) break;
 801a710:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 801a712:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801a716:	b2db      	uxtb	r3, r3
 801a718:	005b      	lsls	r3, r3, #1
 801a71a:	b2da      	uxtb	r2, r3
 801a71c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a720:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801a724:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 801a726:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a72a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801a72e:	7a1b      	ldrb	r3, [r3, #8]
 801a730:	3309      	adds	r3, #9
 801a732:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801a736:	4b33      	ldr	r3, [pc, #204]	@ (801a804 <handle_modbus_pdu+0x478>)
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	2b02      	cmp	r3, #2
 801a73c:	dd11      	ble.n	801a762 <handle_modbus_pdu+0x3d6>
 801a73e:	4b32      	ldr	r3, [pc, #200]	@ (801a808 <handle_modbus_pdu+0x47c>)
 801a740:	f240 2267 	movw	r2, #615	@ 0x267
 801a744:	4931      	ldr	r1, [pc, #196]	@ (801a80c <handle_modbus_pdu+0x480>)
 801a746:	2003      	movs	r0, #3
 801a748:	f7ed fa8a 	bl	8007c60 <mg_log_prefix>
 801a74c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a750:	2b00      	cmp	r3, #0
 801a752:	d001      	beq.n	801a758 <handle_modbus_pdu+0x3cc>
 801a754:	4b2e      	ldr	r3, [pc, #184]	@ (801a810 <handle_modbus_pdu+0x484>)
 801a756:	e000      	b.n	801a75a <handle_modbus_pdu+0x3ce>
 801a758:	4b2e      	ldr	r3, [pc, #184]	@ (801a814 <handle_modbus_pdu+0x488>)
 801a75a:	4619      	mov	r1, r3
 801a75c:	482e      	ldr	r0, [pc, #184]	@ (801a818 <handle_modbus_pdu+0x48c>)
 801a75e:	f7ed facf 	bl	8007d00 <mg_log>
    if (success == false) {
 801a762:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a766:	f083 0301 	eor.w	r3, r3, #1
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d015      	beq.n	801a79c <handle_modbus_pdu+0x410>
      response_len = 9;
 801a770:	2309      	movs	r3, #9
 801a772:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 801a776:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a77a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801a77e:	79db      	ldrb	r3, [r3, #7]
 801a780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a784:	b2da      	uxtb	r2, r3
 801a786:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a78a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801a78e:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 801a790:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a794:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801a798:	2204      	movs	r2, #4
 801a79a:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 801a79c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a7a0:	b29b      	uxth	r3, r3
 801a7a2:	3b06      	subs	r3, #6
 801a7a4:	b29a      	uxth	r2, r3
 801a7a6:	f107 0314 	add.w	r3, r7, #20
 801a7aa:	1d1c      	adds	r4, r3, #4
 801a7ac:	4610      	mov	r0, r2
 801a7ae:	f7fc ffda 	bl	8017766 <mg_ntohs>
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 801a7b6:	4b13      	ldr	r3, [pc, #76]	@ (801a804 <handle_modbus_pdu+0x478>)
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	2b02      	cmp	r3, #2
 801a7bc:	dd0b      	ble.n	801a7d6 <handle_modbus_pdu+0x44a>
 801a7be:	4b12      	ldr	r3, [pc, #72]	@ (801a808 <handle_modbus_pdu+0x47c>)
 801a7c0:	f44f 721c 	mov.w	r2, #624	@ 0x270
 801a7c4:	4911      	ldr	r1, [pc, #68]	@ (801a80c <handle_modbus_pdu+0x480>)
 801a7c6:	2003      	movs	r0, #3
 801a7c8:	f7ed fa4a 	bl	8007c60 <mg_log_prefix>
 801a7cc:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801a7d0:	4812      	ldr	r0, [pc, #72]	@ (801a81c <handle_modbus_pdu+0x490>)
 801a7d2:	f7ed fa95 	bl	8007d00 <mg_log>
    mg_hexdump(response, response_len);
 801a7d6:	f107 0314 	add.w	r3, r7, #20
 801a7da:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801a7de:	4618      	mov	r0, r3
 801a7e0:	f7ed fac4 	bl	8007d6c <mg_hexdump>
    mg_send(c, response, response_len);
 801a7e4:	f107 0114 	add.w	r1, r7, #20
 801a7e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a7ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801a7f0:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801a7f4:	6818      	ldr	r0, [r3, #0]
 801a7f6:	f7f2 fabd 	bl	800cd74 <mg_send>
}
 801a7fa:	bf00      	nop
 801a7fc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801a800:	46bd      	mov	sp, r7
 801a802:	bd90      	pop	{r4, r7, pc}
 801a804:	24000240 	.word	0x24000240
 801a808:	080369f4 	.word	0x080369f4
 801a80c:	08029c9c 	.word	0x08029c9c
 801a810:	0802a2e4 	.word	0x0802a2e4
 801a814:	0802a2ec 	.word	0x0802a2ec
 801a818:	0802a2f4 	.word	0x0802a2f4
 801a81c:	0802a308 	.word	0x0802a308

0801a820 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a820:	b580      	push	{r7, lr}
 801a822:	b086      	sub	sp, #24
 801a824:	af00      	add	r7, sp, #0
 801a826:	60f8      	str	r0, [r7, #12]
 801a828:	60b9      	str	r1, [r7, #8]
 801a82a:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 801a82c:	68bb      	ldr	r3, [r7, #8]
 801a82e:	2b07      	cmp	r3, #7
 801a830:	d13a      	bne.n	801a8a8 <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a836:	2b06      	cmp	r3, #6
 801a838:	d933      	bls.n	801a8a2 <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a83e:	3304      	adds	r3, #4
 801a840:	881b      	ldrh	r3, [r3, #0]
 801a842:	4618      	mov	r0, r3
 801a844:	f7fc ff8f 	bl	8017766 <mg_ntohs>
 801a848:	4603      	mov	r3, r0
 801a84a:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 801a84c:	4b18      	ldr	r3, [pc, #96]	@ (801a8b0 <modbus_ev_handler+0x90>)
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	2b01      	cmp	r3, #1
 801a852:	dd0e      	ble.n	801a872 <modbus_ev_handler+0x52>
 801a854:	4b17      	ldr	r3, [pc, #92]	@ (801a8b4 <modbus_ev_handler+0x94>)
 801a856:	f44f 721f 	mov.w	r2, #636	@ 0x27c
 801a85a:	4917      	ldr	r1, [pc, #92]	@ (801a8b8 <modbus_ev_handler+0x98>)
 801a85c:	2002      	movs	r0, #2
 801a85e:	f7ed f9ff 	bl	8007c60 <mg_log_prefix>
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801a866:	8afb      	ldrh	r3, [r7, #22]
 801a868:	3306      	adds	r3, #6
 801a86a:	461a      	mov	r2, r3
 801a86c:	4813      	ldr	r0, [pc, #76]	@ (801a8bc <modbus_ev_handler+0x9c>)
 801a86e:	f7ed fa47 	bl	8007d00 <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a876:	8afb      	ldrh	r3, [r7, #22]
 801a878:	3306      	adds	r3, #6
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d313      	bcc.n	801a8a6 <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a882:	8afb      	ldrh	r3, [r7, #22]
 801a884:	3306      	adds	r3, #6
 801a886:	461a      	mov	r2, r3
 801a888:	68f8      	ldr	r0, [r7, #12]
 801a88a:	f7ff fd7f 	bl	801a38c <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801a894:	8afb      	ldrh	r3, [r7, #22]
 801a896:	3306      	adds	r3, #6
 801a898:	461a      	mov	r2, r3
 801a89a:	2100      	movs	r1, #0
 801a89c:	f7ec faf0 	bl	8006e80 <mg_iobuf_del>
 801a8a0:	e002      	b.n	801a8a8 <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 801a8a2:	bf00      	nop
 801a8a4:	e000      	b.n	801a8a8 <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 801a8a6:	bf00      	nop
  }
  (void) ev_data;
}
 801a8a8:	3718      	adds	r7, #24
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	bd80      	pop	{r7, pc}
 801a8ae:	bf00      	nop
 801a8b0:	24000240 	.word	0x24000240
 801a8b4:	08036a08 	.word	0x08036a08
 801a8b8:	08029c9c 	.word	0x08029c9c
 801a8bc:	0802a324 	.word	0x0802a324

0801a8c0 <mongoose_init>:
#endif  // WIZARD_ENABLE_MODBUS

void mongoose_init(void) {
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b09e      	sub	sp, #120	@ 0x78
 801a8c4:	af04      	add	r7, sp, #16
  mg_mgr_init(&g_mgr);      // Initialise event manager
 801a8c6:	484a      	ldr	r0, [pc, #296]	@ (801a9f0 <mongoose_init+0x130>)
 801a8c8:	f7ee ffc8 	bl	800985c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 801a8cc:	4b49      	ldr	r3, [pc, #292]	@ (801a9f4 <mongoose_init+0x134>)
 801a8ce:	2203      	movs	r2, #3
 801a8d0:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 801a8d2:	4b48      	ldr	r3, [pc, #288]	@ (801a9f4 <mongoose_init+0x134>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	2b01      	cmp	r3, #1
 801a8d8:	dd09      	ble.n	801a8ee <mongoose_init+0x2e>
 801a8da:	4b47      	ldr	r3, [pc, #284]	@ (801a9f8 <mongoose_init+0x138>)
 801a8dc:	f240 228a 	movw	r2, #650	@ 0x28a
 801a8e0:	4946      	ldr	r1, [pc, #280]	@ (801a9fc <mongoose_init+0x13c>)
 801a8e2:	2002      	movs	r0, #2
 801a8e4:	f7ed f9bc 	bl	8007c60 <mg_log_prefix>
 801a8e8:	4845      	ldr	r0, [pc, #276]	@ (801aa00 <mongoose_init+0x140>)
 801a8ea:	f7ed fa09 	bl	8007d00 <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	4a44      	ldr	r2, [pc, #272]	@ (801aa04 <mongoose_init+0x144>)
 801a8f2:	4945      	ldr	r1, [pc, #276]	@ (801aa08 <mongoose_init+0x148>)
 801a8f4:	483e      	ldr	r0, [pc, #248]	@ (801a9f0 <mongoose_init+0x130>)
 801a8f6:	f7ec f9af 	bl	8006c58 <mg_http_listen>
#endif
#if WIZARD_ENABLE_HTTPS
  MG_INFO(("Starting HTTPS listener"));
 801a8fa:	4b3e      	ldr	r3, [pc, #248]	@ (801a9f4 <mongoose_init+0x134>)
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	2b01      	cmp	r3, #1
 801a900:	dd09      	ble.n	801a916 <mongoose_init+0x56>
 801a902:	4b3d      	ldr	r3, [pc, #244]	@ (801a9f8 <mongoose_init+0x138>)
 801a904:	f240 228e 	movw	r2, #654	@ 0x28e
 801a908:	493c      	ldr	r1, [pc, #240]	@ (801a9fc <mongoose_init+0x13c>)
 801a90a:	2002      	movs	r0, #2
 801a90c:	f7ed f9a8 	bl	8007c60 <mg_log_prefix>
 801a910:	483e      	ldr	r0, [pc, #248]	@ (801aa0c <mongoose_init+0x14c>)
 801a912:	f7ed f9f5 	bl	8007d00 <mg_log>
  mg_http_listen(&g_mgr, HTTPS_URL, http_ev_handler, "");
 801a916:	4b3e      	ldr	r3, [pc, #248]	@ (801aa10 <mongoose_init+0x150>)
 801a918:	4a3a      	ldr	r2, [pc, #232]	@ (801aa04 <mongoose_init+0x144>)
 801a91a:	493e      	ldr	r1, [pc, #248]	@ (801aa14 <mongoose_init+0x154>)
 801a91c:	4834      	ldr	r0, [pc, #208]	@ (801a9f0 <mongoose_init+0x130>)
 801a91e:	f7ec f99b 	bl	8006c58 <mg_http_listen>
#endif

#if WIZARD_ENABLE_SNTP
  MG_INFO(("Starting SNTP timer"));
 801a922:	4b34      	ldr	r3, [pc, #208]	@ (801a9f4 <mongoose_init+0x134>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2b01      	cmp	r3, #1
 801a928:	dd09      	ble.n	801a93e <mongoose_init+0x7e>
 801a92a:	4b33      	ldr	r3, [pc, #204]	@ (801a9f8 <mongoose_init+0x138>)
 801a92c:	f240 2293 	movw	r2, #659	@ 0x293
 801a930:	4932      	ldr	r1, [pc, #200]	@ (801a9fc <mongoose_init+0x13c>)
 801a932:	2002      	movs	r0, #2
 801a934:	f7ed f994 	bl	8007c60 <mg_log_prefix>
 801a938:	4837      	ldr	r0, [pc, #220]	@ (801aa18 <mongoose_init+0x158>)
 801a93a:	f7ed f9e1 	bl	8007d00 <mg_log>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, sntp_timer, &g_mgr);
 801a93e:	4b2c      	ldr	r3, [pc, #176]	@ (801a9f0 <mongoose_init+0x130>)
 801a940:	9302      	str	r3, [sp, #8]
 801a942:	4b36      	ldr	r3, [pc, #216]	@ (801aa1c <mongoose_init+0x15c>)
 801a944:	9301      	str	r3, [sp, #4]
 801a946:	2301      	movs	r3, #1
 801a948:	9300      	str	r3, [sp, #0]
 801a94a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a94e:	f04f 0300 	mov.w	r3, #0
 801a952:	4827      	ldr	r0, [pc, #156]	@ (801a9f0 <mongoose_init+0x130>)
 801a954:	f7ee ff58 	bl	8009808 <mg_timer_add>
#if WIZARD_DNS_TYPE == 2
  g_mgr.dns4.url = WIZARD_DNS_URL;
#endif

#if WIZARD_ENABLE_MQTT
  MG_INFO(("Starting MQTT reconnection timer"));
 801a958:	4b26      	ldr	r3, [pc, #152]	@ (801a9f4 <mongoose_init+0x134>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	2b01      	cmp	r3, #1
 801a95e:	dd09      	ble.n	801a974 <mongoose_init+0xb4>
 801a960:	4b25      	ldr	r3, [pc, #148]	@ (801a9f8 <mongoose_init+0x138>)
 801a962:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 801a966:	4925      	ldr	r1, [pc, #148]	@ (801a9fc <mongoose_init+0x13c>)
 801a968:	2002      	movs	r0, #2
 801a96a:	f7ed f979 	bl	8007c60 <mg_log_prefix>
 801a96e:	482c      	ldr	r0, [pc, #176]	@ (801aa20 <mongoose_init+0x160>)
 801a970:	f7ed f9c6 	bl	8007d00 <mg_log>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, mqtt_timer, &g_mgr);
 801a974:	4b1e      	ldr	r3, [pc, #120]	@ (801a9f0 <mongoose_init+0x130>)
 801a976:	9302      	str	r3, [sp, #8]
 801a978:	4b2a      	ldr	r3, [pc, #168]	@ (801aa24 <mongoose_init+0x164>)
 801a97a:	9301      	str	r3, [sp, #4]
 801a97c:	2301      	movs	r3, #1
 801a97e:	9300      	str	r3, [sp, #0]
 801a980:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a984:	f04f 0300 	mov.w	r3, #0
 801a988:	4819      	ldr	r0, [pc, #100]	@ (801a9f0 <mongoose_init+0x130>)
 801a98a:	f7ee ff3d 	bl	8009808 <mg_timer_add>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 801a98e:	1d38      	adds	r0, r7, #4
 801a990:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 801a994:	4a24      	ldr	r2, [pc, #144]	@ (801aa28 <mongoose_init+0x168>)
 801a996:	2164      	movs	r1, #100	@ 0x64
 801a998:	f7f2 fd18 	bl	800d3cc <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 801a99c:	4b15      	ldr	r3, [pc, #84]	@ (801a9f4 <mongoose_init+0x134>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	2b01      	cmp	r3, #1
 801a9a2:	dd0b      	ble.n	801a9bc <mongoose_init+0xfc>
 801a9a4:	4b14      	ldr	r3, [pc, #80]	@ (801a9f8 <mongoose_init+0x138>)
 801a9a6:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 801a9aa:	4914      	ldr	r1, [pc, #80]	@ (801a9fc <mongoose_init+0x13c>)
 801a9ac:	2002      	movs	r0, #2
 801a9ae:	f7ed f957 	bl	8007c60 <mg_log_prefix>
 801a9b2:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 801a9b6:	481d      	ldr	r0, [pc, #116]	@ (801aa2c <mongoose_init+0x16c>)
 801a9b8:	f7ed f9a2 	bl	8007d00 <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 801a9bc:	1d39      	adds	r1, r7, #4
 801a9be:	2300      	movs	r3, #0
 801a9c0:	4a1b      	ldr	r2, [pc, #108]	@ (801aa30 <mongoose_init+0x170>)
 801a9c2:	480b      	ldr	r0, [pc, #44]	@ (801a9f0 <mongoose_init+0x130>)
 801a9c4:	f7ee fe7e 	bl	80096c4 <mg_listen>
  }
#endif

  MG_INFO(("Mongoose init complete, calling user init"));
 801a9c8:	4b0a      	ldr	r3, [pc, #40]	@ (801a9f4 <mongoose_init+0x134>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	2b01      	cmp	r3, #1
 801a9ce:	dd09      	ble.n	801a9e4 <mongoose_init+0x124>
 801a9d0:	4b09      	ldr	r3, [pc, #36]	@ (801a9f8 <mongoose_init+0x138>)
 801a9d2:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801a9d6:	4909      	ldr	r1, [pc, #36]	@ (801a9fc <mongoose_init+0x13c>)
 801a9d8:	2002      	movs	r0, #2
 801a9da:	f7ed f941 	bl	8007c60 <mg_log_prefix>
 801a9de:	4815      	ldr	r0, [pc, #84]	@ (801aa34 <mongoose_init+0x174>)
 801a9e0:	f7ed f98e 	bl	8007d00 <mg_log>
  glue_init_1();
 801a9e4:	f7fd fda4 	bl	8018530 <glue_init_1>

}
 801a9e8:	bf00      	nop
 801a9ea:	3768      	adds	r7, #104	@ 0x68
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	24003e88 	.word	0x24003e88
 801a9f4:	24000240 	.word	0x24000240
 801a9f8:	08036a1c 	.word	0x08036a1c
 801a9fc:	08029c9c 	.word	0x08029c9c
 801aa00:	0802a33c 	.word	0x0802a33c
 801aa04:	08019e95 	.word	0x08019e95
 801aa08:	0802a354 	.word	0x0802a354
 801aa0c:	0802a368 	.word	0x0802a368
 801aa10:	08029d08 	.word	0x08029d08
 801aa14:	0802a380 	.word	0x0802a380
 801aa18:	0802a394 	.word	0x0802a394
 801aa1c:	0801a241 	.word	0x0801a241
 801aa20:	0802a3a8 	.word	0x0802a3a8
 801aa24:	0801a359 	.word	0x0801a359
 801aa28:	0802a3cc 	.word	0x0802a3cc
 801aa2c:	0802a3e0 	.word	0x0802a3e0
 801aa30:	0801a821 	.word	0x0801a821
 801aa34:	0802a408 	.word	0x0802a408

0801aa38 <mongoose_poll>:

void mongoose_poll(void) {
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	af00      	add	r7, sp, #0
  glue_lock();
 801aa3c:	f7fd fda4 	bl	8018588 <glue_lock>
  mg_mgr_poll(&g_mgr, 50);
 801aa40:	2132      	movs	r1, #50	@ 0x32
 801aa42:	4803      	ldr	r0, [pc, #12]	@ (801aa50 <mongoose_poll+0x18>)
 801aa44:	f7f2 f8c6 	bl	800cbd4 <mg_mgr_poll>
  glue_unlock();
 801aa48:	f7fd fda5 	bl	8018596 <glue_unlock>
}
 801aa4c:	bf00      	nop
 801aa4e:	bd80      	pop	{r7, pc}
 801aa50:	24003e88 	.word	0x24003e88

0801aa54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801aa54:	b480      	push	{r7}
 801aa56:	b083      	sub	sp, #12
 801aa58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801aa5a:	4b0a      	ldr	r3, [pc, #40]	@ (801aa84 <HAL_MspInit+0x30>)
 801aa5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801aa60:	4a08      	ldr	r2, [pc, #32]	@ (801aa84 <HAL_MspInit+0x30>)
 801aa62:	f043 0302 	orr.w	r3, r3, #2
 801aa66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801aa6a:	4b06      	ldr	r3, [pc, #24]	@ (801aa84 <HAL_MspInit+0x30>)
 801aa6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801aa70:	f003 0302 	and.w	r3, r3, #2
 801aa74:	607b      	str	r3, [r7, #4]
 801aa76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801aa78:	bf00      	nop
 801aa7a:	370c      	adds	r7, #12
 801aa7c:	46bd      	mov	sp, r7
 801aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa82:	4770      	bx	lr
 801aa84:	58024400 	.word	0x58024400

0801aa88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b08e      	sub	sp, #56	@ 0x38
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801aa90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801aa94:	2200      	movs	r2, #0
 801aa96:	601a      	str	r2, [r3, #0]
 801aa98:	605a      	str	r2, [r3, #4]
 801aa9a:	609a      	str	r2, [r3, #8]
 801aa9c:	60da      	str	r2, [r3, #12]
 801aa9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	4a5d      	ldr	r2, [pc, #372]	@ (801ac1c <HAL_ETH_MspInit+0x194>)
 801aaa6:	4293      	cmp	r3, r2
 801aaa8:	f040 80b3 	bne.w	801ac12 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801aaac:	4b5c      	ldr	r3, [pc, #368]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aaae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801aab2:	4a5b      	ldr	r2, [pc, #364]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801aab8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801aabc:	4b58      	ldr	r3, [pc, #352]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aabe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801aac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801aac6:	623b      	str	r3, [r7, #32]
 801aac8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801aaca:	4b55      	ldr	r3, [pc, #340]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aacc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801aad0:	4a53      	ldr	r2, [pc, #332]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801aad6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801aada:	4b51      	ldr	r3, [pc, #324]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aadc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801aae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801aae4:	61fb      	str	r3, [r7, #28]
 801aae6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 801aae8:	4b4d      	ldr	r3, [pc, #308]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aaea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801aaee:	4a4c      	ldr	r2, [pc, #304]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aaf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801aaf4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801aaf8:	4b49      	ldr	r3, [pc, #292]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801aafa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801aafe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ab02:	61bb      	str	r3, [r7, #24]
 801ab04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801ab06:	4b46      	ldr	r3, [pc, #280]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab0c:	4a44      	ldr	r2, [pc, #272]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab0e:	f043 0304 	orr.w	r3, r3, #4
 801ab12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ab16:	4b42      	ldr	r3, [pc, #264]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab1c:	f003 0304 	and.w	r3, r3, #4
 801ab20:	617b      	str	r3, [r7, #20]
 801ab22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ab24:	4b3e      	ldr	r3, [pc, #248]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab2a:	4a3d      	ldr	r2, [pc, #244]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab2c:	f043 0301 	orr.w	r3, r3, #1
 801ab30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ab34:	4b3a      	ldr	r3, [pc, #232]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab3a:	f003 0301 	and.w	r3, r3, #1
 801ab3e:	613b      	str	r3, [r7, #16]
 801ab40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801ab42:	4b37      	ldr	r3, [pc, #220]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab48:	4a35      	ldr	r2, [pc, #212]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab4a:	f043 0302 	orr.w	r3, r3, #2
 801ab4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ab52:	4b33      	ldr	r3, [pc, #204]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab58:	f003 0302 	and.w	r3, r3, #2
 801ab5c:	60fb      	str	r3, [r7, #12]
 801ab5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801ab60:	4b2f      	ldr	r3, [pc, #188]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab66:	4a2e      	ldr	r2, [pc, #184]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ab6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ab70:	4b2b      	ldr	r3, [pc, #172]	@ (801ac20 <HAL_ETH_MspInit+0x198>)
 801ab72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ab76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ab7a:	60bb      	str	r3, [r7, #8]
 801ab7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801ab7e:	2332      	movs	r3, #50	@ 0x32
 801ab80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ab82:	2302      	movs	r3, #2
 801ab84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ab86:	2300      	movs	r3, #0
 801ab88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801ab8e:	230b      	movs	r3, #11
 801ab90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ab92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ab96:	4619      	mov	r1, r3
 801ab98:	4822      	ldr	r0, [pc, #136]	@ (801ac24 <HAL_ETH_MspInit+0x19c>)
 801ab9a:	f001 fdd3 	bl	801c744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801ab9e:	2386      	movs	r3, #134	@ 0x86
 801aba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801aba2:	2302      	movs	r3, #2
 801aba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aba6:	2300      	movs	r3, #0
 801aba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801abaa:	2300      	movs	r3, #0
 801abac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801abae:	230b      	movs	r3, #11
 801abb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801abb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801abb6:	4619      	mov	r1, r3
 801abb8:	481b      	ldr	r0, [pc, #108]	@ (801ac28 <HAL_ETH_MspInit+0x1a0>)
 801abba:	f001 fdc3 	bl	801c744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 801abbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801abc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801abc4:	2302      	movs	r3, #2
 801abc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801abc8:	2300      	movs	r3, #0
 801abca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801abcc:	2300      	movs	r3, #0
 801abce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801abd0:	230b      	movs	r3, #11
 801abd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801abd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801abd8:	4619      	mov	r1, r3
 801abda:	4814      	ldr	r0, [pc, #80]	@ (801ac2c <HAL_ETH_MspInit+0x1a4>)
 801abdc:	f001 fdb2 	bl	801c744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 801abe0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801abe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801abe6:	2302      	movs	r3, #2
 801abe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801abea:	2300      	movs	r3, #0
 801abec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801abee:	2300      	movs	r3, #0
 801abf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801abf2:	230b      	movs	r3, #11
 801abf4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801abf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801abfa:	4619      	mov	r1, r3
 801abfc:	480c      	ldr	r0, [pc, #48]	@ (801ac30 <HAL_ETH_MspInit+0x1a8>)
 801abfe:	f001 fda1 	bl	801c744 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 801ac02:	2200      	movs	r2, #0
 801ac04:	2100      	movs	r1, #0
 801ac06:	203d      	movs	r0, #61	@ 0x3d
 801ac08:	f000 fbcf 	bl	801b3aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801ac0c:	203d      	movs	r0, #61	@ 0x3d
 801ac0e:	f000 fbe6 	bl	801b3de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 801ac12:	bf00      	nop
 801ac14:	3738      	adds	r7, #56	@ 0x38
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd80      	pop	{r7, pc}
 801ac1a:	bf00      	nop
 801ac1c:	40028000 	.word	0x40028000
 801ac20:	58024400 	.word	0x58024400
 801ac24:	58020800 	.word	0x58020800
 801ac28:	58020000 	.word	0x58020000
 801ac2c:	58020400 	.word	0x58020400
 801ac30:	58021800 	.word	0x58021800

0801ac34 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b0b4      	sub	sp, #208	@ 0xd0
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ac3c:	f107 0310 	add.w	r3, r7, #16
 801ac40:	22c0      	movs	r2, #192	@ 0xc0
 801ac42:	2100      	movs	r1, #0
 801ac44:	4618      	mov	r0, r3
 801ac46:	f008 fd1d 	bl	8023684 <memset>
  if(hrng->Instance==RNG)
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	4a14      	ldr	r2, [pc, #80]	@ (801aca0 <HAL_RNG_MspInit+0x6c>)
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d121      	bne.n	801ac98 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 801ac54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801ac58:	f04f 0300 	mov.w	r3, #0
 801ac5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 801ac60:	2300      	movs	r3, #0
 801ac62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ac66:	f107 0310 	add.w	r3, r7, #16
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	f002 ff5a 	bl	801db24 <HAL_RCCEx_PeriphCLKConfig>
 801ac70:	4603      	mov	r3, r0
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d001      	beq.n	801ac7a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 801ac76:	f7e6 fa97 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 801ac7a:	4b0a      	ldr	r3, [pc, #40]	@ (801aca4 <HAL_RNG_MspInit+0x70>)
 801ac7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801ac80:	4a08      	ldr	r2, [pc, #32]	@ (801aca4 <HAL_RNG_MspInit+0x70>)
 801ac82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac86:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 801ac8a:	4b06      	ldr	r3, [pc, #24]	@ (801aca4 <HAL_RNG_MspInit+0x70>)
 801ac8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801ac90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ac94:	60fb      	str	r3, [r7, #12]
 801ac96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 801ac98:	bf00      	nop
 801ac9a:	37d0      	adds	r7, #208	@ 0xd0
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}
 801aca0:	48021800 	.word	0x48021800
 801aca4:	58024400 	.word	0x58024400

0801aca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b0be      	sub	sp, #248	@ 0xf8
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801acb0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801acb4:	2200      	movs	r2, #0
 801acb6:	601a      	str	r2, [r3, #0]
 801acb8:	605a      	str	r2, [r3, #4]
 801acba:	609a      	str	r2, [r3, #8]
 801acbc:	60da      	str	r2, [r3, #12]
 801acbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801acc0:	f107 0320 	add.w	r3, r7, #32
 801acc4:	22c0      	movs	r2, #192	@ 0xc0
 801acc6:	2100      	movs	r1, #0
 801acc8:	4618      	mov	r0, r3
 801acca:	f008 fcdb 	bl	8023684 <memset>
  if(huart->Instance==USART2)
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	4a63      	ldr	r2, [pc, #396]	@ (801ae60 <HAL_UART_MspInit+0x1b8>)
 801acd4:	4293      	cmp	r3, r2
 801acd6:	d172      	bne.n	801adbe <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 801acd8:	f04f 0202 	mov.w	r2, #2
 801acdc:	f04f 0300 	mov.w	r3, #0
 801ace0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801ace4:	2300      	movs	r3, #0
 801ace6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801acea:	f107 0320 	add.w	r3, r7, #32
 801acee:	4618      	mov	r0, r3
 801acf0:	f002 ff18 	bl	801db24 <HAL_RCCEx_PeriphCLKConfig>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d001      	beq.n	801acfe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 801acfa:	f7e6 fa55 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801acfe:	4b59      	ldr	r3, [pc, #356]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ad04:	4a57      	ldr	r2, [pc, #348]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ad0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801ad0e:	4b55      	ldr	r3, [pc, #340]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ad14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ad18:	61fb      	str	r3, [r7, #28]
 801ad1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ad1c:	4b51      	ldr	r3, [pc, #324]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ad22:	4a50      	ldr	r2, [pc, #320]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad24:	f043 0301 	orr.w	r3, r3, #1
 801ad28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ad2c:	4b4d      	ldr	r3, [pc, #308]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ad32:	f003 0301 	and.w	r3, r3, #1
 801ad36:	61bb      	str	r3, [r7, #24]
 801ad38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801ad3a:	4b4a      	ldr	r3, [pc, #296]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ad40:	4a48      	ldr	r2, [pc, #288]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad42:	f043 0308 	orr.w	r3, r3, #8
 801ad46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ad4a:	4b46      	ldr	r3, [pc, #280]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ad4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ad50:	f003 0308 	and.w	r3, r3, #8
 801ad54:	617b      	str	r3, [r7, #20]
 801ad56:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801ad58:	2308      	movs	r3, #8
 801ad5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ad5e:	2302      	movs	r3, #2
 801ad60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ad64:	2300      	movs	r3, #0
 801ad66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801ad70:	2307      	movs	r3, #7
 801ad72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ad76:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801ad7a:	4619      	mov	r1, r3
 801ad7c:	483a      	ldr	r0, [pc, #232]	@ (801ae68 <HAL_UART_MspInit+0x1c0>)
 801ad7e:	f001 fce1 	bl	801c744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801ad82:	2320      	movs	r3, #32
 801ad84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ad88:	2302      	movs	r3, #2
 801ad8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ad94:	2300      	movs	r3, #0
 801ad96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801ad9a:	2307      	movs	r3, #7
 801ad9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ada0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801ada4:	4619      	mov	r1, r3
 801ada6:	4831      	ldr	r0, [pc, #196]	@ (801ae6c <HAL_UART_MspInit+0x1c4>)
 801ada8:	f001 fccc 	bl	801c744 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801adac:	2200      	movs	r2, #0
 801adae:	2100      	movs	r1, #0
 801adb0:	2026      	movs	r0, #38	@ 0x26
 801adb2:	f000 fafa 	bl	801b3aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801adb6:	2026      	movs	r0, #38	@ 0x26
 801adb8:	f000 fb11 	bl	801b3de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801adbc:	e04b      	b.n	801ae56 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	4a2b      	ldr	r2, [pc, #172]	@ (801ae70 <HAL_UART_MspInit+0x1c8>)
 801adc4:	4293      	cmp	r3, r2
 801adc6:	d146      	bne.n	801ae56 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 801adc8:	f04f 0202 	mov.w	r2, #2
 801adcc:	f04f 0300 	mov.w	r3, #0
 801add0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801add4:	2300      	movs	r3, #0
 801add6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801adda:	f107 0320 	add.w	r3, r7, #32
 801adde:	4618      	mov	r0, r3
 801ade0:	f002 fea0 	bl	801db24 <HAL_RCCEx_PeriphCLKConfig>
 801ade4:	4603      	mov	r3, r0
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d001      	beq.n	801adee <HAL_UART_MspInit+0x146>
      Error_Handler();
 801adea:	f7e6 f9dd 	bl	80011a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 801adee:	4b1d      	ldr	r3, [pc, #116]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801adf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801adf4:	4a1b      	ldr	r2, [pc, #108]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801adf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801adfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801adfe:	4b19      	ldr	r3, [pc, #100]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ae00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ae04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801ae08:	613b      	str	r3, [r7, #16]
 801ae0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801ae0c:	4b15      	ldr	r3, [pc, #84]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ae0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ae12:	4a14      	ldr	r2, [pc, #80]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ae14:	f043 0308 	orr.w	r3, r3, #8
 801ae18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801ae1c:	4b11      	ldr	r3, [pc, #68]	@ (801ae64 <HAL_UART_MspInit+0x1bc>)
 801ae1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ae22:	f003 0308 	and.w	r3, r3, #8
 801ae26:	60fb      	str	r3, [r7, #12]
 801ae28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801ae2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801ae2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ae32:	2302      	movs	r3, #2
 801ae34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ae38:	2300      	movs	r3, #0
 801ae3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ae3e:	2300      	movs	r3, #0
 801ae40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801ae44:	2307      	movs	r3, #7
 801ae46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801ae4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801ae4e:	4619      	mov	r1, r3
 801ae50:	4806      	ldr	r0, [pc, #24]	@ (801ae6c <HAL_UART_MspInit+0x1c4>)
 801ae52:	f001 fc77 	bl	801c744 <HAL_GPIO_Init>
}
 801ae56:	bf00      	nop
 801ae58:	37f8      	adds	r7, #248	@ 0xf8
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	bd80      	pop	{r7, pc}
 801ae5e:	bf00      	nop
 801ae60:	40004400 	.word	0x40004400
 801ae64:	58024400 	.word	0x58024400
 801ae68:	58020000 	.word	0x58020000
 801ae6c:	58020c00 	.word	0x58020c00
 801ae70:	40004800 	.word	0x40004800

0801ae74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801ae74:	b480      	push	{r7}
 801ae76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801ae78:	bf00      	nop
 801ae7a:	e7fd      	b.n	801ae78 <NMI_Handler+0x4>

0801ae7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801ae80:	bf00      	nop
 801ae82:	e7fd      	b.n	801ae80 <HardFault_Handler+0x4>

0801ae84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ae84:	b480      	push	{r7}
 801ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801ae88:	bf00      	nop
 801ae8a:	e7fd      	b.n	801ae88 <MemManage_Handler+0x4>

0801ae8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801ae8c:	b480      	push	{r7}
 801ae8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801ae90:	bf00      	nop
 801ae92:	e7fd      	b.n	801ae90 <BusFault_Handler+0x4>

0801ae94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801ae94:	b480      	push	{r7}
 801ae96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801ae98:	bf00      	nop
 801ae9a:	e7fd      	b.n	801ae98 <UsageFault_Handler+0x4>

0801ae9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801ae9c:	b480      	push	{r7}
 801ae9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801aea0:	bf00      	nop
 801aea2:	46bd      	mov	sp, r7
 801aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea8:	4770      	bx	lr

0801aeaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801aeaa:	b480      	push	{r7}
 801aeac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801aeae:	bf00      	nop
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb6:	4770      	bx	lr

0801aeb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801aeb8:	b480      	push	{r7}
 801aeba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801aebc:	bf00      	nop
 801aebe:	46bd      	mov	sp, r7
 801aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec4:	4770      	bx	lr

0801aec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801aec6:	b580      	push	{r7, lr}
 801aec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801aeca:	f000 f953 	bl	801b174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801aece:	bf00      	nop
 801aed0:	bd80      	pop	{r7, pc}
	...

0801aed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801aed4:	b580      	push	{r7, lr}
 801aed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 801aed8:	4802      	ldr	r0, [pc, #8]	@ (801aee4 <USART2_IRQHandler+0x10>)
 801aeda:	f004 fe31 	bl	801fb40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801aede:	bf00      	nop
 801aee0:	bd80      	pop	{r7, pc}
 801aee2:	bf00      	nop
 801aee4:	24000b40 	.word	0x24000b40

0801aee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801aee8:	b480      	push	{r7}
 801aeea:	af00      	add	r7, sp, #0
  return 1;
 801aeec:	2301      	movs	r3, #1
}
 801aeee:	4618      	mov	r0, r3
 801aef0:	46bd      	mov	sp, r7
 801aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef6:	4770      	bx	lr

0801aef8 <_kill>:

int _kill(int pid, int sig)
{
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b082      	sub	sp, #8
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]
 801af00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801af02:	f008 fc7f 	bl	8023804 <__errno>
 801af06:	4603      	mov	r3, r0
 801af08:	2216      	movs	r2, #22
 801af0a:	601a      	str	r2, [r3, #0]
  return -1;
 801af0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801af10:	4618      	mov	r0, r3
 801af12:	3708      	adds	r7, #8
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}

0801af18 <_exit>:

void _exit (int status)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b082      	sub	sp, #8
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801af20:	f04f 31ff 	mov.w	r1, #4294967295
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7ff ffe7 	bl	801aef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 801af2a:	bf00      	nop
 801af2c:	e7fd      	b.n	801af2a <_exit+0x12>

0801af2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801af2e:	b580      	push	{r7, lr}
 801af30:	b086      	sub	sp, #24
 801af32:	af00      	add	r7, sp, #0
 801af34:	60f8      	str	r0, [r7, #12]
 801af36:	60b9      	str	r1, [r7, #8]
 801af38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801af3a:	2300      	movs	r3, #0
 801af3c:	617b      	str	r3, [r7, #20]
 801af3e:	e00a      	b.n	801af56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801af40:	f3af 8000 	nop.w
 801af44:	4601      	mov	r1, r0
 801af46:	68bb      	ldr	r3, [r7, #8]
 801af48:	1c5a      	adds	r2, r3, #1
 801af4a:	60ba      	str	r2, [r7, #8]
 801af4c:	b2ca      	uxtb	r2, r1
 801af4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801af50:	697b      	ldr	r3, [r7, #20]
 801af52:	3301      	adds	r3, #1
 801af54:	617b      	str	r3, [r7, #20]
 801af56:	697a      	ldr	r2, [r7, #20]
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	429a      	cmp	r2, r3
 801af5c:	dbf0      	blt.n	801af40 <_read+0x12>
  }

  return len;
 801af5e:	687b      	ldr	r3, [r7, #4]
}
 801af60:	4618      	mov	r0, r3
 801af62:	3718      	adds	r7, #24
 801af64:	46bd      	mov	sp, r7
 801af66:	bd80      	pop	{r7, pc}

0801af68 <_close>:
  }
  return len;
}

int _close(int file)
{
 801af68:	b480      	push	{r7}
 801af6a:	b083      	sub	sp, #12
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801af70:	f04f 33ff 	mov.w	r3, #4294967295
}
 801af74:	4618      	mov	r0, r3
 801af76:	370c      	adds	r7, #12
 801af78:	46bd      	mov	sp, r7
 801af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7e:	4770      	bx	lr

0801af80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 801af80:	b480      	push	{r7}
 801af82:	b083      	sub	sp, #12
 801af84:	af00      	add	r7, sp, #0
 801af86:	6078      	str	r0, [r7, #4]
 801af88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801af8a:	683b      	ldr	r3, [r7, #0]
 801af8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801af90:	605a      	str	r2, [r3, #4]
  return 0;
 801af92:	2300      	movs	r3, #0
}
 801af94:	4618      	mov	r0, r3
 801af96:	370c      	adds	r7, #12
 801af98:	46bd      	mov	sp, r7
 801af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9e:	4770      	bx	lr

0801afa0 <_isatty>:

int _isatty(int file)
{
 801afa0:	b480      	push	{r7}
 801afa2:	b083      	sub	sp, #12
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801afa8:	2301      	movs	r3, #1
}
 801afaa:	4618      	mov	r0, r3
 801afac:	370c      	adds	r7, #12
 801afae:	46bd      	mov	sp, r7
 801afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb4:	4770      	bx	lr

0801afb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801afb6:	b480      	push	{r7}
 801afb8:	b085      	sub	sp, #20
 801afba:	af00      	add	r7, sp, #0
 801afbc:	60f8      	str	r0, [r7, #12]
 801afbe:	60b9      	str	r1, [r7, #8]
 801afc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801afc2:	2300      	movs	r3, #0
}
 801afc4:	4618      	mov	r0, r3
 801afc6:	3714      	adds	r7, #20
 801afc8:	46bd      	mov	sp, r7
 801afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afce:	4770      	bx	lr

0801afd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b086      	sub	sp, #24
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801afd8:	4a14      	ldr	r2, [pc, #80]	@ (801b02c <_sbrk+0x5c>)
 801afda:	4b15      	ldr	r3, [pc, #84]	@ (801b030 <_sbrk+0x60>)
 801afdc:	1ad3      	subs	r3, r2, r3
 801afde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801afe0:	697b      	ldr	r3, [r7, #20]
 801afe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801afe4:	4b13      	ldr	r3, [pc, #76]	@ (801b034 <_sbrk+0x64>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d102      	bne.n	801aff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801afec:	4b11      	ldr	r3, [pc, #68]	@ (801b034 <_sbrk+0x64>)
 801afee:	4a12      	ldr	r2, [pc, #72]	@ (801b038 <_sbrk+0x68>)
 801aff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801aff2:	4b10      	ldr	r3, [pc, #64]	@ (801b034 <_sbrk+0x64>)
 801aff4:	681a      	ldr	r2, [r3, #0]
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	4413      	add	r3, r2
 801affa:	693a      	ldr	r2, [r7, #16]
 801affc:	429a      	cmp	r2, r3
 801affe:	d207      	bcs.n	801b010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801b000:	f008 fc00 	bl	8023804 <__errno>
 801b004:	4603      	mov	r3, r0
 801b006:	220c      	movs	r2, #12
 801b008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801b00a:	f04f 33ff 	mov.w	r3, #4294967295
 801b00e:	e009      	b.n	801b024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801b010:	4b08      	ldr	r3, [pc, #32]	@ (801b034 <_sbrk+0x64>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801b016:	4b07      	ldr	r3, [pc, #28]	@ (801b034 <_sbrk+0x64>)
 801b018:	681a      	ldr	r2, [r3, #0]
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	4413      	add	r3, r2
 801b01e:	4a05      	ldr	r2, [pc, #20]	@ (801b034 <_sbrk+0x64>)
 801b020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801b022:	68fb      	ldr	r3, [r7, #12]
}
 801b024:	4618      	mov	r0, r3
 801b026:	3718      	adds	r7, #24
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	24080000 	.word	0x24080000
 801b030:	00000400 	.word	0x00000400
 801b034:	24003ee8 	.word	0x24003ee8
 801b038:	24004040 	.word	0x24004040

0801b03c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801b03c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801b074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801b040:	f7e5 fd72 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801b044:	480c      	ldr	r0, [pc, #48]	@ (801b078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801b046:	490d      	ldr	r1, [pc, #52]	@ (801b07c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801b048:	4a0d      	ldr	r2, [pc, #52]	@ (801b080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801b04a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801b04c:	e002      	b.n	801b054 <LoopCopyDataInit>

0801b04e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801b04e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801b050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801b052:	3304      	adds	r3, #4

0801b054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801b054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801b056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801b058:	d3f9      	bcc.n	801b04e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801b05a:	4a0a      	ldr	r2, [pc, #40]	@ (801b084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801b05c:	4c0a      	ldr	r4, [pc, #40]	@ (801b088 <LoopFillZerobss+0x22>)
  movs r3, #0
 801b05e:	2300      	movs	r3, #0
  b LoopFillZerobss
 801b060:	e001      	b.n	801b066 <LoopFillZerobss>

0801b062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801b062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801b064:	3204      	adds	r2, #4

0801b066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801b066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801b068:	d3fb      	bcc.n	801b062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801b06a:	f008 fbd1 	bl	8023810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801b06e:	f7e5 feb1 	bl	8000dd4 <main>
  bx  lr
 801b072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801b074:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801b078:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801b07c:	24000968 	.word	0x24000968
  ldr r2, =_sidata
 801b080:	08036eec 	.word	0x08036eec
  ldr r2, =_sbss
 801b084:	24000a28 	.word	0x24000a28
  ldr r4, =_ebss
 801b088:	2400403c 	.word	0x2400403c

0801b08c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801b08c:	e7fe      	b.n	801b08c <ADC3_IRQHandler>
	...

0801b090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b082      	sub	sp, #8
 801b094:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b096:	2003      	movs	r0, #3
 801b098:	f000 f97c 	bl	801b394 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b09c:	f002 fb6c 	bl	801d778 <HAL_RCC_GetSysClockFreq>
 801b0a0:	4602      	mov	r2, r0
 801b0a2:	4b15      	ldr	r3, [pc, #84]	@ (801b0f8 <HAL_Init+0x68>)
 801b0a4:	699b      	ldr	r3, [r3, #24]
 801b0a6:	0a1b      	lsrs	r3, r3, #8
 801b0a8:	f003 030f 	and.w	r3, r3, #15
 801b0ac:	4913      	ldr	r1, [pc, #76]	@ (801b0fc <HAL_Init+0x6c>)
 801b0ae:	5ccb      	ldrb	r3, [r1, r3]
 801b0b0:	f003 031f 	and.w	r3, r3, #31
 801b0b4:	fa22 f303 	lsr.w	r3, r2, r3
 801b0b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b0ba:	4b0f      	ldr	r3, [pc, #60]	@ (801b0f8 <HAL_Init+0x68>)
 801b0bc:	699b      	ldr	r3, [r3, #24]
 801b0be:	f003 030f 	and.w	r3, r3, #15
 801b0c2:	4a0e      	ldr	r2, [pc, #56]	@ (801b0fc <HAL_Init+0x6c>)
 801b0c4:	5cd3      	ldrb	r3, [r2, r3]
 801b0c6:	f003 031f 	and.w	r3, r3, #31
 801b0ca:	687a      	ldr	r2, [r7, #4]
 801b0cc:	fa22 f303 	lsr.w	r3, r2, r3
 801b0d0:	4a0b      	ldr	r2, [pc, #44]	@ (801b100 <HAL_Init+0x70>)
 801b0d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b0d4:	4a0b      	ldr	r2, [pc, #44]	@ (801b104 <HAL_Init+0x74>)
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801b0da:	2000      	movs	r0, #0
 801b0dc:	f000 f814 	bl	801b108 <HAL_InitTick>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d001      	beq.n	801b0ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801b0e6:	2301      	movs	r3, #1
 801b0e8:	e002      	b.n	801b0f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801b0ea:	f7ff fcb3 	bl	801aa54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801b0ee:	2300      	movs	r3, #0
}
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	3708      	adds	r7, #8
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}
 801b0f8:	58024400 	.word	0x58024400
 801b0fc:	0802a434 	.word	0x0802a434
 801b100:	24000004 	.word	0x24000004
 801b104:	24000000 	.word	0x24000000

0801b108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801b110:	4b15      	ldr	r3, [pc, #84]	@ (801b168 <HAL_InitTick+0x60>)
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d101      	bne.n	801b11c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801b118:	2301      	movs	r3, #1
 801b11a:	e021      	b.n	801b160 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801b11c:	4b13      	ldr	r3, [pc, #76]	@ (801b16c <HAL_InitTick+0x64>)
 801b11e:	681a      	ldr	r2, [r3, #0]
 801b120:	4b11      	ldr	r3, [pc, #68]	@ (801b168 <HAL_InitTick+0x60>)
 801b122:	781b      	ldrb	r3, [r3, #0]
 801b124:	4619      	mov	r1, r3
 801b126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b12a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b12e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b132:	4618      	mov	r0, r3
 801b134:	f000 f961 	bl	801b3fa <HAL_SYSTICK_Config>
 801b138:	4603      	mov	r3, r0
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d001      	beq.n	801b142 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801b13e:	2301      	movs	r3, #1
 801b140:	e00e      	b.n	801b160 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	2b0f      	cmp	r3, #15
 801b146:	d80a      	bhi.n	801b15e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801b148:	2200      	movs	r2, #0
 801b14a:	6879      	ldr	r1, [r7, #4]
 801b14c:	f04f 30ff 	mov.w	r0, #4294967295
 801b150:	f000 f92b 	bl	801b3aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801b154:	4a06      	ldr	r2, [pc, #24]	@ (801b170 <HAL_InitTick+0x68>)
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801b15a:	2300      	movs	r3, #0
 801b15c:	e000      	b.n	801b160 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801b15e:	2301      	movs	r3, #1
}
 801b160:	4618      	mov	r0, r3
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	2400079c 	.word	0x2400079c
 801b16c:	24000000 	.word	0x24000000
 801b170:	24000798 	.word	0x24000798

0801b174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b174:	b480      	push	{r7}
 801b176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801b178:	4b06      	ldr	r3, [pc, #24]	@ (801b194 <HAL_IncTick+0x20>)
 801b17a:	781b      	ldrb	r3, [r3, #0]
 801b17c:	461a      	mov	r2, r3
 801b17e:	4b06      	ldr	r3, [pc, #24]	@ (801b198 <HAL_IncTick+0x24>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	4413      	add	r3, r2
 801b184:	4a04      	ldr	r2, [pc, #16]	@ (801b198 <HAL_IncTick+0x24>)
 801b186:	6013      	str	r3, [r2, #0]
}
 801b188:	bf00      	nop
 801b18a:	46bd      	mov	sp, r7
 801b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b190:	4770      	bx	lr
 801b192:	bf00      	nop
 801b194:	2400079c 	.word	0x2400079c
 801b198:	24003eec 	.word	0x24003eec

0801b19c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b19c:	b480      	push	{r7}
 801b19e:	af00      	add	r7, sp, #0
  return uwTick;
 801b1a0:	4b03      	ldr	r3, [pc, #12]	@ (801b1b0 <HAL_GetTick+0x14>)
 801b1a2:	681b      	ldr	r3, [r3, #0]
}
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ac:	4770      	bx	lr
 801b1ae:	bf00      	nop
 801b1b0:	24003eec 	.word	0x24003eec

0801b1b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801b1b4:	b480      	push	{r7}
 801b1b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801b1b8:	4b03      	ldr	r3, [pc, #12]	@ (801b1c8 <HAL_GetREVID+0x14>)
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	0c1b      	lsrs	r3, r3, #16
}
 801b1be:	4618      	mov	r0, r3
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c6:	4770      	bx	lr
 801b1c8:	5c001000 	.word	0x5c001000

0801b1cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801b1cc:	b480      	push	{r7}
 801b1ce:	b083      	sub	sp, #12
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801b1d4:	4b06      	ldr	r3, [pc, #24]	@ (801b1f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801b1d6:	685b      	ldr	r3, [r3, #4]
 801b1d8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801b1dc:	4904      	ldr	r1, [pc, #16]	@ (801b1f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	4313      	orrs	r3, r2
 801b1e2:	604b      	str	r3, [r1, #4]
}
 801b1e4:	bf00      	nop
 801b1e6:	370c      	adds	r7, #12
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ee:	4770      	bx	lr
 801b1f0:	58000400 	.word	0x58000400

0801b1f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b1f4:	b480      	push	{r7}
 801b1f6:	b085      	sub	sp, #20
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	f003 0307 	and.w	r3, r3, #7
 801b202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b204:	4b0b      	ldr	r3, [pc, #44]	@ (801b234 <__NVIC_SetPriorityGrouping+0x40>)
 801b206:	68db      	ldr	r3, [r3, #12]
 801b208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b20a:	68ba      	ldr	r2, [r7, #8]
 801b20c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801b210:	4013      	ands	r3, r2
 801b212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801b21c:	4b06      	ldr	r3, [pc, #24]	@ (801b238 <__NVIC_SetPriorityGrouping+0x44>)
 801b21e:	4313      	orrs	r3, r2
 801b220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b222:	4a04      	ldr	r2, [pc, #16]	@ (801b234 <__NVIC_SetPriorityGrouping+0x40>)
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	60d3      	str	r3, [r2, #12]
}
 801b228:	bf00      	nop
 801b22a:	3714      	adds	r7, #20
 801b22c:	46bd      	mov	sp, r7
 801b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b232:	4770      	bx	lr
 801b234:	e000ed00 	.word	0xe000ed00
 801b238:	05fa0000 	.word	0x05fa0000

0801b23c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b23c:	b480      	push	{r7}
 801b23e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b240:	4b04      	ldr	r3, [pc, #16]	@ (801b254 <__NVIC_GetPriorityGrouping+0x18>)
 801b242:	68db      	ldr	r3, [r3, #12]
 801b244:	0a1b      	lsrs	r3, r3, #8
 801b246:	f003 0307 	and.w	r3, r3, #7
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	46bd      	mov	sp, r7
 801b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b252:	4770      	bx	lr
 801b254:	e000ed00 	.word	0xe000ed00

0801b258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b258:	b480      	push	{r7}
 801b25a:	b083      	sub	sp, #12
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	4603      	mov	r3, r0
 801b260:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b266:	2b00      	cmp	r3, #0
 801b268:	db0b      	blt.n	801b282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b26a:	88fb      	ldrh	r3, [r7, #6]
 801b26c:	f003 021f 	and.w	r2, r3, #31
 801b270:	4907      	ldr	r1, [pc, #28]	@ (801b290 <__NVIC_EnableIRQ+0x38>)
 801b272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b276:	095b      	lsrs	r3, r3, #5
 801b278:	2001      	movs	r0, #1
 801b27a:	fa00 f202 	lsl.w	r2, r0, r2
 801b27e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b282:	bf00      	nop
 801b284:	370c      	adds	r7, #12
 801b286:	46bd      	mov	sp, r7
 801b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b28c:	4770      	bx	lr
 801b28e:	bf00      	nop
 801b290:	e000e100 	.word	0xe000e100

0801b294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b294:	b480      	push	{r7}
 801b296:	b083      	sub	sp, #12
 801b298:	af00      	add	r7, sp, #0
 801b29a:	4603      	mov	r3, r0
 801b29c:	6039      	str	r1, [r7, #0]
 801b29e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b2a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	db0a      	blt.n	801b2be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	b2da      	uxtb	r2, r3
 801b2ac:	490c      	ldr	r1, [pc, #48]	@ (801b2e0 <__NVIC_SetPriority+0x4c>)
 801b2ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b2b2:	0112      	lsls	r2, r2, #4
 801b2b4:	b2d2      	uxtb	r2, r2
 801b2b6:	440b      	add	r3, r1
 801b2b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b2bc:	e00a      	b.n	801b2d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	b2da      	uxtb	r2, r3
 801b2c2:	4908      	ldr	r1, [pc, #32]	@ (801b2e4 <__NVIC_SetPriority+0x50>)
 801b2c4:	88fb      	ldrh	r3, [r7, #6]
 801b2c6:	f003 030f 	and.w	r3, r3, #15
 801b2ca:	3b04      	subs	r3, #4
 801b2cc:	0112      	lsls	r2, r2, #4
 801b2ce:	b2d2      	uxtb	r2, r2
 801b2d0:	440b      	add	r3, r1
 801b2d2:	761a      	strb	r2, [r3, #24]
}
 801b2d4:	bf00      	nop
 801b2d6:	370c      	adds	r7, #12
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2de:	4770      	bx	lr
 801b2e0:	e000e100 	.word	0xe000e100
 801b2e4:	e000ed00 	.word	0xe000ed00

0801b2e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b2e8:	b480      	push	{r7}
 801b2ea:	b089      	sub	sp, #36	@ 0x24
 801b2ec:	af00      	add	r7, sp, #0
 801b2ee:	60f8      	str	r0, [r7, #12]
 801b2f0:	60b9      	str	r1, [r7, #8]
 801b2f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	f003 0307 	and.w	r3, r3, #7
 801b2fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b2fc:	69fb      	ldr	r3, [r7, #28]
 801b2fe:	f1c3 0307 	rsb	r3, r3, #7
 801b302:	2b04      	cmp	r3, #4
 801b304:	bf28      	it	cs
 801b306:	2304      	movcs	r3, #4
 801b308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b30a:	69fb      	ldr	r3, [r7, #28]
 801b30c:	3304      	adds	r3, #4
 801b30e:	2b06      	cmp	r3, #6
 801b310:	d902      	bls.n	801b318 <NVIC_EncodePriority+0x30>
 801b312:	69fb      	ldr	r3, [r7, #28]
 801b314:	3b03      	subs	r3, #3
 801b316:	e000      	b.n	801b31a <NVIC_EncodePriority+0x32>
 801b318:	2300      	movs	r3, #0
 801b31a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b31c:	f04f 32ff 	mov.w	r2, #4294967295
 801b320:	69bb      	ldr	r3, [r7, #24]
 801b322:	fa02 f303 	lsl.w	r3, r2, r3
 801b326:	43da      	mvns	r2, r3
 801b328:	68bb      	ldr	r3, [r7, #8]
 801b32a:	401a      	ands	r2, r3
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b330:	f04f 31ff 	mov.w	r1, #4294967295
 801b334:	697b      	ldr	r3, [r7, #20]
 801b336:	fa01 f303 	lsl.w	r3, r1, r3
 801b33a:	43d9      	mvns	r1, r3
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b340:	4313      	orrs	r3, r2
         );
}
 801b342:	4618      	mov	r0, r3
 801b344:	3724      	adds	r7, #36	@ 0x24
 801b346:	46bd      	mov	sp, r7
 801b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b34c:	4770      	bx	lr
	...

0801b350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b082      	sub	sp, #8
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	3b01      	subs	r3, #1
 801b35c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b360:	d301      	bcc.n	801b366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b362:	2301      	movs	r3, #1
 801b364:	e00f      	b.n	801b386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b366:	4a0a      	ldr	r2, [pc, #40]	@ (801b390 <SysTick_Config+0x40>)
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	3b01      	subs	r3, #1
 801b36c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b36e:	210f      	movs	r1, #15
 801b370:	f04f 30ff 	mov.w	r0, #4294967295
 801b374:	f7ff ff8e 	bl	801b294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b378:	4b05      	ldr	r3, [pc, #20]	@ (801b390 <SysTick_Config+0x40>)
 801b37a:	2200      	movs	r2, #0
 801b37c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b37e:	4b04      	ldr	r3, [pc, #16]	@ (801b390 <SysTick_Config+0x40>)
 801b380:	2207      	movs	r2, #7
 801b382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b384:	2300      	movs	r3, #0
}
 801b386:	4618      	mov	r0, r3
 801b388:	3708      	adds	r7, #8
 801b38a:	46bd      	mov	sp, r7
 801b38c:	bd80      	pop	{r7, pc}
 801b38e:	bf00      	nop
 801b390:	e000e010 	.word	0xe000e010

0801b394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b082      	sub	sp, #8
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b39c:	6878      	ldr	r0, [r7, #4]
 801b39e:	f7ff ff29 	bl	801b1f4 <__NVIC_SetPriorityGrouping>
}
 801b3a2:	bf00      	nop
 801b3a4:	3708      	adds	r7, #8
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}

0801b3aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b3aa:	b580      	push	{r7, lr}
 801b3ac:	b086      	sub	sp, #24
 801b3ae:	af00      	add	r7, sp, #0
 801b3b0:	4603      	mov	r3, r0
 801b3b2:	60b9      	str	r1, [r7, #8]
 801b3b4:	607a      	str	r2, [r7, #4]
 801b3b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b3b8:	f7ff ff40 	bl	801b23c <__NVIC_GetPriorityGrouping>
 801b3bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b3be:	687a      	ldr	r2, [r7, #4]
 801b3c0:	68b9      	ldr	r1, [r7, #8]
 801b3c2:	6978      	ldr	r0, [r7, #20]
 801b3c4:	f7ff ff90 	bl	801b2e8 <NVIC_EncodePriority>
 801b3c8:	4602      	mov	r2, r0
 801b3ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b3ce:	4611      	mov	r1, r2
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f7ff ff5f 	bl	801b294 <__NVIC_SetPriority>
}
 801b3d6:	bf00      	nop
 801b3d8:	3718      	adds	r7, #24
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	bd80      	pop	{r7, pc}

0801b3de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b3de:	b580      	push	{r7, lr}
 801b3e0:	b082      	sub	sp, #8
 801b3e2:	af00      	add	r7, sp, #0
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b3e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f7ff ff33 	bl	801b258 <__NVIC_EnableIRQ>
}
 801b3f2:	bf00      	nop
 801b3f4:	3708      	adds	r7, #8
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd80      	pop	{r7, pc}

0801b3fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b3fa:	b580      	push	{r7, lr}
 801b3fc:	b082      	sub	sp, #8
 801b3fe:	af00      	add	r7, sp, #0
 801b400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f7ff ffa4 	bl	801b350 <SysTick_Config>
 801b408:	4603      	mov	r3, r0
}
 801b40a:	4618      	mov	r0, r3
 801b40c:	3708      	adds	r7, #8
 801b40e:	46bd      	mov	sp, r7
 801b410:	bd80      	pop	{r7, pc}
	...

0801b414 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b086      	sub	sp, #24
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801b41c:	f7ff febe 	bl	801b19c <HAL_GetTick>
 801b420:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d101      	bne.n	801b42c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801b428:	2301      	movs	r3, #1
 801b42a:	e2dc      	b.n	801b9e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b432:	b2db      	uxtb	r3, r3
 801b434:	2b02      	cmp	r3, #2
 801b436:	d008      	beq.n	801b44a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2280      	movs	r2, #128	@ 0x80
 801b43c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	2200      	movs	r2, #0
 801b442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801b446:	2301      	movs	r3, #1
 801b448:	e2cd      	b.n	801b9e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	4a76      	ldr	r2, [pc, #472]	@ (801b628 <HAL_DMA_Abort+0x214>)
 801b450:	4293      	cmp	r3, r2
 801b452:	d04a      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4a74      	ldr	r2, [pc, #464]	@ (801b62c <HAL_DMA_Abort+0x218>)
 801b45a:	4293      	cmp	r3, r2
 801b45c:	d045      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	4a73      	ldr	r2, [pc, #460]	@ (801b630 <HAL_DMA_Abort+0x21c>)
 801b464:	4293      	cmp	r3, r2
 801b466:	d040      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	4a71      	ldr	r2, [pc, #452]	@ (801b634 <HAL_DMA_Abort+0x220>)
 801b46e:	4293      	cmp	r3, r2
 801b470:	d03b      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	4a70      	ldr	r2, [pc, #448]	@ (801b638 <HAL_DMA_Abort+0x224>)
 801b478:	4293      	cmp	r3, r2
 801b47a:	d036      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	4a6e      	ldr	r2, [pc, #440]	@ (801b63c <HAL_DMA_Abort+0x228>)
 801b482:	4293      	cmp	r3, r2
 801b484:	d031      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	4a6d      	ldr	r2, [pc, #436]	@ (801b640 <HAL_DMA_Abort+0x22c>)
 801b48c:	4293      	cmp	r3, r2
 801b48e:	d02c      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	4a6b      	ldr	r2, [pc, #428]	@ (801b644 <HAL_DMA_Abort+0x230>)
 801b496:	4293      	cmp	r3, r2
 801b498:	d027      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	4a6a      	ldr	r2, [pc, #424]	@ (801b648 <HAL_DMA_Abort+0x234>)
 801b4a0:	4293      	cmp	r3, r2
 801b4a2:	d022      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	4a68      	ldr	r2, [pc, #416]	@ (801b64c <HAL_DMA_Abort+0x238>)
 801b4aa:	4293      	cmp	r3, r2
 801b4ac:	d01d      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	4a67      	ldr	r2, [pc, #412]	@ (801b650 <HAL_DMA_Abort+0x23c>)
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	d018      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	4a65      	ldr	r2, [pc, #404]	@ (801b654 <HAL_DMA_Abort+0x240>)
 801b4be:	4293      	cmp	r3, r2
 801b4c0:	d013      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	4a64      	ldr	r2, [pc, #400]	@ (801b658 <HAL_DMA_Abort+0x244>)
 801b4c8:	4293      	cmp	r3, r2
 801b4ca:	d00e      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	4a62      	ldr	r2, [pc, #392]	@ (801b65c <HAL_DMA_Abort+0x248>)
 801b4d2:	4293      	cmp	r3, r2
 801b4d4:	d009      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	4a61      	ldr	r2, [pc, #388]	@ (801b660 <HAL_DMA_Abort+0x24c>)
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d004      	beq.n	801b4ea <HAL_DMA_Abort+0xd6>
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	4a5f      	ldr	r2, [pc, #380]	@ (801b664 <HAL_DMA_Abort+0x250>)
 801b4e6:	4293      	cmp	r3, r2
 801b4e8:	d101      	bne.n	801b4ee <HAL_DMA_Abort+0xda>
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	e000      	b.n	801b4f0 <HAL_DMA_Abort+0xdc>
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d013      	beq.n	801b51c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	681a      	ldr	r2, [r3, #0]
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	f022 021e 	bic.w	r2, r2, #30
 801b502:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	695a      	ldr	r2, [r3, #20]
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b512:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	617b      	str	r3, [r7, #20]
 801b51a:	e00a      	b.n	801b532 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	681a      	ldr	r2, [r3, #0]
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	f022 020e 	bic.w	r2, r2, #14
 801b52a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	4a3c      	ldr	r2, [pc, #240]	@ (801b628 <HAL_DMA_Abort+0x214>)
 801b538:	4293      	cmp	r3, r2
 801b53a:	d072      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	4a3a      	ldr	r2, [pc, #232]	@ (801b62c <HAL_DMA_Abort+0x218>)
 801b542:	4293      	cmp	r3, r2
 801b544:	d06d      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	4a39      	ldr	r2, [pc, #228]	@ (801b630 <HAL_DMA_Abort+0x21c>)
 801b54c:	4293      	cmp	r3, r2
 801b54e:	d068      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	4a37      	ldr	r2, [pc, #220]	@ (801b634 <HAL_DMA_Abort+0x220>)
 801b556:	4293      	cmp	r3, r2
 801b558:	d063      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	4a36      	ldr	r2, [pc, #216]	@ (801b638 <HAL_DMA_Abort+0x224>)
 801b560:	4293      	cmp	r3, r2
 801b562:	d05e      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	4a34      	ldr	r2, [pc, #208]	@ (801b63c <HAL_DMA_Abort+0x228>)
 801b56a:	4293      	cmp	r3, r2
 801b56c:	d059      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	4a33      	ldr	r2, [pc, #204]	@ (801b640 <HAL_DMA_Abort+0x22c>)
 801b574:	4293      	cmp	r3, r2
 801b576:	d054      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	4a31      	ldr	r2, [pc, #196]	@ (801b644 <HAL_DMA_Abort+0x230>)
 801b57e:	4293      	cmp	r3, r2
 801b580:	d04f      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	4a30      	ldr	r2, [pc, #192]	@ (801b648 <HAL_DMA_Abort+0x234>)
 801b588:	4293      	cmp	r3, r2
 801b58a:	d04a      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	4a2e      	ldr	r2, [pc, #184]	@ (801b64c <HAL_DMA_Abort+0x238>)
 801b592:	4293      	cmp	r3, r2
 801b594:	d045      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	4a2d      	ldr	r2, [pc, #180]	@ (801b650 <HAL_DMA_Abort+0x23c>)
 801b59c:	4293      	cmp	r3, r2
 801b59e:	d040      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	4a2b      	ldr	r2, [pc, #172]	@ (801b654 <HAL_DMA_Abort+0x240>)
 801b5a6:	4293      	cmp	r3, r2
 801b5a8:	d03b      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	4a2a      	ldr	r2, [pc, #168]	@ (801b658 <HAL_DMA_Abort+0x244>)
 801b5b0:	4293      	cmp	r3, r2
 801b5b2:	d036      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	4a28      	ldr	r2, [pc, #160]	@ (801b65c <HAL_DMA_Abort+0x248>)
 801b5ba:	4293      	cmp	r3, r2
 801b5bc:	d031      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	4a27      	ldr	r2, [pc, #156]	@ (801b660 <HAL_DMA_Abort+0x24c>)
 801b5c4:	4293      	cmp	r3, r2
 801b5c6:	d02c      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	4a25      	ldr	r2, [pc, #148]	@ (801b664 <HAL_DMA_Abort+0x250>)
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	d027      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4a24      	ldr	r2, [pc, #144]	@ (801b668 <HAL_DMA_Abort+0x254>)
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d022      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	4a22      	ldr	r2, [pc, #136]	@ (801b66c <HAL_DMA_Abort+0x258>)
 801b5e2:	4293      	cmp	r3, r2
 801b5e4:	d01d      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	4a21      	ldr	r2, [pc, #132]	@ (801b670 <HAL_DMA_Abort+0x25c>)
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d018      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4a1f      	ldr	r2, [pc, #124]	@ (801b674 <HAL_DMA_Abort+0x260>)
 801b5f6:	4293      	cmp	r3, r2
 801b5f8:	d013      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	4a1e      	ldr	r2, [pc, #120]	@ (801b678 <HAL_DMA_Abort+0x264>)
 801b600:	4293      	cmp	r3, r2
 801b602:	d00e      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4a1c      	ldr	r2, [pc, #112]	@ (801b67c <HAL_DMA_Abort+0x268>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d009      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	4a1b      	ldr	r2, [pc, #108]	@ (801b680 <HAL_DMA_Abort+0x26c>)
 801b614:	4293      	cmp	r3, r2
 801b616:	d004      	beq.n	801b622 <HAL_DMA_Abort+0x20e>
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	4a19      	ldr	r2, [pc, #100]	@ (801b684 <HAL_DMA_Abort+0x270>)
 801b61e:	4293      	cmp	r3, r2
 801b620:	d132      	bne.n	801b688 <HAL_DMA_Abort+0x274>
 801b622:	2301      	movs	r3, #1
 801b624:	e031      	b.n	801b68a <HAL_DMA_Abort+0x276>
 801b626:	bf00      	nop
 801b628:	40020010 	.word	0x40020010
 801b62c:	40020028 	.word	0x40020028
 801b630:	40020040 	.word	0x40020040
 801b634:	40020058 	.word	0x40020058
 801b638:	40020070 	.word	0x40020070
 801b63c:	40020088 	.word	0x40020088
 801b640:	400200a0 	.word	0x400200a0
 801b644:	400200b8 	.word	0x400200b8
 801b648:	40020410 	.word	0x40020410
 801b64c:	40020428 	.word	0x40020428
 801b650:	40020440 	.word	0x40020440
 801b654:	40020458 	.word	0x40020458
 801b658:	40020470 	.word	0x40020470
 801b65c:	40020488 	.word	0x40020488
 801b660:	400204a0 	.word	0x400204a0
 801b664:	400204b8 	.word	0x400204b8
 801b668:	58025408 	.word	0x58025408
 801b66c:	5802541c 	.word	0x5802541c
 801b670:	58025430 	.word	0x58025430
 801b674:	58025444 	.word	0x58025444
 801b678:	58025458 	.word	0x58025458
 801b67c:	5802546c 	.word	0x5802546c
 801b680:	58025480 	.word	0x58025480
 801b684:	58025494 	.word	0x58025494
 801b688:	2300      	movs	r3, #0
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d007      	beq.n	801b69e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b692:	681a      	ldr	r2, [r3, #0]
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b698:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b69c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	4a6d      	ldr	r2, [pc, #436]	@ (801b858 <HAL_DMA_Abort+0x444>)
 801b6a4:	4293      	cmp	r3, r2
 801b6a6:	d04a      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	4a6b      	ldr	r2, [pc, #428]	@ (801b85c <HAL_DMA_Abort+0x448>)
 801b6ae:	4293      	cmp	r3, r2
 801b6b0:	d045      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	4a6a      	ldr	r2, [pc, #424]	@ (801b860 <HAL_DMA_Abort+0x44c>)
 801b6b8:	4293      	cmp	r3, r2
 801b6ba:	d040      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	4a68      	ldr	r2, [pc, #416]	@ (801b864 <HAL_DMA_Abort+0x450>)
 801b6c2:	4293      	cmp	r3, r2
 801b6c4:	d03b      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	4a67      	ldr	r2, [pc, #412]	@ (801b868 <HAL_DMA_Abort+0x454>)
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	d036      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	4a65      	ldr	r2, [pc, #404]	@ (801b86c <HAL_DMA_Abort+0x458>)
 801b6d6:	4293      	cmp	r3, r2
 801b6d8:	d031      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	4a64      	ldr	r2, [pc, #400]	@ (801b870 <HAL_DMA_Abort+0x45c>)
 801b6e0:	4293      	cmp	r3, r2
 801b6e2:	d02c      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	4a62      	ldr	r2, [pc, #392]	@ (801b874 <HAL_DMA_Abort+0x460>)
 801b6ea:	4293      	cmp	r3, r2
 801b6ec:	d027      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	4a61      	ldr	r2, [pc, #388]	@ (801b878 <HAL_DMA_Abort+0x464>)
 801b6f4:	4293      	cmp	r3, r2
 801b6f6:	d022      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	4a5f      	ldr	r2, [pc, #380]	@ (801b87c <HAL_DMA_Abort+0x468>)
 801b6fe:	4293      	cmp	r3, r2
 801b700:	d01d      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	4a5e      	ldr	r2, [pc, #376]	@ (801b880 <HAL_DMA_Abort+0x46c>)
 801b708:	4293      	cmp	r3, r2
 801b70a:	d018      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	4a5c      	ldr	r2, [pc, #368]	@ (801b884 <HAL_DMA_Abort+0x470>)
 801b712:	4293      	cmp	r3, r2
 801b714:	d013      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	4a5b      	ldr	r2, [pc, #364]	@ (801b888 <HAL_DMA_Abort+0x474>)
 801b71c:	4293      	cmp	r3, r2
 801b71e:	d00e      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	4a59      	ldr	r2, [pc, #356]	@ (801b88c <HAL_DMA_Abort+0x478>)
 801b726:	4293      	cmp	r3, r2
 801b728:	d009      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	4a58      	ldr	r2, [pc, #352]	@ (801b890 <HAL_DMA_Abort+0x47c>)
 801b730:	4293      	cmp	r3, r2
 801b732:	d004      	beq.n	801b73e <HAL_DMA_Abort+0x32a>
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	4a56      	ldr	r2, [pc, #344]	@ (801b894 <HAL_DMA_Abort+0x480>)
 801b73a:	4293      	cmp	r3, r2
 801b73c:	d108      	bne.n	801b750 <HAL_DMA_Abort+0x33c>
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	681a      	ldr	r2, [r3, #0]
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	f022 0201 	bic.w	r2, r2, #1
 801b74c:	601a      	str	r2, [r3, #0]
 801b74e:	e007      	b.n	801b760 <HAL_DMA_Abort+0x34c>
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	681a      	ldr	r2, [r3, #0]
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	f022 0201 	bic.w	r2, r2, #1
 801b75e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801b760:	e013      	b.n	801b78a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b762:	f7ff fd1b 	bl	801b19c <HAL_GetTick>
 801b766:	4602      	mov	r2, r0
 801b768:	693b      	ldr	r3, [r7, #16]
 801b76a:	1ad3      	subs	r3, r2, r3
 801b76c:	2b05      	cmp	r3, #5
 801b76e:	d90c      	bls.n	801b78a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	2220      	movs	r2, #32
 801b774:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	2203      	movs	r2, #3
 801b77a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	2200      	movs	r2, #0
 801b782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801b786:	2301      	movs	r3, #1
 801b788:	e12d      	b.n	801b9e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801b78a:	697b      	ldr	r3, [r7, #20]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	f003 0301 	and.w	r3, r3, #1
 801b792:	2b00      	cmp	r3, #0
 801b794:	d1e5      	bne.n	801b762 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	4a2f      	ldr	r2, [pc, #188]	@ (801b858 <HAL_DMA_Abort+0x444>)
 801b79c:	4293      	cmp	r3, r2
 801b79e:	d04a      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	4a2d      	ldr	r2, [pc, #180]	@ (801b85c <HAL_DMA_Abort+0x448>)
 801b7a6:	4293      	cmp	r3, r2
 801b7a8:	d045      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	4a2c      	ldr	r2, [pc, #176]	@ (801b860 <HAL_DMA_Abort+0x44c>)
 801b7b0:	4293      	cmp	r3, r2
 801b7b2:	d040      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	4a2a      	ldr	r2, [pc, #168]	@ (801b864 <HAL_DMA_Abort+0x450>)
 801b7ba:	4293      	cmp	r3, r2
 801b7bc:	d03b      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	4a29      	ldr	r2, [pc, #164]	@ (801b868 <HAL_DMA_Abort+0x454>)
 801b7c4:	4293      	cmp	r3, r2
 801b7c6:	d036      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	4a27      	ldr	r2, [pc, #156]	@ (801b86c <HAL_DMA_Abort+0x458>)
 801b7ce:	4293      	cmp	r3, r2
 801b7d0:	d031      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	4a26      	ldr	r2, [pc, #152]	@ (801b870 <HAL_DMA_Abort+0x45c>)
 801b7d8:	4293      	cmp	r3, r2
 801b7da:	d02c      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	4a24      	ldr	r2, [pc, #144]	@ (801b874 <HAL_DMA_Abort+0x460>)
 801b7e2:	4293      	cmp	r3, r2
 801b7e4:	d027      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	4a23      	ldr	r2, [pc, #140]	@ (801b878 <HAL_DMA_Abort+0x464>)
 801b7ec:	4293      	cmp	r3, r2
 801b7ee:	d022      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	4a21      	ldr	r2, [pc, #132]	@ (801b87c <HAL_DMA_Abort+0x468>)
 801b7f6:	4293      	cmp	r3, r2
 801b7f8:	d01d      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	4a20      	ldr	r2, [pc, #128]	@ (801b880 <HAL_DMA_Abort+0x46c>)
 801b800:	4293      	cmp	r3, r2
 801b802:	d018      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	4a1e      	ldr	r2, [pc, #120]	@ (801b884 <HAL_DMA_Abort+0x470>)
 801b80a:	4293      	cmp	r3, r2
 801b80c:	d013      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	4a1d      	ldr	r2, [pc, #116]	@ (801b888 <HAL_DMA_Abort+0x474>)
 801b814:	4293      	cmp	r3, r2
 801b816:	d00e      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	4a1b      	ldr	r2, [pc, #108]	@ (801b88c <HAL_DMA_Abort+0x478>)
 801b81e:	4293      	cmp	r3, r2
 801b820:	d009      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	4a1a      	ldr	r2, [pc, #104]	@ (801b890 <HAL_DMA_Abort+0x47c>)
 801b828:	4293      	cmp	r3, r2
 801b82a:	d004      	beq.n	801b836 <HAL_DMA_Abort+0x422>
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	4a18      	ldr	r2, [pc, #96]	@ (801b894 <HAL_DMA_Abort+0x480>)
 801b832:	4293      	cmp	r3, r2
 801b834:	d101      	bne.n	801b83a <HAL_DMA_Abort+0x426>
 801b836:	2301      	movs	r3, #1
 801b838:	e000      	b.n	801b83c <HAL_DMA_Abort+0x428>
 801b83a:	2300      	movs	r3, #0
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d02b      	beq.n	801b898 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b844:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b84a:	f003 031f 	and.w	r3, r3, #31
 801b84e:	223f      	movs	r2, #63	@ 0x3f
 801b850:	409a      	lsls	r2, r3
 801b852:	68bb      	ldr	r3, [r7, #8]
 801b854:	609a      	str	r2, [r3, #8]
 801b856:	e02a      	b.n	801b8ae <HAL_DMA_Abort+0x49a>
 801b858:	40020010 	.word	0x40020010
 801b85c:	40020028 	.word	0x40020028
 801b860:	40020040 	.word	0x40020040
 801b864:	40020058 	.word	0x40020058
 801b868:	40020070 	.word	0x40020070
 801b86c:	40020088 	.word	0x40020088
 801b870:	400200a0 	.word	0x400200a0
 801b874:	400200b8 	.word	0x400200b8
 801b878:	40020410 	.word	0x40020410
 801b87c:	40020428 	.word	0x40020428
 801b880:	40020440 	.word	0x40020440
 801b884:	40020458 	.word	0x40020458
 801b888:	40020470 	.word	0x40020470
 801b88c:	40020488 	.word	0x40020488
 801b890:	400204a0 	.word	0x400204a0
 801b894:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b89c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b8a2:	f003 031f 	and.w	r3, r3, #31
 801b8a6:	2201      	movs	r2, #1
 801b8a8:	409a      	lsls	r2, r3
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	4a4f      	ldr	r2, [pc, #316]	@ (801b9f0 <HAL_DMA_Abort+0x5dc>)
 801b8b4:	4293      	cmp	r3, r2
 801b8b6:	d072      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	4a4d      	ldr	r2, [pc, #308]	@ (801b9f4 <HAL_DMA_Abort+0x5e0>)
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	d06d      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	4a4c      	ldr	r2, [pc, #304]	@ (801b9f8 <HAL_DMA_Abort+0x5e4>)
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	d068      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	4a4a      	ldr	r2, [pc, #296]	@ (801b9fc <HAL_DMA_Abort+0x5e8>)
 801b8d2:	4293      	cmp	r3, r2
 801b8d4:	d063      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	4a49      	ldr	r2, [pc, #292]	@ (801ba00 <HAL_DMA_Abort+0x5ec>)
 801b8dc:	4293      	cmp	r3, r2
 801b8de:	d05e      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	4a47      	ldr	r2, [pc, #284]	@ (801ba04 <HAL_DMA_Abort+0x5f0>)
 801b8e6:	4293      	cmp	r3, r2
 801b8e8:	d059      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	4a46      	ldr	r2, [pc, #280]	@ (801ba08 <HAL_DMA_Abort+0x5f4>)
 801b8f0:	4293      	cmp	r3, r2
 801b8f2:	d054      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	4a44      	ldr	r2, [pc, #272]	@ (801ba0c <HAL_DMA_Abort+0x5f8>)
 801b8fa:	4293      	cmp	r3, r2
 801b8fc:	d04f      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	4a43      	ldr	r2, [pc, #268]	@ (801ba10 <HAL_DMA_Abort+0x5fc>)
 801b904:	4293      	cmp	r3, r2
 801b906:	d04a      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	4a41      	ldr	r2, [pc, #260]	@ (801ba14 <HAL_DMA_Abort+0x600>)
 801b90e:	4293      	cmp	r3, r2
 801b910:	d045      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4a40      	ldr	r2, [pc, #256]	@ (801ba18 <HAL_DMA_Abort+0x604>)
 801b918:	4293      	cmp	r3, r2
 801b91a:	d040      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	4a3e      	ldr	r2, [pc, #248]	@ (801ba1c <HAL_DMA_Abort+0x608>)
 801b922:	4293      	cmp	r3, r2
 801b924:	d03b      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	4a3d      	ldr	r2, [pc, #244]	@ (801ba20 <HAL_DMA_Abort+0x60c>)
 801b92c:	4293      	cmp	r3, r2
 801b92e:	d036      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	4a3b      	ldr	r2, [pc, #236]	@ (801ba24 <HAL_DMA_Abort+0x610>)
 801b936:	4293      	cmp	r3, r2
 801b938:	d031      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	4a3a      	ldr	r2, [pc, #232]	@ (801ba28 <HAL_DMA_Abort+0x614>)
 801b940:	4293      	cmp	r3, r2
 801b942:	d02c      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	4a38      	ldr	r2, [pc, #224]	@ (801ba2c <HAL_DMA_Abort+0x618>)
 801b94a:	4293      	cmp	r3, r2
 801b94c:	d027      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	4a37      	ldr	r2, [pc, #220]	@ (801ba30 <HAL_DMA_Abort+0x61c>)
 801b954:	4293      	cmp	r3, r2
 801b956:	d022      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	4a35      	ldr	r2, [pc, #212]	@ (801ba34 <HAL_DMA_Abort+0x620>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d01d      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	4a34      	ldr	r2, [pc, #208]	@ (801ba38 <HAL_DMA_Abort+0x624>)
 801b968:	4293      	cmp	r3, r2
 801b96a:	d018      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	4a32      	ldr	r2, [pc, #200]	@ (801ba3c <HAL_DMA_Abort+0x628>)
 801b972:	4293      	cmp	r3, r2
 801b974:	d013      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	4a31      	ldr	r2, [pc, #196]	@ (801ba40 <HAL_DMA_Abort+0x62c>)
 801b97c:	4293      	cmp	r3, r2
 801b97e:	d00e      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	4a2f      	ldr	r2, [pc, #188]	@ (801ba44 <HAL_DMA_Abort+0x630>)
 801b986:	4293      	cmp	r3, r2
 801b988:	d009      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	4a2e      	ldr	r2, [pc, #184]	@ (801ba48 <HAL_DMA_Abort+0x634>)
 801b990:	4293      	cmp	r3, r2
 801b992:	d004      	beq.n	801b99e <HAL_DMA_Abort+0x58a>
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	4a2c      	ldr	r2, [pc, #176]	@ (801ba4c <HAL_DMA_Abort+0x638>)
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d101      	bne.n	801b9a2 <HAL_DMA_Abort+0x58e>
 801b99e:	2301      	movs	r3, #1
 801b9a0:	e000      	b.n	801b9a4 <HAL_DMA_Abort+0x590>
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d015      	beq.n	801b9d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b9ac:	687a      	ldr	r2, [r7, #4]
 801b9ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b9b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d00c      	beq.n	801b9d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9be:	681a      	ldr	r2, [r3, #0]
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b9c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b9ce:	687a      	ldr	r2, [r7, #4]
 801b9d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b9d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	2201      	movs	r2, #1
 801b9d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	2200      	movs	r2, #0
 801b9e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 801b9e4:	2300      	movs	r3, #0
}
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	3718      	adds	r7, #24
 801b9ea:	46bd      	mov	sp, r7
 801b9ec:	bd80      	pop	{r7, pc}
 801b9ee:	bf00      	nop
 801b9f0:	40020010 	.word	0x40020010
 801b9f4:	40020028 	.word	0x40020028
 801b9f8:	40020040 	.word	0x40020040
 801b9fc:	40020058 	.word	0x40020058
 801ba00:	40020070 	.word	0x40020070
 801ba04:	40020088 	.word	0x40020088
 801ba08:	400200a0 	.word	0x400200a0
 801ba0c:	400200b8 	.word	0x400200b8
 801ba10:	40020410 	.word	0x40020410
 801ba14:	40020428 	.word	0x40020428
 801ba18:	40020440 	.word	0x40020440
 801ba1c:	40020458 	.word	0x40020458
 801ba20:	40020470 	.word	0x40020470
 801ba24:	40020488 	.word	0x40020488
 801ba28:	400204a0 	.word	0x400204a0
 801ba2c:	400204b8 	.word	0x400204b8
 801ba30:	58025408 	.word	0x58025408
 801ba34:	5802541c 	.word	0x5802541c
 801ba38:	58025430 	.word	0x58025430
 801ba3c:	58025444 	.word	0x58025444
 801ba40:	58025458 	.word	0x58025458
 801ba44:	5802546c 	.word	0x5802546c
 801ba48:	58025480 	.word	0x58025480
 801ba4c:	58025494 	.word	0x58025494

0801ba50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801ba50:	b580      	push	{r7, lr}
 801ba52:	b084      	sub	sp, #16
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d101      	bne.n	801ba62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801ba5e:	2301      	movs	r3, #1
 801ba60:	e237      	b.n	801bed2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ba68:	b2db      	uxtb	r3, r3
 801ba6a:	2b02      	cmp	r3, #2
 801ba6c:	d004      	beq.n	801ba78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	2280      	movs	r2, #128	@ 0x80
 801ba72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801ba74:	2301      	movs	r3, #1
 801ba76:	e22c      	b.n	801bed2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	4a5c      	ldr	r2, [pc, #368]	@ (801bbf0 <HAL_DMA_Abort_IT+0x1a0>)
 801ba7e:	4293      	cmp	r3, r2
 801ba80:	d04a      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	4a5b      	ldr	r2, [pc, #364]	@ (801bbf4 <HAL_DMA_Abort_IT+0x1a4>)
 801ba88:	4293      	cmp	r3, r2
 801ba8a:	d045      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	4a59      	ldr	r2, [pc, #356]	@ (801bbf8 <HAL_DMA_Abort_IT+0x1a8>)
 801ba92:	4293      	cmp	r3, r2
 801ba94:	d040      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	4a58      	ldr	r2, [pc, #352]	@ (801bbfc <HAL_DMA_Abort_IT+0x1ac>)
 801ba9c:	4293      	cmp	r3, r2
 801ba9e:	d03b      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	4a56      	ldr	r2, [pc, #344]	@ (801bc00 <HAL_DMA_Abort_IT+0x1b0>)
 801baa6:	4293      	cmp	r3, r2
 801baa8:	d036      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	4a55      	ldr	r2, [pc, #340]	@ (801bc04 <HAL_DMA_Abort_IT+0x1b4>)
 801bab0:	4293      	cmp	r3, r2
 801bab2:	d031      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	4a53      	ldr	r2, [pc, #332]	@ (801bc08 <HAL_DMA_Abort_IT+0x1b8>)
 801baba:	4293      	cmp	r3, r2
 801babc:	d02c      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	4a52      	ldr	r2, [pc, #328]	@ (801bc0c <HAL_DMA_Abort_IT+0x1bc>)
 801bac4:	4293      	cmp	r3, r2
 801bac6:	d027      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	4a50      	ldr	r2, [pc, #320]	@ (801bc10 <HAL_DMA_Abort_IT+0x1c0>)
 801bace:	4293      	cmp	r3, r2
 801bad0:	d022      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	4a4f      	ldr	r2, [pc, #316]	@ (801bc14 <HAL_DMA_Abort_IT+0x1c4>)
 801bad8:	4293      	cmp	r3, r2
 801bada:	d01d      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	4a4d      	ldr	r2, [pc, #308]	@ (801bc18 <HAL_DMA_Abort_IT+0x1c8>)
 801bae2:	4293      	cmp	r3, r2
 801bae4:	d018      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	4a4c      	ldr	r2, [pc, #304]	@ (801bc1c <HAL_DMA_Abort_IT+0x1cc>)
 801baec:	4293      	cmp	r3, r2
 801baee:	d013      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	4a4a      	ldr	r2, [pc, #296]	@ (801bc20 <HAL_DMA_Abort_IT+0x1d0>)
 801baf6:	4293      	cmp	r3, r2
 801baf8:	d00e      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	4a49      	ldr	r2, [pc, #292]	@ (801bc24 <HAL_DMA_Abort_IT+0x1d4>)
 801bb00:	4293      	cmp	r3, r2
 801bb02:	d009      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	4a47      	ldr	r2, [pc, #284]	@ (801bc28 <HAL_DMA_Abort_IT+0x1d8>)
 801bb0a:	4293      	cmp	r3, r2
 801bb0c:	d004      	beq.n	801bb18 <HAL_DMA_Abort_IT+0xc8>
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	4a46      	ldr	r2, [pc, #280]	@ (801bc2c <HAL_DMA_Abort_IT+0x1dc>)
 801bb14:	4293      	cmp	r3, r2
 801bb16:	d101      	bne.n	801bb1c <HAL_DMA_Abort_IT+0xcc>
 801bb18:	2301      	movs	r3, #1
 801bb1a:	e000      	b.n	801bb1e <HAL_DMA_Abort_IT+0xce>
 801bb1c:	2300      	movs	r3, #0
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	f000 8086 	beq.w	801bc30 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	2204      	movs	r2, #4
 801bb28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a2f      	ldr	r2, [pc, #188]	@ (801bbf0 <HAL_DMA_Abort_IT+0x1a0>)
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d04a      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4a2e      	ldr	r2, [pc, #184]	@ (801bbf4 <HAL_DMA_Abort_IT+0x1a4>)
 801bb3c:	4293      	cmp	r3, r2
 801bb3e:	d045      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	4a2c      	ldr	r2, [pc, #176]	@ (801bbf8 <HAL_DMA_Abort_IT+0x1a8>)
 801bb46:	4293      	cmp	r3, r2
 801bb48:	d040      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	4a2b      	ldr	r2, [pc, #172]	@ (801bbfc <HAL_DMA_Abort_IT+0x1ac>)
 801bb50:	4293      	cmp	r3, r2
 801bb52:	d03b      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	4a29      	ldr	r2, [pc, #164]	@ (801bc00 <HAL_DMA_Abort_IT+0x1b0>)
 801bb5a:	4293      	cmp	r3, r2
 801bb5c:	d036      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	4a28      	ldr	r2, [pc, #160]	@ (801bc04 <HAL_DMA_Abort_IT+0x1b4>)
 801bb64:	4293      	cmp	r3, r2
 801bb66:	d031      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	4a26      	ldr	r2, [pc, #152]	@ (801bc08 <HAL_DMA_Abort_IT+0x1b8>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d02c      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	4a25      	ldr	r2, [pc, #148]	@ (801bc0c <HAL_DMA_Abort_IT+0x1bc>)
 801bb78:	4293      	cmp	r3, r2
 801bb7a:	d027      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	4a23      	ldr	r2, [pc, #140]	@ (801bc10 <HAL_DMA_Abort_IT+0x1c0>)
 801bb82:	4293      	cmp	r3, r2
 801bb84:	d022      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	4a22      	ldr	r2, [pc, #136]	@ (801bc14 <HAL_DMA_Abort_IT+0x1c4>)
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	d01d      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4a20      	ldr	r2, [pc, #128]	@ (801bc18 <HAL_DMA_Abort_IT+0x1c8>)
 801bb96:	4293      	cmp	r3, r2
 801bb98:	d018      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	4a1f      	ldr	r2, [pc, #124]	@ (801bc1c <HAL_DMA_Abort_IT+0x1cc>)
 801bba0:	4293      	cmp	r3, r2
 801bba2:	d013      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	4a1d      	ldr	r2, [pc, #116]	@ (801bc20 <HAL_DMA_Abort_IT+0x1d0>)
 801bbaa:	4293      	cmp	r3, r2
 801bbac:	d00e      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	4a1c      	ldr	r2, [pc, #112]	@ (801bc24 <HAL_DMA_Abort_IT+0x1d4>)
 801bbb4:	4293      	cmp	r3, r2
 801bbb6:	d009      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	4a1a      	ldr	r2, [pc, #104]	@ (801bc28 <HAL_DMA_Abort_IT+0x1d8>)
 801bbbe:	4293      	cmp	r3, r2
 801bbc0:	d004      	beq.n	801bbcc <HAL_DMA_Abort_IT+0x17c>
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	4a19      	ldr	r2, [pc, #100]	@ (801bc2c <HAL_DMA_Abort_IT+0x1dc>)
 801bbc8:	4293      	cmp	r3, r2
 801bbca:	d108      	bne.n	801bbde <HAL_DMA_Abort_IT+0x18e>
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	681a      	ldr	r2, [r3, #0]
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	f022 0201 	bic.w	r2, r2, #1
 801bbda:	601a      	str	r2, [r3, #0]
 801bbdc:	e178      	b.n	801bed0 <HAL_DMA_Abort_IT+0x480>
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	681a      	ldr	r2, [r3, #0]
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	f022 0201 	bic.w	r2, r2, #1
 801bbec:	601a      	str	r2, [r3, #0]
 801bbee:	e16f      	b.n	801bed0 <HAL_DMA_Abort_IT+0x480>
 801bbf0:	40020010 	.word	0x40020010
 801bbf4:	40020028 	.word	0x40020028
 801bbf8:	40020040 	.word	0x40020040
 801bbfc:	40020058 	.word	0x40020058
 801bc00:	40020070 	.word	0x40020070
 801bc04:	40020088 	.word	0x40020088
 801bc08:	400200a0 	.word	0x400200a0
 801bc0c:	400200b8 	.word	0x400200b8
 801bc10:	40020410 	.word	0x40020410
 801bc14:	40020428 	.word	0x40020428
 801bc18:	40020440 	.word	0x40020440
 801bc1c:	40020458 	.word	0x40020458
 801bc20:	40020470 	.word	0x40020470
 801bc24:	40020488 	.word	0x40020488
 801bc28:	400204a0 	.word	0x400204a0
 801bc2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	681a      	ldr	r2, [r3, #0]
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	f022 020e 	bic.w	r2, r2, #14
 801bc3e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	4a6c      	ldr	r2, [pc, #432]	@ (801bdf8 <HAL_DMA_Abort_IT+0x3a8>)
 801bc46:	4293      	cmp	r3, r2
 801bc48:	d04a      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	4a6b      	ldr	r2, [pc, #428]	@ (801bdfc <HAL_DMA_Abort_IT+0x3ac>)
 801bc50:	4293      	cmp	r3, r2
 801bc52:	d045      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	4a69      	ldr	r2, [pc, #420]	@ (801be00 <HAL_DMA_Abort_IT+0x3b0>)
 801bc5a:	4293      	cmp	r3, r2
 801bc5c:	d040      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	4a68      	ldr	r2, [pc, #416]	@ (801be04 <HAL_DMA_Abort_IT+0x3b4>)
 801bc64:	4293      	cmp	r3, r2
 801bc66:	d03b      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	4a66      	ldr	r2, [pc, #408]	@ (801be08 <HAL_DMA_Abort_IT+0x3b8>)
 801bc6e:	4293      	cmp	r3, r2
 801bc70:	d036      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	4a65      	ldr	r2, [pc, #404]	@ (801be0c <HAL_DMA_Abort_IT+0x3bc>)
 801bc78:	4293      	cmp	r3, r2
 801bc7a:	d031      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	4a63      	ldr	r2, [pc, #396]	@ (801be10 <HAL_DMA_Abort_IT+0x3c0>)
 801bc82:	4293      	cmp	r3, r2
 801bc84:	d02c      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	4a62      	ldr	r2, [pc, #392]	@ (801be14 <HAL_DMA_Abort_IT+0x3c4>)
 801bc8c:	4293      	cmp	r3, r2
 801bc8e:	d027      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	4a60      	ldr	r2, [pc, #384]	@ (801be18 <HAL_DMA_Abort_IT+0x3c8>)
 801bc96:	4293      	cmp	r3, r2
 801bc98:	d022      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	4a5f      	ldr	r2, [pc, #380]	@ (801be1c <HAL_DMA_Abort_IT+0x3cc>)
 801bca0:	4293      	cmp	r3, r2
 801bca2:	d01d      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	4a5d      	ldr	r2, [pc, #372]	@ (801be20 <HAL_DMA_Abort_IT+0x3d0>)
 801bcaa:	4293      	cmp	r3, r2
 801bcac:	d018      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	4a5c      	ldr	r2, [pc, #368]	@ (801be24 <HAL_DMA_Abort_IT+0x3d4>)
 801bcb4:	4293      	cmp	r3, r2
 801bcb6:	d013      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	4a5a      	ldr	r2, [pc, #360]	@ (801be28 <HAL_DMA_Abort_IT+0x3d8>)
 801bcbe:	4293      	cmp	r3, r2
 801bcc0:	d00e      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	4a59      	ldr	r2, [pc, #356]	@ (801be2c <HAL_DMA_Abort_IT+0x3dc>)
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	d009      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	4a57      	ldr	r2, [pc, #348]	@ (801be30 <HAL_DMA_Abort_IT+0x3e0>)
 801bcd2:	4293      	cmp	r3, r2
 801bcd4:	d004      	beq.n	801bce0 <HAL_DMA_Abort_IT+0x290>
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	4a56      	ldr	r2, [pc, #344]	@ (801be34 <HAL_DMA_Abort_IT+0x3e4>)
 801bcdc:	4293      	cmp	r3, r2
 801bcde:	d108      	bne.n	801bcf2 <HAL_DMA_Abort_IT+0x2a2>
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	681a      	ldr	r2, [r3, #0]
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	f022 0201 	bic.w	r2, r2, #1
 801bcee:	601a      	str	r2, [r3, #0]
 801bcf0:	e007      	b.n	801bd02 <HAL_DMA_Abort_IT+0x2b2>
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	681a      	ldr	r2, [r3, #0]
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	f022 0201 	bic.w	r2, r2, #1
 801bd00:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	4a3c      	ldr	r2, [pc, #240]	@ (801bdf8 <HAL_DMA_Abort_IT+0x3a8>)
 801bd08:	4293      	cmp	r3, r2
 801bd0a:	d072      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	4a3a      	ldr	r2, [pc, #232]	@ (801bdfc <HAL_DMA_Abort_IT+0x3ac>)
 801bd12:	4293      	cmp	r3, r2
 801bd14:	d06d      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	4a39      	ldr	r2, [pc, #228]	@ (801be00 <HAL_DMA_Abort_IT+0x3b0>)
 801bd1c:	4293      	cmp	r3, r2
 801bd1e:	d068      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	4a37      	ldr	r2, [pc, #220]	@ (801be04 <HAL_DMA_Abort_IT+0x3b4>)
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d063      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	4a36      	ldr	r2, [pc, #216]	@ (801be08 <HAL_DMA_Abort_IT+0x3b8>)
 801bd30:	4293      	cmp	r3, r2
 801bd32:	d05e      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	4a34      	ldr	r2, [pc, #208]	@ (801be0c <HAL_DMA_Abort_IT+0x3bc>)
 801bd3a:	4293      	cmp	r3, r2
 801bd3c:	d059      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	4a33      	ldr	r2, [pc, #204]	@ (801be10 <HAL_DMA_Abort_IT+0x3c0>)
 801bd44:	4293      	cmp	r3, r2
 801bd46:	d054      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	4a31      	ldr	r2, [pc, #196]	@ (801be14 <HAL_DMA_Abort_IT+0x3c4>)
 801bd4e:	4293      	cmp	r3, r2
 801bd50:	d04f      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	4a30      	ldr	r2, [pc, #192]	@ (801be18 <HAL_DMA_Abort_IT+0x3c8>)
 801bd58:	4293      	cmp	r3, r2
 801bd5a:	d04a      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4a2e      	ldr	r2, [pc, #184]	@ (801be1c <HAL_DMA_Abort_IT+0x3cc>)
 801bd62:	4293      	cmp	r3, r2
 801bd64:	d045      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	4a2d      	ldr	r2, [pc, #180]	@ (801be20 <HAL_DMA_Abort_IT+0x3d0>)
 801bd6c:	4293      	cmp	r3, r2
 801bd6e:	d040      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	4a2b      	ldr	r2, [pc, #172]	@ (801be24 <HAL_DMA_Abort_IT+0x3d4>)
 801bd76:	4293      	cmp	r3, r2
 801bd78:	d03b      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	4a2a      	ldr	r2, [pc, #168]	@ (801be28 <HAL_DMA_Abort_IT+0x3d8>)
 801bd80:	4293      	cmp	r3, r2
 801bd82:	d036      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	4a28      	ldr	r2, [pc, #160]	@ (801be2c <HAL_DMA_Abort_IT+0x3dc>)
 801bd8a:	4293      	cmp	r3, r2
 801bd8c:	d031      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	4a27      	ldr	r2, [pc, #156]	@ (801be30 <HAL_DMA_Abort_IT+0x3e0>)
 801bd94:	4293      	cmp	r3, r2
 801bd96:	d02c      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4a25      	ldr	r2, [pc, #148]	@ (801be34 <HAL_DMA_Abort_IT+0x3e4>)
 801bd9e:	4293      	cmp	r3, r2
 801bda0:	d027      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	4a24      	ldr	r2, [pc, #144]	@ (801be38 <HAL_DMA_Abort_IT+0x3e8>)
 801bda8:	4293      	cmp	r3, r2
 801bdaa:	d022      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	4a22      	ldr	r2, [pc, #136]	@ (801be3c <HAL_DMA_Abort_IT+0x3ec>)
 801bdb2:	4293      	cmp	r3, r2
 801bdb4:	d01d      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	4a21      	ldr	r2, [pc, #132]	@ (801be40 <HAL_DMA_Abort_IT+0x3f0>)
 801bdbc:	4293      	cmp	r3, r2
 801bdbe:	d018      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	4a1f      	ldr	r2, [pc, #124]	@ (801be44 <HAL_DMA_Abort_IT+0x3f4>)
 801bdc6:	4293      	cmp	r3, r2
 801bdc8:	d013      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	4a1e      	ldr	r2, [pc, #120]	@ (801be48 <HAL_DMA_Abort_IT+0x3f8>)
 801bdd0:	4293      	cmp	r3, r2
 801bdd2:	d00e      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	4a1c      	ldr	r2, [pc, #112]	@ (801be4c <HAL_DMA_Abort_IT+0x3fc>)
 801bdda:	4293      	cmp	r3, r2
 801bddc:	d009      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	4a1b      	ldr	r2, [pc, #108]	@ (801be50 <HAL_DMA_Abort_IT+0x400>)
 801bde4:	4293      	cmp	r3, r2
 801bde6:	d004      	beq.n	801bdf2 <HAL_DMA_Abort_IT+0x3a2>
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	4a19      	ldr	r2, [pc, #100]	@ (801be54 <HAL_DMA_Abort_IT+0x404>)
 801bdee:	4293      	cmp	r3, r2
 801bdf0:	d132      	bne.n	801be58 <HAL_DMA_Abort_IT+0x408>
 801bdf2:	2301      	movs	r3, #1
 801bdf4:	e031      	b.n	801be5a <HAL_DMA_Abort_IT+0x40a>
 801bdf6:	bf00      	nop
 801bdf8:	40020010 	.word	0x40020010
 801bdfc:	40020028 	.word	0x40020028
 801be00:	40020040 	.word	0x40020040
 801be04:	40020058 	.word	0x40020058
 801be08:	40020070 	.word	0x40020070
 801be0c:	40020088 	.word	0x40020088
 801be10:	400200a0 	.word	0x400200a0
 801be14:	400200b8 	.word	0x400200b8
 801be18:	40020410 	.word	0x40020410
 801be1c:	40020428 	.word	0x40020428
 801be20:	40020440 	.word	0x40020440
 801be24:	40020458 	.word	0x40020458
 801be28:	40020470 	.word	0x40020470
 801be2c:	40020488 	.word	0x40020488
 801be30:	400204a0 	.word	0x400204a0
 801be34:	400204b8 	.word	0x400204b8
 801be38:	58025408 	.word	0x58025408
 801be3c:	5802541c 	.word	0x5802541c
 801be40:	58025430 	.word	0x58025430
 801be44:	58025444 	.word	0x58025444
 801be48:	58025458 	.word	0x58025458
 801be4c:	5802546c 	.word	0x5802546c
 801be50:	58025480 	.word	0x58025480
 801be54:	58025494 	.word	0x58025494
 801be58:	2300      	movs	r3, #0
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d028      	beq.n	801beb0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801be62:	681a      	ldr	r2, [r3, #0]
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801be68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801be6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801be72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801be78:	f003 031f 	and.w	r3, r3, #31
 801be7c:	2201      	movs	r2, #1
 801be7e:	409a      	lsls	r2, r3
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801be88:	687a      	ldr	r2, [r7, #4]
 801be8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801be8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801be92:	2b00      	cmp	r3, #0
 801be94:	d00c      	beq.n	801beb0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801be9a:	681a      	ldr	r2, [r3, #0]
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bea0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801bea4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801beaa:	687a      	ldr	r2, [r7, #4]
 801beac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801beae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2201      	movs	r2, #1
 801beb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	2200      	movs	r2, #0
 801bebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d003      	beq.n	801bed0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801becc:	6878      	ldr	r0, [r7, #4]
 801bece:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801bed0:	2300      	movs	r3, #0
}
 801bed2:	4618      	mov	r0, r3
 801bed4:	3710      	adds	r7, #16
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bd80      	pop	{r7, pc}
 801beda:	bf00      	nop

0801bedc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b084      	sub	sp, #16
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d101      	bne.n	801beee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801beea:	2301      	movs	r3, #1
 801beec:	e0e3      	b.n	801c0b6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d106      	bne.n	801bf06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	2223      	movs	r2, #35	@ 0x23
 801befc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801bf00:	6878      	ldr	r0, [r7, #4]
 801bf02:	f7fe fdc1 	bl	801aa88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bf06:	4b6e      	ldr	r3, [pc, #440]	@ (801c0c0 <HAL_ETH_Init+0x1e4>)
 801bf08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bf0c:	4a6c      	ldr	r2, [pc, #432]	@ (801c0c0 <HAL_ETH_Init+0x1e4>)
 801bf0e:	f043 0302 	orr.w	r3, r3, #2
 801bf12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801bf16:	4b6a      	ldr	r3, [pc, #424]	@ (801c0c0 <HAL_ETH_Init+0x1e4>)
 801bf18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bf1c:	f003 0302 	and.w	r3, r3, #2
 801bf20:	60bb      	str	r3, [r7, #8]
 801bf22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	7a1b      	ldrb	r3, [r3, #8]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d103      	bne.n	801bf34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 801bf2c:	2000      	movs	r0, #0
 801bf2e:	f7ff f94d 	bl	801b1cc <HAL_SYSCFG_ETHInterfaceSelect>
 801bf32:	e003      	b.n	801bf3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 801bf34:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801bf38:	f7ff f948 	bl	801b1cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 801bf3c:	4b61      	ldr	r3, [pc, #388]	@ (801c0c4 <HAL_ETH_Init+0x1e8>)
 801bf3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	687a      	ldr	r2, [r7, #4]
 801bf4c:	6812      	ldr	r2, [r2, #0]
 801bf4e:	f043 0301 	orr.w	r3, r3, #1
 801bf52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bf56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bf58:	f7ff f920 	bl	801b19c <HAL_GetTick>
 801bf5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801bf5e:	e011      	b.n	801bf84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801bf60:	f7ff f91c 	bl	801b19c <HAL_GetTick>
 801bf64:	4602      	mov	r2, r0
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	1ad3      	subs	r3, r2, r3
 801bf6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801bf6e:	d909      	bls.n	801bf84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	2204      	movs	r2, #4
 801bf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	22e0      	movs	r2, #224	@ 0xe0
 801bf7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 801bf80:	2301      	movs	r3, #1
 801bf82:	e098      	b.n	801c0b6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	f003 0301 	and.w	r3, r3, #1
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d1e4      	bne.n	801bf60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 801bf96:	6878      	ldr	r0, [r7, #4]
 801bf98:	f000 f89e 	bl	801c0d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 801bf9c:	f001 fd66 	bl	801da6c <HAL_RCC_GetHCLKFreq>
 801bfa0:	4603      	mov	r3, r0
 801bfa2:	4a49      	ldr	r2, [pc, #292]	@ (801c0c8 <HAL_ETH_Init+0x1ec>)
 801bfa4:	fba2 2303 	umull	r2, r3, r2, r3
 801bfa8:	0c9a      	lsrs	r2, r3, #18
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	3a01      	subs	r2, #1
 801bfb0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801bfb4:	6878      	ldr	r0, [r7, #4]
 801bfb6:	f000 fa81 	bl	801c4bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bfc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801bfc6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 801bfca:	687a      	ldr	r2, [r7, #4]
 801bfcc:	6812      	ldr	r2, [r2, #0]
 801bfce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bfd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bfd6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	695b      	ldr	r3, [r3, #20]
 801bfde:	f003 0303 	and.w	r3, r3, #3
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d009      	beq.n	801bffa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2201      	movs	r2, #1
 801bfea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	22e0      	movs	r2, #224	@ 0xe0
 801bff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 801bff6:	2301      	movs	r3, #1
 801bff8:	e05d      	b.n	801c0b6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c002:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801c006:	4b31      	ldr	r3, [pc, #196]	@ (801c0cc <HAL_ETH_Init+0x1f0>)
 801c008:	4013      	ands	r3, r2
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	6952      	ldr	r2, [r2, #20]
 801c00e:	0051      	lsls	r1, r2, #1
 801c010:	687a      	ldr	r2, [r7, #4]
 801c012:	6812      	ldr	r2, [r2, #0]
 801c014:	430b      	orrs	r3, r1
 801c016:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c01a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801c01e:	6878      	ldr	r0, [r7, #4]
 801c020:	f000 fae9 	bl	801c5f6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801c024:	6878      	ldr	r0, [r7, #4]
 801c026:	f000 fb2f 	bl	801c688 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	3305      	adds	r3, #5
 801c030:	781b      	ldrb	r3, [r3, #0]
 801c032:	021a      	lsls	r2, r3, #8
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	685b      	ldr	r3, [r3, #4]
 801c038:	3304      	adds	r3, #4
 801c03a:	781b      	ldrb	r3, [r3, #0]
 801c03c:	4619      	mov	r1, r3
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	430a      	orrs	r2, r1
 801c044:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	685b      	ldr	r3, [r3, #4]
 801c04c:	3303      	adds	r3, #3
 801c04e:	781b      	ldrb	r3, [r3, #0]
 801c050:	061a      	lsls	r2, r3, #24
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	685b      	ldr	r3, [r3, #4]
 801c056:	3302      	adds	r3, #2
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	041b      	lsls	r3, r3, #16
 801c05c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	685b      	ldr	r3, [r3, #4]
 801c062:	3301      	adds	r3, #1
 801c064:	781b      	ldrb	r3, [r3, #0]
 801c066:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801c068:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	685b      	ldr	r3, [r3, #4]
 801c06e:	781b      	ldrb	r3, [r3, #0]
 801c070:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801c076:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801c078:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681a      	ldr	r2, [r3, #0]
 801c088:	4b11      	ldr	r3, [pc, #68]	@ (801c0d0 <HAL_ETH_Init+0x1f4>)
 801c08a:	430b      	orrs	r3, r1
 801c08c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	681a      	ldr	r2, [r3, #0]
 801c09c:	4b0d      	ldr	r3, [pc, #52]	@ (801c0d4 <HAL_ETH_Init+0x1f8>)
 801c09e:	430b      	orrs	r3, r1
 801c0a0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2210      	movs	r2, #16
 801c0b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801c0b4:	2300      	movs	r3, #0
}
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	3710      	adds	r7, #16
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	bd80      	pop	{r7, pc}
 801c0be:	bf00      	nop
 801c0c0:	58024400 	.word	0x58024400
 801c0c4:	58000400 	.word	0x58000400
 801c0c8:	431bde83 	.word	0x431bde83
 801c0cc:	ffff8001 	.word	0xffff8001
 801c0d0:	0c020060 	.word	0x0c020060
 801c0d4:	0c20c000 	.word	0x0c20c000

0801c0d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801c0d8:	b580      	push	{r7, lr}
 801c0da:	b084      	sub	sp, #16
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801c0e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c0f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801c0f2:	f001 fcbb 	bl	801da6c <HAL_RCC_GetHCLKFreq>
 801c0f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	4a1a      	ldr	r2, [pc, #104]	@ (801c164 <HAL_ETH_SetMDIOClockRange+0x8c>)
 801c0fc:	4293      	cmp	r3, r2
 801c0fe:	d804      	bhi.n	801c10a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801c106:	60fb      	str	r3, [r7, #12]
 801c108:	e022      	b.n	801c150 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 801c10a:	68bb      	ldr	r3, [r7, #8]
 801c10c:	4a16      	ldr	r2, [pc, #88]	@ (801c168 <HAL_ETH_SetMDIOClockRange+0x90>)
 801c10e:	4293      	cmp	r3, r2
 801c110:	d204      	bcs.n	801c11c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801c118:	60fb      	str	r3, [r7, #12]
 801c11a:	e019      	b.n	801c150 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 801c11c:	68bb      	ldr	r3, [r7, #8]
 801c11e:	4a13      	ldr	r2, [pc, #76]	@ (801c16c <HAL_ETH_SetMDIOClockRange+0x94>)
 801c120:	4293      	cmp	r3, r2
 801c122:	d915      	bls.n	801c150 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 801c124:	68bb      	ldr	r3, [r7, #8]
 801c126:	4a12      	ldr	r2, [pc, #72]	@ (801c170 <HAL_ETH_SetMDIOClockRange+0x98>)
 801c128:	4293      	cmp	r3, r2
 801c12a:	d804      	bhi.n	801c136 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c132:	60fb      	str	r3, [r7, #12]
 801c134:	e00c      	b.n	801c150 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 801c136:	68bb      	ldr	r3, [r7, #8]
 801c138:	4a0e      	ldr	r2, [pc, #56]	@ (801c174 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801c13a:	4293      	cmp	r3, r2
 801c13c:	d804      	bhi.n	801c148 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801c144:	60fb      	str	r3, [r7, #12]
 801c146:	e003      	b.n	801c150 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801c14e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	68fa      	ldr	r2, [r7, #12]
 801c156:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 801c15a:	bf00      	nop
 801c15c:	3710      	adds	r7, #16
 801c15e:	46bd      	mov	sp, r7
 801c160:	bd80      	pop	{r7, pc}
 801c162:	bf00      	nop
 801c164:	02160ebf 	.word	0x02160ebf
 801c168:	03938700 	.word	0x03938700
 801c16c:	05f5e0ff 	.word	0x05f5e0ff
 801c170:	08f0d17f 	.word	0x08f0d17f
 801c174:	0ee6b27f 	.word	0x0ee6b27f

0801c178 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 801c178:	b480      	push	{r7}
 801c17a:	b085      	sub	sp, #20
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	6078      	str	r0, [r7, #4]
 801c180:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 801c18a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801c18c:	683b      	ldr	r3, [r7, #0]
 801c18e:	791b      	ldrb	r3, [r3, #4]
 801c190:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 801c192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	7b1b      	ldrb	r3, [r3, #12]
 801c198:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801c19a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801c19c:	683b      	ldr	r3, [r7, #0]
 801c19e:	7b5b      	ldrb	r3, [r3, #13]
 801c1a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801c1a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801c1a4:	683b      	ldr	r3, [r7, #0]
 801c1a6:	7b9b      	ldrb	r3, [r3, #14]
 801c1a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801c1aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	7bdb      	ldrb	r3, [r3, #15]
 801c1b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801c1b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801c1b4:	683a      	ldr	r2, [r7, #0]
 801c1b6:	7c12      	ldrb	r2, [r2, #16]
 801c1b8:	2a00      	cmp	r2, #0
 801c1ba:	d102      	bne.n	801c1c2 <ETH_SetMACConfig+0x4a>
 801c1bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801c1c0:	e000      	b.n	801c1c4 <ETH_SetMACConfig+0x4c>
 801c1c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801c1c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801c1c6:	683a      	ldr	r2, [r7, #0]
 801c1c8:	7c52      	ldrb	r2, [r2, #17]
 801c1ca:	2a00      	cmp	r2, #0
 801c1cc:	d102      	bne.n	801c1d4 <ETH_SetMACConfig+0x5c>
 801c1ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801c1d2:	e000      	b.n	801c1d6 <ETH_SetMACConfig+0x5e>
 801c1d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801c1d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 801c1d8:	683b      	ldr	r3, [r7, #0]
 801c1da:	7c9b      	ldrb	r3, [r3, #18]
 801c1dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801c1de:	431a      	orrs	r2, r3
               macconf->Speed |
 801c1e0:	683b      	ldr	r3, [r7, #0]
 801c1e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 801c1e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 801c1e6:	683b      	ldr	r3, [r7, #0]
 801c1e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 801c1ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 801c1ec:	683b      	ldr	r3, [r7, #0]
 801c1ee:	7f1b      	ldrb	r3, [r3, #28]
 801c1f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 801c1f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801c1f4:	683b      	ldr	r3, [r7, #0]
 801c1f6:	7f5b      	ldrb	r3, [r3, #29]
 801c1f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 801c1fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801c1fc:	683a      	ldr	r2, [r7, #0]
 801c1fe:	7f92      	ldrb	r2, [r2, #30]
 801c200:	2a00      	cmp	r2, #0
 801c202:	d102      	bne.n	801c20a <ETH_SetMACConfig+0x92>
 801c204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c208:	e000      	b.n	801c20c <ETH_SetMACConfig+0x94>
 801c20a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801c20c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801c20e:	683b      	ldr	r3, [r7, #0]
 801c210:	7fdb      	ldrb	r3, [r3, #31]
 801c212:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801c214:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801c216:	683a      	ldr	r2, [r7, #0]
 801c218:	f892 2020 	ldrb.w	r2, [r2, #32]
 801c21c:	2a00      	cmp	r2, #0
 801c21e:	d102      	bne.n	801c226 <ETH_SetMACConfig+0xae>
 801c220:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c224:	e000      	b.n	801c228 <ETH_SetMACConfig+0xb0>
 801c226:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801c228:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801c22e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c236:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 801c238:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 801c23e:	4313      	orrs	r3, r2
 801c240:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	681a      	ldr	r2, [r3, #0]
 801c248:	4b56      	ldr	r3, [pc, #344]	@ (801c3a4 <ETH_SetMACConfig+0x22c>)
 801c24a:	4013      	ands	r3, r2
 801c24c:	687a      	ldr	r2, [r7, #4]
 801c24e:	6812      	ldr	r2, [r2, #0]
 801c250:	68f9      	ldr	r1, [r7, #12]
 801c252:	430b      	orrs	r3, r1
 801c254:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c25a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801c25c:	683b      	ldr	r3, [r7, #0]
 801c25e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c262:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801c264:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801c266:	683b      	ldr	r3, [r7, #0]
 801c268:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c26c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801c26e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801c270:	683b      	ldr	r3, [r7, #0]
 801c272:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c276:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801c278:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801c27a:	683a      	ldr	r2, [r7, #0]
 801c27c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 801c280:	2a00      	cmp	r2, #0
 801c282:	d102      	bne.n	801c28a <ETH_SetMACConfig+0x112>
 801c284:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801c288:	e000      	b.n	801c28c <ETH_SetMACConfig+0x114>
 801c28a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801c28c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 801c28e:	683b      	ldr	r3, [r7, #0]
 801c290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801c292:	4313      	orrs	r3, r2
 801c294:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	685a      	ldr	r2, [r3, #4]
 801c29c:	4b42      	ldr	r3, [pc, #264]	@ (801c3a8 <ETH_SetMACConfig+0x230>)
 801c29e:	4013      	ands	r3, r2
 801c2a0:	687a      	ldr	r2, [r7, #4]
 801c2a2:	6812      	ldr	r2, [r2, #0]
 801c2a4:	68f9      	ldr	r1, [r7, #12]
 801c2a6:	430b      	orrs	r3, r1
 801c2a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801c2aa:	683b      	ldr	r3, [r7, #0]
 801c2ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c2b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 801c2b2:	683b      	ldr	r3, [r7, #0]
 801c2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801c2b6:	4313      	orrs	r3, r2
 801c2b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	68da      	ldr	r2, [r3, #12]
 801c2c0:	4b3a      	ldr	r3, [pc, #232]	@ (801c3ac <ETH_SetMACConfig+0x234>)
 801c2c2:	4013      	ands	r3, r2
 801c2c4:	687a      	ldr	r2, [r7, #4]
 801c2c6:	6812      	ldr	r2, [r2, #0]
 801c2c8:	68f9      	ldr	r1, [r7, #12]
 801c2ca:	430b      	orrs	r3, r1
 801c2cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801c2d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 801c2d6:	683b      	ldr	r3, [r7, #0]
 801c2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801c2da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801c2dc:	683a      	ldr	r2, [r7, #0]
 801c2de:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 801c2e2:	2a00      	cmp	r2, #0
 801c2e4:	d101      	bne.n	801c2ea <ETH_SetMACConfig+0x172>
 801c2e6:	2280      	movs	r2, #128	@ 0x80
 801c2e8:	e000      	b.n	801c2ec <ETH_SetMACConfig+0x174>
 801c2ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 801c2ec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c2f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801c2f4:	4313      	orrs	r3, r2
 801c2f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801c2fe:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 801c302:	4013      	ands	r3, r2
 801c304:	687a      	ldr	r2, [r7, #4]
 801c306:	6812      	ldr	r2, [r2, #0]
 801c308:	68f9      	ldr	r1, [r7, #12]
 801c30a:	430b      	orrs	r3, r1
 801c30c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801c30e:	683b      	ldr	r3, [r7, #0]
 801c310:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801c314:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801c31c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801c31e:	4313      	orrs	r3, r2
 801c320:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c32a:	f023 0103 	bic.w	r1, r3, #3
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	68fa      	ldr	r2, [r7, #12]
 801c334:	430a      	orrs	r2, r1
 801c336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 801c342:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	430a      	orrs	r2, r1
 801c350:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 801c354:	683b      	ldr	r3, [r7, #0]
 801c356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801c358:	683a      	ldr	r2, [r7, #0]
 801c35a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801c35e:	2a00      	cmp	r2, #0
 801c360:	d101      	bne.n	801c366 <ETH_SetMACConfig+0x1ee>
 801c362:	2240      	movs	r2, #64	@ 0x40
 801c364:	e000      	b.n	801c368 <ETH_SetMACConfig+0x1f0>
 801c366:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 801c368:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 801c36a:	683b      	ldr	r3, [r7, #0]
 801c36c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 801c370:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801c372:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801c37a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 801c37c:	4313      	orrs	r3, r2
 801c37e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801c388:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	68fa      	ldr	r2, [r7, #12]
 801c392:	430a      	orrs	r2, r1
 801c394:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 801c398:	bf00      	nop
 801c39a:	3714      	adds	r7, #20
 801c39c:	46bd      	mov	sp, r7
 801c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3a2:	4770      	bx	lr
 801c3a4:	00048083 	.word	0x00048083
 801c3a8:	c0f88000 	.word	0xc0f88000
 801c3ac:	fffffef0 	.word	0xfffffef0

0801c3b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 801c3b0:	b480      	push	{r7}
 801c3b2:	b085      	sub	sp, #20
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c3c2:	681a      	ldr	r2, [r3, #0]
 801c3c4:	4b38      	ldr	r3, [pc, #224]	@ (801c4a8 <ETH_SetDMAConfig+0xf8>)
 801c3c6:	4013      	ands	r3, r2
 801c3c8:	683a      	ldr	r2, [r7, #0]
 801c3ca:	6811      	ldr	r1, [r2, #0]
 801c3cc:	687a      	ldr	r2, [r7, #4]
 801c3ce:	6812      	ldr	r2, [r2, #0]
 801c3d0:	430b      	orrs	r3, r1
 801c3d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c3d6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801c3d8:	683b      	ldr	r3, [r7, #0]
 801c3da:	791b      	ldrb	r3, [r3, #4]
 801c3dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801c3e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 801c3e4:	683b      	ldr	r3, [r7, #0]
 801c3e6:	7b1b      	ldrb	r3, [r3, #12]
 801c3e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801c3ea:	4313      	orrs	r3, r2
 801c3ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c3f6:	685a      	ldr	r2, [r3, #4]
 801c3f8:	4b2c      	ldr	r3, [pc, #176]	@ (801c4ac <ETH_SetDMAConfig+0xfc>)
 801c3fa:	4013      	ands	r3, r2
 801c3fc:	687a      	ldr	r2, [r7, #4]
 801c3fe:	6812      	ldr	r2, [r2, #0]
 801c400:	68f9      	ldr	r1, [r7, #12]
 801c402:	430b      	orrs	r3, r1
 801c404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c408:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	7b5b      	ldrb	r3, [r3, #13]
 801c40e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801c414:	4313      	orrs	r3, r2
 801c416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c420:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801c424:	4b22      	ldr	r3, [pc, #136]	@ (801c4b0 <ETH_SetDMAConfig+0x100>)
 801c426:	4013      	ands	r3, r2
 801c428:	687a      	ldr	r2, [r7, #4]
 801c42a:	6812      	ldr	r2, [r2, #0]
 801c42c:	68f9      	ldr	r1, [r7, #12]
 801c42e:	430b      	orrs	r3, r1
 801c430:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c434:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 801c438:	683b      	ldr	r3, [r7, #0]
 801c43a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 801c43c:	683b      	ldr	r3, [r7, #0]
 801c43e:	7d1b      	ldrb	r3, [r3, #20]
 801c440:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 801c442:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 801c444:	683b      	ldr	r3, [r7, #0]
 801c446:	7f5b      	ldrb	r3, [r3, #29]
 801c448:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 801c44a:	4313      	orrs	r3, r2
 801c44c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c456:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801c45a:	4b16      	ldr	r3, [pc, #88]	@ (801c4b4 <ETH_SetDMAConfig+0x104>)
 801c45c:	4013      	ands	r3, r2
 801c45e:	687a      	ldr	r2, [r7, #4]
 801c460:	6812      	ldr	r2, [r2, #0]
 801c462:	68f9      	ldr	r1, [r7, #12]
 801c464:	430b      	orrs	r3, r1
 801c466:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c46a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	7f1b      	ldrb	r3, [r3, #28]
 801c472:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801c478:	4313      	orrs	r3, r2
 801c47a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c484:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801c488:	4b0b      	ldr	r3, [pc, #44]	@ (801c4b8 <ETH_SetDMAConfig+0x108>)
 801c48a:	4013      	ands	r3, r2
 801c48c:	687a      	ldr	r2, [r7, #4]
 801c48e:	6812      	ldr	r2, [r2, #0]
 801c490:	68f9      	ldr	r1, [r7, #12]
 801c492:	430b      	orrs	r3, r1
 801c494:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c498:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 801c49c:	bf00      	nop
 801c49e:	3714      	adds	r7, #20
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4a6:	4770      	bx	lr
 801c4a8:	ffff87fd 	.word	0xffff87fd
 801c4ac:	ffff2ffe 	.word	0xffff2ffe
 801c4b0:	fffec000 	.word	0xfffec000
 801c4b4:	ffc0efef 	.word	0xffc0efef
 801c4b8:	7fc0ffff 	.word	0x7fc0ffff

0801c4bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b0a4      	sub	sp, #144	@ 0x90
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801c4c4:	2301      	movs	r3, #1
 801c4c6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 801c4da:	2301      	movs	r3, #1
 801c4dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801c4e0:	2301      	movs	r3, #1
 801c4e2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801c4f2:	2301      	movs	r3, #1
 801c4f4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801c4f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801c4fc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801c4fe:	2300      	movs	r3, #0
 801c500:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 801c504:	2300      	movs	r3, #0
 801c506:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801c508:	2300      	movs	r3, #0
 801c50a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801c50e:	2300      	movs	r3, #0
 801c510:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 801c514:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801c518:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801c51a:	2300      	movs	r3, #0
 801c51c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801c520:	2300      	movs	r3, #0
 801c522:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 801c524:	2301      	movs	r3, #1
 801c526:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 801c52a:	2300      	movs	r3, #0
 801c52c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 801c530:	2300      	movs	r3, #0
 801c532:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801c536:	2300      	movs	r3, #0
 801c538:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 801c53a:	2300      	movs	r3, #0
 801c53c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801c53e:	2300      	movs	r3, #0
 801c540:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 801c542:	2300      	movs	r3, #0
 801c544:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801c548:	2300      	movs	r3, #0
 801c54a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 801c54e:	2301      	movs	r3, #1
 801c550:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801c554:	2320      	movs	r3, #32
 801c556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 801c55a:	2301      	movs	r3, #1
 801c55c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 801c560:	2300      	movs	r3, #0
 801c562:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801c566:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801c56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 801c56c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c570:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 801c572:	2300      	movs	r3, #0
 801c574:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801c578:	2302      	movs	r3, #2
 801c57a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 801c57e:	2300      	movs	r3, #0
 801c580:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801c584:	2300      	movs	r3, #0
 801c586:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801c58a:	2300      	movs	r3, #0
 801c58c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 801c590:	2301      	movs	r3, #1
 801c592:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 801c596:	2300      	movs	r3, #0
 801c598:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 801c59a:	2301      	movs	r3, #1
 801c59c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801c5a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801c5a4:	4619      	mov	r1, r3
 801c5a6:	6878      	ldr	r0, [r7, #4]
 801c5a8:	f7ff fde6 	bl	801c178 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801c5ac:	2301      	movs	r3, #1
 801c5ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801c5b0:	2301      	movs	r3, #1
 801c5b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 801c5be:	2300      	movs	r3, #0
 801c5c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801c5c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801c5ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801c5d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801c5d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 801c5dc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801c5e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801c5e2:	f107 0308 	add.w	r3, r7, #8
 801c5e6:	4619      	mov	r1, r3
 801c5e8:	6878      	ldr	r0, [r7, #4]
 801c5ea:	f7ff fee1 	bl	801c3b0 <ETH_SetDMAConfig>
}
 801c5ee:	bf00      	nop
 801c5f0:	3790      	adds	r7, #144	@ 0x90
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}

0801c5f6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801c5f6:	b480      	push	{r7}
 801c5f8:	b085      	sub	sp, #20
 801c5fa:	af00      	add	r7, sp, #0
 801c5fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801c5fe:	2300      	movs	r3, #0
 801c600:	60fb      	str	r3, [r7, #12]
 801c602:	e01d      	b.n	801c640 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	68d9      	ldr	r1, [r3, #12]
 801c608:	68fa      	ldr	r2, [r7, #12]
 801c60a:	4613      	mov	r3, r2
 801c60c:	005b      	lsls	r3, r3, #1
 801c60e:	4413      	add	r3, r2
 801c610:	00db      	lsls	r3, r3, #3
 801c612:	440b      	add	r3, r1
 801c614:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 801c616:	68bb      	ldr	r3, [r7, #8]
 801c618:	2200      	movs	r2, #0
 801c61a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 801c61c:	68bb      	ldr	r3, [r7, #8]
 801c61e:	2200      	movs	r2, #0
 801c620:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 801c622:	68bb      	ldr	r3, [r7, #8]
 801c624:	2200      	movs	r2, #0
 801c626:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	2200      	movs	r2, #0
 801c62c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801c62e:	68b9      	ldr	r1, [r7, #8]
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	68fa      	ldr	r2, [r7, #12]
 801c634:	3206      	adds	r2, #6
 801c636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	3301      	adds	r3, #1
 801c63e:	60fb      	str	r3, [r7, #12]
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	2b03      	cmp	r3, #3
 801c644:	d9de      	bls.n	801c604 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	2200      	movs	r2, #0
 801c64a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c654:	461a      	mov	r2, r3
 801c656:	2303      	movs	r3, #3
 801c658:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	68da      	ldr	r2, [r3, #12]
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c668:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	68da      	ldr	r2, [r3, #12]
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c678:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 801c67c:	bf00      	nop
 801c67e:	3714      	adds	r7, #20
 801c680:	46bd      	mov	sp, r7
 801c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c686:	4770      	bx	lr

0801c688 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801c688:	b480      	push	{r7}
 801c68a:	b085      	sub	sp, #20
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801c690:	2300      	movs	r3, #0
 801c692:	60fb      	str	r3, [r7, #12]
 801c694:	e023      	b.n	801c6de <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	6919      	ldr	r1, [r3, #16]
 801c69a:	68fa      	ldr	r2, [r7, #12]
 801c69c:	4613      	mov	r3, r2
 801c69e:	005b      	lsls	r3, r3, #1
 801c6a0:	4413      	add	r3, r2
 801c6a2:	00db      	lsls	r3, r3, #3
 801c6a4:	440b      	add	r3, r1
 801c6a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 801c6a8:	68bb      	ldr	r3, [r7, #8]
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	2200      	movs	r2, #0
 801c6b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 801c6b4:	68bb      	ldr	r3, [r7, #8]
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 801c6ba:	68bb      	ldr	r3, [r7, #8]
 801c6bc:	2200      	movs	r2, #0
 801c6be:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 801c6c6:	68bb      	ldr	r3, [r7, #8]
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801c6cc:	68b9      	ldr	r1, [r7, #8]
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	68fa      	ldr	r2, [r7, #12]
 801c6d2:	3212      	adds	r2, #18
 801c6d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	3301      	adds	r3, #1
 801c6dc:	60fb      	str	r3, [r7, #12]
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	2b03      	cmp	r3, #3
 801c6e2:	d9d8      	bls.n	801c696 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	2200      	movs	r2, #0
 801c6e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	2200      	movs	r2, #0
 801c6fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	2200      	movs	r2, #0
 801c700:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c70a:	461a      	mov	r2, r3
 801c70c:	2303      	movs	r3, #3
 801c70e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	691a      	ldr	r2, [r3, #16]
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c71e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	691b      	ldr	r3, [r3, #16]
 801c726:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c732:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 801c736:	bf00      	nop
 801c738:	3714      	adds	r7, #20
 801c73a:	46bd      	mov	sp, r7
 801c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c740:	4770      	bx	lr
	...

0801c744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c744:	b480      	push	{r7}
 801c746:	b089      	sub	sp, #36	@ 0x24
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
 801c74c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c74e:	2300      	movs	r3, #0
 801c750:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c752:	4b89      	ldr	r3, [pc, #548]	@ (801c978 <HAL_GPIO_Init+0x234>)
 801c754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c756:	e194      	b.n	801ca82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c758:	683b      	ldr	r3, [r7, #0]
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	2101      	movs	r1, #1
 801c75e:	69fb      	ldr	r3, [r7, #28]
 801c760:	fa01 f303 	lsl.w	r3, r1, r3
 801c764:	4013      	ands	r3, r2
 801c766:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c768:	693b      	ldr	r3, [r7, #16]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	f000 8186 	beq.w	801ca7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	685b      	ldr	r3, [r3, #4]
 801c774:	f003 0303 	and.w	r3, r3, #3
 801c778:	2b01      	cmp	r3, #1
 801c77a:	d005      	beq.n	801c788 <HAL_GPIO_Init+0x44>
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	685b      	ldr	r3, [r3, #4]
 801c780:	f003 0303 	and.w	r3, r3, #3
 801c784:	2b02      	cmp	r3, #2
 801c786:	d130      	bne.n	801c7ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	689b      	ldr	r3, [r3, #8]
 801c78c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c78e:	69fb      	ldr	r3, [r7, #28]
 801c790:	005b      	lsls	r3, r3, #1
 801c792:	2203      	movs	r2, #3
 801c794:	fa02 f303 	lsl.w	r3, r2, r3
 801c798:	43db      	mvns	r3, r3
 801c79a:	69ba      	ldr	r2, [r7, #24]
 801c79c:	4013      	ands	r3, r2
 801c79e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	68da      	ldr	r2, [r3, #12]
 801c7a4:	69fb      	ldr	r3, [r7, #28]
 801c7a6:	005b      	lsls	r3, r3, #1
 801c7a8:	fa02 f303 	lsl.w	r3, r2, r3
 801c7ac:	69ba      	ldr	r2, [r7, #24]
 801c7ae:	4313      	orrs	r3, r2
 801c7b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	69ba      	ldr	r2, [r7, #24]
 801c7b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	685b      	ldr	r3, [r3, #4]
 801c7bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c7be:	2201      	movs	r2, #1
 801c7c0:	69fb      	ldr	r3, [r7, #28]
 801c7c2:	fa02 f303 	lsl.w	r3, r2, r3
 801c7c6:	43db      	mvns	r3, r3
 801c7c8:	69ba      	ldr	r2, [r7, #24]
 801c7ca:	4013      	ands	r3, r2
 801c7cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	685b      	ldr	r3, [r3, #4]
 801c7d2:	091b      	lsrs	r3, r3, #4
 801c7d4:	f003 0201 	and.w	r2, r3, #1
 801c7d8:	69fb      	ldr	r3, [r7, #28]
 801c7da:	fa02 f303 	lsl.w	r3, r2, r3
 801c7de:	69ba      	ldr	r2, [r7, #24]
 801c7e0:	4313      	orrs	r3, r2
 801c7e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	69ba      	ldr	r2, [r7, #24]
 801c7e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	685b      	ldr	r3, [r3, #4]
 801c7ee:	f003 0303 	and.w	r3, r3, #3
 801c7f2:	2b03      	cmp	r3, #3
 801c7f4:	d017      	beq.n	801c826 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	68db      	ldr	r3, [r3, #12]
 801c7fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c7fc:	69fb      	ldr	r3, [r7, #28]
 801c7fe:	005b      	lsls	r3, r3, #1
 801c800:	2203      	movs	r2, #3
 801c802:	fa02 f303 	lsl.w	r3, r2, r3
 801c806:	43db      	mvns	r3, r3
 801c808:	69ba      	ldr	r2, [r7, #24]
 801c80a:	4013      	ands	r3, r2
 801c80c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c80e:	683b      	ldr	r3, [r7, #0]
 801c810:	689a      	ldr	r2, [r3, #8]
 801c812:	69fb      	ldr	r3, [r7, #28]
 801c814:	005b      	lsls	r3, r3, #1
 801c816:	fa02 f303 	lsl.w	r3, r2, r3
 801c81a:	69ba      	ldr	r2, [r7, #24]
 801c81c:	4313      	orrs	r3, r2
 801c81e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	69ba      	ldr	r2, [r7, #24]
 801c824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c826:	683b      	ldr	r3, [r7, #0]
 801c828:	685b      	ldr	r3, [r3, #4]
 801c82a:	f003 0303 	and.w	r3, r3, #3
 801c82e:	2b02      	cmp	r3, #2
 801c830:	d123      	bne.n	801c87a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c832:	69fb      	ldr	r3, [r7, #28]
 801c834:	08da      	lsrs	r2, r3, #3
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	3208      	adds	r2, #8
 801c83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c83e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c840:	69fb      	ldr	r3, [r7, #28]
 801c842:	f003 0307 	and.w	r3, r3, #7
 801c846:	009b      	lsls	r3, r3, #2
 801c848:	220f      	movs	r2, #15
 801c84a:	fa02 f303 	lsl.w	r3, r2, r3
 801c84e:	43db      	mvns	r3, r3
 801c850:	69ba      	ldr	r2, [r7, #24]
 801c852:	4013      	ands	r3, r2
 801c854:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c856:	683b      	ldr	r3, [r7, #0]
 801c858:	691a      	ldr	r2, [r3, #16]
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	f003 0307 	and.w	r3, r3, #7
 801c860:	009b      	lsls	r3, r3, #2
 801c862:	fa02 f303 	lsl.w	r3, r2, r3
 801c866:	69ba      	ldr	r2, [r7, #24]
 801c868:	4313      	orrs	r3, r2
 801c86a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c86c:	69fb      	ldr	r3, [r7, #28]
 801c86e:	08da      	lsrs	r2, r3, #3
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	3208      	adds	r2, #8
 801c874:	69b9      	ldr	r1, [r7, #24]
 801c876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c880:	69fb      	ldr	r3, [r7, #28]
 801c882:	005b      	lsls	r3, r3, #1
 801c884:	2203      	movs	r2, #3
 801c886:	fa02 f303 	lsl.w	r3, r2, r3
 801c88a:	43db      	mvns	r3, r3
 801c88c:	69ba      	ldr	r2, [r7, #24]
 801c88e:	4013      	ands	r3, r2
 801c890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	685b      	ldr	r3, [r3, #4]
 801c896:	f003 0203 	and.w	r2, r3, #3
 801c89a:	69fb      	ldr	r3, [r7, #28]
 801c89c:	005b      	lsls	r3, r3, #1
 801c89e:	fa02 f303 	lsl.w	r3, r2, r3
 801c8a2:	69ba      	ldr	r2, [r7, #24]
 801c8a4:	4313      	orrs	r3, r2
 801c8a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	69ba      	ldr	r2, [r7, #24]
 801c8ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c8ae:	683b      	ldr	r3, [r7, #0]
 801c8b0:	685b      	ldr	r3, [r3, #4]
 801c8b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	f000 80e0 	beq.w	801ca7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c8bc:	4b2f      	ldr	r3, [pc, #188]	@ (801c97c <HAL_GPIO_Init+0x238>)
 801c8be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c8c2:	4a2e      	ldr	r2, [pc, #184]	@ (801c97c <HAL_GPIO_Init+0x238>)
 801c8c4:	f043 0302 	orr.w	r3, r3, #2
 801c8c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c8cc:	4b2b      	ldr	r3, [pc, #172]	@ (801c97c <HAL_GPIO_Init+0x238>)
 801c8ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c8d2:	f003 0302 	and.w	r3, r3, #2
 801c8d6:	60fb      	str	r3, [r7, #12]
 801c8d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c8da:	4a29      	ldr	r2, [pc, #164]	@ (801c980 <HAL_GPIO_Init+0x23c>)
 801c8dc:	69fb      	ldr	r3, [r7, #28]
 801c8de:	089b      	lsrs	r3, r3, #2
 801c8e0:	3302      	adds	r3, #2
 801c8e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c8e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c8e8:	69fb      	ldr	r3, [r7, #28]
 801c8ea:	f003 0303 	and.w	r3, r3, #3
 801c8ee:	009b      	lsls	r3, r3, #2
 801c8f0:	220f      	movs	r2, #15
 801c8f2:	fa02 f303 	lsl.w	r3, r2, r3
 801c8f6:	43db      	mvns	r3, r3
 801c8f8:	69ba      	ldr	r2, [r7, #24]
 801c8fa:	4013      	ands	r3, r2
 801c8fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	4a20      	ldr	r2, [pc, #128]	@ (801c984 <HAL_GPIO_Init+0x240>)
 801c902:	4293      	cmp	r3, r2
 801c904:	d052      	beq.n	801c9ac <HAL_GPIO_Init+0x268>
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	4a1f      	ldr	r2, [pc, #124]	@ (801c988 <HAL_GPIO_Init+0x244>)
 801c90a:	4293      	cmp	r3, r2
 801c90c:	d031      	beq.n	801c972 <HAL_GPIO_Init+0x22e>
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	4a1e      	ldr	r2, [pc, #120]	@ (801c98c <HAL_GPIO_Init+0x248>)
 801c912:	4293      	cmp	r3, r2
 801c914:	d02b      	beq.n	801c96e <HAL_GPIO_Init+0x22a>
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	4a1d      	ldr	r2, [pc, #116]	@ (801c990 <HAL_GPIO_Init+0x24c>)
 801c91a:	4293      	cmp	r3, r2
 801c91c:	d025      	beq.n	801c96a <HAL_GPIO_Init+0x226>
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	4a1c      	ldr	r2, [pc, #112]	@ (801c994 <HAL_GPIO_Init+0x250>)
 801c922:	4293      	cmp	r3, r2
 801c924:	d01f      	beq.n	801c966 <HAL_GPIO_Init+0x222>
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	4a1b      	ldr	r2, [pc, #108]	@ (801c998 <HAL_GPIO_Init+0x254>)
 801c92a:	4293      	cmp	r3, r2
 801c92c:	d019      	beq.n	801c962 <HAL_GPIO_Init+0x21e>
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	4a1a      	ldr	r2, [pc, #104]	@ (801c99c <HAL_GPIO_Init+0x258>)
 801c932:	4293      	cmp	r3, r2
 801c934:	d013      	beq.n	801c95e <HAL_GPIO_Init+0x21a>
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	4a19      	ldr	r2, [pc, #100]	@ (801c9a0 <HAL_GPIO_Init+0x25c>)
 801c93a:	4293      	cmp	r3, r2
 801c93c:	d00d      	beq.n	801c95a <HAL_GPIO_Init+0x216>
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	4a18      	ldr	r2, [pc, #96]	@ (801c9a4 <HAL_GPIO_Init+0x260>)
 801c942:	4293      	cmp	r3, r2
 801c944:	d007      	beq.n	801c956 <HAL_GPIO_Init+0x212>
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	4a17      	ldr	r2, [pc, #92]	@ (801c9a8 <HAL_GPIO_Init+0x264>)
 801c94a:	4293      	cmp	r3, r2
 801c94c:	d101      	bne.n	801c952 <HAL_GPIO_Init+0x20e>
 801c94e:	2309      	movs	r3, #9
 801c950:	e02d      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c952:	230a      	movs	r3, #10
 801c954:	e02b      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c956:	2308      	movs	r3, #8
 801c958:	e029      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c95a:	2307      	movs	r3, #7
 801c95c:	e027      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c95e:	2306      	movs	r3, #6
 801c960:	e025      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c962:	2305      	movs	r3, #5
 801c964:	e023      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c966:	2304      	movs	r3, #4
 801c968:	e021      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c96a:	2303      	movs	r3, #3
 801c96c:	e01f      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c96e:	2302      	movs	r3, #2
 801c970:	e01d      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c972:	2301      	movs	r3, #1
 801c974:	e01b      	b.n	801c9ae <HAL_GPIO_Init+0x26a>
 801c976:	bf00      	nop
 801c978:	58000080 	.word	0x58000080
 801c97c:	58024400 	.word	0x58024400
 801c980:	58000400 	.word	0x58000400
 801c984:	58020000 	.word	0x58020000
 801c988:	58020400 	.word	0x58020400
 801c98c:	58020800 	.word	0x58020800
 801c990:	58020c00 	.word	0x58020c00
 801c994:	58021000 	.word	0x58021000
 801c998:	58021400 	.word	0x58021400
 801c99c:	58021800 	.word	0x58021800
 801c9a0:	58021c00 	.word	0x58021c00
 801c9a4:	58022000 	.word	0x58022000
 801c9a8:	58022400 	.word	0x58022400
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	69fa      	ldr	r2, [r7, #28]
 801c9b0:	f002 0203 	and.w	r2, r2, #3
 801c9b4:	0092      	lsls	r2, r2, #2
 801c9b6:	4093      	lsls	r3, r2
 801c9b8:	69ba      	ldr	r2, [r7, #24]
 801c9ba:	4313      	orrs	r3, r2
 801c9bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c9be:	4938      	ldr	r1, [pc, #224]	@ (801caa0 <HAL_GPIO_Init+0x35c>)
 801c9c0:	69fb      	ldr	r3, [r7, #28]
 801c9c2:	089b      	lsrs	r3, r3, #2
 801c9c4:	3302      	adds	r3, #2
 801c9c6:	69ba      	ldr	r2, [r7, #24]
 801c9c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c9cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c9d4:	693b      	ldr	r3, [r7, #16]
 801c9d6:	43db      	mvns	r3, r3
 801c9d8:	69ba      	ldr	r2, [r7, #24]
 801c9da:	4013      	ands	r3, r2
 801c9dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	685b      	ldr	r3, [r3, #4]
 801c9e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d003      	beq.n	801c9f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c9ea:	69ba      	ldr	r2, [r7, #24]
 801c9ec:	693b      	ldr	r3, [r7, #16]
 801c9ee:	4313      	orrs	r3, r2
 801c9f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c9f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c9f6:	69bb      	ldr	r3, [r7, #24]
 801c9f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c9fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c9fe:	685b      	ldr	r3, [r3, #4]
 801ca00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ca02:	693b      	ldr	r3, [r7, #16]
 801ca04:	43db      	mvns	r3, r3
 801ca06:	69ba      	ldr	r2, [r7, #24]
 801ca08:	4013      	ands	r3, r2
 801ca0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ca0c:	683b      	ldr	r3, [r7, #0]
 801ca0e:	685b      	ldr	r3, [r3, #4]
 801ca10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d003      	beq.n	801ca20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801ca18:	69ba      	ldr	r2, [r7, #24]
 801ca1a:	693b      	ldr	r3, [r7, #16]
 801ca1c:	4313      	orrs	r3, r2
 801ca1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801ca20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801ca24:	69bb      	ldr	r3, [r7, #24]
 801ca26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801ca28:	697b      	ldr	r3, [r7, #20]
 801ca2a:	685b      	ldr	r3, [r3, #4]
 801ca2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ca2e:	693b      	ldr	r3, [r7, #16]
 801ca30:	43db      	mvns	r3, r3
 801ca32:	69ba      	ldr	r2, [r7, #24]
 801ca34:	4013      	ands	r3, r2
 801ca36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ca38:	683b      	ldr	r3, [r7, #0]
 801ca3a:	685b      	ldr	r3, [r3, #4]
 801ca3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d003      	beq.n	801ca4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801ca44:	69ba      	ldr	r2, [r7, #24]
 801ca46:	693b      	ldr	r3, [r7, #16]
 801ca48:	4313      	orrs	r3, r2
 801ca4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801ca4c:	697b      	ldr	r3, [r7, #20]
 801ca4e:	69ba      	ldr	r2, [r7, #24]
 801ca50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ca58:	693b      	ldr	r3, [r7, #16]
 801ca5a:	43db      	mvns	r3, r3
 801ca5c:	69ba      	ldr	r2, [r7, #24]
 801ca5e:	4013      	ands	r3, r2
 801ca60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ca62:	683b      	ldr	r3, [r7, #0]
 801ca64:	685b      	ldr	r3, [r3, #4]
 801ca66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d003      	beq.n	801ca76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801ca6e:	69ba      	ldr	r2, [r7, #24]
 801ca70:	693b      	ldr	r3, [r7, #16]
 801ca72:	4313      	orrs	r3, r2
 801ca74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	69ba      	ldr	r2, [r7, #24]
 801ca7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ca7c:	69fb      	ldr	r3, [r7, #28]
 801ca7e:	3301      	adds	r3, #1
 801ca80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ca82:	683b      	ldr	r3, [r7, #0]
 801ca84:	681a      	ldr	r2, [r3, #0]
 801ca86:	69fb      	ldr	r3, [r7, #28]
 801ca88:	fa22 f303 	lsr.w	r3, r2, r3
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	f47f ae63 	bne.w	801c758 <HAL_GPIO_Init+0x14>
  }
}
 801ca92:	bf00      	nop
 801ca94:	bf00      	nop
 801ca96:	3724      	adds	r7, #36	@ 0x24
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca9e:	4770      	bx	lr
 801caa0:	58000400 	.word	0x58000400

0801caa4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801caa4:	b580      	push	{r7, lr}
 801caa6:	b084      	sub	sp, #16
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801caac:	4b29      	ldr	r3, [pc, #164]	@ (801cb54 <HAL_PWREx_ConfigSupply+0xb0>)
 801caae:	68db      	ldr	r3, [r3, #12]
 801cab0:	f003 0307 	and.w	r3, r3, #7
 801cab4:	2b06      	cmp	r3, #6
 801cab6:	d00a      	beq.n	801cace <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801cab8:	4b26      	ldr	r3, [pc, #152]	@ (801cb54 <HAL_PWREx_ConfigSupply+0xb0>)
 801caba:	68db      	ldr	r3, [r3, #12]
 801cabc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cac0:	687a      	ldr	r2, [r7, #4]
 801cac2:	429a      	cmp	r2, r3
 801cac4:	d001      	beq.n	801caca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801cac6:	2301      	movs	r3, #1
 801cac8:	e040      	b.n	801cb4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801caca:	2300      	movs	r3, #0
 801cacc:	e03e      	b.n	801cb4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801cace:	4b21      	ldr	r3, [pc, #132]	@ (801cb54 <HAL_PWREx_ConfigSupply+0xb0>)
 801cad0:	68db      	ldr	r3, [r3, #12]
 801cad2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801cad6:	491f      	ldr	r1, [pc, #124]	@ (801cb54 <HAL_PWREx_ConfigSupply+0xb0>)
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	4313      	orrs	r3, r2
 801cadc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801cade:	f7fe fb5d 	bl	801b19c <HAL_GetTick>
 801cae2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cae4:	e009      	b.n	801cafa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801cae6:	f7fe fb59 	bl	801b19c <HAL_GetTick>
 801caea:	4602      	mov	r2, r0
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	1ad3      	subs	r3, r2, r3
 801caf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801caf4:	d901      	bls.n	801cafa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801caf6:	2301      	movs	r3, #1
 801caf8:	e028      	b.n	801cb4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cafa:	4b16      	ldr	r3, [pc, #88]	@ (801cb54 <HAL_PWREx_ConfigSupply+0xb0>)
 801cafc:	685b      	ldr	r3, [r3, #4]
 801cafe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cb02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cb06:	d1ee      	bne.n	801cae6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	2b1e      	cmp	r3, #30
 801cb0c:	d008      	beq.n	801cb20 <HAL_PWREx_ConfigSupply+0x7c>
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb12:	d005      	beq.n	801cb20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	2b1d      	cmp	r3, #29
 801cb18:	d002      	beq.n	801cb20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	2b2d      	cmp	r3, #45	@ 0x2d
 801cb1e:	d114      	bne.n	801cb4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 801cb20:	f7fe fb3c 	bl	801b19c <HAL_GetTick>
 801cb24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801cb26:	e009      	b.n	801cb3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801cb28:	f7fe fb38 	bl	801b19c <HAL_GetTick>
 801cb2c:	4602      	mov	r2, r0
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	1ad3      	subs	r3, r2, r3
 801cb32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801cb36:	d901      	bls.n	801cb3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801cb38:	2301      	movs	r3, #1
 801cb3a:	e007      	b.n	801cb4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801cb3c:	4b05      	ldr	r3, [pc, #20]	@ (801cb54 <HAL_PWREx_ConfigSupply+0xb0>)
 801cb3e:	68db      	ldr	r3, [r3, #12]
 801cb40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cb44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cb48:	d1ee      	bne.n	801cb28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801cb4a:	2300      	movs	r3, #0
}
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	3710      	adds	r7, #16
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd80      	pop	{r7, pc}
 801cb54:	58024800 	.word	0x58024800

0801cb58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cb58:	b580      	push	{r7, lr}
 801cb5a:	b08c      	sub	sp, #48	@ 0x30
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d102      	bne.n	801cb6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801cb66:	2301      	movs	r3, #1
 801cb68:	f000 bc48 	b.w	801d3fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	f003 0301 	and.w	r3, r3, #1
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	f000 8088 	beq.w	801cc8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cb7a:	4b99      	ldr	r3, [pc, #612]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cb7c:	691b      	ldr	r3, [r3, #16]
 801cb7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801cb84:	4b96      	ldr	r3, [pc, #600]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801cb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb8c:	2b10      	cmp	r3, #16
 801cb8e:	d007      	beq.n	801cba0 <HAL_RCC_OscConfig+0x48>
 801cb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb92:	2b18      	cmp	r3, #24
 801cb94:	d111      	bne.n	801cbba <HAL_RCC_OscConfig+0x62>
 801cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb98:	f003 0303 	and.w	r3, r3, #3
 801cb9c:	2b02      	cmp	r3, #2
 801cb9e:	d10c      	bne.n	801cbba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cba0:	4b8f      	ldr	r3, [pc, #572]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d06d      	beq.n	801cc88 <HAL_RCC_OscConfig+0x130>
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	685b      	ldr	r3, [r3, #4]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d169      	bne.n	801cc88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801cbb4:	2301      	movs	r3, #1
 801cbb6:	f000 bc21 	b.w	801d3fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	685b      	ldr	r3, [r3, #4]
 801cbbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cbc2:	d106      	bne.n	801cbd2 <HAL_RCC_OscConfig+0x7a>
 801cbc4:	4b86      	ldr	r3, [pc, #536]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	4a85      	ldr	r2, [pc, #532]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cbca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cbce:	6013      	str	r3, [r2, #0]
 801cbd0:	e02e      	b.n	801cc30 <HAL_RCC_OscConfig+0xd8>
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	685b      	ldr	r3, [r3, #4]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d10c      	bne.n	801cbf4 <HAL_RCC_OscConfig+0x9c>
 801cbda:	4b81      	ldr	r3, [pc, #516]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	4a80      	ldr	r2, [pc, #512]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cbe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cbe4:	6013      	str	r3, [r2, #0]
 801cbe6:	4b7e      	ldr	r3, [pc, #504]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	4a7d      	ldr	r2, [pc, #500]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cbec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cbf0:	6013      	str	r3, [r2, #0]
 801cbf2:	e01d      	b.n	801cc30 <HAL_RCC_OscConfig+0xd8>
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	685b      	ldr	r3, [r3, #4]
 801cbf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cbfc:	d10c      	bne.n	801cc18 <HAL_RCC_OscConfig+0xc0>
 801cbfe:	4b78      	ldr	r3, [pc, #480]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	4a77      	ldr	r2, [pc, #476]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cc08:	6013      	str	r3, [r2, #0]
 801cc0a:	4b75      	ldr	r3, [pc, #468]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	4a74      	ldr	r2, [pc, #464]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cc14:	6013      	str	r3, [r2, #0]
 801cc16:	e00b      	b.n	801cc30 <HAL_RCC_OscConfig+0xd8>
 801cc18:	4b71      	ldr	r3, [pc, #452]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	4a70      	ldr	r2, [pc, #448]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cc22:	6013      	str	r3, [r2, #0]
 801cc24:	4b6e      	ldr	r3, [pc, #440]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	4a6d      	ldr	r2, [pc, #436]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cc2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	685b      	ldr	r3, [r3, #4]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d013      	beq.n	801cc60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc38:	f7fe fab0 	bl	801b19c <HAL_GetTick>
 801cc3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cc3e:	e008      	b.n	801cc52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc40:	f7fe faac 	bl	801b19c <HAL_GetTick>
 801cc44:	4602      	mov	r2, r0
 801cc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc48:	1ad3      	subs	r3, r2, r3
 801cc4a:	2b64      	cmp	r3, #100	@ 0x64
 801cc4c:	d901      	bls.n	801cc52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801cc4e:	2303      	movs	r3, #3
 801cc50:	e3d4      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cc52:	4b63      	ldr	r3, [pc, #396]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d0f0      	beq.n	801cc40 <HAL_RCC_OscConfig+0xe8>
 801cc5e:	e014      	b.n	801cc8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc60:	f7fe fa9c 	bl	801b19c <HAL_GetTick>
 801cc64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801cc66:	e008      	b.n	801cc7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc68:	f7fe fa98 	bl	801b19c <HAL_GetTick>
 801cc6c:	4602      	mov	r2, r0
 801cc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc70:	1ad3      	subs	r3, r2, r3
 801cc72:	2b64      	cmp	r3, #100	@ 0x64
 801cc74:	d901      	bls.n	801cc7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801cc76:	2303      	movs	r3, #3
 801cc78:	e3c0      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801cc7a:	4b59      	ldr	r3, [pc, #356]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d1f0      	bne.n	801cc68 <HAL_RCC_OscConfig+0x110>
 801cc86:	e000      	b.n	801cc8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cc88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f003 0302 	and.w	r3, r3, #2
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	f000 80ca 	beq.w	801ce2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cc98:	4b51      	ldr	r3, [pc, #324]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cc9a:	691b      	ldr	r3, [r3, #16]
 801cc9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cca0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801cca2:	4b4f      	ldr	r3, [pc, #316]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cca6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801cca8:	6a3b      	ldr	r3, [r7, #32]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d007      	beq.n	801ccbe <HAL_RCC_OscConfig+0x166>
 801ccae:	6a3b      	ldr	r3, [r7, #32]
 801ccb0:	2b18      	cmp	r3, #24
 801ccb2:	d156      	bne.n	801cd62 <HAL_RCC_OscConfig+0x20a>
 801ccb4:	69fb      	ldr	r3, [r7, #28]
 801ccb6:	f003 0303 	and.w	r3, r3, #3
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d151      	bne.n	801cd62 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ccbe:	4b48      	ldr	r3, [pc, #288]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	f003 0304 	and.w	r3, r3, #4
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d005      	beq.n	801ccd6 <HAL_RCC_OscConfig+0x17e>
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	68db      	ldr	r3, [r3, #12]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d101      	bne.n	801ccd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801ccd2:	2301      	movs	r3, #1
 801ccd4:	e392      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ccd6:	4b42      	ldr	r3, [pc, #264]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	f023 0219 	bic.w	r2, r3, #25
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	68db      	ldr	r3, [r3, #12]
 801cce2:	493f      	ldr	r1, [pc, #252]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cce4:	4313      	orrs	r3, r2
 801cce6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cce8:	f7fe fa58 	bl	801b19c <HAL_GetTick>
 801ccec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ccee:	e008      	b.n	801cd02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ccf0:	f7fe fa54 	bl	801b19c <HAL_GetTick>
 801ccf4:	4602      	mov	r2, r0
 801ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccf8:	1ad3      	subs	r3, r2, r3
 801ccfa:	2b02      	cmp	r3, #2
 801ccfc:	d901      	bls.n	801cd02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801ccfe:	2303      	movs	r3, #3
 801cd00:	e37c      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cd02:	4b37      	ldr	r3, [pc, #220]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	f003 0304 	and.w	r3, r3, #4
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d0f0      	beq.n	801ccf0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd0e:	f7fe fa51 	bl	801b1b4 <HAL_GetREVID>
 801cd12:	4603      	mov	r3, r0
 801cd14:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cd18:	4293      	cmp	r3, r2
 801cd1a:	d817      	bhi.n	801cd4c <HAL_RCC_OscConfig+0x1f4>
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	691b      	ldr	r3, [r3, #16]
 801cd20:	2b40      	cmp	r3, #64	@ 0x40
 801cd22:	d108      	bne.n	801cd36 <HAL_RCC_OscConfig+0x1de>
 801cd24:	4b2e      	ldr	r3, [pc, #184]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd26:	685b      	ldr	r3, [r3, #4]
 801cd28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801cd2c:	4a2c      	ldr	r2, [pc, #176]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cd32:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cd34:	e07a      	b.n	801ce2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd36:	4b2a      	ldr	r3, [pc, #168]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd38:	685b      	ldr	r3, [r3, #4]
 801cd3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	691b      	ldr	r3, [r3, #16]
 801cd42:	031b      	lsls	r3, r3, #12
 801cd44:	4926      	ldr	r1, [pc, #152]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd46:	4313      	orrs	r3, r2
 801cd48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cd4a:	e06f      	b.n	801ce2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd4c:	4b24      	ldr	r3, [pc, #144]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd4e:	685b      	ldr	r3, [r3, #4]
 801cd50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	691b      	ldr	r3, [r3, #16]
 801cd58:	061b      	lsls	r3, r3, #24
 801cd5a:	4921      	ldr	r1, [pc, #132]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd5c:	4313      	orrs	r3, r2
 801cd5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cd60:	e064      	b.n	801ce2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	68db      	ldr	r3, [r3, #12]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d047      	beq.n	801cdfa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801cd6a:	4b1d      	ldr	r3, [pc, #116]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	f023 0219 	bic.w	r2, r3, #25
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	68db      	ldr	r3, [r3, #12]
 801cd76:	491a      	ldr	r1, [pc, #104]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd78:	4313      	orrs	r3, r2
 801cd7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd7c:	f7fe fa0e 	bl	801b19c <HAL_GetTick>
 801cd80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cd82:	e008      	b.n	801cd96 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd84:	f7fe fa0a 	bl	801b19c <HAL_GetTick>
 801cd88:	4602      	mov	r2, r0
 801cd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd8c:	1ad3      	subs	r3, r2, r3
 801cd8e:	2b02      	cmp	r3, #2
 801cd90:	d901      	bls.n	801cd96 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801cd92:	2303      	movs	r3, #3
 801cd94:	e332      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cd96:	4b12      	ldr	r3, [pc, #72]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	f003 0304 	and.w	r3, r3, #4
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d0f0      	beq.n	801cd84 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cda2:	f7fe fa07 	bl	801b1b4 <HAL_GetREVID>
 801cda6:	4603      	mov	r3, r0
 801cda8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cdac:	4293      	cmp	r3, r2
 801cdae:	d819      	bhi.n	801cde4 <HAL_RCC_OscConfig+0x28c>
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	691b      	ldr	r3, [r3, #16]
 801cdb4:	2b40      	cmp	r3, #64	@ 0x40
 801cdb6:	d108      	bne.n	801cdca <HAL_RCC_OscConfig+0x272>
 801cdb8:	4b09      	ldr	r3, [pc, #36]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cdba:	685b      	ldr	r3, [r3, #4]
 801cdbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801cdc0:	4a07      	ldr	r2, [pc, #28]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cdc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cdc6:	6053      	str	r3, [r2, #4]
 801cdc8:	e030      	b.n	801ce2c <HAL_RCC_OscConfig+0x2d4>
 801cdca:	4b05      	ldr	r3, [pc, #20]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cdcc:	685b      	ldr	r3, [r3, #4]
 801cdce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	691b      	ldr	r3, [r3, #16]
 801cdd6:	031b      	lsls	r3, r3, #12
 801cdd8:	4901      	ldr	r1, [pc, #4]	@ (801cde0 <HAL_RCC_OscConfig+0x288>)
 801cdda:	4313      	orrs	r3, r2
 801cddc:	604b      	str	r3, [r1, #4]
 801cdde:	e025      	b.n	801ce2c <HAL_RCC_OscConfig+0x2d4>
 801cde0:	58024400 	.word	0x58024400
 801cde4:	4b9a      	ldr	r3, [pc, #616]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cde6:	685b      	ldr	r3, [r3, #4]
 801cde8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	691b      	ldr	r3, [r3, #16]
 801cdf0:	061b      	lsls	r3, r3, #24
 801cdf2:	4997      	ldr	r1, [pc, #604]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cdf4:	4313      	orrs	r3, r2
 801cdf6:	604b      	str	r3, [r1, #4]
 801cdf8:	e018      	b.n	801ce2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801cdfa:	4b95      	ldr	r3, [pc, #596]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	4a94      	ldr	r2, [pc, #592]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce00:	f023 0301 	bic.w	r3, r3, #1
 801ce04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ce06:	f7fe f9c9 	bl	801b19c <HAL_GetTick>
 801ce0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ce0c:	e008      	b.n	801ce20 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ce0e:	f7fe f9c5 	bl	801b19c <HAL_GetTick>
 801ce12:	4602      	mov	r2, r0
 801ce14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce16:	1ad3      	subs	r3, r2, r3
 801ce18:	2b02      	cmp	r3, #2
 801ce1a:	d901      	bls.n	801ce20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801ce1c:	2303      	movs	r3, #3
 801ce1e:	e2ed      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ce20:	4b8b      	ldr	r3, [pc, #556]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	f003 0304 	and.w	r3, r3, #4
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d1f0      	bne.n	801ce0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	f003 0310 	and.w	r3, r3, #16
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	f000 80a9 	beq.w	801cf8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ce3a:	4b85      	ldr	r3, [pc, #532]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce3c:	691b      	ldr	r3, [r3, #16]
 801ce3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ce42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ce44:	4b82      	ldr	r3, [pc, #520]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce48:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801ce4a:	69bb      	ldr	r3, [r7, #24]
 801ce4c:	2b08      	cmp	r3, #8
 801ce4e:	d007      	beq.n	801ce60 <HAL_RCC_OscConfig+0x308>
 801ce50:	69bb      	ldr	r3, [r7, #24]
 801ce52:	2b18      	cmp	r3, #24
 801ce54:	d13a      	bne.n	801cecc <HAL_RCC_OscConfig+0x374>
 801ce56:	697b      	ldr	r3, [r7, #20]
 801ce58:	f003 0303 	and.w	r3, r3, #3
 801ce5c:	2b01      	cmp	r3, #1
 801ce5e:	d135      	bne.n	801cecc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ce60:	4b7b      	ldr	r3, [pc, #492]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d005      	beq.n	801ce78 <HAL_RCC_OscConfig+0x320>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	69db      	ldr	r3, [r3, #28]
 801ce70:	2b80      	cmp	r3, #128	@ 0x80
 801ce72:	d001      	beq.n	801ce78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801ce74:	2301      	movs	r3, #1
 801ce76:	e2c1      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ce78:	f7fe f99c 	bl	801b1b4 <HAL_GetREVID>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ce82:	4293      	cmp	r3, r2
 801ce84:	d817      	bhi.n	801ceb6 <HAL_RCC_OscConfig+0x35e>
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	6a1b      	ldr	r3, [r3, #32]
 801ce8a:	2b20      	cmp	r3, #32
 801ce8c:	d108      	bne.n	801cea0 <HAL_RCC_OscConfig+0x348>
 801ce8e:	4b70      	ldr	r3, [pc, #448]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce90:	685b      	ldr	r3, [r3, #4]
 801ce92:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ce96:	4a6e      	ldr	r2, [pc, #440]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ce98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ce9c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ce9e:	e075      	b.n	801cf8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801cea0:	4b6b      	ldr	r3, [pc, #428]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cea2:	685b      	ldr	r3, [r3, #4]
 801cea4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	6a1b      	ldr	r3, [r3, #32]
 801ceac:	069b      	lsls	r3, r3, #26
 801ceae:	4968      	ldr	r1, [pc, #416]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ceb0:	4313      	orrs	r3, r2
 801ceb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ceb4:	e06a      	b.n	801cf8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ceb6:	4b66      	ldr	r3, [pc, #408]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ceb8:	68db      	ldr	r3, [r3, #12]
 801ceba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	6a1b      	ldr	r3, [r3, #32]
 801cec2:	061b      	lsls	r3, r3, #24
 801cec4:	4962      	ldr	r1, [pc, #392]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cec6:	4313      	orrs	r3, r2
 801cec8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ceca:	e05f      	b.n	801cf8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	69db      	ldr	r3, [r3, #28]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d042      	beq.n	801cf5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ced4:	4b5e      	ldr	r3, [pc, #376]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	4a5d      	ldr	r2, [pc, #372]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801ceda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cee0:	f7fe f95c 	bl	801b19c <HAL_GetTick>
 801cee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cee6:	e008      	b.n	801cefa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801cee8:	f7fe f958 	bl	801b19c <HAL_GetTick>
 801ceec:	4602      	mov	r2, r0
 801ceee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cef0:	1ad3      	subs	r3, r2, r3
 801cef2:	2b02      	cmp	r3, #2
 801cef4:	d901      	bls.n	801cefa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801cef6:	2303      	movs	r3, #3
 801cef8:	e280      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cefa:	4b55      	ldr	r3, [pc, #340]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d0f0      	beq.n	801cee8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801cf06:	f7fe f955 	bl	801b1b4 <HAL_GetREVID>
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cf10:	4293      	cmp	r3, r2
 801cf12:	d817      	bhi.n	801cf44 <HAL_RCC_OscConfig+0x3ec>
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	6a1b      	ldr	r3, [r3, #32]
 801cf18:	2b20      	cmp	r3, #32
 801cf1a:	d108      	bne.n	801cf2e <HAL_RCC_OscConfig+0x3d6>
 801cf1c:	4b4c      	ldr	r3, [pc, #304]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf1e:	685b      	ldr	r3, [r3, #4]
 801cf20:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801cf24:	4a4a      	ldr	r2, [pc, #296]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cf2a:	6053      	str	r3, [r2, #4]
 801cf2c:	e02e      	b.n	801cf8c <HAL_RCC_OscConfig+0x434>
 801cf2e:	4b48      	ldr	r3, [pc, #288]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf30:	685b      	ldr	r3, [r3, #4]
 801cf32:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	6a1b      	ldr	r3, [r3, #32]
 801cf3a:	069b      	lsls	r3, r3, #26
 801cf3c:	4944      	ldr	r1, [pc, #272]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf3e:	4313      	orrs	r3, r2
 801cf40:	604b      	str	r3, [r1, #4]
 801cf42:	e023      	b.n	801cf8c <HAL_RCC_OscConfig+0x434>
 801cf44:	4b42      	ldr	r3, [pc, #264]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf46:	68db      	ldr	r3, [r3, #12]
 801cf48:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	6a1b      	ldr	r3, [r3, #32]
 801cf50:	061b      	lsls	r3, r3, #24
 801cf52:	493f      	ldr	r1, [pc, #252]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf54:	4313      	orrs	r3, r2
 801cf56:	60cb      	str	r3, [r1, #12]
 801cf58:	e018      	b.n	801cf8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801cf5a:	4b3d      	ldr	r3, [pc, #244]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	4a3c      	ldr	r2, [pc, #240]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801cf64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cf66:	f7fe f919 	bl	801b19c <HAL_GetTick>
 801cf6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801cf6c:	e008      	b.n	801cf80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801cf6e:	f7fe f915 	bl	801b19c <HAL_GetTick>
 801cf72:	4602      	mov	r2, r0
 801cf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf76:	1ad3      	subs	r3, r2, r3
 801cf78:	2b02      	cmp	r3, #2
 801cf7a:	d901      	bls.n	801cf80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801cf7c:	2303      	movs	r3, #3
 801cf7e:	e23d      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801cf80:	4b33      	ldr	r3, [pc, #204]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d1f0      	bne.n	801cf6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	f003 0308 	and.w	r3, r3, #8
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d036      	beq.n	801d006 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	695b      	ldr	r3, [r3, #20]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d019      	beq.n	801cfd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801cfa0:	4b2b      	ldr	r3, [pc, #172]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cfa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cfa4:	4a2a      	ldr	r2, [pc, #168]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cfa6:	f043 0301 	orr.w	r3, r3, #1
 801cfaa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cfac:	f7fe f8f6 	bl	801b19c <HAL_GetTick>
 801cfb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801cfb2:	e008      	b.n	801cfc6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cfb4:	f7fe f8f2 	bl	801b19c <HAL_GetTick>
 801cfb8:	4602      	mov	r2, r0
 801cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfbc:	1ad3      	subs	r3, r2, r3
 801cfbe:	2b02      	cmp	r3, #2
 801cfc0:	d901      	bls.n	801cfc6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801cfc2:	2303      	movs	r3, #3
 801cfc4:	e21a      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801cfc6:	4b22      	ldr	r3, [pc, #136]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cfc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cfca:	f003 0302 	and.w	r3, r3, #2
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d0f0      	beq.n	801cfb4 <HAL_RCC_OscConfig+0x45c>
 801cfd2:	e018      	b.n	801d006 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801cfd4:	4b1e      	ldr	r3, [pc, #120]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cfd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cfd8:	4a1d      	ldr	r2, [pc, #116]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cfda:	f023 0301 	bic.w	r3, r3, #1
 801cfde:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cfe0:	f7fe f8dc 	bl	801b19c <HAL_GetTick>
 801cfe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801cfe6:	e008      	b.n	801cffa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cfe8:	f7fe f8d8 	bl	801b19c <HAL_GetTick>
 801cfec:	4602      	mov	r2, r0
 801cfee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cff0:	1ad3      	subs	r3, r2, r3
 801cff2:	2b02      	cmp	r3, #2
 801cff4:	d901      	bls.n	801cffa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801cff6:	2303      	movs	r3, #3
 801cff8:	e200      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801cffa:	4b15      	ldr	r3, [pc, #84]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801cffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cffe:	f003 0302 	and.w	r3, r3, #2
 801d002:	2b00      	cmp	r3, #0
 801d004:	d1f0      	bne.n	801cfe8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	f003 0320 	and.w	r3, r3, #32
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d039      	beq.n	801d086 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	699b      	ldr	r3, [r3, #24]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d01c      	beq.n	801d054 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d01a:	4b0d      	ldr	r3, [pc, #52]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	4a0c      	ldr	r2, [pc, #48]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801d020:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d024:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d026:	f7fe f8b9 	bl	801b19c <HAL_GetTick>
 801d02a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d02c:	e008      	b.n	801d040 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d02e:	f7fe f8b5 	bl	801b19c <HAL_GetTick>
 801d032:	4602      	mov	r2, r0
 801d034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d036:	1ad3      	subs	r3, r2, r3
 801d038:	2b02      	cmp	r3, #2
 801d03a:	d901      	bls.n	801d040 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801d03c:	2303      	movs	r3, #3
 801d03e:	e1dd      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d040:	4b03      	ldr	r3, [pc, #12]	@ (801d050 <HAL_RCC_OscConfig+0x4f8>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d0f0      	beq.n	801d02e <HAL_RCC_OscConfig+0x4d6>
 801d04c:	e01b      	b.n	801d086 <HAL_RCC_OscConfig+0x52e>
 801d04e:	bf00      	nop
 801d050:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d054:	4b9b      	ldr	r3, [pc, #620]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	4a9a      	ldr	r2, [pc, #616]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d05a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d05e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d060:	f7fe f89c 	bl	801b19c <HAL_GetTick>
 801d064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d066:	e008      	b.n	801d07a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d068:	f7fe f898 	bl	801b19c <HAL_GetTick>
 801d06c:	4602      	mov	r2, r0
 801d06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d070:	1ad3      	subs	r3, r2, r3
 801d072:	2b02      	cmp	r3, #2
 801d074:	d901      	bls.n	801d07a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801d076:	2303      	movs	r3, #3
 801d078:	e1c0      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d07a:	4b92      	ldr	r3, [pc, #584]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d082:	2b00      	cmp	r3, #0
 801d084:	d1f0      	bne.n	801d068 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	f003 0304 	and.w	r3, r3, #4
 801d08e:	2b00      	cmp	r3, #0
 801d090:	f000 8081 	beq.w	801d196 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d094:	4b8c      	ldr	r3, [pc, #560]	@ (801d2c8 <HAL_RCC_OscConfig+0x770>)
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	4a8b      	ldr	r2, [pc, #556]	@ (801d2c8 <HAL_RCC_OscConfig+0x770>)
 801d09a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d09e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d0a0:	f7fe f87c 	bl	801b19c <HAL_GetTick>
 801d0a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d0a6:	e008      	b.n	801d0ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d0a8:	f7fe f878 	bl	801b19c <HAL_GetTick>
 801d0ac:	4602      	mov	r2, r0
 801d0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0b0:	1ad3      	subs	r3, r2, r3
 801d0b2:	2b64      	cmp	r3, #100	@ 0x64
 801d0b4:	d901      	bls.n	801d0ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801d0b6:	2303      	movs	r3, #3
 801d0b8:	e1a0      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d0ba:	4b83      	ldr	r3, [pc, #524]	@ (801d2c8 <HAL_RCC_OscConfig+0x770>)
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d0f0      	beq.n	801d0a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	689b      	ldr	r3, [r3, #8]
 801d0ca:	2b01      	cmp	r3, #1
 801d0cc:	d106      	bne.n	801d0dc <HAL_RCC_OscConfig+0x584>
 801d0ce:	4b7d      	ldr	r3, [pc, #500]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d0d2:	4a7c      	ldr	r2, [pc, #496]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d0d4:	f043 0301 	orr.w	r3, r3, #1
 801d0d8:	6713      	str	r3, [r2, #112]	@ 0x70
 801d0da:	e02d      	b.n	801d138 <HAL_RCC_OscConfig+0x5e0>
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	689b      	ldr	r3, [r3, #8]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d10c      	bne.n	801d0fe <HAL_RCC_OscConfig+0x5a6>
 801d0e4:	4b77      	ldr	r3, [pc, #476]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d0e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d0e8:	4a76      	ldr	r2, [pc, #472]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d0ea:	f023 0301 	bic.w	r3, r3, #1
 801d0ee:	6713      	str	r3, [r2, #112]	@ 0x70
 801d0f0:	4b74      	ldr	r3, [pc, #464]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d0f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d0f4:	4a73      	ldr	r2, [pc, #460]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d0f6:	f023 0304 	bic.w	r3, r3, #4
 801d0fa:	6713      	str	r3, [r2, #112]	@ 0x70
 801d0fc:	e01c      	b.n	801d138 <HAL_RCC_OscConfig+0x5e0>
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	689b      	ldr	r3, [r3, #8]
 801d102:	2b05      	cmp	r3, #5
 801d104:	d10c      	bne.n	801d120 <HAL_RCC_OscConfig+0x5c8>
 801d106:	4b6f      	ldr	r3, [pc, #444]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d10a:	4a6e      	ldr	r2, [pc, #440]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d10c:	f043 0304 	orr.w	r3, r3, #4
 801d110:	6713      	str	r3, [r2, #112]	@ 0x70
 801d112:	4b6c      	ldr	r3, [pc, #432]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d116:	4a6b      	ldr	r2, [pc, #428]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d118:	f043 0301 	orr.w	r3, r3, #1
 801d11c:	6713      	str	r3, [r2, #112]	@ 0x70
 801d11e:	e00b      	b.n	801d138 <HAL_RCC_OscConfig+0x5e0>
 801d120:	4b68      	ldr	r3, [pc, #416]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d124:	4a67      	ldr	r2, [pc, #412]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d126:	f023 0301 	bic.w	r3, r3, #1
 801d12a:	6713      	str	r3, [r2, #112]	@ 0x70
 801d12c:	4b65      	ldr	r3, [pc, #404]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d12e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d130:	4a64      	ldr	r2, [pc, #400]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d132:	f023 0304 	bic.w	r3, r3, #4
 801d136:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	689b      	ldr	r3, [r3, #8]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d015      	beq.n	801d16c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d140:	f7fe f82c 	bl	801b19c <HAL_GetTick>
 801d144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d146:	e00a      	b.n	801d15e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d148:	f7fe f828 	bl	801b19c <HAL_GetTick>
 801d14c:	4602      	mov	r2, r0
 801d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d150:	1ad3      	subs	r3, r2, r3
 801d152:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d156:	4293      	cmp	r3, r2
 801d158:	d901      	bls.n	801d15e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801d15a:	2303      	movs	r3, #3
 801d15c:	e14e      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d15e:	4b59      	ldr	r3, [pc, #356]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d162:	f003 0302 	and.w	r3, r3, #2
 801d166:	2b00      	cmp	r3, #0
 801d168:	d0ee      	beq.n	801d148 <HAL_RCC_OscConfig+0x5f0>
 801d16a:	e014      	b.n	801d196 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d16c:	f7fe f816 	bl	801b19c <HAL_GetTick>
 801d170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d172:	e00a      	b.n	801d18a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d174:	f7fe f812 	bl	801b19c <HAL_GetTick>
 801d178:	4602      	mov	r2, r0
 801d17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d17c:	1ad3      	subs	r3, r2, r3
 801d17e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d182:	4293      	cmp	r3, r2
 801d184:	d901      	bls.n	801d18a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801d186:	2303      	movs	r3, #3
 801d188:	e138      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d18a:	4b4e      	ldr	r3, [pc, #312]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d18c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d18e:	f003 0302 	and.w	r3, r3, #2
 801d192:	2b00      	cmp	r3, #0
 801d194:	d1ee      	bne.n	801d174 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	f000 812d 	beq.w	801d3fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801d1a0:	4b48      	ldr	r3, [pc, #288]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d1a2:	691b      	ldr	r3, [r3, #16]
 801d1a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d1a8:	2b18      	cmp	r3, #24
 801d1aa:	f000 80bd 	beq.w	801d328 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1b2:	2b02      	cmp	r3, #2
 801d1b4:	f040 809e 	bne.w	801d2f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d1b8:	4b42      	ldr	r3, [pc, #264]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	4a41      	ldr	r2, [pc, #260]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d1be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d1c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d1c4:	f7fd ffea 	bl	801b19c <HAL_GetTick>
 801d1c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d1ca:	e008      	b.n	801d1de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d1cc:	f7fd ffe6 	bl	801b19c <HAL_GetTick>
 801d1d0:	4602      	mov	r2, r0
 801d1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1d4:	1ad3      	subs	r3, r2, r3
 801d1d6:	2b02      	cmp	r3, #2
 801d1d8:	d901      	bls.n	801d1de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801d1da:	2303      	movs	r3, #3
 801d1dc:	e10e      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d1de:	4b39      	ldr	r3, [pc, #228]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d1f0      	bne.n	801d1cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d1ea:	4b36      	ldr	r3, [pc, #216]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d1ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d1ee:	4b37      	ldr	r3, [pc, #220]	@ (801d2cc <HAL_RCC_OscConfig+0x774>)
 801d1f0:	4013      	ands	r3, r2
 801d1f2:	687a      	ldr	r2, [r7, #4]
 801d1f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d1f6:	687a      	ldr	r2, [r7, #4]
 801d1f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d1fa:	0112      	lsls	r2, r2, #4
 801d1fc:	430a      	orrs	r2, r1
 801d1fe:	4931      	ldr	r1, [pc, #196]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d200:	4313      	orrs	r3, r2
 801d202:	628b      	str	r3, [r1, #40]	@ 0x28
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d208:	3b01      	subs	r3, #1
 801d20a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d212:	3b01      	subs	r3, #1
 801d214:	025b      	lsls	r3, r3, #9
 801d216:	b29b      	uxth	r3, r3
 801d218:	431a      	orrs	r2, r3
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d21e:	3b01      	subs	r3, #1
 801d220:	041b      	lsls	r3, r3, #16
 801d222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d226:	431a      	orrs	r2, r3
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d22c:	3b01      	subs	r3, #1
 801d22e:	061b      	lsls	r3, r3, #24
 801d230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d234:	4923      	ldr	r1, [pc, #140]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d236:	4313      	orrs	r3, r2
 801d238:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d23a:	4b22      	ldr	r3, [pc, #136]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d23e:	4a21      	ldr	r2, [pc, #132]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d240:	f023 0301 	bic.w	r3, r3, #1
 801d244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d246:	4b1f      	ldr	r3, [pc, #124]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d24a:	4b21      	ldr	r3, [pc, #132]	@ (801d2d0 <HAL_RCC_OscConfig+0x778>)
 801d24c:	4013      	ands	r3, r2
 801d24e:	687a      	ldr	r2, [r7, #4]
 801d250:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d252:	00d2      	lsls	r2, r2, #3
 801d254:	491b      	ldr	r1, [pc, #108]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d256:	4313      	orrs	r3, r2
 801d258:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d25a:	4b1a      	ldr	r3, [pc, #104]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d25e:	f023 020c 	bic.w	r2, r3, #12
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d266:	4917      	ldr	r1, [pc, #92]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d268:	4313      	orrs	r3, r2
 801d26a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d26c:	4b15      	ldr	r3, [pc, #84]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d270:	f023 0202 	bic.w	r2, r3, #2
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d278:	4912      	ldr	r1, [pc, #72]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d27a:	4313      	orrs	r3, r2
 801d27c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d27e:	4b11      	ldr	r3, [pc, #68]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d282:	4a10      	ldr	r2, [pc, #64]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d28a:	4b0e      	ldr	r3, [pc, #56]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d28e:	4a0d      	ldr	r2, [pc, #52]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d296:	4b0b      	ldr	r3, [pc, #44]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d29a:	4a0a      	ldr	r2, [pc, #40]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d29c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d2a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d2a2:	4b08      	ldr	r3, [pc, #32]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d2a6:	4a07      	ldr	r2, [pc, #28]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d2a8:	f043 0301 	orr.w	r3, r3, #1
 801d2ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d2ae:	4b05      	ldr	r3, [pc, #20]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	4a04      	ldr	r2, [pc, #16]	@ (801d2c4 <HAL_RCC_OscConfig+0x76c>)
 801d2b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d2b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d2ba:	f7fd ff6f 	bl	801b19c <HAL_GetTick>
 801d2be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d2c0:	e011      	b.n	801d2e6 <HAL_RCC_OscConfig+0x78e>
 801d2c2:	bf00      	nop
 801d2c4:	58024400 	.word	0x58024400
 801d2c8:	58024800 	.word	0x58024800
 801d2cc:	fffffc0c 	.word	0xfffffc0c
 801d2d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d2d4:	f7fd ff62 	bl	801b19c <HAL_GetTick>
 801d2d8:	4602      	mov	r2, r0
 801d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2dc:	1ad3      	subs	r3, r2, r3
 801d2de:	2b02      	cmp	r3, #2
 801d2e0:	d901      	bls.n	801d2e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d2e2:	2303      	movs	r3, #3
 801d2e4:	e08a      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d2e6:	4b47      	ldr	r3, [pc, #284]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d0f0      	beq.n	801d2d4 <HAL_RCC_OscConfig+0x77c>
 801d2f2:	e082      	b.n	801d3fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d2f4:	4b43      	ldr	r3, [pc, #268]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	4a42      	ldr	r2, [pc, #264]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d2fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d2fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d300:	f7fd ff4c 	bl	801b19c <HAL_GetTick>
 801d304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d306:	e008      	b.n	801d31a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d308:	f7fd ff48 	bl	801b19c <HAL_GetTick>
 801d30c:	4602      	mov	r2, r0
 801d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d310:	1ad3      	subs	r3, r2, r3
 801d312:	2b02      	cmp	r3, #2
 801d314:	d901      	bls.n	801d31a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d316:	2303      	movs	r3, #3
 801d318:	e070      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d31a:	4b3a      	ldr	r3, [pc, #232]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d322:	2b00      	cmp	r3, #0
 801d324:	d1f0      	bne.n	801d308 <HAL_RCC_OscConfig+0x7b0>
 801d326:	e068      	b.n	801d3fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d328:	4b36      	ldr	r3, [pc, #216]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d32c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d32e:	4b35      	ldr	r3, [pc, #212]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d332:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d338:	2b01      	cmp	r3, #1
 801d33a:	d031      	beq.n	801d3a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d33c:	693b      	ldr	r3, [r7, #16]
 801d33e:	f003 0203 	and.w	r2, r3, #3
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d346:	429a      	cmp	r2, r3
 801d348:	d12a      	bne.n	801d3a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d34a:	693b      	ldr	r3, [r7, #16]
 801d34c:	091b      	lsrs	r3, r3, #4
 801d34e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d356:	429a      	cmp	r2, r3
 801d358:	d122      	bne.n	801d3a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d364:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d366:	429a      	cmp	r2, r3
 801d368:	d11a      	bne.n	801d3a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	0a5b      	lsrs	r3, r3, #9
 801d36e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d376:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d378:	429a      	cmp	r2, r3
 801d37a:	d111      	bne.n	801d3a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d37c:	68fb      	ldr	r3, [r7, #12]
 801d37e:	0c1b      	lsrs	r3, r3, #16
 801d380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d388:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d38a:	429a      	cmp	r2, r3
 801d38c:	d108      	bne.n	801d3a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	0e1b      	lsrs	r3, r3, #24
 801d392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d39a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d39c:	429a      	cmp	r2, r3
 801d39e:	d001      	beq.n	801d3a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d3a0:	2301      	movs	r3, #1
 801d3a2:	e02b      	b.n	801d3fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d3a4:	4b17      	ldr	r3, [pc, #92]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d3a8:	08db      	lsrs	r3, r3, #3
 801d3aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d3ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d3b4:	693a      	ldr	r2, [r7, #16]
 801d3b6:	429a      	cmp	r2, r3
 801d3b8:	d01f      	beq.n	801d3fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d3ba:	4b12      	ldr	r3, [pc, #72]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3be:	4a11      	ldr	r2, [pc, #68]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3c0:	f023 0301 	bic.w	r3, r3, #1
 801d3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d3c6:	f7fd fee9 	bl	801b19c <HAL_GetTick>
 801d3ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d3cc:	bf00      	nop
 801d3ce:	f7fd fee5 	bl	801b19c <HAL_GetTick>
 801d3d2:	4602      	mov	r2, r0
 801d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3d6:	4293      	cmp	r3, r2
 801d3d8:	d0f9      	beq.n	801d3ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d3da:	4b0a      	ldr	r3, [pc, #40]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d3de:	4b0a      	ldr	r3, [pc, #40]	@ (801d408 <HAL_RCC_OscConfig+0x8b0>)
 801d3e0:	4013      	ands	r3, r2
 801d3e2:	687a      	ldr	r2, [r7, #4]
 801d3e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d3e6:	00d2      	lsls	r2, r2, #3
 801d3e8:	4906      	ldr	r1, [pc, #24]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3ea:	4313      	orrs	r3, r2
 801d3ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d3ee:	4b05      	ldr	r3, [pc, #20]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3f2:	4a04      	ldr	r2, [pc, #16]	@ (801d404 <HAL_RCC_OscConfig+0x8ac>)
 801d3f4:	f043 0301 	orr.w	r3, r3, #1
 801d3f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801d3fa:	2300      	movs	r3, #0
}
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	3730      	adds	r7, #48	@ 0x30
 801d400:	46bd      	mov	sp, r7
 801d402:	bd80      	pop	{r7, pc}
 801d404:	58024400 	.word	0x58024400
 801d408:	ffff0007 	.word	0xffff0007

0801d40c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b086      	sub	sp, #24
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
 801d414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d101      	bne.n	801d420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d41c:	2301      	movs	r3, #1
 801d41e:	e19c      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d420:	4b8a      	ldr	r3, [pc, #552]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	f003 030f 	and.w	r3, r3, #15
 801d428:	683a      	ldr	r2, [r7, #0]
 801d42a:	429a      	cmp	r2, r3
 801d42c:	d910      	bls.n	801d450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d42e:	4b87      	ldr	r3, [pc, #540]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	f023 020f 	bic.w	r2, r3, #15
 801d436:	4985      	ldr	r1, [pc, #532]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d438:	683b      	ldr	r3, [r7, #0]
 801d43a:	4313      	orrs	r3, r2
 801d43c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d43e:	4b83      	ldr	r3, [pc, #524]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	f003 030f 	and.w	r3, r3, #15
 801d446:	683a      	ldr	r2, [r7, #0]
 801d448:	429a      	cmp	r2, r3
 801d44a:	d001      	beq.n	801d450 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d44c:	2301      	movs	r3, #1
 801d44e:	e184      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	f003 0304 	and.w	r3, r3, #4
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d010      	beq.n	801d47e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	691a      	ldr	r2, [r3, #16]
 801d460:	4b7b      	ldr	r3, [pc, #492]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d462:	699b      	ldr	r3, [r3, #24]
 801d464:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d468:	429a      	cmp	r2, r3
 801d46a:	d908      	bls.n	801d47e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d46c:	4b78      	ldr	r3, [pc, #480]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d46e:	699b      	ldr	r3, [r3, #24]
 801d470:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	691b      	ldr	r3, [r3, #16]
 801d478:	4975      	ldr	r1, [pc, #468]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d47a:	4313      	orrs	r3, r2
 801d47c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	f003 0308 	and.w	r3, r3, #8
 801d486:	2b00      	cmp	r3, #0
 801d488:	d010      	beq.n	801d4ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	695a      	ldr	r2, [r3, #20]
 801d48e:	4b70      	ldr	r3, [pc, #448]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d490:	69db      	ldr	r3, [r3, #28]
 801d492:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d496:	429a      	cmp	r2, r3
 801d498:	d908      	bls.n	801d4ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d49a:	4b6d      	ldr	r3, [pc, #436]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d49c:	69db      	ldr	r3, [r3, #28]
 801d49e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	695b      	ldr	r3, [r3, #20]
 801d4a6:	496a      	ldr	r1, [pc, #424]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d4a8:	4313      	orrs	r3, r2
 801d4aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	f003 0310 	and.w	r3, r3, #16
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d010      	beq.n	801d4da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	699a      	ldr	r2, [r3, #24]
 801d4bc:	4b64      	ldr	r3, [pc, #400]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d4be:	69db      	ldr	r3, [r3, #28]
 801d4c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d908      	bls.n	801d4da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d4c8:	4b61      	ldr	r3, [pc, #388]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d4ca:	69db      	ldr	r3, [r3, #28]
 801d4cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	699b      	ldr	r3, [r3, #24]
 801d4d4:	495e      	ldr	r1, [pc, #376]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d4d6:	4313      	orrs	r3, r2
 801d4d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	f003 0320 	and.w	r3, r3, #32
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d010      	beq.n	801d508 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	69da      	ldr	r2, [r3, #28]
 801d4ea:	4b59      	ldr	r3, [pc, #356]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d4ec:	6a1b      	ldr	r3, [r3, #32]
 801d4ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d4f2:	429a      	cmp	r2, r3
 801d4f4:	d908      	bls.n	801d508 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d4f6:	4b56      	ldr	r3, [pc, #344]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d4f8:	6a1b      	ldr	r3, [r3, #32]
 801d4fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	69db      	ldr	r3, [r3, #28]
 801d502:	4953      	ldr	r1, [pc, #332]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d504:	4313      	orrs	r3, r2
 801d506:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	f003 0302 	and.w	r3, r3, #2
 801d510:	2b00      	cmp	r3, #0
 801d512:	d010      	beq.n	801d536 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	68da      	ldr	r2, [r3, #12]
 801d518:	4b4d      	ldr	r3, [pc, #308]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d51a:	699b      	ldr	r3, [r3, #24]
 801d51c:	f003 030f 	and.w	r3, r3, #15
 801d520:	429a      	cmp	r2, r3
 801d522:	d908      	bls.n	801d536 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d524:	4b4a      	ldr	r3, [pc, #296]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d526:	699b      	ldr	r3, [r3, #24]
 801d528:	f023 020f 	bic.w	r2, r3, #15
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	68db      	ldr	r3, [r3, #12]
 801d530:	4947      	ldr	r1, [pc, #284]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d532:	4313      	orrs	r3, r2
 801d534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	f003 0301 	and.w	r3, r3, #1
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d055      	beq.n	801d5ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d542:	4b43      	ldr	r3, [pc, #268]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d544:	699b      	ldr	r3, [r3, #24]
 801d546:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	689b      	ldr	r3, [r3, #8]
 801d54e:	4940      	ldr	r1, [pc, #256]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d550:	4313      	orrs	r3, r2
 801d552:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	685b      	ldr	r3, [r3, #4]
 801d558:	2b02      	cmp	r3, #2
 801d55a:	d107      	bne.n	801d56c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d55c:	4b3c      	ldr	r3, [pc, #240]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d564:	2b00      	cmp	r3, #0
 801d566:	d121      	bne.n	801d5ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d568:	2301      	movs	r3, #1
 801d56a:	e0f6      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	685b      	ldr	r3, [r3, #4]
 801d570:	2b03      	cmp	r3, #3
 801d572:	d107      	bne.n	801d584 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d574:	4b36      	ldr	r3, [pc, #216]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d115      	bne.n	801d5ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d580:	2301      	movs	r3, #1
 801d582:	e0ea      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	685b      	ldr	r3, [r3, #4]
 801d588:	2b01      	cmp	r3, #1
 801d58a:	d107      	bne.n	801d59c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d58c:	4b30      	ldr	r3, [pc, #192]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d594:	2b00      	cmp	r3, #0
 801d596:	d109      	bne.n	801d5ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d598:	2301      	movs	r3, #1
 801d59a:	e0de      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d59c:	4b2c      	ldr	r3, [pc, #176]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	f003 0304 	and.w	r3, r3, #4
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d101      	bne.n	801d5ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d5a8:	2301      	movs	r3, #1
 801d5aa:	e0d6      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d5ac:	4b28      	ldr	r3, [pc, #160]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d5ae:	691b      	ldr	r3, [r3, #16]
 801d5b0:	f023 0207 	bic.w	r2, r3, #7
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	685b      	ldr	r3, [r3, #4]
 801d5b8:	4925      	ldr	r1, [pc, #148]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d5ba:	4313      	orrs	r3, r2
 801d5bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d5be:	f7fd fded 	bl	801b19c <HAL_GetTick>
 801d5c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d5c4:	e00a      	b.n	801d5dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d5c6:	f7fd fde9 	bl	801b19c <HAL_GetTick>
 801d5ca:	4602      	mov	r2, r0
 801d5cc:	697b      	ldr	r3, [r7, #20]
 801d5ce:	1ad3      	subs	r3, r2, r3
 801d5d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d5d4:	4293      	cmp	r3, r2
 801d5d6:	d901      	bls.n	801d5dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801d5d8:	2303      	movs	r3, #3
 801d5da:	e0be      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d5dc:	4b1c      	ldr	r3, [pc, #112]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d5de:	691b      	ldr	r3, [r3, #16]
 801d5e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	685b      	ldr	r3, [r3, #4]
 801d5e8:	00db      	lsls	r3, r3, #3
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d1eb      	bne.n	801d5c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	f003 0302 	and.w	r3, r3, #2
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d010      	beq.n	801d61c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	68da      	ldr	r2, [r3, #12]
 801d5fe:	4b14      	ldr	r3, [pc, #80]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d600:	699b      	ldr	r3, [r3, #24]
 801d602:	f003 030f 	and.w	r3, r3, #15
 801d606:	429a      	cmp	r2, r3
 801d608:	d208      	bcs.n	801d61c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d60a:	4b11      	ldr	r3, [pc, #68]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d60c:	699b      	ldr	r3, [r3, #24]
 801d60e:	f023 020f 	bic.w	r2, r3, #15
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	68db      	ldr	r3, [r3, #12]
 801d616:	490e      	ldr	r1, [pc, #56]	@ (801d650 <HAL_RCC_ClockConfig+0x244>)
 801d618:	4313      	orrs	r3, r2
 801d61a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d61c:	4b0b      	ldr	r3, [pc, #44]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	f003 030f 	and.w	r3, r3, #15
 801d624:	683a      	ldr	r2, [r7, #0]
 801d626:	429a      	cmp	r2, r3
 801d628:	d214      	bcs.n	801d654 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d62a:	4b08      	ldr	r3, [pc, #32]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	f023 020f 	bic.w	r2, r3, #15
 801d632:	4906      	ldr	r1, [pc, #24]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d634:	683b      	ldr	r3, [r7, #0]
 801d636:	4313      	orrs	r3, r2
 801d638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d63a:	4b04      	ldr	r3, [pc, #16]	@ (801d64c <HAL_RCC_ClockConfig+0x240>)
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	f003 030f 	and.w	r3, r3, #15
 801d642:	683a      	ldr	r2, [r7, #0]
 801d644:	429a      	cmp	r2, r3
 801d646:	d005      	beq.n	801d654 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801d648:	2301      	movs	r3, #1
 801d64a:	e086      	b.n	801d75a <HAL_RCC_ClockConfig+0x34e>
 801d64c:	52002000 	.word	0x52002000
 801d650:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	f003 0304 	and.w	r3, r3, #4
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d010      	beq.n	801d682 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	691a      	ldr	r2, [r3, #16]
 801d664:	4b3f      	ldr	r3, [pc, #252]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d666:	699b      	ldr	r3, [r3, #24]
 801d668:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d66c:	429a      	cmp	r2, r3
 801d66e:	d208      	bcs.n	801d682 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d670:	4b3c      	ldr	r3, [pc, #240]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d672:	699b      	ldr	r3, [r3, #24]
 801d674:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	691b      	ldr	r3, [r3, #16]
 801d67c:	4939      	ldr	r1, [pc, #228]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d67e:	4313      	orrs	r3, r2
 801d680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	f003 0308 	and.w	r3, r3, #8
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d010      	beq.n	801d6b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	695a      	ldr	r2, [r3, #20]
 801d692:	4b34      	ldr	r3, [pc, #208]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d694:	69db      	ldr	r3, [r3, #28]
 801d696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d69a:	429a      	cmp	r2, r3
 801d69c:	d208      	bcs.n	801d6b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d69e:	4b31      	ldr	r3, [pc, #196]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6a0:	69db      	ldr	r3, [r3, #28]
 801d6a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	695b      	ldr	r3, [r3, #20]
 801d6aa:	492e      	ldr	r1, [pc, #184]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6ac:	4313      	orrs	r3, r2
 801d6ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	f003 0310 	and.w	r3, r3, #16
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d010      	beq.n	801d6de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	699a      	ldr	r2, [r3, #24]
 801d6c0:	4b28      	ldr	r3, [pc, #160]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6c2:	69db      	ldr	r3, [r3, #28]
 801d6c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d6c8:	429a      	cmp	r2, r3
 801d6ca:	d208      	bcs.n	801d6de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d6cc:	4b25      	ldr	r3, [pc, #148]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6ce:	69db      	ldr	r3, [r3, #28]
 801d6d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	699b      	ldr	r3, [r3, #24]
 801d6d8:	4922      	ldr	r1, [pc, #136]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6da:	4313      	orrs	r3, r2
 801d6dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	f003 0320 	and.w	r3, r3, #32
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d010      	beq.n	801d70c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	69da      	ldr	r2, [r3, #28]
 801d6ee:	4b1d      	ldr	r3, [pc, #116]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6f0:	6a1b      	ldr	r3, [r3, #32]
 801d6f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d6f6:	429a      	cmp	r2, r3
 801d6f8:	d208      	bcs.n	801d70c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d6fa:	4b1a      	ldr	r3, [pc, #104]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d6fc:	6a1b      	ldr	r3, [r3, #32]
 801d6fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	69db      	ldr	r3, [r3, #28]
 801d706:	4917      	ldr	r1, [pc, #92]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d708:	4313      	orrs	r3, r2
 801d70a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801d70c:	f000 f834 	bl	801d778 <HAL_RCC_GetSysClockFreq>
 801d710:	4602      	mov	r2, r0
 801d712:	4b14      	ldr	r3, [pc, #80]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d714:	699b      	ldr	r3, [r3, #24]
 801d716:	0a1b      	lsrs	r3, r3, #8
 801d718:	f003 030f 	and.w	r3, r3, #15
 801d71c:	4912      	ldr	r1, [pc, #72]	@ (801d768 <HAL_RCC_ClockConfig+0x35c>)
 801d71e:	5ccb      	ldrb	r3, [r1, r3]
 801d720:	f003 031f 	and.w	r3, r3, #31
 801d724:	fa22 f303 	lsr.w	r3, r2, r3
 801d728:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d72a:	4b0e      	ldr	r3, [pc, #56]	@ (801d764 <HAL_RCC_ClockConfig+0x358>)
 801d72c:	699b      	ldr	r3, [r3, #24]
 801d72e:	f003 030f 	and.w	r3, r3, #15
 801d732:	4a0d      	ldr	r2, [pc, #52]	@ (801d768 <HAL_RCC_ClockConfig+0x35c>)
 801d734:	5cd3      	ldrb	r3, [r2, r3]
 801d736:	f003 031f 	and.w	r3, r3, #31
 801d73a:	693a      	ldr	r2, [r7, #16]
 801d73c:	fa22 f303 	lsr.w	r3, r2, r3
 801d740:	4a0a      	ldr	r2, [pc, #40]	@ (801d76c <HAL_RCC_ClockConfig+0x360>)
 801d742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d744:	4a0a      	ldr	r2, [pc, #40]	@ (801d770 <HAL_RCC_ClockConfig+0x364>)
 801d746:	693b      	ldr	r3, [r7, #16]
 801d748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801d74a:	4b0a      	ldr	r3, [pc, #40]	@ (801d774 <HAL_RCC_ClockConfig+0x368>)
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	4618      	mov	r0, r3
 801d750:	f7fd fcda 	bl	801b108 <HAL_InitTick>
 801d754:	4603      	mov	r3, r0
 801d756:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801d758:	7bfb      	ldrb	r3, [r7, #15]
}
 801d75a:	4618      	mov	r0, r3
 801d75c:	3718      	adds	r7, #24
 801d75e:	46bd      	mov	sp, r7
 801d760:	bd80      	pop	{r7, pc}
 801d762:	bf00      	nop
 801d764:	58024400 	.word	0x58024400
 801d768:	0802a434 	.word	0x0802a434
 801d76c:	24000004 	.word	0x24000004
 801d770:	24000000 	.word	0x24000000
 801d774:	24000798 	.word	0x24000798

0801d778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d778:	b480      	push	{r7}
 801d77a:	b089      	sub	sp, #36	@ 0x24
 801d77c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d77e:	4bb3      	ldr	r3, [pc, #716]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d780:	691b      	ldr	r3, [r3, #16]
 801d782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d786:	2b18      	cmp	r3, #24
 801d788:	f200 8155 	bhi.w	801da36 <HAL_RCC_GetSysClockFreq+0x2be>
 801d78c:	a201      	add	r2, pc, #4	@ (adr r2, 801d794 <HAL_RCC_GetSysClockFreq+0x1c>)
 801d78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d792:	bf00      	nop
 801d794:	0801d7f9 	.word	0x0801d7f9
 801d798:	0801da37 	.word	0x0801da37
 801d79c:	0801da37 	.word	0x0801da37
 801d7a0:	0801da37 	.word	0x0801da37
 801d7a4:	0801da37 	.word	0x0801da37
 801d7a8:	0801da37 	.word	0x0801da37
 801d7ac:	0801da37 	.word	0x0801da37
 801d7b0:	0801da37 	.word	0x0801da37
 801d7b4:	0801d81f 	.word	0x0801d81f
 801d7b8:	0801da37 	.word	0x0801da37
 801d7bc:	0801da37 	.word	0x0801da37
 801d7c0:	0801da37 	.word	0x0801da37
 801d7c4:	0801da37 	.word	0x0801da37
 801d7c8:	0801da37 	.word	0x0801da37
 801d7cc:	0801da37 	.word	0x0801da37
 801d7d0:	0801da37 	.word	0x0801da37
 801d7d4:	0801d825 	.word	0x0801d825
 801d7d8:	0801da37 	.word	0x0801da37
 801d7dc:	0801da37 	.word	0x0801da37
 801d7e0:	0801da37 	.word	0x0801da37
 801d7e4:	0801da37 	.word	0x0801da37
 801d7e8:	0801da37 	.word	0x0801da37
 801d7ec:	0801da37 	.word	0x0801da37
 801d7f0:	0801da37 	.word	0x0801da37
 801d7f4:	0801d82b 	.word	0x0801d82b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d7f8:	4b94      	ldr	r3, [pc, #592]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	f003 0320 	and.w	r3, r3, #32
 801d800:	2b00      	cmp	r3, #0
 801d802:	d009      	beq.n	801d818 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d804:	4b91      	ldr	r3, [pc, #580]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	08db      	lsrs	r3, r3, #3
 801d80a:	f003 0303 	and.w	r3, r3, #3
 801d80e:	4a90      	ldr	r2, [pc, #576]	@ (801da50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d810:	fa22 f303 	lsr.w	r3, r2, r3
 801d814:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801d816:	e111      	b.n	801da3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801d818:	4b8d      	ldr	r3, [pc, #564]	@ (801da50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d81a:	61bb      	str	r3, [r7, #24]
      break;
 801d81c:	e10e      	b.n	801da3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801d81e:	4b8d      	ldr	r3, [pc, #564]	@ (801da54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d820:	61bb      	str	r3, [r7, #24]
      break;
 801d822:	e10b      	b.n	801da3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801d824:	4b8c      	ldr	r3, [pc, #560]	@ (801da58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801d826:	61bb      	str	r3, [r7, #24]
      break;
 801d828:	e108      	b.n	801da3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d82a:	4b88      	ldr	r3, [pc, #544]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d82e:	f003 0303 	and.w	r3, r3, #3
 801d832:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801d834:	4b85      	ldr	r3, [pc, #532]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d838:	091b      	lsrs	r3, r3, #4
 801d83a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d83e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801d840:	4b82      	ldr	r3, [pc, #520]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d844:	f003 0301 	and.w	r3, r3, #1
 801d848:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d84a:	4b80      	ldr	r3, [pc, #512]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d84e:	08db      	lsrs	r3, r3, #3
 801d850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d854:	68fa      	ldr	r2, [r7, #12]
 801d856:	fb02 f303 	mul.w	r3, r2, r3
 801d85a:	ee07 3a90 	vmov	s15, r3
 801d85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d862:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d866:	693b      	ldr	r3, [r7, #16]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	f000 80e1 	beq.w	801da30 <HAL_RCC_GetSysClockFreq+0x2b8>
 801d86e:	697b      	ldr	r3, [r7, #20]
 801d870:	2b02      	cmp	r3, #2
 801d872:	f000 8083 	beq.w	801d97c <HAL_RCC_GetSysClockFreq+0x204>
 801d876:	697b      	ldr	r3, [r7, #20]
 801d878:	2b02      	cmp	r3, #2
 801d87a:	f200 80a1 	bhi.w	801d9c0 <HAL_RCC_GetSysClockFreq+0x248>
 801d87e:	697b      	ldr	r3, [r7, #20]
 801d880:	2b00      	cmp	r3, #0
 801d882:	d003      	beq.n	801d88c <HAL_RCC_GetSysClockFreq+0x114>
 801d884:	697b      	ldr	r3, [r7, #20]
 801d886:	2b01      	cmp	r3, #1
 801d888:	d056      	beq.n	801d938 <HAL_RCC_GetSysClockFreq+0x1c0>
 801d88a:	e099      	b.n	801d9c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d88c:	4b6f      	ldr	r3, [pc, #444]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	f003 0320 	and.w	r3, r3, #32
 801d894:	2b00      	cmp	r3, #0
 801d896:	d02d      	beq.n	801d8f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d898:	4b6c      	ldr	r3, [pc, #432]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	08db      	lsrs	r3, r3, #3
 801d89e:	f003 0303 	and.w	r3, r3, #3
 801d8a2:	4a6b      	ldr	r2, [pc, #428]	@ (801da50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d8a4:	fa22 f303 	lsr.w	r3, r2, r3
 801d8a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	ee07 3a90 	vmov	s15, r3
 801d8b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	ee07 3a90 	vmov	s15, r3
 801d8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d8c2:	4b62      	ldr	r3, [pc, #392]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d8ca:	ee07 3a90 	vmov	s15, r3
 801d8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 801d8d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801da5c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d8ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d8f2:	e087      	b.n	801da04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d8f4:	693b      	ldr	r3, [r7, #16]
 801d8f6:	ee07 3a90 	vmov	s15, r3
 801d8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801da60 <HAL_RCC_GetSysClockFreq+0x2e8>
 801d902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d906:	4b51      	ldr	r3, [pc, #324]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d90e:	ee07 3a90 	vmov	s15, r3
 801d912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d916:	ed97 6a02 	vldr	s12, [r7, #8]
 801d91a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801da5c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d936:	e065      	b.n	801da04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d938:	693b      	ldr	r3, [r7, #16]
 801d93a:	ee07 3a90 	vmov	s15, r3
 801d93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d942:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801da64 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d94a:	4b40      	ldr	r3, [pc, #256]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d952:	ee07 3a90 	vmov	s15, r3
 801d956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d95a:	ed97 6a02 	vldr	s12, [r7, #8]
 801d95e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801da5c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d96a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d972:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d97a:	e043      	b.n	801da04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d97c:	693b      	ldr	r3, [r7, #16]
 801d97e:	ee07 3a90 	vmov	s15, r3
 801d982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d986:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801da68 <HAL_RCC_GetSysClockFreq+0x2f0>
 801d98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d98e:	4b2f      	ldr	r3, [pc, #188]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d996:	ee07 3a90 	vmov	s15, r3
 801d99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d99e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d9a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801da5c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d9ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d9ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d9be:	e021      	b.n	801da04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d9c0:	693b      	ldr	r3, [r7, #16]
 801d9c2:	ee07 3a90 	vmov	s15, r3
 801d9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801da64 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d9d2:	4b1e      	ldr	r3, [pc, #120]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d9da:	ee07 3a90 	vmov	s15, r3
 801d9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d9e2:	ed97 6a02 	vldr	s12, [r7, #8]
 801d9e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801da5c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d9f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d9fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801da02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801da04:	4b11      	ldr	r3, [pc, #68]	@ (801da4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801da06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da08:	0a5b      	lsrs	r3, r3, #9
 801da0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da0e:	3301      	adds	r3, #1
 801da10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	ee07 3a90 	vmov	s15, r3
 801da18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801da1c:	edd7 6a07 	vldr	s13, [r7, #28]
 801da20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801da24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801da28:	ee17 3a90 	vmov	r3, s15
 801da2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801da2e:	e005      	b.n	801da3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801da30:	2300      	movs	r3, #0
 801da32:	61bb      	str	r3, [r7, #24]
      break;
 801da34:	e002      	b.n	801da3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801da36:	4b07      	ldr	r3, [pc, #28]	@ (801da54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801da38:	61bb      	str	r3, [r7, #24]
      break;
 801da3a:	bf00      	nop
  }

  return sysclockfreq;
 801da3c:	69bb      	ldr	r3, [r7, #24]
}
 801da3e:	4618      	mov	r0, r3
 801da40:	3724      	adds	r7, #36	@ 0x24
 801da42:	46bd      	mov	sp, r7
 801da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da48:	4770      	bx	lr
 801da4a:	bf00      	nop
 801da4c:	58024400 	.word	0x58024400
 801da50:	03d09000 	.word	0x03d09000
 801da54:	003d0900 	.word	0x003d0900
 801da58:	007a1200 	.word	0x007a1200
 801da5c:	46000000 	.word	0x46000000
 801da60:	4c742400 	.word	0x4c742400
 801da64:	4a742400 	.word	0x4a742400
 801da68:	4af42400 	.word	0x4af42400

0801da6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	b082      	sub	sp, #8
 801da70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801da72:	f7ff fe81 	bl	801d778 <HAL_RCC_GetSysClockFreq>
 801da76:	4602      	mov	r2, r0
 801da78:	4b10      	ldr	r3, [pc, #64]	@ (801dabc <HAL_RCC_GetHCLKFreq+0x50>)
 801da7a:	699b      	ldr	r3, [r3, #24]
 801da7c:	0a1b      	lsrs	r3, r3, #8
 801da7e:	f003 030f 	and.w	r3, r3, #15
 801da82:	490f      	ldr	r1, [pc, #60]	@ (801dac0 <HAL_RCC_GetHCLKFreq+0x54>)
 801da84:	5ccb      	ldrb	r3, [r1, r3]
 801da86:	f003 031f 	and.w	r3, r3, #31
 801da8a:	fa22 f303 	lsr.w	r3, r2, r3
 801da8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801da90:	4b0a      	ldr	r3, [pc, #40]	@ (801dabc <HAL_RCC_GetHCLKFreq+0x50>)
 801da92:	699b      	ldr	r3, [r3, #24]
 801da94:	f003 030f 	and.w	r3, r3, #15
 801da98:	4a09      	ldr	r2, [pc, #36]	@ (801dac0 <HAL_RCC_GetHCLKFreq+0x54>)
 801da9a:	5cd3      	ldrb	r3, [r2, r3]
 801da9c:	f003 031f 	and.w	r3, r3, #31
 801daa0:	687a      	ldr	r2, [r7, #4]
 801daa2:	fa22 f303 	lsr.w	r3, r2, r3
 801daa6:	4a07      	ldr	r2, [pc, #28]	@ (801dac4 <HAL_RCC_GetHCLKFreq+0x58>)
 801daa8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801daaa:	4a07      	ldr	r2, [pc, #28]	@ (801dac8 <HAL_RCC_GetHCLKFreq+0x5c>)
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801dab0:	4b04      	ldr	r3, [pc, #16]	@ (801dac4 <HAL_RCC_GetHCLKFreq+0x58>)
 801dab2:	681b      	ldr	r3, [r3, #0]
}
 801dab4:	4618      	mov	r0, r3
 801dab6:	3708      	adds	r7, #8
 801dab8:	46bd      	mov	sp, r7
 801daba:	bd80      	pop	{r7, pc}
 801dabc:	58024400 	.word	0x58024400
 801dac0:	0802a434 	.word	0x0802a434
 801dac4:	24000004 	.word	0x24000004
 801dac8:	24000000 	.word	0x24000000

0801dacc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801dacc:	b580      	push	{r7, lr}
 801dace:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801dad0:	f7ff ffcc 	bl	801da6c <HAL_RCC_GetHCLKFreq>
 801dad4:	4602      	mov	r2, r0
 801dad6:	4b06      	ldr	r3, [pc, #24]	@ (801daf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801dad8:	69db      	ldr	r3, [r3, #28]
 801dada:	091b      	lsrs	r3, r3, #4
 801dadc:	f003 0307 	and.w	r3, r3, #7
 801dae0:	4904      	ldr	r1, [pc, #16]	@ (801daf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801dae2:	5ccb      	ldrb	r3, [r1, r3]
 801dae4:	f003 031f 	and.w	r3, r3, #31
 801dae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801daec:	4618      	mov	r0, r3
 801daee:	bd80      	pop	{r7, pc}
 801daf0:	58024400 	.word	0x58024400
 801daf4:	0802a434 	.word	0x0802a434

0801daf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801daf8:	b580      	push	{r7, lr}
 801dafa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801dafc:	f7ff ffb6 	bl	801da6c <HAL_RCC_GetHCLKFreq>
 801db00:	4602      	mov	r2, r0
 801db02:	4b06      	ldr	r3, [pc, #24]	@ (801db1c <HAL_RCC_GetPCLK2Freq+0x24>)
 801db04:	69db      	ldr	r3, [r3, #28]
 801db06:	0a1b      	lsrs	r3, r3, #8
 801db08:	f003 0307 	and.w	r3, r3, #7
 801db0c:	4904      	ldr	r1, [pc, #16]	@ (801db20 <HAL_RCC_GetPCLK2Freq+0x28>)
 801db0e:	5ccb      	ldrb	r3, [r1, r3]
 801db10:	f003 031f 	and.w	r3, r3, #31
 801db14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801db18:	4618      	mov	r0, r3
 801db1a:	bd80      	pop	{r7, pc}
 801db1c:	58024400 	.word	0x58024400
 801db20:	0802a434 	.word	0x0802a434

0801db24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801db24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801db28:	b0ca      	sub	sp, #296	@ 0x128
 801db2a:	af00      	add	r7, sp, #0
 801db2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801db30:	2300      	movs	r3, #0
 801db32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801db36:	2300      	movs	r3, #0
 801db38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801db3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801db48:	2500      	movs	r5, #0
 801db4a:	ea54 0305 	orrs.w	r3, r4, r5
 801db4e:	d049      	beq.n	801dbe4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801db50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801db5a:	d02f      	beq.n	801dbbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801db5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801db60:	d828      	bhi.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801db62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801db66:	d01a      	beq.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801db68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801db6c:	d822      	bhi.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d003      	beq.n	801db7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801db72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801db76:	d007      	beq.n	801db88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801db78:	e01c      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801db7a:	4bb8      	ldr	r3, [pc, #736]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801db7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db7e:	4ab7      	ldr	r2, [pc, #732]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801db80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801db84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801db86:	e01a      	b.n	801dbbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801db88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db8c:	3308      	adds	r3, #8
 801db8e:	2102      	movs	r1, #2
 801db90:	4618      	mov	r0, r3
 801db92:	f001 fc8f 	bl	801f4b4 <RCCEx_PLL2_Config>
 801db96:	4603      	mov	r3, r0
 801db98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801db9c:	e00f      	b.n	801dbbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801db9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dba2:	3328      	adds	r3, #40	@ 0x28
 801dba4:	2102      	movs	r1, #2
 801dba6:	4618      	mov	r0, r3
 801dba8:	f001 fd36 	bl	801f618 <RCCEx_PLL3_Config>
 801dbac:	4603      	mov	r3, r0
 801dbae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801dbb2:	e004      	b.n	801dbbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dbb4:	2301      	movs	r3, #1
 801dbb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbba:	e000      	b.n	801dbbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801dbbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d10a      	bne.n	801dbdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801dbc6:	4ba5      	ldr	r3, [pc, #660]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dbc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dbca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801dbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dbd4:	4aa1      	ldr	r2, [pc, #644]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dbd6:	430b      	orrs	r3, r1
 801dbd8:	6513      	str	r3, [r2, #80]	@ 0x50
 801dbda:	e003      	b.n	801dbe4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801dbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801dbf0:	f04f 0900 	mov.w	r9, #0
 801dbf4:	ea58 0309 	orrs.w	r3, r8, r9
 801dbf8:	d047      	beq.n	801dc8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801dbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dc00:	2b04      	cmp	r3, #4
 801dc02:	d82a      	bhi.n	801dc5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801dc04:	a201      	add	r2, pc, #4	@ (adr r2, 801dc0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801dc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc0a:	bf00      	nop
 801dc0c:	0801dc21 	.word	0x0801dc21
 801dc10:	0801dc2f 	.word	0x0801dc2f
 801dc14:	0801dc45 	.word	0x0801dc45
 801dc18:	0801dc63 	.word	0x0801dc63
 801dc1c:	0801dc63 	.word	0x0801dc63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dc20:	4b8e      	ldr	r3, [pc, #568]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc24:	4a8d      	ldr	r2, [pc, #564]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dc26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dc2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dc2c:	e01a      	b.n	801dc64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc32:	3308      	adds	r3, #8
 801dc34:	2100      	movs	r1, #0
 801dc36:	4618      	mov	r0, r3
 801dc38:	f001 fc3c 	bl	801f4b4 <RCCEx_PLL2_Config>
 801dc3c:	4603      	mov	r3, r0
 801dc3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dc42:	e00f      	b.n	801dc64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dc44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc48:	3328      	adds	r3, #40	@ 0x28
 801dc4a:	2100      	movs	r1, #0
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f001 fce3 	bl	801f618 <RCCEx_PLL3_Config>
 801dc52:	4603      	mov	r3, r0
 801dc54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dc58:	e004      	b.n	801dc64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dc5a:	2301      	movs	r3, #1
 801dc5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc60:	e000      	b.n	801dc64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801dc62:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dc64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d10a      	bne.n	801dc82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801dc6c:	4b7b      	ldr	r3, [pc, #492]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dc70:	f023 0107 	bic.w	r1, r3, #7
 801dc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dc7a:	4a78      	ldr	r2, [pc, #480]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dc7c:	430b      	orrs	r3, r1
 801dc7e:	6513      	str	r3, [r2, #80]	@ 0x50
 801dc80:	e003      	b.n	801dc8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801dc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801dc96:	f04f 0b00 	mov.w	fp, #0
 801dc9a:	ea5a 030b 	orrs.w	r3, sl, fp
 801dc9e:	d04c      	beq.n	801dd3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801dca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801dca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dcaa:	d030      	beq.n	801dd0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801dcac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dcb0:	d829      	bhi.n	801dd06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dcb2:	2bc0      	cmp	r3, #192	@ 0xc0
 801dcb4:	d02d      	beq.n	801dd12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801dcb6:	2bc0      	cmp	r3, #192	@ 0xc0
 801dcb8:	d825      	bhi.n	801dd06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dcba:	2b80      	cmp	r3, #128	@ 0x80
 801dcbc:	d018      	beq.n	801dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801dcbe:	2b80      	cmp	r3, #128	@ 0x80
 801dcc0:	d821      	bhi.n	801dd06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d002      	beq.n	801dccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801dcc6:	2b40      	cmp	r3, #64	@ 0x40
 801dcc8:	d007      	beq.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801dcca:	e01c      	b.n	801dd06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dccc:	4b63      	ldr	r3, [pc, #396]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dcce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcd0:	4a62      	ldr	r2, [pc, #392]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dcd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dcd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801dcd8:	e01c      	b.n	801dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcde:	3308      	adds	r3, #8
 801dce0:	2100      	movs	r1, #0
 801dce2:	4618      	mov	r0, r3
 801dce4:	f001 fbe6 	bl	801f4b4 <RCCEx_PLL2_Config>
 801dce8:	4603      	mov	r3, r0
 801dcea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801dcee:	e011      	b.n	801dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcf4:	3328      	adds	r3, #40	@ 0x28
 801dcf6:	2100      	movs	r1, #0
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f001 fc8d 	bl	801f618 <RCCEx_PLL3_Config>
 801dcfe:	4603      	mov	r3, r0
 801dd00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801dd04:	e006      	b.n	801dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dd06:	2301      	movs	r3, #1
 801dd08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd0c:	e002      	b.n	801dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801dd0e:	bf00      	nop
 801dd10:	e000      	b.n	801dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801dd12:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dd14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d10a      	bne.n	801dd32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801dd1c:	4b4f      	ldr	r3, [pc, #316]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dd1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801dd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801dd2a:	4a4c      	ldr	r2, [pc, #304]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dd2c:	430b      	orrs	r3, r1
 801dd2e:	6513      	str	r3, [r2, #80]	@ 0x50
 801dd30:	e003      	b.n	801dd3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801dd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801dd46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801dd50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801dd54:	460b      	mov	r3, r1
 801dd56:	4313      	orrs	r3, r2
 801dd58:	d053      	beq.n	801de02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801dd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801dd62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801dd66:	d035      	beq.n	801ddd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801dd68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801dd6c:	d82e      	bhi.n	801ddcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801dd6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801dd72:	d031      	beq.n	801ddd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801dd74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801dd78:	d828      	bhi.n	801ddcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801dd7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801dd7e:	d01a      	beq.n	801ddb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801dd80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801dd84:	d822      	bhi.n	801ddcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d003      	beq.n	801dd92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801dd8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801dd8e:	d007      	beq.n	801dda0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801dd90:	e01c      	b.n	801ddcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dd92:	4b32      	ldr	r3, [pc, #200]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd96:	4a31      	ldr	r2, [pc, #196]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dd98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dd9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801dd9e:	e01c      	b.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dda4:	3308      	adds	r3, #8
 801dda6:	2100      	movs	r1, #0
 801dda8:	4618      	mov	r0, r3
 801ddaa:	f001 fb83 	bl	801f4b4 <RCCEx_PLL2_Config>
 801ddae:	4603      	mov	r3, r0
 801ddb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801ddb4:	e011      	b.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ddb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddba:	3328      	adds	r3, #40	@ 0x28
 801ddbc:	2100      	movs	r1, #0
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f001 fc2a 	bl	801f618 <RCCEx_PLL3_Config>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ddca:	e006      	b.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801ddcc:	2301      	movs	r3, #1
 801ddce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ddd2:	e002      	b.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801ddd4:	bf00      	nop
 801ddd6:	e000      	b.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801ddd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ddda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d10b      	bne.n	801ddfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801dde2:	4b1e      	ldr	r3, [pc, #120]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dde4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dde6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801ddea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ddf2:	4a1a      	ldr	r2, [pc, #104]	@ (801de5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ddf4:	430b      	orrs	r3, r1
 801ddf6:	6593      	str	r3, [r2, #88]	@ 0x58
 801ddf8:	e003      	b.n	801de02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801de02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801de0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801de12:	2300      	movs	r3, #0
 801de14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801de18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801de1c:	460b      	mov	r3, r1
 801de1e:	4313      	orrs	r3, r2
 801de20:	d056      	beq.n	801ded0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801de22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801de2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801de2e:	d038      	beq.n	801dea2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801de30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801de34:	d831      	bhi.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801de36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801de3a:	d034      	beq.n	801dea6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801de3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801de40:	d82b      	bhi.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801de42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801de46:	d01d      	beq.n	801de84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801de48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801de4c:	d825      	bhi.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d006      	beq.n	801de60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801de52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801de56:	d00a      	beq.n	801de6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801de58:	e01f      	b.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801de5a:	bf00      	nop
 801de5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801de60:	4ba2      	ldr	r3, [pc, #648]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801de62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de64:	4aa1      	ldr	r2, [pc, #644]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801de66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801de6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801de6c:	e01c      	b.n	801dea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801de6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de72:	3308      	adds	r3, #8
 801de74:	2100      	movs	r1, #0
 801de76:	4618      	mov	r0, r3
 801de78:	f001 fb1c 	bl	801f4b4 <RCCEx_PLL2_Config>
 801de7c:	4603      	mov	r3, r0
 801de7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801de82:	e011      	b.n	801dea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801de84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de88:	3328      	adds	r3, #40	@ 0x28
 801de8a:	2100      	movs	r1, #0
 801de8c:	4618      	mov	r0, r3
 801de8e:	f001 fbc3 	bl	801f618 <RCCEx_PLL3_Config>
 801de92:	4603      	mov	r3, r0
 801de94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801de98:	e006      	b.n	801dea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801de9a:	2301      	movs	r3, #1
 801de9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dea0:	e002      	b.n	801dea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801dea2:	bf00      	nop
 801dea4:	e000      	b.n	801dea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801dea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801deac:	2b00      	cmp	r3, #0
 801deae:	d10b      	bne.n	801dec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801deb0:	4b8e      	ldr	r3, [pc, #568]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801deb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801deb4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801deb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801debc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801dec0:	4a8a      	ldr	r2, [pc, #552]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dec2:	430b      	orrs	r3, r1
 801dec4:	6593      	str	r3, [r2, #88]	@ 0x58
 801dec6:	e003      	b.n	801ded0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801decc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801ded0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ded8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801dedc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801dee0:	2300      	movs	r3, #0
 801dee2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801dee6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801deea:	460b      	mov	r3, r1
 801deec:	4313      	orrs	r3, r2
 801deee:	d03a      	beq.n	801df66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801def0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801def4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801def6:	2b30      	cmp	r3, #48	@ 0x30
 801def8:	d01f      	beq.n	801df3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801defa:	2b30      	cmp	r3, #48	@ 0x30
 801defc:	d819      	bhi.n	801df32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801defe:	2b20      	cmp	r3, #32
 801df00:	d00c      	beq.n	801df1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801df02:	2b20      	cmp	r3, #32
 801df04:	d815      	bhi.n	801df32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801df06:	2b00      	cmp	r3, #0
 801df08:	d019      	beq.n	801df3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801df0a:	2b10      	cmp	r3, #16
 801df0c:	d111      	bne.n	801df32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801df0e:	4b77      	ldr	r3, [pc, #476]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801df10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df12:	4a76      	ldr	r2, [pc, #472]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801df14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801df18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801df1a:	e011      	b.n	801df40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801df1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df20:	3308      	adds	r3, #8
 801df22:	2102      	movs	r1, #2
 801df24:	4618      	mov	r0, r3
 801df26:	f001 fac5 	bl	801f4b4 <RCCEx_PLL2_Config>
 801df2a:	4603      	mov	r3, r0
 801df2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801df30:	e006      	b.n	801df40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801df32:	2301      	movs	r3, #1
 801df34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df38:	e002      	b.n	801df40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801df3a:	bf00      	nop
 801df3c:	e000      	b.n	801df40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801df3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df44:	2b00      	cmp	r3, #0
 801df46:	d10a      	bne.n	801df5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801df48:	4b68      	ldr	r3, [pc, #416]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801df4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801df4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801df50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801df56:	4a65      	ldr	r2, [pc, #404]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801df58:	430b      	orrs	r3, r1
 801df5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801df5c:	e003      	b.n	801df66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801df66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801df72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801df76:	2300      	movs	r3, #0
 801df78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801df7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801df80:	460b      	mov	r3, r1
 801df82:	4313      	orrs	r3, r2
 801df84:	d051      	beq.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801df8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801df90:	d035      	beq.n	801dffe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801df92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801df96:	d82e      	bhi.n	801dff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801df98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801df9c:	d031      	beq.n	801e002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801df9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801dfa2:	d828      	bhi.n	801dff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801dfa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801dfa8:	d01a      	beq.n	801dfe0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801dfaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801dfae:	d822      	bhi.n	801dff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d003      	beq.n	801dfbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 801dfb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dfb8:	d007      	beq.n	801dfca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801dfba:	e01c      	b.n	801dff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dfbc:	4b4b      	ldr	r3, [pc, #300]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfc0:	4a4a      	ldr	r2, [pc, #296]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dfc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dfc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801dfc8:	e01c      	b.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfce:	3308      	adds	r3, #8
 801dfd0:	2100      	movs	r1, #0
 801dfd2:	4618      	mov	r0, r3
 801dfd4:	f001 fa6e 	bl	801f4b4 <RCCEx_PLL2_Config>
 801dfd8:	4603      	mov	r3, r0
 801dfda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801dfde:	e011      	b.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe4:	3328      	adds	r3, #40	@ 0x28
 801dfe6:	2100      	movs	r1, #0
 801dfe8:	4618      	mov	r0, r3
 801dfea:	f001 fb15 	bl	801f618 <RCCEx_PLL3_Config>
 801dfee:	4603      	mov	r3, r0
 801dff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801dff4:	e006      	b.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dff6:	2301      	movs	r3, #1
 801dff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dffc:	e002      	b.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801dffe:	bf00      	nop
 801e000:	e000      	b.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e002:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d10a      	bne.n	801e022 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801e00c:	4b37      	ldr	r3, [pc, #220]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e00e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e010:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801e014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e01a:	4a34      	ldr	r2, [pc, #208]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e01c:	430b      	orrs	r3, r1
 801e01e:	6513      	str	r3, [r2, #80]	@ 0x50
 801e020:	e003      	b.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801e02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e032:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801e03a:	2300      	movs	r3, #0
 801e03c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801e040:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801e044:	460b      	mov	r3, r1
 801e046:	4313      	orrs	r3, r2
 801e048:	d056      	beq.n	801e0f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801e04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e054:	d033      	beq.n	801e0be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801e056:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e05a:	d82c      	bhi.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e05c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e060:	d02f      	beq.n	801e0c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801e062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e066:	d826      	bhi.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e06c:	d02b      	beq.n	801e0c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801e06e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e072:	d820      	bhi.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e078:	d012      	beq.n	801e0a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801e07a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e07e:	d81a      	bhi.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e080:	2b00      	cmp	r3, #0
 801e082:	d022      	beq.n	801e0ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801e084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e088:	d115      	bne.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e08e:	3308      	adds	r3, #8
 801e090:	2101      	movs	r1, #1
 801e092:	4618      	mov	r0, r3
 801e094:	f001 fa0e 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e098:	4603      	mov	r3, r0
 801e09a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e09e:	e015      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0a4:	3328      	adds	r3, #40	@ 0x28
 801e0a6:	2101      	movs	r1, #1
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f001 fab5 	bl	801f618 <RCCEx_PLL3_Config>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e0b4:	e00a      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0b6:	2301      	movs	r3, #1
 801e0b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0bc:	e006      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e0be:	bf00      	nop
 801e0c0:	e004      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e0c2:	bf00      	nop
 801e0c4:	e002      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e0c6:	bf00      	nop
 801e0c8:	e000      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d10d      	bne.n	801e0f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801e0d4:	4b05      	ldr	r3, [pc, #20]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e0d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e0d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801e0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e0e2:	4a02      	ldr	r2, [pc, #8]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e0e4:	430b      	orrs	r3, r1
 801e0e6:	6513      	str	r3, [r2, #80]	@ 0x50
 801e0e8:	e006      	b.n	801e0f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801e0ea:	bf00      	nop
 801e0ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801e0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e100:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801e108:	2300      	movs	r3, #0
 801e10a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801e10e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801e112:	460b      	mov	r3, r1
 801e114:	4313      	orrs	r3, r2
 801e116:	d055      	beq.n	801e1c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801e118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e11c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e124:	d033      	beq.n	801e18e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801e126:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e12a:	d82c      	bhi.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e12c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e130:	d02f      	beq.n	801e192 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801e132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e136:	d826      	bhi.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e13c:	d02b      	beq.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801e13e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e142:	d820      	bhi.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e148:	d012      	beq.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801e14a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e14e:	d81a      	bhi.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e150:	2b00      	cmp	r3, #0
 801e152:	d022      	beq.n	801e19a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801e154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e158:	d115      	bne.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e15e:	3308      	adds	r3, #8
 801e160:	2101      	movs	r1, #1
 801e162:	4618      	mov	r0, r3
 801e164:	f001 f9a6 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e168:	4603      	mov	r3, r0
 801e16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e16e:	e015      	b.n	801e19c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e174:	3328      	adds	r3, #40	@ 0x28
 801e176:	2101      	movs	r1, #1
 801e178:	4618      	mov	r0, r3
 801e17a:	f001 fa4d 	bl	801f618 <RCCEx_PLL3_Config>
 801e17e:	4603      	mov	r3, r0
 801e180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e184:	e00a      	b.n	801e19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801e186:	2301      	movs	r3, #1
 801e188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e18c:	e006      	b.n	801e19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e18e:	bf00      	nop
 801e190:	e004      	b.n	801e19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e192:	bf00      	nop
 801e194:	e002      	b.n	801e19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e196:	bf00      	nop
 801e198:	e000      	b.n	801e19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e19a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e19c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d10b      	bne.n	801e1bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801e1a4:	4ba3      	ldr	r3, [pc, #652]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e1a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e1a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e1b4:	4a9f      	ldr	r2, [pc, #636]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e1b6:	430b      	orrs	r3, r1
 801e1b8:	6593      	str	r3, [r2, #88]	@ 0x58
 801e1ba:	e003      	b.n	801e1c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801e1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e1d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801e1da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801e1de:	460b      	mov	r3, r1
 801e1e0:	4313      	orrs	r3, r2
 801e1e2:	d037      	beq.n	801e254 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801e1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e1ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e1ee:	d00e      	beq.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801e1f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e1f4:	d816      	bhi.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d018      	beq.n	801e22c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801e1fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e1fe:	d111      	bne.n	801e224 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e200:	4b8c      	ldr	r3, [pc, #560]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e204:	4a8b      	ldr	r2, [pc, #556]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e20a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e20c:	e00f      	b.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e212:	3308      	adds	r3, #8
 801e214:	2101      	movs	r1, #1
 801e216:	4618      	mov	r0, r3
 801e218:	f001 f94c 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e21c:	4603      	mov	r3, r0
 801e21e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e222:	e004      	b.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e224:	2301      	movs	r3, #1
 801e226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e22a:	e000      	b.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e22e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e232:	2b00      	cmp	r3, #0
 801e234:	d10a      	bne.n	801e24c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e236:	4b7f      	ldr	r3, [pc, #508]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e23a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e244:	4a7b      	ldr	r2, [pc, #492]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e246:	430b      	orrs	r3, r1
 801e248:	6513      	str	r3, [r2, #80]	@ 0x50
 801e24a:	e003      	b.n	801e254 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e25c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e264:	2300      	movs	r3, #0
 801e266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e26a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e26e:	460b      	mov	r3, r1
 801e270:	4313      	orrs	r3, r2
 801e272:	d039      	beq.n	801e2e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e27a:	2b03      	cmp	r3, #3
 801e27c:	d81c      	bhi.n	801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e27e:	a201      	add	r2, pc, #4	@ (adr r2, 801e284 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e284:	0801e2c1 	.word	0x0801e2c1
 801e288:	0801e295 	.word	0x0801e295
 801e28c:	0801e2a3 	.word	0x0801e2a3
 801e290:	0801e2c1 	.word	0x0801e2c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e294:	4b67      	ldr	r3, [pc, #412]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e298:	4a66      	ldr	r2, [pc, #408]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e29a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e29e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e2a0:	e00f      	b.n	801e2c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2a6:	3308      	adds	r3, #8
 801e2a8:	2102      	movs	r1, #2
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	f001 f902 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e2b0:	4603      	mov	r3, r0
 801e2b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e2b6:	e004      	b.n	801e2c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e2b8:	2301      	movs	r3, #1
 801e2ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e2be:	e000      	b.n	801e2c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d10a      	bne.n	801e2e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e2ca:	4b5a      	ldr	r3, [pc, #360]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e2cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2ce:	f023 0103 	bic.w	r1, r3, #3
 801e2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e2d8:	4a56      	ldr	r2, [pc, #344]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e2da:	430b      	orrs	r3, r1
 801e2dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e2de:	e003      	b.n	801e2e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e2e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e2e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e2f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e2fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e302:	460b      	mov	r3, r1
 801e304:	4313      	orrs	r3, r2
 801e306:	f000 809f 	beq.w	801e448 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e30a:	4b4b      	ldr	r3, [pc, #300]	@ (801e438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	4a4a      	ldr	r2, [pc, #296]	@ (801e438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e316:	f7fc ff41 	bl	801b19c <HAL_GetTick>
 801e31a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e31e:	e00b      	b.n	801e338 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e320:	f7fc ff3c 	bl	801b19c <HAL_GetTick>
 801e324:	4602      	mov	r2, r0
 801e326:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e32a:	1ad3      	subs	r3, r2, r3
 801e32c:	2b64      	cmp	r3, #100	@ 0x64
 801e32e:	d903      	bls.n	801e338 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e330:	2303      	movs	r3, #3
 801e332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e336:	e005      	b.n	801e344 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e338:	4b3f      	ldr	r3, [pc, #252]	@ (801e438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e340:	2b00      	cmp	r3, #0
 801e342:	d0ed      	beq.n	801e320 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d179      	bne.n	801e440 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e34c:	4b39      	ldr	r3, [pc, #228]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e34e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e358:	4053      	eors	r3, r2
 801e35a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d015      	beq.n	801e38e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e362:	4b34      	ldr	r3, [pc, #208]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e36a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e36e:	4b31      	ldr	r3, [pc, #196]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e372:	4a30      	ldr	r2, [pc, #192]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e378:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e37a:	4b2e      	ldr	r3, [pc, #184]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e37c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e37e:	4a2d      	ldr	r2, [pc, #180]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e384:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e386:	4a2b      	ldr	r2, [pc, #172]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e38c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e39a:	d118      	bne.n	801e3ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e39c:	f7fc fefe 	bl	801b19c <HAL_GetTick>
 801e3a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e3a4:	e00d      	b.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e3a6:	f7fc fef9 	bl	801b19c <HAL_GetTick>
 801e3aa:	4602      	mov	r2, r0
 801e3ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e3b0:	1ad2      	subs	r2, r2, r3
 801e3b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e3b6:	429a      	cmp	r2, r3
 801e3b8:	d903      	bls.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e3ba:	2303      	movs	r3, #3
 801e3bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e3c0:	e005      	b.n	801e3ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e3c2:	4b1c      	ldr	r3, [pc, #112]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e3c6:	f003 0302 	and.w	r3, r3, #2
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d0eb      	beq.n	801e3a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d129      	bne.n	801e42a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e3de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e3e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e3e6:	d10e      	bne.n	801e406 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e3e8:	4b12      	ldr	r3, [pc, #72]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e3ea:	691b      	ldr	r3, [r3, #16]
 801e3ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e3f8:	091a      	lsrs	r2, r3, #4
 801e3fa:	4b10      	ldr	r3, [pc, #64]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801e3fc:	4013      	ands	r3, r2
 801e3fe:	4a0d      	ldr	r2, [pc, #52]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e400:	430b      	orrs	r3, r1
 801e402:	6113      	str	r3, [r2, #16]
 801e404:	e005      	b.n	801e412 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801e406:	4b0b      	ldr	r3, [pc, #44]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e408:	691b      	ldr	r3, [r3, #16]
 801e40a:	4a0a      	ldr	r2, [pc, #40]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e40c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e410:	6113      	str	r3, [r2, #16]
 801e412:	4b08      	ldr	r3, [pc, #32]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e414:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e41a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e41e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e422:	4a04      	ldr	r2, [pc, #16]	@ (801e434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e424:	430b      	orrs	r3, r1
 801e426:	6713      	str	r3, [r2, #112]	@ 0x70
 801e428:	e00e      	b.n	801e448 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801e42a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e42e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e432:	e009      	b.n	801e448 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801e434:	58024400 	.word	0x58024400
 801e438:	58024800 	.word	0x58024800
 801e43c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801e448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e450:	f002 0301 	and.w	r3, r2, #1
 801e454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e458:	2300      	movs	r3, #0
 801e45a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e45e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e462:	460b      	mov	r3, r1
 801e464:	4313      	orrs	r3, r2
 801e466:	f000 8089 	beq.w	801e57c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e46e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e470:	2b28      	cmp	r3, #40	@ 0x28
 801e472:	d86b      	bhi.n	801e54c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e474:	a201      	add	r2, pc, #4	@ (adr r2, 801e47c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e47a:	bf00      	nop
 801e47c:	0801e555 	.word	0x0801e555
 801e480:	0801e54d 	.word	0x0801e54d
 801e484:	0801e54d 	.word	0x0801e54d
 801e488:	0801e54d 	.word	0x0801e54d
 801e48c:	0801e54d 	.word	0x0801e54d
 801e490:	0801e54d 	.word	0x0801e54d
 801e494:	0801e54d 	.word	0x0801e54d
 801e498:	0801e54d 	.word	0x0801e54d
 801e49c:	0801e521 	.word	0x0801e521
 801e4a0:	0801e54d 	.word	0x0801e54d
 801e4a4:	0801e54d 	.word	0x0801e54d
 801e4a8:	0801e54d 	.word	0x0801e54d
 801e4ac:	0801e54d 	.word	0x0801e54d
 801e4b0:	0801e54d 	.word	0x0801e54d
 801e4b4:	0801e54d 	.word	0x0801e54d
 801e4b8:	0801e54d 	.word	0x0801e54d
 801e4bc:	0801e537 	.word	0x0801e537
 801e4c0:	0801e54d 	.word	0x0801e54d
 801e4c4:	0801e54d 	.word	0x0801e54d
 801e4c8:	0801e54d 	.word	0x0801e54d
 801e4cc:	0801e54d 	.word	0x0801e54d
 801e4d0:	0801e54d 	.word	0x0801e54d
 801e4d4:	0801e54d 	.word	0x0801e54d
 801e4d8:	0801e54d 	.word	0x0801e54d
 801e4dc:	0801e555 	.word	0x0801e555
 801e4e0:	0801e54d 	.word	0x0801e54d
 801e4e4:	0801e54d 	.word	0x0801e54d
 801e4e8:	0801e54d 	.word	0x0801e54d
 801e4ec:	0801e54d 	.word	0x0801e54d
 801e4f0:	0801e54d 	.word	0x0801e54d
 801e4f4:	0801e54d 	.word	0x0801e54d
 801e4f8:	0801e54d 	.word	0x0801e54d
 801e4fc:	0801e555 	.word	0x0801e555
 801e500:	0801e54d 	.word	0x0801e54d
 801e504:	0801e54d 	.word	0x0801e54d
 801e508:	0801e54d 	.word	0x0801e54d
 801e50c:	0801e54d 	.word	0x0801e54d
 801e510:	0801e54d 	.word	0x0801e54d
 801e514:	0801e54d 	.word	0x0801e54d
 801e518:	0801e54d 	.word	0x0801e54d
 801e51c:	0801e555 	.word	0x0801e555
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e524:	3308      	adds	r3, #8
 801e526:	2101      	movs	r1, #1
 801e528:	4618      	mov	r0, r3
 801e52a:	f000 ffc3 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e52e:	4603      	mov	r3, r0
 801e530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e534:	e00f      	b.n	801e556 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e53a:	3328      	adds	r3, #40	@ 0x28
 801e53c:	2101      	movs	r1, #1
 801e53e:	4618      	mov	r0, r3
 801e540:	f001 f86a 	bl	801f618 <RCCEx_PLL3_Config>
 801e544:	4603      	mov	r3, r0
 801e546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e54a:	e004      	b.n	801e556 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e54c:	2301      	movs	r3, #1
 801e54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e552:	e000      	b.n	801e556 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e554:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	d10a      	bne.n	801e574 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e55e:	4bbf      	ldr	r3, [pc, #764]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e562:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e56a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e56c:	4abb      	ldr	r2, [pc, #748]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e56e:	430b      	orrs	r3, r1
 801e570:	6553      	str	r3, [r2, #84]	@ 0x54
 801e572:	e003      	b.n	801e57c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e584:	f002 0302 	and.w	r3, r2, #2
 801e588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e58c:	2300      	movs	r3, #0
 801e58e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e592:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e596:	460b      	mov	r3, r1
 801e598:	4313      	orrs	r3, r2
 801e59a:	d041      	beq.n	801e620 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801e59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e5a2:	2b05      	cmp	r3, #5
 801e5a4:	d824      	bhi.n	801e5f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801e5a6:	a201      	add	r2, pc, #4	@ (adr r2, 801e5ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801e5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5ac:	0801e5f9 	.word	0x0801e5f9
 801e5b0:	0801e5c5 	.word	0x0801e5c5
 801e5b4:	0801e5db 	.word	0x0801e5db
 801e5b8:	0801e5f9 	.word	0x0801e5f9
 801e5bc:	0801e5f9 	.word	0x0801e5f9
 801e5c0:	0801e5f9 	.word	0x0801e5f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5c8:	3308      	adds	r3, #8
 801e5ca:	2101      	movs	r1, #1
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f000 ff71 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e5d8:	e00f      	b.n	801e5fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5de:	3328      	adds	r3, #40	@ 0x28
 801e5e0:	2101      	movs	r1, #1
 801e5e2:	4618      	mov	r0, r3
 801e5e4:	f001 f818 	bl	801f618 <RCCEx_PLL3_Config>
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e5ee:	e004      	b.n	801e5fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e5f6:	e000      	b.n	801e5fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801e5f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d10a      	bne.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801e602:	4b96      	ldr	r3, [pc, #600]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e606:	f023 0107 	bic.w	r1, r3, #7
 801e60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e60e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e610:	4a92      	ldr	r2, [pc, #584]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e612:	430b      	orrs	r3, r1
 801e614:	6553      	str	r3, [r2, #84]	@ 0x54
 801e616:	e003      	b.n	801e620 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e61c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801e620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e628:	f002 0304 	and.w	r3, r2, #4
 801e62c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e630:	2300      	movs	r3, #0
 801e632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e636:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801e63a:	460b      	mov	r3, r1
 801e63c:	4313      	orrs	r3, r2
 801e63e:	d044      	beq.n	801e6ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801e640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e648:	2b05      	cmp	r3, #5
 801e64a:	d825      	bhi.n	801e698 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801e64c:	a201      	add	r2, pc, #4	@ (adr r2, 801e654 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801e64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e652:	bf00      	nop
 801e654:	0801e6a1 	.word	0x0801e6a1
 801e658:	0801e66d 	.word	0x0801e66d
 801e65c:	0801e683 	.word	0x0801e683
 801e660:	0801e6a1 	.word	0x0801e6a1
 801e664:	0801e6a1 	.word	0x0801e6a1
 801e668:	0801e6a1 	.word	0x0801e6a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e670:	3308      	adds	r3, #8
 801e672:	2101      	movs	r1, #1
 801e674:	4618      	mov	r0, r3
 801e676:	f000 ff1d 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e67a:	4603      	mov	r3, r0
 801e67c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e680:	e00f      	b.n	801e6a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e686:	3328      	adds	r3, #40	@ 0x28
 801e688:	2101      	movs	r1, #1
 801e68a:	4618      	mov	r0, r3
 801e68c:	f000 ffc4 	bl	801f618 <RCCEx_PLL3_Config>
 801e690:	4603      	mov	r3, r0
 801e692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e696:	e004      	b.n	801e6a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e698:	2301      	movs	r3, #1
 801e69a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e69e:	e000      	b.n	801e6a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801e6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d10b      	bne.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801e6aa:	4b6c      	ldr	r3, [pc, #432]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e6ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e6ae:	f023 0107 	bic.w	r1, r3, #7
 801e6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e6ba:	4a68      	ldr	r2, [pc, #416]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e6bc:	430b      	orrs	r3, r1
 801e6be:	6593      	str	r3, [r2, #88]	@ 0x58
 801e6c0:	e003      	b.n	801e6ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801e6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d2:	f002 0320 	and.w	r3, r2, #32
 801e6d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801e6da:	2300      	movs	r3, #0
 801e6dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e6e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801e6e4:	460b      	mov	r3, r1
 801e6e6:	4313      	orrs	r3, r2
 801e6e8:	d055      	beq.n	801e796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801e6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e6f6:	d033      	beq.n	801e760 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801e6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e6fc:	d82c      	bhi.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e702:	d02f      	beq.n	801e764 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801e704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e708:	d826      	bhi.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e70a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e70e:	d02b      	beq.n	801e768 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801e710:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e714:	d820      	bhi.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e71a:	d012      	beq.n	801e742 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801e71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e720:	d81a      	bhi.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e722:	2b00      	cmp	r3, #0
 801e724:	d022      	beq.n	801e76c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801e726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e72a:	d115      	bne.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e730:	3308      	adds	r3, #8
 801e732:	2100      	movs	r1, #0
 801e734:	4618      	mov	r0, r3
 801e736:	f000 febd 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e73a:	4603      	mov	r3, r0
 801e73c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e740:	e015      	b.n	801e76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e746:	3328      	adds	r3, #40	@ 0x28
 801e748:	2102      	movs	r1, #2
 801e74a:	4618      	mov	r0, r3
 801e74c:	f000 ff64 	bl	801f618 <RCCEx_PLL3_Config>
 801e750:	4603      	mov	r3, r0
 801e752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e756:	e00a      	b.n	801e76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e758:	2301      	movs	r3, #1
 801e75a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e75e:	e006      	b.n	801e76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e760:	bf00      	nop
 801e762:	e004      	b.n	801e76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e764:	bf00      	nop
 801e766:	e002      	b.n	801e76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e768:	bf00      	nop
 801e76a:	e000      	b.n	801e76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e76e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e772:	2b00      	cmp	r3, #0
 801e774:	d10b      	bne.n	801e78e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e776:	4b39      	ldr	r3, [pc, #228]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e77a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e786:	4a35      	ldr	r2, [pc, #212]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e788:	430b      	orrs	r3, r1
 801e78a:	6553      	str	r3, [r2, #84]	@ 0x54
 801e78c:	e003      	b.n	801e796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e78e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801e796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e79e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e7a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e7ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e7b0:	460b      	mov	r3, r1
 801e7b2:	4313      	orrs	r3, r2
 801e7b4:	d058      	beq.n	801e868 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801e7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e7be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e7c2:	d033      	beq.n	801e82c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801e7c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e7c8:	d82c      	bhi.n	801e824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e7ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e7ce:	d02f      	beq.n	801e830 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801e7d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e7d4:	d826      	bhi.n	801e824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e7d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e7da:	d02b      	beq.n	801e834 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801e7dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e7e0:	d820      	bhi.n	801e824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e7e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e7e6:	d012      	beq.n	801e80e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801e7e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e7ec:	d81a      	bhi.n	801e824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d022      	beq.n	801e838 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801e7f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e7f6:	d115      	bne.n	801e824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7fc:	3308      	adds	r3, #8
 801e7fe:	2100      	movs	r1, #0
 801e800:	4618      	mov	r0, r3
 801e802:	f000 fe57 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e806:	4603      	mov	r3, r0
 801e808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e80c:	e015      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e812:	3328      	adds	r3, #40	@ 0x28
 801e814:	2102      	movs	r1, #2
 801e816:	4618      	mov	r0, r3
 801e818:	f000 fefe 	bl	801f618 <RCCEx_PLL3_Config>
 801e81c:	4603      	mov	r3, r0
 801e81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e822:	e00a      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e824:	2301      	movs	r3, #1
 801e826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e82a:	e006      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e82c:	bf00      	nop
 801e82e:	e004      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e830:	bf00      	nop
 801e832:	e002      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e834:	bf00      	nop
 801e836:	e000      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e838:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e83a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d10e      	bne.n	801e860 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801e842:	4b06      	ldr	r3, [pc, #24]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e846:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801e84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e84e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e852:	4a02      	ldr	r2, [pc, #8]	@ (801e85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e854:	430b      	orrs	r3, r1
 801e856:	6593      	str	r3, [r2, #88]	@ 0x58
 801e858:	e006      	b.n	801e868 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801e85a:	bf00      	nop
 801e85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e870:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e878:	2300      	movs	r3, #0
 801e87a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e87e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e882:	460b      	mov	r3, r1
 801e884:	4313      	orrs	r3, r2
 801e886:	d055      	beq.n	801e934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e88c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e890:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e894:	d033      	beq.n	801e8fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e896:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e89a:	d82c      	bhi.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e89c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e8a0:	d02f      	beq.n	801e902 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e8a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e8a6:	d826      	bhi.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e8a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e8ac:	d02b      	beq.n	801e906 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e8ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e8b2:	d820      	bhi.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e8b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e8b8:	d012      	beq.n	801e8e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e8ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e8be:	d81a      	bhi.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d022      	beq.n	801e90a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e8c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e8c8:	d115      	bne.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8ce:	3308      	adds	r3, #8
 801e8d0:	2100      	movs	r1, #0
 801e8d2:	4618      	mov	r0, r3
 801e8d4:	f000 fdee 	bl	801f4b4 <RCCEx_PLL2_Config>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e8de:	e015      	b.n	801e90c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8e4:	3328      	adds	r3, #40	@ 0x28
 801e8e6:	2102      	movs	r1, #2
 801e8e8:	4618      	mov	r0, r3
 801e8ea:	f000 fe95 	bl	801f618 <RCCEx_PLL3_Config>
 801e8ee:	4603      	mov	r3, r0
 801e8f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e8f4:	e00a      	b.n	801e90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e8f6:	2301      	movs	r3, #1
 801e8f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e8fc:	e006      	b.n	801e90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e8fe:	bf00      	nop
 801e900:	e004      	b.n	801e90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e902:	bf00      	nop
 801e904:	e002      	b.n	801e90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e906:	bf00      	nop
 801e908:	e000      	b.n	801e90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e90c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e910:	2b00      	cmp	r3, #0
 801e912:	d10b      	bne.n	801e92c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e914:	4ba1      	ldr	r3, [pc, #644]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e918:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e924:	4a9d      	ldr	r2, [pc, #628]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e926:	430b      	orrs	r3, r1
 801e928:	6593      	str	r3, [r2, #88]	@ 0x58
 801e92a:	e003      	b.n	801e934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e92c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e93c:	f002 0308 	and.w	r3, r2, #8
 801e940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e944:	2300      	movs	r3, #0
 801e946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e94a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e94e:	460b      	mov	r3, r1
 801e950:	4313      	orrs	r3, r2
 801e952:	d01e      	beq.n	801e992 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e95c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e960:	d10c      	bne.n	801e97c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e966:	3328      	adds	r3, #40	@ 0x28
 801e968:	2102      	movs	r1, #2
 801e96a:	4618      	mov	r0, r3
 801e96c:	f000 fe54 	bl	801f618 <RCCEx_PLL3_Config>
 801e970:	4603      	mov	r3, r0
 801e972:	2b00      	cmp	r3, #0
 801e974:	d002      	beq.n	801e97c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e976:	2301      	movs	r3, #1
 801e978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e97c:	4b87      	ldr	r3, [pc, #540]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e97e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e980:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e98c:	4a83      	ldr	r2, [pc, #524]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e98e:	430b      	orrs	r3, r1
 801e990:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e99a:	f002 0310 	and.w	r3, r2, #16
 801e99e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e9a2:	2300      	movs	r3, #0
 801e9a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e9a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e9ac:	460b      	mov	r3, r1
 801e9ae:	4313      	orrs	r3, r2
 801e9b0:	d01e      	beq.n	801e9f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e9ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e9be:	d10c      	bne.n	801e9da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9c4:	3328      	adds	r3, #40	@ 0x28
 801e9c6:	2102      	movs	r1, #2
 801e9c8:	4618      	mov	r0, r3
 801e9ca:	f000 fe25 	bl	801f618 <RCCEx_PLL3_Config>
 801e9ce:	4603      	mov	r3, r0
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d002      	beq.n	801e9da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e9d4:	2301      	movs	r3, #1
 801e9d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e9da:	4b70      	ldr	r3, [pc, #448]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e9dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e9de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e9ea:	4a6c      	ldr	r2, [pc, #432]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e9ec:	430b      	orrs	r3, r1
 801e9ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e9fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ea00:	2300      	movs	r3, #0
 801ea02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ea06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801ea0a:	460b      	mov	r3, r1
 801ea0c:	4313      	orrs	r3, r2
 801ea0e:	d03e      	beq.n	801ea8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801ea10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ea18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ea1c:	d022      	beq.n	801ea64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801ea1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ea22:	d81b      	bhi.n	801ea5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d003      	beq.n	801ea30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801ea28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ea2c:	d00b      	beq.n	801ea46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801ea2e:	e015      	b.n	801ea5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ea30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea34:	3308      	adds	r3, #8
 801ea36:	2100      	movs	r1, #0
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f000 fd3b 	bl	801f4b4 <RCCEx_PLL2_Config>
 801ea3e:	4603      	mov	r3, r0
 801ea40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801ea44:	e00f      	b.n	801ea66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ea46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea4a:	3328      	adds	r3, #40	@ 0x28
 801ea4c:	2102      	movs	r1, #2
 801ea4e:	4618      	mov	r0, r3
 801ea50:	f000 fde2 	bl	801f618 <RCCEx_PLL3_Config>
 801ea54:	4603      	mov	r3, r0
 801ea56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801ea5a:	e004      	b.n	801ea66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ea5c:	2301      	movs	r3, #1
 801ea5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ea62:	e000      	b.n	801ea66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801ea64:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	d10b      	bne.n	801ea86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801ea6e:	4b4b      	ldr	r3, [pc, #300]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ea70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ea72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801ea76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ea7e:	4a47      	ldr	r2, [pc, #284]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ea80:	430b      	orrs	r3, r1
 801ea82:	6593      	str	r3, [r2, #88]	@ 0x58
 801ea84:	e003      	b.n	801ea8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801ea8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801ea9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801eaa0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801eaa4:	460b      	mov	r3, r1
 801eaa6:	4313      	orrs	r3, r2
 801eaa8:	d03b      	beq.n	801eb22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801eaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801eab2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801eab6:	d01f      	beq.n	801eaf8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801eab8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801eabc:	d818      	bhi.n	801eaf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801eabe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801eac2:	d003      	beq.n	801eacc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801eac4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801eac8:	d007      	beq.n	801eada <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801eaca:	e011      	b.n	801eaf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801eacc:	4b33      	ldr	r3, [pc, #204]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ead0:	4a32      	ldr	r2, [pc, #200]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ead2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ead6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801ead8:	e00f      	b.n	801eafa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801eada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eade:	3328      	adds	r3, #40	@ 0x28
 801eae0:	2101      	movs	r1, #1
 801eae2:	4618      	mov	r0, r3
 801eae4:	f000 fd98 	bl	801f618 <RCCEx_PLL3_Config>
 801eae8:	4603      	mov	r3, r0
 801eaea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801eaee:	e004      	b.n	801eafa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eaf0:	2301      	movs	r3, #1
 801eaf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eaf6:	e000      	b.n	801eafa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801eaf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eafa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d10b      	bne.n	801eb1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801eb02:	4b26      	ldr	r3, [pc, #152]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eb04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801eb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801eb12:	4a22      	ldr	r2, [pc, #136]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eb14:	430b      	orrs	r3, r1
 801eb16:	6553      	str	r3, [r2, #84]	@ 0x54
 801eb18:	e003      	b.n	801eb22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801eb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801eb2e:	673b      	str	r3, [r7, #112]	@ 0x70
 801eb30:	2300      	movs	r3, #0
 801eb32:	677b      	str	r3, [r7, #116]	@ 0x74
 801eb34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801eb38:	460b      	mov	r3, r1
 801eb3a:	4313      	orrs	r3, r2
 801eb3c:	d034      	beq.n	801eba8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801eb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d003      	beq.n	801eb50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801eb48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb4c:	d007      	beq.n	801eb5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801eb4e:	e011      	b.n	801eb74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801eb50:	4b12      	ldr	r3, [pc, #72]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb54:	4a11      	ldr	r2, [pc, #68]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eb56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801eb5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801eb5c:	e00e      	b.n	801eb7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801eb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb62:	3308      	adds	r3, #8
 801eb64:	2102      	movs	r1, #2
 801eb66:	4618      	mov	r0, r3
 801eb68:	f000 fca4 	bl	801f4b4 <RCCEx_PLL2_Config>
 801eb6c:	4603      	mov	r3, r0
 801eb6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801eb72:	e003      	b.n	801eb7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801eb74:	2301      	movs	r3, #1
 801eb76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eb7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eb7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d10d      	bne.n	801eba0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801eb84:	4b05      	ldr	r3, [pc, #20]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eb86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eb88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801eb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eb92:	4a02      	ldr	r2, [pc, #8]	@ (801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eb94:	430b      	orrs	r3, r1
 801eb96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801eb98:	e006      	b.n	801eba8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801eb9a:	bf00      	nop
 801eb9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801eba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801ebb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ebba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801ebbe:	460b      	mov	r3, r1
 801ebc0:	4313      	orrs	r3, r2
 801ebc2:	d00c      	beq.n	801ebde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ebc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebc8:	3328      	adds	r3, #40	@ 0x28
 801ebca:	2102      	movs	r1, #2
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f000 fd23 	bl	801f618 <RCCEx_PLL3_Config>
 801ebd2:	4603      	mov	r3, r0
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d002      	beq.n	801ebde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801ebd8:	2301      	movs	r3, #1
 801ebda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ebde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebe6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801ebea:	663b      	str	r3, [r7, #96]	@ 0x60
 801ebec:	2300      	movs	r3, #0
 801ebee:	667b      	str	r3, [r7, #100]	@ 0x64
 801ebf0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801ebf4:	460b      	mov	r3, r1
 801ebf6:	4313      	orrs	r3, r2
 801ebf8:	d038      	beq.n	801ec6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801ebfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ec02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ec06:	d018      	beq.n	801ec3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801ec08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ec0c:	d811      	bhi.n	801ec32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ec0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ec12:	d014      	beq.n	801ec3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801ec14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ec18:	d80b      	bhi.n	801ec32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d011      	beq.n	801ec42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801ec1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ec22:	d106      	bne.n	801ec32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ec24:	4bc3      	ldr	r3, [pc, #780]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ec26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec28:	4ac2      	ldr	r2, [pc, #776]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ec2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ec2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801ec30:	e008      	b.n	801ec44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ec32:	2301      	movs	r3, #1
 801ec34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ec38:	e004      	b.n	801ec44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ec3a:	bf00      	nop
 801ec3c:	e002      	b.n	801ec44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ec3e:	bf00      	nop
 801ec40:	e000      	b.n	801ec44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ec42:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ec44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d10b      	bne.n	801ec64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ec4c:	4bb9      	ldr	r3, [pc, #740]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ec4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ec50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ec54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ec5c:	4ab5      	ldr	r2, [pc, #724]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ec5e:	430b      	orrs	r3, r1
 801ec60:	6553      	str	r3, [r2, #84]	@ 0x54
 801ec62:	e003      	b.n	801ec6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ec6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801ec78:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ec7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801ec82:	460b      	mov	r3, r1
 801ec84:	4313      	orrs	r3, r2
 801ec86:	d009      	beq.n	801ec9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ec88:	4baa      	ldr	r3, [pc, #680]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ec8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ec8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ec90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec96:	4aa7      	ldr	r2, [pc, #668]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ec98:	430b      	orrs	r3, r1
 801ec9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801ec9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eca4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801eca8:	653b      	str	r3, [r7, #80]	@ 0x50
 801ecaa:	2300      	movs	r3, #0
 801ecac:	657b      	str	r3, [r7, #84]	@ 0x54
 801ecae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801ecb2:	460b      	mov	r3, r1
 801ecb4:	4313      	orrs	r3, r2
 801ecb6:	d00a      	beq.n	801ecce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801ecb8:	4b9e      	ldr	r3, [pc, #632]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ecba:	691b      	ldr	r3, [r3, #16]
 801ecbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801ecc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ecc8:	4a9a      	ldr	r2, [pc, #616]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ecca:	430b      	orrs	r3, r1
 801eccc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ecce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801ecda:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ecdc:	2300      	movs	r3, #0
 801ecde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ece0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801ece4:	460b      	mov	r3, r1
 801ece6:	4313      	orrs	r3, r2
 801ece8:	d009      	beq.n	801ecfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801ecea:	4b92      	ldr	r3, [pc, #584]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ecec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ecee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801ecf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ecf8:	4a8e      	ldr	r2, [pc, #568]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ecfa:	430b      	orrs	r3, r1
 801ecfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801ecfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801ed0a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	647b      	str	r3, [r7, #68]	@ 0x44
 801ed10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801ed14:	460b      	mov	r3, r1
 801ed16:	4313      	orrs	r3, r2
 801ed18:	d00e      	beq.n	801ed38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801ed1a:	4b86      	ldr	r3, [pc, #536]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed1c:	691b      	ldr	r3, [r3, #16]
 801ed1e:	4a85      	ldr	r2, [pc, #532]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801ed24:	6113      	str	r3, [r2, #16]
 801ed26:	4b83      	ldr	r3, [pc, #524]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed28:	6919      	ldr	r1, [r3, #16]
 801ed2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801ed32:	4a80      	ldr	r2, [pc, #512]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed34:	430b      	orrs	r3, r1
 801ed36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801ed38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801ed44:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ed46:	2300      	movs	r3, #0
 801ed48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801ed4e:	460b      	mov	r3, r1
 801ed50:	4313      	orrs	r3, r2
 801ed52:	d009      	beq.n	801ed68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801ed54:	4b77      	ldr	r3, [pc, #476]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ed58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801ed5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ed62:	4a74      	ldr	r2, [pc, #464]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed64:	430b      	orrs	r3, r1
 801ed66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801ed68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801ed74:	633b      	str	r3, [r7, #48]	@ 0x30
 801ed76:	2300      	movs	r3, #0
 801ed78:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801ed7e:	460b      	mov	r3, r1
 801ed80:	4313      	orrs	r3, r2
 801ed82:	d00a      	beq.n	801ed9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801ed84:	4b6b      	ldr	r3, [pc, #428]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ed88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801ed8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ed94:	4a67      	ldr	r2, [pc, #412]	@ (801ef34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ed96:	430b      	orrs	r3, r1
 801ed98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801ed9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda2:	2100      	movs	r1, #0
 801eda4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801eda6:	f003 0301 	and.w	r3, r3, #1
 801edaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801edac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801edb0:	460b      	mov	r3, r1
 801edb2:	4313      	orrs	r3, r2
 801edb4:	d011      	beq.n	801edda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801edb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edba:	3308      	adds	r3, #8
 801edbc:	2100      	movs	r1, #0
 801edbe:	4618      	mov	r0, r3
 801edc0:	f000 fb78 	bl	801f4b4 <RCCEx_PLL2_Config>
 801edc4:	4603      	mov	r3, r0
 801edc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801edca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d003      	beq.n	801edda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801edd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801edd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801edda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ede2:	2100      	movs	r1, #0
 801ede4:	6239      	str	r1, [r7, #32]
 801ede6:	f003 0302 	and.w	r3, r3, #2
 801edea:	627b      	str	r3, [r7, #36]	@ 0x24
 801edec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801edf0:	460b      	mov	r3, r1
 801edf2:	4313      	orrs	r3, r2
 801edf4:	d011      	beq.n	801ee1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801edf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edfa:	3308      	adds	r3, #8
 801edfc:	2101      	movs	r1, #1
 801edfe:	4618      	mov	r0, r3
 801ee00:	f000 fb58 	bl	801f4b4 <RCCEx_PLL2_Config>
 801ee04:	4603      	mov	r3, r0
 801ee06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ee0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d003      	beq.n	801ee1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801ee1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee22:	2100      	movs	r1, #0
 801ee24:	61b9      	str	r1, [r7, #24]
 801ee26:	f003 0304 	and.w	r3, r3, #4
 801ee2a:	61fb      	str	r3, [r7, #28]
 801ee2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801ee30:	460b      	mov	r3, r1
 801ee32:	4313      	orrs	r3, r2
 801ee34:	d011      	beq.n	801ee5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ee36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee3a:	3308      	adds	r3, #8
 801ee3c:	2102      	movs	r1, #2
 801ee3e:	4618      	mov	r0, r3
 801ee40:	f000 fb38 	bl	801f4b4 <RCCEx_PLL2_Config>
 801ee44:	4603      	mov	r3, r0
 801ee46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ee4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d003      	beq.n	801ee5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801ee5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee62:	2100      	movs	r1, #0
 801ee64:	6139      	str	r1, [r7, #16]
 801ee66:	f003 0308 	and.w	r3, r3, #8
 801ee6a:	617b      	str	r3, [r7, #20]
 801ee6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801ee70:	460b      	mov	r3, r1
 801ee72:	4313      	orrs	r3, r2
 801ee74:	d011      	beq.n	801ee9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ee76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee7a:	3328      	adds	r3, #40	@ 0x28
 801ee7c:	2100      	movs	r1, #0
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f000 fbca 	bl	801f618 <RCCEx_PLL3_Config>
 801ee84:	4603      	mov	r3, r0
 801ee86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801ee8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d003      	beq.n	801ee9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801ee9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eea2:	2100      	movs	r1, #0
 801eea4:	60b9      	str	r1, [r7, #8]
 801eea6:	f003 0310 	and.w	r3, r3, #16
 801eeaa:	60fb      	str	r3, [r7, #12]
 801eeac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801eeb0:	460b      	mov	r3, r1
 801eeb2:	4313      	orrs	r3, r2
 801eeb4:	d011      	beq.n	801eeda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801eeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eeba:	3328      	adds	r3, #40	@ 0x28
 801eebc:	2101      	movs	r1, #1
 801eebe:	4618      	mov	r0, r3
 801eec0:	f000 fbaa 	bl	801f618 <RCCEx_PLL3_Config>
 801eec4:	4603      	mov	r3, r0
 801eec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801eeca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d003      	beq.n	801eeda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801eeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eee2:	2100      	movs	r1, #0
 801eee4:	6039      	str	r1, [r7, #0]
 801eee6:	f003 0320 	and.w	r3, r3, #32
 801eeea:	607b      	str	r3, [r7, #4]
 801eeec:	e9d7 1200 	ldrd	r1, r2, [r7]
 801eef0:	460b      	mov	r3, r1
 801eef2:	4313      	orrs	r3, r2
 801eef4:	d011      	beq.n	801ef1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eefa:	3328      	adds	r3, #40	@ 0x28
 801eefc:	2102      	movs	r1, #2
 801eefe:	4618      	mov	r0, r3
 801ef00:	f000 fb8a 	bl	801f618 <RCCEx_PLL3_Config>
 801ef04:	4603      	mov	r3, r0
 801ef06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ef0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d003      	beq.n	801ef1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801ef1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d101      	bne.n	801ef26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801ef22:	2300      	movs	r3, #0
 801ef24:	e000      	b.n	801ef28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801ef26:	2301      	movs	r3, #1
}
 801ef28:	4618      	mov	r0, r3
 801ef2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801ef2e:	46bd      	mov	sp, r7
 801ef30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ef34:	58024400 	.word	0x58024400

0801ef38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801ef38:	b580      	push	{r7, lr}
 801ef3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801ef3c:	f7fe fd96 	bl	801da6c <HAL_RCC_GetHCLKFreq>
 801ef40:	4602      	mov	r2, r0
 801ef42:	4b06      	ldr	r3, [pc, #24]	@ (801ef5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801ef44:	6a1b      	ldr	r3, [r3, #32]
 801ef46:	091b      	lsrs	r3, r3, #4
 801ef48:	f003 0307 	and.w	r3, r3, #7
 801ef4c:	4904      	ldr	r1, [pc, #16]	@ (801ef60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801ef4e:	5ccb      	ldrb	r3, [r1, r3]
 801ef50:	f003 031f 	and.w	r3, r3, #31
 801ef54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801ef58:	4618      	mov	r0, r3
 801ef5a:	bd80      	pop	{r7, pc}
 801ef5c:	58024400 	.word	0x58024400
 801ef60:	0802a434 	.word	0x0802a434

0801ef64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801ef64:	b480      	push	{r7}
 801ef66:	b089      	sub	sp, #36	@ 0x24
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ef6c:	4ba1      	ldr	r3, [pc, #644]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef70:	f003 0303 	and.w	r3, r3, #3
 801ef74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801ef76:	4b9f      	ldr	r3, [pc, #636]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef7a:	0b1b      	lsrs	r3, r3, #12
 801ef7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ef80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801ef82:	4b9c      	ldr	r3, [pc, #624]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef86:	091b      	lsrs	r3, r3, #4
 801ef88:	f003 0301 	and.w	r3, r3, #1
 801ef8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801ef8e:	4b99      	ldr	r3, [pc, #612]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ef90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ef92:	08db      	lsrs	r3, r3, #3
 801ef94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ef98:	693a      	ldr	r2, [r7, #16]
 801ef9a:	fb02 f303 	mul.w	r3, r2, r3
 801ef9e:	ee07 3a90 	vmov	s15, r3
 801efa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801efaa:	697b      	ldr	r3, [r7, #20]
 801efac:	2b00      	cmp	r3, #0
 801efae:	f000 8111 	beq.w	801f1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801efb2:	69bb      	ldr	r3, [r7, #24]
 801efb4:	2b02      	cmp	r3, #2
 801efb6:	f000 8083 	beq.w	801f0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801efba:	69bb      	ldr	r3, [r7, #24]
 801efbc:	2b02      	cmp	r3, #2
 801efbe:	f200 80a1 	bhi.w	801f104 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801efc2:	69bb      	ldr	r3, [r7, #24]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d003      	beq.n	801efd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801efc8:	69bb      	ldr	r3, [r7, #24]
 801efca:	2b01      	cmp	r3, #1
 801efcc:	d056      	beq.n	801f07c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801efce:	e099      	b.n	801f104 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801efd0:	4b88      	ldr	r3, [pc, #544]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	f003 0320 	and.w	r3, r3, #32
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d02d      	beq.n	801f038 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801efdc:	4b85      	ldr	r3, [pc, #532]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	08db      	lsrs	r3, r3, #3
 801efe2:	f003 0303 	and.w	r3, r3, #3
 801efe6:	4a84      	ldr	r2, [pc, #528]	@ (801f1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801efe8:	fa22 f303 	lsr.w	r3, r2, r3
 801efec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801efee:	68bb      	ldr	r3, [r7, #8]
 801eff0:	ee07 3a90 	vmov	s15, r3
 801eff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eff8:	697b      	ldr	r3, [r7, #20]
 801effa:	ee07 3a90 	vmov	s15, r3
 801effe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f006:	4b7b      	ldr	r3, [pc, #492]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f00e:	ee07 3a90 	vmov	s15, r3
 801f012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f016:	ed97 6a03 	vldr	s12, [r7, #12]
 801f01a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f032:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f036:	e087      	b.n	801f148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f038:	697b      	ldr	r3, [r7, #20]
 801f03a:	ee07 3a90 	vmov	s15, r3
 801f03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f042:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f200 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f04a:	4b6a      	ldr	r3, [pc, #424]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f052:	ee07 3a90 	vmov	s15, r3
 801f056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f05a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f05e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f072:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f07a:	e065      	b.n	801f148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f07c:	697b      	ldr	r3, [r7, #20]
 801f07e:	ee07 3a90 	vmov	s15, r3
 801f082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f086:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f08e:	4b59      	ldr	r3, [pc, #356]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f096:	ee07 3a90 	vmov	s15, r3
 801f09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f09e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f0a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f0be:	e043      	b.n	801f148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f0c0:	697b      	ldr	r3, [r7, #20]
 801f0c2:	ee07 3a90 	vmov	s15, r3
 801f0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f0d2:	4b48      	ldr	r3, [pc, #288]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0da:	ee07 3a90 	vmov	s15, r3
 801f0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f0e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f102:	e021      	b.n	801f148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f104:	697b      	ldr	r3, [r7, #20]
 801f106:	ee07 3a90 	vmov	s15, r3
 801f10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f10e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f116:	4b37      	ldr	r3, [pc, #220]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f11e:	ee07 3a90 	vmov	s15, r3
 801f122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f126:	ed97 6a03 	vldr	s12, [r7, #12]
 801f12a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f146:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f148:	4b2a      	ldr	r3, [pc, #168]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f14c:	0a5b      	lsrs	r3, r3, #9
 801f14e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f152:	ee07 3a90 	vmov	s15, r3
 801f156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f15a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f15e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f162:	edd7 6a07 	vldr	s13, [r7, #28]
 801f166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f16e:	ee17 2a90 	vmov	r2, s15
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f176:	4b1f      	ldr	r3, [pc, #124]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f17a:	0c1b      	lsrs	r3, r3, #16
 801f17c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f180:	ee07 3a90 	vmov	s15, r3
 801f184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f188:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f18c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f190:	edd7 6a07 	vldr	s13, [r7, #28]
 801f194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f19c:	ee17 2a90 	vmov	r2, s15
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f1a4:	4b13      	ldr	r3, [pc, #76]	@ (801f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f1a8:	0e1b      	lsrs	r3, r3, #24
 801f1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f1ae:	ee07 3a90 	vmov	s15, r3
 801f1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f1be:	edd7 6a07 	vldr	s13, [r7, #28]
 801f1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f1ca:	ee17 2a90 	vmov	r2, s15
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f1d2:	e008      	b.n	801f1e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	2200      	movs	r2, #0
 801f1de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	2200      	movs	r2, #0
 801f1e4:	609a      	str	r2, [r3, #8]
}
 801f1e6:	bf00      	nop
 801f1e8:	3724      	adds	r7, #36	@ 0x24
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1f0:	4770      	bx	lr
 801f1f2:	bf00      	nop
 801f1f4:	58024400 	.word	0x58024400
 801f1f8:	03d09000 	.word	0x03d09000
 801f1fc:	46000000 	.word	0x46000000
 801f200:	4c742400 	.word	0x4c742400
 801f204:	4a742400 	.word	0x4a742400
 801f208:	4af42400 	.word	0x4af42400

0801f20c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f20c:	b480      	push	{r7}
 801f20e:	b089      	sub	sp, #36	@ 0x24
 801f210:	af00      	add	r7, sp, #0
 801f212:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f214:	4ba1      	ldr	r3, [pc, #644]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f218:	f003 0303 	and.w	r3, r3, #3
 801f21c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f21e:	4b9f      	ldr	r3, [pc, #636]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f222:	0d1b      	lsrs	r3, r3, #20
 801f224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f228:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f22a:	4b9c      	ldr	r3, [pc, #624]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f22e:	0a1b      	lsrs	r3, r3, #8
 801f230:	f003 0301 	and.w	r3, r3, #1
 801f234:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f236:	4b99      	ldr	r3, [pc, #612]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f23a:	08db      	lsrs	r3, r3, #3
 801f23c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f240:	693a      	ldr	r2, [r7, #16]
 801f242:	fb02 f303 	mul.w	r3, r2, r3
 801f246:	ee07 3a90 	vmov	s15, r3
 801f24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f24e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f252:	697b      	ldr	r3, [r7, #20]
 801f254:	2b00      	cmp	r3, #0
 801f256:	f000 8111 	beq.w	801f47c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f25a:	69bb      	ldr	r3, [r7, #24]
 801f25c:	2b02      	cmp	r3, #2
 801f25e:	f000 8083 	beq.w	801f368 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f262:	69bb      	ldr	r3, [r7, #24]
 801f264:	2b02      	cmp	r3, #2
 801f266:	f200 80a1 	bhi.w	801f3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f26a:	69bb      	ldr	r3, [r7, #24]
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d003      	beq.n	801f278 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f270:	69bb      	ldr	r3, [r7, #24]
 801f272:	2b01      	cmp	r3, #1
 801f274:	d056      	beq.n	801f324 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f276:	e099      	b.n	801f3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f278:	4b88      	ldr	r3, [pc, #544]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	f003 0320 	and.w	r3, r3, #32
 801f280:	2b00      	cmp	r3, #0
 801f282:	d02d      	beq.n	801f2e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f284:	4b85      	ldr	r3, [pc, #532]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	08db      	lsrs	r3, r3, #3
 801f28a:	f003 0303 	and.w	r3, r3, #3
 801f28e:	4a84      	ldr	r2, [pc, #528]	@ (801f4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f290:	fa22 f303 	lsr.w	r3, r2, r3
 801f294:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f296:	68bb      	ldr	r3, [r7, #8]
 801f298:	ee07 3a90 	vmov	s15, r3
 801f29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f2a0:	697b      	ldr	r3, [r7, #20]
 801f2a2:	ee07 3a90 	vmov	s15, r3
 801f2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f2ae:	4b7b      	ldr	r3, [pc, #492]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f2b6:	ee07 3a90 	vmov	s15, r3
 801f2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f2be:	ed97 6a03 	vldr	s12, [r7, #12]
 801f2c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f2de:	e087      	b.n	801f3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f2e0:	697b      	ldr	r3, [r7, #20]
 801f2e2:	ee07 3a90 	vmov	s15, r3
 801f2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f2f2:	4b6a      	ldr	r3, [pc, #424]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f2fa:	ee07 3a90 	vmov	s15, r3
 801f2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f302:	ed97 6a03 	vldr	s12, [r7, #12]
 801f306:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f322:	e065      	b.n	801f3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	ee07 3a90 	vmov	s15, r3
 801f32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f32e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f4ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f336:	4b59      	ldr	r3, [pc, #356]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f33e:	ee07 3a90 	vmov	s15, r3
 801f342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f346:	ed97 6a03 	vldr	s12, [r7, #12]
 801f34a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f366:	e043      	b.n	801f3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f368:	697b      	ldr	r3, [r7, #20]
 801f36a:	ee07 3a90 	vmov	s15, r3
 801f36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f372:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f37a:	4b48      	ldr	r3, [pc, #288]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f382:	ee07 3a90 	vmov	s15, r3
 801f386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f38a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f38e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f3aa:	e021      	b.n	801f3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f3ac:	697b      	ldr	r3, [r7, #20]
 801f3ae:	ee07 3a90 	vmov	s15, r3
 801f3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f4ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f3be:	4b37      	ldr	r3, [pc, #220]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f3c6:	ee07 3a90 	vmov	s15, r3
 801f3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 801f3d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f3ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f3f0:	4b2a      	ldr	r3, [pc, #168]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f3f4:	0a5b      	lsrs	r3, r3, #9
 801f3f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f3fa:	ee07 3a90 	vmov	s15, r3
 801f3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f406:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f40a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f416:	ee17 2a90 	vmov	r2, s15
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f41e:	4b1f      	ldr	r3, [pc, #124]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f422:	0c1b      	lsrs	r3, r3, #16
 801f424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f428:	ee07 3a90 	vmov	s15, r3
 801f42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f434:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f438:	edd7 6a07 	vldr	s13, [r7, #28]
 801f43c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f444:	ee17 2a90 	vmov	r2, s15
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f44c:	4b13      	ldr	r3, [pc, #76]	@ (801f49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f450:	0e1b      	lsrs	r3, r3, #24
 801f452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f456:	ee07 3a90 	vmov	s15, r3
 801f45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f45e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f462:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f466:	edd7 6a07 	vldr	s13, [r7, #28]
 801f46a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f46e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f472:	ee17 2a90 	vmov	r2, s15
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f47a:	e008      	b.n	801f48e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	2200      	movs	r2, #0
 801f480:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	2200      	movs	r2, #0
 801f486:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	2200      	movs	r2, #0
 801f48c:	609a      	str	r2, [r3, #8]
}
 801f48e:	bf00      	nop
 801f490:	3724      	adds	r7, #36	@ 0x24
 801f492:	46bd      	mov	sp, r7
 801f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f498:	4770      	bx	lr
 801f49a:	bf00      	nop
 801f49c:	58024400 	.word	0x58024400
 801f4a0:	03d09000 	.word	0x03d09000
 801f4a4:	46000000 	.word	0x46000000
 801f4a8:	4c742400 	.word	0x4c742400
 801f4ac:	4a742400 	.word	0x4a742400
 801f4b0:	4af42400 	.word	0x4af42400

0801f4b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f4b4:	b580      	push	{r7, lr}
 801f4b6:	b084      	sub	sp, #16
 801f4b8:	af00      	add	r7, sp, #0
 801f4ba:	6078      	str	r0, [r7, #4]
 801f4bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f4be:	2300      	movs	r3, #0
 801f4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f4c2:	4b53      	ldr	r3, [pc, #332]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4c6:	f003 0303 	and.w	r3, r3, #3
 801f4ca:	2b03      	cmp	r3, #3
 801f4cc:	d101      	bne.n	801f4d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f4ce:	2301      	movs	r3, #1
 801f4d0:	e099      	b.n	801f606 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f4d2:	4b4f      	ldr	r3, [pc, #316]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f4d4:	681b      	ldr	r3, [r3, #0]
 801f4d6:	4a4e      	ldr	r2, [pc, #312]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f4d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f4de:	f7fb fe5d 	bl	801b19c <HAL_GetTick>
 801f4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f4e4:	e008      	b.n	801f4f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f4e6:	f7fb fe59 	bl	801b19c <HAL_GetTick>
 801f4ea:	4602      	mov	r2, r0
 801f4ec:	68bb      	ldr	r3, [r7, #8]
 801f4ee:	1ad3      	subs	r3, r2, r3
 801f4f0:	2b02      	cmp	r3, #2
 801f4f2:	d901      	bls.n	801f4f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f4f4:	2303      	movs	r3, #3
 801f4f6:	e086      	b.n	801f606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f4f8:	4b45      	ldr	r3, [pc, #276]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f500:	2b00      	cmp	r3, #0
 801f502:	d1f0      	bne.n	801f4e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f504:	4b42      	ldr	r3, [pc, #264]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f508:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	031b      	lsls	r3, r3, #12
 801f512:	493f      	ldr	r1, [pc, #252]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f514:	4313      	orrs	r3, r2
 801f516:	628b      	str	r3, [r1, #40]	@ 0x28
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	685b      	ldr	r3, [r3, #4]
 801f51c:	3b01      	subs	r3, #1
 801f51e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	689b      	ldr	r3, [r3, #8]
 801f526:	3b01      	subs	r3, #1
 801f528:	025b      	lsls	r3, r3, #9
 801f52a:	b29b      	uxth	r3, r3
 801f52c:	431a      	orrs	r2, r3
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	68db      	ldr	r3, [r3, #12]
 801f532:	3b01      	subs	r3, #1
 801f534:	041b      	lsls	r3, r3, #16
 801f536:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f53a:	431a      	orrs	r2, r3
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	691b      	ldr	r3, [r3, #16]
 801f540:	3b01      	subs	r3, #1
 801f542:	061b      	lsls	r3, r3, #24
 801f544:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f548:	4931      	ldr	r1, [pc, #196]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f54a:	4313      	orrs	r3, r2
 801f54c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f54e:	4b30      	ldr	r3, [pc, #192]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	695b      	ldr	r3, [r3, #20]
 801f55a:	492d      	ldr	r1, [pc, #180]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f55c:	4313      	orrs	r3, r2
 801f55e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f560:	4b2b      	ldr	r3, [pc, #172]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f564:	f023 0220 	bic.w	r2, r3, #32
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	699b      	ldr	r3, [r3, #24]
 801f56c:	4928      	ldr	r1, [pc, #160]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f56e:	4313      	orrs	r3, r2
 801f570:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f572:	4b27      	ldr	r3, [pc, #156]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f576:	4a26      	ldr	r2, [pc, #152]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f578:	f023 0310 	bic.w	r3, r3, #16
 801f57c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f57e:	4b24      	ldr	r3, [pc, #144]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f582:	4b24      	ldr	r3, [pc, #144]	@ (801f614 <RCCEx_PLL2_Config+0x160>)
 801f584:	4013      	ands	r3, r2
 801f586:	687a      	ldr	r2, [r7, #4]
 801f588:	69d2      	ldr	r2, [r2, #28]
 801f58a:	00d2      	lsls	r2, r2, #3
 801f58c:	4920      	ldr	r1, [pc, #128]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f58e:	4313      	orrs	r3, r2
 801f590:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f592:	4b1f      	ldr	r3, [pc, #124]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f596:	4a1e      	ldr	r2, [pc, #120]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f598:	f043 0310 	orr.w	r3, r3, #16
 801f59c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f59e:	683b      	ldr	r3, [r7, #0]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d106      	bne.n	801f5b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f5a4:	4b1a      	ldr	r3, [pc, #104]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f5a8:	4a19      	ldr	r2, [pc, #100]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f5b0:	e00f      	b.n	801f5d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f5b2:	683b      	ldr	r3, [r7, #0]
 801f5b4:	2b01      	cmp	r3, #1
 801f5b6:	d106      	bne.n	801f5c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f5b8:	4b15      	ldr	r3, [pc, #84]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f5bc:	4a14      	ldr	r2, [pc, #80]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f5c4:	e005      	b.n	801f5d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f5c6:	4b12      	ldr	r3, [pc, #72]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f5ca:	4a11      	ldr	r2, [pc, #68]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f5d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f5d2:	4b0f      	ldr	r3, [pc, #60]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	4a0e      	ldr	r2, [pc, #56]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f5de:	f7fb fddd 	bl	801b19c <HAL_GetTick>
 801f5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f5e4:	e008      	b.n	801f5f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f5e6:	f7fb fdd9 	bl	801b19c <HAL_GetTick>
 801f5ea:	4602      	mov	r2, r0
 801f5ec:	68bb      	ldr	r3, [r7, #8]
 801f5ee:	1ad3      	subs	r3, r2, r3
 801f5f0:	2b02      	cmp	r3, #2
 801f5f2:	d901      	bls.n	801f5f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f5f4:	2303      	movs	r3, #3
 801f5f6:	e006      	b.n	801f606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f5f8:	4b05      	ldr	r3, [pc, #20]	@ (801f610 <RCCEx_PLL2_Config+0x15c>)
 801f5fa:	681b      	ldr	r3, [r3, #0]
 801f5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f600:	2b00      	cmp	r3, #0
 801f602:	d0f0      	beq.n	801f5e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f604:	7bfb      	ldrb	r3, [r7, #15]
}
 801f606:	4618      	mov	r0, r3
 801f608:	3710      	adds	r7, #16
 801f60a:	46bd      	mov	sp, r7
 801f60c:	bd80      	pop	{r7, pc}
 801f60e:	bf00      	nop
 801f610:	58024400 	.word	0x58024400
 801f614:	ffff0007 	.word	0xffff0007

0801f618 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f618:	b580      	push	{r7, lr}
 801f61a:	b084      	sub	sp, #16
 801f61c:	af00      	add	r7, sp, #0
 801f61e:	6078      	str	r0, [r7, #4]
 801f620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f622:	2300      	movs	r3, #0
 801f624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f626:	4b53      	ldr	r3, [pc, #332]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f62a:	f003 0303 	and.w	r3, r3, #3
 801f62e:	2b03      	cmp	r3, #3
 801f630:	d101      	bne.n	801f636 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f632:	2301      	movs	r3, #1
 801f634:	e099      	b.n	801f76a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f636:	4b4f      	ldr	r3, [pc, #316]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f638:	681b      	ldr	r3, [r3, #0]
 801f63a:	4a4e      	ldr	r2, [pc, #312]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f63c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f642:	f7fb fdab 	bl	801b19c <HAL_GetTick>
 801f646:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f648:	e008      	b.n	801f65c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f64a:	f7fb fda7 	bl	801b19c <HAL_GetTick>
 801f64e:	4602      	mov	r2, r0
 801f650:	68bb      	ldr	r3, [r7, #8]
 801f652:	1ad3      	subs	r3, r2, r3
 801f654:	2b02      	cmp	r3, #2
 801f656:	d901      	bls.n	801f65c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f658:	2303      	movs	r3, #3
 801f65a:	e086      	b.n	801f76a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f65c:	4b45      	ldr	r3, [pc, #276]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f664:	2b00      	cmp	r3, #0
 801f666:	d1f0      	bne.n	801f64a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f668:	4b42      	ldr	r3, [pc, #264]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f66c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	051b      	lsls	r3, r3, #20
 801f676:	493f      	ldr	r1, [pc, #252]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f678:	4313      	orrs	r3, r2
 801f67a:	628b      	str	r3, [r1, #40]	@ 0x28
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	685b      	ldr	r3, [r3, #4]
 801f680:	3b01      	subs	r3, #1
 801f682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	689b      	ldr	r3, [r3, #8]
 801f68a:	3b01      	subs	r3, #1
 801f68c:	025b      	lsls	r3, r3, #9
 801f68e:	b29b      	uxth	r3, r3
 801f690:	431a      	orrs	r2, r3
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	68db      	ldr	r3, [r3, #12]
 801f696:	3b01      	subs	r3, #1
 801f698:	041b      	lsls	r3, r3, #16
 801f69a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f69e:	431a      	orrs	r2, r3
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	691b      	ldr	r3, [r3, #16]
 801f6a4:	3b01      	subs	r3, #1
 801f6a6:	061b      	lsls	r3, r3, #24
 801f6a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f6ac:	4931      	ldr	r1, [pc, #196]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6ae:	4313      	orrs	r3, r2
 801f6b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f6b2:	4b30      	ldr	r3, [pc, #192]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	695b      	ldr	r3, [r3, #20]
 801f6be:	492d      	ldr	r1, [pc, #180]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6c0:	4313      	orrs	r3, r2
 801f6c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f6c4:	4b2b      	ldr	r3, [pc, #172]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	699b      	ldr	r3, [r3, #24]
 801f6d0:	4928      	ldr	r1, [pc, #160]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6d2:	4313      	orrs	r3, r2
 801f6d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f6d6:	4b27      	ldr	r3, [pc, #156]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6da:	4a26      	ldr	r2, [pc, #152]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f6e2:	4b24      	ldr	r3, [pc, #144]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f6e6:	4b24      	ldr	r3, [pc, #144]	@ (801f778 <RCCEx_PLL3_Config+0x160>)
 801f6e8:	4013      	ands	r3, r2
 801f6ea:	687a      	ldr	r2, [r7, #4]
 801f6ec:	69d2      	ldr	r2, [r2, #28]
 801f6ee:	00d2      	lsls	r2, r2, #3
 801f6f0:	4920      	ldr	r1, [pc, #128]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6f2:	4313      	orrs	r3, r2
 801f6f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f6f6:	4b1f      	ldr	r3, [pc, #124]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6fa:	4a1e      	ldr	r2, [pc, #120]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f6fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f702:	683b      	ldr	r3, [r7, #0]
 801f704:	2b00      	cmp	r3, #0
 801f706:	d106      	bne.n	801f716 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f708:	4b1a      	ldr	r3, [pc, #104]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f70c:	4a19      	ldr	r2, [pc, #100]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f70e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f714:	e00f      	b.n	801f736 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	2b01      	cmp	r3, #1
 801f71a:	d106      	bne.n	801f72a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f71c:	4b15      	ldr	r3, [pc, #84]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f720:	4a14      	ldr	r2, [pc, #80]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f722:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f726:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f728:	e005      	b.n	801f736 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f72a:	4b12      	ldr	r3, [pc, #72]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f72e:	4a11      	ldr	r2, [pc, #68]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f730:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f734:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f736:	4b0f      	ldr	r3, [pc, #60]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f738:	681b      	ldr	r3, [r3, #0]
 801f73a:	4a0e      	ldr	r2, [pc, #56]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f73c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f742:	f7fb fd2b 	bl	801b19c <HAL_GetTick>
 801f746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f748:	e008      	b.n	801f75c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f74a:	f7fb fd27 	bl	801b19c <HAL_GetTick>
 801f74e:	4602      	mov	r2, r0
 801f750:	68bb      	ldr	r3, [r7, #8]
 801f752:	1ad3      	subs	r3, r2, r3
 801f754:	2b02      	cmp	r3, #2
 801f756:	d901      	bls.n	801f75c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f758:	2303      	movs	r3, #3
 801f75a:	e006      	b.n	801f76a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f75c:	4b05      	ldr	r3, [pc, #20]	@ (801f774 <RCCEx_PLL3_Config+0x15c>)
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f764:	2b00      	cmp	r3, #0
 801f766:	d0f0      	beq.n	801f74a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f768:	7bfb      	ldrb	r3, [r7, #15]
}
 801f76a:	4618      	mov	r0, r3
 801f76c:	3710      	adds	r7, #16
 801f76e:	46bd      	mov	sp, r7
 801f770:	bd80      	pop	{r7, pc}
 801f772:	bf00      	nop
 801f774:	58024400 	.word	0x58024400
 801f778:	ffff0007 	.word	0xffff0007

0801f77c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b084      	sub	sp, #16
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d101      	bne.n	801f78e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801f78a:	2301      	movs	r3, #1
 801f78c:	e054      	b.n	801f838 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	7a5b      	ldrb	r3, [r3, #9]
 801f792:	b2db      	uxtb	r3, r3
 801f794:	2b00      	cmp	r3, #0
 801f796:	d105      	bne.n	801f7a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	2200      	movs	r2, #0
 801f79c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801f79e:	6878      	ldr	r0, [r7, #4]
 801f7a0:	f7fb fa48 	bl	801ac34 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	2202      	movs	r2, #2
 801f7a8:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	681b      	ldr	r3, [r3, #0]
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	f023 0120 	bic.w	r1, r3, #32
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	685a      	ldr	r2, [r3, #4]
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	430a      	orrs	r2, r1
 801f7be:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	681a      	ldr	r2, [r3, #0]
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	f042 0204 	orr.w	r2, r2, #4
 801f7ce:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	685b      	ldr	r3, [r3, #4]
 801f7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f7da:	2b40      	cmp	r3, #64	@ 0x40
 801f7dc:	d104      	bne.n	801f7e8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	2204      	movs	r2, #4
 801f7e2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 801f7e4:	2301      	movs	r3, #1
 801f7e6:	e027      	b.n	801f838 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 801f7e8:	f7fb fcd8 	bl	801b19c <HAL_GetTick>
 801f7ec:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f7ee:	e015      	b.n	801f81c <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801f7f0:	f7fb fcd4 	bl	801b19c <HAL_GetTick>
 801f7f4:	4602      	mov	r2, r0
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	1ad3      	subs	r3, r2, r3
 801f7fa:	2b02      	cmp	r3, #2
 801f7fc:	d90e      	bls.n	801f81c <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	685b      	ldr	r3, [r3, #4]
 801f804:	f003 0304 	and.w	r3, r3, #4
 801f808:	2b04      	cmp	r3, #4
 801f80a:	d107      	bne.n	801f81c <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	2204      	movs	r2, #4
 801f810:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	2202      	movs	r2, #2
 801f816:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 801f818:	2301      	movs	r3, #1
 801f81a:	e00d      	b.n	801f838 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	681b      	ldr	r3, [r3, #0]
 801f820:	685b      	ldr	r3, [r3, #4]
 801f822:	f003 0304 	and.w	r3, r3, #4
 801f826:	2b04      	cmp	r3, #4
 801f828:	d0e2      	beq.n	801f7f0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	2201      	movs	r2, #1
 801f82e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	2200      	movs	r2, #0
 801f834:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 801f836:	2300      	movs	r3, #0
}
 801f838:	4618      	mov	r0, r3
 801f83a:	3710      	adds	r7, #16
 801f83c:	46bd      	mov	sp, r7
 801f83e:	bd80      	pop	{r7, pc}

0801f840 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801f840:	b580      	push	{r7, lr}
 801f842:	b084      	sub	sp, #16
 801f844:	af00      	add	r7, sp, #0
 801f846:	6078      	str	r0, [r7, #4]
 801f848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f84a:	2300      	movs	r3, #0
 801f84c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	7a1b      	ldrb	r3, [r3, #8]
 801f852:	2b01      	cmp	r3, #1
 801f854:	d101      	bne.n	801f85a <HAL_RNG_GenerateRandomNumber+0x1a>
 801f856:	2302      	movs	r3, #2
 801f858:	e044      	b.n	801f8e4 <HAL_RNG_GenerateRandomNumber+0xa4>
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	2201      	movs	r2, #1
 801f85e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	7a5b      	ldrb	r3, [r3, #9]
 801f864:	b2db      	uxtb	r3, r3
 801f866:	2b01      	cmp	r3, #1
 801f868:	d133      	bne.n	801f8d2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	2202      	movs	r2, #2
 801f86e:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 801f870:	f7fb fc94 	bl	801b19c <HAL_GetTick>
 801f874:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f876:	e018      	b.n	801f8aa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801f878:	f7fb fc90 	bl	801b19c <HAL_GetTick>
 801f87c:	4602      	mov	r2, r0
 801f87e:	68bb      	ldr	r3, [r7, #8]
 801f880:	1ad3      	subs	r3, r2, r3
 801f882:	2b02      	cmp	r3, #2
 801f884:	d911      	bls.n	801f8aa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	681b      	ldr	r3, [r3, #0]
 801f88a:	685b      	ldr	r3, [r3, #4]
 801f88c:	f003 0301 	and.w	r3, r3, #1
 801f890:	2b01      	cmp	r3, #1
 801f892:	d00a      	beq.n	801f8aa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	2201      	movs	r2, #1
 801f898:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	2202      	movs	r2, #2
 801f89e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 801f8a6:	2301      	movs	r3, #1
 801f8a8:	e01c      	b.n	801f8e4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	685b      	ldr	r3, [r3, #4]
 801f8b0:	f003 0301 	and.w	r3, r3, #1
 801f8b4:	2b01      	cmp	r3, #1
 801f8b6:	d1df      	bne.n	801f878 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	689a      	ldr	r2, [r3, #8]
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	691a      	ldr	r2, [r3, #16]
 801f8c6:	683b      	ldr	r3, [r7, #0]
 801f8c8:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	2201      	movs	r2, #1
 801f8ce:	725a      	strb	r2, [r3, #9]
 801f8d0:	e004      	b.n	801f8dc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	2204      	movs	r2, #4
 801f8d6:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 801f8d8:	2301      	movs	r3, #1
 801f8da:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	2200      	movs	r2, #0
 801f8e0:	721a      	strb	r2, [r3, #8]

  return status;
 801f8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801f8e4:	4618      	mov	r0, r3
 801f8e6:	3710      	adds	r7, #16
 801f8e8:	46bd      	mov	sp, r7
 801f8ea:	bd80      	pop	{r7, pc}

0801f8ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f8ec:	b580      	push	{r7, lr}
 801f8ee:	b082      	sub	sp, #8
 801f8f0:	af00      	add	r7, sp, #0
 801f8f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	d101      	bne.n	801f8fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f8fa:	2301      	movs	r3, #1
 801f8fc:	e042      	b.n	801f984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f904:	2b00      	cmp	r3, #0
 801f906:	d106      	bne.n	801f916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	2200      	movs	r2, #0
 801f90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f910:	6878      	ldr	r0, [r7, #4]
 801f912:	f7fb f9c9 	bl	801aca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	2224      	movs	r2, #36	@ 0x24
 801f91a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	681a      	ldr	r2, [r3, #0]
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	681b      	ldr	r3, [r3, #0]
 801f928:	f022 0201 	bic.w	r2, r2, #1
 801f92c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f932:	2b00      	cmp	r3, #0
 801f934:	d002      	beq.n	801f93c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f936:	6878      	ldr	r0, [r7, #4]
 801f938:	f001 fa44 	bl	8020dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f93c:	6878      	ldr	r0, [r7, #4]
 801f93e:	f000 fcd9 	bl	80202f4 <UART_SetConfig>
 801f942:	4603      	mov	r3, r0
 801f944:	2b01      	cmp	r3, #1
 801f946:	d101      	bne.n	801f94c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f948:	2301      	movs	r3, #1
 801f94a:	e01b      	b.n	801f984 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	685a      	ldr	r2, [r3, #4]
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	681b      	ldr	r3, [r3, #0]
 801f956:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f95a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	681b      	ldr	r3, [r3, #0]
 801f960:	689a      	ldr	r2, [r3, #8]
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f96a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	681a      	ldr	r2, [r3, #0]
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	f042 0201 	orr.w	r2, r2, #1
 801f97a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f97c:	6878      	ldr	r0, [r7, #4]
 801f97e:	f001 fac3 	bl	8020f08 <UART_CheckIdleState>
 801f982:	4603      	mov	r3, r0
}
 801f984:	4618      	mov	r0, r3
 801f986:	3708      	adds	r7, #8
 801f988:	46bd      	mov	sp, r7
 801f98a:	bd80      	pop	{r7, pc}

0801f98c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f98c:	b580      	push	{r7, lr}
 801f98e:	b08a      	sub	sp, #40	@ 0x28
 801f990:	af02      	add	r7, sp, #8
 801f992:	60f8      	str	r0, [r7, #12]
 801f994:	60b9      	str	r1, [r7, #8]
 801f996:	603b      	str	r3, [r7, #0]
 801f998:	4613      	mov	r3, r2
 801f99a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f99c:	68fb      	ldr	r3, [r7, #12]
 801f99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f9a2:	2b20      	cmp	r3, #32
 801f9a4:	d17b      	bne.n	801fa9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801f9a6:	68bb      	ldr	r3, [r7, #8]
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d002      	beq.n	801f9b2 <HAL_UART_Transmit+0x26>
 801f9ac:	88fb      	ldrh	r3, [r7, #6]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d101      	bne.n	801f9b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801f9b2:	2301      	movs	r3, #1
 801f9b4:	e074      	b.n	801faa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	2200      	movs	r2, #0
 801f9ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	2221      	movs	r2, #33	@ 0x21
 801f9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f9c6:	f7fb fbe9 	bl	801b19c <HAL_GetTick>
 801f9ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f9cc:	68fb      	ldr	r3, [r7, #12]
 801f9ce:	88fa      	ldrh	r2, [r7, #6]
 801f9d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801f9d4:	68fb      	ldr	r3, [r7, #12]
 801f9d6:	88fa      	ldrh	r2, [r7, #6]
 801f9d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f9dc:	68fb      	ldr	r3, [r7, #12]
 801f9de:	689b      	ldr	r3, [r3, #8]
 801f9e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f9e4:	d108      	bne.n	801f9f8 <HAL_UART_Transmit+0x6c>
 801f9e6:	68fb      	ldr	r3, [r7, #12]
 801f9e8:	691b      	ldr	r3, [r3, #16]
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	d104      	bne.n	801f9f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801f9ee:	2300      	movs	r3, #0
 801f9f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f9f2:	68bb      	ldr	r3, [r7, #8]
 801f9f4:	61bb      	str	r3, [r7, #24]
 801f9f6:	e003      	b.n	801fa00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801f9f8:	68bb      	ldr	r3, [r7, #8]
 801f9fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f9fc:	2300      	movs	r3, #0
 801f9fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801fa00:	e030      	b.n	801fa64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801fa02:	683b      	ldr	r3, [r7, #0]
 801fa04:	9300      	str	r3, [sp, #0]
 801fa06:	697b      	ldr	r3, [r7, #20]
 801fa08:	2200      	movs	r2, #0
 801fa0a:	2180      	movs	r1, #128	@ 0x80
 801fa0c:	68f8      	ldr	r0, [r7, #12]
 801fa0e:	f001 fb25 	bl	802105c <UART_WaitOnFlagUntilTimeout>
 801fa12:	4603      	mov	r3, r0
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	d005      	beq.n	801fa24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801fa18:	68fb      	ldr	r3, [r7, #12]
 801fa1a:	2220      	movs	r2, #32
 801fa1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801fa20:	2303      	movs	r3, #3
 801fa22:	e03d      	b.n	801faa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801fa24:	69fb      	ldr	r3, [r7, #28]
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d10b      	bne.n	801fa42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801fa2a:	69bb      	ldr	r3, [r7, #24]
 801fa2c:	881b      	ldrh	r3, [r3, #0]
 801fa2e:	461a      	mov	r2, r3
 801fa30:	68fb      	ldr	r3, [r7, #12]
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801fa38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801fa3a:	69bb      	ldr	r3, [r7, #24]
 801fa3c:	3302      	adds	r3, #2
 801fa3e:	61bb      	str	r3, [r7, #24]
 801fa40:	e007      	b.n	801fa52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801fa42:	69fb      	ldr	r3, [r7, #28]
 801fa44:	781a      	ldrb	r2, [r3, #0]
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	681b      	ldr	r3, [r3, #0]
 801fa4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801fa4c:	69fb      	ldr	r3, [r7, #28]
 801fa4e:	3301      	adds	r3, #1
 801fa50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801fa58:	b29b      	uxth	r3, r3
 801fa5a:	3b01      	subs	r3, #1
 801fa5c:	b29a      	uxth	r2, r3
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801fa64:	68fb      	ldr	r3, [r7, #12]
 801fa66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801fa6a:	b29b      	uxth	r3, r3
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d1c8      	bne.n	801fa02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801fa70:	683b      	ldr	r3, [r7, #0]
 801fa72:	9300      	str	r3, [sp, #0]
 801fa74:	697b      	ldr	r3, [r7, #20]
 801fa76:	2200      	movs	r2, #0
 801fa78:	2140      	movs	r1, #64	@ 0x40
 801fa7a:	68f8      	ldr	r0, [r7, #12]
 801fa7c:	f001 faee 	bl	802105c <UART_WaitOnFlagUntilTimeout>
 801fa80:	4603      	mov	r3, r0
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d005      	beq.n	801fa92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	2220      	movs	r2, #32
 801fa8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801fa8e:	2303      	movs	r3, #3
 801fa90:	e006      	b.n	801faa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	2220      	movs	r2, #32
 801fa96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801fa9a:	2300      	movs	r3, #0
 801fa9c:	e000      	b.n	801faa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801fa9e:	2302      	movs	r3, #2
  }
}
 801faa0:	4618      	mov	r0, r3
 801faa2:	3720      	adds	r7, #32
 801faa4:	46bd      	mov	sp, r7
 801faa6:	bd80      	pop	{r7, pc}

0801faa8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801faa8:	b580      	push	{r7, lr}
 801faaa:	b08a      	sub	sp, #40	@ 0x28
 801faac:	af00      	add	r7, sp, #0
 801faae:	60f8      	str	r0, [r7, #12]
 801fab0:	60b9      	str	r1, [r7, #8]
 801fab2:	4613      	mov	r3, r2
 801fab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801fab6:	68fb      	ldr	r3, [r7, #12]
 801fab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801fabc:	2b20      	cmp	r3, #32
 801fabe:	d137      	bne.n	801fb30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801fac0:	68bb      	ldr	r3, [r7, #8]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d002      	beq.n	801facc <HAL_UART_Receive_IT+0x24>
 801fac6:	88fb      	ldrh	r3, [r7, #6]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d101      	bne.n	801fad0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801facc:	2301      	movs	r3, #1
 801face:	e030      	b.n	801fb32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	2200      	movs	r2, #0
 801fad4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	681b      	ldr	r3, [r3, #0]
 801fada:	4a18      	ldr	r2, [pc, #96]	@ (801fb3c <HAL_UART_Receive_IT+0x94>)
 801fadc:	4293      	cmp	r3, r2
 801fade:	d01f      	beq.n	801fb20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801fae0:	68fb      	ldr	r3, [r7, #12]
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	685b      	ldr	r3, [r3, #4]
 801fae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801faea:	2b00      	cmp	r3, #0
 801faec:	d018      	beq.n	801fb20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801faf4:	697b      	ldr	r3, [r7, #20]
 801faf6:	e853 3f00 	ldrex	r3, [r3]
 801fafa:	613b      	str	r3, [r7, #16]
   return(result);
 801fafc:	693b      	ldr	r3, [r7, #16]
 801fafe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801fb02:	627b      	str	r3, [r7, #36]	@ 0x24
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	461a      	mov	r2, r3
 801fb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb0c:	623b      	str	r3, [r7, #32]
 801fb0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb10:	69f9      	ldr	r1, [r7, #28]
 801fb12:	6a3a      	ldr	r2, [r7, #32]
 801fb14:	e841 2300 	strex	r3, r2, [r1]
 801fb18:	61bb      	str	r3, [r7, #24]
   return(result);
 801fb1a:	69bb      	ldr	r3, [r7, #24]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d1e6      	bne.n	801faee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801fb20:	88fb      	ldrh	r3, [r7, #6]
 801fb22:	461a      	mov	r2, r3
 801fb24:	68b9      	ldr	r1, [r7, #8]
 801fb26:	68f8      	ldr	r0, [r7, #12]
 801fb28:	f001 fb06 	bl	8021138 <UART_Start_Receive_IT>
 801fb2c:	4603      	mov	r3, r0
 801fb2e:	e000      	b.n	801fb32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801fb30:	2302      	movs	r3, #2
  }
}
 801fb32:	4618      	mov	r0, r3
 801fb34:	3728      	adds	r7, #40	@ 0x28
 801fb36:	46bd      	mov	sp, r7
 801fb38:	bd80      	pop	{r7, pc}
 801fb3a:	bf00      	nop
 801fb3c:	58000c00 	.word	0x58000c00

0801fb40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801fb40:	b580      	push	{r7, lr}
 801fb42:	b0ba      	sub	sp, #232	@ 0xe8
 801fb44:	af00      	add	r7, sp, #0
 801fb46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	69db      	ldr	r3, [r3, #28]
 801fb4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	689b      	ldr	r3, [r3, #8]
 801fb62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801fb66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801fb6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801fb6e:	4013      	ands	r3, r2
 801fb70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801fb74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d11b      	bne.n	801fbb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801fb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fb80:	f003 0320 	and.w	r3, r3, #32
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d015      	beq.n	801fbb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801fb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fb8c:	f003 0320 	and.w	r3, r3, #32
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	d105      	bne.n	801fba0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801fb94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801fb98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d009      	beq.n	801fbb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	f000 8377 	beq.w	8020298 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fbae:	6878      	ldr	r0, [r7, #4]
 801fbb0:	4798      	blx	r3
      }
      return;
 801fbb2:	e371      	b.n	8020298 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801fbb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	f000 8123 	beq.w	801fe04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801fbbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801fbc2:	4b8d      	ldr	r3, [pc, #564]	@ (801fdf8 <HAL_UART_IRQHandler+0x2b8>)
 801fbc4:	4013      	ands	r3, r2
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	d106      	bne.n	801fbd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801fbca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801fbce:	4b8b      	ldr	r3, [pc, #556]	@ (801fdfc <HAL_UART_IRQHandler+0x2bc>)
 801fbd0:	4013      	ands	r3, r2
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	f000 8116 	beq.w	801fe04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801fbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fbdc:	f003 0301 	and.w	r3, r3, #1
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d011      	beq.n	801fc08 <HAL_UART_IRQHandler+0xc8>
 801fbe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fbe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d00b      	beq.n	801fc08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	2201      	movs	r2, #1
 801fbf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fbfe:	f043 0201 	orr.w	r2, r3, #1
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801fc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fc0c:	f003 0302 	and.w	r3, r3, #2
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	d011      	beq.n	801fc38 <HAL_UART_IRQHandler+0xf8>
 801fc14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801fc18:	f003 0301 	and.w	r3, r3, #1
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d00b      	beq.n	801fc38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	2202      	movs	r2, #2
 801fc26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fc2e:	f043 0204 	orr.w	r2, r3, #4
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801fc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fc3c:	f003 0304 	and.w	r3, r3, #4
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d011      	beq.n	801fc68 <HAL_UART_IRQHandler+0x128>
 801fc44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801fc48:	f003 0301 	and.w	r3, r3, #1
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d00b      	beq.n	801fc68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	2204      	movs	r2, #4
 801fc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fc5e:	f043 0202 	orr.w	r2, r3, #2
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801fc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fc6c:	f003 0308 	and.w	r3, r3, #8
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d017      	beq.n	801fca4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801fc74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fc78:	f003 0320 	and.w	r3, r3, #32
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d105      	bne.n	801fc8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801fc80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801fc84:	4b5c      	ldr	r3, [pc, #368]	@ (801fdf8 <HAL_UART_IRQHandler+0x2b8>)
 801fc86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d00b      	beq.n	801fca4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	2208      	movs	r2, #8
 801fc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fc9a:	f043 0208 	orr.w	r2, r3, #8
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801fca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d012      	beq.n	801fcd6 <HAL_UART_IRQHandler+0x196>
 801fcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fcb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d00c      	beq.n	801fcd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801fcc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fccc:	f043 0220 	orr.w	r2, r3, #32
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	f000 82dd 	beq.w	802029c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801fce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fce6:	f003 0320 	and.w	r3, r3, #32
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d013      	beq.n	801fd16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801fcee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fcf2:	f003 0320 	and.w	r3, r3, #32
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d105      	bne.n	801fd06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801fcfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801fcfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d007      	beq.n	801fd16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d003      	beq.n	801fd16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fd12:	6878      	ldr	r0, [r7, #4]
 801fd14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fd1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	689b      	ldr	r3, [r3, #8]
 801fd26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fd2a:	2b40      	cmp	r3, #64	@ 0x40
 801fd2c:	d005      	beq.n	801fd3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801fd2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801fd32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	d054      	beq.n	801fde4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801fd3a:	6878      	ldr	r0, [r7, #4]
 801fd3c:	f001 fb1e 	bl	802137c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	689b      	ldr	r3, [r3, #8]
 801fd46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fd4a:	2b40      	cmp	r3, #64	@ 0x40
 801fd4c:	d146      	bne.n	801fddc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	681b      	ldr	r3, [r3, #0]
 801fd52:	3308      	adds	r3, #8
 801fd54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801fd5c:	e853 3f00 	ldrex	r3, [r3]
 801fd60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801fd64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801fd68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801fd6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	3308      	adds	r3, #8
 801fd76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801fd7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801fd7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801fd86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801fd8a:	e841 2300 	strex	r3, r2, [r1]
 801fd8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801fd92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d1d9      	bne.n	801fd4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d017      	beq.n	801fdd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fdaa:	4a15      	ldr	r2, [pc, #84]	@ (801fe00 <HAL_UART_IRQHandler+0x2c0>)
 801fdac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fdb4:	4618      	mov	r0, r3
 801fdb6:	f7fb fe4b 	bl	801ba50 <HAL_DMA_Abort_IT>
 801fdba:	4603      	mov	r3, r0
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d019      	beq.n	801fdf4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fdc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fdc8:	687a      	ldr	r2, [r7, #4]
 801fdca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801fdce:	4610      	mov	r0, r2
 801fdd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fdd2:	e00f      	b.n	801fdf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801fdd4:	6878      	ldr	r0, [r7, #4]
 801fdd6:	f000 fa77 	bl	80202c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fdda:	e00b      	b.n	801fdf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801fddc:	6878      	ldr	r0, [r7, #4]
 801fdde:	f000 fa73 	bl	80202c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fde2:	e007      	b.n	801fdf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801fde4:	6878      	ldr	r0, [r7, #4]
 801fde6:	f000 fa6f 	bl	80202c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	2200      	movs	r2, #0
 801fdee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801fdf2:	e253      	b.n	802029c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fdf4:	bf00      	nop
    return;
 801fdf6:	e251      	b.n	802029c <HAL_UART_IRQHandler+0x75c>
 801fdf8:	10000001 	.word	0x10000001
 801fdfc:	04000120 	.word	0x04000120
 801fe00:	08021449 	.word	0x08021449

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fe08:	2b01      	cmp	r3, #1
 801fe0a:	f040 81e7 	bne.w	80201dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801fe0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801fe12:	f003 0310 	and.w	r3, r3, #16
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	f000 81e0 	beq.w	80201dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801fe1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801fe20:	f003 0310 	and.w	r3, r3, #16
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	f000 81d9 	beq.w	80201dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	2210      	movs	r2, #16
 801fe30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	681b      	ldr	r3, [r3, #0]
 801fe36:	689b      	ldr	r3, [r3, #8]
 801fe38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fe3c:	2b40      	cmp	r3, #64	@ 0x40
 801fe3e:	f040 8151 	bne.w	80200e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	4a96      	ldr	r2, [pc, #600]	@ (80200a4 <HAL_UART_IRQHandler+0x564>)
 801fe4c:	4293      	cmp	r3, r2
 801fe4e:	d068      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	4a93      	ldr	r2, [pc, #588]	@ (80200a8 <HAL_UART_IRQHandler+0x568>)
 801fe5a:	4293      	cmp	r3, r2
 801fe5c:	d061      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	4a91      	ldr	r2, [pc, #580]	@ (80200ac <HAL_UART_IRQHandler+0x56c>)
 801fe68:	4293      	cmp	r3, r2
 801fe6a:	d05a      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	4a8e      	ldr	r2, [pc, #568]	@ (80200b0 <HAL_UART_IRQHandler+0x570>)
 801fe76:	4293      	cmp	r3, r2
 801fe78:	d053      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	4a8c      	ldr	r2, [pc, #560]	@ (80200b4 <HAL_UART_IRQHandler+0x574>)
 801fe84:	4293      	cmp	r3, r2
 801fe86:	d04c      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	4a89      	ldr	r2, [pc, #548]	@ (80200b8 <HAL_UART_IRQHandler+0x578>)
 801fe92:	4293      	cmp	r3, r2
 801fe94:	d045      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	4a87      	ldr	r2, [pc, #540]	@ (80200bc <HAL_UART_IRQHandler+0x57c>)
 801fea0:	4293      	cmp	r3, r2
 801fea2:	d03e      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	4a84      	ldr	r2, [pc, #528]	@ (80200c0 <HAL_UART_IRQHandler+0x580>)
 801feae:	4293      	cmp	r3, r2
 801feb0:	d037      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	4a82      	ldr	r2, [pc, #520]	@ (80200c4 <HAL_UART_IRQHandler+0x584>)
 801febc:	4293      	cmp	r3, r2
 801febe:	d030      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	4a7f      	ldr	r2, [pc, #508]	@ (80200c8 <HAL_UART_IRQHandler+0x588>)
 801feca:	4293      	cmp	r3, r2
 801fecc:	d029      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	4a7d      	ldr	r2, [pc, #500]	@ (80200cc <HAL_UART_IRQHandler+0x58c>)
 801fed8:	4293      	cmp	r3, r2
 801feda:	d022      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	4a7a      	ldr	r2, [pc, #488]	@ (80200d0 <HAL_UART_IRQHandler+0x590>)
 801fee6:	4293      	cmp	r3, r2
 801fee8:	d01b      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fef0:	681b      	ldr	r3, [r3, #0]
 801fef2:	4a78      	ldr	r2, [pc, #480]	@ (80200d4 <HAL_UART_IRQHandler+0x594>)
 801fef4:	4293      	cmp	r3, r2
 801fef6:	d014      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fefe:	681b      	ldr	r3, [r3, #0]
 801ff00:	4a75      	ldr	r2, [pc, #468]	@ (80200d8 <HAL_UART_IRQHandler+0x598>)
 801ff02:	4293      	cmp	r3, r2
 801ff04:	d00d      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	4a73      	ldr	r2, [pc, #460]	@ (80200dc <HAL_UART_IRQHandler+0x59c>)
 801ff10:	4293      	cmp	r3, r2
 801ff12:	d006      	beq.n	801ff22 <HAL_UART_IRQHandler+0x3e2>
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	4a70      	ldr	r2, [pc, #448]	@ (80200e0 <HAL_UART_IRQHandler+0x5a0>)
 801ff1e:	4293      	cmp	r3, r2
 801ff20:	d106      	bne.n	801ff30 <HAL_UART_IRQHandler+0x3f0>
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	685b      	ldr	r3, [r3, #4]
 801ff2c:	b29b      	uxth	r3, r3
 801ff2e:	e005      	b.n	801ff3c <HAL_UART_IRQHandler+0x3fc>
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	685b      	ldr	r3, [r3, #4]
 801ff3a:	b29b      	uxth	r3, r3
 801ff3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801ff40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	f000 81ab 	beq.w	80202a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ff50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801ff54:	429a      	cmp	r2, r3
 801ff56:	f080 81a3 	bcs.w	80202a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ff5a:	687b      	ldr	r3, [r7, #4]
 801ff5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801ff60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ff6a:	69db      	ldr	r3, [r3, #28]
 801ff6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ff70:	f000 8087 	beq.w	8020082 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	681b      	ldr	r3, [r3, #0]
 801ff78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ff80:	e853 3f00 	ldrex	r3, [r3]
 801ff84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801ff88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ff8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ff90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	461a      	mov	r2, r3
 801ff9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801ff9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801ffa2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ffa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801ffaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801ffae:	e841 2300 	strex	r3, r2, [r1]
 801ffb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801ffb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801ffba:	2b00      	cmp	r3, #0
 801ffbc:	d1da      	bne.n	801ff74 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	3308      	adds	r3, #8
 801ffc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ffc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ffc8:	e853 3f00 	ldrex	r3, [r3]
 801ffcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801ffce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ffd0:	f023 0301 	bic.w	r3, r3, #1
 801ffd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	3308      	adds	r3, #8
 801ffde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801ffe2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801ffe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ffe8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801ffea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801ffee:	e841 2300 	strex	r3, r2, [r1]
 801fff2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801fff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d1e1      	bne.n	801ffbe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fffa:	687b      	ldr	r3, [r7, #4]
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	3308      	adds	r3, #8
 8020000:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020004:	e853 3f00 	ldrex	r3, [r3]
 8020008:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802000a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802000c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	3308      	adds	r3, #8
 802001a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802001e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8020020:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020022:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8020024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8020026:	e841 2300 	strex	r3, r2, [r1]
 802002a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 802002c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802002e:	2b00      	cmp	r3, #0
 8020030:	d1e3      	bne.n	801fffa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	2220      	movs	r2, #32
 8020036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	2200      	movs	r2, #0
 802003e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	681b      	ldr	r3, [r3, #0]
 8020044:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020048:	e853 3f00 	ldrex	r3, [r3]
 802004c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 802004e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020050:	f023 0310 	bic.w	r3, r3, #16
 8020054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	461a      	mov	r2, r3
 802005e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8020062:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020064:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020066:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8020068:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802006a:	e841 2300 	strex	r3, r2, [r1]
 802006e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8020070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020072:	2b00      	cmp	r3, #0
 8020074:	d1e4      	bne.n	8020040 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802007c:	4618      	mov	r0, r3
 802007e:	f7fb f9c9 	bl	801b414 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	2202      	movs	r2, #2
 8020086:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 802008e:	687b      	ldr	r3, [r7, #4]
 8020090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8020094:	b29b      	uxth	r3, r3
 8020096:	1ad3      	subs	r3, r2, r3
 8020098:	b29b      	uxth	r3, r3
 802009a:	4619      	mov	r1, r3
 802009c:	6878      	ldr	r0, [r7, #4]
 802009e:	f000 f91d 	bl	80202dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80200a2:	e0fd      	b.n	80202a0 <HAL_UART_IRQHandler+0x760>
 80200a4:	40020010 	.word	0x40020010
 80200a8:	40020028 	.word	0x40020028
 80200ac:	40020040 	.word	0x40020040
 80200b0:	40020058 	.word	0x40020058
 80200b4:	40020070 	.word	0x40020070
 80200b8:	40020088 	.word	0x40020088
 80200bc:	400200a0 	.word	0x400200a0
 80200c0:	400200b8 	.word	0x400200b8
 80200c4:	40020410 	.word	0x40020410
 80200c8:	40020428 	.word	0x40020428
 80200cc:	40020440 	.word	0x40020440
 80200d0:	40020458 	.word	0x40020458
 80200d4:	40020470 	.word	0x40020470
 80200d8:	40020488 	.word	0x40020488
 80200dc:	400204a0 	.word	0x400204a0
 80200e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80200f0:	b29b      	uxth	r3, r3
 80200f2:	1ad3      	subs	r3, r2, r3
 80200f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80200fe:	b29b      	uxth	r3, r3
 8020100:	2b00      	cmp	r3, #0
 8020102:	f000 80cf 	beq.w	80202a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8020106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802010a:	2b00      	cmp	r3, #0
 802010c:	f000 80ca 	beq.w	80202a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020118:	e853 3f00 	ldrex	r3, [r3]
 802011c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802011e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	681b      	ldr	r3, [r3, #0]
 802012c:	461a      	mov	r2, r3
 802012e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8020132:	647b      	str	r3, [r7, #68]	@ 0x44
 8020134:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802013a:	e841 2300 	strex	r3, r2, [r1]
 802013e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8020140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020142:	2b00      	cmp	r3, #0
 8020144:	d1e4      	bne.n	8020110 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	3308      	adds	r3, #8
 802014c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802014e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020150:	e853 3f00 	ldrex	r3, [r3]
 8020154:	623b      	str	r3, [r7, #32]
   return(result);
 8020156:	6a3a      	ldr	r2, [r7, #32]
 8020158:	4b55      	ldr	r3, [pc, #340]	@ (80202b0 <HAL_UART_IRQHandler+0x770>)
 802015a:	4013      	ands	r3, r2
 802015c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	3308      	adds	r3, #8
 8020166:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 802016a:	633a      	str	r2, [r7, #48]	@ 0x30
 802016c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802016e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020172:	e841 2300 	strex	r3, r2, [r1]
 8020176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802017a:	2b00      	cmp	r3, #0
 802017c:	d1e3      	bne.n	8020146 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802017e:	687b      	ldr	r3, [r7, #4]
 8020180:	2220      	movs	r2, #32
 8020182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020186:	687b      	ldr	r3, [r7, #4]
 8020188:	2200      	movs	r2, #0
 802018a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	2200      	movs	r2, #0
 8020190:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020198:	693b      	ldr	r3, [r7, #16]
 802019a:	e853 3f00 	ldrex	r3, [r3]
 802019e:	60fb      	str	r3, [r7, #12]
   return(result);
 80201a0:	68fb      	ldr	r3, [r7, #12]
 80201a2:	f023 0310 	bic.w	r3, r3, #16
 80201a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	461a      	mov	r2, r3
 80201b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80201b4:	61fb      	str	r3, [r7, #28]
 80201b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80201b8:	69b9      	ldr	r1, [r7, #24]
 80201ba:	69fa      	ldr	r2, [r7, #28]
 80201bc:	e841 2300 	strex	r3, r2, [r1]
 80201c0:	617b      	str	r3, [r7, #20]
   return(result);
 80201c2:	697b      	ldr	r3, [r7, #20]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d1e4      	bne.n	8020192 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	2202      	movs	r2, #2
 80201cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80201ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80201d2:	4619      	mov	r1, r3
 80201d4:	6878      	ldr	r0, [r7, #4]
 80201d6:	f000 f881 	bl	80202dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80201da:	e063      	b.n	80202a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80201dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80201e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d00e      	beq.n	8020206 <HAL_UART_IRQHandler+0x6c6>
 80201e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80201ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d008      	beq.n	8020206 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80201fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80201fe:	6878      	ldr	r0, [r7, #4]
 8020200:	f001 fe80 	bl	8021f04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8020204:	e051      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8020206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802020a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802020e:	2b00      	cmp	r3, #0
 8020210:	d014      	beq.n	802023c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8020212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802021a:	2b00      	cmp	r3, #0
 802021c:	d105      	bne.n	802022a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 802021e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020222:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020226:	2b00      	cmp	r3, #0
 8020228:	d008      	beq.n	802023c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802022e:	2b00      	cmp	r3, #0
 8020230:	d03a      	beq.n	80202a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020236:	6878      	ldr	r0, [r7, #4]
 8020238:	4798      	blx	r3
    }
    return;
 802023a:	e035      	b.n	80202a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 802023c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8020240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020244:	2b00      	cmp	r3, #0
 8020246:	d009      	beq.n	802025c <HAL_UART_IRQHandler+0x71c>
 8020248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802024c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020250:	2b00      	cmp	r3, #0
 8020252:	d003      	beq.n	802025c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8020254:	6878      	ldr	r0, [r7, #4]
 8020256:	f001 f90d 	bl	8021474 <UART_EndTransmit_IT>
    return;
 802025a:	e026      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 802025c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8020260:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020264:	2b00      	cmp	r3, #0
 8020266:	d009      	beq.n	802027c <HAL_UART_IRQHandler+0x73c>
 8020268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802026c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8020270:	2b00      	cmp	r3, #0
 8020272:	d003      	beq.n	802027c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8020274:	6878      	ldr	r0, [r7, #4]
 8020276:	f001 fe59 	bl	8021f2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802027a:	e016      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 802027c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8020280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8020284:	2b00      	cmp	r3, #0
 8020286:	d010      	beq.n	80202aa <HAL_UART_IRQHandler+0x76a>
 8020288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802028c:	2b00      	cmp	r3, #0
 802028e:	da0c      	bge.n	80202aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8020290:	6878      	ldr	r0, [r7, #4]
 8020292:	f001 fe41 	bl	8021f18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8020296:	e008      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
      return;
 8020298:	bf00      	nop
 802029a:	e006      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
    return;
 802029c:	bf00      	nop
 802029e:	e004      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
      return;
 80202a0:	bf00      	nop
 80202a2:	e002      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
      return;
 80202a4:	bf00      	nop
 80202a6:	e000      	b.n	80202aa <HAL_UART_IRQHandler+0x76a>
    return;
 80202a8:	bf00      	nop
  }
}
 80202aa:	37e8      	adds	r7, #232	@ 0xe8
 80202ac:	46bd      	mov	sp, r7
 80202ae:	bd80      	pop	{r7, pc}
 80202b0:	effffffe 	.word	0xeffffffe

080202b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80202b4:	b480      	push	{r7}
 80202b6:	b083      	sub	sp, #12
 80202b8:	af00      	add	r7, sp, #0
 80202ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80202bc:	bf00      	nop
 80202be:	370c      	adds	r7, #12
 80202c0:	46bd      	mov	sp, r7
 80202c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202c6:	4770      	bx	lr

080202c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80202c8:	b480      	push	{r7}
 80202ca:	b083      	sub	sp, #12
 80202cc:	af00      	add	r7, sp, #0
 80202ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80202d0:	bf00      	nop
 80202d2:	370c      	adds	r7, #12
 80202d4:	46bd      	mov	sp, r7
 80202d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202da:	4770      	bx	lr

080202dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80202dc:	b480      	push	{r7}
 80202de:	b083      	sub	sp, #12
 80202e0:	af00      	add	r7, sp, #0
 80202e2:	6078      	str	r0, [r7, #4]
 80202e4:	460b      	mov	r3, r1
 80202e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80202e8:	bf00      	nop
 80202ea:	370c      	adds	r7, #12
 80202ec:	46bd      	mov	sp, r7
 80202ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f2:	4770      	bx	lr

080202f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80202f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80202f8:	b092      	sub	sp, #72	@ 0x48
 80202fa:	af00      	add	r7, sp, #0
 80202fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80202fe:	2300      	movs	r3, #0
 8020300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020304:	697b      	ldr	r3, [r7, #20]
 8020306:	689a      	ldr	r2, [r3, #8]
 8020308:	697b      	ldr	r3, [r7, #20]
 802030a:	691b      	ldr	r3, [r3, #16]
 802030c:	431a      	orrs	r2, r3
 802030e:	697b      	ldr	r3, [r7, #20]
 8020310:	695b      	ldr	r3, [r3, #20]
 8020312:	431a      	orrs	r2, r3
 8020314:	697b      	ldr	r3, [r7, #20]
 8020316:	69db      	ldr	r3, [r3, #28]
 8020318:	4313      	orrs	r3, r2
 802031a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802031c:	697b      	ldr	r3, [r7, #20]
 802031e:	681b      	ldr	r3, [r3, #0]
 8020320:	681a      	ldr	r2, [r3, #0]
 8020322:	4bbe      	ldr	r3, [pc, #760]	@ (802061c <UART_SetConfig+0x328>)
 8020324:	4013      	ands	r3, r2
 8020326:	697a      	ldr	r2, [r7, #20]
 8020328:	6812      	ldr	r2, [r2, #0]
 802032a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802032c:	430b      	orrs	r3, r1
 802032e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020330:	697b      	ldr	r3, [r7, #20]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	685b      	ldr	r3, [r3, #4]
 8020336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802033a:	697b      	ldr	r3, [r7, #20]
 802033c:	68da      	ldr	r2, [r3, #12]
 802033e:	697b      	ldr	r3, [r7, #20]
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	430a      	orrs	r2, r1
 8020344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8020346:	697b      	ldr	r3, [r7, #20]
 8020348:	699b      	ldr	r3, [r3, #24]
 802034a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802034c:	697b      	ldr	r3, [r7, #20]
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	4ab3      	ldr	r2, [pc, #716]	@ (8020620 <UART_SetConfig+0x32c>)
 8020352:	4293      	cmp	r3, r2
 8020354:	d004      	beq.n	8020360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8020356:	697b      	ldr	r3, [r7, #20]
 8020358:	6a1b      	ldr	r3, [r3, #32]
 802035a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802035c:	4313      	orrs	r3, r2
 802035e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020360:	697b      	ldr	r3, [r7, #20]
 8020362:	681b      	ldr	r3, [r3, #0]
 8020364:	689a      	ldr	r2, [r3, #8]
 8020366:	4baf      	ldr	r3, [pc, #700]	@ (8020624 <UART_SetConfig+0x330>)
 8020368:	4013      	ands	r3, r2
 802036a:	697a      	ldr	r2, [r7, #20]
 802036c:	6812      	ldr	r2, [r2, #0]
 802036e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020370:	430b      	orrs	r3, r1
 8020372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8020374:	697b      	ldr	r3, [r7, #20]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802037a:	f023 010f 	bic.w	r1, r3, #15
 802037e:	697b      	ldr	r3, [r7, #20]
 8020380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020382:	697b      	ldr	r3, [r7, #20]
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	430a      	orrs	r2, r1
 8020388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802038a:	697b      	ldr	r3, [r7, #20]
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	4aa6      	ldr	r2, [pc, #664]	@ (8020628 <UART_SetConfig+0x334>)
 8020390:	4293      	cmp	r3, r2
 8020392:	d177      	bne.n	8020484 <UART_SetConfig+0x190>
 8020394:	4ba5      	ldr	r3, [pc, #660]	@ (802062c <UART_SetConfig+0x338>)
 8020396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802039c:	2b28      	cmp	r3, #40	@ 0x28
 802039e:	d86d      	bhi.n	802047c <UART_SetConfig+0x188>
 80203a0:	a201      	add	r2, pc, #4	@ (adr r2, 80203a8 <UART_SetConfig+0xb4>)
 80203a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203a6:	bf00      	nop
 80203a8:	0802044d 	.word	0x0802044d
 80203ac:	0802047d 	.word	0x0802047d
 80203b0:	0802047d 	.word	0x0802047d
 80203b4:	0802047d 	.word	0x0802047d
 80203b8:	0802047d 	.word	0x0802047d
 80203bc:	0802047d 	.word	0x0802047d
 80203c0:	0802047d 	.word	0x0802047d
 80203c4:	0802047d 	.word	0x0802047d
 80203c8:	08020455 	.word	0x08020455
 80203cc:	0802047d 	.word	0x0802047d
 80203d0:	0802047d 	.word	0x0802047d
 80203d4:	0802047d 	.word	0x0802047d
 80203d8:	0802047d 	.word	0x0802047d
 80203dc:	0802047d 	.word	0x0802047d
 80203e0:	0802047d 	.word	0x0802047d
 80203e4:	0802047d 	.word	0x0802047d
 80203e8:	0802045d 	.word	0x0802045d
 80203ec:	0802047d 	.word	0x0802047d
 80203f0:	0802047d 	.word	0x0802047d
 80203f4:	0802047d 	.word	0x0802047d
 80203f8:	0802047d 	.word	0x0802047d
 80203fc:	0802047d 	.word	0x0802047d
 8020400:	0802047d 	.word	0x0802047d
 8020404:	0802047d 	.word	0x0802047d
 8020408:	08020465 	.word	0x08020465
 802040c:	0802047d 	.word	0x0802047d
 8020410:	0802047d 	.word	0x0802047d
 8020414:	0802047d 	.word	0x0802047d
 8020418:	0802047d 	.word	0x0802047d
 802041c:	0802047d 	.word	0x0802047d
 8020420:	0802047d 	.word	0x0802047d
 8020424:	0802047d 	.word	0x0802047d
 8020428:	0802046d 	.word	0x0802046d
 802042c:	0802047d 	.word	0x0802047d
 8020430:	0802047d 	.word	0x0802047d
 8020434:	0802047d 	.word	0x0802047d
 8020438:	0802047d 	.word	0x0802047d
 802043c:	0802047d 	.word	0x0802047d
 8020440:	0802047d 	.word	0x0802047d
 8020444:	0802047d 	.word	0x0802047d
 8020448:	08020475 	.word	0x08020475
 802044c:	2301      	movs	r3, #1
 802044e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020452:	e222      	b.n	802089a <UART_SetConfig+0x5a6>
 8020454:	2304      	movs	r3, #4
 8020456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802045a:	e21e      	b.n	802089a <UART_SetConfig+0x5a6>
 802045c:	2308      	movs	r3, #8
 802045e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020462:	e21a      	b.n	802089a <UART_SetConfig+0x5a6>
 8020464:	2310      	movs	r3, #16
 8020466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802046a:	e216      	b.n	802089a <UART_SetConfig+0x5a6>
 802046c:	2320      	movs	r3, #32
 802046e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020472:	e212      	b.n	802089a <UART_SetConfig+0x5a6>
 8020474:	2340      	movs	r3, #64	@ 0x40
 8020476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802047a:	e20e      	b.n	802089a <UART_SetConfig+0x5a6>
 802047c:	2380      	movs	r3, #128	@ 0x80
 802047e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020482:	e20a      	b.n	802089a <UART_SetConfig+0x5a6>
 8020484:	697b      	ldr	r3, [r7, #20]
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	4a69      	ldr	r2, [pc, #420]	@ (8020630 <UART_SetConfig+0x33c>)
 802048a:	4293      	cmp	r3, r2
 802048c:	d130      	bne.n	80204f0 <UART_SetConfig+0x1fc>
 802048e:	4b67      	ldr	r3, [pc, #412]	@ (802062c <UART_SetConfig+0x338>)
 8020490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020492:	f003 0307 	and.w	r3, r3, #7
 8020496:	2b05      	cmp	r3, #5
 8020498:	d826      	bhi.n	80204e8 <UART_SetConfig+0x1f4>
 802049a:	a201      	add	r2, pc, #4	@ (adr r2, 80204a0 <UART_SetConfig+0x1ac>)
 802049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204a0:	080204b9 	.word	0x080204b9
 80204a4:	080204c1 	.word	0x080204c1
 80204a8:	080204c9 	.word	0x080204c9
 80204ac:	080204d1 	.word	0x080204d1
 80204b0:	080204d9 	.word	0x080204d9
 80204b4:	080204e1 	.word	0x080204e1
 80204b8:	2300      	movs	r3, #0
 80204ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204be:	e1ec      	b.n	802089a <UART_SetConfig+0x5a6>
 80204c0:	2304      	movs	r3, #4
 80204c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204c6:	e1e8      	b.n	802089a <UART_SetConfig+0x5a6>
 80204c8:	2308      	movs	r3, #8
 80204ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204ce:	e1e4      	b.n	802089a <UART_SetConfig+0x5a6>
 80204d0:	2310      	movs	r3, #16
 80204d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204d6:	e1e0      	b.n	802089a <UART_SetConfig+0x5a6>
 80204d8:	2320      	movs	r3, #32
 80204da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204de:	e1dc      	b.n	802089a <UART_SetConfig+0x5a6>
 80204e0:	2340      	movs	r3, #64	@ 0x40
 80204e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204e6:	e1d8      	b.n	802089a <UART_SetConfig+0x5a6>
 80204e8:	2380      	movs	r3, #128	@ 0x80
 80204ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80204ee:	e1d4      	b.n	802089a <UART_SetConfig+0x5a6>
 80204f0:	697b      	ldr	r3, [r7, #20]
 80204f2:	681b      	ldr	r3, [r3, #0]
 80204f4:	4a4f      	ldr	r2, [pc, #316]	@ (8020634 <UART_SetConfig+0x340>)
 80204f6:	4293      	cmp	r3, r2
 80204f8:	d130      	bne.n	802055c <UART_SetConfig+0x268>
 80204fa:	4b4c      	ldr	r3, [pc, #304]	@ (802062c <UART_SetConfig+0x338>)
 80204fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80204fe:	f003 0307 	and.w	r3, r3, #7
 8020502:	2b05      	cmp	r3, #5
 8020504:	d826      	bhi.n	8020554 <UART_SetConfig+0x260>
 8020506:	a201      	add	r2, pc, #4	@ (adr r2, 802050c <UART_SetConfig+0x218>)
 8020508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802050c:	08020525 	.word	0x08020525
 8020510:	0802052d 	.word	0x0802052d
 8020514:	08020535 	.word	0x08020535
 8020518:	0802053d 	.word	0x0802053d
 802051c:	08020545 	.word	0x08020545
 8020520:	0802054d 	.word	0x0802054d
 8020524:	2300      	movs	r3, #0
 8020526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802052a:	e1b6      	b.n	802089a <UART_SetConfig+0x5a6>
 802052c:	2304      	movs	r3, #4
 802052e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020532:	e1b2      	b.n	802089a <UART_SetConfig+0x5a6>
 8020534:	2308      	movs	r3, #8
 8020536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802053a:	e1ae      	b.n	802089a <UART_SetConfig+0x5a6>
 802053c:	2310      	movs	r3, #16
 802053e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020542:	e1aa      	b.n	802089a <UART_SetConfig+0x5a6>
 8020544:	2320      	movs	r3, #32
 8020546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802054a:	e1a6      	b.n	802089a <UART_SetConfig+0x5a6>
 802054c:	2340      	movs	r3, #64	@ 0x40
 802054e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020552:	e1a2      	b.n	802089a <UART_SetConfig+0x5a6>
 8020554:	2380      	movs	r3, #128	@ 0x80
 8020556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802055a:	e19e      	b.n	802089a <UART_SetConfig+0x5a6>
 802055c:	697b      	ldr	r3, [r7, #20]
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	4a35      	ldr	r2, [pc, #212]	@ (8020638 <UART_SetConfig+0x344>)
 8020562:	4293      	cmp	r3, r2
 8020564:	d130      	bne.n	80205c8 <UART_SetConfig+0x2d4>
 8020566:	4b31      	ldr	r3, [pc, #196]	@ (802062c <UART_SetConfig+0x338>)
 8020568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802056a:	f003 0307 	and.w	r3, r3, #7
 802056e:	2b05      	cmp	r3, #5
 8020570:	d826      	bhi.n	80205c0 <UART_SetConfig+0x2cc>
 8020572:	a201      	add	r2, pc, #4	@ (adr r2, 8020578 <UART_SetConfig+0x284>)
 8020574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020578:	08020591 	.word	0x08020591
 802057c:	08020599 	.word	0x08020599
 8020580:	080205a1 	.word	0x080205a1
 8020584:	080205a9 	.word	0x080205a9
 8020588:	080205b1 	.word	0x080205b1
 802058c:	080205b9 	.word	0x080205b9
 8020590:	2300      	movs	r3, #0
 8020592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020596:	e180      	b.n	802089a <UART_SetConfig+0x5a6>
 8020598:	2304      	movs	r3, #4
 802059a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802059e:	e17c      	b.n	802089a <UART_SetConfig+0x5a6>
 80205a0:	2308      	movs	r3, #8
 80205a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80205a6:	e178      	b.n	802089a <UART_SetConfig+0x5a6>
 80205a8:	2310      	movs	r3, #16
 80205aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80205ae:	e174      	b.n	802089a <UART_SetConfig+0x5a6>
 80205b0:	2320      	movs	r3, #32
 80205b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80205b6:	e170      	b.n	802089a <UART_SetConfig+0x5a6>
 80205b8:	2340      	movs	r3, #64	@ 0x40
 80205ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80205be:	e16c      	b.n	802089a <UART_SetConfig+0x5a6>
 80205c0:	2380      	movs	r3, #128	@ 0x80
 80205c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80205c6:	e168      	b.n	802089a <UART_SetConfig+0x5a6>
 80205c8:	697b      	ldr	r3, [r7, #20]
 80205ca:	681b      	ldr	r3, [r3, #0]
 80205cc:	4a1b      	ldr	r2, [pc, #108]	@ (802063c <UART_SetConfig+0x348>)
 80205ce:	4293      	cmp	r3, r2
 80205d0:	d142      	bne.n	8020658 <UART_SetConfig+0x364>
 80205d2:	4b16      	ldr	r3, [pc, #88]	@ (802062c <UART_SetConfig+0x338>)
 80205d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80205d6:	f003 0307 	and.w	r3, r3, #7
 80205da:	2b05      	cmp	r3, #5
 80205dc:	d838      	bhi.n	8020650 <UART_SetConfig+0x35c>
 80205de:	a201      	add	r2, pc, #4	@ (adr r2, 80205e4 <UART_SetConfig+0x2f0>)
 80205e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205e4:	080205fd 	.word	0x080205fd
 80205e8:	08020605 	.word	0x08020605
 80205ec:	0802060d 	.word	0x0802060d
 80205f0:	08020615 	.word	0x08020615
 80205f4:	08020641 	.word	0x08020641
 80205f8:	08020649 	.word	0x08020649
 80205fc:	2300      	movs	r3, #0
 80205fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020602:	e14a      	b.n	802089a <UART_SetConfig+0x5a6>
 8020604:	2304      	movs	r3, #4
 8020606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802060a:	e146      	b.n	802089a <UART_SetConfig+0x5a6>
 802060c:	2308      	movs	r3, #8
 802060e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020612:	e142      	b.n	802089a <UART_SetConfig+0x5a6>
 8020614:	2310      	movs	r3, #16
 8020616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802061a:	e13e      	b.n	802089a <UART_SetConfig+0x5a6>
 802061c:	cfff69f3 	.word	0xcfff69f3
 8020620:	58000c00 	.word	0x58000c00
 8020624:	11fff4ff 	.word	0x11fff4ff
 8020628:	40011000 	.word	0x40011000
 802062c:	58024400 	.word	0x58024400
 8020630:	40004400 	.word	0x40004400
 8020634:	40004800 	.word	0x40004800
 8020638:	40004c00 	.word	0x40004c00
 802063c:	40005000 	.word	0x40005000
 8020640:	2320      	movs	r3, #32
 8020642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020646:	e128      	b.n	802089a <UART_SetConfig+0x5a6>
 8020648:	2340      	movs	r3, #64	@ 0x40
 802064a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802064e:	e124      	b.n	802089a <UART_SetConfig+0x5a6>
 8020650:	2380      	movs	r3, #128	@ 0x80
 8020652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020656:	e120      	b.n	802089a <UART_SetConfig+0x5a6>
 8020658:	697b      	ldr	r3, [r7, #20]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	4acb      	ldr	r2, [pc, #812]	@ (802098c <UART_SetConfig+0x698>)
 802065e:	4293      	cmp	r3, r2
 8020660:	d176      	bne.n	8020750 <UART_SetConfig+0x45c>
 8020662:	4bcb      	ldr	r3, [pc, #812]	@ (8020990 <UART_SetConfig+0x69c>)
 8020664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802066a:	2b28      	cmp	r3, #40	@ 0x28
 802066c:	d86c      	bhi.n	8020748 <UART_SetConfig+0x454>
 802066e:	a201      	add	r2, pc, #4	@ (adr r2, 8020674 <UART_SetConfig+0x380>)
 8020670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020674:	08020719 	.word	0x08020719
 8020678:	08020749 	.word	0x08020749
 802067c:	08020749 	.word	0x08020749
 8020680:	08020749 	.word	0x08020749
 8020684:	08020749 	.word	0x08020749
 8020688:	08020749 	.word	0x08020749
 802068c:	08020749 	.word	0x08020749
 8020690:	08020749 	.word	0x08020749
 8020694:	08020721 	.word	0x08020721
 8020698:	08020749 	.word	0x08020749
 802069c:	08020749 	.word	0x08020749
 80206a0:	08020749 	.word	0x08020749
 80206a4:	08020749 	.word	0x08020749
 80206a8:	08020749 	.word	0x08020749
 80206ac:	08020749 	.word	0x08020749
 80206b0:	08020749 	.word	0x08020749
 80206b4:	08020729 	.word	0x08020729
 80206b8:	08020749 	.word	0x08020749
 80206bc:	08020749 	.word	0x08020749
 80206c0:	08020749 	.word	0x08020749
 80206c4:	08020749 	.word	0x08020749
 80206c8:	08020749 	.word	0x08020749
 80206cc:	08020749 	.word	0x08020749
 80206d0:	08020749 	.word	0x08020749
 80206d4:	08020731 	.word	0x08020731
 80206d8:	08020749 	.word	0x08020749
 80206dc:	08020749 	.word	0x08020749
 80206e0:	08020749 	.word	0x08020749
 80206e4:	08020749 	.word	0x08020749
 80206e8:	08020749 	.word	0x08020749
 80206ec:	08020749 	.word	0x08020749
 80206f0:	08020749 	.word	0x08020749
 80206f4:	08020739 	.word	0x08020739
 80206f8:	08020749 	.word	0x08020749
 80206fc:	08020749 	.word	0x08020749
 8020700:	08020749 	.word	0x08020749
 8020704:	08020749 	.word	0x08020749
 8020708:	08020749 	.word	0x08020749
 802070c:	08020749 	.word	0x08020749
 8020710:	08020749 	.word	0x08020749
 8020714:	08020741 	.word	0x08020741
 8020718:	2301      	movs	r3, #1
 802071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802071e:	e0bc      	b.n	802089a <UART_SetConfig+0x5a6>
 8020720:	2304      	movs	r3, #4
 8020722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020726:	e0b8      	b.n	802089a <UART_SetConfig+0x5a6>
 8020728:	2308      	movs	r3, #8
 802072a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802072e:	e0b4      	b.n	802089a <UART_SetConfig+0x5a6>
 8020730:	2310      	movs	r3, #16
 8020732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020736:	e0b0      	b.n	802089a <UART_SetConfig+0x5a6>
 8020738:	2320      	movs	r3, #32
 802073a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802073e:	e0ac      	b.n	802089a <UART_SetConfig+0x5a6>
 8020740:	2340      	movs	r3, #64	@ 0x40
 8020742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020746:	e0a8      	b.n	802089a <UART_SetConfig+0x5a6>
 8020748:	2380      	movs	r3, #128	@ 0x80
 802074a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802074e:	e0a4      	b.n	802089a <UART_SetConfig+0x5a6>
 8020750:	697b      	ldr	r3, [r7, #20]
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	4a8f      	ldr	r2, [pc, #572]	@ (8020994 <UART_SetConfig+0x6a0>)
 8020756:	4293      	cmp	r3, r2
 8020758:	d130      	bne.n	80207bc <UART_SetConfig+0x4c8>
 802075a:	4b8d      	ldr	r3, [pc, #564]	@ (8020990 <UART_SetConfig+0x69c>)
 802075c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802075e:	f003 0307 	and.w	r3, r3, #7
 8020762:	2b05      	cmp	r3, #5
 8020764:	d826      	bhi.n	80207b4 <UART_SetConfig+0x4c0>
 8020766:	a201      	add	r2, pc, #4	@ (adr r2, 802076c <UART_SetConfig+0x478>)
 8020768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802076c:	08020785 	.word	0x08020785
 8020770:	0802078d 	.word	0x0802078d
 8020774:	08020795 	.word	0x08020795
 8020778:	0802079d 	.word	0x0802079d
 802077c:	080207a5 	.word	0x080207a5
 8020780:	080207ad 	.word	0x080207ad
 8020784:	2300      	movs	r3, #0
 8020786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802078a:	e086      	b.n	802089a <UART_SetConfig+0x5a6>
 802078c:	2304      	movs	r3, #4
 802078e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020792:	e082      	b.n	802089a <UART_SetConfig+0x5a6>
 8020794:	2308      	movs	r3, #8
 8020796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802079a:	e07e      	b.n	802089a <UART_SetConfig+0x5a6>
 802079c:	2310      	movs	r3, #16
 802079e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207a2:	e07a      	b.n	802089a <UART_SetConfig+0x5a6>
 80207a4:	2320      	movs	r3, #32
 80207a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207aa:	e076      	b.n	802089a <UART_SetConfig+0x5a6>
 80207ac:	2340      	movs	r3, #64	@ 0x40
 80207ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207b2:	e072      	b.n	802089a <UART_SetConfig+0x5a6>
 80207b4:	2380      	movs	r3, #128	@ 0x80
 80207b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207ba:	e06e      	b.n	802089a <UART_SetConfig+0x5a6>
 80207bc:	697b      	ldr	r3, [r7, #20]
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	4a75      	ldr	r2, [pc, #468]	@ (8020998 <UART_SetConfig+0x6a4>)
 80207c2:	4293      	cmp	r3, r2
 80207c4:	d130      	bne.n	8020828 <UART_SetConfig+0x534>
 80207c6:	4b72      	ldr	r3, [pc, #456]	@ (8020990 <UART_SetConfig+0x69c>)
 80207c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80207ca:	f003 0307 	and.w	r3, r3, #7
 80207ce:	2b05      	cmp	r3, #5
 80207d0:	d826      	bhi.n	8020820 <UART_SetConfig+0x52c>
 80207d2:	a201      	add	r2, pc, #4	@ (adr r2, 80207d8 <UART_SetConfig+0x4e4>)
 80207d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80207d8:	080207f1 	.word	0x080207f1
 80207dc:	080207f9 	.word	0x080207f9
 80207e0:	08020801 	.word	0x08020801
 80207e4:	08020809 	.word	0x08020809
 80207e8:	08020811 	.word	0x08020811
 80207ec:	08020819 	.word	0x08020819
 80207f0:	2300      	movs	r3, #0
 80207f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207f6:	e050      	b.n	802089a <UART_SetConfig+0x5a6>
 80207f8:	2304      	movs	r3, #4
 80207fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207fe:	e04c      	b.n	802089a <UART_SetConfig+0x5a6>
 8020800:	2308      	movs	r3, #8
 8020802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020806:	e048      	b.n	802089a <UART_SetConfig+0x5a6>
 8020808:	2310      	movs	r3, #16
 802080a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802080e:	e044      	b.n	802089a <UART_SetConfig+0x5a6>
 8020810:	2320      	movs	r3, #32
 8020812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020816:	e040      	b.n	802089a <UART_SetConfig+0x5a6>
 8020818:	2340      	movs	r3, #64	@ 0x40
 802081a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802081e:	e03c      	b.n	802089a <UART_SetConfig+0x5a6>
 8020820:	2380      	movs	r3, #128	@ 0x80
 8020822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020826:	e038      	b.n	802089a <UART_SetConfig+0x5a6>
 8020828:	697b      	ldr	r3, [r7, #20]
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	4a5b      	ldr	r2, [pc, #364]	@ (802099c <UART_SetConfig+0x6a8>)
 802082e:	4293      	cmp	r3, r2
 8020830:	d130      	bne.n	8020894 <UART_SetConfig+0x5a0>
 8020832:	4b57      	ldr	r3, [pc, #348]	@ (8020990 <UART_SetConfig+0x69c>)
 8020834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020836:	f003 0307 	and.w	r3, r3, #7
 802083a:	2b05      	cmp	r3, #5
 802083c:	d826      	bhi.n	802088c <UART_SetConfig+0x598>
 802083e:	a201      	add	r2, pc, #4	@ (adr r2, 8020844 <UART_SetConfig+0x550>)
 8020840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020844:	0802085d 	.word	0x0802085d
 8020848:	08020865 	.word	0x08020865
 802084c:	0802086d 	.word	0x0802086d
 8020850:	08020875 	.word	0x08020875
 8020854:	0802087d 	.word	0x0802087d
 8020858:	08020885 	.word	0x08020885
 802085c:	2302      	movs	r3, #2
 802085e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020862:	e01a      	b.n	802089a <UART_SetConfig+0x5a6>
 8020864:	2304      	movs	r3, #4
 8020866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802086a:	e016      	b.n	802089a <UART_SetConfig+0x5a6>
 802086c:	2308      	movs	r3, #8
 802086e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020872:	e012      	b.n	802089a <UART_SetConfig+0x5a6>
 8020874:	2310      	movs	r3, #16
 8020876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802087a:	e00e      	b.n	802089a <UART_SetConfig+0x5a6>
 802087c:	2320      	movs	r3, #32
 802087e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020882:	e00a      	b.n	802089a <UART_SetConfig+0x5a6>
 8020884:	2340      	movs	r3, #64	@ 0x40
 8020886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802088a:	e006      	b.n	802089a <UART_SetConfig+0x5a6>
 802088c:	2380      	movs	r3, #128	@ 0x80
 802088e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020892:	e002      	b.n	802089a <UART_SetConfig+0x5a6>
 8020894:	2380      	movs	r3, #128	@ 0x80
 8020896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802089a:	697b      	ldr	r3, [r7, #20]
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	4a3f      	ldr	r2, [pc, #252]	@ (802099c <UART_SetConfig+0x6a8>)
 80208a0:	4293      	cmp	r3, r2
 80208a2:	f040 80f8 	bne.w	8020a96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80208a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80208aa:	2b20      	cmp	r3, #32
 80208ac:	dc46      	bgt.n	802093c <UART_SetConfig+0x648>
 80208ae:	2b02      	cmp	r3, #2
 80208b0:	f2c0 8082 	blt.w	80209b8 <UART_SetConfig+0x6c4>
 80208b4:	3b02      	subs	r3, #2
 80208b6:	2b1e      	cmp	r3, #30
 80208b8:	d87e      	bhi.n	80209b8 <UART_SetConfig+0x6c4>
 80208ba:	a201      	add	r2, pc, #4	@ (adr r2, 80208c0 <UART_SetConfig+0x5cc>)
 80208bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208c0:	08020943 	.word	0x08020943
 80208c4:	080209b9 	.word	0x080209b9
 80208c8:	0802094b 	.word	0x0802094b
 80208cc:	080209b9 	.word	0x080209b9
 80208d0:	080209b9 	.word	0x080209b9
 80208d4:	080209b9 	.word	0x080209b9
 80208d8:	0802095b 	.word	0x0802095b
 80208dc:	080209b9 	.word	0x080209b9
 80208e0:	080209b9 	.word	0x080209b9
 80208e4:	080209b9 	.word	0x080209b9
 80208e8:	080209b9 	.word	0x080209b9
 80208ec:	080209b9 	.word	0x080209b9
 80208f0:	080209b9 	.word	0x080209b9
 80208f4:	080209b9 	.word	0x080209b9
 80208f8:	0802096b 	.word	0x0802096b
 80208fc:	080209b9 	.word	0x080209b9
 8020900:	080209b9 	.word	0x080209b9
 8020904:	080209b9 	.word	0x080209b9
 8020908:	080209b9 	.word	0x080209b9
 802090c:	080209b9 	.word	0x080209b9
 8020910:	080209b9 	.word	0x080209b9
 8020914:	080209b9 	.word	0x080209b9
 8020918:	080209b9 	.word	0x080209b9
 802091c:	080209b9 	.word	0x080209b9
 8020920:	080209b9 	.word	0x080209b9
 8020924:	080209b9 	.word	0x080209b9
 8020928:	080209b9 	.word	0x080209b9
 802092c:	080209b9 	.word	0x080209b9
 8020930:	080209b9 	.word	0x080209b9
 8020934:	080209b9 	.word	0x080209b9
 8020938:	080209ab 	.word	0x080209ab
 802093c:	2b40      	cmp	r3, #64	@ 0x40
 802093e:	d037      	beq.n	80209b0 <UART_SetConfig+0x6bc>
 8020940:	e03a      	b.n	80209b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8020942:	f7fe faf9 	bl	801ef38 <HAL_RCCEx_GetD3PCLK1Freq>
 8020946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020948:	e03c      	b.n	80209c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802094a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802094e:	4618      	mov	r0, r3
 8020950:	f7fe fb08 	bl	801ef64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020958:	e034      	b.n	80209c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802095a:	f107 0318 	add.w	r3, r7, #24
 802095e:	4618      	mov	r0, r3
 8020960:	f7fe fc54 	bl	801f20c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020964:	69fb      	ldr	r3, [r7, #28]
 8020966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020968:	e02c      	b.n	80209c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802096a:	4b09      	ldr	r3, [pc, #36]	@ (8020990 <UART_SetConfig+0x69c>)
 802096c:	681b      	ldr	r3, [r3, #0]
 802096e:	f003 0320 	and.w	r3, r3, #32
 8020972:	2b00      	cmp	r3, #0
 8020974:	d016      	beq.n	80209a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020976:	4b06      	ldr	r3, [pc, #24]	@ (8020990 <UART_SetConfig+0x69c>)
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	08db      	lsrs	r3, r3, #3
 802097c:	f003 0303 	and.w	r3, r3, #3
 8020980:	4a07      	ldr	r2, [pc, #28]	@ (80209a0 <UART_SetConfig+0x6ac>)
 8020982:	fa22 f303 	lsr.w	r3, r2, r3
 8020986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020988:	e01c      	b.n	80209c4 <UART_SetConfig+0x6d0>
 802098a:	bf00      	nop
 802098c:	40011400 	.word	0x40011400
 8020990:	58024400 	.word	0x58024400
 8020994:	40007800 	.word	0x40007800
 8020998:	40007c00 	.word	0x40007c00
 802099c:	58000c00 	.word	0x58000c00
 80209a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80209a4:	4b9d      	ldr	r3, [pc, #628]	@ (8020c1c <UART_SetConfig+0x928>)
 80209a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80209a8:	e00c      	b.n	80209c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80209aa:	4b9d      	ldr	r3, [pc, #628]	@ (8020c20 <UART_SetConfig+0x92c>)
 80209ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80209ae:	e009      	b.n	80209c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80209b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80209b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80209b6:	e005      	b.n	80209c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80209b8:	2300      	movs	r3, #0
 80209ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80209bc:	2301      	movs	r3, #1
 80209be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80209c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80209c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	f000 81de 	beq.w	8020d88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80209cc:	697b      	ldr	r3, [r7, #20]
 80209ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80209d0:	4a94      	ldr	r2, [pc, #592]	@ (8020c24 <UART_SetConfig+0x930>)
 80209d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80209d6:	461a      	mov	r2, r3
 80209d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80209da:	fbb3 f3f2 	udiv	r3, r3, r2
 80209de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80209e0:	697b      	ldr	r3, [r7, #20]
 80209e2:	685a      	ldr	r2, [r3, #4]
 80209e4:	4613      	mov	r3, r2
 80209e6:	005b      	lsls	r3, r3, #1
 80209e8:	4413      	add	r3, r2
 80209ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80209ec:	429a      	cmp	r2, r3
 80209ee:	d305      	bcc.n	80209fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80209f0:	697b      	ldr	r3, [r7, #20]
 80209f2:	685b      	ldr	r3, [r3, #4]
 80209f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80209f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80209f8:	429a      	cmp	r2, r3
 80209fa:	d903      	bls.n	8020a04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80209fc:	2301      	movs	r3, #1
 80209fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020a02:	e1c1      	b.n	8020d88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020a06:	2200      	movs	r2, #0
 8020a08:	60bb      	str	r3, [r7, #8]
 8020a0a:	60fa      	str	r2, [r7, #12]
 8020a0c:	697b      	ldr	r3, [r7, #20]
 8020a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020a10:	4a84      	ldr	r2, [pc, #528]	@ (8020c24 <UART_SetConfig+0x930>)
 8020a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020a16:	b29b      	uxth	r3, r3
 8020a18:	2200      	movs	r2, #0
 8020a1a:	603b      	str	r3, [r7, #0]
 8020a1c:	607a      	str	r2, [r7, #4]
 8020a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020a26:	f7df fecf 	bl	80007c8 <__aeabi_uldivmod>
 8020a2a:	4602      	mov	r2, r0
 8020a2c:	460b      	mov	r3, r1
 8020a2e:	4610      	mov	r0, r2
 8020a30:	4619      	mov	r1, r3
 8020a32:	f04f 0200 	mov.w	r2, #0
 8020a36:	f04f 0300 	mov.w	r3, #0
 8020a3a:	020b      	lsls	r3, r1, #8
 8020a3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8020a40:	0202      	lsls	r2, r0, #8
 8020a42:	6979      	ldr	r1, [r7, #20]
 8020a44:	6849      	ldr	r1, [r1, #4]
 8020a46:	0849      	lsrs	r1, r1, #1
 8020a48:	2000      	movs	r0, #0
 8020a4a:	460c      	mov	r4, r1
 8020a4c:	4605      	mov	r5, r0
 8020a4e:	eb12 0804 	adds.w	r8, r2, r4
 8020a52:	eb43 0905 	adc.w	r9, r3, r5
 8020a56:	697b      	ldr	r3, [r7, #20]
 8020a58:	685b      	ldr	r3, [r3, #4]
 8020a5a:	2200      	movs	r2, #0
 8020a5c:	469a      	mov	sl, r3
 8020a5e:	4693      	mov	fp, r2
 8020a60:	4652      	mov	r2, sl
 8020a62:	465b      	mov	r3, fp
 8020a64:	4640      	mov	r0, r8
 8020a66:	4649      	mov	r1, r9
 8020a68:	f7df feae 	bl	80007c8 <__aeabi_uldivmod>
 8020a6c:	4602      	mov	r2, r0
 8020a6e:	460b      	mov	r3, r1
 8020a70:	4613      	mov	r3, r2
 8020a72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020a7a:	d308      	bcc.n	8020a8e <UART_SetConfig+0x79a>
 8020a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020a82:	d204      	bcs.n	8020a8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8020a84:	697b      	ldr	r3, [r7, #20]
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020a8a:	60da      	str	r2, [r3, #12]
 8020a8c:	e17c      	b.n	8020d88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8020a8e:	2301      	movs	r3, #1
 8020a90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020a94:	e178      	b.n	8020d88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020a96:	697b      	ldr	r3, [r7, #20]
 8020a98:	69db      	ldr	r3, [r3, #28]
 8020a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020a9e:	f040 80c5 	bne.w	8020c2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8020aa2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020aa6:	2b20      	cmp	r3, #32
 8020aa8:	dc48      	bgt.n	8020b3c <UART_SetConfig+0x848>
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	db7b      	blt.n	8020ba6 <UART_SetConfig+0x8b2>
 8020aae:	2b20      	cmp	r3, #32
 8020ab0:	d879      	bhi.n	8020ba6 <UART_SetConfig+0x8b2>
 8020ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8020ab8 <UART_SetConfig+0x7c4>)
 8020ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ab8:	08020b43 	.word	0x08020b43
 8020abc:	08020b4b 	.word	0x08020b4b
 8020ac0:	08020ba7 	.word	0x08020ba7
 8020ac4:	08020ba7 	.word	0x08020ba7
 8020ac8:	08020b53 	.word	0x08020b53
 8020acc:	08020ba7 	.word	0x08020ba7
 8020ad0:	08020ba7 	.word	0x08020ba7
 8020ad4:	08020ba7 	.word	0x08020ba7
 8020ad8:	08020b63 	.word	0x08020b63
 8020adc:	08020ba7 	.word	0x08020ba7
 8020ae0:	08020ba7 	.word	0x08020ba7
 8020ae4:	08020ba7 	.word	0x08020ba7
 8020ae8:	08020ba7 	.word	0x08020ba7
 8020aec:	08020ba7 	.word	0x08020ba7
 8020af0:	08020ba7 	.word	0x08020ba7
 8020af4:	08020ba7 	.word	0x08020ba7
 8020af8:	08020b73 	.word	0x08020b73
 8020afc:	08020ba7 	.word	0x08020ba7
 8020b00:	08020ba7 	.word	0x08020ba7
 8020b04:	08020ba7 	.word	0x08020ba7
 8020b08:	08020ba7 	.word	0x08020ba7
 8020b0c:	08020ba7 	.word	0x08020ba7
 8020b10:	08020ba7 	.word	0x08020ba7
 8020b14:	08020ba7 	.word	0x08020ba7
 8020b18:	08020ba7 	.word	0x08020ba7
 8020b1c:	08020ba7 	.word	0x08020ba7
 8020b20:	08020ba7 	.word	0x08020ba7
 8020b24:	08020ba7 	.word	0x08020ba7
 8020b28:	08020ba7 	.word	0x08020ba7
 8020b2c:	08020ba7 	.word	0x08020ba7
 8020b30:	08020ba7 	.word	0x08020ba7
 8020b34:	08020ba7 	.word	0x08020ba7
 8020b38:	08020b99 	.word	0x08020b99
 8020b3c:	2b40      	cmp	r3, #64	@ 0x40
 8020b3e:	d02e      	beq.n	8020b9e <UART_SetConfig+0x8aa>
 8020b40:	e031      	b.n	8020ba6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020b42:	f7fc ffc3 	bl	801dacc <HAL_RCC_GetPCLK1Freq>
 8020b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020b48:	e033      	b.n	8020bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020b4a:	f7fc ffd5 	bl	801daf8 <HAL_RCC_GetPCLK2Freq>
 8020b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020b50:	e02f      	b.n	8020bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020b56:	4618      	mov	r0, r3
 8020b58:	f7fe fa04 	bl	801ef64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020b60:	e027      	b.n	8020bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020b62:	f107 0318 	add.w	r3, r7, #24
 8020b66:	4618      	mov	r0, r3
 8020b68:	f7fe fb50 	bl	801f20c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020b6c:	69fb      	ldr	r3, [r7, #28]
 8020b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020b70:	e01f      	b.n	8020bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020b72:	4b2d      	ldr	r3, [pc, #180]	@ (8020c28 <UART_SetConfig+0x934>)
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	f003 0320 	and.w	r3, r3, #32
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d009      	beq.n	8020b92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8020c28 <UART_SetConfig+0x934>)
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	08db      	lsrs	r3, r3, #3
 8020b84:	f003 0303 	and.w	r3, r3, #3
 8020b88:	4a24      	ldr	r2, [pc, #144]	@ (8020c1c <UART_SetConfig+0x928>)
 8020b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8020b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020b90:	e00f      	b.n	8020bb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8020b92:	4b22      	ldr	r3, [pc, #136]	@ (8020c1c <UART_SetConfig+0x928>)
 8020b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020b96:	e00c      	b.n	8020bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020b98:	4b21      	ldr	r3, [pc, #132]	@ (8020c20 <UART_SetConfig+0x92c>)
 8020b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020b9c:	e009      	b.n	8020bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ba4:	e005      	b.n	8020bb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8020ba6:	2300      	movs	r3, #0
 8020ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020baa:	2301      	movs	r3, #1
 8020bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	f000 80e7 	beq.w	8020d88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020bba:	697b      	ldr	r3, [r7, #20]
 8020bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020bbe:	4a19      	ldr	r2, [pc, #100]	@ (8020c24 <UART_SetConfig+0x930>)
 8020bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020bc4:	461a      	mov	r2, r3
 8020bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8020bcc:	005a      	lsls	r2, r3, #1
 8020bce:	697b      	ldr	r3, [r7, #20]
 8020bd0:	685b      	ldr	r3, [r3, #4]
 8020bd2:	085b      	lsrs	r3, r3, #1
 8020bd4:	441a      	add	r2, r3
 8020bd6:	697b      	ldr	r3, [r7, #20]
 8020bd8:	685b      	ldr	r3, [r3, #4]
 8020bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8020bde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020be2:	2b0f      	cmp	r3, #15
 8020be4:	d916      	bls.n	8020c14 <UART_SetConfig+0x920>
 8020be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020bec:	d212      	bcs.n	8020c14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020bf0:	b29b      	uxth	r3, r3
 8020bf2:	f023 030f 	bic.w	r3, r3, #15
 8020bf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020bfa:	085b      	lsrs	r3, r3, #1
 8020bfc:	b29b      	uxth	r3, r3
 8020bfe:	f003 0307 	and.w	r3, r3, #7
 8020c02:	b29a      	uxth	r2, r3
 8020c04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020c06:	4313      	orrs	r3, r2
 8020c08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8020c0a:	697b      	ldr	r3, [r7, #20]
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020c10:	60da      	str	r2, [r3, #12]
 8020c12:	e0b9      	b.n	8020d88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020c14:	2301      	movs	r3, #1
 8020c16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020c1a:	e0b5      	b.n	8020d88 <UART_SetConfig+0xa94>
 8020c1c:	03d09000 	.word	0x03d09000
 8020c20:	003d0900 	.word	0x003d0900
 8020c24:	08036a2c 	.word	0x08036a2c
 8020c28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020c2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020c30:	2b20      	cmp	r3, #32
 8020c32:	dc49      	bgt.n	8020cc8 <UART_SetConfig+0x9d4>
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	db7c      	blt.n	8020d32 <UART_SetConfig+0xa3e>
 8020c38:	2b20      	cmp	r3, #32
 8020c3a:	d87a      	bhi.n	8020d32 <UART_SetConfig+0xa3e>
 8020c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8020c44 <UART_SetConfig+0x950>)
 8020c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c42:	bf00      	nop
 8020c44:	08020ccf 	.word	0x08020ccf
 8020c48:	08020cd7 	.word	0x08020cd7
 8020c4c:	08020d33 	.word	0x08020d33
 8020c50:	08020d33 	.word	0x08020d33
 8020c54:	08020cdf 	.word	0x08020cdf
 8020c58:	08020d33 	.word	0x08020d33
 8020c5c:	08020d33 	.word	0x08020d33
 8020c60:	08020d33 	.word	0x08020d33
 8020c64:	08020cef 	.word	0x08020cef
 8020c68:	08020d33 	.word	0x08020d33
 8020c6c:	08020d33 	.word	0x08020d33
 8020c70:	08020d33 	.word	0x08020d33
 8020c74:	08020d33 	.word	0x08020d33
 8020c78:	08020d33 	.word	0x08020d33
 8020c7c:	08020d33 	.word	0x08020d33
 8020c80:	08020d33 	.word	0x08020d33
 8020c84:	08020cff 	.word	0x08020cff
 8020c88:	08020d33 	.word	0x08020d33
 8020c8c:	08020d33 	.word	0x08020d33
 8020c90:	08020d33 	.word	0x08020d33
 8020c94:	08020d33 	.word	0x08020d33
 8020c98:	08020d33 	.word	0x08020d33
 8020c9c:	08020d33 	.word	0x08020d33
 8020ca0:	08020d33 	.word	0x08020d33
 8020ca4:	08020d33 	.word	0x08020d33
 8020ca8:	08020d33 	.word	0x08020d33
 8020cac:	08020d33 	.word	0x08020d33
 8020cb0:	08020d33 	.word	0x08020d33
 8020cb4:	08020d33 	.word	0x08020d33
 8020cb8:	08020d33 	.word	0x08020d33
 8020cbc:	08020d33 	.word	0x08020d33
 8020cc0:	08020d33 	.word	0x08020d33
 8020cc4:	08020d25 	.word	0x08020d25
 8020cc8:	2b40      	cmp	r3, #64	@ 0x40
 8020cca:	d02e      	beq.n	8020d2a <UART_SetConfig+0xa36>
 8020ccc:	e031      	b.n	8020d32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020cce:	f7fc fefd 	bl	801dacc <HAL_RCC_GetPCLK1Freq>
 8020cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020cd4:	e033      	b.n	8020d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020cd6:	f7fc ff0f 	bl	801daf8 <HAL_RCC_GetPCLK2Freq>
 8020cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020cdc:	e02f      	b.n	8020d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020ce2:	4618      	mov	r0, r3
 8020ce4:	f7fe f93e 	bl	801ef64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020cec:	e027      	b.n	8020d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020cee:	f107 0318 	add.w	r3, r7, #24
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	f7fe fa8a 	bl	801f20c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020cf8:	69fb      	ldr	r3, [r7, #28]
 8020cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020cfc:	e01f      	b.n	8020d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8020db4 <UART_SetConfig+0xac0>)
 8020d00:	681b      	ldr	r3, [r3, #0]
 8020d02:	f003 0320 	and.w	r3, r3, #32
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d009      	beq.n	8020d1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8020db4 <UART_SetConfig+0xac0>)
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	08db      	lsrs	r3, r3, #3
 8020d10:	f003 0303 	and.w	r3, r3, #3
 8020d14:	4a28      	ldr	r2, [pc, #160]	@ (8020db8 <UART_SetConfig+0xac4>)
 8020d16:	fa22 f303 	lsr.w	r3, r2, r3
 8020d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020d1c:	e00f      	b.n	8020d3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8020d1e:	4b26      	ldr	r3, [pc, #152]	@ (8020db8 <UART_SetConfig+0xac4>)
 8020d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020d22:	e00c      	b.n	8020d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020d24:	4b25      	ldr	r3, [pc, #148]	@ (8020dbc <UART_SetConfig+0xac8>)
 8020d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020d28:	e009      	b.n	8020d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020d30:	e005      	b.n	8020d3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8020d32:	2300      	movs	r3, #0
 8020d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020d36:	2301      	movs	r3, #1
 8020d38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8020d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d021      	beq.n	8020d88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020d44:	697b      	ldr	r3, [r7, #20]
 8020d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020d48:	4a1d      	ldr	r2, [pc, #116]	@ (8020dc0 <UART_SetConfig+0xacc>)
 8020d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020d4e:	461a      	mov	r2, r3
 8020d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8020d56:	697b      	ldr	r3, [r7, #20]
 8020d58:	685b      	ldr	r3, [r3, #4]
 8020d5a:	085b      	lsrs	r3, r3, #1
 8020d5c:	441a      	add	r2, r3
 8020d5e:	697b      	ldr	r3, [r7, #20]
 8020d60:	685b      	ldr	r3, [r3, #4]
 8020d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8020d66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d6a:	2b0f      	cmp	r3, #15
 8020d6c:	d909      	bls.n	8020d82 <UART_SetConfig+0xa8e>
 8020d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020d74:	d205      	bcs.n	8020d82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d78:	b29a      	uxth	r2, r3
 8020d7a:	697b      	ldr	r3, [r7, #20]
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	60da      	str	r2, [r3, #12]
 8020d80:	e002      	b.n	8020d88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020d82:	2301      	movs	r3, #1
 8020d84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8020d88:	697b      	ldr	r3, [r7, #20]
 8020d8a:	2201      	movs	r2, #1
 8020d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8020d90:	697b      	ldr	r3, [r7, #20]
 8020d92:	2201      	movs	r2, #1
 8020d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020d98:	697b      	ldr	r3, [r7, #20]
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8020d9e:	697b      	ldr	r3, [r7, #20]
 8020da0:	2200      	movs	r2, #0
 8020da2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8020da4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8020da8:	4618      	mov	r0, r3
 8020daa:	3748      	adds	r7, #72	@ 0x48
 8020dac:	46bd      	mov	sp, r7
 8020dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020db2:	bf00      	nop
 8020db4:	58024400 	.word	0x58024400
 8020db8:	03d09000 	.word	0x03d09000
 8020dbc:	003d0900 	.word	0x003d0900
 8020dc0:	08036a2c 	.word	0x08036a2c

08020dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020dc4:	b480      	push	{r7}
 8020dc6:	b083      	sub	sp, #12
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020dd0:	f003 0308 	and.w	r3, r3, #8
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d00a      	beq.n	8020dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	681b      	ldr	r3, [r3, #0]
 8020ddc:	685b      	ldr	r3, [r3, #4]
 8020dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	430a      	orrs	r2, r1
 8020dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020df2:	f003 0301 	and.w	r3, r3, #1
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	d00a      	beq.n	8020e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	685b      	ldr	r3, [r3, #4]
 8020e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	430a      	orrs	r2, r1
 8020e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e14:	f003 0302 	and.w	r3, r3, #2
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d00a      	beq.n	8020e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	685b      	ldr	r3, [r3, #4]
 8020e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	681b      	ldr	r3, [r3, #0]
 8020e2e:	430a      	orrs	r2, r1
 8020e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e36:	f003 0304 	and.w	r3, r3, #4
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d00a      	beq.n	8020e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	681b      	ldr	r3, [r3, #0]
 8020e42:	685b      	ldr	r3, [r3, #4]
 8020e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	430a      	orrs	r2, r1
 8020e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e58:	f003 0310 	and.w	r3, r3, #16
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d00a      	beq.n	8020e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	689b      	ldr	r3, [r3, #8]
 8020e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	430a      	orrs	r2, r1
 8020e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e7a:	f003 0320 	and.w	r3, r3, #32
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d00a      	beq.n	8020e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	689b      	ldr	r3, [r3, #8]
 8020e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	430a      	orrs	r2, r1
 8020e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	d01a      	beq.n	8020eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	685b      	ldr	r3, [r3, #4]
 8020eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	430a      	orrs	r2, r1
 8020eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020ec2:	d10a      	bne.n	8020eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	681b      	ldr	r3, [r3, #0]
 8020ec8:	685b      	ldr	r3, [r3, #4]
 8020eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	430a      	orrs	r2, r1
 8020ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d00a      	beq.n	8020efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	685b      	ldr	r3, [r3, #4]
 8020eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	430a      	orrs	r2, r1
 8020efa:	605a      	str	r2, [r3, #4]
  }
}
 8020efc:	bf00      	nop
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020f08:	b580      	push	{r7, lr}
 8020f0a:	b098      	sub	sp, #96	@ 0x60
 8020f0c:	af02      	add	r7, sp, #8
 8020f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	2200      	movs	r2, #0
 8020f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020f18:	f7fa f940 	bl	801b19c <HAL_GetTick>
 8020f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	681b      	ldr	r3, [r3, #0]
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	f003 0308 	and.w	r3, r3, #8
 8020f28:	2b08      	cmp	r3, #8
 8020f2a:	d12f      	bne.n	8020f8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020f30:	9300      	str	r3, [sp, #0]
 8020f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020f34:	2200      	movs	r2, #0
 8020f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8020f3a:	6878      	ldr	r0, [r7, #4]
 8020f3c:	f000 f88e 	bl	802105c <UART_WaitOnFlagUntilTimeout>
 8020f40:	4603      	mov	r3, r0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d022      	beq.n	8020f8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	681b      	ldr	r3, [r3, #0]
 8020f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020f4e:	e853 3f00 	ldrex	r3, [r3]
 8020f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8020f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	461a      	mov	r2, r3
 8020f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8020f66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020f6c:	e841 2300 	strex	r3, r2, [r1]
 8020f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8020f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d1e6      	bne.n	8020f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	2220      	movs	r2, #32
 8020f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	2200      	movs	r2, #0
 8020f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020f88:	2303      	movs	r3, #3
 8020f8a:	e063      	b.n	8021054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8020f8c:	687b      	ldr	r3, [r7, #4]
 8020f8e:	681b      	ldr	r3, [r3, #0]
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	f003 0304 	and.w	r3, r3, #4
 8020f96:	2b04      	cmp	r3, #4
 8020f98:	d149      	bne.n	802102e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020f9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020f9e:	9300      	str	r3, [sp, #0]
 8020fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020fa2:	2200      	movs	r2, #0
 8020fa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8020fa8:	6878      	ldr	r0, [r7, #4]
 8020faa:	f000 f857 	bl	802105c <UART_WaitOnFlagUntilTimeout>
 8020fae:	4603      	mov	r3, r0
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d03c      	beq.n	802102e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	681b      	ldr	r3, [r3, #0]
 8020fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fbc:	e853 3f00 	ldrex	r3, [r3]
 8020fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8020fc2:	6a3b      	ldr	r3, [r7, #32]
 8020fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	461a      	mov	r2, r3
 8020fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8020fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020fda:	e841 2300 	strex	r3, r2, [r1]
 8020fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d1e6      	bne.n	8020fb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	3308      	adds	r3, #8
 8020fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020fee:	693b      	ldr	r3, [r7, #16]
 8020ff0:	e853 3f00 	ldrex	r3, [r3]
 8020ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	f023 0301 	bic.w	r3, r3, #1
 8020ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	3308      	adds	r3, #8
 8021004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021006:	61fa      	str	r2, [r7, #28]
 8021008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802100a:	69b9      	ldr	r1, [r7, #24]
 802100c:	69fa      	ldr	r2, [r7, #28]
 802100e:	e841 2300 	strex	r3, r2, [r1]
 8021012:	617b      	str	r3, [r7, #20]
   return(result);
 8021014:	697b      	ldr	r3, [r7, #20]
 8021016:	2b00      	cmp	r3, #0
 8021018:	d1e5      	bne.n	8020fe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802101a:	687b      	ldr	r3, [r7, #4]
 802101c:	2220      	movs	r2, #32
 802101e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	2200      	movs	r2, #0
 8021026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802102a:	2303      	movs	r3, #3
 802102c:	e012      	b.n	8021054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	2220      	movs	r2, #32
 8021032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	2220      	movs	r2, #32
 802103a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	2200      	movs	r2, #0
 8021042:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	2200      	movs	r2, #0
 8021048:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	2200      	movs	r2, #0
 802104e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021052:	2300      	movs	r3, #0
}
 8021054:	4618      	mov	r0, r3
 8021056:	3758      	adds	r7, #88	@ 0x58
 8021058:	46bd      	mov	sp, r7
 802105a:	bd80      	pop	{r7, pc}

0802105c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802105c:	b580      	push	{r7, lr}
 802105e:	b084      	sub	sp, #16
 8021060:	af00      	add	r7, sp, #0
 8021062:	60f8      	str	r0, [r7, #12]
 8021064:	60b9      	str	r1, [r7, #8]
 8021066:	603b      	str	r3, [r7, #0]
 8021068:	4613      	mov	r3, r2
 802106a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802106c:	e04f      	b.n	802110e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802106e:	69bb      	ldr	r3, [r7, #24]
 8021070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021074:	d04b      	beq.n	802110e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021076:	f7fa f891 	bl	801b19c <HAL_GetTick>
 802107a:	4602      	mov	r2, r0
 802107c:	683b      	ldr	r3, [r7, #0]
 802107e:	1ad3      	subs	r3, r2, r3
 8021080:	69ba      	ldr	r2, [r7, #24]
 8021082:	429a      	cmp	r2, r3
 8021084:	d302      	bcc.n	802108c <UART_WaitOnFlagUntilTimeout+0x30>
 8021086:	69bb      	ldr	r3, [r7, #24]
 8021088:	2b00      	cmp	r3, #0
 802108a:	d101      	bne.n	8021090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802108c:	2303      	movs	r3, #3
 802108e:	e04e      	b.n	802112e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8021090:	68fb      	ldr	r3, [r7, #12]
 8021092:	681b      	ldr	r3, [r3, #0]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	f003 0304 	and.w	r3, r3, #4
 802109a:	2b00      	cmp	r3, #0
 802109c:	d037      	beq.n	802110e <UART_WaitOnFlagUntilTimeout+0xb2>
 802109e:	68bb      	ldr	r3, [r7, #8]
 80210a0:	2b80      	cmp	r3, #128	@ 0x80
 80210a2:	d034      	beq.n	802110e <UART_WaitOnFlagUntilTimeout+0xb2>
 80210a4:	68bb      	ldr	r3, [r7, #8]
 80210a6:	2b40      	cmp	r3, #64	@ 0x40
 80210a8:	d031      	beq.n	802110e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80210aa:	68fb      	ldr	r3, [r7, #12]
 80210ac:	681b      	ldr	r3, [r3, #0]
 80210ae:	69db      	ldr	r3, [r3, #28]
 80210b0:	f003 0308 	and.w	r3, r3, #8
 80210b4:	2b08      	cmp	r3, #8
 80210b6:	d110      	bne.n	80210da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80210b8:	68fb      	ldr	r3, [r7, #12]
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	2208      	movs	r2, #8
 80210be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80210c0:	68f8      	ldr	r0, [r7, #12]
 80210c2:	f000 f95b 	bl	802137c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	2208      	movs	r2, #8
 80210ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80210ce:	68fb      	ldr	r3, [r7, #12]
 80210d0:	2200      	movs	r2, #0
 80210d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80210d6:	2301      	movs	r3, #1
 80210d8:	e029      	b.n	802112e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80210da:	68fb      	ldr	r3, [r7, #12]
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	69db      	ldr	r3, [r3, #28]
 80210e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80210e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80210e8:	d111      	bne.n	802110e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80210ea:	68fb      	ldr	r3, [r7, #12]
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80210f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80210f4:	68f8      	ldr	r0, [r7, #12]
 80210f6:	f000 f941 	bl	802137c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80210fa:	68fb      	ldr	r3, [r7, #12]
 80210fc:	2220      	movs	r2, #32
 80210fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021102:	68fb      	ldr	r3, [r7, #12]
 8021104:	2200      	movs	r2, #0
 8021106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802110a:	2303      	movs	r3, #3
 802110c:	e00f      	b.n	802112e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	681b      	ldr	r3, [r3, #0]
 8021112:	69da      	ldr	r2, [r3, #28]
 8021114:	68bb      	ldr	r3, [r7, #8]
 8021116:	4013      	ands	r3, r2
 8021118:	68ba      	ldr	r2, [r7, #8]
 802111a:	429a      	cmp	r2, r3
 802111c:	bf0c      	ite	eq
 802111e:	2301      	moveq	r3, #1
 8021120:	2300      	movne	r3, #0
 8021122:	b2db      	uxtb	r3, r3
 8021124:	461a      	mov	r2, r3
 8021126:	79fb      	ldrb	r3, [r7, #7]
 8021128:	429a      	cmp	r2, r3
 802112a:	d0a0      	beq.n	802106e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802112c:	2300      	movs	r3, #0
}
 802112e:	4618      	mov	r0, r3
 8021130:	3710      	adds	r7, #16
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}
	...

08021138 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8021138:	b480      	push	{r7}
 802113a:	b0a3      	sub	sp, #140	@ 0x8c
 802113c:	af00      	add	r7, sp, #0
 802113e:	60f8      	str	r0, [r7, #12]
 8021140:	60b9      	str	r1, [r7, #8]
 8021142:	4613      	mov	r3, r2
 8021144:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8021146:	68fb      	ldr	r3, [r7, #12]
 8021148:	68ba      	ldr	r2, [r7, #8]
 802114a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	88fa      	ldrh	r2, [r7, #6]
 8021150:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8021154:	68fb      	ldr	r3, [r7, #12]
 8021156:	88fa      	ldrh	r2, [r7, #6]
 8021158:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 802115c:	68fb      	ldr	r3, [r7, #12]
 802115e:	2200      	movs	r2, #0
 8021160:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8021162:	68fb      	ldr	r3, [r7, #12]
 8021164:	689b      	ldr	r3, [r3, #8]
 8021166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802116a:	d10e      	bne.n	802118a <UART_Start_Receive_IT+0x52>
 802116c:	68fb      	ldr	r3, [r7, #12]
 802116e:	691b      	ldr	r3, [r3, #16]
 8021170:	2b00      	cmp	r3, #0
 8021172:	d105      	bne.n	8021180 <UART_Start_Receive_IT+0x48>
 8021174:	68fb      	ldr	r3, [r7, #12]
 8021176:	f240 12ff 	movw	r2, #511	@ 0x1ff
 802117a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 802117e:	e02d      	b.n	80211dc <UART_Start_Receive_IT+0xa4>
 8021180:	68fb      	ldr	r3, [r7, #12]
 8021182:	22ff      	movs	r2, #255	@ 0xff
 8021184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8021188:	e028      	b.n	80211dc <UART_Start_Receive_IT+0xa4>
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	689b      	ldr	r3, [r3, #8]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d10d      	bne.n	80211ae <UART_Start_Receive_IT+0x76>
 8021192:	68fb      	ldr	r3, [r7, #12]
 8021194:	691b      	ldr	r3, [r3, #16]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d104      	bne.n	80211a4 <UART_Start_Receive_IT+0x6c>
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	22ff      	movs	r2, #255	@ 0xff
 802119e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80211a2:	e01b      	b.n	80211dc <UART_Start_Receive_IT+0xa4>
 80211a4:	68fb      	ldr	r3, [r7, #12]
 80211a6:	227f      	movs	r2, #127	@ 0x7f
 80211a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80211ac:	e016      	b.n	80211dc <UART_Start_Receive_IT+0xa4>
 80211ae:	68fb      	ldr	r3, [r7, #12]
 80211b0:	689b      	ldr	r3, [r3, #8]
 80211b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80211b6:	d10d      	bne.n	80211d4 <UART_Start_Receive_IT+0x9c>
 80211b8:	68fb      	ldr	r3, [r7, #12]
 80211ba:	691b      	ldr	r3, [r3, #16]
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d104      	bne.n	80211ca <UART_Start_Receive_IT+0x92>
 80211c0:	68fb      	ldr	r3, [r7, #12]
 80211c2:	227f      	movs	r2, #127	@ 0x7f
 80211c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80211c8:	e008      	b.n	80211dc <UART_Start_Receive_IT+0xa4>
 80211ca:	68fb      	ldr	r3, [r7, #12]
 80211cc:	223f      	movs	r2, #63	@ 0x3f
 80211ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80211d2:	e003      	b.n	80211dc <UART_Start_Receive_IT+0xa4>
 80211d4:	68fb      	ldr	r3, [r7, #12]
 80211d6:	2200      	movs	r2, #0
 80211d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80211dc:	68fb      	ldr	r3, [r7, #12]
 80211de:	2200      	movs	r2, #0
 80211e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80211e4:	68fb      	ldr	r3, [r7, #12]
 80211e6:	2222      	movs	r2, #34	@ 0x22
 80211e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80211ec:	68fb      	ldr	r3, [r7, #12]
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	3308      	adds	r3, #8
 80211f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80211f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80211f6:	e853 3f00 	ldrex	r3, [r3]
 80211fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80211fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80211fe:	f043 0301 	orr.w	r3, r3, #1
 8021202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8021206:	68fb      	ldr	r3, [r7, #12]
 8021208:	681b      	ldr	r3, [r3, #0]
 802120a:	3308      	adds	r3, #8
 802120c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8021210:	673a      	str	r2, [r7, #112]	@ 0x70
 8021212:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021214:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8021216:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8021218:	e841 2300 	strex	r3, r2, [r1]
 802121c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 802121e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8021220:	2b00      	cmp	r3, #0
 8021222:	d1e3      	bne.n	80211ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8021224:	68fb      	ldr	r3, [r7, #12]
 8021226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8021228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802122c:	d14f      	bne.n	80212ce <UART_Start_Receive_IT+0x196>
 802122e:	68fb      	ldr	r3, [r7, #12]
 8021230:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8021234:	88fa      	ldrh	r2, [r7, #6]
 8021236:	429a      	cmp	r2, r3
 8021238:	d349      	bcc.n	80212ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802123a:	68fb      	ldr	r3, [r7, #12]
 802123c:	689b      	ldr	r3, [r3, #8]
 802123e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021242:	d107      	bne.n	8021254 <UART_Start_Receive_IT+0x11c>
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	691b      	ldr	r3, [r3, #16]
 8021248:	2b00      	cmp	r3, #0
 802124a:	d103      	bne.n	8021254 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 802124c:	68fb      	ldr	r3, [r7, #12]
 802124e:	4a47      	ldr	r2, [pc, #284]	@ (802136c <UART_Start_Receive_IT+0x234>)
 8021250:	675a      	str	r2, [r3, #116]	@ 0x74
 8021252:	e002      	b.n	802125a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8021254:	68fb      	ldr	r3, [r7, #12]
 8021256:	4a46      	ldr	r2, [pc, #280]	@ (8021370 <UART_Start_Receive_IT+0x238>)
 8021258:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 802125a:	68fb      	ldr	r3, [r7, #12]
 802125c:	691b      	ldr	r3, [r3, #16]
 802125e:	2b00      	cmp	r3, #0
 8021260:	d01a      	beq.n	8021298 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021262:	68fb      	ldr	r3, [r7, #12]
 8021264:	681b      	ldr	r3, [r3, #0]
 8021266:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802126a:	e853 3f00 	ldrex	r3, [r3]
 802126e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8021270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802127a:	68fb      	ldr	r3, [r7, #12]
 802127c:	681b      	ldr	r3, [r3, #0]
 802127e:	461a      	mov	r2, r3
 8021280:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8021286:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021288:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802128a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 802128c:	e841 2300 	strex	r3, r2, [r1]
 8021290:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8021292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021294:	2b00      	cmp	r3, #0
 8021296:	d1e4      	bne.n	8021262 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8021298:	68fb      	ldr	r3, [r7, #12]
 802129a:	681b      	ldr	r3, [r3, #0]
 802129c:	3308      	adds	r3, #8
 802129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80212a2:	e853 3f00 	ldrex	r3, [r3]
 80212a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80212a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80212ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	3308      	adds	r3, #8
 80212b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80212b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80212ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80212bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80212be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80212c0:	e841 2300 	strex	r3, r2, [r1]
 80212c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80212c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d1e5      	bne.n	8021298 <UART_Start_Receive_IT+0x160>
 80212cc:	e046      	b.n	802135c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80212ce:	68fb      	ldr	r3, [r7, #12]
 80212d0:	689b      	ldr	r3, [r3, #8]
 80212d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80212d6:	d107      	bne.n	80212e8 <UART_Start_Receive_IT+0x1b0>
 80212d8:	68fb      	ldr	r3, [r7, #12]
 80212da:	691b      	ldr	r3, [r3, #16]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d103      	bne.n	80212e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80212e0:	68fb      	ldr	r3, [r7, #12]
 80212e2:	4a24      	ldr	r2, [pc, #144]	@ (8021374 <UART_Start_Receive_IT+0x23c>)
 80212e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80212e6:	e002      	b.n	80212ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80212e8:	68fb      	ldr	r3, [r7, #12]
 80212ea:	4a23      	ldr	r2, [pc, #140]	@ (8021378 <UART_Start_Receive_IT+0x240>)
 80212ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	691b      	ldr	r3, [r3, #16]
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d019      	beq.n	802132a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212fe:	e853 3f00 	ldrex	r3, [r3]
 8021302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8021304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021306:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 802130a:	677b      	str	r3, [r7, #116]	@ 0x74
 802130c:	68fb      	ldr	r3, [r7, #12]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	461a      	mov	r2, r3
 8021312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021314:	637b      	str	r3, [r7, #52]	@ 0x34
 8021316:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021318:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802131a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802131c:	e841 2300 	strex	r3, r2, [r1]
 8021320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8021322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021324:	2b00      	cmp	r3, #0
 8021326:	d1e6      	bne.n	80212f6 <UART_Start_Receive_IT+0x1be>
 8021328:	e018      	b.n	802135c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	681b      	ldr	r3, [r3, #0]
 802132e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021330:	697b      	ldr	r3, [r7, #20]
 8021332:	e853 3f00 	ldrex	r3, [r3]
 8021336:	613b      	str	r3, [r7, #16]
   return(result);
 8021338:	693b      	ldr	r3, [r7, #16]
 802133a:	f043 0320 	orr.w	r3, r3, #32
 802133e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8021340:	68fb      	ldr	r3, [r7, #12]
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	461a      	mov	r2, r3
 8021346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8021348:	623b      	str	r3, [r7, #32]
 802134a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802134c:	69f9      	ldr	r1, [r7, #28]
 802134e:	6a3a      	ldr	r2, [r7, #32]
 8021350:	e841 2300 	strex	r3, r2, [r1]
 8021354:	61bb      	str	r3, [r7, #24]
   return(result);
 8021356:	69bb      	ldr	r3, [r7, #24]
 8021358:	2b00      	cmp	r3, #0
 802135a:	d1e6      	bne.n	802132a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 802135c:	2300      	movs	r3, #0
}
 802135e:	4618      	mov	r0, r3
 8021360:	378c      	adds	r7, #140	@ 0x8c
 8021362:	46bd      	mov	sp, r7
 8021364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021368:	4770      	bx	lr
 802136a:	bf00      	nop
 802136c:	08021b9d 	.word	0x08021b9d
 8021370:	0802183d 	.word	0x0802183d
 8021374:	08021685 	.word	0x08021685
 8021378:	080214cd 	.word	0x080214cd

0802137c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802137c:	b480      	push	{r7}
 802137e:	b095      	sub	sp, #84	@ 0x54
 8021380:	af00      	add	r7, sp, #0
 8021382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802138c:	e853 3f00 	ldrex	r3, [r3]
 8021390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	461a      	mov	r2, r3
 80213a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80213a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80213a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80213a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80213aa:	e841 2300 	strex	r3, r2, [r1]
 80213ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80213b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d1e6      	bne.n	8021384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	3308      	adds	r3, #8
 80213bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213be:	6a3b      	ldr	r3, [r7, #32]
 80213c0:	e853 3f00 	ldrex	r3, [r3]
 80213c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80213c6:	69fa      	ldr	r2, [r7, #28]
 80213c8:	4b1e      	ldr	r3, [pc, #120]	@ (8021444 <UART_EndRxTransfer+0xc8>)
 80213ca:	4013      	ands	r3, r2
 80213cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	3308      	adds	r3, #8
 80213d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80213d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80213d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80213dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80213de:	e841 2300 	strex	r3, r2, [r1]
 80213e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80213e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d1e5      	bne.n	80213b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80213ee:	2b01      	cmp	r3, #1
 80213f0:	d118      	bne.n	8021424 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	e853 3f00 	ldrex	r3, [r3]
 80213fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8021400:	68bb      	ldr	r3, [r7, #8]
 8021402:	f023 0310 	bic.w	r3, r3, #16
 8021406:	647b      	str	r3, [r7, #68]	@ 0x44
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	681b      	ldr	r3, [r3, #0]
 802140c:	461a      	mov	r2, r3
 802140e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021410:	61bb      	str	r3, [r7, #24]
 8021412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021414:	6979      	ldr	r1, [r7, #20]
 8021416:	69ba      	ldr	r2, [r7, #24]
 8021418:	e841 2300 	strex	r3, r2, [r1]
 802141c:	613b      	str	r3, [r7, #16]
   return(result);
 802141e:	693b      	ldr	r3, [r7, #16]
 8021420:	2b00      	cmp	r3, #0
 8021422:	d1e6      	bne.n	80213f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	2220      	movs	r2, #32
 8021428:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	2200      	movs	r2, #0
 8021430:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021432:	687b      	ldr	r3, [r7, #4]
 8021434:	2200      	movs	r2, #0
 8021436:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021438:	bf00      	nop
 802143a:	3754      	adds	r7, #84	@ 0x54
 802143c:	46bd      	mov	sp, r7
 802143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021442:	4770      	bx	lr
 8021444:	effffffe 	.word	0xeffffffe

08021448 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021448:	b580      	push	{r7, lr}
 802144a:	b084      	sub	sp, #16
 802144c:	af00      	add	r7, sp, #0
 802144e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8021450:	687b      	ldr	r3, [r7, #4]
 8021452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8021456:	68fb      	ldr	r3, [r7, #12]
 8021458:	2200      	movs	r2, #0
 802145a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	2200      	movs	r2, #0
 8021462:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8021466:	68f8      	ldr	r0, [r7, #12]
 8021468:	f7fe ff2e 	bl	80202c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802146c:	bf00      	nop
 802146e:	3710      	adds	r7, #16
 8021470:	46bd      	mov	sp, r7
 8021472:	bd80      	pop	{r7, pc}

08021474 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8021474:	b580      	push	{r7, lr}
 8021476:	b088      	sub	sp, #32
 8021478:	af00      	add	r7, sp, #0
 802147a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021482:	68fb      	ldr	r3, [r7, #12]
 8021484:	e853 3f00 	ldrex	r3, [r3]
 8021488:	60bb      	str	r3, [r7, #8]
   return(result);
 802148a:	68bb      	ldr	r3, [r7, #8]
 802148c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8021490:	61fb      	str	r3, [r7, #28]
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	461a      	mov	r2, r3
 8021498:	69fb      	ldr	r3, [r7, #28]
 802149a:	61bb      	str	r3, [r7, #24]
 802149c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802149e:	6979      	ldr	r1, [r7, #20]
 80214a0:	69ba      	ldr	r2, [r7, #24]
 80214a2:	e841 2300 	strex	r3, r2, [r1]
 80214a6:	613b      	str	r3, [r7, #16]
   return(result);
 80214a8:	693b      	ldr	r3, [r7, #16]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d1e6      	bne.n	802147c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	2220      	movs	r2, #32
 80214b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80214b6:	687b      	ldr	r3, [r7, #4]
 80214b8:	2200      	movs	r2, #0
 80214ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80214bc:	6878      	ldr	r0, [r7, #4]
 80214be:	f7fe fef9 	bl	80202b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80214c2:	bf00      	nop
 80214c4:	3720      	adds	r7, #32
 80214c6:	46bd      	mov	sp, r7
 80214c8:	bd80      	pop	{r7, pc}
	...

080214cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80214cc:	b580      	push	{r7, lr}
 80214ce:	b09c      	sub	sp, #112	@ 0x70
 80214d0:	af00      	add	r7, sp, #0
 80214d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80214da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80214e4:	2b22      	cmp	r3, #34	@ 0x22
 80214e6:	f040 80be 	bne.w	8021666 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80214f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80214f8:	b2d9      	uxtb	r1, r3
 80214fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80214fe:	b2da      	uxtb	r2, r3
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021504:	400a      	ands	r2, r1
 8021506:	b2d2      	uxtb	r2, r2
 8021508:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 802150a:	687b      	ldr	r3, [r7, #4]
 802150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802150e:	1c5a      	adds	r2, r3, #1
 8021510:	687b      	ldr	r3, [r7, #4]
 8021512:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802151a:	b29b      	uxth	r3, r3
 802151c:	3b01      	subs	r3, #1
 802151e:	b29a      	uxth	r2, r3
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802152c:	b29b      	uxth	r3, r3
 802152e:	2b00      	cmp	r3, #0
 8021530:	f040 80a1 	bne.w	8021676 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	681b      	ldr	r3, [r3, #0]
 8021538:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802153a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802153c:	e853 3f00 	ldrex	r3, [r3]
 8021540:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8021542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021548:	66bb      	str	r3, [r7, #104]	@ 0x68
 802154a:	687b      	ldr	r3, [r7, #4]
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	461a      	mov	r2, r3
 8021550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8021552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021554:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021556:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8021558:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802155a:	e841 2300 	strex	r3, r2, [r1]
 802155e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8021560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021562:	2b00      	cmp	r3, #0
 8021564:	d1e6      	bne.n	8021534 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	3308      	adds	r3, #8
 802156c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802156e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021570:	e853 3f00 	ldrex	r3, [r3]
 8021574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8021576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021578:	f023 0301 	bic.w	r3, r3, #1
 802157c:	667b      	str	r3, [r7, #100]	@ 0x64
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	681b      	ldr	r3, [r3, #0]
 8021582:	3308      	adds	r3, #8
 8021584:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8021586:	647a      	str	r2, [r7, #68]	@ 0x44
 8021588:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802158a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802158c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802158e:	e841 2300 	strex	r3, r2, [r1]
 8021592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8021594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021596:	2b00      	cmp	r3, #0
 8021598:	d1e5      	bne.n	8021566 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	2220      	movs	r2, #32
 802159e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	2200      	movs	r2, #0
 80215a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	2200      	movs	r2, #0
 80215ac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	681b      	ldr	r3, [r3, #0]
 80215b2:	4a33      	ldr	r2, [pc, #204]	@ (8021680 <UART_RxISR_8BIT+0x1b4>)
 80215b4:	4293      	cmp	r3, r2
 80215b6:	d01f      	beq.n	80215f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	685b      	ldr	r3, [r3, #4]
 80215be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d018      	beq.n	80215f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	681b      	ldr	r3, [r3, #0]
 80215ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80215cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215ce:	e853 3f00 	ldrex	r3, [r3]
 80215d2:	623b      	str	r3, [r7, #32]
   return(result);
 80215d4:	6a3b      	ldr	r3, [r7, #32]
 80215d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80215da:	663b      	str	r3, [r7, #96]	@ 0x60
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	681b      	ldr	r3, [r3, #0]
 80215e0:	461a      	mov	r2, r3
 80215e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80215e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80215e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80215e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80215ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80215ec:	e841 2300 	strex	r3, r2, [r1]
 80215f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80215f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d1e6      	bne.n	80215c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80215fc:	2b01      	cmp	r3, #1
 80215fe:	d12e      	bne.n	802165e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	2200      	movs	r2, #0
 8021604:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802160c:	693b      	ldr	r3, [r7, #16]
 802160e:	e853 3f00 	ldrex	r3, [r3]
 8021612:	60fb      	str	r3, [r7, #12]
   return(result);
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	f023 0310 	bic.w	r3, r3, #16
 802161a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	461a      	mov	r2, r3
 8021622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021624:	61fb      	str	r3, [r7, #28]
 8021626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021628:	69b9      	ldr	r1, [r7, #24]
 802162a:	69fa      	ldr	r2, [r7, #28]
 802162c:	e841 2300 	strex	r3, r2, [r1]
 8021630:	617b      	str	r3, [r7, #20]
   return(result);
 8021632:	697b      	ldr	r3, [r7, #20]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d1e6      	bne.n	8021606 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	69db      	ldr	r3, [r3, #28]
 802163e:	f003 0310 	and.w	r3, r3, #16
 8021642:	2b10      	cmp	r3, #16
 8021644:	d103      	bne.n	802164e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	2210      	movs	r2, #16
 802164c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8021654:	4619      	mov	r1, r3
 8021656:	6878      	ldr	r0, [r7, #4]
 8021658:	f7fe fe40 	bl	80202dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802165c:	e00b      	b.n	8021676 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 802165e:	6878      	ldr	r0, [r7, #4]
 8021660:	f7df fb50 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 8021664:	e007      	b.n	8021676 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	699a      	ldr	r2, [r3, #24]
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	f042 0208 	orr.w	r2, r2, #8
 8021674:	619a      	str	r2, [r3, #24]
}
 8021676:	bf00      	nop
 8021678:	3770      	adds	r7, #112	@ 0x70
 802167a:	46bd      	mov	sp, r7
 802167c:	bd80      	pop	{r7, pc}
 802167e:	bf00      	nop
 8021680:	58000c00 	.word	0x58000c00

08021684 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8021684:	b580      	push	{r7, lr}
 8021686:	b09c      	sub	sp, #112	@ 0x70
 8021688:	af00      	add	r7, sp, #0
 802168a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8021692:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802169c:	2b22      	cmp	r3, #34	@ 0x22
 802169e:	f040 80be 	bne.w	802181e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	681b      	ldr	r3, [r3, #0]
 80216a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80216b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80216b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80216b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80216ba:	4013      	ands	r3, r2
 80216bc:	b29a      	uxth	r2, r3
 80216be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80216c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80216c6:	1c9a      	adds	r2, r3, #2
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80216d2:	b29b      	uxth	r3, r3
 80216d4:	3b01      	subs	r3, #1
 80216d6:	b29a      	uxth	r2, r3
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80216e4:	b29b      	uxth	r3, r3
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	f040 80a1 	bne.w	802182e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80216f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80216f4:	e853 3f00 	ldrex	r3, [r3]
 80216f8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80216fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80216fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021700:	667b      	str	r3, [r7, #100]	@ 0x64
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	461a      	mov	r2, r3
 8021708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802170a:	657b      	str	r3, [r7, #84]	@ 0x54
 802170c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802170e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021710:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021712:	e841 2300 	strex	r3, r2, [r1]
 8021716:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8021718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802171a:	2b00      	cmp	r3, #0
 802171c:	d1e6      	bne.n	80216ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	681b      	ldr	r3, [r3, #0]
 8021722:	3308      	adds	r3, #8
 8021724:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021728:	e853 3f00 	ldrex	r3, [r3]
 802172c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802172e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021730:	f023 0301 	bic.w	r3, r3, #1
 8021734:	663b      	str	r3, [r7, #96]	@ 0x60
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	3308      	adds	r3, #8
 802173c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802173e:	643a      	str	r2, [r7, #64]	@ 0x40
 8021740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021742:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021746:	e841 2300 	strex	r3, r2, [r1]
 802174a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802174e:	2b00      	cmp	r3, #0
 8021750:	d1e5      	bne.n	802171e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	2220      	movs	r2, #32
 8021756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	2200      	movs	r2, #0
 802175e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	2200      	movs	r2, #0
 8021764:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	681b      	ldr	r3, [r3, #0]
 802176a:	4a33      	ldr	r2, [pc, #204]	@ (8021838 <UART_RxISR_16BIT+0x1b4>)
 802176c:	4293      	cmp	r3, r2
 802176e:	d01f      	beq.n	80217b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	685b      	ldr	r3, [r3, #4]
 8021776:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802177a:	2b00      	cmp	r3, #0
 802177c:	d018      	beq.n	80217b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	681b      	ldr	r3, [r3, #0]
 8021782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021784:	6a3b      	ldr	r3, [r7, #32]
 8021786:	e853 3f00 	ldrex	r3, [r3]
 802178a:	61fb      	str	r3, [r7, #28]
   return(result);
 802178c:	69fb      	ldr	r3, [r7, #28]
 802178e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8021792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	461a      	mov	r2, r3
 802179a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802179c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802179e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80217a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80217a4:	e841 2300 	strex	r3, r2, [r1]
 80217a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80217aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d1e6      	bne.n	802177e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80217b0:	687b      	ldr	r3, [r7, #4]
 80217b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80217b4:	2b01      	cmp	r3, #1
 80217b6:	d12e      	bne.n	8021816 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80217b8:	687b      	ldr	r3, [r7, #4]
 80217ba:	2200      	movs	r2, #0
 80217bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80217be:	687b      	ldr	r3, [r7, #4]
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217c4:	68fb      	ldr	r3, [r7, #12]
 80217c6:	e853 3f00 	ldrex	r3, [r3]
 80217ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80217cc:	68bb      	ldr	r3, [r7, #8]
 80217ce:	f023 0310 	bic.w	r3, r3, #16
 80217d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	461a      	mov	r2, r3
 80217da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80217dc:	61bb      	str	r3, [r7, #24]
 80217de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217e0:	6979      	ldr	r1, [r7, #20]
 80217e2:	69ba      	ldr	r2, [r7, #24]
 80217e4:	e841 2300 	strex	r3, r2, [r1]
 80217e8:	613b      	str	r3, [r7, #16]
   return(result);
 80217ea:	693b      	ldr	r3, [r7, #16]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d1e6      	bne.n	80217be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	69db      	ldr	r3, [r3, #28]
 80217f6:	f003 0310 	and.w	r3, r3, #16
 80217fa:	2b10      	cmp	r3, #16
 80217fc:	d103      	bne.n	8021806 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	681b      	ldr	r3, [r3, #0]
 8021802:	2210      	movs	r2, #16
 8021804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021806:	687b      	ldr	r3, [r7, #4]
 8021808:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 802180c:	4619      	mov	r1, r3
 802180e:	6878      	ldr	r0, [r7, #4]
 8021810:	f7fe fd64 	bl	80202dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8021814:	e00b      	b.n	802182e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8021816:	6878      	ldr	r0, [r7, #4]
 8021818:	f7df fa74 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 802181c:	e007      	b.n	802182e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	699a      	ldr	r2, [r3, #24]
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	681b      	ldr	r3, [r3, #0]
 8021828:	f042 0208 	orr.w	r2, r2, #8
 802182c:	619a      	str	r2, [r3, #24]
}
 802182e:	bf00      	nop
 8021830:	3770      	adds	r7, #112	@ 0x70
 8021832:	46bd      	mov	sp, r7
 8021834:	bd80      	pop	{r7, pc}
 8021836:	bf00      	nop
 8021838:	58000c00 	.word	0x58000c00

0802183c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 802183c:	b580      	push	{r7, lr}
 802183e:	b0ac      	sub	sp, #176	@ 0xb0
 8021840:	af00      	add	r7, sp, #0
 8021842:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8021844:	687b      	ldr	r3, [r7, #4]
 8021846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 802184a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 802184e:	687b      	ldr	r3, [r7, #4]
 8021850:	681b      	ldr	r3, [r3, #0]
 8021852:	69db      	ldr	r3, [r3, #28]
 8021854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	681b      	ldr	r3, [r3, #0]
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8021862:	687b      	ldr	r3, [r7, #4]
 8021864:	681b      	ldr	r3, [r3, #0]
 8021866:	689b      	ldr	r3, [r3, #8]
 8021868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021872:	2b22      	cmp	r3, #34	@ 0x22
 8021874:	f040 8180 	bne.w	8021b78 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802187e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8021882:	e123      	b.n	8021acc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8021884:	687b      	ldr	r3, [r7, #4]
 8021886:	681b      	ldr	r3, [r3, #0]
 8021888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802188a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 802188e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8021892:	b2d9      	uxtb	r1, r3
 8021894:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8021898:	b2da      	uxtb	r2, r3
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802189e:	400a      	ands	r2, r1
 80218a0:	b2d2      	uxtb	r2, r2
 80218a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80218a8:	1c5a      	adds	r2, r3, #1
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80218b4:	b29b      	uxth	r3, r3
 80218b6:	3b01      	subs	r3, #1
 80218b8:	b29a      	uxth	r2, r3
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	681b      	ldr	r3, [r3, #0]
 80218c4:	69db      	ldr	r3, [r3, #28]
 80218c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80218ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80218ce:	f003 0307 	and.w	r3, r3, #7
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d053      	beq.n	802197e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80218d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80218da:	f003 0301 	and.w	r3, r3, #1
 80218de:	2b00      	cmp	r3, #0
 80218e0:	d011      	beq.n	8021906 <UART_RxISR_8BIT_FIFOEN+0xca>
 80218e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80218e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80218ea:	2b00      	cmp	r3, #0
 80218ec:	d00b      	beq.n	8021906 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	2201      	movs	r2, #1
 80218f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80218fc:	f043 0201 	orr.w	r2, r3, #1
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8021906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802190a:	f003 0302 	and.w	r3, r3, #2
 802190e:	2b00      	cmp	r3, #0
 8021910:	d011      	beq.n	8021936 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8021912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8021916:	f003 0301 	and.w	r3, r3, #1
 802191a:	2b00      	cmp	r3, #0
 802191c:	d00b      	beq.n	8021936 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	2202      	movs	r2, #2
 8021924:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802192c:	f043 0204 	orr.w	r2, r3, #4
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8021936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802193a:	f003 0304 	and.w	r3, r3, #4
 802193e:	2b00      	cmp	r3, #0
 8021940:	d011      	beq.n	8021966 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8021942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8021946:	f003 0301 	and.w	r3, r3, #1
 802194a:	2b00      	cmp	r3, #0
 802194c:	d00b      	beq.n	8021966 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	681b      	ldr	r3, [r3, #0]
 8021952:	2204      	movs	r2, #4
 8021954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802195c:	f043 0202 	orr.w	r2, r3, #2
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802196c:	2b00      	cmp	r3, #0
 802196e:	d006      	beq.n	802197e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021970:	6878      	ldr	r0, [r7, #4]
 8021972:	f7fe fca9 	bl	80202c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	2200      	movs	r2, #0
 802197a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8021984:	b29b      	uxth	r3, r3
 8021986:	2b00      	cmp	r3, #0
 8021988:	f040 80a0 	bne.w	8021acc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	681b      	ldr	r3, [r3, #0]
 8021990:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8021994:	e853 3f00 	ldrex	r3, [r3]
 8021998:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 802199a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802199c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80219a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	461a      	mov	r2, r3
 80219aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80219ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80219b0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80219b2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80219b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80219b6:	e841 2300 	strex	r3, r2, [r1]
 80219ba:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80219bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d1e4      	bne.n	802198c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	681b      	ldr	r3, [r3, #0]
 80219c6:	3308      	adds	r3, #8
 80219c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80219ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80219cc:	e853 3f00 	ldrex	r3, [r3]
 80219d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80219d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80219d4:	4b6e      	ldr	r3, [pc, #440]	@ (8021b90 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80219d6:	4013      	ands	r3, r2
 80219d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	3308      	adds	r3, #8
 80219e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80219e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80219e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80219ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80219ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80219ee:	e841 2300 	strex	r3, r2, [r1]
 80219f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80219f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d1e3      	bne.n	80219c2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	2220      	movs	r2, #32
 80219fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	2200      	movs	r2, #0
 8021a06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	4a60      	ldr	r2, [pc, #384]	@ (8021b94 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8021a14:	4293      	cmp	r3, r2
 8021a16:	d021      	beq.n	8021a5c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	681b      	ldr	r3, [r3, #0]
 8021a1c:	685b      	ldr	r3, [r3, #4]
 8021a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d01a      	beq.n	8021a5c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	681b      	ldr	r3, [r3, #0]
 8021a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021a2e:	e853 3f00 	ldrex	r3, [r3]
 8021a32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8021a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8021a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	681b      	ldr	r3, [r3, #0]
 8021a42:	461a      	mov	r2, r3
 8021a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8021a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8021a4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021a4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021a50:	e841 2300 	strex	r3, r2, [r1]
 8021a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8021a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d1e4      	bne.n	8021a26 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021a60:	2b01      	cmp	r3, #1
 8021a62:	d130      	bne.n	8021ac6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	2200      	movs	r2, #0
 8021a68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	681b      	ldr	r3, [r3, #0]
 8021a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021a72:	e853 3f00 	ldrex	r3, [r3]
 8021a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021a7a:	f023 0310 	bic.w	r3, r3, #16
 8021a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	461a      	mov	r2, r3
 8021a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8021a8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021a94:	e841 2300 	strex	r3, r2, [r1]
 8021a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8021a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d1e4      	bne.n	8021a6a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	69db      	ldr	r3, [r3, #28]
 8021aa6:	f003 0310 	and.w	r3, r3, #16
 8021aaa:	2b10      	cmp	r3, #16
 8021aac:	d103      	bne.n	8021ab6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	2210      	movs	r2, #16
 8021ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8021abc:	4619      	mov	r1, r3
 8021abe:	6878      	ldr	r0, [r7, #4]
 8021ac0:	f7fe fc0c 	bl	80202dc <HAL_UARTEx_RxEventCallback>
 8021ac4:	e002      	b.n	8021acc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8021ac6:	6878      	ldr	r0, [r7, #4]
 8021ac8:	f7df f91c 	bl	8000d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8021acc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d006      	beq.n	8021ae2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8021ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8021ad8:	f003 0320 	and.w	r3, r3, #32
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	f47f aed1 	bne.w	8021884 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8021ae2:	687b      	ldr	r3, [r7, #4]
 8021ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8021ae8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8021aec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d049      	beq.n	8021b88 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8021afa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8021afe:	429a      	cmp	r2, r3
 8021b00:	d242      	bcs.n	8021b88 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	681b      	ldr	r3, [r3, #0]
 8021b06:	3308      	adds	r3, #8
 8021b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021b0a:	6a3b      	ldr	r3, [r7, #32]
 8021b0c:	e853 3f00 	ldrex	r3, [r3]
 8021b10:	61fb      	str	r3, [r7, #28]
   return(result);
 8021b12:	69fb      	ldr	r3, [r7, #28]
 8021b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	681b      	ldr	r3, [r3, #0]
 8021b20:	3308      	adds	r3, #8
 8021b22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8021b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8021b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021b2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021b2e:	e841 2300 	strex	r3, r2, [r1]
 8021b32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8021b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d1e3      	bne.n	8021b02 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	4a16      	ldr	r2, [pc, #88]	@ (8021b98 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8021b3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021b46:	68fb      	ldr	r3, [r7, #12]
 8021b48:	e853 3f00 	ldrex	r3, [r3]
 8021b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8021b4e:	68bb      	ldr	r3, [r7, #8]
 8021b50:	f043 0320 	orr.w	r3, r3, #32
 8021b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	461a      	mov	r2, r3
 8021b5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021b62:	61bb      	str	r3, [r7, #24]
 8021b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021b66:	6979      	ldr	r1, [r7, #20]
 8021b68:	69ba      	ldr	r2, [r7, #24]
 8021b6a:	e841 2300 	strex	r3, r2, [r1]
 8021b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8021b70:	693b      	ldr	r3, [r7, #16]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d1e4      	bne.n	8021b40 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8021b76:	e007      	b.n	8021b88 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	699a      	ldr	r2, [r3, #24]
 8021b7e:	687b      	ldr	r3, [r7, #4]
 8021b80:	681b      	ldr	r3, [r3, #0]
 8021b82:	f042 0208 	orr.w	r2, r2, #8
 8021b86:	619a      	str	r2, [r3, #24]
}
 8021b88:	bf00      	nop
 8021b8a:	37b0      	adds	r7, #176	@ 0xb0
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	bd80      	pop	{r7, pc}
 8021b90:	effffffe 	.word	0xeffffffe
 8021b94:	58000c00 	.word	0x58000c00
 8021b98:	080214cd 	.word	0x080214cd

08021b9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8021b9c:	b580      	push	{r7, lr}
 8021b9e:	b0ae      	sub	sp, #184	@ 0xb8
 8021ba0:	af00      	add	r7, sp, #0
 8021ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8021baa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	69db      	ldr	r3, [r3, #28]
 8021bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8021bb8:	687b      	ldr	r3, [r7, #4]
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	681b      	ldr	r3, [r3, #0]
 8021bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	689b      	ldr	r3, [r3, #8]
 8021bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8021bd2:	2b22      	cmp	r3, #34	@ 0x22
 8021bd4:	f040 8184 	bne.w	8021ee0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8021bde:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8021be2:	e127      	b.n	8021e34 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021bea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8021bf6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8021bfa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8021bfe:	4013      	ands	r3, r2
 8021c00:	b29a      	uxth	r2, r3
 8021c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8021c06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021c0c:	1c9a      	adds	r2, r3, #2
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8021c18:	b29b      	uxth	r3, r3
 8021c1a:	3b01      	subs	r3, #1
 8021c1c:	b29a      	uxth	r2, r3
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	681b      	ldr	r3, [r3, #0]
 8021c28:	69db      	ldr	r3, [r3, #28]
 8021c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8021c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021c32:	f003 0307 	and.w	r3, r3, #7
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	d053      	beq.n	8021ce2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8021c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021c3e:	f003 0301 	and.w	r3, r3, #1
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d011      	beq.n	8021c6a <UART_RxISR_16BIT_FIFOEN+0xce>
 8021c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8021c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d00b      	beq.n	8021c6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	2201      	movs	r2, #1
 8021c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021c60:	f043 0201 	orr.w	r2, r3, #1
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8021c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021c6e:	f003 0302 	and.w	r3, r3, #2
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	d011      	beq.n	8021c9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8021c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8021c7a:	f003 0301 	and.w	r3, r3, #1
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d00b      	beq.n	8021c9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	2202      	movs	r2, #2
 8021c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021c90:	f043 0204 	orr.w	r2, r3, #4
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8021c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021c9e:	f003 0304 	and.w	r3, r3, #4
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	d011      	beq.n	8021cca <UART_RxISR_16BIT_FIFOEN+0x12e>
 8021ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8021caa:	f003 0301 	and.w	r3, r3, #1
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d00b      	beq.n	8021cca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	2204      	movs	r2, #4
 8021cb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021cba:	687b      	ldr	r3, [r7, #4]
 8021cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021cc0:	f043 0202 	orr.w	r2, r3, #2
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021cca:	687b      	ldr	r3, [r7, #4]
 8021ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d006      	beq.n	8021ce2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021cd4:	6878      	ldr	r0, [r7, #4]
 8021cd6:	f7fe faf7 	bl	80202c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	2200      	movs	r2, #0
 8021cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8021ce8:	b29b      	uxth	r3, r3
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	f040 80a2 	bne.w	8021e34 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	681b      	ldr	r3, [r3, #0]
 8021cf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021cf8:	e853 3f00 	ldrex	r3, [r3]
 8021cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8021cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8021d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	461a      	mov	r2, r3
 8021d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8021d12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8021d16:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021d18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8021d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8021d1e:	e841 2300 	strex	r3, r2, [r1]
 8021d22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8021d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d1e2      	bne.n	8021cf0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	3308      	adds	r3, #8
 8021d30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021d34:	e853 3f00 	ldrex	r3, [r3]
 8021d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8021d3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8021d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8021ef8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8021d3e:	4013      	ands	r3, r2
 8021d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	3308      	adds	r3, #8
 8021d4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8021d4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8021d50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021d52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8021d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8021d56:	e841 2300 	strex	r3, r2, [r1]
 8021d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8021d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d1e3      	bne.n	8021d2a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	2220      	movs	r2, #32
 8021d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	2200      	movs	r2, #0
 8021d6e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	2200      	movs	r2, #0
 8021d74:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	4a60      	ldr	r2, [pc, #384]	@ (8021efc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8021d7c:	4293      	cmp	r3, r2
 8021d7e:	d021      	beq.n	8021dc4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	685b      	ldr	r3, [r3, #4]
 8021d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	d01a      	beq.n	8021dc4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d96:	e853 3f00 	ldrex	r3, [r3]
 8021d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8021d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021d9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8021da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	461a      	mov	r2, r3
 8021dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8021db0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021db2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021db4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8021db6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8021db8:	e841 2300 	strex	r3, r2, [r1]
 8021dbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8021dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d1e4      	bne.n	8021d8e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021dc8:	2b01      	cmp	r3, #1
 8021dca:	d130      	bne.n	8021e2e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	2200      	movs	r2, #0
 8021dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021dda:	e853 3f00 	ldrex	r3, [r3]
 8021dde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8021de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021de2:	f023 0310 	bic.w	r3, r3, #16
 8021de6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	461a      	mov	r2, r3
 8021df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8021df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8021df6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021dfc:	e841 2300 	strex	r3, r2, [r1]
 8021e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8021e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	d1e4      	bne.n	8021dd2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	681b      	ldr	r3, [r3, #0]
 8021e0c:	69db      	ldr	r3, [r3, #28]
 8021e0e:	f003 0310 	and.w	r3, r3, #16
 8021e12:	2b10      	cmp	r3, #16
 8021e14:	d103      	bne.n	8021e1e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	2210      	movs	r2, #16
 8021e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8021e24:	4619      	mov	r1, r3
 8021e26:	6878      	ldr	r0, [r7, #4]
 8021e28:	f7fe fa58 	bl	80202dc <HAL_UARTEx_RxEventCallback>
 8021e2c:	e002      	b.n	8021e34 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8021e2e:	6878      	ldr	r0, [r7, #4]
 8021e30:	f7de ff68 	bl	8000d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8021e34:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	d006      	beq.n	8021e4a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8021e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021e40:	f003 0320 	and.w	r3, r3, #32
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	f47f aecd 	bne.w	8021be4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8021e50:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8021e54:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	d049      	beq.n	8021ef0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8021e62:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8021e66:	429a      	cmp	r2, r3
 8021e68:	d242      	bcs.n	8021ef0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	3308      	adds	r3, #8
 8021e70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e74:	e853 3f00 	ldrex	r3, [r3]
 8021e78:	623b      	str	r3, [r7, #32]
   return(result);
 8021e7a:	6a3b      	ldr	r3, [r7, #32]
 8021e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	3308      	adds	r3, #8
 8021e8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8021e8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8021e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021e96:	e841 2300 	strex	r3, r2, [r1]
 8021e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d1e3      	bne.n	8021e6a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	4a16      	ldr	r2, [pc, #88]	@ (8021f00 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8021ea6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021eae:	693b      	ldr	r3, [r7, #16]
 8021eb0:	e853 3f00 	ldrex	r3, [r3]
 8021eb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8021eb6:	68fb      	ldr	r3, [r7, #12]
 8021eb8:	f043 0320 	orr.w	r3, r3, #32
 8021ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	461a      	mov	r2, r3
 8021ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8021eca:	61fb      	str	r3, [r7, #28]
 8021ecc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ece:	69b9      	ldr	r1, [r7, #24]
 8021ed0:	69fa      	ldr	r2, [r7, #28]
 8021ed2:	e841 2300 	strex	r3, r2, [r1]
 8021ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8021ed8:	697b      	ldr	r3, [r7, #20]
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d1e4      	bne.n	8021ea8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8021ede:	e007      	b.n	8021ef0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	699a      	ldr	r2, [r3, #24]
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	681b      	ldr	r3, [r3, #0]
 8021eea:	f042 0208 	orr.w	r2, r2, #8
 8021eee:	619a      	str	r2, [r3, #24]
}
 8021ef0:	bf00      	nop
 8021ef2:	37b8      	adds	r7, #184	@ 0xb8
 8021ef4:	46bd      	mov	sp, r7
 8021ef6:	bd80      	pop	{r7, pc}
 8021ef8:	effffffe 	.word	0xeffffffe
 8021efc:	58000c00 	.word	0x58000c00
 8021f00:	08021685 	.word	0x08021685

08021f04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8021f04:	b480      	push	{r7}
 8021f06:	b083      	sub	sp, #12
 8021f08:	af00      	add	r7, sp, #0
 8021f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8021f0c:	bf00      	nop
 8021f0e:	370c      	adds	r7, #12
 8021f10:	46bd      	mov	sp, r7
 8021f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f16:	4770      	bx	lr

08021f18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8021f18:	b480      	push	{r7}
 8021f1a:	b083      	sub	sp, #12
 8021f1c:	af00      	add	r7, sp, #0
 8021f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8021f20:	bf00      	nop
 8021f22:	370c      	adds	r7, #12
 8021f24:	46bd      	mov	sp, r7
 8021f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f2a:	4770      	bx	lr

08021f2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8021f2c:	b480      	push	{r7}
 8021f2e:	b083      	sub	sp, #12
 8021f30:	af00      	add	r7, sp, #0
 8021f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8021f34:	bf00      	nop
 8021f36:	370c      	adds	r7, #12
 8021f38:	46bd      	mov	sp, r7
 8021f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f3e:	4770      	bx	lr

08021f40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021f40:	b480      	push	{r7}
 8021f42:	b085      	sub	sp, #20
 8021f44:	af00      	add	r7, sp, #0
 8021f46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021f4e:	2b01      	cmp	r3, #1
 8021f50:	d101      	bne.n	8021f56 <HAL_UARTEx_DisableFifoMode+0x16>
 8021f52:	2302      	movs	r3, #2
 8021f54:	e027      	b.n	8021fa6 <HAL_UARTEx_DisableFifoMode+0x66>
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	2201      	movs	r2, #1
 8021f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	2224      	movs	r2, #36	@ 0x24
 8021f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	681b      	ldr	r3, [r3, #0]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	681a      	ldr	r2, [r3, #0]
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	f022 0201 	bic.w	r2, r2, #1
 8021f7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021f7e:	68fb      	ldr	r3, [r7, #12]
 8021f80:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8021f84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	2200      	movs	r2, #0
 8021f8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021f8c:	687b      	ldr	r3, [r7, #4]
 8021f8e:	681b      	ldr	r3, [r3, #0]
 8021f90:	68fa      	ldr	r2, [r7, #12]
 8021f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	2220      	movs	r2, #32
 8021f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	2200      	movs	r2, #0
 8021fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021fa4:	2300      	movs	r3, #0
}
 8021fa6:	4618      	mov	r0, r3
 8021fa8:	3714      	adds	r7, #20
 8021faa:	46bd      	mov	sp, r7
 8021fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fb0:	4770      	bx	lr

08021fb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021fb2:	b580      	push	{r7, lr}
 8021fb4:	b084      	sub	sp, #16
 8021fb6:	af00      	add	r7, sp, #0
 8021fb8:	6078      	str	r0, [r7, #4]
 8021fba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021fbc:	687b      	ldr	r3, [r7, #4]
 8021fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021fc2:	2b01      	cmp	r3, #1
 8021fc4:	d101      	bne.n	8021fca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8021fc6:	2302      	movs	r3, #2
 8021fc8:	e02d      	b.n	8022026 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	2201      	movs	r2, #1
 8021fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	2224      	movs	r2, #36	@ 0x24
 8021fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	681b      	ldr	r3, [r3, #0]
 8021fde:	681b      	ldr	r3, [r3, #0]
 8021fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	681a      	ldr	r2, [r3, #0]
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	f022 0201 	bic.w	r2, r2, #1
 8021ff0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8021ff2:	687b      	ldr	r3, [r7, #4]
 8021ff4:	681b      	ldr	r3, [r3, #0]
 8021ff6:	689b      	ldr	r3, [r3, #8]
 8021ff8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	681b      	ldr	r3, [r3, #0]
 8022000:	683a      	ldr	r2, [r7, #0]
 8022002:	430a      	orrs	r2, r1
 8022004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022006:	6878      	ldr	r0, [r7, #4]
 8022008:	f000 f850 	bl	80220ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	68fa      	ldr	r2, [r7, #12]
 8022012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	2220      	movs	r2, #32
 8022018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	2200      	movs	r2, #0
 8022020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022024:	2300      	movs	r3, #0
}
 8022026:	4618      	mov	r0, r3
 8022028:	3710      	adds	r7, #16
 802202a:	46bd      	mov	sp, r7
 802202c:	bd80      	pop	{r7, pc}

0802202e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802202e:	b580      	push	{r7, lr}
 8022030:	b084      	sub	sp, #16
 8022032:	af00      	add	r7, sp, #0
 8022034:	6078      	str	r0, [r7, #4]
 8022036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802203e:	2b01      	cmp	r3, #1
 8022040:	d101      	bne.n	8022046 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022042:	2302      	movs	r3, #2
 8022044:	e02d      	b.n	80220a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	2201      	movs	r2, #1
 802204a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	2224      	movs	r2, #36	@ 0x24
 8022052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	681b      	ldr	r3, [r3, #0]
 802205c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802205e:	687b      	ldr	r3, [r7, #4]
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	681a      	ldr	r2, [r3, #0]
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	681b      	ldr	r3, [r3, #0]
 8022068:	f022 0201 	bic.w	r2, r2, #1
 802206c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802206e:	687b      	ldr	r3, [r7, #4]
 8022070:	681b      	ldr	r3, [r3, #0]
 8022072:	689b      	ldr	r3, [r3, #8]
 8022074:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	683a      	ldr	r2, [r7, #0]
 802207e:	430a      	orrs	r2, r1
 8022080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022082:	6878      	ldr	r0, [r7, #4]
 8022084:	f000 f812 	bl	80220ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	68fa      	ldr	r2, [r7, #12]
 802208e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	2220      	movs	r2, #32
 8022094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022098:	687b      	ldr	r3, [r7, #4]
 802209a:	2200      	movs	r2, #0
 802209c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80220a0:	2300      	movs	r3, #0
}
 80220a2:	4618      	mov	r0, r3
 80220a4:	3710      	adds	r7, #16
 80220a6:	46bd      	mov	sp, r7
 80220a8:	bd80      	pop	{r7, pc}
	...

080220ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80220ac:	b480      	push	{r7}
 80220ae:	b085      	sub	sp, #20
 80220b0:	af00      	add	r7, sp, #0
 80220b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d108      	bne.n	80220ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	2201      	movs	r2, #1
 80220c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	2201      	movs	r2, #1
 80220c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80220cc:	e031      	b.n	8022132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80220ce:	2310      	movs	r3, #16
 80220d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80220d2:	2310      	movs	r3, #16
 80220d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	689b      	ldr	r3, [r3, #8]
 80220dc:	0e5b      	lsrs	r3, r3, #25
 80220de:	b2db      	uxtb	r3, r3
 80220e0:	f003 0307 	and.w	r3, r3, #7
 80220e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80220e6:	687b      	ldr	r3, [r7, #4]
 80220e8:	681b      	ldr	r3, [r3, #0]
 80220ea:	689b      	ldr	r3, [r3, #8]
 80220ec:	0f5b      	lsrs	r3, r3, #29
 80220ee:	b2db      	uxtb	r3, r3
 80220f0:	f003 0307 	and.w	r3, r3, #7
 80220f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80220f6:	7bbb      	ldrb	r3, [r7, #14]
 80220f8:	7b3a      	ldrb	r2, [r7, #12]
 80220fa:	4911      	ldr	r1, [pc, #68]	@ (8022140 <UARTEx_SetNbDataToProcess+0x94>)
 80220fc:	5c8a      	ldrb	r2, [r1, r2]
 80220fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8022102:	7b3a      	ldrb	r2, [r7, #12]
 8022104:	490f      	ldr	r1, [pc, #60]	@ (8022144 <UARTEx_SetNbDataToProcess+0x98>)
 8022106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022108:	fb93 f3f2 	sdiv	r3, r3, r2
 802210c:	b29a      	uxth	r2, r3
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022114:	7bfb      	ldrb	r3, [r7, #15]
 8022116:	7b7a      	ldrb	r2, [r7, #13]
 8022118:	4909      	ldr	r1, [pc, #36]	@ (8022140 <UARTEx_SetNbDataToProcess+0x94>)
 802211a:	5c8a      	ldrb	r2, [r1, r2]
 802211c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8022120:	7b7a      	ldrb	r2, [r7, #13]
 8022122:	4908      	ldr	r1, [pc, #32]	@ (8022144 <UARTEx_SetNbDataToProcess+0x98>)
 8022124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022126:	fb93 f3f2 	sdiv	r3, r3, r2
 802212a:	b29a      	uxth	r2, r3
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8022132:	bf00      	nop
 8022134:	3714      	adds	r7, #20
 8022136:	46bd      	mov	sp, r7
 8022138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802213c:	4770      	bx	lr
 802213e:	bf00      	nop
 8022140:	08036a44 	.word	0x08036a44
 8022144:	08036a4c 	.word	0x08036a4c

08022148 <__assert_func>:
 8022148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802214a:	4614      	mov	r4, r2
 802214c:	461a      	mov	r2, r3
 802214e:	4b09      	ldr	r3, [pc, #36]	@ (8022174 <__assert_func+0x2c>)
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	4605      	mov	r5, r0
 8022154:	68d8      	ldr	r0, [r3, #12]
 8022156:	b954      	cbnz	r4, 802216e <__assert_func+0x26>
 8022158:	4b07      	ldr	r3, [pc, #28]	@ (8022178 <__assert_func+0x30>)
 802215a:	461c      	mov	r4, r3
 802215c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022160:	9100      	str	r1, [sp, #0]
 8022162:	462b      	mov	r3, r5
 8022164:	4905      	ldr	r1, [pc, #20]	@ (802217c <__assert_func+0x34>)
 8022166:	f001 f8ff 	bl	8023368 <fiprintf>
 802216a:	f001 fb95 	bl	8023898 <abort>
 802216e:	4b04      	ldr	r3, [pc, #16]	@ (8022180 <__assert_func+0x38>)
 8022170:	e7f4      	b.n	802215c <__assert_func+0x14>
 8022172:	bf00      	nop
 8022174:	240007ac 	.word	0x240007ac
 8022178:	08036a8f 	.word	0x08036a8f
 802217c:	08036a61 	.word	0x08036a61
 8022180:	08036a54 	.word	0x08036a54

08022184 <atoi>:
 8022184:	220a      	movs	r2, #10
 8022186:	2100      	movs	r1, #0
 8022188:	f000 b984 	b.w	8022494 <strtol>

0802218c <calloc>:
 802218c:	4b02      	ldr	r3, [pc, #8]	@ (8022198 <calloc+0xc>)
 802218e:	460a      	mov	r2, r1
 8022190:	4601      	mov	r1, r0
 8022192:	6818      	ldr	r0, [r3, #0]
 8022194:	f000 b802 	b.w	802219c <_calloc_r>
 8022198:	240007ac 	.word	0x240007ac

0802219c <_calloc_r>:
 802219c:	b570      	push	{r4, r5, r6, lr}
 802219e:	fba1 5402 	umull	r5, r4, r1, r2
 80221a2:	b93c      	cbnz	r4, 80221b4 <_calloc_r+0x18>
 80221a4:	4629      	mov	r1, r5
 80221a6:	f000 f83f 	bl	8022228 <_malloc_r>
 80221aa:	4606      	mov	r6, r0
 80221ac:	b928      	cbnz	r0, 80221ba <_calloc_r+0x1e>
 80221ae:	2600      	movs	r6, #0
 80221b0:	4630      	mov	r0, r6
 80221b2:	bd70      	pop	{r4, r5, r6, pc}
 80221b4:	220c      	movs	r2, #12
 80221b6:	6002      	str	r2, [r0, #0]
 80221b8:	e7f9      	b.n	80221ae <_calloc_r+0x12>
 80221ba:	462a      	mov	r2, r5
 80221bc:	4621      	mov	r1, r4
 80221be:	f001 fa61 	bl	8023684 <memset>
 80221c2:	e7f5      	b.n	80221b0 <_calloc_r+0x14>

080221c4 <malloc>:
 80221c4:	4b02      	ldr	r3, [pc, #8]	@ (80221d0 <malloc+0xc>)
 80221c6:	4601      	mov	r1, r0
 80221c8:	6818      	ldr	r0, [r3, #0]
 80221ca:	f000 b82d 	b.w	8022228 <_malloc_r>
 80221ce:	bf00      	nop
 80221d0:	240007ac 	.word	0x240007ac

080221d4 <free>:
 80221d4:	4b02      	ldr	r3, [pc, #8]	@ (80221e0 <free+0xc>)
 80221d6:	4601      	mov	r1, r0
 80221d8:	6818      	ldr	r0, [r3, #0]
 80221da:	f002 b943 	b.w	8024464 <_free_r>
 80221de:	bf00      	nop
 80221e0:	240007ac 	.word	0x240007ac

080221e4 <sbrk_aligned>:
 80221e4:	b570      	push	{r4, r5, r6, lr}
 80221e6:	4e0f      	ldr	r6, [pc, #60]	@ (8022224 <sbrk_aligned+0x40>)
 80221e8:	460c      	mov	r4, r1
 80221ea:	6831      	ldr	r1, [r6, #0]
 80221ec:	4605      	mov	r5, r0
 80221ee:	b911      	cbnz	r1, 80221f6 <sbrk_aligned+0x12>
 80221f0:	f001 fae6 	bl	80237c0 <_sbrk_r>
 80221f4:	6030      	str	r0, [r6, #0]
 80221f6:	4621      	mov	r1, r4
 80221f8:	4628      	mov	r0, r5
 80221fa:	f001 fae1 	bl	80237c0 <_sbrk_r>
 80221fe:	1c43      	adds	r3, r0, #1
 8022200:	d103      	bne.n	802220a <sbrk_aligned+0x26>
 8022202:	f04f 34ff 	mov.w	r4, #4294967295
 8022206:	4620      	mov	r0, r4
 8022208:	bd70      	pop	{r4, r5, r6, pc}
 802220a:	1cc4      	adds	r4, r0, #3
 802220c:	f024 0403 	bic.w	r4, r4, #3
 8022210:	42a0      	cmp	r0, r4
 8022212:	d0f8      	beq.n	8022206 <sbrk_aligned+0x22>
 8022214:	1a21      	subs	r1, r4, r0
 8022216:	4628      	mov	r0, r5
 8022218:	f001 fad2 	bl	80237c0 <_sbrk_r>
 802221c:	3001      	adds	r0, #1
 802221e:	d1f2      	bne.n	8022206 <sbrk_aligned+0x22>
 8022220:	e7ef      	b.n	8022202 <sbrk_aligned+0x1e>
 8022222:	bf00      	nop
 8022224:	24003ef0 	.word	0x24003ef0

08022228 <_malloc_r>:
 8022228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802222c:	1ccd      	adds	r5, r1, #3
 802222e:	f025 0503 	bic.w	r5, r5, #3
 8022232:	3508      	adds	r5, #8
 8022234:	2d0c      	cmp	r5, #12
 8022236:	bf38      	it	cc
 8022238:	250c      	movcc	r5, #12
 802223a:	2d00      	cmp	r5, #0
 802223c:	4606      	mov	r6, r0
 802223e:	db01      	blt.n	8022244 <_malloc_r+0x1c>
 8022240:	42a9      	cmp	r1, r5
 8022242:	d904      	bls.n	802224e <_malloc_r+0x26>
 8022244:	230c      	movs	r3, #12
 8022246:	6033      	str	r3, [r6, #0]
 8022248:	2000      	movs	r0, #0
 802224a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802224e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022324 <_malloc_r+0xfc>
 8022252:	f000 f869 	bl	8022328 <__malloc_lock>
 8022256:	f8d8 3000 	ldr.w	r3, [r8]
 802225a:	461c      	mov	r4, r3
 802225c:	bb44      	cbnz	r4, 80222b0 <_malloc_r+0x88>
 802225e:	4629      	mov	r1, r5
 8022260:	4630      	mov	r0, r6
 8022262:	f7ff ffbf 	bl	80221e4 <sbrk_aligned>
 8022266:	1c43      	adds	r3, r0, #1
 8022268:	4604      	mov	r4, r0
 802226a:	d158      	bne.n	802231e <_malloc_r+0xf6>
 802226c:	f8d8 4000 	ldr.w	r4, [r8]
 8022270:	4627      	mov	r7, r4
 8022272:	2f00      	cmp	r7, #0
 8022274:	d143      	bne.n	80222fe <_malloc_r+0xd6>
 8022276:	2c00      	cmp	r4, #0
 8022278:	d04b      	beq.n	8022312 <_malloc_r+0xea>
 802227a:	6823      	ldr	r3, [r4, #0]
 802227c:	4639      	mov	r1, r7
 802227e:	4630      	mov	r0, r6
 8022280:	eb04 0903 	add.w	r9, r4, r3
 8022284:	f001 fa9c 	bl	80237c0 <_sbrk_r>
 8022288:	4581      	cmp	r9, r0
 802228a:	d142      	bne.n	8022312 <_malloc_r+0xea>
 802228c:	6821      	ldr	r1, [r4, #0]
 802228e:	1a6d      	subs	r5, r5, r1
 8022290:	4629      	mov	r1, r5
 8022292:	4630      	mov	r0, r6
 8022294:	f7ff ffa6 	bl	80221e4 <sbrk_aligned>
 8022298:	3001      	adds	r0, #1
 802229a:	d03a      	beq.n	8022312 <_malloc_r+0xea>
 802229c:	6823      	ldr	r3, [r4, #0]
 802229e:	442b      	add	r3, r5
 80222a0:	6023      	str	r3, [r4, #0]
 80222a2:	f8d8 3000 	ldr.w	r3, [r8]
 80222a6:	685a      	ldr	r2, [r3, #4]
 80222a8:	bb62      	cbnz	r2, 8022304 <_malloc_r+0xdc>
 80222aa:	f8c8 7000 	str.w	r7, [r8]
 80222ae:	e00f      	b.n	80222d0 <_malloc_r+0xa8>
 80222b0:	6822      	ldr	r2, [r4, #0]
 80222b2:	1b52      	subs	r2, r2, r5
 80222b4:	d420      	bmi.n	80222f8 <_malloc_r+0xd0>
 80222b6:	2a0b      	cmp	r2, #11
 80222b8:	d917      	bls.n	80222ea <_malloc_r+0xc2>
 80222ba:	1961      	adds	r1, r4, r5
 80222bc:	42a3      	cmp	r3, r4
 80222be:	6025      	str	r5, [r4, #0]
 80222c0:	bf18      	it	ne
 80222c2:	6059      	strne	r1, [r3, #4]
 80222c4:	6863      	ldr	r3, [r4, #4]
 80222c6:	bf08      	it	eq
 80222c8:	f8c8 1000 	streq.w	r1, [r8]
 80222cc:	5162      	str	r2, [r4, r5]
 80222ce:	604b      	str	r3, [r1, #4]
 80222d0:	4630      	mov	r0, r6
 80222d2:	f000 f82f 	bl	8022334 <__malloc_unlock>
 80222d6:	f104 000b 	add.w	r0, r4, #11
 80222da:	1d23      	adds	r3, r4, #4
 80222dc:	f020 0007 	bic.w	r0, r0, #7
 80222e0:	1ac2      	subs	r2, r0, r3
 80222e2:	bf1c      	itt	ne
 80222e4:	1a1b      	subne	r3, r3, r0
 80222e6:	50a3      	strne	r3, [r4, r2]
 80222e8:	e7af      	b.n	802224a <_malloc_r+0x22>
 80222ea:	6862      	ldr	r2, [r4, #4]
 80222ec:	42a3      	cmp	r3, r4
 80222ee:	bf0c      	ite	eq
 80222f0:	f8c8 2000 	streq.w	r2, [r8]
 80222f4:	605a      	strne	r2, [r3, #4]
 80222f6:	e7eb      	b.n	80222d0 <_malloc_r+0xa8>
 80222f8:	4623      	mov	r3, r4
 80222fa:	6864      	ldr	r4, [r4, #4]
 80222fc:	e7ae      	b.n	802225c <_malloc_r+0x34>
 80222fe:	463c      	mov	r4, r7
 8022300:	687f      	ldr	r7, [r7, #4]
 8022302:	e7b6      	b.n	8022272 <_malloc_r+0x4a>
 8022304:	461a      	mov	r2, r3
 8022306:	685b      	ldr	r3, [r3, #4]
 8022308:	42a3      	cmp	r3, r4
 802230a:	d1fb      	bne.n	8022304 <_malloc_r+0xdc>
 802230c:	2300      	movs	r3, #0
 802230e:	6053      	str	r3, [r2, #4]
 8022310:	e7de      	b.n	80222d0 <_malloc_r+0xa8>
 8022312:	230c      	movs	r3, #12
 8022314:	6033      	str	r3, [r6, #0]
 8022316:	4630      	mov	r0, r6
 8022318:	f000 f80c 	bl	8022334 <__malloc_unlock>
 802231c:	e794      	b.n	8022248 <_malloc_r+0x20>
 802231e:	6005      	str	r5, [r0, #0]
 8022320:	e7d6      	b.n	80222d0 <_malloc_r+0xa8>
 8022322:	bf00      	nop
 8022324:	24003ef4 	.word	0x24003ef4

08022328 <__malloc_lock>:
 8022328:	4801      	ldr	r0, [pc, #4]	@ (8022330 <__malloc_lock+0x8>)
 802232a:	f001 ba96 	b.w	802385a <__retarget_lock_acquire_recursive>
 802232e:	bf00      	nop
 8022330:	24004038 	.word	0x24004038

08022334 <__malloc_unlock>:
 8022334:	4801      	ldr	r0, [pc, #4]	@ (802233c <__malloc_unlock+0x8>)
 8022336:	f001 ba91 	b.w	802385c <__retarget_lock_release_recursive>
 802233a:	bf00      	nop
 802233c:	24004038 	.word	0x24004038

08022340 <srand>:
 8022340:	b538      	push	{r3, r4, r5, lr}
 8022342:	4b10      	ldr	r3, [pc, #64]	@ (8022384 <srand+0x44>)
 8022344:	681d      	ldr	r5, [r3, #0]
 8022346:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8022348:	4604      	mov	r4, r0
 802234a:	b9b3      	cbnz	r3, 802237a <srand+0x3a>
 802234c:	2018      	movs	r0, #24
 802234e:	f7ff ff39 	bl	80221c4 <malloc>
 8022352:	4602      	mov	r2, r0
 8022354:	6328      	str	r0, [r5, #48]	@ 0x30
 8022356:	b920      	cbnz	r0, 8022362 <srand+0x22>
 8022358:	4b0b      	ldr	r3, [pc, #44]	@ (8022388 <srand+0x48>)
 802235a:	480c      	ldr	r0, [pc, #48]	@ (802238c <srand+0x4c>)
 802235c:	2146      	movs	r1, #70	@ 0x46
 802235e:	f7ff fef3 	bl	8022148 <__assert_func>
 8022362:	490b      	ldr	r1, [pc, #44]	@ (8022390 <srand+0x50>)
 8022364:	4b0b      	ldr	r3, [pc, #44]	@ (8022394 <srand+0x54>)
 8022366:	e9c0 1300 	strd	r1, r3, [r0]
 802236a:	4b0b      	ldr	r3, [pc, #44]	@ (8022398 <srand+0x58>)
 802236c:	6083      	str	r3, [r0, #8]
 802236e:	230b      	movs	r3, #11
 8022370:	8183      	strh	r3, [r0, #12]
 8022372:	2100      	movs	r1, #0
 8022374:	2001      	movs	r0, #1
 8022376:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802237a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802237c:	2200      	movs	r2, #0
 802237e:	611c      	str	r4, [r3, #16]
 8022380:	615a      	str	r2, [r3, #20]
 8022382:	bd38      	pop	{r3, r4, r5, pc}
 8022384:	240007ac 	.word	0x240007ac
 8022388:	08036a90 	.word	0x08036a90
 802238c:	08036aa7 	.word	0x08036aa7
 8022390:	abcd330e 	.word	0xabcd330e
 8022394:	e66d1234 	.word	0xe66d1234
 8022398:	0005deec 	.word	0x0005deec

0802239c <_strtol_l.constprop.0>:
 802239c:	2b24      	cmp	r3, #36	@ 0x24
 802239e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223a2:	4686      	mov	lr, r0
 80223a4:	4690      	mov	r8, r2
 80223a6:	d801      	bhi.n	80223ac <_strtol_l.constprop.0+0x10>
 80223a8:	2b01      	cmp	r3, #1
 80223aa:	d106      	bne.n	80223ba <_strtol_l.constprop.0+0x1e>
 80223ac:	f001 fa2a 	bl	8023804 <__errno>
 80223b0:	2316      	movs	r3, #22
 80223b2:	6003      	str	r3, [r0, #0]
 80223b4:	2000      	movs	r0, #0
 80223b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223ba:	4834      	ldr	r0, [pc, #208]	@ (802248c <_strtol_l.constprop.0+0xf0>)
 80223bc:	460d      	mov	r5, r1
 80223be:	462a      	mov	r2, r5
 80223c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80223c4:	5d06      	ldrb	r6, [r0, r4]
 80223c6:	f016 0608 	ands.w	r6, r6, #8
 80223ca:	d1f8      	bne.n	80223be <_strtol_l.constprop.0+0x22>
 80223cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80223ce:	d12d      	bne.n	802242c <_strtol_l.constprop.0+0x90>
 80223d0:	782c      	ldrb	r4, [r5, #0]
 80223d2:	2601      	movs	r6, #1
 80223d4:	1c95      	adds	r5, r2, #2
 80223d6:	f033 0210 	bics.w	r2, r3, #16
 80223da:	d109      	bne.n	80223f0 <_strtol_l.constprop.0+0x54>
 80223dc:	2c30      	cmp	r4, #48	@ 0x30
 80223de:	d12a      	bne.n	8022436 <_strtol_l.constprop.0+0x9a>
 80223e0:	782a      	ldrb	r2, [r5, #0]
 80223e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80223e6:	2a58      	cmp	r2, #88	@ 0x58
 80223e8:	d125      	bne.n	8022436 <_strtol_l.constprop.0+0x9a>
 80223ea:	786c      	ldrb	r4, [r5, #1]
 80223ec:	2310      	movs	r3, #16
 80223ee:	3502      	adds	r5, #2
 80223f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80223f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80223f8:	2200      	movs	r2, #0
 80223fa:	fbbc f9f3 	udiv	r9, ip, r3
 80223fe:	4610      	mov	r0, r2
 8022400:	fb03 ca19 	mls	sl, r3, r9, ip
 8022404:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8022408:	2f09      	cmp	r7, #9
 802240a:	d81b      	bhi.n	8022444 <_strtol_l.constprop.0+0xa8>
 802240c:	463c      	mov	r4, r7
 802240e:	42a3      	cmp	r3, r4
 8022410:	dd27      	ble.n	8022462 <_strtol_l.constprop.0+0xc6>
 8022412:	1c57      	adds	r7, r2, #1
 8022414:	d007      	beq.n	8022426 <_strtol_l.constprop.0+0x8a>
 8022416:	4581      	cmp	r9, r0
 8022418:	d320      	bcc.n	802245c <_strtol_l.constprop.0+0xc0>
 802241a:	d101      	bne.n	8022420 <_strtol_l.constprop.0+0x84>
 802241c:	45a2      	cmp	sl, r4
 802241e:	db1d      	blt.n	802245c <_strtol_l.constprop.0+0xc0>
 8022420:	fb00 4003 	mla	r0, r0, r3, r4
 8022424:	2201      	movs	r2, #1
 8022426:	f815 4b01 	ldrb.w	r4, [r5], #1
 802242a:	e7eb      	b.n	8022404 <_strtol_l.constprop.0+0x68>
 802242c:	2c2b      	cmp	r4, #43	@ 0x2b
 802242e:	bf04      	itt	eq
 8022430:	782c      	ldrbeq	r4, [r5, #0]
 8022432:	1c95      	addeq	r5, r2, #2
 8022434:	e7cf      	b.n	80223d6 <_strtol_l.constprop.0+0x3a>
 8022436:	2b00      	cmp	r3, #0
 8022438:	d1da      	bne.n	80223f0 <_strtol_l.constprop.0+0x54>
 802243a:	2c30      	cmp	r4, #48	@ 0x30
 802243c:	bf0c      	ite	eq
 802243e:	2308      	moveq	r3, #8
 8022440:	230a      	movne	r3, #10
 8022442:	e7d5      	b.n	80223f0 <_strtol_l.constprop.0+0x54>
 8022444:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8022448:	2f19      	cmp	r7, #25
 802244a:	d801      	bhi.n	8022450 <_strtol_l.constprop.0+0xb4>
 802244c:	3c37      	subs	r4, #55	@ 0x37
 802244e:	e7de      	b.n	802240e <_strtol_l.constprop.0+0x72>
 8022450:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8022454:	2f19      	cmp	r7, #25
 8022456:	d804      	bhi.n	8022462 <_strtol_l.constprop.0+0xc6>
 8022458:	3c57      	subs	r4, #87	@ 0x57
 802245a:	e7d8      	b.n	802240e <_strtol_l.constprop.0+0x72>
 802245c:	f04f 32ff 	mov.w	r2, #4294967295
 8022460:	e7e1      	b.n	8022426 <_strtol_l.constprop.0+0x8a>
 8022462:	1c53      	adds	r3, r2, #1
 8022464:	d108      	bne.n	8022478 <_strtol_l.constprop.0+0xdc>
 8022466:	2322      	movs	r3, #34	@ 0x22
 8022468:	f8ce 3000 	str.w	r3, [lr]
 802246c:	4660      	mov	r0, ip
 802246e:	f1b8 0f00 	cmp.w	r8, #0
 8022472:	d0a0      	beq.n	80223b6 <_strtol_l.constprop.0+0x1a>
 8022474:	1e69      	subs	r1, r5, #1
 8022476:	e006      	b.n	8022486 <_strtol_l.constprop.0+0xea>
 8022478:	b106      	cbz	r6, 802247c <_strtol_l.constprop.0+0xe0>
 802247a:	4240      	negs	r0, r0
 802247c:	f1b8 0f00 	cmp.w	r8, #0
 8022480:	d099      	beq.n	80223b6 <_strtol_l.constprop.0+0x1a>
 8022482:	2a00      	cmp	r2, #0
 8022484:	d1f6      	bne.n	8022474 <_strtol_l.constprop.0+0xd8>
 8022486:	f8c8 1000 	str.w	r1, [r8]
 802248a:	e794      	b.n	80223b6 <_strtol_l.constprop.0+0x1a>
 802248c:	08036b00 	.word	0x08036b00

08022490 <_strtol_r>:
 8022490:	f7ff bf84 	b.w	802239c <_strtol_l.constprop.0>

08022494 <strtol>:
 8022494:	4613      	mov	r3, r2
 8022496:	460a      	mov	r2, r1
 8022498:	4601      	mov	r1, r0
 802249a:	4802      	ldr	r0, [pc, #8]	@ (80224a4 <strtol+0x10>)
 802249c:	6800      	ldr	r0, [r0, #0]
 802249e:	f7ff bf7d 	b.w	802239c <_strtol_l.constprop.0>
 80224a2:	bf00      	nop
 80224a4:	240007ac 	.word	0x240007ac

080224a8 <_strtoul_l.constprop.0>:
 80224a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80224ac:	4e34      	ldr	r6, [pc, #208]	@ (8022580 <_strtoul_l.constprop.0+0xd8>)
 80224ae:	4686      	mov	lr, r0
 80224b0:	460d      	mov	r5, r1
 80224b2:	4628      	mov	r0, r5
 80224b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80224b8:	5d37      	ldrb	r7, [r6, r4]
 80224ba:	f017 0708 	ands.w	r7, r7, #8
 80224be:	d1f8      	bne.n	80224b2 <_strtoul_l.constprop.0+0xa>
 80224c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80224c2:	d12f      	bne.n	8022524 <_strtoul_l.constprop.0+0x7c>
 80224c4:	782c      	ldrb	r4, [r5, #0]
 80224c6:	2701      	movs	r7, #1
 80224c8:	1c85      	adds	r5, r0, #2
 80224ca:	f033 0010 	bics.w	r0, r3, #16
 80224ce:	d109      	bne.n	80224e4 <_strtoul_l.constprop.0+0x3c>
 80224d0:	2c30      	cmp	r4, #48	@ 0x30
 80224d2:	d12c      	bne.n	802252e <_strtoul_l.constprop.0+0x86>
 80224d4:	7828      	ldrb	r0, [r5, #0]
 80224d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80224da:	2858      	cmp	r0, #88	@ 0x58
 80224dc:	d127      	bne.n	802252e <_strtoul_l.constprop.0+0x86>
 80224de:	786c      	ldrb	r4, [r5, #1]
 80224e0:	2310      	movs	r3, #16
 80224e2:	3502      	adds	r5, #2
 80224e4:	f04f 38ff 	mov.w	r8, #4294967295
 80224e8:	2600      	movs	r6, #0
 80224ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80224ee:	fb03 f908 	mul.w	r9, r3, r8
 80224f2:	ea6f 0909 	mvn.w	r9, r9
 80224f6:	4630      	mov	r0, r6
 80224f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80224fc:	f1bc 0f09 	cmp.w	ip, #9
 8022500:	d81c      	bhi.n	802253c <_strtoul_l.constprop.0+0x94>
 8022502:	4664      	mov	r4, ip
 8022504:	42a3      	cmp	r3, r4
 8022506:	dd2a      	ble.n	802255e <_strtoul_l.constprop.0+0xb6>
 8022508:	f1b6 3fff 	cmp.w	r6, #4294967295
 802250c:	d007      	beq.n	802251e <_strtoul_l.constprop.0+0x76>
 802250e:	4580      	cmp	r8, r0
 8022510:	d322      	bcc.n	8022558 <_strtoul_l.constprop.0+0xb0>
 8022512:	d101      	bne.n	8022518 <_strtoul_l.constprop.0+0x70>
 8022514:	45a1      	cmp	r9, r4
 8022516:	db1f      	blt.n	8022558 <_strtoul_l.constprop.0+0xb0>
 8022518:	fb00 4003 	mla	r0, r0, r3, r4
 802251c:	2601      	movs	r6, #1
 802251e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022522:	e7e9      	b.n	80224f8 <_strtoul_l.constprop.0+0x50>
 8022524:	2c2b      	cmp	r4, #43	@ 0x2b
 8022526:	bf04      	itt	eq
 8022528:	782c      	ldrbeq	r4, [r5, #0]
 802252a:	1c85      	addeq	r5, r0, #2
 802252c:	e7cd      	b.n	80224ca <_strtoul_l.constprop.0+0x22>
 802252e:	2b00      	cmp	r3, #0
 8022530:	d1d8      	bne.n	80224e4 <_strtoul_l.constprop.0+0x3c>
 8022532:	2c30      	cmp	r4, #48	@ 0x30
 8022534:	bf0c      	ite	eq
 8022536:	2308      	moveq	r3, #8
 8022538:	230a      	movne	r3, #10
 802253a:	e7d3      	b.n	80224e4 <_strtoul_l.constprop.0+0x3c>
 802253c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8022540:	f1bc 0f19 	cmp.w	ip, #25
 8022544:	d801      	bhi.n	802254a <_strtoul_l.constprop.0+0xa2>
 8022546:	3c37      	subs	r4, #55	@ 0x37
 8022548:	e7dc      	b.n	8022504 <_strtoul_l.constprop.0+0x5c>
 802254a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802254e:	f1bc 0f19 	cmp.w	ip, #25
 8022552:	d804      	bhi.n	802255e <_strtoul_l.constprop.0+0xb6>
 8022554:	3c57      	subs	r4, #87	@ 0x57
 8022556:	e7d5      	b.n	8022504 <_strtoul_l.constprop.0+0x5c>
 8022558:	f04f 36ff 	mov.w	r6, #4294967295
 802255c:	e7df      	b.n	802251e <_strtoul_l.constprop.0+0x76>
 802255e:	1c73      	adds	r3, r6, #1
 8022560:	d106      	bne.n	8022570 <_strtoul_l.constprop.0+0xc8>
 8022562:	2322      	movs	r3, #34	@ 0x22
 8022564:	f8ce 3000 	str.w	r3, [lr]
 8022568:	4630      	mov	r0, r6
 802256a:	b932      	cbnz	r2, 802257a <_strtoul_l.constprop.0+0xd2>
 802256c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022570:	b107      	cbz	r7, 8022574 <_strtoul_l.constprop.0+0xcc>
 8022572:	4240      	negs	r0, r0
 8022574:	2a00      	cmp	r2, #0
 8022576:	d0f9      	beq.n	802256c <_strtoul_l.constprop.0+0xc4>
 8022578:	b106      	cbz	r6, 802257c <_strtoul_l.constprop.0+0xd4>
 802257a:	1e69      	subs	r1, r5, #1
 802257c:	6011      	str	r1, [r2, #0]
 802257e:	e7f5      	b.n	802256c <_strtoul_l.constprop.0+0xc4>
 8022580:	08036b00 	.word	0x08036b00

08022584 <strtoul>:
 8022584:	4613      	mov	r3, r2
 8022586:	460a      	mov	r2, r1
 8022588:	4601      	mov	r1, r0
 802258a:	4802      	ldr	r0, [pc, #8]	@ (8022594 <strtoul+0x10>)
 802258c:	6800      	ldr	r0, [r0, #0]
 802258e:	f7ff bf8b 	b.w	80224a8 <_strtoul_l.constprop.0>
 8022592:	bf00      	nop
 8022594:	240007ac 	.word	0x240007ac

08022598 <__cvt>:
 8022598:	b5f0      	push	{r4, r5, r6, r7, lr}
 802259a:	ed2d 8b02 	vpush	{d8}
 802259e:	eeb0 8b40 	vmov.f64	d8, d0
 80225a2:	b085      	sub	sp, #20
 80225a4:	4617      	mov	r7, r2
 80225a6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80225a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80225aa:	ee18 2a90 	vmov	r2, s17
 80225ae:	f025 0520 	bic.w	r5, r5, #32
 80225b2:	2a00      	cmp	r2, #0
 80225b4:	bfb6      	itet	lt
 80225b6:	222d      	movlt	r2, #45	@ 0x2d
 80225b8:	2200      	movge	r2, #0
 80225ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80225be:	2d46      	cmp	r5, #70	@ 0x46
 80225c0:	460c      	mov	r4, r1
 80225c2:	701a      	strb	r2, [r3, #0]
 80225c4:	d004      	beq.n	80225d0 <__cvt+0x38>
 80225c6:	2d45      	cmp	r5, #69	@ 0x45
 80225c8:	d100      	bne.n	80225cc <__cvt+0x34>
 80225ca:	3401      	adds	r4, #1
 80225cc:	2102      	movs	r1, #2
 80225ce:	e000      	b.n	80225d2 <__cvt+0x3a>
 80225d0:	2103      	movs	r1, #3
 80225d2:	ab03      	add	r3, sp, #12
 80225d4:	9301      	str	r3, [sp, #4]
 80225d6:	ab02      	add	r3, sp, #8
 80225d8:	9300      	str	r3, [sp, #0]
 80225da:	4622      	mov	r2, r4
 80225dc:	4633      	mov	r3, r6
 80225de:	eeb0 0b48 	vmov.f64	d0, d8
 80225e2:	f001 f9e9 	bl	80239b8 <_dtoa_r>
 80225e6:	2d47      	cmp	r5, #71	@ 0x47
 80225e8:	d114      	bne.n	8022614 <__cvt+0x7c>
 80225ea:	07fb      	lsls	r3, r7, #31
 80225ec:	d50a      	bpl.n	8022604 <__cvt+0x6c>
 80225ee:	1902      	adds	r2, r0, r4
 80225f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80225f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225f8:	bf08      	it	eq
 80225fa:	9203      	streq	r2, [sp, #12]
 80225fc:	2130      	movs	r1, #48	@ 0x30
 80225fe:	9b03      	ldr	r3, [sp, #12]
 8022600:	4293      	cmp	r3, r2
 8022602:	d319      	bcc.n	8022638 <__cvt+0xa0>
 8022604:	9b03      	ldr	r3, [sp, #12]
 8022606:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022608:	1a1b      	subs	r3, r3, r0
 802260a:	6013      	str	r3, [r2, #0]
 802260c:	b005      	add	sp, #20
 802260e:	ecbd 8b02 	vpop	{d8}
 8022612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022614:	2d46      	cmp	r5, #70	@ 0x46
 8022616:	eb00 0204 	add.w	r2, r0, r4
 802261a:	d1e9      	bne.n	80225f0 <__cvt+0x58>
 802261c:	7803      	ldrb	r3, [r0, #0]
 802261e:	2b30      	cmp	r3, #48	@ 0x30
 8022620:	d107      	bne.n	8022632 <__cvt+0x9a>
 8022622:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802262a:	bf1c      	itt	ne
 802262c:	f1c4 0401 	rsbne	r4, r4, #1
 8022630:	6034      	strne	r4, [r6, #0]
 8022632:	6833      	ldr	r3, [r6, #0]
 8022634:	441a      	add	r2, r3
 8022636:	e7db      	b.n	80225f0 <__cvt+0x58>
 8022638:	1c5c      	adds	r4, r3, #1
 802263a:	9403      	str	r4, [sp, #12]
 802263c:	7019      	strb	r1, [r3, #0]
 802263e:	e7de      	b.n	80225fe <__cvt+0x66>

08022640 <__exponent>:
 8022640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022642:	2900      	cmp	r1, #0
 8022644:	bfba      	itte	lt
 8022646:	4249      	neglt	r1, r1
 8022648:	232d      	movlt	r3, #45	@ 0x2d
 802264a:	232b      	movge	r3, #43	@ 0x2b
 802264c:	2909      	cmp	r1, #9
 802264e:	7002      	strb	r2, [r0, #0]
 8022650:	7043      	strb	r3, [r0, #1]
 8022652:	dd29      	ble.n	80226a8 <__exponent+0x68>
 8022654:	f10d 0307 	add.w	r3, sp, #7
 8022658:	461d      	mov	r5, r3
 802265a:	270a      	movs	r7, #10
 802265c:	461a      	mov	r2, r3
 802265e:	fbb1 f6f7 	udiv	r6, r1, r7
 8022662:	fb07 1416 	mls	r4, r7, r6, r1
 8022666:	3430      	adds	r4, #48	@ 0x30
 8022668:	f802 4c01 	strb.w	r4, [r2, #-1]
 802266c:	460c      	mov	r4, r1
 802266e:	2c63      	cmp	r4, #99	@ 0x63
 8022670:	f103 33ff 	add.w	r3, r3, #4294967295
 8022674:	4631      	mov	r1, r6
 8022676:	dcf1      	bgt.n	802265c <__exponent+0x1c>
 8022678:	3130      	adds	r1, #48	@ 0x30
 802267a:	1e94      	subs	r4, r2, #2
 802267c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8022680:	1c41      	adds	r1, r0, #1
 8022682:	4623      	mov	r3, r4
 8022684:	42ab      	cmp	r3, r5
 8022686:	d30a      	bcc.n	802269e <__exponent+0x5e>
 8022688:	f10d 0309 	add.w	r3, sp, #9
 802268c:	1a9b      	subs	r3, r3, r2
 802268e:	42ac      	cmp	r4, r5
 8022690:	bf88      	it	hi
 8022692:	2300      	movhi	r3, #0
 8022694:	3302      	adds	r3, #2
 8022696:	4403      	add	r3, r0
 8022698:	1a18      	subs	r0, r3, r0
 802269a:	b003      	add	sp, #12
 802269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802269e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80226a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80226a6:	e7ed      	b.n	8022684 <__exponent+0x44>
 80226a8:	2330      	movs	r3, #48	@ 0x30
 80226aa:	3130      	adds	r1, #48	@ 0x30
 80226ac:	7083      	strb	r3, [r0, #2]
 80226ae:	70c1      	strb	r1, [r0, #3]
 80226b0:	1d03      	adds	r3, r0, #4
 80226b2:	e7f1      	b.n	8022698 <__exponent+0x58>
 80226b4:	0000      	movs	r0, r0
	...

080226b8 <_printf_float>:
 80226b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226bc:	b08d      	sub	sp, #52	@ 0x34
 80226be:	460c      	mov	r4, r1
 80226c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80226c4:	4616      	mov	r6, r2
 80226c6:	461f      	mov	r7, r3
 80226c8:	4605      	mov	r5, r0
 80226ca:	f001 f841 	bl	8023750 <_localeconv_r>
 80226ce:	f8d0 b000 	ldr.w	fp, [r0]
 80226d2:	4658      	mov	r0, fp
 80226d4:	f7dd fe64 	bl	80003a0 <strlen>
 80226d8:	2300      	movs	r3, #0
 80226da:	930a      	str	r3, [sp, #40]	@ 0x28
 80226dc:	f8d8 3000 	ldr.w	r3, [r8]
 80226e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80226e4:	6822      	ldr	r2, [r4, #0]
 80226e6:	9005      	str	r0, [sp, #20]
 80226e8:	3307      	adds	r3, #7
 80226ea:	f023 0307 	bic.w	r3, r3, #7
 80226ee:	f103 0108 	add.w	r1, r3, #8
 80226f2:	f8c8 1000 	str.w	r1, [r8]
 80226f6:	ed93 0b00 	vldr	d0, [r3]
 80226fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8022958 <_printf_float+0x2a0>
 80226fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8022702:	eeb4 7b46 	vcmp.f64	d7, d6
 8022706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802270a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 802270e:	dd24      	ble.n	802275a <_printf_float+0xa2>
 8022710:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8022714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022718:	d502      	bpl.n	8022720 <_printf_float+0x68>
 802271a:	232d      	movs	r3, #45	@ 0x2d
 802271c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022720:	498f      	ldr	r1, [pc, #572]	@ (8022960 <_printf_float+0x2a8>)
 8022722:	4b90      	ldr	r3, [pc, #576]	@ (8022964 <_printf_float+0x2ac>)
 8022724:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8022728:	bf94      	ite	ls
 802272a:	4688      	movls	r8, r1
 802272c:	4698      	movhi	r8, r3
 802272e:	f022 0204 	bic.w	r2, r2, #4
 8022732:	2303      	movs	r3, #3
 8022734:	6123      	str	r3, [r4, #16]
 8022736:	6022      	str	r2, [r4, #0]
 8022738:	f04f 0a00 	mov.w	sl, #0
 802273c:	9700      	str	r7, [sp, #0]
 802273e:	4633      	mov	r3, r6
 8022740:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022742:	4621      	mov	r1, r4
 8022744:	4628      	mov	r0, r5
 8022746:	f000 f9d1 	bl	8022aec <_printf_common>
 802274a:	3001      	adds	r0, #1
 802274c:	f040 8089 	bne.w	8022862 <_printf_float+0x1aa>
 8022750:	f04f 30ff 	mov.w	r0, #4294967295
 8022754:	b00d      	add	sp, #52	@ 0x34
 8022756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802275a:	eeb4 0b40 	vcmp.f64	d0, d0
 802275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022762:	d709      	bvc.n	8022778 <_printf_float+0xc0>
 8022764:	ee10 3a90 	vmov	r3, s1
 8022768:	2b00      	cmp	r3, #0
 802276a:	bfbc      	itt	lt
 802276c:	232d      	movlt	r3, #45	@ 0x2d
 802276e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8022772:	497d      	ldr	r1, [pc, #500]	@ (8022968 <_printf_float+0x2b0>)
 8022774:	4b7d      	ldr	r3, [pc, #500]	@ (802296c <_printf_float+0x2b4>)
 8022776:	e7d5      	b.n	8022724 <_printf_float+0x6c>
 8022778:	6863      	ldr	r3, [r4, #4]
 802277a:	1c59      	adds	r1, r3, #1
 802277c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8022780:	d139      	bne.n	80227f6 <_printf_float+0x13e>
 8022782:	2306      	movs	r3, #6
 8022784:	6063      	str	r3, [r4, #4]
 8022786:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802278a:	2300      	movs	r3, #0
 802278c:	6022      	str	r2, [r4, #0]
 802278e:	9303      	str	r3, [sp, #12]
 8022790:	ab0a      	add	r3, sp, #40	@ 0x28
 8022792:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8022796:	ab09      	add	r3, sp, #36	@ 0x24
 8022798:	9300      	str	r3, [sp, #0]
 802279a:	6861      	ldr	r1, [r4, #4]
 802279c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80227a0:	4628      	mov	r0, r5
 80227a2:	f7ff fef9 	bl	8022598 <__cvt>
 80227a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80227aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80227ac:	4680      	mov	r8, r0
 80227ae:	d129      	bne.n	8022804 <_printf_float+0x14c>
 80227b0:	1cc8      	adds	r0, r1, #3
 80227b2:	db02      	blt.n	80227ba <_printf_float+0x102>
 80227b4:	6863      	ldr	r3, [r4, #4]
 80227b6:	4299      	cmp	r1, r3
 80227b8:	dd41      	ble.n	802283e <_printf_float+0x186>
 80227ba:	f1a9 0902 	sub.w	r9, r9, #2
 80227be:	fa5f f989 	uxtb.w	r9, r9
 80227c2:	3901      	subs	r1, #1
 80227c4:	464a      	mov	r2, r9
 80227c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80227ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80227cc:	f7ff ff38 	bl	8022640 <__exponent>
 80227d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80227d2:	1813      	adds	r3, r2, r0
 80227d4:	2a01      	cmp	r2, #1
 80227d6:	4682      	mov	sl, r0
 80227d8:	6123      	str	r3, [r4, #16]
 80227da:	dc02      	bgt.n	80227e2 <_printf_float+0x12a>
 80227dc:	6822      	ldr	r2, [r4, #0]
 80227de:	07d2      	lsls	r2, r2, #31
 80227e0:	d501      	bpl.n	80227e6 <_printf_float+0x12e>
 80227e2:	3301      	adds	r3, #1
 80227e4:	6123      	str	r3, [r4, #16]
 80227e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d0a6      	beq.n	802273c <_printf_float+0x84>
 80227ee:	232d      	movs	r3, #45	@ 0x2d
 80227f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80227f4:	e7a2      	b.n	802273c <_printf_float+0x84>
 80227f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80227fa:	d1c4      	bne.n	8022786 <_printf_float+0xce>
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d1c2      	bne.n	8022786 <_printf_float+0xce>
 8022800:	2301      	movs	r3, #1
 8022802:	e7bf      	b.n	8022784 <_printf_float+0xcc>
 8022804:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8022808:	d9db      	bls.n	80227c2 <_printf_float+0x10a>
 802280a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 802280e:	d118      	bne.n	8022842 <_printf_float+0x18a>
 8022810:	2900      	cmp	r1, #0
 8022812:	6863      	ldr	r3, [r4, #4]
 8022814:	dd0b      	ble.n	802282e <_printf_float+0x176>
 8022816:	6121      	str	r1, [r4, #16]
 8022818:	b913      	cbnz	r3, 8022820 <_printf_float+0x168>
 802281a:	6822      	ldr	r2, [r4, #0]
 802281c:	07d0      	lsls	r0, r2, #31
 802281e:	d502      	bpl.n	8022826 <_printf_float+0x16e>
 8022820:	3301      	adds	r3, #1
 8022822:	440b      	add	r3, r1
 8022824:	6123      	str	r3, [r4, #16]
 8022826:	65a1      	str	r1, [r4, #88]	@ 0x58
 8022828:	f04f 0a00 	mov.w	sl, #0
 802282c:	e7db      	b.n	80227e6 <_printf_float+0x12e>
 802282e:	b913      	cbnz	r3, 8022836 <_printf_float+0x17e>
 8022830:	6822      	ldr	r2, [r4, #0]
 8022832:	07d2      	lsls	r2, r2, #31
 8022834:	d501      	bpl.n	802283a <_printf_float+0x182>
 8022836:	3302      	adds	r3, #2
 8022838:	e7f4      	b.n	8022824 <_printf_float+0x16c>
 802283a:	2301      	movs	r3, #1
 802283c:	e7f2      	b.n	8022824 <_printf_float+0x16c>
 802283e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8022842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022844:	4299      	cmp	r1, r3
 8022846:	db05      	blt.n	8022854 <_printf_float+0x19c>
 8022848:	6823      	ldr	r3, [r4, #0]
 802284a:	6121      	str	r1, [r4, #16]
 802284c:	07d8      	lsls	r0, r3, #31
 802284e:	d5ea      	bpl.n	8022826 <_printf_float+0x16e>
 8022850:	1c4b      	adds	r3, r1, #1
 8022852:	e7e7      	b.n	8022824 <_printf_float+0x16c>
 8022854:	2900      	cmp	r1, #0
 8022856:	bfd4      	ite	le
 8022858:	f1c1 0202 	rsble	r2, r1, #2
 802285c:	2201      	movgt	r2, #1
 802285e:	4413      	add	r3, r2
 8022860:	e7e0      	b.n	8022824 <_printf_float+0x16c>
 8022862:	6823      	ldr	r3, [r4, #0]
 8022864:	055a      	lsls	r2, r3, #21
 8022866:	d407      	bmi.n	8022878 <_printf_float+0x1c0>
 8022868:	6923      	ldr	r3, [r4, #16]
 802286a:	4642      	mov	r2, r8
 802286c:	4631      	mov	r1, r6
 802286e:	4628      	mov	r0, r5
 8022870:	47b8      	blx	r7
 8022872:	3001      	adds	r0, #1
 8022874:	d12a      	bne.n	80228cc <_printf_float+0x214>
 8022876:	e76b      	b.n	8022750 <_printf_float+0x98>
 8022878:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802287c:	f240 80e0 	bls.w	8022a40 <_printf_float+0x388>
 8022880:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8022884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802288c:	d133      	bne.n	80228f6 <_printf_float+0x23e>
 802288e:	4a38      	ldr	r2, [pc, #224]	@ (8022970 <_printf_float+0x2b8>)
 8022890:	2301      	movs	r3, #1
 8022892:	4631      	mov	r1, r6
 8022894:	4628      	mov	r0, r5
 8022896:	47b8      	blx	r7
 8022898:	3001      	adds	r0, #1
 802289a:	f43f af59 	beq.w	8022750 <_printf_float+0x98>
 802289e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80228a2:	4543      	cmp	r3, r8
 80228a4:	db02      	blt.n	80228ac <_printf_float+0x1f4>
 80228a6:	6823      	ldr	r3, [r4, #0]
 80228a8:	07d8      	lsls	r0, r3, #31
 80228aa:	d50f      	bpl.n	80228cc <_printf_float+0x214>
 80228ac:	9b05      	ldr	r3, [sp, #20]
 80228ae:	465a      	mov	r2, fp
 80228b0:	4631      	mov	r1, r6
 80228b2:	4628      	mov	r0, r5
 80228b4:	47b8      	blx	r7
 80228b6:	3001      	adds	r0, #1
 80228b8:	f43f af4a 	beq.w	8022750 <_printf_float+0x98>
 80228bc:	f04f 0900 	mov.w	r9, #0
 80228c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80228c4:	f104 0a1a 	add.w	sl, r4, #26
 80228c8:	45c8      	cmp	r8, r9
 80228ca:	dc09      	bgt.n	80228e0 <_printf_float+0x228>
 80228cc:	6823      	ldr	r3, [r4, #0]
 80228ce:	079b      	lsls	r3, r3, #30
 80228d0:	f100 8107 	bmi.w	8022ae2 <_printf_float+0x42a>
 80228d4:	68e0      	ldr	r0, [r4, #12]
 80228d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80228d8:	4298      	cmp	r0, r3
 80228da:	bfb8      	it	lt
 80228dc:	4618      	movlt	r0, r3
 80228de:	e739      	b.n	8022754 <_printf_float+0x9c>
 80228e0:	2301      	movs	r3, #1
 80228e2:	4652      	mov	r2, sl
 80228e4:	4631      	mov	r1, r6
 80228e6:	4628      	mov	r0, r5
 80228e8:	47b8      	blx	r7
 80228ea:	3001      	adds	r0, #1
 80228ec:	f43f af30 	beq.w	8022750 <_printf_float+0x98>
 80228f0:	f109 0901 	add.w	r9, r9, #1
 80228f4:	e7e8      	b.n	80228c8 <_printf_float+0x210>
 80228f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	dc3b      	bgt.n	8022974 <_printf_float+0x2bc>
 80228fc:	4a1c      	ldr	r2, [pc, #112]	@ (8022970 <_printf_float+0x2b8>)
 80228fe:	2301      	movs	r3, #1
 8022900:	4631      	mov	r1, r6
 8022902:	4628      	mov	r0, r5
 8022904:	47b8      	blx	r7
 8022906:	3001      	adds	r0, #1
 8022908:	f43f af22 	beq.w	8022750 <_printf_float+0x98>
 802290c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8022910:	ea59 0303 	orrs.w	r3, r9, r3
 8022914:	d102      	bne.n	802291c <_printf_float+0x264>
 8022916:	6823      	ldr	r3, [r4, #0]
 8022918:	07d9      	lsls	r1, r3, #31
 802291a:	d5d7      	bpl.n	80228cc <_printf_float+0x214>
 802291c:	9b05      	ldr	r3, [sp, #20]
 802291e:	465a      	mov	r2, fp
 8022920:	4631      	mov	r1, r6
 8022922:	4628      	mov	r0, r5
 8022924:	47b8      	blx	r7
 8022926:	3001      	adds	r0, #1
 8022928:	f43f af12 	beq.w	8022750 <_printf_float+0x98>
 802292c:	f04f 0a00 	mov.w	sl, #0
 8022930:	f104 0b1a 	add.w	fp, r4, #26
 8022934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022936:	425b      	negs	r3, r3
 8022938:	4553      	cmp	r3, sl
 802293a:	dc01      	bgt.n	8022940 <_printf_float+0x288>
 802293c:	464b      	mov	r3, r9
 802293e:	e794      	b.n	802286a <_printf_float+0x1b2>
 8022940:	2301      	movs	r3, #1
 8022942:	465a      	mov	r2, fp
 8022944:	4631      	mov	r1, r6
 8022946:	4628      	mov	r0, r5
 8022948:	47b8      	blx	r7
 802294a:	3001      	adds	r0, #1
 802294c:	f43f af00 	beq.w	8022750 <_printf_float+0x98>
 8022950:	f10a 0a01 	add.w	sl, sl, #1
 8022954:	e7ee      	b.n	8022934 <_printf_float+0x27c>
 8022956:	bf00      	nop
 8022958:	ffffffff 	.word	0xffffffff
 802295c:	7fefffff 	.word	0x7fefffff
 8022960:	08036c00 	.word	0x08036c00
 8022964:	08036c04 	.word	0x08036c04
 8022968:	08036c08 	.word	0x08036c08
 802296c:	08036c0c 	.word	0x08036c0c
 8022970:	08036c10 	.word	0x08036c10
 8022974:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022976:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802297a:	4553      	cmp	r3, sl
 802297c:	bfa8      	it	ge
 802297e:	4653      	movge	r3, sl
 8022980:	2b00      	cmp	r3, #0
 8022982:	4699      	mov	r9, r3
 8022984:	dc37      	bgt.n	80229f6 <_printf_float+0x33e>
 8022986:	2300      	movs	r3, #0
 8022988:	9307      	str	r3, [sp, #28]
 802298a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802298e:	f104 021a 	add.w	r2, r4, #26
 8022992:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022994:	9907      	ldr	r1, [sp, #28]
 8022996:	9306      	str	r3, [sp, #24]
 8022998:	eba3 0309 	sub.w	r3, r3, r9
 802299c:	428b      	cmp	r3, r1
 802299e:	dc31      	bgt.n	8022a04 <_printf_float+0x34c>
 80229a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229a2:	459a      	cmp	sl, r3
 80229a4:	dc3b      	bgt.n	8022a1e <_printf_float+0x366>
 80229a6:	6823      	ldr	r3, [r4, #0]
 80229a8:	07da      	lsls	r2, r3, #31
 80229aa:	d438      	bmi.n	8022a1e <_printf_float+0x366>
 80229ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229ae:	ebaa 0903 	sub.w	r9, sl, r3
 80229b2:	9b06      	ldr	r3, [sp, #24]
 80229b4:	ebaa 0303 	sub.w	r3, sl, r3
 80229b8:	4599      	cmp	r9, r3
 80229ba:	bfa8      	it	ge
 80229bc:	4699      	movge	r9, r3
 80229be:	f1b9 0f00 	cmp.w	r9, #0
 80229c2:	dc34      	bgt.n	8022a2e <_printf_float+0x376>
 80229c4:	f04f 0800 	mov.w	r8, #0
 80229c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80229cc:	f104 0b1a 	add.w	fp, r4, #26
 80229d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229d2:	ebaa 0303 	sub.w	r3, sl, r3
 80229d6:	eba3 0309 	sub.w	r3, r3, r9
 80229da:	4543      	cmp	r3, r8
 80229dc:	f77f af76 	ble.w	80228cc <_printf_float+0x214>
 80229e0:	2301      	movs	r3, #1
 80229e2:	465a      	mov	r2, fp
 80229e4:	4631      	mov	r1, r6
 80229e6:	4628      	mov	r0, r5
 80229e8:	47b8      	blx	r7
 80229ea:	3001      	adds	r0, #1
 80229ec:	f43f aeb0 	beq.w	8022750 <_printf_float+0x98>
 80229f0:	f108 0801 	add.w	r8, r8, #1
 80229f4:	e7ec      	b.n	80229d0 <_printf_float+0x318>
 80229f6:	4642      	mov	r2, r8
 80229f8:	4631      	mov	r1, r6
 80229fa:	4628      	mov	r0, r5
 80229fc:	47b8      	blx	r7
 80229fe:	3001      	adds	r0, #1
 8022a00:	d1c1      	bne.n	8022986 <_printf_float+0x2ce>
 8022a02:	e6a5      	b.n	8022750 <_printf_float+0x98>
 8022a04:	2301      	movs	r3, #1
 8022a06:	4631      	mov	r1, r6
 8022a08:	4628      	mov	r0, r5
 8022a0a:	9206      	str	r2, [sp, #24]
 8022a0c:	47b8      	blx	r7
 8022a0e:	3001      	adds	r0, #1
 8022a10:	f43f ae9e 	beq.w	8022750 <_printf_float+0x98>
 8022a14:	9b07      	ldr	r3, [sp, #28]
 8022a16:	9a06      	ldr	r2, [sp, #24]
 8022a18:	3301      	adds	r3, #1
 8022a1a:	9307      	str	r3, [sp, #28]
 8022a1c:	e7b9      	b.n	8022992 <_printf_float+0x2da>
 8022a1e:	9b05      	ldr	r3, [sp, #20]
 8022a20:	465a      	mov	r2, fp
 8022a22:	4631      	mov	r1, r6
 8022a24:	4628      	mov	r0, r5
 8022a26:	47b8      	blx	r7
 8022a28:	3001      	adds	r0, #1
 8022a2a:	d1bf      	bne.n	80229ac <_printf_float+0x2f4>
 8022a2c:	e690      	b.n	8022750 <_printf_float+0x98>
 8022a2e:	9a06      	ldr	r2, [sp, #24]
 8022a30:	464b      	mov	r3, r9
 8022a32:	4442      	add	r2, r8
 8022a34:	4631      	mov	r1, r6
 8022a36:	4628      	mov	r0, r5
 8022a38:	47b8      	blx	r7
 8022a3a:	3001      	adds	r0, #1
 8022a3c:	d1c2      	bne.n	80229c4 <_printf_float+0x30c>
 8022a3e:	e687      	b.n	8022750 <_printf_float+0x98>
 8022a40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8022a44:	f1b9 0f01 	cmp.w	r9, #1
 8022a48:	dc01      	bgt.n	8022a4e <_printf_float+0x396>
 8022a4a:	07db      	lsls	r3, r3, #31
 8022a4c:	d536      	bpl.n	8022abc <_printf_float+0x404>
 8022a4e:	2301      	movs	r3, #1
 8022a50:	4642      	mov	r2, r8
 8022a52:	4631      	mov	r1, r6
 8022a54:	4628      	mov	r0, r5
 8022a56:	47b8      	blx	r7
 8022a58:	3001      	adds	r0, #1
 8022a5a:	f43f ae79 	beq.w	8022750 <_printf_float+0x98>
 8022a5e:	9b05      	ldr	r3, [sp, #20]
 8022a60:	465a      	mov	r2, fp
 8022a62:	4631      	mov	r1, r6
 8022a64:	4628      	mov	r0, r5
 8022a66:	47b8      	blx	r7
 8022a68:	3001      	adds	r0, #1
 8022a6a:	f43f ae71 	beq.w	8022750 <_printf_float+0x98>
 8022a6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8022a72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a7e:	d018      	beq.n	8022ab2 <_printf_float+0x3fa>
 8022a80:	464b      	mov	r3, r9
 8022a82:	f108 0201 	add.w	r2, r8, #1
 8022a86:	4631      	mov	r1, r6
 8022a88:	4628      	mov	r0, r5
 8022a8a:	47b8      	blx	r7
 8022a8c:	3001      	adds	r0, #1
 8022a8e:	d10c      	bne.n	8022aaa <_printf_float+0x3f2>
 8022a90:	e65e      	b.n	8022750 <_printf_float+0x98>
 8022a92:	2301      	movs	r3, #1
 8022a94:	465a      	mov	r2, fp
 8022a96:	4631      	mov	r1, r6
 8022a98:	4628      	mov	r0, r5
 8022a9a:	47b8      	blx	r7
 8022a9c:	3001      	adds	r0, #1
 8022a9e:	f43f ae57 	beq.w	8022750 <_printf_float+0x98>
 8022aa2:	f108 0801 	add.w	r8, r8, #1
 8022aa6:	45c8      	cmp	r8, r9
 8022aa8:	dbf3      	blt.n	8022a92 <_printf_float+0x3da>
 8022aaa:	4653      	mov	r3, sl
 8022aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8022ab0:	e6dc      	b.n	802286c <_printf_float+0x1b4>
 8022ab2:	f04f 0800 	mov.w	r8, #0
 8022ab6:	f104 0b1a 	add.w	fp, r4, #26
 8022aba:	e7f4      	b.n	8022aa6 <_printf_float+0x3ee>
 8022abc:	2301      	movs	r3, #1
 8022abe:	4642      	mov	r2, r8
 8022ac0:	e7e1      	b.n	8022a86 <_printf_float+0x3ce>
 8022ac2:	2301      	movs	r3, #1
 8022ac4:	464a      	mov	r2, r9
 8022ac6:	4631      	mov	r1, r6
 8022ac8:	4628      	mov	r0, r5
 8022aca:	47b8      	blx	r7
 8022acc:	3001      	adds	r0, #1
 8022ace:	f43f ae3f 	beq.w	8022750 <_printf_float+0x98>
 8022ad2:	f108 0801 	add.w	r8, r8, #1
 8022ad6:	68e3      	ldr	r3, [r4, #12]
 8022ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022ada:	1a5b      	subs	r3, r3, r1
 8022adc:	4543      	cmp	r3, r8
 8022ade:	dcf0      	bgt.n	8022ac2 <_printf_float+0x40a>
 8022ae0:	e6f8      	b.n	80228d4 <_printf_float+0x21c>
 8022ae2:	f04f 0800 	mov.w	r8, #0
 8022ae6:	f104 0919 	add.w	r9, r4, #25
 8022aea:	e7f4      	b.n	8022ad6 <_printf_float+0x41e>

08022aec <_printf_common>:
 8022aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022af0:	4616      	mov	r6, r2
 8022af2:	4698      	mov	r8, r3
 8022af4:	688a      	ldr	r2, [r1, #8]
 8022af6:	690b      	ldr	r3, [r1, #16]
 8022af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022afc:	4293      	cmp	r3, r2
 8022afe:	bfb8      	it	lt
 8022b00:	4613      	movlt	r3, r2
 8022b02:	6033      	str	r3, [r6, #0]
 8022b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022b08:	4607      	mov	r7, r0
 8022b0a:	460c      	mov	r4, r1
 8022b0c:	b10a      	cbz	r2, 8022b12 <_printf_common+0x26>
 8022b0e:	3301      	adds	r3, #1
 8022b10:	6033      	str	r3, [r6, #0]
 8022b12:	6823      	ldr	r3, [r4, #0]
 8022b14:	0699      	lsls	r1, r3, #26
 8022b16:	bf42      	ittt	mi
 8022b18:	6833      	ldrmi	r3, [r6, #0]
 8022b1a:	3302      	addmi	r3, #2
 8022b1c:	6033      	strmi	r3, [r6, #0]
 8022b1e:	6825      	ldr	r5, [r4, #0]
 8022b20:	f015 0506 	ands.w	r5, r5, #6
 8022b24:	d106      	bne.n	8022b34 <_printf_common+0x48>
 8022b26:	f104 0a19 	add.w	sl, r4, #25
 8022b2a:	68e3      	ldr	r3, [r4, #12]
 8022b2c:	6832      	ldr	r2, [r6, #0]
 8022b2e:	1a9b      	subs	r3, r3, r2
 8022b30:	42ab      	cmp	r3, r5
 8022b32:	dc26      	bgt.n	8022b82 <_printf_common+0x96>
 8022b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022b38:	6822      	ldr	r2, [r4, #0]
 8022b3a:	3b00      	subs	r3, #0
 8022b3c:	bf18      	it	ne
 8022b3e:	2301      	movne	r3, #1
 8022b40:	0692      	lsls	r2, r2, #26
 8022b42:	d42b      	bmi.n	8022b9c <_printf_common+0xb0>
 8022b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022b48:	4641      	mov	r1, r8
 8022b4a:	4638      	mov	r0, r7
 8022b4c:	47c8      	blx	r9
 8022b4e:	3001      	adds	r0, #1
 8022b50:	d01e      	beq.n	8022b90 <_printf_common+0xa4>
 8022b52:	6823      	ldr	r3, [r4, #0]
 8022b54:	6922      	ldr	r2, [r4, #16]
 8022b56:	f003 0306 	and.w	r3, r3, #6
 8022b5a:	2b04      	cmp	r3, #4
 8022b5c:	bf02      	ittt	eq
 8022b5e:	68e5      	ldreq	r5, [r4, #12]
 8022b60:	6833      	ldreq	r3, [r6, #0]
 8022b62:	1aed      	subeq	r5, r5, r3
 8022b64:	68a3      	ldr	r3, [r4, #8]
 8022b66:	bf0c      	ite	eq
 8022b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022b6c:	2500      	movne	r5, #0
 8022b6e:	4293      	cmp	r3, r2
 8022b70:	bfc4      	itt	gt
 8022b72:	1a9b      	subgt	r3, r3, r2
 8022b74:	18ed      	addgt	r5, r5, r3
 8022b76:	2600      	movs	r6, #0
 8022b78:	341a      	adds	r4, #26
 8022b7a:	42b5      	cmp	r5, r6
 8022b7c:	d11a      	bne.n	8022bb4 <_printf_common+0xc8>
 8022b7e:	2000      	movs	r0, #0
 8022b80:	e008      	b.n	8022b94 <_printf_common+0xa8>
 8022b82:	2301      	movs	r3, #1
 8022b84:	4652      	mov	r2, sl
 8022b86:	4641      	mov	r1, r8
 8022b88:	4638      	mov	r0, r7
 8022b8a:	47c8      	blx	r9
 8022b8c:	3001      	adds	r0, #1
 8022b8e:	d103      	bne.n	8022b98 <_printf_common+0xac>
 8022b90:	f04f 30ff 	mov.w	r0, #4294967295
 8022b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b98:	3501      	adds	r5, #1
 8022b9a:	e7c6      	b.n	8022b2a <_printf_common+0x3e>
 8022b9c:	18e1      	adds	r1, r4, r3
 8022b9e:	1c5a      	adds	r2, r3, #1
 8022ba0:	2030      	movs	r0, #48	@ 0x30
 8022ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022ba6:	4422      	add	r2, r4
 8022ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022bb0:	3302      	adds	r3, #2
 8022bb2:	e7c7      	b.n	8022b44 <_printf_common+0x58>
 8022bb4:	2301      	movs	r3, #1
 8022bb6:	4622      	mov	r2, r4
 8022bb8:	4641      	mov	r1, r8
 8022bba:	4638      	mov	r0, r7
 8022bbc:	47c8      	blx	r9
 8022bbe:	3001      	adds	r0, #1
 8022bc0:	d0e6      	beq.n	8022b90 <_printf_common+0xa4>
 8022bc2:	3601      	adds	r6, #1
 8022bc4:	e7d9      	b.n	8022b7a <_printf_common+0x8e>
	...

08022bc8 <_printf_i>:
 8022bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022bcc:	7e0f      	ldrb	r7, [r1, #24]
 8022bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022bd0:	2f78      	cmp	r7, #120	@ 0x78
 8022bd2:	4691      	mov	r9, r2
 8022bd4:	4680      	mov	r8, r0
 8022bd6:	460c      	mov	r4, r1
 8022bd8:	469a      	mov	sl, r3
 8022bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022bde:	d807      	bhi.n	8022bf0 <_printf_i+0x28>
 8022be0:	2f62      	cmp	r7, #98	@ 0x62
 8022be2:	d80a      	bhi.n	8022bfa <_printf_i+0x32>
 8022be4:	2f00      	cmp	r7, #0
 8022be6:	f000 80d2 	beq.w	8022d8e <_printf_i+0x1c6>
 8022bea:	2f58      	cmp	r7, #88	@ 0x58
 8022bec:	f000 80b9 	beq.w	8022d62 <_printf_i+0x19a>
 8022bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022bf8:	e03a      	b.n	8022c70 <_printf_i+0xa8>
 8022bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022bfe:	2b15      	cmp	r3, #21
 8022c00:	d8f6      	bhi.n	8022bf0 <_printf_i+0x28>
 8022c02:	a101      	add	r1, pc, #4	@ (adr r1, 8022c08 <_printf_i+0x40>)
 8022c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022c08:	08022c61 	.word	0x08022c61
 8022c0c:	08022c75 	.word	0x08022c75
 8022c10:	08022bf1 	.word	0x08022bf1
 8022c14:	08022bf1 	.word	0x08022bf1
 8022c18:	08022bf1 	.word	0x08022bf1
 8022c1c:	08022bf1 	.word	0x08022bf1
 8022c20:	08022c75 	.word	0x08022c75
 8022c24:	08022bf1 	.word	0x08022bf1
 8022c28:	08022bf1 	.word	0x08022bf1
 8022c2c:	08022bf1 	.word	0x08022bf1
 8022c30:	08022bf1 	.word	0x08022bf1
 8022c34:	08022d75 	.word	0x08022d75
 8022c38:	08022c9f 	.word	0x08022c9f
 8022c3c:	08022d2f 	.word	0x08022d2f
 8022c40:	08022bf1 	.word	0x08022bf1
 8022c44:	08022bf1 	.word	0x08022bf1
 8022c48:	08022d97 	.word	0x08022d97
 8022c4c:	08022bf1 	.word	0x08022bf1
 8022c50:	08022c9f 	.word	0x08022c9f
 8022c54:	08022bf1 	.word	0x08022bf1
 8022c58:	08022bf1 	.word	0x08022bf1
 8022c5c:	08022d37 	.word	0x08022d37
 8022c60:	6833      	ldr	r3, [r6, #0]
 8022c62:	1d1a      	adds	r2, r3, #4
 8022c64:	681b      	ldr	r3, [r3, #0]
 8022c66:	6032      	str	r2, [r6, #0]
 8022c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022c70:	2301      	movs	r3, #1
 8022c72:	e09d      	b.n	8022db0 <_printf_i+0x1e8>
 8022c74:	6833      	ldr	r3, [r6, #0]
 8022c76:	6820      	ldr	r0, [r4, #0]
 8022c78:	1d19      	adds	r1, r3, #4
 8022c7a:	6031      	str	r1, [r6, #0]
 8022c7c:	0606      	lsls	r6, r0, #24
 8022c7e:	d501      	bpl.n	8022c84 <_printf_i+0xbc>
 8022c80:	681d      	ldr	r5, [r3, #0]
 8022c82:	e003      	b.n	8022c8c <_printf_i+0xc4>
 8022c84:	0645      	lsls	r5, r0, #25
 8022c86:	d5fb      	bpl.n	8022c80 <_printf_i+0xb8>
 8022c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022c8c:	2d00      	cmp	r5, #0
 8022c8e:	da03      	bge.n	8022c98 <_printf_i+0xd0>
 8022c90:	232d      	movs	r3, #45	@ 0x2d
 8022c92:	426d      	negs	r5, r5
 8022c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022c98:	4859      	ldr	r0, [pc, #356]	@ (8022e00 <_printf_i+0x238>)
 8022c9a:	230a      	movs	r3, #10
 8022c9c:	e011      	b.n	8022cc2 <_printf_i+0xfa>
 8022c9e:	6821      	ldr	r1, [r4, #0]
 8022ca0:	6833      	ldr	r3, [r6, #0]
 8022ca2:	0608      	lsls	r0, r1, #24
 8022ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8022ca8:	d402      	bmi.n	8022cb0 <_printf_i+0xe8>
 8022caa:	0649      	lsls	r1, r1, #25
 8022cac:	bf48      	it	mi
 8022cae:	b2ad      	uxthmi	r5, r5
 8022cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8022cb2:	4853      	ldr	r0, [pc, #332]	@ (8022e00 <_printf_i+0x238>)
 8022cb4:	6033      	str	r3, [r6, #0]
 8022cb6:	bf14      	ite	ne
 8022cb8:	230a      	movne	r3, #10
 8022cba:	2308      	moveq	r3, #8
 8022cbc:	2100      	movs	r1, #0
 8022cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022cc2:	6866      	ldr	r6, [r4, #4]
 8022cc4:	60a6      	str	r6, [r4, #8]
 8022cc6:	2e00      	cmp	r6, #0
 8022cc8:	bfa2      	ittt	ge
 8022cca:	6821      	ldrge	r1, [r4, #0]
 8022ccc:	f021 0104 	bicge.w	r1, r1, #4
 8022cd0:	6021      	strge	r1, [r4, #0]
 8022cd2:	b90d      	cbnz	r5, 8022cd8 <_printf_i+0x110>
 8022cd4:	2e00      	cmp	r6, #0
 8022cd6:	d04b      	beq.n	8022d70 <_printf_i+0x1a8>
 8022cd8:	4616      	mov	r6, r2
 8022cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8022cde:	fb03 5711 	mls	r7, r3, r1, r5
 8022ce2:	5dc7      	ldrb	r7, [r0, r7]
 8022ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022ce8:	462f      	mov	r7, r5
 8022cea:	42bb      	cmp	r3, r7
 8022cec:	460d      	mov	r5, r1
 8022cee:	d9f4      	bls.n	8022cda <_printf_i+0x112>
 8022cf0:	2b08      	cmp	r3, #8
 8022cf2:	d10b      	bne.n	8022d0c <_printf_i+0x144>
 8022cf4:	6823      	ldr	r3, [r4, #0]
 8022cf6:	07df      	lsls	r7, r3, #31
 8022cf8:	d508      	bpl.n	8022d0c <_printf_i+0x144>
 8022cfa:	6923      	ldr	r3, [r4, #16]
 8022cfc:	6861      	ldr	r1, [r4, #4]
 8022cfe:	4299      	cmp	r1, r3
 8022d00:	bfde      	ittt	le
 8022d02:	2330      	movle	r3, #48	@ 0x30
 8022d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022d0c:	1b92      	subs	r2, r2, r6
 8022d0e:	6122      	str	r2, [r4, #16]
 8022d10:	f8cd a000 	str.w	sl, [sp]
 8022d14:	464b      	mov	r3, r9
 8022d16:	aa03      	add	r2, sp, #12
 8022d18:	4621      	mov	r1, r4
 8022d1a:	4640      	mov	r0, r8
 8022d1c:	f7ff fee6 	bl	8022aec <_printf_common>
 8022d20:	3001      	adds	r0, #1
 8022d22:	d14a      	bne.n	8022dba <_printf_i+0x1f2>
 8022d24:	f04f 30ff 	mov.w	r0, #4294967295
 8022d28:	b004      	add	sp, #16
 8022d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d2e:	6823      	ldr	r3, [r4, #0]
 8022d30:	f043 0320 	orr.w	r3, r3, #32
 8022d34:	6023      	str	r3, [r4, #0]
 8022d36:	4833      	ldr	r0, [pc, #204]	@ (8022e04 <_printf_i+0x23c>)
 8022d38:	2778      	movs	r7, #120	@ 0x78
 8022d3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022d3e:	6823      	ldr	r3, [r4, #0]
 8022d40:	6831      	ldr	r1, [r6, #0]
 8022d42:	061f      	lsls	r7, r3, #24
 8022d44:	f851 5b04 	ldr.w	r5, [r1], #4
 8022d48:	d402      	bmi.n	8022d50 <_printf_i+0x188>
 8022d4a:	065f      	lsls	r7, r3, #25
 8022d4c:	bf48      	it	mi
 8022d4e:	b2ad      	uxthmi	r5, r5
 8022d50:	6031      	str	r1, [r6, #0]
 8022d52:	07d9      	lsls	r1, r3, #31
 8022d54:	bf44      	itt	mi
 8022d56:	f043 0320 	orrmi.w	r3, r3, #32
 8022d5a:	6023      	strmi	r3, [r4, #0]
 8022d5c:	b11d      	cbz	r5, 8022d66 <_printf_i+0x19e>
 8022d5e:	2310      	movs	r3, #16
 8022d60:	e7ac      	b.n	8022cbc <_printf_i+0xf4>
 8022d62:	4827      	ldr	r0, [pc, #156]	@ (8022e00 <_printf_i+0x238>)
 8022d64:	e7e9      	b.n	8022d3a <_printf_i+0x172>
 8022d66:	6823      	ldr	r3, [r4, #0]
 8022d68:	f023 0320 	bic.w	r3, r3, #32
 8022d6c:	6023      	str	r3, [r4, #0]
 8022d6e:	e7f6      	b.n	8022d5e <_printf_i+0x196>
 8022d70:	4616      	mov	r6, r2
 8022d72:	e7bd      	b.n	8022cf0 <_printf_i+0x128>
 8022d74:	6833      	ldr	r3, [r6, #0]
 8022d76:	6825      	ldr	r5, [r4, #0]
 8022d78:	6961      	ldr	r1, [r4, #20]
 8022d7a:	1d18      	adds	r0, r3, #4
 8022d7c:	6030      	str	r0, [r6, #0]
 8022d7e:	062e      	lsls	r6, r5, #24
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	d501      	bpl.n	8022d88 <_printf_i+0x1c0>
 8022d84:	6019      	str	r1, [r3, #0]
 8022d86:	e002      	b.n	8022d8e <_printf_i+0x1c6>
 8022d88:	0668      	lsls	r0, r5, #25
 8022d8a:	d5fb      	bpl.n	8022d84 <_printf_i+0x1bc>
 8022d8c:	8019      	strh	r1, [r3, #0]
 8022d8e:	2300      	movs	r3, #0
 8022d90:	6123      	str	r3, [r4, #16]
 8022d92:	4616      	mov	r6, r2
 8022d94:	e7bc      	b.n	8022d10 <_printf_i+0x148>
 8022d96:	6833      	ldr	r3, [r6, #0]
 8022d98:	1d1a      	adds	r2, r3, #4
 8022d9a:	6032      	str	r2, [r6, #0]
 8022d9c:	681e      	ldr	r6, [r3, #0]
 8022d9e:	6862      	ldr	r2, [r4, #4]
 8022da0:	2100      	movs	r1, #0
 8022da2:	4630      	mov	r0, r6
 8022da4:	f7dd faac 	bl	8000300 <memchr>
 8022da8:	b108      	cbz	r0, 8022dae <_printf_i+0x1e6>
 8022daa:	1b80      	subs	r0, r0, r6
 8022dac:	6060      	str	r0, [r4, #4]
 8022dae:	6863      	ldr	r3, [r4, #4]
 8022db0:	6123      	str	r3, [r4, #16]
 8022db2:	2300      	movs	r3, #0
 8022db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022db8:	e7aa      	b.n	8022d10 <_printf_i+0x148>
 8022dba:	6923      	ldr	r3, [r4, #16]
 8022dbc:	4632      	mov	r2, r6
 8022dbe:	4649      	mov	r1, r9
 8022dc0:	4640      	mov	r0, r8
 8022dc2:	47d0      	blx	sl
 8022dc4:	3001      	adds	r0, #1
 8022dc6:	d0ad      	beq.n	8022d24 <_printf_i+0x15c>
 8022dc8:	6823      	ldr	r3, [r4, #0]
 8022dca:	079b      	lsls	r3, r3, #30
 8022dcc:	d413      	bmi.n	8022df6 <_printf_i+0x22e>
 8022dce:	68e0      	ldr	r0, [r4, #12]
 8022dd0:	9b03      	ldr	r3, [sp, #12]
 8022dd2:	4298      	cmp	r0, r3
 8022dd4:	bfb8      	it	lt
 8022dd6:	4618      	movlt	r0, r3
 8022dd8:	e7a6      	b.n	8022d28 <_printf_i+0x160>
 8022dda:	2301      	movs	r3, #1
 8022ddc:	4632      	mov	r2, r6
 8022dde:	4649      	mov	r1, r9
 8022de0:	4640      	mov	r0, r8
 8022de2:	47d0      	blx	sl
 8022de4:	3001      	adds	r0, #1
 8022de6:	d09d      	beq.n	8022d24 <_printf_i+0x15c>
 8022de8:	3501      	adds	r5, #1
 8022dea:	68e3      	ldr	r3, [r4, #12]
 8022dec:	9903      	ldr	r1, [sp, #12]
 8022dee:	1a5b      	subs	r3, r3, r1
 8022df0:	42ab      	cmp	r3, r5
 8022df2:	dcf2      	bgt.n	8022dda <_printf_i+0x212>
 8022df4:	e7eb      	b.n	8022dce <_printf_i+0x206>
 8022df6:	2500      	movs	r5, #0
 8022df8:	f104 0619 	add.w	r6, r4, #25
 8022dfc:	e7f5      	b.n	8022dea <_printf_i+0x222>
 8022dfe:	bf00      	nop
 8022e00:	08036c12 	.word	0x08036c12
 8022e04:	08036c23 	.word	0x08036c23

08022e08 <_scanf_float>:
 8022e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e0c:	b087      	sub	sp, #28
 8022e0e:	4617      	mov	r7, r2
 8022e10:	9303      	str	r3, [sp, #12]
 8022e12:	688b      	ldr	r3, [r1, #8]
 8022e14:	1e5a      	subs	r2, r3, #1
 8022e16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8022e1a:	bf81      	itttt	hi
 8022e1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8022e20:	eb03 0b05 	addhi.w	fp, r3, r5
 8022e24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8022e28:	608b      	strhi	r3, [r1, #8]
 8022e2a:	680b      	ldr	r3, [r1, #0]
 8022e2c:	460a      	mov	r2, r1
 8022e2e:	f04f 0500 	mov.w	r5, #0
 8022e32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8022e36:	f842 3b1c 	str.w	r3, [r2], #28
 8022e3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8022e3e:	4680      	mov	r8, r0
 8022e40:	460c      	mov	r4, r1
 8022e42:	bf98      	it	ls
 8022e44:	f04f 0b00 	movls.w	fp, #0
 8022e48:	9201      	str	r2, [sp, #4]
 8022e4a:	4616      	mov	r6, r2
 8022e4c:	46aa      	mov	sl, r5
 8022e4e:	46a9      	mov	r9, r5
 8022e50:	9502      	str	r5, [sp, #8]
 8022e52:	68a2      	ldr	r2, [r4, #8]
 8022e54:	b152      	cbz	r2, 8022e6c <_scanf_float+0x64>
 8022e56:	683b      	ldr	r3, [r7, #0]
 8022e58:	781b      	ldrb	r3, [r3, #0]
 8022e5a:	2b4e      	cmp	r3, #78	@ 0x4e
 8022e5c:	d864      	bhi.n	8022f28 <_scanf_float+0x120>
 8022e5e:	2b40      	cmp	r3, #64	@ 0x40
 8022e60:	d83c      	bhi.n	8022edc <_scanf_float+0xd4>
 8022e62:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8022e66:	b2c8      	uxtb	r0, r1
 8022e68:	280e      	cmp	r0, #14
 8022e6a:	d93a      	bls.n	8022ee2 <_scanf_float+0xda>
 8022e6c:	f1b9 0f00 	cmp.w	r9, #0
 8022e70:	d003      	beq.n	8022e7a <_scanf_float+0x72>
 8022e72:	6823      	ldr	r3, [r4, #0]
 8022e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8022e78:	6023      	str	r3, [r4, #0]
 8022e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022e7e:	f1ba 0f01 	cmp.w	sl, #1
 8022e82:	f200 8117 	bhi.w	80230b4 <_scanf_float+0x2ac>
 8022e86:	9b01      	ldr	r3, [sp, #4]
 8022e88:	429e      	cmp	r6, r3
 8022e8a:	f200 8108 	bhi.w	802309e <_scanf_float+0x296>
 8022e8e:	2001      	movs	r0, #1
 8022e90:	b007      	add	sp, #28
 8022e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e96:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8022e9a:	2a0d      	cmp	r2, #13
 8022e9c:	d8e6      	bhi.n	8022e6c <_scanf_float+0x64>
 8022e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8022ea4 <_scanf_float+0x9c>)
 8022ea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022ea4:	08022feb 	.word	0x08022feb
 8022ea8:	08022e6d 	.word	0x08022e6d
 8022eac:	08022e6d 	.word	0x08022e6d
 8022eb0:	08022e6d 	.word	0x08022e6d
 8022eb4:	0802304b 	.word	0x0802304b
 8022eb8:	08023023 	.word	0x08023023
 8022ebc:	08022e6d 	.word	0x08022e6d
 8022ec0:	08022e6d 	.word	0x08022e6d
 8022ec4:	08022ff9 	.word	0x08022ff9
 8022ec8:	08022e6d 	.word	0x08022e6d
 8022ecc:	08022e6d 	.word	0x08022e6d
 8022ed0:	08022e6d 	.word	0x08022e6d
 8022ed4:	08022e6d 	.word	0x08022e6d
 8022ed8:	08022fb1 	.word	0x08022fb1
 8022edc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8022ee0:	e7db      	b.n	8022e9a <_scanf_float+0x92>
 8022ee2:	290e      	cmp	r1, #14
 8022ee4:	d8c2      	bhi.n	8022e6c <_scanf_float+0x64>
 8022ee6:	a001      	add	r0, pc, #4	@ (adr r0, 8022eec <_scanf_float+0xe4>)
 8022ee8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8022eec:	08022fa1 	.word	0x08022fa1
 8022ef0:	08022e6d 	.word	0x08022e6d
 8022ef4:	08022fa1 	.word	0x08022fa1
 8022ef8:	08023037 	.word	0x08023037
 8022efc:	08022e6d 	.word	0x08022e6d
 8022f00:	08022f49 	.word	0x08022f49
 8022f04:	08022f87 	.word	0x08022f87
 8022f08:	08022f87 	.word	0x08022f87
 8022f0c:	08022f87 	.word	0x08022f87
 8022f10:	08022f87 	.word	0x08022f87
 8022f14:	08022f87 	.word	0x08022f87
 8022f18:	08022f87 	.word	0x08022f87
 8022f1c:	08022f87 	.word	0x08022f87
 8022f20:	08022f87 	.word	0x08022f87
 8022f24:	08022f87 	.word	0x08022f87
 8022f28:	2b6e      	cmp	r3, #110	@ 0x6e
 8022f2a:	d809      	bhi.n	8022f40 <_scanf_float+0x138>
 8022f2c:	2b60      	cmp	r3, #96	@ 0x60
 8022f2e:	d8b2      	bhi.n	8022e96 <_scanf_float+0x8e>
 8022f30:	2b54      	cmp	r3, #84	@ 0x54
 8022f32:	d07b      	beq.n	802302c <_scanf_float+0x224>
 8022f34:	2b59      	cmp	r3, #89	@ 0x59
 8022f36:	d199      	bne.n	8022e6c <_scanf_float+0x64>
 8022f38:	2d07      	cmp	r5, #7
 8022f3a:	d197      	bne.n	8022e6c <_scanf_float+0x64>
 8022f3c:	2508      	movs	r5, #8
 8022f3e:	e02c      	b.n	8022f9a <_scanf_float+0x192>
 8022f40:	2b74      	cmp	r3, #116	@ 0x74
 8022f42:	d073      	beq.n	802302c <_scanf_float+0x224>
 8022f44:	2b79      	cmp	r3, #121	@ 0x79
 8022f46:	e7f6      	b.n	8022f36 <_scanf_float+0x12e>
 8022f48:	6821      	ldr	r1, [r4, #0]
 8022f4a:	05c8      	lsls	r0, r1, #23
 8022f4c:	d51b      	bpl.n	8022f86 <_scanf_float+0x17e>
 8022f4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8022f52:	6021      	str	r1, [r4, #0]
 8022f54:	f109 0901 	add.w	r9, r9, #1
 8022f58:	f1bb 0f00 	cmp.w	fp, #0
 8022f5c:	d003      	beq.n	8022f66 <_scanf_float+0x15e>
 8022f5e:	3201      	adds	r2, #1
 8022f60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f64:	60a2      	str	r2, [r4, #8]
 8022f66:	68a3      	ldr	r3, [r4, #8]
 8022f68:	3b01      	subs	r3, #1
 8022f6a:	60a3      	str	r3, [r4, #8]
 8022f6c:	6923      	ldr	r3, [r4, #16]
 8022f6e:	3301      	adds	r3, #1
 8022f70:	6123      	str	r3, [r4, #16]
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	3b01      	subs	r3, #1
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	607b      	str	r3, [r7, #4]
 8022f7a:	f340 8087 	ble.w	802308c <_scanf_float+0x284>
 8022f7e:	683b      	ldr	r3, [r7, #0]
 8022f80:	3301      	adds	r3, #1
 8022f82:	603b      	str	r3, [r7, #0]
 8022f84:	e765      	b.n	8022e52 <_scanf_float+0x4a>
 8022f86:	eb1a 0105 	adds.w	r1, sl, r5
 8022f8a:	f47f af6f 	bne.w	8022e6c <_scanf_float+0x64>
 8022f8e:	6822      	ldr	r2, [r4, #0]
 8022f90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8022f94:	6022      	str	r2, [r4, #0]
 8022f96:	460d      	mov	r5, r1
 8022f98:	468a      	mov	sl, r1
 8022f9a:	f806 3b01 	strb.w	r3, [r6], #1
 8022f9e:	e7e2      	b.n	8022f66 <_scanf_float+0x15e>
 8022fa0:	6822      	ldr	r2, [r4, #0]
 8022fa2:	0610      	lsls	r0, r2, #24
 8022fa4:	f57f af62 	bpl.w	8022e6c <_scanf_float+0x64>
 8022fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022fac:	6022      	str	r2, [r4, #0]
 8022fae:	e7f4      	b.n	8022f9a <_scanf_float+0x192>
 8022fb0:	f1ba 0f00 	cmp.w	sl, #0
 8022fb4:	d10e      	bne.n	8022fd4 <_scanf_float+0x1cc>
 8022fb6:	f1b9 0f00 	cmp.w	r9, #0
 8022fba:	d10e      	bne.n	8022fda <_scanf_float+0x1d2>
 8022fbc:	6822      	ldr	r2, [r4, #0]
 8022fbe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8022fc2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8022fc6:	d108      	bne.n	8022fda <_scanf_float+0x1d2>
 8022fc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8022fcc:	6022      	str	r2, [r4, #0]
 8022fce:	f04f 0a01 	mov.w	sl, #1
 8022fd2:	e7e2      	b.n	8022f9a <_scanf_float+0x192>
 8022fd4:	f1ba 0f02 	cmp.w	sl, #2
 8022fd8:	d055      	beq.n	8023086 <_scanf_float+0x27e>
 8022fda:	2d01      	cmp	r5, #1
 8022fdc:	d002      	beq.n	8022fe4 <_scanf_float+0x1dc>
 8022fde:	2d04      	cmp	r5, #4
 8022fe0:	f47f af44 	bne.w	8022e6c <_scanf_float+0x64>
 8022fe4:	3501      	adds	r5, #1
 8022fe6:	b2ed      	uxtb	r5, r5
 8022fe8:	e7d7      	b.n	8022f9a <_scanf_float+0x192>
 8022fea:	f1ba 0f01 	cmp.w	sl, #1
 8022fee:	f47f af3d 	bne.w	8022e6c <_scanf_float+0x64>
 8022ff2:	f04f 0a02 	mov.w	sl, #2
 8022ff6:	e7d0      	b.n	8022f9a <_scanf_float+0x192>
 8022ff8:	b97d      	cbnz	r5, 802301a <_scanf_float+0x212>
 8022ffa:	f1b9 0f00 	cmp.w	r9, #0
 8022ffe:	f47f af38 	bne.w	8022e72 <_scanf_float+0x6a>
 8023002:	6822      	ldr	r2, [r4, #0]
 8023004:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8023008:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802300c:	f040 8101 	bne.w	8023212 <_scanf_float+0x40a>
 8023010:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8023014:	6022      	str	r2, [r4, #0]
 8023016:	2501      	movs	r5, #1
 8023018:	e7bf      	b.n	8022f9a <_scanf_float+0x192>
 802301a:	2d03      	cmp	r5, #3
 802301c:	d0e2      	beq.n	8022fe4 <_scanf_float+0x1dc>
 802301e:	2d05      	cmp	r5, #5
 8023020:	e7de      	b.n	8022fe0 <_scanf_float+0x1d8>
 8023022:	2d02      	cmp	r5, #2
 8023024:	f47f af22 	bne.w	8022e6c <_scanf_float+0x64>
 8023028:	2503      	movs	r5, #3
 802302a:	e7b6      	b.n	8022f9a <_scanf_float+0x192>
 802302c:	2d06      	cmp	r5, #6
 802302e:	f47f af1d 	bne.w	8022e6c <_scanf_float+0x64>
 8023032:	2507      	movs	r5, #7
 8023034:	e7b1      	b.n	8022f9a <_scanf_float+0x192>
 8023036:	6822      	ldr	r2, [r4, #0]
 8023038:	0591      	lsls	r1, r2, #22
 802303a:	f57f af17 	bpl.w	8022e6c <_scanf_float+0x64>
 802303e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8023042:	6022      	str	r2, [r4, #0]
 8023044:	f8cd 9008 	str.w	r9, [sp, #8]
 8023048:	e7a7      	b.n	8022f9a <_scanf_float+0x192>
 802304a:	6822      	ldr	r2, [r4, #0]
 802304c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8023050:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8023054:	d006      	beq.n	8023064 <_scanf_float+0x25c>
 8023056:	0550      	lsls	r0, r2, #21
 8023058:	f57f af08 	bpl.w	8022e6c <_scanf_float+0x64>
 802305c:	f1b9 0f00 	cmp.w	r9, #0
 8023060:	f000 80d7 	beq.w	8023212 <_scanf_float+0x40a>
 8023064:	0591      	lsls	r1, r2, #22
 8023066:	bf58      	it	pl
 8023068:	9902      	ldrpl	r1, [sp, #8]
 802306a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802306e:	bf58      	it	pl
 8023070:	eba9 0101 	subpl.w	r1, r9, r1
 8023074:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8023078:	bf58      	it	pl
 802307a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802307e:	6022      	str	r2, [r4, #0]
 8023080:	f04f 0900 	mov.w	r9, #0
 8023084:	e789      	b.n	8022f9a <_scanf_float+0x192>
 8023086:	f04f 0a03 	mov.w	sl, #3
 802308a:	e786      	b.n	8022f9a <_scanf_float+0x192>
 802308c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8023090:	4639      	mov	r1, r7
 8023092:	4640      	mov	r0, r8
 8023094:	4798      	blx	r3
 8023096:	2800      	cmp	r0, #0
 8023098:	f43f aedb 	beq.w	8022e52 <_scanf_float+0x4a>
 802309c:	e6e6      	b.n	8022e6c <_scanf_float+0x64>
 802309e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80230a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80230a6:	463a      	mov	r2, r7
 80230a8:	4640      	mov	r0, r8
 80230aa:	4798      	blx	r3
 80230ac:	6923      	ldr	r3, [r4, #16]
 80230ae:	3b01      	subs	r3, #1
 80230b0:	6123      	str	r3, [r4, #16]
 80230b2:	e6e8      	b.n	8022e86 <_scanf_float+0x7e>
 80230b4:	1e6b      	subs	r3, r5, #1
 80230b6:	2b06      	cmp	r3, #6
 80230b8:	d824      	bhi.n	8023104 <_scanf_float+0x2fc>
 80230ba:	2d02      	cmp	r5, #2
 80230bc:	d836      	bhi.n	802312c <_scanf_float+0x324>
 80230be:	9b01      	ldr	r3, [sp, #4]
 80230c0:	429e      	cmp	r6, r3
 80230c2:	f67f aee4 	bls.w	8022e8e <_scanf_float+0x86>
 80230c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80230ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80230ce:	463a      	mov	r2, r7
 80230d0:	4640      	mov	r0, r8
 80230d2:	4798      	blx	r3
 80230d4:	6923      	ldr	r3, [r4, #16]
 80230d6:	3b01      	subs	r3, #1
 80230d8:	6123      	str	r3, [r4, #16]
 80230da:	e7f0      	b.n	80230be <_scanf_float+0x2b6>
 80230dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80230e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80230e4:	463a      	mov	r2, r7
 80230e6:	4640      	mov	r0, r8
 80230e8:	4798      	blx	r3
 80230ea:	6923      	ldr	r3, [r4, #16]
 80230ec:	3b01      	subs	r3, #1
 80230ee:	6123      	str	r3, [r4, #16]
 80230f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80230f4:	fa5f fa8a 	uxtb.w	sl, sl
 80230f8:	f1ba 0f02 	cmp.w	sl, #2
 80230fc:	d1ee      	bne.n	80230dc <_scanf_float+0x2d4>
 80230fe:	3d03      	subs	r5, #3
 8023100:	b2ed      	uxtb	r5, r5
 8023102:	1b76      	subs	r6, r6, r5
 8023104:	6823      	ldr	r3, [r4, #0]
 8023106:	05da      	lsls	r2, r3, #23
 8023108:	d530      	bpl.n	802316c <_scanf_float+0x364>
 802310a:	055b      	lsls	r3, r3, #21
 802310c:	d511      	bpl.n	8023132 <_scanf_float+0x32a>
 802310e:	9b01      	ldr	r3, [sp, #4]
 8023110:	429e      	cmp	r6, r3
 8023112:	f67f aebc 	bls.w	8022e8e <_scanf_float+0x86>
 8023116:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802311a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802311e:	463a      	mov	r2, r7
 8023120:	4640      	mov	r0, r8
 8023122:	4798      	blx	r3
 8023124:	6923      	ldr	r3, [r4, #16]
 8023126:	3b01      	subs	r3, #1
 8023128:	6123      	str	r3, [r4, #16]
 802312a:	e7f0      	b.n	802310e <_scanf_float+0x306>
 802312c:	46aa      	mov	sl, r5
 802312e:	46b3      	mov	fp, r6
 8023130:	e7de      	b.n	80230f0 <_scanf_float+0x2e8>
 8023132:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8023136:	6923      	ldr	r3, [r4, #16]
 8023138:	2965      	cmp	r1, #101	@ 0x65
 802313a:	f103 33ff 	add.w	r3, r3, #4294967295
 802313e:	f106 35ff 	add.w	r5, r6, #4294967295
 8023142:	6123      	str	r3, [r4, #16]
 8023144:	d00c      	beq.n	8023160 <_scanf_float+0x358>
 8023146:	2945      	cmp	r1, #69	@ 0x45
 8023148:	d00a      	beq.n	8023160 <_scanf_float+0x358>
 802314a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802314e:	463a      	mov	r2, r7
 8023150:	4640      	mov	r0, r8
 8023152:	4798      	blx	r3
 8023154:	6923      	ldr	r3, [r4, #16]
 8023156:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802315a:	3b01      	subs	r3, #1
 802315c:	1eb5      	subs	r5, r6, #2
 802315e:	6123      	str	r3, [r4, #16]
 8023160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023164:	463a      	mov	r2, r7
 8023166:	4640      	mov	r0, r8
 8023168:	4798      	blx	r3
 802316a:	462e      	mov	r6, r5
 802316c:	6822      	ldr	r2, [r4, #0]
 802316e:	f012 0210 	ands.w	r2, r2, #16
 8023172:	d001      	beq.n	8023178 <_scanf_float+0x370>
 8023174:	2000      	movs	r0, #0
 8023176:	e68b      	b.n	8022e90 <_scanf_float+0x88>
 8023178:	7032      	strb	r2, [r6, #0]
 802317a:	6823      	ldr	r3, [r4, #0]
 802317c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8023180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023184:	d11a      	bne.n	80231bc <_scanf_float+0x3b4>
 8023186:	9b02      	ldr	r3, [sp, #8]
 8023188:	454b      	cmp	r3, r9
 802318a:	eba3 0209 	sub.w	r2, r3, r9
 802318e:	d121      	bne.n	80231d4 <_scanf_float+0x3cc>
 8023190:	9901      	ldr	r1, [sp, #4]
 8023192:	2200      	movs	r2, #0
 8023194:	4640      	mov	r0, r8
 8023196:	f002 fc11 	bl	80259bc <_strtod_r>
 802319a:	9b03      	ldr	r3, [sp, #12]
 802319c:	6821      	ldr	r1, [r4, #0]
 802319e:	681b      	ldr	r3, [r3, #0]
 80231a0:	f011 0f02 	tst.w	r1, #2
 80231a4:	f103 0204 	add.w	r2, r3, #4
 80231a8:	d01f      	beq.n	80231ea <_scanf_float+0x3e2>
 80231aa:	9903      	ldr	r1, [sp, #12]
 80231ac:	600a      	str	r2, [r1, #0]
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	ed83 0b00 	vstr	d0, [r3]
 80231b4:	68e3      	ldr	r3, [r4, #12]
 80231b6:	3301      	adds	r3, #1
 80231b8:	60e3      	str	r3, [r4, #12]
 80231ba:	e7db      	b.n	8023174 <_scanf_float+0x36c>
 80231bc:	9b04      	ldr	r3, [sp, #16]
 80231be:	2b00      	cmp	r3, #0
 80231c0:	d0e6      	beq.n	8023190 <_scanf_float+0x388>
 80231c2:	9905      	ldr	r1, [sp, #20]
 80231c4:	230a      	movs	r3, #10
 80231c6:	3101      	adds	r1, #1
 80231c8:	4640      	mov	r0, r8
 80231ca:	f7ff f961 	bl	8022490 <_strtol_r>
 80231ce:	9b04      	ldr	r3, [sp, #16]
 80231d0:	9e05      	ldr	r6, [sp, #20]
 80231d2:	1ac2      	subs	r2, r0, r3
 80231d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80231d8:	429e      	cmp	r6, r3
 80231da:	bf28      	it	cs
 80231dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80231e0:	490d      	ldr	r1, [pc, #52]	@ (8023218 <_scanf_float+0x410>)
 80231e2:	4630      	mov	r0, r6
 80231e4:	f000 f92c 	bl	8023440 <siprintf>
 80231e8:	e7d2      	b.n	8023190 <_scanf_float+0x388>
 80231ea:	f011 0f04 	tst.w	r1, #4
 80231ee:	9903      	ldr	r1, [sp, #12]
 80231f0:	600a      	str	r2, [r1, #0]
 80231f2:	d1dc      	bne.n	80231ae <_scanf_float+0x3a6>
 80231f4:	eeb4 0b40 	vcmp.f64	d0, d0
 80231f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231fc:	681d      	ldr	r5, [r3, #0]
 80231fe:	d705      	bvc.n	802320c <_scanf_float+0x404>
 8023200:	4806      	ldr	r0, [pc, #24]	@ (802321c <_scanf_float+0x414>)
 8023202:	f000 fb43 	bl	802388c <nanf>
 8023206:	ed85 0a00 	vstr	s0, [r5]
 802320a:	e7d3      	b.n	80231b4 <_scanf_float+0x3ac>
 802320c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8023210:	e7f9      	b.n	8023206 <_scanf_float+0x3fe>
 8023212:	f04f 0900 	mov.w	r9, #0
 8023216:	e630      	b.n	8022e7a <_scanf_float+0x72>
 8023218:	08036c34 	.word	0x08036c34
 802321c:	08036a8f 	.word	0x08036a8f

08023220 <std>:
 8023220:	2300      	movs	r3, #0
 8023222:	b510      	push	{r4, lr}
 8023224:	4604      	mov	r4, r0
 8023226:	e9c0 3300 	strd	r3, r3, [r0]
 802322a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802322e:	6083      	str	r3, [r0, #8]
 8023230:	8181      	strh	r1, [r0, #12]
 8023232:	6643      	str	r3, [r0, #100]	@ 0x64
 8023234:	81c2      	strh	r2, [r0, #14]
 8023236:	6183      	str	r3, [r0, #24]
 8023238:	4619      	mov	r1, r3
 802323a:	2208      	movs	r2, #8
 802323c:	305c      	adds	r0, #92	@ 0x5c
 802323e:	f000 fa21 	bl	8023684 <memset>
 8023242:	4b0d      	ldr	r3, [pc, #52]	@ (8023278 <std+0x58>)
 8023244:	6263      	str	r3, [r4, #36]	@ 0x24
 8023246:	4b0d      	ldr	r3, [pc, #52]	@ (802327c <std+0x5c>)
 8023248:	62a3      	str	r3, [r4, #40]	@ 0x28
 802324a:	4b0d      	ldr	r3, [pc, #52]	@ (8023280 <std+0x60>)
 802324c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802324e:	4b0d      	ldr	r3, [pc, #52]	@ (8023284 <std+0x64>)
 8023250:	6323      	str	r3, [r4, #48]	@ 0x30
 8023252:	4b0d      	ldr	r3, [pc, #52]	@ (8023288 <std+0x68>)
 8023254:	6224      	str	r4, [r4, #32]
 8023256:	429c      	cmp	r4, r3
 8023258:	d006      	beq.n	8023268 <std+0x48>
 802325a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802325e:	4294      	cmp	r4, r2
 8023260:	d002      	beq.n	8023268 <std+0x48>
 8023262:	33d0      	adds	r3, #208	@ 0xd0
 8023264:	429c      	cmp	r4, r3
 8023266:	d105      	bne.n	8023274 <std+0x54>
 8023268:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023270:	f000 baf2 	b.w	8023858 <__retarget_lock_init_recursive>
 8023274:	bd10      	pop	{r4, pc}
 8023276:	bf00      	nop
 8023278:	08023481 	.word	0x08023481
 802327c:	080234a3 	.word	0x080234a3
 8023280:	080234db 	.word	0x080234db
 8023284:	080234ff 	.word	0x080234ff
 8023288:	24003ef8 	.word	0x24003ef8

0802328c <stdio_exit_handler>:
 802328c:	4a02      	ldr	r2, [pc, #8]	@ (8023298 <stdio_exit_handler+0xc>)
 802328e:	4903      	ldr	r1, [pc, #12]	@ (802329c <stdio_exit_handler+0x10>)
 8023290:	4803      	ldr	r0, [pc, #12]	@ (80232a0 <stdio_exit_handler+0x14>)
 8023292:	f000 b87b 	b.w	802338c <_fwalk_sglue>
 8023296:	bf00      	nop
 8023298:	240007a0 	.word	0x240007a0
 802329c:	08026005 	.word	0x08026005
 80232a0:	240007b0 	.word	0x240007b0

080232a4 <cleanup_stdio>:
 80232a4:	6841      	ldr	r1, [r0, #4]
 80232a6:	4b0c      	ldr	r3, [pc, #48]	@ (80232d8 <cleanup_stdio+0x34>)
 80232a8:	4299      	cmp	r1, r3
 80232aa:	b510      	push	{r4, lr}
 80232ac:	4604      	mov	r4, r0
 80232ae:	d001      	beq.n	80232b4 <cleanup_stdio+0x10>
 80232b0:	f002 fea8 	bl	8026004 <_fflush_r>
 80232b4:	68a1      	ldr	r1, [r4, #8]
 80232b6:	4b09      	ldr	r3, [pc, #36]	@ (80232dc <cleanup_stdio+0x38>)
 80232b8:	4299      	cmp	r1, r3
 80232ba:	d002      	beq.n	80232c2 <cleanup_stdio+0x1e>
 80232bc:	4620      	mov	r0, r4
 80232be:	f002 fea1 	bl	8026004 <_fflush_r>
 80232c2:	68e1      	ldr	r1, [r4, #12]
 80232c4:	4b06      	ldr	r3, [pc, #24]	@ (80232e0 <cleanup_stdio+0x3c>)
 80232c6:	4299      	cmp	r1, r3
 80232c8:	d004      	beq.n	80232d4 <cleanup_stdio+0x30>
 80232ca:	4620      	mov	r0, r4
 80232cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232d0:	f002 be98 	b.w	8026004 <_fflush_r>
 80232d4:	bd10      	pop	{r4, pc}
 80232d6:	bf00      	nop
 80232d8:	24003ef8 	.word	0x24003ef8
 80232dc:	24003f60 	.word	0x24003f60
 80232e0:	24003fc8 	.word	0x24003fc8

080232e4 <global_stdio_init.part.0>:
 80232e4:	b510      	push	{r4, lr}
 80232e6:	4b0b      	ldr	r3, [pc, #44]	@ (8023314 <global_stdio_init.part.0+0x30>)
 80232e8:	4c0b      	ldr	r4, [pc, #44]	@ (8023318 <global_stdio_init.part.0+0x34>)
 80232ea:	4a0c      	ldr	r2, [pc, #48]	@ (802331c <global_stdio_init.part.0+0x38>)
 80232ec:	601a      	str	r2, [r3, #0]
 80232ee:	4620      	mov	r0, r4
 80232f0:	2200      	movs	r2, #0
 80232f2:	2104      	movs	r1, #4
 80232f4:	f7ff ff94 	bl	8023220 <std>
 80232f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80232fc:	2201      	movs	r2, #1
 80232fe:	2109      	movs	r1, #9
 8023300:	f7ff ff8e 	bl	8023220 <std>
 8023304:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023308:	2202      	movs	r2, #2
 802330a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802330e:	2112      	movs	r1, #18
 8023310:	f7ff bf86 	b.w	8023220 <std>
 8023314:	24004030 	.word	0x24004030
 8023318:	24003ef8 	.word	0x24003ef8
 802331c:	0802328d 	.word	0x0802328d

08023320 <__sfp_lock_acquire>:
 8023320:	4801      	ldr	r0, [pc, #4]	@ (8023328 <__sfp_lock_acquire+0x8>)
 8023322:	f000 ba9a 	b.w	802385a <__retarget_lock_acquire_recursive>
 8023326:	bf00      	nop
 8023328:	24004039 	.word	0x24004039

0802332c <__sfp_lock_release>:
 802332c:	4801      	ldr	r0, [pc, #4]	@ (8023334 <__sfp_lock_release+0x8>)
 802332e:	f000 ba95 	b.w	802385c <__retarget_lock_release_recursive>
 8023332:	bf00      	nop
 8023334:	24004039 	.word	0x24004039

08023338 <__sinit>:
 8023338:	b510      	push	{r4, lr}
 802333a:	4604      	mov	r4, r0
 802333c:	f7ff fff0 	bl	8023320 <__sfp_lock_acquire>
 8023340:	6a23      	ldr	r3, [r4, #32]
 8023342:	b11b      	cbz	r3, 802334c <__sinit+0x14>
 8023344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023348:	f7ff bff0 	b.w	802332c <__sfp_lock_release>
 802334c:	4b04      	ldr	r3, [pc, #16]	@ (8023360 <__sinit+0x28>)
 802334e:	6223      	str	r3, [r4, #32]
 8023350:	4b04      	ldr	r3, [pc, #16]	@ (8023364 <__sinit+0x2c>)
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	2b00      	cmp	r3, #0
 8023356:	d1f5      	bne.n	8023344 <__sinit+0xc>
 8023358:	f7ff ffc4 	bl	80232e4 <global_stdio_init.part.0>
 802335c:	e7f2      	b.n	8023344 <__sinit+0xc>
 802335e:	bf00      	nop
 8023360:	080232a5 	.word	0x080232a5
 8023364:	24004030 	.word	0x24004030

08023368 <fiprintf>:
 8023368:	b40e      	push	{r1, r2, r3}
 802336a:	b503      	push	{r0, r1, lr}
 802336c:	4601      	mov	r1, r0
 802336e:	ab03      	add	r3, sp, #12
 8023370:	4805      	ldr	r0, [pc, #20]	@ (8023388 <fiprintf+0x20>)
 8023372:	f853 2b04 	ldr.w	r2, [r3], #4
 8023376:	6800      	ldr	r0, [r0, #0]
 8023378:	9301      	str	r3, [sp, #4]
 802337a:	f002 fca7 	bl	8025ccc <_vfiprintf_r>
 802337e:	b002      	add	sp, #8
 8023380:	f85d eb04 	ldr.w	lr, [sp], #4
 8023384:	b003      	add	sp, #12
 8023386:	4770      	bx	lr
 8023388:	240007ac 	.word	0x240007ac

0802338c <_fwalk_sglue>:
 802338c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023390:	4607      	mov	r7, r0
 8023392:	4688      	mov	r8, r1
 8023394:	4614      	mov	r4, r2
 8023396:	2600      	movs	r6, #0
 8023398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802339c:	f1b9 0901 	subs.w	r9, r9, #1
 80233a0:	d505      	bpl.n	80233ae <_fwalk_sglue+0x22>
 80233a2:	6824      	ldr	r4, [r4, #0]
 80233a4:	2c00      	cmp	r4, #0
 80233a6:	d1f7      	bne.n	8023398 <_fwalk_sglue+0xc>
 80233a8:	4630      	mov	r0, r6
 80233aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80233ae:	89ab      	ldrh	r3, [r5, #12]
 80233b0:	2b01      	cmp	r3, #1
 80233b2:	d907      	bls.n	80233c4 <_fwalk_sglue+0x38>
 80233b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80233b8:	3301      	adds	r3, #1
 80233ba:	d003      	beq.n	80233c4 <_fwalk_sglue+0x38>
 80233bc:	4629      	mov	r1, r5
 80233be:	4638      	mov	r0, r7
 80233c0:	47c0      	blx	r8
 80233c2:	4306      	orrs	r6, r0
 80233c4:	3568      	adds	r5, #104	@ 0x68
 80233c6:	e7e9      	b.n	802339c <_fwalk_sglue+0x10>

080233c8 <putchar>:
 80233c8:	4b02      	ldr	r3, [pc, #8]	@ (80233d4 <putchar+0xc>)
 80233ca:	4601      	mov	r1, r0
 80233cc:	6818      	ldr	r0, [r3, #0]
 80233ce:	6882      	ldr	r2, [r0, #8]
 80233d0:	f002 bea2 	b.w	8026118 <_putc_r>
 80233d4:	240007ac 	.word	0x240007ac

080233d8 <sniprintf>:
 80233d8:	b40c      	push	{r2, r3}
 80233da:	b530      	push	{r4, r5, lr}
 80233dc:	4b17      	ldr	r3, [pc, #92]	@ (802343c <sniprintf+0x64>)
 80233de:	1e0c      	subs	r4, r1, #0
 80233e0:	681d      	ldr	r5, [r3, #0]
 80233e2:	b09d      	sub	sp, #116	@ 0x74
 80233e4:	da08      	bge.n	80233f8 <sniprintf+0x20>
 80233e6:	238b      	movs	r3, #139	@ 0x8b
 80233e8:	602b      	str	r3, [r5, #0]
 80233ea:	f04f 30ff 	mov.w	r0, #4294967295
 80233ee:	b01d      	add	sp, #116	@ 0x74
 80233f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80233f4:	b002      	add	sp, #8
 80233f6:	4770      	bx	lr
 80233f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80233fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023400:	bf14      	ite	ne
 8023402:	f104 33ff 	addne.w	r3, r4, #4294967295
 8023406:	4623      	moveq	r3, r4
 8023408:	9304      	str	r3, [sp, #16]
 802340a:	9307      	str	r3, [sp, #28]
 802340c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023410:	9002      	str	r0, [sp, #8]
 8023412:	9006      	str	r0, [sp, #24]
 8023414:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802341a:	ab21      	add	r3, sp, #132	@ 0x84
 802341c:	a902      	add	r1, sp, #8
 802341e:	4628      	mov	r0, r5
 8023420:	9301      	str	r3, [sp, #4]
 8023422:	f002 fb2d 	bl	8025a80 <_svfiprintf_r>
 8023426:	1c43      	adds	r3, r0, #1
 8023428:	bfbc      	itt	lt
 802342a:	238b      	movlt	r3, #139	@ 0x8b
 802342c:	602b      	strlt	r3, [r5, #0]
 802342e:	2c00      	cmp	r4, #0
 8023430:	d0dd      	beq.n	80233ee <sniprintf+0x16>
 8023432:	9b02      	ldr	r3, [sp, #8]
 8023434:	2200      	movs	r2, #0
 8023436:	701a      	strb	r2, [r3, #0]
 8023438:	e7d9      	b.n	80233ee <sniprintf+0x16>
 802343a:	bf00      	nop
 802343c:	240007ac 	.word	0x240007ac

08023440 <siprintf>:
 8023440:	b40e      	push	{r1, r2, r3}
 8023442:	b500      	push	{lr}
 8023444:	b09c      	sub	sp, #112	@ 0x70
 8023446:	ab1d      	add	r3, sp, #116	@ 0x74
 8023448:	9002      	str	r0, [sp, #8]
 802344a:	9006      	str	r0, [sp, #24]
 802344c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023450:	4809      	ldr	r0, [pc, #36]	@ (8023478 <siprintf+0x38>)
 8023452:	9107      	str	r1, [sp, #28]
 8023454:	9104      	str	r1, [sp, #16]
 8023456:	4909      	ldr	r1, [pc, #36]	@ (802347c <siprintf+0x3c>)
 8023458:	f853 2b04 	ldr.w	r2, [r3], #4
 802345c:	9105      	str	r1, [sp, #20]
 802345e:	6800      	ldr	r0, [r0, #0]
 8023460:	9301      	str	r3, [sp, #4]
 8023462:	a902      	add	r1, sp, #8
 8023464:	f002 fb0c 	bl	8025a80 <_svfiprintf_r>
 8023468:	9b02      	ldr	r3, [sp, #8]
 802346a:	2200      	movs	r2, #0
 802346c:	701a      	strb	r2, [r3, #0]
 802346e:	b01c      	add	sp, #112	@ 0x70
 8023470:	f85d eb04 	ldr.w	lr, [sp], #4
 8023474:	b003      	add	sp, #12
 8023476:	4770      	bx	lr
 8023478:	240007ac 	.word	0x240007ac
 802347c:	ffff0208 	.word	0xffff0208

08023480 <__sread>:
 8023480:	b510      	push	{r4, lr}
 8023482:	460c      	mov	r4, r1
 8023484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023488:	f000 f988 	bl	802379c <_read_r>
 802348c:	2800      	cmp	r0, #0
 802348e:	bfab      	itete	ge
 8023490:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023492:	89a3      	ldrhlt	r3, [r4, #12]
 8023494:	181b      	addge	r3, r3, r0
 8023496:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802349a:	bfac      	ite	ge
 802349c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802349e:	81a3      	strhlt	r3, [r4, #12]
 80234a0:	bd10      	pop	{r4, pc}

080234a2 <__swrite>:
 80234a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234a6:	461f      	mov	r7, r3
 80234a8:	898b      	ldrh	r3, [r1, #12]
 80234aa:	05db      	lsls	r3, r3, #23
 80234ac:	4605      	mov	r5, r0
 80234ae:	460c      	mov	r4, r1
 80234b0:	4616      	mov	r6, r2
 80234b2:	d505      	bpl.n	80234c0 <__swrite+0x1e>
 80234b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234b8:	2302      	movs	r3, #2
 80234ba:	2200      	movs	r2, #0
 80234bc:	f000 f95c 	bl	8023778 <_lseek_r>
 80234c0:	89a3      	ldrh	r3, [r4, #12]
 80234c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80234c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80234ca:	81a3      	strh	r3, [r4, #12]
 80234cc:	4632      	mov	r2, r6
 80234ce:	463b      	mov	r3, r7
 80234d0:	4628      	mov	r0, r5
 80234d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80234d6:	f000 b983 	b.w	80237e0 <_write_r>

080234da <__sseek>:
 80234da:	b510      	push	{r4, lr}
 80234dc:	460c      	mov	r4, r1
 80234de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234e2:	f000 f949 	bl	8023778 <_lseek_r>
 80234e6:	1c43      	adds	r3, r0, #1
 80234e8:	89a3      	ldrh	r3, [r4, #12]
 80234ea:	bf15      	itete	ne
 80234ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80234ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80234f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80234f6:	81a3      	strheq	r3, [r4, #12]
 80234f8:	bf18      	it	ne
 80234fa:	81a3      	strhne	r3, [r4, #12]
 80234fc:	bd10      	pop	{r4, pc}

080234fe <__sclose>:
 80234fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023502:	f000 b929 	b.w	8023758 <_close_r>

08023506 <__swbuf_r>:
 8023506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023508:	460e      	mov	r6, r1
 802350a:	4614      	mov	r4, r2
 802350c:	4605      	mov	r5, r0
 802350e:	b118      	cbz	r0, 8023518 <__swbuf_r+0x12>
 8023510:	6a03      	ldr	r3, [r0, #32]
 8023512:	b90b      	cbnz	r3, 8023518 <__swbuf_r+0x12>
 8023514:	f7ff ff10 	bl	8023338 <__sinit>
 8023518:	69a3      	ldr	r3, [r4, #24]
 802351a:	60a3      	str	r3, [r4, #8]
 802351c:	89a3      	ldrh	r3, [r4, #12]
 802351e:	071a      	lsls	r2, r3, #28
 8023520:	d501      	bpl.n	8023526 <__swbuf_r+0x20>
 8023522:	6923      	ldr	r3, [r4, #16]
 8023524:	b943      	cbnz	r3, 8023538 <__swbuf_r+0x32>
 8023526:	4621      	mov	r1, r4
 8023528:	4628      	mov	r0, r5
 802352a:	f000 f82b 	bl	8023584 <__swsetup_r>
 802352e:	b118      	cbz	r0, 8023538 <__swbuf_r+0x32>
 8023530:	f04f 37ff 	mov.w	r7, #4294967295
 8023534:	4638      	mov	r0, r7
 8023536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023538:	6823      	ldr	r3, [r4, #0]
 802353a:	6922      	ldr	r2, [r4, #16]
 802353c:	1a98      	subs	r0, r3, r2
 802353e:	6963      	ldr	r3, [r4, #20]
 8023540:	b2f6      	uxtb	r6, r6
 8023542:	4283      	cmp	r3, r0
 8023544:	4637      	mov	r7, r6
 8023546:	dc05      	bgt.n	8023554 <__swbuf_r+0x4e>
 8023548:	4621      	mov	r1, r4
 802354a:	4628      	mov	r0, r5
 802354c:	f002 fd5a 	bl	8026004 <_fflush_r>
 8023550:	2800      	cmp	r0, #0
 8023552:	d1ed      	bne.n	8023530 <__swbuf_r+0x2a>
 8023554:	68a3      	ldr	r3, [r4, #8]
 8023556:	3b01      	subs	r3, #1
 8023558:	60a3      	str	r3, [r4, #8]
 802355a:	6823      	ldr	r3, [r4, #0]
 802355c:	1c5a      	adds	r2, r3, #1
 802355e:	6022      	str	r2, [r4, #0]
 8023560:	701e      	strb	r6, [r3, #0]
 8023562:	6962      	ldr	r2, [r4, #20]
 8023564:	1c43      	adds	r3, r0, #1
 8023566:	429a      	cmp	r2, r3
 8023568:	d004      	beq.n	8023574 <__swbuf_r+0x6e>
 802356a:	89a3      	ldrh	r3, [r4, #12]
 802356c:	07db      	lsls	r3, r3, #31
 802356e:	d5e1      	bpl.n	8023534 <__swbuf_r+0x2e>
 8023570:	2e0a      	cmp	r6, #10
 8023572:	d1df      	bne.n	8023534 <__swbuf_r+0x2e>
 8023574:	4621      	mov	r1, r4
 8023576:	4628      	mov	r0, r5
 8023578:	f002 fd44 	bl	8026004 <_fflush_r>
 802357c:	2800      	cmp	r0, #0
 802357e:	d0d9      	beq.n	8023534 <__swbuf_r+0x2e>
 8023580:	e7d6      	b.n	8023530 <__swbuf_r+0x2a>
	...

08023584 <__swsetup_r>:
 8023584:	b538      	push	{r3, r4, r5, lr}
 8023586:	4b29      	ldr	r3, [pc, #164]	@ (802362c <__swsetup_r+0xa8>)
 8023588:	4605      	mov	r5, r0
 802358a:	6818      	ldr	r0, [r3, #0]
 802358c:	460c      	mov	r4, r1
 802358e:	b118      	cbz	r0, 8023598 <__swsetup_r+0x14>
 8023590:	6a03      	ldr	r3, [r0, #32]
 8023592:	b90b      	cbnz	r3, 8023598 <__swsetup_r+0x14>
 8023594:	f7ff fed0 	bl	8023338 <__sinit>
 8023598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802359c:	0719      	lsls	r1, r3, #28
 802359e:	d422      	bmi.n	80235e6 <__swsetup_r+0x62>
 80235a0:	06da      	lsls	r2, r3, #27
 80235a2:	d407      	bmi.n	80235b4 <__swsetup_r+0x30>
 80235a4:	2209      	movs	r2, #9
 80235a6:	602a      	str	r2, [r5, #0]
 80235a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80235ac:	81a3      	strh	r3, [r4, #12]
 80235ae:	f04f 30ff 	mov.w	r0, #4294967295
 80235b2:	e033      	b.n	802361c <__swsetup_r+0x98>
 80235b4:	0758      	lsls	r0, r3, #29
 80235b6:	d512      	bpl.n	80235de <__swsetup_r+0x5a>
 80235b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80235ba:	b141      	cbz	r1, 80235ce <__swsetup_r+0x4a>
 80235bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80235c0:	4299      	cmp	r1, r3
 80235c2:	d002      	beq.n	80235ca <__swsetup_r+0x46>
 80235c4:	4628      	mov	r0, r5
 80235c6:	f000 ff4d 	bl	8024464 <_free_r>
 80235ca:	2300      	movs	r3, #0
 80235cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80235ce:	89a3      	ldrh	r3, [r4, #12]
 80235d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80235d4:	81a3      	strh	r3, [r4, #12]
 80235d6:	2300      	movs	r3, #0
 80235d8:	6063      	str	r3, [r4, #4]
 80235da:	6923      	ldr	r3, [r4, #16]
 80235dc:	6023      	str	r3, [r4, #0]
 80235de:	89a3      	ldrh	r3, [r4, #12]
 80235e0:	f043 0308 	orr.w	r3, r3, #8
 80235e4:	81a3      	strh	r3, [r4, #12]
 80235e6:	6923      	ldr	r3, [r4, #16]
 80235e8:	b94b      	cbnz	r3, 80235fe <__swsetup_r+0x7a>
 80235ea:	89a3      	ldrh	r3, [r4, #12]
 80235ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80235f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80235f4:	d003      	beq.n	80235fe <__swsetup_r+0x7a>
 80235f6:	4621      	mov	r1, r4
 80235f8:	4628      	mov	r0, r5
 80235fa:	f002 fd51 	bl	80260a0 <__smakebuf_r>
 80235fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023602:	f013 0201 	ands.w	r2, r3, #1
 8023606:	d00a      	beq.n	802361e <__swsetup_r+0x9a>
 8023608:	2200      	movs	r2, #0
 802360a:	60a2      	str	r2, [r4, #8]
 802360c:	6962      	ldr	r2, [r4, #20]
 802360e:	4252      	negs	r2, r2
 8023610:	61a2      	str	r2, [r4, #24]
 8023612:	6922      	ldr	r2, [r4, #16]
 8023614:	b942      	cbnz	r2, 8023628 <__swsetup_r+0xa4>
 8023616:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802361a:	d1c5      	bne.n	80235a8 <__swsetup_r+0x24>
 802361c:	bd38      	pop	{r3, r4, r5, pc}
 802361e:	0799      	lsls	r1, r3, #30
 8023620:	bf58      	it	pl
 8023622:	6962      	ldrpl	r2, [r4, #20]
 8023624:	60a2      	str	r2, [r4, #8]
 8023626:	e7f4      	b.n	8023612 <__swsetup_r+0x8e>
 8023628:	2000      	movs	r0, #0
 802362a:	e7f7      	b.n	802361c <__swsetup_r+0x98>
 802362c:	240007ac 	.word	0x240007ac

08023630 <memcmp>:
 8023630:	b510      	push	{r4, lr}
 8023632:	3901      	subs	r1, #1
 8023634:	4402      	add	r2, r0
 8023636:	4290      	cmp	r0, r2
 8023638:	d101      	bne.n	802363e <memcmp+0xe>
 802363a:	2000      	movs	r0, #0
 802363c:	e005      	b.n	802364a <memcmp+0x1a>
 802363e:	7803      	ldrb	r3, [r0, #0]
 8023640:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023644:	42a3      	cmp	r3, r4
 8023646:	d001      	beq.n	802364c <memcmp+0x1c>
 8023648:	1b18      	subs	r0, r3, r4
 802364a:	bd10      	pop	{r4, pc}
 802364c:	3001      	adds	r0, #1
 802364e:	e7f2      	b.n	8023636 <memcmp+0x6>

08023650 <memmove>:
 8023650:	4288      	cmp	r0, r1
 8023652:	b510      	push	{r4, lr}
 8023654:	eb01 0402 	add.w	r4, r1, r2
 8023658:	d902      	bls.n	8023660 <memmove+0x10>
 802365a:	4284      	cmp	r4, r0
 802365c:	4623      	mov	r3, r4
 802365e:	d807      	bhi.n	8023670 <memmove+0x20>
 8023660:	1e43      	subs	r3, r0, #1
 8023662:	42a1      	cmp	r1, r4
 8023664:	d008      	beq.n	8023678 <memmove+0x28>
 8023666:	f811 2b01 	ldrb.w	r2, [r1], #1
 802366a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802366e:	e7f8      	b.n	8023662 <memmove+0x12>
 8023670:	4402      	add	r2, r0
 8023672:	4601      	mov	r1, r0
 8023674:	428a      	cmp	r2, r1
 8023676:	d100      	bne.n	802367a <memmove+0x2a>
 8023678:	bd10      	pop	{r4, pc}
 802367a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802367e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023682:	e7f7      	b.n	8023674 <memmove+0x24>

08023684 <memset>:
 8023684:	4402      	add	r2, r0
 8023686:	4603      	mov	r3, r0
 8023688:	4293      	cmp	r3, r2
 802368a:	d100      	bne.n	802368e <memset+0xa>
 802368c:	4770      	bx	lr
 802368e:	f803 1b01 	strb.w	r1, [r3], #1
 8023692:	e7f9      	b.n	8023688 <memset+0x4>

08023694 <strchr>:
 8023694:	b2c9      	uxtb	r1, r1
 8023696:	4603      	mov	r3, r0
 8023698:	4618      	mov	r0, r3
 802369a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802369e:	b112      	cbz	r2, 80236a6 <strchr+0x12>
 80236a0:	428a      	cmp	r2, r1
 80236a2:	d1f9      	bne.n	8023698 <strchr+0x4>
 80236a4:	4770      	bx	lr
 80236a6:	2900      	cmp	r1, #0
 80236a8:	bf18      	it	ne
 80236aa:	2000      	movne	r0, #0
 80236ac:	4770      	bx	lr

080236ae <strncmp>:
 80236ae:	b510      	push	{r4, lr}
 80236b0:	b16a      	cbz	r2, 80236ce <strncmp+0x20>
 80236b2:	3901      	subs	r1, #1
 80236b4:	1884      	adds	r4, r0, r2
 80236b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80236be:	429a      	cmp	r2, r3
 80236c0:	d103      	bne.n	80236ca <strncmp+0x1c>
 80236c2:	42a0      	cmp	r0, r4
 80236c4:	d001      	beq.n	80236ca <strncmp+0x1c>
 80236c6:	2a00      	cmp	r2, #0
 80236c8:	d1f5      	bne.n	80236b6 <strncmp+0x8>
 80236ca:	1ad0      	subs	r0, r2, r3
 80236cc:	bd10      	pop	{r4, pc}
 80236ce:	4610      	mov	r0, r2
 80236d0:	e7fc      	b.n	80236cc <strncmp+0x1e>

080236d2 <strncpy>:
 80236d2:	b510      	push	{r4, lr}
 80236d4:	3901      	subs	r1, #1
 80236d6:	4603      	mov	r3, r0
 80236d8:	b132      	cbz	r2, 80236e8 <strncpy+0x16>
 80236da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80236de:	f803 4b01 	strb.w	r4, [r3], #1
 80236e2:	3a01      	subs	r2, #1
 80236e4:	2c00      	cmp	r4, #0
 80236e6:	d1f7      	bne.n	80236d8 <strncpy+0x6>
 80236e8:	441a      	add	r2, r3
 80236ea:	2100      	movs	r1, #0
 80236ec:	4293      	cmp	r3, r2
 80236ee:	d100      	bne.n	80236f2 <strncpy+0x20>
 80236f0:	bd10      	pop	{r4, pc}
 80236f2:	f803 1b01 	strb.w	r1, [r3], #1
 80236f6:	e7f9      	b.n	80236ec <strncpy+0x1a>

080236f8 <strrchr>:
 80236f8:	b538      	push	{r3, r4, r5, lr}
 80236fa:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80236fe:	4603      	mov	r3, r0
 8023700:	d10e      	bne.n	8023720 <strrchr+0x28>
 8023702:	4621      	mov	r1, r4
 8023704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023708:	f7ff bfc4 	b.w	8023694 <strchr>
 802370c:	1c43      	adds	r3, r0, #1
 802370e:	4605      	mov	r5, r0
 8023710:	4621      	mov	r1, r4
 8023712:	4618      	mov	r0, r3
 8023714:	f7ff ffbe 	bl	8023694 <strchr>
 8023718:	2800      	cmp	r0, #0
 802371a:	d1f7      	bne.n	802370c <strrchr+0x14>
 802371c:	4628      	mov	r0, r5
 802371e:	bd38      	pop	{r3, r4, r5, pc}
 8023720:	2500      	movs	r5, #0
 8023722:	e7f5      	b.n	8023710 <strrchr+0x18>

08023724 <strstr>:
 8023724:	780a      	ldrb	r2, [r1, #0]
 8023726:	b570      	push	{r4, r5, r6, lr}
 8023728:	b96a      	cbnz	r2, 8023746 <strstr+0x22>
 802372a:	bd70      	pop	{r4, r5, r6, pc}
 802372c:	429a      	cmp	r2, r3
 802372e:	d109      	bne.n	8023744 <strstr+0x20>
 8023730:	460c      	mov	r4, r1
 8023732:	4605      	mov	r5, r0
 8023734:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8023738:	2b00      	cmp	r3, #0
 802373a:	d0f6      	beq.n	802372a <strstr+0x6>
 802373c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8023740:	429e      	cmp	r6, r3
 8023742:	d0f7      	beq.n	8023734 <strstr+0x10>
 8023744:	3001      	adds	r0, #1
 8023746:	7803      	ldrb	r3, [r0, #0]
 8023748:	2b00      	cmp	r3, #0
 802374a:	d1ef      	bne.n	802372c <strstr+0x8>
 802374c:	4618      	mov	r0, r3
 802374e:	e7ec      	b.n	802372a <strstr+0x6>

08023750 <_localeconv_r>:
 8023750:	4800      	ldr	r0, [pc, #0]	@ (8023754 <_localeconv_r+0x4>)
 8023752:	4770      	bx	lr
 8023754:	240008ec 	.word	0x240008ec

08023758 <_close_r>:
 8023758:	b538      	push	{r3, r4, r5, lr}
 802375a:	4d06      	ldr	r5, [pc, #24]	@ (8023774 <_close_r+0x1c>)
 802375c:	2300      	movs	r3, #0
 802375e:	4604      	mov	r4, r0
 8023760:	4608      	mov	r0, r1
 8023762:	602b      	str	r3, [r5, #0]
 8023764:	f7f7 fc00 	bl	801af68 <_close>
 8023768:	1c43      	adds	r3, r0, #1
 802376a:	d102      	bne.n	8023772 <_close_r+0x1a>
 802376c:	682b      	ldr	r3, [r5, #0]
 802376e:	b103      	cbz	r3, 8023772 <_close_r+0x1a>
 8023770:	6023      	str	r3, [r4, #0]
 8023772:	bd38      	pop	{r3, r4, r5, pc}
 8023774:	24004034 	.word	0x24004034

08023778 <_lseek_r>:
 8023778:	b538      	push	{r3, r4, r5, lr}
 802377a:	4d07      	ldr	r5, [pc, #28]	@ (8023798 <_lseek_r+0x20>)
 802377c:	4604      	mov	r4, r0
 802377e:	4608      	mov	r0, r1
 8023780:	4611      	mov	r1, r2
 8023782:	2200      	movs	r2, #0
 8023784:	602a      	str	r2, [r5, #0]
 8023786:	461a      	mov	r2, r3
 8023788:	f7f7 fc15 	bl	801afb6 <_lseek>
 802378c:	1c43      	adds	r3, r0, #1
 802378e:	d102      	bne.n	8023796 <_lseek_r+0x1e>
 8023790:	682b      	ldr	r3, [r5, #0]
 8023792:	b103      	cbz	r3, 8023796 <_lseek_r+0x1e>
 8023794:	6023      	str	r3, [r4, #0]
 8023796:	bd38      	pop	{r3, r4, r5, pc}
 8023798:	24004034 	.word	0x24004034

0802379c <_read_r>:
 802379c:	b538      	push	{r3, r4, r5, lr}
 802379e:	4d07      	ldr	r5, [pc, #28]	@ (80237bc <_read_r+0x20>)
 80237a0:	4604      	mov	r4, r0
 80237a2:	4608      	mov	r0, r1
 80237a4:	4611      	mov	r1, r2
 80237a6:	2200      	movs	r2, #0
 80237a8:	602a      	str	r2, [r5, #0]
 80237aa:	461a      	mov	r2, r3
 80237ac:	f7f7 fbbf 	bl	801af2e <_read>
 80237b0:	1c43      	adds	r3, r0, #1
 80237b2:	d102      	bne.n	80237ba <_read_r+0x1e>
 80237b4:	682b      	ldr	r3, [r5, #0]
 80237b6:	b103      	cbz	r3, 80237ba <_read_r+0x1e>
 80237b8:	6023      	str	r3, [r4, #0]
 80237ba:	bd38      	pop	{r3, r4, r5, pc}
 80237bc:	24004034 	.word	0x24004034

080237c0 <_sbrk_r>:
 80237c0:	b538      	push	{r3, r4, r5, lr}
 80237c2:	4d06      	ldr	r5, [pc, #24]	@ (80237dc <_sbrk_r+0x1c>)
 80237c4:	2300      	movs	r3, #0
 80237c6:	4604      	mov	r4, r0
 80237c8:	4608      	mov	r0, r1
 80237ca:	602b      	str	r3, [r5, #0]
 80237cc:	f7f7 fc00 	bl	801afd0 <_sbrk>
 80237d0:	1c43      	adds	r3, r0, #1
 80237d2:	d102      	bne.n	80237da <_sbrk_r+0x1a>
 80237d4:	682b      	ldr	r3, [r5, #0]
 80237d6:	b103      	cbz	r3, 80237da <_sbrk_r+0x1a>
 80237d8:	6023      	str	r3, [r4, #0]
 80237da:	bd38      	pop	{r3, r4, r5, pc}
 80237dc:	24004034 	.word	0x24004034

080237e0 <_write_r>:
 80237e0:	b538      	push	{r3, r4, r5, lr}
 80237e2:	4d07      	ldr	r5, [pc, #28]	@ (8023800 <_write_r+0x20>)
 80237e4:	4604      	mov	r4, r0
 80237e6:	4608      	mov	r0, r1
 80237e8:	4611      	mov	r1, r2
 80237ea:	2200      	movs	r2, #0
 80237ec:	602a      	str	r2, [r5, #0]
 80237ee:	461a      	mov	r2, r3
 80237f0:	f7dd fa6c 	bl	8000ccc <_write>
 80237f4:	1c43      	adds	r3, r0, #1
 80237f6:	d102      	bne.n	80237fe <_write_r+0x1e>
 80237f8:	682b      	ldr	r3, [r5, #0]
 80237fa:	b103      	cbz	r3, 80237fe <_write_r+0x1e>
 80237fc:	6023      	str	r3, [r4, #0]
 80237fe:	bd38      	pop	{r3, r4, r5, pc}
 8023800:	24004034 	.word	0x24004034

08023804 <__errno>:
 8023804:	4b01      	ldr	r3, [pc, #4]	@ (802380c <__errno+0x8>)
 8023806:	6818      	ldr	r0, [r3, #0]
 8023808:	4770      	bx	lr
 802380a:	bf00      	nop
 802380c:	240007ac 	.word	0x240007ac

08023810 <__libc_init_array>:
 8023810:	b570      	push	{r4, r5, r6, lr}
 8023812:	4d0d      	ldr	r5, [pc, #52]	@ (8023848 <__libc_init_array+0x38>)
 8023814:	4c0d      	ldr	r4, [pc, #52]	@ (802384c <__libc_init_array+0x3c>)
 8023816:	1b64      	subs	r4, r4, r5
 8023818:	10a4      	asrs	r4, r4, #2
 802381a:	2600      	movs	r6, #0
 802381c:	42a6      	cmp	r6, r4
 802381e:	d109      	bne.n	8023834 <__libc_init_array+0x24>
 8023820:	4d0b      	ldr	r5, [pc, #44]	@ (8023850 <__libc_init_array+0x40>)
 8023822:	4c0c      	ldr	r4, [pc, #48]	@ (8023854 <__libc_init_array+0x44>)
 8023824:	f003 f8aa 	bl	802697c <_init>
 8023828:	1b64      	subs	r4, r4, r5
 802382a:	10a4      	asrs	r4, r4, #2
 802382c:	2600      	movs	r6, #0
 802382e:	42a6      	cmp	r6, r4
 8023830:	d105      	bne.n	802383e <__libc_init_array+0x2e>
 8023832:	bd70      	pop	{r4, r5, r6, pc}
 8023834:	f855 3b04 	ldr.w	r3, [r5], #4
 8023838:	4798      	blx	r3
 802383a:	3601      	adds	r6, #1
 802383c:	e7ee      	b.n	802381c <__libc_init_array+0xc>
 802383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023842:	4798      	blx	r3
 8023844:	3601      	adds	r6, #1
 8023846:	e7f2      	b.n	802382e <__libc_init_array+0x1e>
 8023848:	08036ee4 	.word	0x08036ee4
 802384c:	08036ee4 	.word	0x08036ee4
 8023850:	08036ee4 	.word	0x08036ee4
 8023854:	08036ee8 	.word	0x08036ee8

08023858 <__retarget_lock_init_recursive>:
 8023858:	4770      	bx	lr

0802385a <__retarget_lock_acquire_recursive>:
 802385a:	4770      	bx	lr

0802385c <__retarget_lock_release_recursive>:
 802385c:	4770      	bx	lr

0802385e <strcpy>:
 802385e:	4603      	mov	r3, r0
 8023860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023864:	f803 2b01 	strb.w	r2, [r3], #1
 8023868:	2a00      	cmp	r2, #0
 802386a:	d1f9      	bne.n	8023860 <strcpy+0x2>
 802386c:	4770      	bx	lr

0802386e <memcpy>:
 802386e:	440a      	add	r2, r1
 8023870:	4291      	cmp	r1, r2
 8023872:	f100 33ff 	add.w	r3, r0, #4294967295
 8023876:	d100      	bne.n	802387a <memcpy+0xc>
 8023878:	4770      	bx	lr
 802387a:	b510      	push	{r4, lr}
 802387c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023884:	4291      	cmp	r1, r2
 8023886:	d1f9      	bne.n	802387c <memcpy+0xe>
 8023888:	bd10      	pop	{r4, pc}
	...

0802388c <nanf>:
 802388c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8023894 <nanf+0x8>
 8023890:	4770      	bx	lr
 8023892:	bf00      	nop
 8023894:	7fc00000 	.word	0x7fc00000

08023898 <abort>:
 8023898:	b508      	push	{r3, lr}
 802389a:	2006      	movs	r0, #6
 802389c:	f002 fc98 	bl	80261d0 <raise>
 80238a0:	2001      	movs	r0, #1
 80238a2:	f7f7 fb39 	bl	801af18 <_exit>

080238a6 <quorem>:
 80238a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238aa:	6903      	ldr	r3, [r0, #16]
 80238ac:	690c      	ldr	r4, [r1, #16]
 80238ae:	42a3      	cmp	r3, r4
 80238b0:	4607      	mov	r7, r0
 80238b2:	db7e      	blt.n	80239b2 <quorem+0x10c>
 80238b4:	3c01      	subs	r4, #1
 80238b6:	f101 0814 	add.w	r8, r1, #20
 80238ba:	00a3      	lsls	r3, r4, #2
 80238bc:	f100 0514 	add.w	r5, r0, #20
 80238c0:	9300      	str	r3, [sp, #0]
 80238c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80238c6:	9301      	str	r3, [sp, #4]
 80238c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80238cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80238d0:	3301      	adds	r3, #1
 80238d2:	429a      	cmp	r2, r3
 80238d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80238d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80238dc:	d32e      	bcc.n	802393c <quorem+0x96>
 80238de:	f04f 0a00 	mov.w	sl, #0
 80238e2:	46c4      	mov	ip, r8
 80238e4:	46ae      	mov	lr, r5
 80238e6:	46d3      	mov	fp, sl
 80238e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80238ec:	b298      	uxth	r0, r3
 80238ee:	fb06 a000 	mla	r0, r6, r0, sl
 80238f2:	0c02      	lsrs	r2, r0, #16
 80238f4:	0c1b      	lsrs	r3, r3, #16
 80238f6:	fb06 2303 	mla	r3, r6, r3, r2
 80238fa:	f8de 2000 	ldr.w	r2, [lr]
 80238fe:	b280      	uxth	r0, r0
 8023900:	b292      	uxth	r2, r2
 8023902:	1a12      	subs	r2, r2, r0
 8023904:	445a      	add	r2, fp
 8023906:	f8de 0000 	ldr.w	r0, [lr]
 802390a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802390e:	b29b      	uxth	r3, r3
 8023910:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8023914:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8023918:	b292      	uxth	r2, r2
 802391a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802391e:	45e1      	cmp	r9, ip
 8023920:	f84e 2b04 	str.w	r2, [lr], #4
 8023924:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8023928:	d2de      	bcs.n	80238e8 <quorem+0x42>
 802392a:	9b00      	ldr	r3, [sp, #0]
 802392c:	58eb      	ldr	r3, [r5, r3]
 802392e:	b92b      	cbnz	r3, 802393c <quorem+0x96>
 8023930:	9b01      	ldr	r3, [sp, #4]
 8023932:	3b04      	subs	r3, #4
 8023934:	429d      	cmp	r5, r3
 8023936:	461a      	mov	r2, r3
 8023938:	d32f      	bcc.n	802399a <quorem+0xf4>
 802393a:	613c      	str	r4, [r7, #16]
 802393c:	4638      	mov	r0, r7
 802393e:	f001 f89f 	bl	8024a80 <__mcmp>
 8023942:	2800      	cmp	r0, #0
 8023944:	db25      	blt.n	8023992 <quorem+0xec>
 8023946:	4629      	mov	r1, r5
 8023948:	2000      	movs	r0, #0
 802394a:	f858 2b04 	ldr.w	r2, [r8], #4
 802394e:	f8d1 c000 	ldr.w	ip, [r1]
 8023952:	fa1f fe82 	uxth.w	lr, r2
 8023956:	fa1f f38c 	uxth.w	r3, ip
 802395a:	eba3 030e 	sub.w	r3, r3, lr
 802395e:	4403      	add	r3, r0
 8023960:	0c12      	lsrs	r2, r2, #16
 8023962:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8023966:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802396a:	b29b      	uxth	r3, r3
 802396c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023970:	45c1      	cmp	r9, r8
 8023972:	f841 3b04 	str.w	r3, [r1], #4
 8023976:	ea4f 4022 	mov.w	r0, r2, asr #16
 802397a:	d2e6      	bcs.n	802394a <quorem+0xa4>
 802397c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023984:	b922      	cbnz	r2, 8023990 <quorem+0xea>
 8023986:	3b04      	subs	r3, #4
 8023988:	429d      	cmp	r5, r3
 802398a:	461a      	mov	r2, r3
 802398c:	d30b      	bcc.n	80239a6 <quorem+0x100>
 802398e:	613c      	str	r4, [r7, #16]
 8023990:	3601      	adds	r6, #1
 8023992:	4630      	mov	r0, r6
 8023994:	b003      	add	sp, #12
 8023996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802399a:	6812      	ldr	r2, [r2, #0]
 802399c:	3b04      	subs	r3, #4
 802399e:	2a00      	cmp	r2, #0
 80239a0:	d1cb      	bne.n	802393a <quorem+0x94>
 80239a2:	3c01      	subs	r4, #1
 80239a4:	e7c6      	b.n	8023934 <quorem+0x8e>
 80239a6:	6812      	ldr	r2, [r2, #0]
 80239a8:	3b04      	subs	r3, #4
 80239aa:	2a00      	cmp	r2, #0
 80239ac:	d1ef      	bne.n	802398e <quorem+0xe8>
 80239ae:	3c01      	subs	r4, #1
 80239b0:	e7ea      	b.n	8023988 <quorem+0xe2>
 80239b2:	2000      	movs	r0, #0
 80239b4:	e7ee      	b.n	8023994 <quorem+0xee>
	...

080239b8 <_dtoa_r>:
 80239b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239bc:	ed2d 8b02 	vpush	{d8}
 80239c0:	69c7      	ldr	r7, [r0, #28]
 80239c2:	b091      	sub	sp, #68	@ 0x44
 80239c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80239c8:	ec55 4b10 	vmov	r4, r5, d0
 80239cc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80239ce:	9107      	str	r1, [sp, #28]
 80239d0:	4681      	mov	r9, r0
 80239d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80239d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80239d6:	b97f      	cbnz	r7, 80239f8 <_dtoa_r+0x40>
 80239d8:	2010      	movs	r0, #16
 80239da:	f7fe fbf3 	bl	80221c4 <malloc>
 80239de:	4602      	mov	r2, r0
 80239e0:	f8c9 001c 	str.w	r0, [r9, #28]
 80239e4:	b920      	cbnz	r0, 80239f0 <_dtoa_r+0x38>
 80239e6:	4ba0      	ldr	r3, [pc, #640]	@ (8023c68 <_dtoa_r+0x2b0>)
 80239e8:	21ef      	movs	r1, #239	@ 0xef
 80239ea:	48a0      	ldr	r0, [pc, #640]	@ (8023c6c <_dtoa_r+0x2b4>)
 80239ec:	f7fe fbac 	bl	8022148 <__assert_func>
 80239f0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80239f4:	6007      	str	r7, [r0, #0]
 80239f6:	60c7      	str	r7, [r0, #12]
 80239f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80239fc:	6819      	ldr	r1, [r3, #0]
 80239fe:	b159      	cbz	r1, 8023a18 <_dtoa_r+0x60>
 8023a00:	685a      	ldr	r2, [r3, #4]
 8023a02:	604a      	str	r2, [r1, #4]
 8023a04:	2301      	movs	r3, #1
 8023a06:	4093      	lsls	r3, r2
 8023a08:	608b      	str	r3, [r1, #8]
 8023a0a:	4648      	mov	r0, r9
 8023a0c:	f000 fdb4 	bl	8024578 <_Bfree>
 8023a10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8023a14:	2200      	movs	r2, #0
 8023a16:	601a      	str	r2, [r3, #0]
 8023a18:	1e2b      	subs	r3, r5, #0
 8023a1a:	bfbb      	ittet	lt
 8023a1c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8023a20:	9303      	strlt	r3, [sp, #12]
 8023a22:	2300      	movge	r3, #0
 8023a24:	2201      	movlt	r2, #1
 8023a26:	bfac      	ite	ge
 8023a28:	6033      	strge	r3, [r6, #0]
 8023a2a:	6032      	strlt	r2, [r6, #0]
 8023a2c:	4b90      	ldr	r3, [pc, #576]	@ (8023c70 <_dtoa_r+0x2b8>)
 8023a2e:	9e03      	ldr	r6, [sp, #12]
 8023a30:	43b3      	bics	r3, r6
 8023a32:	d110      	bne.n	8023a56 <_dtoa_r+0x9e>
 8023a34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023a36:	f242 730f 	movw	r3, #9999	@ 0x270f
 8023a3a:	6013      	str	r3, [r2, #0]
 8023a3c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8023a40:	4323      	orrs	r3, r4
 8023a42:	f000 84de 	beq.w	8024402 <_dtoa_r+0xa4a>
 8023a46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023a48:	4f8a      	ldr	r7, [pc, #552]	@ (8023c74 <_dtoa_r+0x2bc>)
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	f000 84e0 	beq.w	8024410 <_dtoa_r+0xa58>
 8023a50:	1cfb      	adds	r3, r7, #3
 8023a52:	f000 bcdb 	b.w	802440c <_dtoa_r+0xa54>
 8023a56:	ed9d 8b02 	vldr	d8, [sp, #8]
 8023a5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a62:	d10a      	bne.n	8023a7a <_dtoa_r+0xc2>
 8023a64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023a66:	2301      	movs	r3, #1
 8023a68:	6013      	str	r3, [r2, #0]
 8023a6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023a6c:	b113      	cbz	r3, 8023a74 <_dtoa_r+0xbc>
 8023a6e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023a70:	4b81      	ldr	r3, [pc, #516]	@ (8023c78 <_dtoa_r+0x2c0>)
 8023a72:	6013      	str	r3, [r2, #0]
 8023a74:	4f81      	ldr	r7, [pc, #516]	@ (8023c7c <_dtoa_r+0x2c4>)
 8023a76:	f000 bccb 	b.w	8024410 <_dtoa_r+0xa58>
 8023a7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8023a7c:	a90f      	add	r1, sp, #60	@ 0x3c
 8023a7e:	4648      	mov	r0, r9
 8023a80:	eeb0 0b48 	vmov.f64	d0, d8
 8023a84:	f001 f91c 	bl	8024cc0 <__d2b>
 8023a88:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8023a8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023a8e:	9001      	str	r0, [sp, #4]
 8023a90:	2b00      	cmp	r3, #0
 8023a92:	d045      	beq.n	8023b20 <_dtoa_r+0x168>
 8023a94:	eeb0 7b48 	vmov.f64	d7, d8
 8023a98:	ee18 1a90 	vmov	r1, s17
 8023a9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8023aa0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8023aa4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8023aa8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8023aac:	2500      	movs	r5, #0
 8023aae:	ee07 1a90 	vmov	s15, r1
 8023ab2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8023ab6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8023c50 <_dtoa_r+0x298>
 8023aba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023abe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8023c58 <_dtoa_r+0x2a0>
 8023ac2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023ac6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8023c60 <_dtoa_r+0x2a8>
 8023aca:	ee07 3a90 	vmov	s15, r3
 8023ace:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8023ad2:	eeb0 7b46 	vmov.f64	d7, d6
 8023ad6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8023ada:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8023ade:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ae6:	ee16 8a90 	vmov	r8, s13
 8023aea:	d508      	bpl.n	8023afe <_dtoa_r+0x146>
 8023aec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023af0:	eeb4 6b47 	vcmp.f64	d6, d7
 8023af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023af8:	bf18      	it	ne
 8023afa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8023afe:	f1b8 0f16 	cmp.w	r8, #22
 8023b02:	d82b      	bhi.n	8023b5c <_dtoa_r+0x1a4>
 8023b04:	495e      	ldr	r1, [pc, #376]	@ (8023c80 <_dtoa_r+0x2c8>)
 8023b06:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8023b0a:	ed91 7b00 	vldr	d7, [r1]
 8023b0e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8023b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b16:	d501      	bpl.n	8023b1c <_dtoa_r+0x164>
 8023b18:	f108 38ff 	add.w	r8, r8, #4294967295
 8023b1c:	2100      	movs	r1, #0
 8023b1e:	e01e      	b.n	8023b5e <_dtoa_r+0x1a6>
 8023b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b22:	4413      	add	r3, r2
 8023b24:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8023b28:	2920      	cmp	r1, #32
 8023b2a:	bfc1      	itttt	gt
 8023b2c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8023b30:	408e      	lslgt	r6, r1
 8023b32:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8023b36:	fa24 f101 	lsrgt.w	r1, r4, r1
 8023b3a:	bfd6      	itet	le
 8023b3c:	f1c1 0120 	rsble	r1, r1, #32
 8023b40:	4331      	orrgt	r1, r6
 8023b42:	fa04 f101 	lslle.w	r1, r4, r1
 8023b46:	ee07 1a90 	vmov	s15, r1
 8023b4a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8023b4e:	3b01      	subs	r3, #1
 8023b50:	ee17 1a90 	vmov	r1, s15
 8023b54:	2501      	movs	r5, #1
 8023b56:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8023b5a:	e7a8      	b.n	8023aae <_dtoa_r+0xf6>
 8023b5c:	2101      	movs	r1, #1
 8023b5e:	1ad2      	subs	r2, r2, r3
 8023b60:	1e53      	subs	r3, r2, #1
 8023b62:	9306      	str	r3, [sp, #24]
 8023b64:	bf45      	ittet	mi
 8023b66:	f1c2 0301 	rsbmi	r3, r2, #1
 8023b6a:	9305      	strmi	r3, [sp, #20]
 8023b6c:	2300      	movpl	r3, #0
 8023b6e:	2300      	movmi	r3, #0
 8023b70:	bf4c      	ite	mi
 8023b72:	9306      	strmi	r3, [sp, #24]
 8023b74:	9305      	strpl	r3, [sp, #20]
 8023b76:	f1b8 0f00 	cmp.w	r8, #0
 8023b7a:	910c      	str	r1, [sp, #48]	@ 0x30
 8023b7c:	db18      	blt.n	8023bb0 <_dtoa_r+0x1f8>
 8023b7e:	9b06      	ldr	r3, [sp, #24]
 8023b80:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8023b84:	4443      	add	r3, r8
 8023b86:	9306      	str	r3, [sp, #24]
 8023b88:	2300      	movs	r3, #0
 8023b8a:	9a07      	ldr	r2, [sp, #28]
 8023b8c:	2a09      	cmp	r2, #9
 8023b8e:	d849      	bhi.n	8023c24 <_dtoa_r+0x26c>
 8023b90:	2a05      	cmp	r2, #5
 8023b92:	bfc4      	itt	gt
 8023b94:	3a04      	subgt	r2, #4
 8023b96:	9207      	strgt	r2, [sp, #28]
 8023b98:	9a07      	ldr	r2, [sp, #28]
 8023b9a:	f1a2 0202 	sub.w	r2, r2, #2
 8023b9e:	bfcc      	ite	gt
 8023ba0:	2400      	movgt	r4, #0
 8023ba2:	2401      	movle	r4, #1
 8023ba4:	2a03      	cmp	r2, #3
 8023ba6:	d848      	bhi.n	8023c3a <_dtoa_r+0x282>
 8023ba8:	e8df f002 	tbb	[pc, r2]
 8023bac:	3a2c2e0b 	.word	0x3a2c2e0b
 8023bb0:	9b05      	ldr	r3, [sp, #20]
 8023bb2:	2200      	movs	r2, #0
 8023bb4:	eba3 0308 	sub.w	r3, r3, r8
 8023bb8:	9305      	str	r3, [sp, #20]
 8023bba:	920a      	str	r2, [sp, #40]	@ 0x28
 8023bbc:	f1c8 0300 	rsb	r3, r8, #0
 8023bc0:	e7e3      	b.n	8023b8a <_dtoa_r+0x1d2>
 8023bc2:	2200      	movs	r2, #0
 8023bc4:	9208      	str	r2, [sp, #32]
 8023bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023bc8:	2a00      	cmp	r2, #0
 8023bca:	dc39      	bgt.n	8023c40 <_dtoa_r+0x288>
 8023bcc:	f04f 0b01 	mov.w	fp, #1
 8023bd0:	46da      	mov	sl, fp
 8023bd2:	465a      	mov	r2, fp
 8023bd4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8023bd8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8023bdc:	2100      	movs	r1, #0
 8023bde:	2004      	movs	r0, #4
 8023be0:	f100 0614 	add.w	r6, r0, #20
 8023be4:	4296      	cmp	r6, r2
 8023be6:	d930      	bls.n	8023c4a <_dtoa_r+0x292>
 8023be8:	6079      	str	r1, [r7, #4]
 8023bea:	4648      	mov	r0, r9
 8023bec:	9304      	str	r3, [sp, #16]
 8023bee:	f000 fc83 	bl	80244f8 <_Balloc>
 8023bf2:	9b04      	ldr	r3, [sp, #16]
 8023bf4:	4607      	mov	r7, r0
 8023bf6:	2800      	cmp	r0, #0
 8023bf8:	d146      	bne.n	8023c88 <_dtoa_r+0x2d0>
 8023bfa:	4b22      	ldr	r3, [pc, #136]	@ (8023c84 <_dtoa_r+0x2cc>)
 8023bfc:	4602      	mov	r2, r0
 8023bfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8023c02:	e6f2      	b.n	80239ea <_dtoa_r+0x32>
 8023c04:	2201      	movs	r2, #1
 8023c06:	e7dd      	b.n	8023bc4 <_dtoa_r+0x20c>
 8023c08:	2200      	movs	r2, #0
 8023c0a:	9208      	str	r2, [sp, #32]
 8023c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c0e:	eb08 0b02 	add.w	fp, r8, r2
 8023c12:	f10b 0a01 	add.w	sl, fp, #1
 8023c16:	4652      	mov	r2, sl
 8023c18:	2a01      	cmp	r2, #1
 8023c1a:	bfb8      	it	lt
 8023c1c:	2201      	movlt	r2, #1
 8023c1e:	e7db      	b.n	8023bd8 <_dtoa_r+0x220>
 8023c20:	2201      	movs	r2, #1
 8023c22:	e7f2      	b.n	8023c0a <_dtoa_r+0x252>
 8023c24:	2401      	movs	r4, #1
 8023c26:	2200      	movs	r2, #0
 8023c28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8023c2c:	f04f 3bff 	mov.w	fp, #4294967295
 8023c30:	2100      	movs	r1, #0
 8023c32:	46da      	mov	sl, fp
 8023c34:	2212      	movs	r2, #18
 8023c36:	9109      	str	r1, [sp, #36]	@ 0x24
 8023c38:	e7ce      	b.n	8023bd8 <_dtoa_r+0x220>
 8023c3a:	2201      	movs	r2, #1
 8023c3c:	9208      	str	r2, [sp, #32]
 8023c3e:	e7f5      	b.n	8023c2c <_dtoa_r+0x274>
 8023c40:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023c44:	46da      	mov	sl, fp
 8023c46:	465a      	mov	r2, fp
 8023c48:	e7c6      	b.n	8023bd8 <_dtoa_r+0x220>
 8023c4a:	3101      	adds	r1, #1
 8023c4c:	0040      	lsls	r0, r0, #1
 8023c4e:	e7c7      	b.n	8023be0 <_dtoa_r+0x228>
 8023c50:	636f4361 	.word	0x636f4361
 8023c54:	3fd287a7 	.word	0x3fd287a7
 8023c58:	8b60c8b3 	.word	0x8b60c8b3
 8023c5c:	3fc68a28 	.word	0x3fc68a28
 8023c60:	509f79fb 	.word	0x509f79fb
 8023c64:	3fd34413 	.word	0x3fd34413
 8023c68:	08036a90 	.word	0x08036a90
 8023c6c:	08036c46 	.word	0x08036c46
 8023c70:	7ff00000 	.word	0x7ff00000
 8023c74:	08036c42 	.word	0x08036c42
 8023c78:	08036c11 	.word	0x08036c11
 8023c7c:	08036c10 	.word	0x08036c10
 8023c80:	08036d40 	.word	0x08036d40
 8023c84:	08036c9e 	.word	0x08036c9e
 8023c88:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8023c8c:	f1ba 0f0e 	cmp.w	sl, #14
 8023c90:	6010      	str	r0, [r2, #0]
 8023c92:	d86f      	bhi.n	8023d74 <_dtoa_r+0x3bc>
 8023c94:	2c00      	cmp	r4, #0
 8023c96:	d06d      	beq.n	8023d74 <_dtoa_r+0x3bc>
 8023c98:	f1b8 0f00 	cmp.w	r8, #0
 8023c9c:	f340 80c2 	ble.w	8023e24 <_dtoa_r+0x46c>
 8023ca0:	4aca      	ldr	r2, [pc, #808]	@ (8023fcc <_dtoa_r+0x614>)
 8023ca2:	f008 010f 	and.w	r1, r8, #15
 8023ca6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8023caa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8023cae:	ed92 7b00 	vldr	d7, [r2]
 8023cb2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8023cb6:	f000 80a9 	beq.w	8023e0c <_dtoa_r+0x454>
 8023cba:	4ac5      	ldr	r2, [pc, #788]	@ (8023fd0 <_dtoa_r+0x618>)
 8023cbc:	ed92 6b08 	vldr	d6, [r2, #32]
 8023cc0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8023cc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023cc8:	f001 010f 	and.w	r1, r1, #15
 8023ccc:	2203      	movs	r2, #3
 8023cce:	48c0      	ldr	r0, [pc, #768]	@ (8023fd0 <_dtoa_r+0x618>)
 8023cd0:	2900      	cmp	r1, #0
 8023cd2:	f040 809d 	bne.w	8023e10 <_dtoa_r+0x458>
 8023cd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023cda:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023cde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023ce2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023ce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023ce8:	2900      	cmp	r1, #0
 8023cea:	f000 80c1 	beq.w	8023e70 <_dtoa_r+0x4b8>
 8023cee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8023cf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cfa:	f140 80b9 	bpl.w	8023e70 <_dtoa_r+0x4b8>
 8023cfe:	f1ba 0f00 	cmp.w	sl, #0
 8023d02:	f000 80b5 	beq.w	8023e70 <_dtoa_r+0x4b8>
 8023d06:	f1bb 0f00 	cmp.w	fp, #0
 8023d0a:	dd31      	ble.n	8023d70 <_dtoa_r+0x3b8>
 8023d0c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8023d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023d14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023d18:	f108 31ff 	add.w	r1, r8, #4294967295
 8023d1c:	9104      	str	r1, [sp, #16]
 8023d1e:	3201      	adds	r2, #1
 8023d20:	465c      	mov	r4, fp
 8023d22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023d26:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8023d2a:	ee07 2a90 	vmov	s15, r2
 8023d2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8023d32:	eea7 5b06 	vfma.f64	d5, d7, d6
 8023d36:	ee15 2a90 	vmov	r2, s11
 8023d3a:	ec51 0b15 	vmov	r0, r1, d5
 8023d3e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8023d42:	2c00      	cmp	r4, #0
 8023d44:	f040 8098 	bne.w	8023e78 <_dtoa_r+0x4c0>
 8023d48:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8023d4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8023d50:	ec41 0b17 	vmov	d7, r0, r1
 8023d54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d5c:	f300 8261 	bgt.w	8024222 <_dtoa_r+0x86a>
 8023d60:	eeb1 7b47 	vneg.f64	d7, d7
 8023d64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d6c:	f100 80f5 	bmi.w	8023f5a <_dtoa_r+0x5a2>
 8023d70:	ed8d 8b02 	vstr	d8, [sp, #8]
 8023d74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023d76:	2a00      	cmp	r2, #0
 8023d78:	f2c0 812c 	blt.w	8023fd4 <_dtoa_r+0x61c>
 8023d7c:	f1b8 0f0e 	cmp.w	r8, #14
 8023d80:	f300 8128 	bgt.w	8023fd4 <_dtoa_r+0x61c>
 8023d84:	4b91      	ldr	r3, [pc, #580]	@ (8023fcc <_dtoa_r+0x614>)
 8023d86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023d8a:	ed93 6b00 	vldr	d6, [r3]
 8023d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d90:	2b00      	cmp	r3, #0
 8023d92:	da03      	bge.n	8023d9c <_dtoa_r+0x3e4>
 8023d94:	f1ba 0f00 	cmp.w	sl, #0
 8023d98:	f340 80d2 	ble.w	8023f40 <_dtoa_r+0x588>
 8023d9c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8023da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023da4:	463e      	mov	r6, r7
 8023da6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8023daa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8023dae:	ee15 3a10 	vmov	r3, s10
 8023db2:	3330      	adds	r3, #48	@ 0x30
 8023db4:	f806 3b01 	strb.w	r3, [r6], #1
 8023db8:	1bf3      	subs	r3, r6, r7
 8023dba:	459a      	cmp	sl, r3
 8023dbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8023dc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8023dc4:	f040 80f8 	bne.w	8023fb8 <_dtoa_r+0x600>
 8023dc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8023dcc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dd4:	f300 80dd 	bgt.w	8023f92 <_dtoa_r+0x5da>
 8023dd8:	eeb4 7b46 	vcmp.f64	d7, d6
 8023ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023de0:	d104      	bne.n	8023dec <_dtoa_r+0x434>
 8023de2:	ee15 3a10 	vmov	r3, s10
 8023de6:	07db      	lsls	r3, r3, #31
 8023de8:	f100 80d3 	bmi.w	8023f92 <_dtoa_r+0x5da>
 8023dec:	9901      	ldr	r1, [sp, #4]
 8023dee:	4648      	mov	r0, r9
 8023df0:	f000 fbc2 	bl	8024578 <_Bfree>
 8023df4:	2300      	movs	r3, #0
 8023df6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023df8:	7033      	strb	r3, [r6, #0]
 8023dfa:	f108 0301 	add.w	r3, r8, #1
 8023dfe:	6013      	str	r3, [r2, #0]
 8023e00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e02:	2b00      	cmp	r3, #0
 8023e04:	f000 8304 	beq.w	8024410 <_dtoa_r+0xa58>
 8023e08:	601e      	str	r6, [r3, #0]
 8023e0a:	e301      	b.n	8024410 <_dtoa_r+0xa58>
 8023e0c:	2202      	movs	r2, #2
 8023e0e:	e75e      	b.n	8023cce <_dtoa_r+0x316>
 8023e10:	07cc      	lsls	r4, r1, #31
 8023e12:	d504      	bpl.n	8023e1e <_dtoa_r+0x466>
 8023e14:	ed90 6b00 	vldr	d6, [r0]
 8023e18:	3201      	adds	r2, #1
 8023e1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023e1e:	1049      	asrs	r1, r1, #1
 8023e20:	3008      	adds	r0, #8
 8023e22:	e755      	b.n	8023cd0 <_dtoa_r+0x318>
 8023e24:	d022      	beq.n	8023e6c <_dtoa_r+0x4b4>
 8023e26:	f1c8 0100 	rsb	r1, r8, #0
 8023e2a:	4a68      	ldr	r2, [pc, #416]	@ (8023fcc <_dtoa_r+0x614>)
 8023e2c:	f001 000f 	and.w	r0, r1, #15
 8023e30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023e34:	ed92 7b00 	vldr	d7, [r2]
 8023e38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8023e3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023e40:	4863      	ldr	r0, [pc, #396]	@ (8023fd0 <_dtoa_r+0x618>)
 8023e42:	1109      	asrs	r1, r1, #4
 8023e44:	2400      	movs	r4, #0
 8023e46:	2202      	movs	r2, #2
 8023e48:	b929      	cbnz	r1, 8023e56 <_dtoa_r+0x49e>
 8023e4a:	2c00      	cmp	r4, #0
 8023e4c:	f43f af49 	beq.w	8023ce2 <_dtoa_r+0x32a>
 8023e50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023e54:	e745      	b.n	8023ce2 <_dtoa_r+0x32a>
 8023e56:	07ce      	lsls	r6, r1, #31
 8023e58:	d505      	bpl.n	8023e66 <_dtoa_r+0x4ae>
 8023e5a:	ed90 6b00 	vldr	d6, [r0]
 8023e5e:	3201      	adds	r2, #1
 8023e60:	2401      	movs	r4, #1
 8023e62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023e66:	1049      	asrs	r1, r1, #1
 8023e68:	3008      	adds	r0, #8
 8023e6a:	e7ed      	b.n	8023e48 <_dtoa_r+0x490>
 8023e6c:	2202      	movs	r2, #2
 8023e6e:	e738      	b.n	8023ce2 <_dtoa_r+0x32a>
 8023e70:	f8cd 8010 	str.w	r8, [sp, #16]
 8023e74:	4654      	mov	r4, sl
 8023e76:	e754      	b.n	8023d22 <_dtoa_r+0x36a>
 8023e78:	4a54      	ldr	r2, [pc, #336]	@ (8023fcc <_dtoa_r+0x614>)
 8023e7a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8023e7e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8023e82:	9a08      	ldr	r2, [sp, #32]
 8023e84:	ec41 0b17 	vmov	d7, r0, r1
 8023e88:	443c      	add	r4, r7
 8023e8a:	b34a      	cbz	r2, 8023ee0 <_dtoa_r+0x528>
 8023e8c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8023e90:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8023e94:	463e      	mov	r6, r7
 8023e96:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8023e9a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8023e9e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8023ea2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023ea6:	ee14 2a90 	vmov	r2, s9
 8023eaa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023eae:	3230      	adds	r2, #48	@ 0x30
 8023eb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023eb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ebc:	f806 2b01 	strb.w	r2, [r6], #1
 8023ec0:	d438      	bmi.n	8023f34 <_dtoa_r+0x57c>
 8023ec2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8023ec6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8023eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ece:	d462      	bmi.n	8023f96 <_dtoa_r+0x5de>
 8023ed0:	42a6      	cmp	r6, r4
 8023ed2:	f43f af4d 	beq.w	8023d70 <_dtoa_r+0x3b8>
 8023ed6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8023eda:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023ede:	e7e0      	b.n	8023ea2 <_dtoa_r+0x4ea>
 8023ee0:	4621      	mov	r1, r4
 8023ee2:	463e      	mov	r6, r7
 8023ee4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023ee8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8023eec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023ef0:	ee14 2a90 	vmov	r2, s9
 8023ef4:	3230      	adds	r2, #48	@ 0x30
 8023ef6:	f806 2b01 	strb.w	r2, [r6], #1
 8023efa:	42a6      	cmp	r6, r4
 8023efc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023f00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023f04:	d119      	bne.n	8023f3a <_dtoa_r+0x582>
 8023f06:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8023f0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8023f0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8023f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f16:	dc3e      	bgt.n	8023f96 <_dtoa_r+0x5de>
 8023f18:	ee35 5b47 	vsub.f64	d5, d5, d7
 8023f1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8023f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f24:	f57f af24 	bpl.w	8023d70 <_dtoa_r+0x3b8>
 8023f28:	460e      	mov	r6, r1
 8023f2a:	3901      	subs	r1, #1
 8023f2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8023f30:	2b30      	cmp	r3, #48	@ 0x30
 8023f32:	d0f9      	beq.n	8023f28 <_dtoa_r+0x570>
 8023f34:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023f38:	e758      	b.n	8023dec <_dtoa_r+0x434>
 8023f3a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023f3e:	e7d5      	b.n	8023eec <_dtoa_r+0x534>
 8023f40:	d10b      	bne.n	8023f5a <_dtoa_r+0x5a2>
 8023f42:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8023f46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023f4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023f4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f56:	f2c0 8161 	blt.w	802421c <_dtoa_r+0x864>
 8023f5a:	2400      	movs	r4, #0
 8023f5c:	4625      	mov	r5, r4
 8023f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f60:	43db      	mvns	r3, r3
 8023f62:	9304      	str	r3, [sp, #16]
 8023f64:	463e      	mov	r6, r7
 8023f66:	f04f 0800 	mov.w	r8, #0
 8023f6a:	4621      	mov	r1, r4
 8023f6c:	4648      	mov	r0, r9
 8023f6e:	f000 fb03 	bl	8024578 <_Bfree>
 8023f72:	2d00      	cmp	r5, #0
 8023f74:	d0de      	beq.n	8023f34 <_dtoa_r+0x57c>
 8023f76:	f1b8 0f00 	cmp.w	r8, #0
 8023f7a:	d005      	beq.n	8023f88 <_dtoa_r+0x5d0>
 8023f7c:	45a8      	cmp	r8, r5
 8023f7e:	d003      	beq.n	8023f88 <_dtoa_r+0x5d0>
 8023f80:	4641      	mov	r1, r8
 8023f82:	4648      	mov	r0, r9
 8023f84:	f000 faf8 	bl	8024578 <_Bfree>
 8023f88:	4629      	mov	r1, r5
 8023f8a:	4648      	mov	r0, r9
 8023f8c:	f000 faf4 	bl	8024578 <_Bfree>
 8023f90:	e7d0      	b.n	8023f34 <_dtoa_r+0x57c>
 8023f92:	f8cd 8010 	str.w	r8, [sp, #16]
 8023f96:	4633      	mov	r3, r6
 8023f98:	461e      	mov	r6, r3
 8023f9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023f9e:	2a39      	cmp	r2, #57	@ 0x39
 8023fa0:	d106      	bne.n	8023fb0 <_dtoa_r+0x5f8>
 8023fa2:	429f      	cmp	r7, r3
 8023fa4:	d1f8      	bne.n	8023f98 <_dtoa_r+0x5e0>
 8023fa6:	9a04      	ldr	r2, [sp, #16]
 8023fa8:	3201      	adds	r2, #1
 8023faa:	9204      	str	r2, [sp, #16]
 8023fac:	2230      	movs	r2, #48	@ 0x30
 8023fae:	703a      	strb	r2, [r7, #0]
 8023fb0:	781a      	ldrb	r2, [r3, #0]
 8023fb2:	3201      	adds	r2, #1
 8023fb4:	701a      	strb	r2, [r3, #0]
 8023fb6:	e7bd      	b.n	8023f34 <_dtoa_r+0x57c>
 8023fb8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023fbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fc4:	f47f aeef 	bne.w	8023da6 <_dtoa_r+0x3ee>
 8023fc8:	e710      	b.n	8023dec <_dtoa_r+0x434>
 8023fca:	bf00      	nop
 8023fcc:	08036d40 	.word	0x08036d40
 8023fd0:	08036d18 	.word	0x08036d18
 8023fd4:	9908      	ldr	r1, [sp, #32]
 8023fd6:	2900      	cmp	r1, #0
 8023fd8:	f000 80e3 	beq.w	80241a2 <_dtoa_r+0x7ea>
 8023fdc:	9907      	ldr	r1, [sp, #28]
 8023fde:	2901      	cmp	r1, #1
 8023fe0:	f300 80c8 	bgt.w	8024174 <_dtoa_r+0x7bc>
 8023fe4:	2d00      	cmp	r5, #0
 8023fe6:	f000 80c1 	beq.w	802416c <_dtoa_r+0x7b4>
 8023fea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8023fee:	9e05      	ldr	r6, [sp, #20]
 8023ff0:	461c      	mov	r4, r3
 8023ff2:	9304      	str	r3, [sp, #16]
 8023ff4:	9b05      	ldr	r3, [sp, #20]
 8023ff6:	4413      	add	r3, r2
 8023ff8:	9305      	str	r3, [sp, #20]
 8023ffa:	9b06      	ldr	r3, [sp, #24]
 8023ffc:	2101      	movs	r1, #1
 8023ffe:	4413      	add	r3, r2
 8024000:	4648      	mov	r0, r9
 8024002:	9306      	str	r3, [sp, #24]
 8024004:	f000 fbb6 	bl	8024774 <__i2b>
 8024008:	9b04      	ldr	r3, [sp, #16]
 802400a:	4605      	mov	r5, r0
 802400c:	b166      	cbz	r6, 8024028 <_dtoa_r+0x670>
 802400e:	9a06      	ldr	r2, [sp, #24]
 8024010:	2a00      	cmp	r2, #0
 8024012:	dd09      	ble.n	8024028 <_dtoa_r+0x670>
 8024014:	42b2      	cmp	r2, r6
 8024016:	9905      	ldr	r1, [sp, #20]
 8024018:	bfa8      	it	ge
 802401a:	4632      	movge	r2, r6
 802401c:	1a89      	subs	r1, r1, r2
 802401e:	9105      	str	r1, [sp, #20]
 8024020:	9906      	ldr	r1, [sp, #24]
 8024022:	1ab6      	subs	r6, r6, r2
 8024024:	1a8a      	subs	r2, r1, r2
 8024026:	9206      	str	r2, [sp, #24]
 8024028:	b1fb      	cbz	r3, 802406a <_dtoa_r+0x6b2>
 802402a:	9a08      	ldr	r2, [sp, #32]
 802402c:	2a00      	cmp	r2, #0
 802402e:	f000 80bc 	beq.w	80241aa <_dtoa_r+0x7f2>
 8024032:	b19c      	cbz	r4, 802405c <_dtoa_r+0x6a4>
 8024034:	4629      	mov	r1, r5
 8024036:	4622      	mov	r2, r4
 8024038:	4648      	mov	r0, r9
 802403a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802403c:	f000 fc5a 	bl	80248f4 <__pow5mult>
 8024040:	9a01      	ldr	r2, [sp, #4]
 8024042:	4601      	mov	r1, r0
 8024044:	4605      	mov	r5, r0
 8024046:	4648      	mov	r0, r9
 8024048:	f000 fbaa 	bl	80247a0 <__multiply>
 802404c:	9901      	ldr	r1, [sp, #4]
 802404e:	9004      	str	r0, [sp, #16]
 8024050:	4648      	mov	r0, r9
 8024052:	f000 fa91 	bl	8024578 <_Bfree>
 8024056:	9a04      	ldr	r2, [sp, #16]
 8024058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802405a:	9201      	str	r2, [sp, #4]
 802405c:	1b1a      	subs	r2, r3, r4
 802405e:	d004      	beq.n	802406a <_dtoa_r+0x6b2>
 8024060:	9901      	ldr	r1, [sp, #4]
 8024062:	4648      	mov	r0, r9
 8024064:	f000 fc46 	bl	80248f4 <__pow5mult>
 8024068:	9001      	str	r0, [sp, #4]
 802406a:	2101      	movs	r1, #1
 802406c:	4648      	mov	r0, r9
 802406e:	f000 fb81 	bl	8024774 <__i2b>
 8024072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024074:	4604      	mov	r4, r0
 8024076:	2b00      	cmp	r3, #0
 8024078:	f000 81d0 	beq.w	802441c <_dtoa_r+0xa64>
 802407c:	461a      	mov	r2, r3
 802407e:	4601      	mov	r1, r0
 8024080:	4648      	mov	r0, r9
 8024082:	f000 fc37 	bl	80248f4 <__pow5mult>
 8024086:	9b07      	ldr	r3, [sp, #28]
 8024088:	2b01      	cmp	r3, #1
 802408a:	4604      	mov	r4, r0
 802408c:	f300 8095 	bgt.w	80241ba <_dtoa_r+0x802>
 8024090:	9b02      	ldr	r3, [sp, #8]
 8024092:	2b00      	cmp	r3, #0
 8024094:	f040 808b 	bne.w	80241ae <_dtoa_r+0x7f6>
 8024098:	9b03      	ldr	r3, [sp, #12]
 802409a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802409e:	2a00      	cmp	r2, #0
 80240a0:	f040 8087 	bne.w	80241b2 <_dtoa_r+0x7fa>
 80240a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80240a8:	0d12      	lsrs	r2, r2, #20
 80240aa:	0512      	lsls	r2, r2, #20
 80240ac:	2a00      	cmp	r2, #0
 80240ae:	f000 8082 	beq.w	80241b6 <_dtoa_r+0x7fe>
 80240b2:	9b05      	ldr	r3, [sp, #20]
 80240b4:	3301      	adds	r3, #1
 80240b6:	9305      	str	r3, [sp, #20]
 80240b8:	9b06      	ldr	r3, [sp, #24]
 80240ba:	3301      	adds	r3, #1
 80240bc:	9306      	str	r3, [sp, #24]
 80240be:	2301      	movs	r3, #1
 80240c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80240c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	f000 81af 	beq.w	8024428 <_dtoa_r+0xa70>
 80240ca:	6922      	ldr	r2, [r4, #16]
 80240cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80240d0:	6910      	ldr	r0, [r2, #16]
 80240d2:	f000 fb03 	bl	80246dc <__hi0bits>
 80240d6:	f1c0 0020 	rsb	r0, r0, #32
 80240da:	9b06      	ldr	r3, [sp, #24]
 80240dc:	4418      	add	r0, r3
 80240de:	f010 001f 	ands.w	r0, r0, #31
 80240e2:	d076      	beq.n	80241d2 <_dtoa_r+0x81a>
 80240e4:	f1c0 0220 	rsb	r2, r0, #32
 80240e8:	2a04      	cmp	r2, #4
 80240ea:	dd69      	ble.n	80241c0 <_dtoa_r+0x808>
 80240ec:	9b05      	ldr	r3, [sp, #20]
 80240ee:	f1c0 001c 	rsb	r0, r0, #28
 80240f2:	4403      	add	r3, r0
 80240f4:	9305      	str	r3, [sp, #20]
 80240f6:	9b06      	ldr	r3, [sp, #24]
 80240f8:	4406      	add	r6, r0
 80240fa:	4403      	add	r3, r0
 80240fc:	9306      	str	r3, [sp, #24]
 80240fe:	9b05      	ldr	r3, [sp, #20]
 8024100:	2b00      	cmp	r3, #0
 8024102:	dd05      	ble.n	8024110 <_dtoa_r+0x758>
 8024104:	9901      	ldr	r1, [sp, #4]
 8024106:	461a      	mov	r2, r3
 8024108:	4648      	mov	r0, r9
 802410a:	f000 fc4d 	bl	80249a8 <__lshift>
 802410e:	9001      	str	r0, [sp, #4]
 8024110:	9b06      	ldr	r3, [sp, #24]
 8024112:	2b00      	cmp	r3, #0
 8024114:	dd05      	ble.n	8024122 <_dtoa_r+0x76a>
 8024116:	4621      	mov	r1, r4
 8024118:	461a      	mov	r2, r3
 802411a:	4648      	mov	r0, r9
 802411c:	f000 fc44 	bl	80249a8 <__lshift>
 8024120:	4604      	mov	r4, r0
 8024122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024124:	2b00      	cmp	r3, #0
 8024126:	d056      	beq.n	80241d6 <_dtoa_r+0x81e>
 8024128:	9801      	ldr	r0, [sp, #4]
 802412a:	4621      	mov	r1, r4
 802412c:	f000 fca8 	bl	8024a80 <__mcmp>
 8024130:	2800      	cmp	r0, #0
 8024132:	da50      	bge.n	80241d6 <_dtoa_r+0x81e>
 8024134:	f108 33ff 	add.w	r3, r8, #4294967295
 8024138:	9304      	str	r3, [sp, #16]
 802413a:	9901      	ldr	r1, [sp, #4]
 802413c:	2300      	movs	r3, #0
 802413e:	220a      	movs	r2, #10
 8024140:	4648      	mov	r0, r9
 8024142:	f000 fa3b 	bl	80245bc <__multadd>
 8024146:	9b08      	ldr	r3, [sp, #32]
 8024148:	9001      	str	r0, [sp, #4]
 802414a:	2b00      	cmp	r3, #0
 802414c:	f000 816e 	beq.w	802442c <_dtoa_r+0xa74>
 8024150:	4629      	mov	r1, r5
 8024152:	2300      	movs	r3, #0
 8024154:	220a      	movs	r2, #10
 8024156:	4648      	mov	r0, r9
 8024158:	f000 fa30 	bl	80245bc <__multadd>
 802415c:	f1bb 0f00 	cmp.w	fp, #0
 8024160:	4605      	mov	r5, r0
 8024162:	dc64      	bgt.n	802422e <_dtoa_r+0x876>
 8024164:	9b07      	ldr	r3, [sp, #28]
 8024166:	2b02      	cmp	r3, #2
 8024168:	dc3e      	bgt.n	80241e8 <_dtoa_r+0x830>
 802416a:	e060      	b.n	802422e <_dtoa_r+0x876>
 802416c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802416e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8024172:	e73c      	b.n	8023fee <_dtoa_r+0x636>
 8024174:	f10a 34ff 	add.w	r4, sl, #4294967295
 8024178:	42a3      	cmp	r3, r4
 802417a:	bfbf      	itttt	lt
 802417c:	1ae2      	sublt	r2, r4, r3
 802417e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8024180:	189b      	addlt	r3, r3, r2
 8024182:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8024184:	bfae      	itee	ge
 8024186:	1b1c      	subge	r4, r3, r4
 8024188:	4623      	movlt	r3, r4
 802418a:	2400      	movlt	r4, #0
 802418c:	f1ba 0f00 	cmp.w	sl, #0
 8024190:	bfb5      	itete	lt
 8024192:	9a05      	ldrlt	r2, [sp, #20]
 8024194:	9e05      	ldrge	r6, [sp, #20]
 8024196:	eba2 060a 	sublt.w	r6, r2, sl
 802419a:	4652      	movge	r2, sl
 802419c:	bfb8      	it	lt
 802419e:	2200      	movlt	r2, #0
 80241a0:	e727      	b.n	8023ff2 <_dtoa_r+0x63a>
 80241a2:	9e05      	ldr	r6, [sp, #20]
 80241a4:	9d08      	ldr	r5, [sp, #32]
 80241a6:	461c      	mov	r4, r3
 80241a8:	e730      	b.n	802400c <_dtoa_r+0x654>
 80241aa:	461a      	mov	r2, r3
 80241ac:	e758      	b.n	8024060 <_dtoa_r+0x6a8>
 80241ae:	2300      	movs	r3, #0
 80241b0:	e786      	b.n	80240c0 <_dtoa_r+0x708>
 80241b2:	9b02      	ldr	r3, [sp, #8]
 80241b4:	e784      	b.n	80240c0 <_dtoa_r+0x708>
 80241b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80241b8:	e783      	b.n	80240c2 <_dtoa_r+0x70a>
 80241ba:	2300      	movs	r3, #0
 80241bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80241be:	e784      	b.n	80240ca <_dtoa_r+0x712>
 80241c0:	d09d      	beq.n	80240fe <_dtoa_r+0x746>
 80241c2:	9b05      	ldr	r3, [sp, #20]
 80241c4:	321c      	adds	r2, #28
 80241c6:	4413      	add	r3, r2
 80241c8:	9305      	str	r3, [sp, #20]
 80241ca:	9b06      	ldr	r3, [sp, #24]
 80241cc:	4416      	add	r6, r2
 80241ce:	4413      	add	r3, r2
 80241d0:	e794      	b.n	80240fc <_dtoa_r+0x744>
 80241d2:	4602      	mov	r2, r0
 80241d4:	e7f5      	b.n	80241c2 <_dtoa_r+0x80a>
 80241d6:	f1ba 0f00 	cmp.w	sl, #0
 80241da:	f8cd 8010 	str.w	r8, [sp, #16]
 80241de:	46d3      	mov	fp, sl
 80241e0:	dc21      	bgt.n	8024226 <_dtoa_r+0x86e>
 80241e2:	9b07      	ldr	r3, [sp, #28]
 80241e4:	2b02      	cmp	r3, #2
 80241e6:	dd1e      	ble.n	8024226 <_dtoa_r+0x86e>
 80241e8:	f1bb 0f00 	cmp.w	fp, #0
 80241ec:	f47f aeb7 	bne.w	8023f5e <_dtoa_r+0x5a6>
 80241f0:	4621      	mov	r1, r4
 80241f2:	465b      	mov	r3, fp
 80241f4:	2205      	movs	r2, #5
 80241f6:	4648      	mov	r0, r9
 80241f8:	f000 f9e0 	bl	80245bc <__multadd>
 80241fc:	4601      	mov	r1, r0
 80241fe:	4604      	mov	r4, r0
 8024200:	9801      	ldr	r0, [sp, #4]
 8024202:	f000 fc3d 	bl	8024a80 <__mcmp>
 8024206:	2800      	cmp	r0, #0
 8024208:	f77f aea9 	ble.w	8023f5e <_dtoa_r+0x5a6>
 802420c:	463e      	mov	r6, r7
 802420e:	2331      	movs	r3, #49	@ 0x31
 8024210:	f806 3b01 	strb.w	r3, [r6], #1
 8024214:	9b04      	ldr	r3, [sp, #16]
 8024216:	3301      	adds	r3, #1
 8024218:	9304      	str	r3, [sp, #16]
 802421a:	e6a4      	b.n	8023f66 <_dtoa_r+0x5ae>
 802421c:	f8cd 8010 	str.w	r8, [sp, #16]
 8024220:	4654      	mov	r4, sl
 8024222:	4625      	mov	r5, r4
 8024224:	e7f2      	b.n	802420c <_dtoa_r+0x854>
 8024226:	9b08      	ldr	r3, [sp, #32]
 8024228:	2b00      	cmp	r3, #0
 802422a:	f000 8103 	beq.w	8024434 <_dtoa_r+0xa7c>
 802422e:	2e00      	cmp	r6, #0
 8024230:	dd05      	ble.n	802423e <_dtoa_r+0x886>
 8024232:	4629      	mov	r1, r5
 8024234:	4632      	mov	r2, r6
 8024236:	4648      	mov	r0, r9
 8024238:	f000 fbb6 	bl	80249a8 <__lshift>
 802423c:	4605      	mov	r5, r0
 802423e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024240:	2b00      	cmp	r3, #0
 8024242:	d058      	beq.n	80242f6 <_dtoa_r+0x93e>
 8024244:	6869      	ldr	r1, [r5, #4]
 8024246:	4648      	mov	r0, r9
 8024248:	f000 f956 	bl	80244f8 <_Balloc>
 802424c:	4606      	mov	r6, r0
 802424e:	b928      	cbnz	r0, 802425c <_dtoa_r+0x8a4>
 8024250:	4b82      	ldr	r3, [pc, #520]	@ (802445c <_dtoa_r+0xaa4>)
 8024252:	4602      	mov	r2, r0
 8024254:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8024258:	f7ff bbc7 	b.w	80239ea <_dtoa_r+0x32>
 802425c:	692a      	ldr	r2, [r5, #16]
 802425e:	3202      	adds	r2, #2
 8024260:	0092      	lsls	r2, r2, #2
 8024262:	f105 010c 	add.w	r1, r5, #12
 8024266:	300c      	adds	r0, #12
 8024268:	f7ff fb01 	bl	802386e <memcpy>
 802426c:	2201      	movs	r2, #1
 802426e:	4631      	mov	r1, r6
 8024270:	4648      	mov	r0, r9
 8024272:	f000 fb99 	bl	80249a8 <__lshift>
 8024276:	1c7b      	adds	r3, r7, #1
 8024278:	9305      	str	r3, [sp, #20]
 802427a:	eb07 030b 	add.w	r3, r7, fp
 802427e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024280:	9b02      	ldr	r3, [sp, #8]
 8024282:	f003 0301 	and.w	r3, r3, #1
 8024286:	46a8      	mov	r8, r5
 8024288:	9308      	str	r3, [sp, #32]
 802428a:	4605      	mov	r5, r0
 802428c:	9b05      	ldr	r3, [sp, #20]
 802428e:	9801      	ldr	r0, [sp, #4]
 8024290:	4621      	mov	r1, r4
 8024292:	f103 3bff 	add.w	fp, r3, #4294967295
 8024296:	f7ff fb06 	bl	80238a6 <quorem>
 802429a:	4641      	mov	r1, r8
 802429c:	9002      	str	r0, [sp, #8]
 802429e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80242a2:	9801      	ldr	r0, [sp, #4]
 80242a4:	f000 fbec 	bl	8024a80 <__mcmp>
 80242a8:	462a      	mov	r2, r5
 80242aa:	9006      	str	r0, [sp, #24]
 80242ac:	4621      	mov	r1, r4
 80242ae:	4648      	mov	r0, r9
 80242b0:	f000 fc02 	bl	8024ab8 <__mdiff>
 80242b4:	68c2      	ldr	r2, [r0, #12]
 80242b6:	4606      	mov	r6, r0
 80242b8:	b9fa      	cbnz	r2, 80242fa <_dtoa_r+0x942>
 80242ba:	4601      	mov	r1, r0
 80242bc:	9801      	ldr	r0, [sp, #4]
 80242be:	f000 fbdf 	bl	8024a80 <__mcmp>
 80242c2:	4602      	mov	r2, r0
 80242c4:	4631      	mov	r1, r6
 80242c6:	4648      	mov	r0, r9
 80242c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80242ca:	f000 f955 	bl	8024578 <_Bfree>
 80242ce:	9b07      	ldr	r3, [sp, #28]
 80242d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80242d2:	9e05      	ldr	r6, [sp, #20]
 80242d4:	ea43 0102 	orr.w	r1, r3, r2
 80242d8:	9b08      	ldr	r3, [sp, #32]
 80242da:	4319      	orrs	r1, r3
 80242dc:	d10f      	bne.n	80242fe <_dtoa_r+0x946>
 80242de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80242e2:	d028      	beq.n	8024336 <_dtoa_r+0x97e>
 80242e4:	9b06      	ldr	r3, [sp, #24]
 80242e6:	2b00      	cmp	r3, #0
 80242e8:	dd02      	ble.n	80242f0 <_dtoa_r+0x938>
 80242ea:	9b02      	ldr	r3, [sp, #8]
 80242ec:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80242f0:	f88b a000 	strb.w	sl, [fp]
 80242f4:	e639      	b.n	8023f6a <_dtoa_r+0x5b2>
 80242f6:	4628      	mov	r0, r5
 80242f8:	e7bd      	b.n	8024276 <_dtoa_r+0x8be>
 80242fa:	2201      	movs	r2, #1
 80242fc:	e7e2      	b.n	80242c4 <_dtoa_r+0x90c>
 80242fe:	9b06      	ldr	r3, [sp, #24]
 8024300:	2b00      	cmp	r3, #0
 8024302:	db04      	blt.n	802430e <_dtoa_r+0x956>
 8024304:	9907      	ldr	r1, [sp, #28]
 8024306:	430b      	orrs	r3, r1
 8024308:	9908      	ldr	r1, [sp, #32]
 802430a:	430b      	orrs	r3, r1
 802430c:	d120      	bne.n	8024350 <_dtoa_r+0x998>
 802430e:	2a00      	cmp	r2, #0
 8024310:	ddee      	ble.n	80242f0 <_dtoa_r+0x938>
 8024312:	9901      	ldr	r1, [sp, #4]
 8024314:	2201      	movs	r2, #1
 8024316:	4648      	mov	r0, r9
 8024318:	f000 fb46 	bl	80249a8 <__lshift>
 802431c:	4621      	mov	r1, r4
 802431e:	9001      	str	r0, [sp, #4]
 8024320:	f000 fbae 	bl	8024a80 <__mcmp>
 8024324:	2800      	cmp	r0, #0
 8024326:	dc03      	bgt.n	8024330 <_dtoa_r+0x978>
 8024328:	d1e2      	bne.n	80242f0 <_dtoa_r+0x938>
 802432a:	f01a 0f01 	tst.w	sl, #1
 802432e:	d0df      	beq.n	80242f0 <_dtoa_r+0x938>
 8024330:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024334:	d1d9      	bne.n	80242ea <_dtoa_r+0x932>
 8024336:	2339      	movs	r3, #57	@ 0x39
 8024338:	f88b 3000 	strb.w	r3, [fp]
 802433c:	4633      	mov	r3, r6
 802433e:	461e      	mov	r6, r3
 8024340:	3b01      	subs	r3, #1
 8024342:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8024346:	2a39      	cmp	r2, #57	@ 0x39
 8024348:	d053      	beq.n	80243f2 <_dtoa_r+0xa3a>
 802434a:	3201      	adds	r2, #1
 802434c:	701a      	strb	r2, [r3, #0]
 802434e:	e60c      	b.n	8023f6a <_dtoa_r+0x5b2>
 8024350:	2a00      	cmp	r2, #0
 8024352:	dd07      	ble.n	8024364 <_dtoa_r+0x9ac>
 8024354:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024358:	d0ed      	beq.n	8024336 <_dtoa_r+0x97e>
 802435a:	f10a 0301 	add.w	r3, sl, #1
 802435e:	f88b 3000 	strb.w	r3, [fp]
 8024362:	e602      	b.n	8023f6a <_dtoa_r+0x5b2>
 8024364:	9b05      	ldr	r3, [sp, #20]
 8024366:	9a05      	ldr	r2, [sp, #20]
 8024368:	f803 ac01 	strb.w	sl, [r3, #-1]
 802436c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802436e:	4293      	cmp	r3, r2
 8024370:	d029      	beq.n	80243c6 <_dtoa_r+0xa0e>
 8024372:	9901      	ldr	r1, [sp, #4]
 8024374:	2300      	movs	r3, #0
 8024376:	220a      	movs	r2, #10
 8024378:	4648      	mov	r0, r9
 802437a:	f000 f91f 	bl	80245bc <__multadd>
 802437e:	45a8      	cmp	r8, r5
 8024380:	9001      	str	r0, [sp, #4]
 8024382:	f04f 0300 	mov.w	r3, #0
 8024386:	f04f 020a 	mov.w	r2, #10
 802438a:	4641      	mov	r1, r8
 802438c:	4648      	mov	r0, r9
 802438e:	d107      	bne.n	80243a0 <_dtoa_r+0x9e8>
 8024390:	f000 f914 	bl	80245bc <__multadd>
 8024394:	4680      	mov	r8, r0
 8024396:	4605      	mov	r5, r0
 8024398:	9b05      	ldr	r3, [sp, #20]
 802439a:	3301      	adds	r3, #1
 802439c:	9305      	str	r3, [sp, #20]
 802439e:	e775      	b.n	802428c <_dtoa_r+0x8d4>
 80243a0:	f000 f90c 	bl	80245bc <__multadd>
 80243a4:	4629      	mov	r1, r5
 80243a6:	4680      	mov	r8, r0
 80243a8:	2300      	movs	r3, #0
 80243aa:	220a      	movs	r2, #10
 80243ac:	4648      	mov	r0, r9
 80243ae:	f000 f905 	bl	80245bc <__multadd>
 80243b2:	4605      	mov	r5, r0
 80243b4:	e7f0      	b.n	8024398 <_dtoa_r+0x9e0>
 80243b6:	f1bb 0f00 	cmp.w	fp, #0
 80243ba:	bfcc      	ite	gt
 80243bc:	465e      	movgt	r6, fp
 80243be:	2601      	movle	r6, #1
 80243c0:	443e      	add	r6, r7
 80243c2:	f04f 0800 	mov.w	r8, #0
 80243c6:	9901      	ldr	r1, [sp, #4]
 80243c8:	2201      	movs	r2, #1
 80243ca:	4648      	mov	r0, r9
 80243cc:	f000 faec 	bl	80249a8 <__lshift>
 80243d0:	4621      	mov	r1, r4
 80243d2:	9001      	str	r0, [sp, #4]
 80243d4:	f000 fb54 	bl	8024a80 <__mcmp>
 80243d8:	2800      	cmp	r0, #0
 80243da:	dcaf      	bgt.n	802433c <_dtoa_r+0x984>
 80243dc:	d102      	bne.n	80243e4 <_dtoa_r+0xa2c>
 80243de:	f01a 0f01 	tst.w	sl, #1
 80243e2:	d1ab      	bne.n	802433c <_dtoa_r+0x984>
 80243e4:	4633      	mov	r3, r6
 80243e6:	461e      	mov	r6, r3
 80243e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80243ec:	2a30      	cmp	r2, #48	@ 0x30
 80243ee:	d0fa      	beq.n	80243e6 <_dtoa_r+0xa2e>
 80243f0:	e5bb      	b.n	8023f6a <_dtoa_r+0x5b2>
 80243f2:	429f      	cmp	r7, r3
 80243f4:	d1a3      	bne.n	802433e <_dtoa_r+0x986>
 80243f6:	9b04      	ldr	r3, [sp, #16]
 80243f8:	3301      	adds	r3, #1
 80243fa:	9304      	str	r3, [sp, #16]
 80243fc:	2331      	movs	r3, #49	@ 0x31
 80243fe:	703b      	strb	r3, [r7, #0]
 8024400:	e5b3      	b.n	8023f6a <_dtoa_r+0x5b2>
 8024402:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024404:	4f16      	ldr	r7, [pc, #88]	@ (8024460 <_dtoa_r+0xaa8>)
 8024406:	b11b      	cbz	r3, 8024410 <_dtoa_r+0xa58>
 8024408:	f107 0308 	add.w	r3, r7, #8
 802440c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802440e:	6013      	str	r3, [r2, #0]
 8024410:	4638      	mov	r0, r7
 8024412:	b011      	add	sp, #68	@ 0x44
 8024414:	ecbd 8b02 	vpop	{d8}
 8024418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802441c:	9b07      	ldr	r3, [sp, #28]
 802441e:	2b01      	cmp	r3, #1
 8024420:	f77f ae36 	ble.w	8024090 <_dtoa_r+0x6d8>
 8024424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024428:	2001      	movs	r0, #1
 802442a:	e656      	b.n	80240da <_dtoa_r+0x722>
 802442c:	f1bb 0f00 	cmp.w	fp, #0
 8024430:	f77f aed7 	ble.w	80241e2 <_dtoa_r+0x82a>
 8024434:	463e      	mov	r6, r7
 8024436:	9801      	ldr	r0, [sp, #4]
 8024438:	4621      	mov	r1, r4
 802443a:	f7ff fa34 	bl	80238a6 <quorem>
 802443e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8024442:	f806 ab01 	strb.w	sl, [r6], #1
 8024446:	1bf2      	subs	r2, r6, r7
 8024448:	4593      	cmp	fp, r2
 802444a:	ddb4      	ble.n	80243b6 <_dtoa_r+0x9fe>
 802444c:	9901      	ldr	r1, [sp, #4]
 802444e:	2300      	movs	r3, #0
 8024450:	220a      	movs	r2, #10
 8024452:	4648      	mov	r0, r9
 8024454:	f000 f8b2 	bl	80245bc <__multadd>
 8024458:	9001      	str	r0, [sp, #4]
 802445a:	e7ec      	b.n	8024436 <_dtoa_r+0xa7e>
 802445c:	08036c9e 	.word	0x08036c9e
 8024460:	08036c39 	.word	0x08036c39

08024464 <_free_r>:
 8024464:	b538      	push	{r3, r4, r5, lr}
 8024466:	4605      	mov	r5, r0
 8024468:	2900      	cmp	r1, #0
 802446a:	d041      	beq.n	80244f0 <_free_r+0x8c>
 802446c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024470:	1f0c      	subs	r4, r1, #4
 8024472:	2b00      	cmp	r3, #0
 8024474:	bfb8      	it	lt
 8024476:	18e4      	addlt	r4, r4, r3
 8024478:	f7fd ff56 	bl	8022328 <__malloc_lock>
 802447c:	4a1d      	ldr	r2, [pc, #116]	@ (80244f4 <_free_r+0x90>)
 802447e:	6813      	ldr	r3, [r2, #0]
 8024480:	b933      	cbnz	r3, 8024490 <_free_r+0x2c>
 8024482:	6063      	str	r3, [r4, #4]
 8024484:	6014      	str	r4, [r2, #0]
 8024486:	4628      	mov	r0, r5
 8024488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802448c:	f7fd bf52 	b.w	8022334 <__malloc_unlock>
 8024490:	42a3      	cmp	r3, r4
 8024492:	d908      	bls.n	80244a6 <_free_r+0x42>
 8024494:	6820      	ldr	r0, [r4, #0]
 8024496:	1821      	adds	r1, r4, r0
 8024498:	428b      	cmp	r3, r1
 802449a:	bf01      	itttt	eq
 802449c:	6819      	ldreq	r1, [r3, #0]
 802449e:	685b      	ldreq	r3, [r3, #4]
 80244a0:	1809      	addeq	r1, r1, r0
 80244a2:	6021      	streq	r1, [r4, #0]
 80244a4:	e7ed      	b.n	8024482 <_free_r+0x1e>
 80244a6:	461a      	mov	r2, r3
 80244a8:	685b      	ldr	r3, [r3, #4]
 80244aa:	b10b      	cbz	r3, 80244b0 <_free_r+0x4c>
 80244ac:	42a3      	cmp	r3, r4
 80244ae:	d9fa      	bls.n	80244a6 <_free_r+0x42>
 80244b0:	6811      	ldr	r1, [r2, #0]
 80244b2:	1850      	adds	r0, r2, r1
 80244b4:	42a0      	cmp	r0, r4
 80244b6:	d10b      	bne.n	80244d0 <_free_r+0x6c>
 80244b8:	6820      	ldr	r0, [r4, #0]
 80244ba:	4401      	add	r1, r0
 80244bc:	1850      	adds	r0, r2, r1
 80244be:	4283      	cmp	r3, r0
 80244c0:	6011      	str	r1, [r2, #0]
 80244c2:	d1e0      	bne.n	8024486 <_free_r+0x22>
 80244c4:	6818      	ldr	r0, [r3, #0]
 80244c6:	685b      	ldr	r3, [r3, #4]
 80244c8:	6053      	str	r3, [r2, #4]
 80244ca:	4408      	add	r0, r1
 80244cc:	6010      	str	r0, [r2, #0]
 80244ce:	e7da      	b.n	8024486 <_free_r+0x22>
 80244d0:	d902      	bls.n	80244d8 <_free_r+0x74>
 80244d2:	230c      	movs	r3, #12
 80244d4:	602b      	str	r3, [r5, #0]
 80244d6:	e7d6      	b.n	8024486 <_free_r+0x22>
 80244d8:	6820      	ldr	r0, [r4, #0]
 80244da:	1821      	adds	r1, r4, r0
 80244dc:	428b      	cmp	r3, r1
 80244de:	bf04      	itt	eq
 80244e0:	6819      	ldreq	r1, [r3, #0]
 80244e2:	685b      	ldreq	r3, [r3, #4]
 80244e4:	6063      	str	r3, [r4, #4]
 80244e6:	bf04      	itt	eq
 80244e8:	1809      	addeq	r1, r1, r0
 80244ea:	6021      	streq	r1, [r4, #0]
 80244ec:	6054      	str	r4, [r2, #4]
 80244ee:	e7ca      	b.n	8024486 <_free_r+0x22>
 80244f0:	bd38      	pop	{r3, r4, r5, pc}
 80244f2:	bf00      	nop
 80244f4:	24003ef4 	.word	0x24003ef4

080244f8 <_Balloc>:
 80244f8:	b570      	push	{r4, r5, r6, lr}
 80244fa:	69c6      	ldr	r6, [r0, #28]
 80244fc:	4604      	mov	r4, r0
 80244fe:	460d      	mov	r5, r1
 8024500:	b976      	cbnz	r6, 8024520 <_Balloc+0x28>
 8024502:	2010      	movs	r0, #16
 8024504:	f7fd fe5e 	bl	80221c4 <malloc>
 8024508:	4602      	mov	r2, r0
 802450a:	61e0      	str	r0, [r4, #28]
 802450c:	b920      	cbnz	r0, 8024518 <_Balloc+0x20>
 802450e:	4b18      	ldr	r3, [pc, #96]	@ (8024570 <_Balloc+0x78>)
 8024510:	4818      	ldr	r0, [pc, #96]	@ (8024574 <_Balloc+0x7c>)
 8024512:	216b      	movs	r1, #107	@ 0x6b
 8024514:	f7fd fe18 	bl	8022148 <__assert_func>
 8024518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802451c:	6006      	str	r6, [r0, #0]
 802451e:	60c6      	str	r6, [r0, #12]
 8024520:	69e6      	ldr	r6, [r4, #28]
 8024522:	68f3      	ldr	r3, [r6, #12]
 8024524:	b183      	cbz	r3, 8024548 <_Balloc+0x50>
 8024526:	69e3      	ldr	r3, [r4, #28]
 8024528:	68db      	ldr	r3, [r3, #12]
 802452a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802452e:	b9b8      	cbnz	r0, 8024560 <_Balloc+0x68>
 8024530:	2101      	movs	r1, #1
 8024532:	fa01 f605 	lsl.w	r6, r1, r5
 8024536:	1d72      	adds	r2, r6, #5
 8024538:	0092      	lsls	r2, r2, #2
 802453a:	4620      	mov	r0, r4
 802453c:	f7fd fe2e 	bl	802219c <_calloc_r>
 8024540:	b160      	cbz	r0, 802455c <_Balloc+0x64>
 8024542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024546:	e00e      	b.n	8024566 <_Balloc+0x6e>
 8024548:	2221      	movs	r2, #33	@ 0x21
 802454a:	2104      	movs	r1, #4
 802454c:	4620      	mov	r0, r4
 802454e:	f7fd fe25 	bl	802219c <_calloc_r>
 8024552:	69e3      	ldr	r3, [r4, #28]
 8024554:	60f0      	str	r0, [r6, #12]
 8024556:	68db      	ldr	r3, [r3, #12]
 8024558:	2b00      	cmp	r3, #0
 802455a:	d1e4      	bne.n	8024526 <_Balloc+0x2e>
 802455c:	2000      	movs	r0, #0
 802455e:	bd70      	pop	{r4, r5, r6, pc}
 8024560:	6802      	ldr	r2, [r0, #0]
 8024562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024566:	2300      	movs	r3, #0
 8024568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802456c:	e7f7      	b.n	802455e <_Balloc+0x66>
 802456e:	bf00      	nop
 8024570:	08036a90 	.word	0x08036a90
 8024574:	08036caf 	.word	0x08036caf

08024578 <_Bfree>:
 8024578:	b570      	push	{r4, r5, r6, lr}
 802457a:	69c6      	ldr	r6, [r0, #28]
 802457c:	4605      	mov	r5, r0
 802457e:	460c      	mov	r4, r1
 8024580:	b976      	cbnz	r6, 80245a0 <_Bfree+0x28>
 8024582:	2010      	movs	r0, #16
 8024584:	f7fd fe1e 	bl	80221c4 <malloc>
 8024588:	4602      	mov	r2, r0
 802458a:	61e8      	str	r0, [r5, #28]
 802458c:	b920      	cbnz	r0, 8024598 <_Bfree+0x20>
 802458e:	4b09      	ldr	r3, [pc, #36]	@ (80245b4 <_Bfree+0x3c>)
 8024590:	4809      	ldr	r0, [pc, #36]	@ (80245b8 <_Bfree+0x40>)
 8024592:	218f      	movs	r1, #143	@ 0x8f
 8024594:	f7fd fdd8 	bl	8022148 <__assert_func>
 8024598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802459c:	6006      	str	r6, [r0, #0]
 802459e:	60c6      	str	r6, [r0, #12]
 80245a0:	b13c      	cbz	r4, 80245b2 <_Bfree+0x3a>
 80245a2:	69eb      	ldr	r3, [r5, #28]
 80245a4:	6862      	ldr	r2, [r4, #4]
 80245a6:	68db      	ldr	r3, [r3, #12]
 80245a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80245ac:	6021      	str	r1, [r4, #0]
 80245ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80245b2:	bd70      	pop	{r4, r5, r6, pc}
 80245b4:	08036a90 	.word	0x08036a90
 80245b8:	08036caf 	.word	0x08036caf

080245bc <__multadd>:
 80245bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245c0:	690d      	ldr	r5, [r1, #16]
 80245c2:	4607      	mov	r7, r0
 80245c4:	460c      	mov	r4, r1
 80245c6:	461e      	mov	r6, r3
 80245c8:	f101 0c14 	add.w	ip, r1, #20
 80245cc:	2000      	movs	r0, #0
 80245ce:	f8dc 3000 	ldr.w	r3, [ip]
 80245d2:	b299      	uxth	r1, r3
 80245d4:	fb02 6101 	mla	r1, r2, r1, r6
 80245d8:	0c1e      	lsrs	r6, r3, #16
 80245da:	0c0b      	lsrs	r3, r1, #16
 80245dc:	fb02 3306 	mla	r3, r2, r6, r3
 80245e0:	b289      	uxth	r1, r1
 80245e2:	3001      	adds	r0, #1
 80245e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80245e8:	4285      	cmp	r5, r0
 80245ea:	f84c 1b04 	str.w	r1, [ip], #4
 80245ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80245f2:	dcec      	bgt.n	80245ce <__multadd+0x12>
 80245f4:	b30e      	cbz	r6, 802463a <__multadd+0x7e>
 80245f6:	68a3      	ldr	r3, [r4, #8]
 80245f8:	42ab      	cmp	r3, r5
 80245fa:	dc19      	bgt.n	8024630 <__multadd+0x74>
 80245fc:	6861      	ldr	r1, [r4, #4]
 80245fe:	4638      	mov	r0, r7
 8024600:	3101      	adds	r1, #1
 8024602:	f7ff ff79 	bl	80244f8 <_Balloc>
 8024606:	4680      	mov	r8, r0
 8024608:	b928      	cbnz	r0, 8024616 <__multadd+0x5a>
 802460a:	4602      	mov	r2, r0
 802460c:	4b0c      	ldr	r3, [pc, #48]	@ (8024640 <__multadd+0x84>)
 802460e:	480d      	ldr	r0, [pc, #52]	@ (8024644 <__multadd+0x88>)
 8024610:	21ba      	movs	r1, #186	@ 0xba
 8024612:	f7fd fd99 	bl	8022148 <__assert_func>
 8024616:	6922      	ldr	r2, [r4, #16]
 8024618:	3202      	adds	r2, #2
 802461a:	f104 010c 	add.w	r1, r4, #12
 802461e:	0092      	lsls	r2, r2, #2
 8024620:	300c      	adds	r0, #12
 8024622:	f7ff f924 	bl	802386e <memcpy>
 8024626:	4621      	mov	r1, r4
 8024628:	4638      	mov	r0, r7
 802462a:	f7ff ffa5 	bl	8024578 <_Bfree>
 802462e:	4644      	mov	r4, r8
 8024630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024634:	3501      	adds	r5, #1
 8024636:	615e      	str	r6, [r3, #20]
 8024638:	6125      	str	r5, [r4, #16]
 802463a:	4620      	mov	r0, r4
 802463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024640:	08036c9e 	.word	0x08036c9e
 8024644:	08036caf 	.word	0x08036caf

08024648 <__s2b>:
 8024648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802464c:	460c      	mov	r4, r1
 802464e:	4615      	mov	r5, r2
 8024650:	461f      	mov	r7, r3
 8024652:	2209      	movs	r2, #9
 8024654:	3308      	adds	r3, #8
 8024656:	4606      	mov	r6, r0
 8024658:	fb93 f3f2 	sdiv	r3, r3, r2
 802465c:	2100      	movs	r1, #0
 802465e:	2201      	movs	r2, #1
 8024660:	429a      	cmp	r2, r3
 8024662:	db09      	blt.n	8024678 <__s2b+0x30>
 8024664:	4630      	mov	r0, r6
 8024666:	f7ff ff47 	bl	80244f8 <_Balloc>
 802466a:	b940      	cbnz	r0, 802467e <__s2b+0x36>
 802466c:	4602      	mov	r2, r0
 802466e:	4b19      	ldr	r3, [pc, #100]	@ (80246d4 <__s2b+0x8c>)
 8024670:	4819      	ldr	r0, [pc, #100]	@ (80246d8 <__s2b+0x90>)
 8024672:	21d3      	movs	r1, #211	@ 0xd3
 8024674:	f7fd fd68 	bl	8022148 <__assert_func>
 8024678:	0052      	lsls	r2, r2, #1
 802467a:	3101      	adds	r1, #1
 802467c:	e7f0      	b.n	8024660 <__s2b+0x18>
 802467e:	9b08      	ldr	r3, [sp, #32]
 8024680:	6143      	str	r3, [r0, #20]
 8024682:	2d09      	cmp	r5, #9
 8024684:	f04f 0301 	mov.w	r3, #1
 8024688:	6103      	str	r3, [r0, #16]
 802468a:	dd16      	ble.n	80246ba <__s2b+0x72>
 802468c:	f104 0909 	add.w	r9, r4, #9
 8024690:	46c8      	mov	r8, r9
 8024692:	442c      	add	r4, r5
 8024694:	f818 3b01 	ldrb.w	r3, [r8], #1
 8024698:	4601      	mov	r1, r0
 802469a:	3b30      	subs	r3, #48	@ 0x30
 802469c:	220a      	movs	r2, #10
 802469e:	4630      	mov	r0, r6
 80246a0:	f7ff ff8c 	bl	80245bc <__multadd>
 80246a4:	45a0      	cmp	r8, r4
 80246a6:	d1f5      	bne.n	8024694 <__s2b+0x4c>
 80246a8:	f1a5 0408 	sub.w	r4, r5, #8
 80246ac:	444c      	add	r4, r9
 80246ae:	1b2d      	subs	r5, r5, r4
 80246b0:	1963      	adds	r3, r4, r5
 80246b2:	42bb      	cmp	r3, r7
 80246b4:	db04      	blt.n	80246c0 <__s2b+0x78>
 80246b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80246ba:	340a      	adds	r4, #10
 80246bc:	2509      	movs	r5, #9
 80246be:	e7f6      	b.n	80246ae <__s2b+0x66>
 80246c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80246c4:	4601      	mov	r1, r0
 80246c6:	3b30      	subs	r3, #48	@ 0x30
 80246c8:	220a      	movs	r2, #10
 80246ca:	4630      	mov	r0, r6
 80246cc:	f7ff ff76 	bl	80245bc <__multadd>
 80246d0:	e7ee      	b.n	80246b0 <__s2b+0x68>
 80246d2:	bf00      	nop
 80246d4:	08036c9e 	.word	0x08036c9e
 80246d8:	08036caf 	.word	0x08036caf

080246dc <__hi0bits>:
 80246dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80246e0:	4603      	mov	r3, r0
 80246e2:	bf36      	itet	cc
 80246e4:	0403      	lslcc	r3, r0, #16
 80246e6:	2000      	movcs	r0, #0
 80246e8:	2010      	movcc	r0, #16
 80246ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80246ee:	bf3c      	itt	cc
 80246f0:	021b      	lslcc	r3, r3, #8
 80246f2:	3008      	addcc	r0, #8
 80246f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80246f8:	bf3c      	itt	cc
 80246fa:	011b      	lslcc	r3, r3, #4
 80246fc:	3004      	addcc	r0, #4
 80246fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8024702:	bf3c      	itt	cc
 8024704:	009b      	lslcc	r3, r3, #2
 8024706:	3002      	addcc	r0, #2
 8024708:	2b00      	cmp	r3, #0
 802470a:	db05      	blt.n	8024718 <__hi0bits+0x3c>
 802470c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8024710:	f100 0001 	add.w	r0, r0, #1
 8024714:	bf08      	it	eq
 8024716:	2020      	moveq	r0, #32
 8024718:	4770      	bx	lr

0802471a <__lo0bits>:
 802471a:	6803      	ldr	r3, [r0, #0]
 802471c:	4602      	mov	r2, r0
 802471e:	f013 0007 	ands.w	r0, r3, #7
 8024722:	d00b      	beq.n	802473c <__lo0bits+0x22>
 8024724:	07d9      	lsls	r1, r3, #31
 8024726:	d421      	bmi.n	802476c <__lo0bits+0x52>
 8024728:	0798      	lsls	r0, r3, #30
 802472a:	bf49      	itett	mi
 802472c:	085b      	lsrmi	r3, r3, #1
 802472e:	089b      	lsrpl	r3, r3, #2
 8024730:	2001      	movmi	r0, #1
 8024732:	6013      	strmi	r3, [r2, #0]
 8024734:	bf5c      	itt	pl
 8024736:	6013      	strpl	r3, [r2, #0]
 8024738:	2002      	movpl	r0, #2
 802473a:	4770      	bx	lr
 802473c:	b299      	uxth	r1, r3
 802473e:	b909      	cbnz	r1, 8024744 <__lo0bits+0x2a>
 8024740:	0c1b      	lsrs	r3, r3, #16
 8024742:	2010      	movs	r0, #16
 8024744:	b2d9      	uxtb	r1, r3
 8024746:	b909      	cbnz	r1, 802474c <__lo0bits+0x32>
 8024748:	3008      	adds	r0, #8
 802474a:	0a1b      	lsrs	r3, r3, #8
 802474c:	0719      	lsls	r1, r3, #28
 802474e:	bf04      	itt	eq
 8024750:	091b      	lsreq	r3, r3, #4
 8024752:	3004      	addeq	r0, #4
 8024754:	0799      	lsls	r1, r3, #30
 8024756:	bf04      	itt	eq
 8024758:	089b      	lsreq	r3, r3, #2
 802475a:	3002      	addeq	r0, #2
 802475c:	07d9      	lsls	r1, r3, #31
 802475e:	d403      	bmi.n	8024768 <__lo0bits+0x4e>
 8024760:	085b      	lsrs	r3, r3, #1
 8024762:	f100 0001 	add.w	r0, r0, #1
 8024766:	d003      	beq.n	8024770 <__lo0bits+0x56>
 8024768:	6013      	str	r3, [r2, #0]
 802476a:	4770      	bx	lr
 802476c:	2000      	movs	r0, #0
 802476e:	4770      	bx	lr
 8024770:	2020      	movs	r0, #32
 8024772:	4770      	bx	lr

08024774 <__i2b>:
 8024774:	b510      	push	{r4, lr}
 8024776:	460c      	mov	r4, r1
 8024778:	2101      	movs	r1, #1
 802477a:	f7ff febd 	bl	80244f8 <_Balloc>
 802477e:	4602      	mov	r2, r0
 8024780:	b928      	cbnz	r0, 802478e <__i2b+0x1a>
 8024782:	4b05      	ldr	r3, [pc, #20]	@ (8024798 <__i2b+0x24>)
 8024784:	4805      	ldr	r0, [pc, #20]	@ (802479c <__i2b+0x28>)
 8024786:	f240 1145 	movw	r1, #325	@ 0x145
 802478a:	f7fd fcdd 	bl	8022148 <__assert_func>
 802478e:	2301      	movs	r3, #1
 8024790:	6144      	str	r4, [r0, #20]
 8024792:	6103      	str	r3, [r0, #16]
 8024794:	bd10      	pop	{r4, pc}
 8024796:	bf00      	nop
 8024798:	08036c9e 	.word	0x08036c9e
 802479c:	08036caf 	.word	0x08036caf

080247a0 <__multiply>:
 80247a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247a4:	4614      	mov	r4, r2
 80247a6:	690a      	ldr	r2, [r1, #16]
 80247a8:	6923      	ldr	r3, [r4, #16]
 80247aa:	429a      	cmp	r2, r3
 80247ac:	bfa8      	it	ge
 80247ae:	4623      	movge	r3, r4
 80247b0:	460f      	mov	r7, r1
 80247b2:	bfa4      	itt	ge
 80247b4:	460c      	movge	r4, r1
 80247b6:	461f      	movge	r7, r3
 80247b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80247bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80247c0:	68a3      	ldr	r3, [r4, #8]
 80247c2:	6861      	ldr	r1, [r4, #4]
 80247c4:	eb0a 0609 	add.w	r6, sl, r9
 80247c8:	42b3      	cmp	r3, r6
 80247ca:	b085      	sub	sp, #20
 80247cc:	bfb8      	it	lt
 80247ce:	3101      	addlt	r1, #1
 80247d0:	f7ff fe92 	bl	80244f8 <_Balloc>
 80247d4:	b930      	cbnz	r0, 80247e4 <__multiply+0x44>
 80247d6:	4602      	mov	r2, r0
 80247d8:	4b44      	ldr	r3, [pc, #272]	@ (80248ec <__multiply+0x14c>)
 80247da:	4845      	ldr	r0, [pc, #276]	@ (80248f0 <__multiply+0x150>)
 80247dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80247e0:	f7fd fcb2 	bl	8022148 <__assert_func>
 80247e4:	f100 0514 	add.w	r5, r0, #20
 80247e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80247ec:	462b      	mov	r3, r5
 80247ee:	2200      	movs	r2, #0
 80247f0:	4543      	cmp	r3, r8
 80247f2:	d321      	bcc.n	8024838 <__multiply+0x98>
 80247f4:	f107 0114 	add.w	r1, r7, #20
 80247f8:	f104 0214 	add.w	r2, r4, #20
 80247fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8024800:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8024804:	9302      	str	r3, [sp, #8]
 8024806:	1b13      	subs	r3, r2, r4
 8024808:	3b15      	subs	r3, #21
 802480a:	f023 0303 	bic.w	r3, r3, #3
 802480e:	3304      	adds	r3, #4
 8024810:	f104 0715 	add.w	r7, r4, #21
 8024814:	42ba      	cmp	r2, r7
 8024816:	bf38      	it	cc
 8024818:	2304      	movcc	r3, #4
 802481a:	9301      	str	r3, [sp, #4]
 802481c:	9b02      	ldr	r3, [sp, #8]
 802481e:	9103      	str	r1, [sp, #12]
 8024820:	428b      	cmp	r3, r1
 8024822:	d80c      	bhi.n	802483e <__multiply+0x9e>
 8024824:	2e00      	cmp	r6, #0
 8024826:	dd03      	ble.n	8024830 <__multiply+0x90>
 8024828:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802482c:	2b00      	cmp	r3, #0
 802482e:	d05b      	beq.n	80248e8 <__multiply+0x148>
 8024830:	6106      	str	r6, [r0, #16]
 8024832:	b005      	add	sp, #20
 8024834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024838:	f843 2b04 	str.w	r2, [r3], #4
 802483c:	e7d8      	b.n	80247f0 <__multiply+0x50>
 802483e:	f8b1 a000 	ldrh.w	sl, [r1]
 8024842:	f1ba 0f00 	cmp.w	sl, #0
 8024846:	d024      	beq.n	8024892 <__multiply+0xf2>
 8024848:	f104 0e14 	add.w	lr, r4, #20
 802484c:	46a9      	mov	r9, r5
 802484e:	f04f 0c00 	mov.w	ip, #0
 8024852:	f85e 7b04 	ldr.w	r7, [lr], #4
 8024856:	f8d9 3000 	ldr.w	r3, [r9]
 802485a:	fa1f fb87 	uxth.w	fp, r7
 802485e:	b29b      	uxth	r3, r3
 8024860:	fb0a 330b 	mla	r3, sl, fp, r3
 8024864:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8024868:	f8d9 7000 	ldr.w	r7, [r9]
 802486c:	4463      	add	r3, ip
 802486e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8024872:	fb0a c70b 	mla	r7, sl, fp, ip
 8024876:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802487a:	b29b      	uxth	r3, r3
 802487c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8024880:	4572      	cmp	r2, lr
 8024882:	f849 3b04 	str.w	r3, [r9], #4
 8024886:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802488a:	d8e2      	bhi.n	8024852 <__multiply+0xb2>
 802488c:	9b01      	ldr	r3, [sp, #4]
 802488e:	f845 c003 	str.w	ip, [r5, r3]
 8024892:	9b03      	ldr	r3, [sp, #12]
 8024894:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8024898:	3104      	adds	r1, #4
 802489a:	f1b9 0f00 	cmp.w	r9, #0
 802489e:	d021      	beq.n	80248e4 <__multiply+0x144>
 80248a0:	682b      	ldr	r3, [r5, #0]
 80248a2:	f104 0c14 	add.w	ip, r4, #20
 80248a6:	46ae      	mov	lr, r5
 80248a8:	f04f 0a00 	mov.w	sl, #0
 80248ac:	f8bc b000 	ldrh.w	fp, [ip]
 80248b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80248b4:	fb09 770b 	mla	r7, r9, fp, r7
 80248b8:	4457      	add	r7, sl
 80248ba:	b29b      	uxth	r3, r3
 80248bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80248c0:	f84e 3b04 	str.w	r3, [lr], #4
 80248c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80248c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80248cc:	f8be 3000 	ldrh.w	r3, [lr]
 80248d0:	fb09 330a 	mla	r3, r9, sl, r3
 80248d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80248d8:	4562      	cmp	r2, ip
 80248da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80248de:	d8e5      	bhi.n	80248ac <__multiply+0x10c>
 80248e0:	9f01      	ldr	r7, [sp, #4]
 80248e2:	51eb      	str	r3, [r5, r7]
 80248e4:	3504      	adds	r5, #4
 80248e6:	e799      	b.n	802481c <__multiply+0x7c>
 80248e8:	3e01      	subs	r6, #1
 80248ea:	e79b      	b.n	8024824 <__multiply+0x84>
 80248ec:	08036c9e 	.word	0x08036c9e
 80248f0:	08036caf 	.word	0x08036caf

080248f4 <__pow5mult>:
 80248f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80248f8:	4615      	mov	r5, r2
 80248fa:	f012 0203 	ands.w	r2, r2, #3
 80248fe:	4607      	mov	r7, r0
 8024900:	460e      	mov	r6, r1
 8024902:	d007      	beq.n	8024914 <__pow5mult+0x20>
 8024904:	4c25      	ldr	r4, [pc, #148]	@ (802499c <__pow5mult+0xa8>)
 8024906:	3a01      	subs	r2, #1
 8024908:	2300      	movs	r3, #0
 802490a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802490e:	f7ff fe55 	bl	80245bc <__multadd>
 8024912:	4606      	mov	r6, r0
 8024914:	10ad      	asrs	r5, r5, #2
 8024916:	d03d      	beq.n	8024994 <__pow5mult+0xa0>
 8024918:	69fc      	ldr	r4, [r7, #28]
 802491a:	b97c      	cbnz	r4, 802493c <__pow5mult+0x48>
 802491c:	2010      	movs	r0, #16
 802491e:	f7fd fc51 	bl	80221c4 <malloc>
 8024922:	4602      	mov	r2, r0
 8024924:	61f8      	str	r0, [r7, #28]
 8024926:	b928      	cbnz	r0, 8024934 <__pow5mult+0x40>
 8024928:	4b1d      	ldr	r3, [pc, #116]	@ (80249a0 <__pow5mult+0xac>)
 802492a:	481e      	ldr	r0, [pc, #120]	@ (80249a4 <__pow5mult+0xb0>)
 802492c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8024930:	f7fd fc0a 	bl	8022148 <__assert_func>
 8024934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024938:	6004      	str	r4, [r0, #0]
 802493a:	60c4      	str	r4, [r0, #12]
 802493c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8024940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024944:	b94c      	cbnz	r4, 802495a <__pow5mult+0x66>
 8024946:	f240 2171 	movw	r1, #625	@ 0x271
 802494a:	4638      	mov	r0, r7
 802494c:	f7ff ff12 	bl	8024774 <__i2b>
 8024950:	2300      	movs	r3, #0
 8024952:	f8c8 0008 	str.w	r0, [r8, #8]
 8024956:	4604      	mov	r4, r0
 8024958:	6003      	str	r3, [r0, #0]
 802495a:	f04f 0900 	mov.w	r9, #0
 802495e:	07eb      	lsls	r3, r5, #31
 8024960:	d50a      	bpl.n	8024978 <__pow5mult+0x84>
 8024962:	4631      	mov	r1, r6
 8024964:	4622      	mov	r2, r4
 8024966:	4638      	mov	r0, r7
 8024968:	f7ff ff1a 	bl	80247a0 <__multiply>
 802496c:	4631      	mov	r1, r6
 802496e:	4680      	mov	r8, r0
 8024970:	4638      	mov	r0, r7
 8024972:	f7ff fe01 	bl	8024578 <_Bfree>
 8024976:	4646      	mov	r6, r8
 8024978:	106d      	asrs	r5, r5, #1
 802497a:	d00b      	beq.n	8024994 <__pow5mult+0xa0>
 802497c:	6820      	ldr	r0, [r4, #0]
 802497e:	b938      	cbnz	r0, 8024990 <__pow5mult+0x9c>
 8024980:	4622      	mov	r2, r4
 8024982:	4621      	mov	r1, r4
 8024984:	4638      	mov	r0, r7
 8024986:	f7ff ff0b 	bl	80247a0 <__multiply>
 802498a:	6020      	str	r0, [r4, #0]
 802498c:	f8c0 9000 	str.w	r9, [r0]
 8024990:	4604      	mov	r4, r0
 8024992:	e7e4      	b.n	802495e <__pow5mult+0x6a>
 8024994:	4630      	mov	r0, r6
 8024996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802499a:	bf00      	nop
 802499c:	08036d08 	.word	0x08036d08
 80249a0:	08036a90 	.word	0x08036a90
 80249a4:	08036caf 	.word	0x08036caf

080249a8 <__lshift>:
 80249a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80249ac:	460c      	mov	r4, r1
 80249ae:	6849      	ldr	r1, [r1, #4]
 80249b0:	6923      	ldr	r3, [r4, #16]
 80249b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80249b6:	68a3      	ldr	r3, [r4, #8]
 80249b8:	4607      	mov	r7, r0
 80249ba:	4691      	mov	r9, r2
 80249bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80249c0:	f108 0601 	add.w	r6, r8, #1
 80249c4:	42b3      	cmp	r3, r6
 80249c6:	db0b      	blt.n	80249e0 <__lshift+0x38>
 80249c8:	4638      	mov	r0, r7
 80249ca:	f7ff fd95 	bl	80244f8 <_Balloc>
 80249ce:	4605      	mov	r5, r0
 80249d0:	b948      	cbnz	r0, 80249e6 <__lshift+0x3e>
 80249d2:	4602      	mov	r2, r0
 80249d4:	4b28      	ldr	r3, [pc, #160]	@ (8024a78 <__lshift+0xd0>)
 80249d6:	4829      	ldr	r0, [pc, #164]	@ (8024a7c <__lshift+0xd4>)
 80249d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80249dc:	f7fd fbb4 	bl	8022148 <__assert_func>
 80249e0:	3101      	adds	r1, #1
 80249e2:	005b      	lsls	r3, r3, #1
 80249e4:	e7ee      	b.n	80249c4 <__lshift+0x1c>
 80249e6:	2300      	movs	r3, #0
 80249e8:	f100 0114 	add.w	r1, r0, #20
 80249ec:	f100 0210 	add.w	r2, r0, #16
 80249f0:	4618      	mov	r0, r3
 80249f2:	4553      	cmp	r3, sl
 80249f4:	db33      	blt.n	8024a5e <__lshift+0xb6>
 80249f6:	6920      	ldr	r0, [r4, #16]
 80249f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80249fc:	f104 0314 	add.w	r3, r4, #20
 8024a00:	f019 091f 	ands.w	r9, r9, #31
 8024a04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024a08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8024a0c:	d02b      	beq.n	8024a66 <__lshift+0xbe>
 8024a0e:	f1c9 0e20 	rsb	lr, r9, #32
 8024a12:	468a      	mov	sl, r1
 8024a14:	2200      	movs	r2, #0
 8024a16:	6818      	ldr	r0, [r3, #0]
 8024a18:	fa00 f009 	lsl.w	r0, r0, r9
 8024a1c:	4310      	orrs	r0, r2
 8024a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8024a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a26:	459c      	cmp	ip, r3
 8024a28:	fa22 f20e 	lsr.w	r2, r2, lr
 8024a2c:	d8f3      	bhi.n	8024a16 <__lshift+0x6e>
 8024a2e:	ebac 0304 	sub.w	r3, ip, r4
 8024a32:	3b15      	subs	r3, #21
 8024a34:	f023 0303 	bic.w	r3, r3, #3
 8024a38:	3304      	adds	r3, #4
 8024a3a:	f104 0015 	add.w	r0, r4, #21
 8024a3e:	4584      	cmp	ip, r0
 8024a40:	bf38      	it	cc
 8024a42:	2304      	movcc	r3, #4
 8024a44:	50ca      	str	r2, [r1, r3]
 8024a46:	b10a      	cbz	r2, 8024a4c <__lshift+0xa4>
 8024a48:	f108 0602 	add.w	r6, r8, #2
 8024a4c:	3e01      	subs	r6, #1
 8024a4e:	4638      	mov	r0, r7
 8024a50:	612e      	str	r6, [r5, #16]
 8024a52:	4621      	mov	r1, r4
 8024a54:	f7ff fd90 	bl	8024578 <_Bfree>
 8024a58:	4628      	mov	r0, r5
 8024a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8024a62:	3301      	adds	r3, #1
 8024a64:	e7c5      	b.n	80249f2 <__lshift+0x4a>
 8024a66:	3904      	subs	r1, #4
 8024a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8024a70:	459c      	cmp	ip, r3
 8024a72:	d8f9      	bhi.n	8024a68 <__lshift+0xc0>
 8024a74:	e7ea      	b.n	8024a4c <__lshift+0xa4>
 8024a76:	bf00      	nop
 8024a78:	08036c9e 	.word	0x08036c9e
 8024a7c:	08036caf 	.word	0x08036caf

08024a80 <__mcmp>:
 8024a80:	690a      	ldr	r2, [r1, #16]
 8024a82:	4603      	mov	r3, r0
 8024a84:	6900      	ldr	r0, [r0, #16]
 8024a86:	1a80      	subs	r0, r0, r2
 8024a88:	b530      	push	{r4, r5, lr}
 8024a8a:	d10e      	bne.n	8024aaa <__mcmp+0x2a>
 8024a8c:	3314      	adds	r3, #20
 8024a8e:	3114      	adds	r1, #20
 8024a90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8024a94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8024a98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8024a9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8024aa0:	4295      	cmp	r5, r2
 8024aa2:	d003      	beq.n	8024aac <__mcmp+0x2c>
 8024aa4:	d205      	bcs.n	8024ab2 <__mcmp+0x32>
 8024aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8024aaa:	bd30      	pop	{r4, r5, pc}
 8024aac:	42a3      	cmp	r3, r4
 8024aae:	d3f3      	bcc.n	8024a98 <__mcmp+0x18>
 8024ab0:	e7fb      	b.n	8024aaa <__mcmp+0x2a>
 8024ab2:	2001      	movs	r0, #1
 8024ab4:	e7f9      	b.n	8024aaa <__mcmp+0x2a>
	...

08024ab8 <__mdiff>:
 8024ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024abc:	4689      	mov	r9, r1
 8024abe:	4606      	mov	r6, r0
 8024ac0:	4611      	mov	r1, r2
 8024ac2:	4648      	mov	r0, r9
 8024ac4:	4614      	mov	r4, r2
 8024ac6:	f7ff ffdb 	bl	8024a80 <__mcmp>
 8024aca:	1e05      	subs	r5, r0, #0
 8024acc:	d112      	bne.n	8024af4 <__mdiff+0x3c>
 8024ace:	4629      	mov	r1, r5
 8024ad0:	4630      	mov	r0, r6
 8024ad2:	f7ff fd11 	bl	80244f8 <_Balloc>
 8024ad6:	4602      	mov	r2, r0
 8024ad8:	b928      	cbnz	r0, 8024ae6 <__mdiff+0x2e>
 8024ada:	4b3f      	ldr	r3, [pc, #252]	@ (8024bd8 <__mdiff+0x120>)
 8024adc:	f240 2137 	movw	r1, #567	@ 0x237
 8024ae0:	483e      	ldr	r0, [pc, #248]	@ (8024bdc <__mdiff+0x124>)
 8024ae2:	f7fd fb31 	bl	8022148 <__assert_func>
 8024ae6:	2301      	movs	r3, #1
 8024ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024aec:	4610      	mov	r0, r2
 8024aee:	b003      	add	sp, #12
 8024af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024af4:	bfbc      	itt	lt
 8024af6:	464b      	movlt	r3, r9
 8024af8:	46a1      	movlt	r9, r4
 8024afa:	4630      	mov	r0, r6
 8024afc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8024b00:	bfba      	itte	lt
 8024b02:	461c      	movlt	r4, r3
 8024b04:	2501      	movlt	r5, #1
 8024b06:	2500      	movge	r5, #0
 8024b08:	f7ff fcf6 	bl	80244f8 <_Balloc>
 8024b0c:	4602      	mov	r2, r0
 8024b0e:	b918      	cbnz	r0, 8024b18 <__mdiff+0x60>
 8024b10:	4b31      	ldr	r3, [pc, #196]	@ (8024bd8 <__mdiff+0x120>)
 8024b12:	f240 2145 	movw	r1, #581	@ 0x245
 8024b16:	e7e3      	b.n	8024ae0 <__mdiff+0x28>
 8024b18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8024b1c:	6926      	ldr	r6, [r4, #16]
 8024b1e:	60c5      	str	r5, [r0, #12]
 8024b20:	f109 0310 	add.w	r3, r9, #16
 8024b24:	f109 0514 	add.w	r5, r9, #20
 8024b28:	f104 0e14 	add.w	lr, r4, #20
 8024b2c:	f100 0b14 	add.w	fp, r0, #20
 8024b30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8024b34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8024b38:	9301      	str	r3, [sp, #4]
 8024b3a:	46d9      	mov	r9, fp
 8024b3c:	f04f 0c00 	mov.w	ip, #0
 8024b40:	9b01      	ldr	r3, [sp, #4]
 8024b42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8024b46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8024b4a:	9301      	str	r3, [sp, #4]
 8024b4c:	fa1f f38a 	uxth.w	r3, sl
 8024b50:	4619      	mov	r1, r3
 8024b52:	b283      	uxth	r3, r0
 8024b54:	1acb      	subs	r3, r1, r3
 8024b56:	0c00      	lsrs	r0, r0, #16
 8024b58:	4463      	add	r3, ip
 8024b5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8024b5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8024b62:	b29b      	uxth	r3, r3
 8024b64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8024b68:	4576      	cmp	r6, lr
 8024b6a:	f849 3b04 	str.w	r3, [r9], #4
 8024b6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024b72:	d8e5      	bhi.n	8024b40 <__mdiff+0x88>
 8024b74:	1b33      	subs	r3, r6, r4
 8024b76:	3b15      	subs	r3, #21
 8024b78:	f023 0303 	bic.w	r3, r3, #3
 8024b7c:	3415      	adds	r4, #21
 8024b7e:	3304      	adds	r3, #4
 8024b80:	42a6      	cmp	r6, r4
 8024b82:	bf38      	it	cc
 8024b84:	2304      	movcc	r3, #4
 8024b86:	441d      	add	r5, r3
 8024b88:	445b      	add	r3, fp
 8024b8a:	461e      	mov	r6, r3
 8024b8c:	462c      	mov	r4, r5
 8024b8e:	4544      	cmp	r4, r8
 8024b90:	d30e      	bcc.n	8024bb0 <__mdiff+0xf8>
 8024b92:	f108 0103 	add.w	r1, r8, #3
 8024b96:	1b49      	subs	r1, r1, r5
 8024b98:	f021 0103 	bic.w	r1, r1, #3
 8024b9c:	3d03      	subs	r5, #3
 8024b9e:	45a8      	cmp	r8, r5
 8024ba0:	bf38      	it	cc
 8024ba2:	2100      	movcc	r1, #0
 8024ba4:	440b      	add	r3, r1
 8024ba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024baa:	b191      	cbz	r1, 8024bd2 <__mdiff+0x11a>
 8024bac:	6117      	str	r7, [r2, #16]
 8024bae:	e79d      	b.n	8024aec <__mdiff+0x34>
 8024bb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8024bb4:	46e6      	mov	lr, ip
 8024bb6:	0c08      	lsrs	r0, r1, #16
 8024bb8:	fa1c fc81 	uxtah	ip, ip, r1
 8024bbc:	4471      	add	r1, lr
 8024bbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8024bc2:	b289      	uxth	r1, r1
 8024bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8024bc8:	f846 1b04 	str.w	r1, [r6], #4
 8024bcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024bd0:	e7dd      	b.n	8024b8e <__mdiff+0xd6>
 8024bd2:	3f01      	subs	r7, #1
 8024bd4:	e7e7      	b.n	8024ba6 <__mdiff+0xee>
 8024bd6:	bf00      	nop
 8024bd8:	08036c9e 	.word	0x08036c9e
 8024bdc:	08036caf 	.word	0x08036caf

08024be0 <__ulp>:
 8024be0:	b082      	sub	sp, #8
 8024be2:	ed8d 0b00 	vstr	d0, [sp]
 8024be6:	9a01      	ldr	r2, [sp, #4]
 8024be8:	4b0f      	ldr	r3, [pc, #60]	@ (8024c28 <__ulp+0x48>)
 8024bea:	4013      	ands	r3, r2
 8024bec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	dc08      	bgt.n	8024c06 <__ulp+0x26>
 8024bf4:	425b      	negs	r3, r3
 8024bf6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8024bfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8024bfe:	da04      	bge.n	8024c0a <__ulp+0x2a>
 8024c00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8024c04:	4113      	asrs	r3, r2
 8024c06:	2200      	movs	r2, #0
 8024c08:	e008      	b.n	8024c1c <__ulp+0x3c>
 8024c0a:	f1a2 0314 	sub.w	r3, r2, #20
 8024c0e:	2b1e      	cmp	r3, #30
 8024c10:	bfda      	itte	le
 8024c12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8024c16:	40da      	lsrle	r2, r3
 8024c18:	2201      	movgt	r2, #1
 8024c1a:	2300      	movs	r3, #0
 8024c1c:	4619      	mov	r1, r3
 8024c1e:	4610      	mov	r0, r2
 8024c20:	ec41 0b10 	vmov	d0, r0, r1
 8024c24:	b002      	add	sp, #8
 8024c26:	4770      	bx	lr
 8024c28:	7ff00000 	.word	0x7ff00000

08024c2c <__b2d>:
 8024c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c30:	6906      	ldr	r6, [r0, #16]
 8024c32:	f100 0814 	add.w	r8, r0, #20
 8024c36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8024c3a:	1f37      	subs	r7, r6, #4
 8024c3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8024c40:	4610      	mov	r0, r2
 8024c42:	f7ff fd4b 	bl	80246dc <__hi0bits>
 8024c46:	f1c0 0320 	rsb	r3, r0, #32
 8024c4a:	280a      	cmp	r0, #10
 8024c4c:	600b      	str	r3, [r1, #0]
 8024c4e:	491b      	ldr	r1, [pc, #108]	@ (8024cbc <__b2d+0x90>)
 8024c50:	dc15      	bgt.n	8024c7e <__b2d+0x52>
 8024c52:	f1c0 0c0b 	rsb	ip, r0, #11
 8024c56:	fa22 f30c 	lsr.w	r3, r2, ip
 8024c5a:	45b8      	cmp	r8, r7
 8024c5c:	ea43 0501 	orr.w	r5, r3, r1
 8024c60:	bf34      	ite	cc
 8024c62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8024c66:	2300      	movcs	r3, #0
 8024c68:	3015      	adds	r0, #21
 8024c6a:	fa02 f000 	lsl.w	r0, r2, r0
 8024c6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8024c72:	4303      	orrs	r3, r0
 8024c74:	461c      	mov	r4, r3
 8024c76:	ec45 4b10 	vmov	d0, r4, r5
 8024c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c7e:	45b8      	cmp	r8, r7
 8024c80:	bf3a      	itte	cc
 8024c82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8024c86:	f1a6 0708 	subcc.w	r7, r6, #8
 8024c8a:	2300      	movcs	r3, #0
 8024c8c:	380b      	subs	r0, #11
 8024c8e:	d012      	beq.n	8024cb6 <__b2d+0x8a>
 8024c90:	f1c0 0120 	rsb	r1, r0, #32
 8024c94:	fa23 f401 	lsr.w	r4, r3, r1
 8024c98:	4082      	lsls	r2, r0
 8024c9a:	4322      	orrs	r2, r4
 8024c9c:	4547      	cmp	r7, r8
 8024c9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8024ca2:	bf8c      	ite	hi
 8024ca4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8024ca8:	2200      	movls	r2, #0
 8024caa:	4083      	lsls	r3, r0
 8024cac:	40ca      	lsrs	r2, r1
 8024cae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8024cb2:	4313      	orrs	r3, r2
 8024cb4:	e7de      	b.n	8024c74 <__b2d+0x48>
 8024cb6:	ea42 0501 	orr.w	r5, r2, r1
 8024cba:	e7db      	b.n	8024c74 <__b2d+0x48>
 8024cbc:	3ff00000 	.word	0x3ff00000

08024cc0 <__d2b>:
 8024cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024cc4:	460f      	mov	r7, r1
 8024cc6:	2101      	movs	r1, #1
 8024cc8:	ec59 8b10 	vmov	r8, r9, d0
 8024ccc:	4616      	mov	r6, r2
 8024cce:	f7ff fc13 	bl	80244f8 <_Balloc>
 8024cd2:	4604      	mov	r4, r0
 8024cd4:	b930      	cbnz	r0, 8024ce4 <__d2b+0x24>
 8024cd6:	4602      	mov	r2, r0
 8024cd8:	4b23      	ldr	r3, [pc, #140]	@ (8024d68 <__d2b+0xa8>)
 8024cda:	4824      	ldr	r0, [pc, #144]	@ (8024d6c <__d2b+0xac>)
 8024cdc:	f240 310f 	movw	r1, #783	@ 0x30f
 8024ce0:	f7fd fa32 	bl	8022148 <__assert_func>
 8024ce4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024cec:	b10d      	cbz	r5, 8024cf2 <__d2b+0x32>
 8024cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024cf2:	9301      	str	r3, [sp, #4]
 8024cf4:	f1b8 0300 	subs.w	r3, r8, #0
 8024cf8:	d023      	beq.n	8024d42 <__d2b+0x82>
 8024cfa:	4668      	mov	r0, sp
 8024cfc:	9300      	str	r3, [sp, #0]
 8024cfe:	f7ff fd0c 	bl	802471a <__lo0bits>
 8024d02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8024d06:	b1d0      	cbz	r0, 8024d3e <__d2b+0x7e>
 8024d08:	f1c0 0320 	rsb	r3, r0, #32
 8024d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8024d10:	430b      	orrs	r3, r1
 8024d12:	40c2      	lsrs	r2, r0
 8024d14:	6163      	str	r3, [r4, #20]
 8024d16:	9201      	str	r2, [sp, #4]
 8024d18:	9b01      	ldr	r3, [sp, #4]
 8024d1a:	61a3      	str	r3, [r4, #24]
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	bf0c      	ite	eq
 8024d20:	2201      	moveq	r2, #1
 8024d22:	2202      	movne	r2, #2
 8024d24:	6122      	str	r2, [r4, #16]
 8024d26:	b1a5      	cbz	r5, 8024d52 <__d2b+0x92>
 8024d28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8024d2c:	4405      	add	r5, r0
 8024d2e:	603d      	str	r5, [r7, #0]
 8024d30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8024d34:	6030      	str	r0, [r6, #0]
 8024d36:	4620      	mov	r0, r4
 8024d38:	b003      	add	sp, #12
 8024d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024d3e:	6161      	str	r1, [r4, #20]
 8024d40:	e7ea      	b.n	8024d18 <__d2b+0x58>
 8024d42:	a801      	add	r0, sp, #4
 8024d44:	f7ff fce9 	bl	802471a <__lo0bits>
 8024d48:	9b01      	ldr	r3, [sp, #4]
 8024d4a:	6163      	str	r3, [r4, #20]
 8024d4c:	3020      	adds	r0, #32
 8024d4e:	2201      	movs	r2, #1
 8024d50:	e7e8      	b.n	8024d24 <__d2b+0x64>
 8024d52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024d56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8024d5a:	6038      	str	r0, [r7, #0]
 8024d5c:	6918      	ldr	r0, [r3, #16]
 8024d5e:	f7ff fcbd 	bl	80246dc <__hi0bits>
 8024d62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024d66:	e7e5      	b.n	8024d34 <__d2b+0x74>
 8024d68:	08036c9e 	.word	0x08036c9e
 8024d6c:	08036caf 	.word	0x08036caf

08024d70 <__ratio>:
 8024d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d74:	4688      	mov	r8, r1
 8024d76:	4669      	mov	r1, sp
 8024d78:	4681      	mov	r9, r0
 8024d7a:	f7ff ff57 	bl	8024c2c <__b2d>
 8024d7e:	a901      	add	r1, sp, #4
 8024d80:	4640      	mov	r0, r8
 8024d82:	ec55 4b10 	vmov	r4, r5, d0
 8024d86:	f7ff ff51 	bl	8024c2c <__b2d>
 8024d8a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8024d8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8024d92:	1ad2      	subs	r2, r2, r3
 8024d94:	e9dd 3100 	ldrd	r3, r1, [sp]
 8024d98:	1a5b      	subs	r3, r3, r1
 8024d9a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8024d9e:	ec57 6b10 	vmov	r6, r7, d0
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	bfd6      	itet	le
 8024da6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8024daa:	462a      	movgt	r2, r5
 8024dac:	463a      	movle	r2, r7
 8024dae:	46ab      	mov	fp, r5
 8024db0:	46a2      	mov	sl, r4
 8024db2:	bfce      	itee	gt
 8024db4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8024db8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8024dbc:	ee00 3a90 	vmovle	s1, r3
 8024dc0:	ec4b ab17 	vmov	d7, sl, fp
 8024dc4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8024dc8:	b003      	add	sp, #12
 8024dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024dce <__copybits>:
 8024dce:	3901      	subs	r1, #1
 8024dd0:	b570      	push	{r4, r5, r6, lr}
 8024dd2:	1149      	asrs	r1, r1, #5
 8024dd4:	6914      	ldr	r4, [r2, #16]
 8024dd6:	3101      	adds	r1, #1
 8024dd8:	f102 0314 	add.w	r3, r2, #20
 8024ddc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8024de0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024de4:	1f05      	subs	r5, r0, #4
 8024de6:	42a3      	cmp	r3, r4
 8024de8:	d30c      	bcc.n	8024e04 <__copybits+0x36>
 8024dea:	1aa3      	subs	r3, r4, r2
 8024dec:	3b11      	subs	r3, #17
 8024dee:	f023 0303 	bic.w	r3, r3, #3
 8024df2:	3211      	adds	r2, #17
 8024df4:	42a2      	cmp	r2, r4
 8024df6:	bf88      	it	hi
 8024df8:	2300      	movhi	r3, #0
 8024dfa:	4418      	add	r0, r3
 8024dfc:	2300      	movs	r3, #0
 8024dfe:	4288      	cmp	r0, r1
 8024e00:	d305      	bcc.n	8024e0e <__copybits+0x40>
 8024e02:	bd70      	pop	{r4, r5, r6, pc}
 8024e04:	f853 6b04 	ldr.w	r6, [r3], #4
 8024e08:	f845 6f04 	str.w	r6, [r5, #4]!
 8024e0c:	e7eb      	b.n	8024de6 <__copybits+0x18>
 8024e0e:	f840 3b04 	str.w	r3, [r0], #4
 8024e12:	e7f4      	b.n	8024dfe <__copybits+0x30>

08024e14 <__any_on>:
 8024e14:	f100 0214 	add.w	r2, r0, #20
 8024e18:	6900      	ldr	r0, [r0, #16]
 8024e1a:	114b      	asrs	r3, r1, #5
 8024e1c:	4298      	cmp	r0, r3
 8024e1e:	b510      	push	{r4, lr}
 8024e20:	db11      	blt.n	8024e46 <__any_on+0x32>
 8024e22:	dd0a      	ble.n	8024e3a <__any_on+0x26>
 8024e24:	f011 011f 	ands.w	r1, r1, #31
 8024e28:	d007      	beq.n	8024e3a <__any_on+0x26>
 8024e2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8024e2e:	fa24 f001 	lsr.w	r0, r4, r1
 8024e32:	fa00 f101 	lsl.w	r1, r0, r1
 8024e36:	428c      	cmp	r4, r1
 8024e38:	d10b      	bne.n	8024e52 <__any_on+0x3e>
 8024e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024e3e:	4293      	cmp	r3, r2
 8024e40:	d803      	bhi.n	8024e4a <__any_on+0x36>
 8024e42:	2000      	movs	r0, #0
 8024e44:	bd10      	pop	{r4, pc}
 8024e46:	4603      	mov	r3, r0
 8024e48:	e7f7      	b.n	8024e3a <__any_on+0x26>
 8024e4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024e4e:	2900      	cmp	r1, #0
 8024e50:	d0f5      	beq.n	8024e3e <__any_on+0x2a>
 8024e52:	2001      	movs	r0, #1
 8024e54:	e7f6      	b.n	8024e44 <__any_on+0x30>

08024e56 <sulp>:
 8024e56:	b570      	push	{r4, r5, r6, lr}
 8024e58:	4604      	mov	r4, r0
 8024e5a:	460d      	mov	r5, r1
 8024e5c:	4616      	mov	r6, r2
 8024e5e:	ec45 4b10 	vmov	d0, r4, r5
 8024e62:	f7ff febd 	bl	8024be0 <__ulp>
 8024e66:	b17e      	cbz	r6, 8024e88 <sulp+0x32>
 8024e68:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8024e6c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8024e70:	2b00      	cmp	r3, #0
 8024e72:	dd09      	ble.n	8024e88 <sulp+0x32>
 8024e74:	051b      	lsls	r3, r3, #20
 8024e76:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8024e7a:	2000      	movs	r0, #0
 8024e7c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8024e80:	ec41 0b17 	vmov	d7, r0, r1
 8024e84:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024e88:	bd70      	pop	{r4, r5, r6, pc}
 8024e8a:	0000      	movs	r0, r0
 8024e8c:	0000      	movs	r0, r0
	...

08024e90 <_strtod_l>:
 8024e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e94:	ed2d 8b0a 	vpush	{d8-d12}
 8024e98:	b097      	sub	sp, #92	@ 0x5c
 8024e9a:	4688      	mov	r8, r1
 8024e9c:	920e      	str	r2, [sp, #56]	@ 0x38
 8024e9e:	2200      	movs	r2, #0
 8024ea0:	9212      	str	r2, [sp, #72]	@ 0x48
 8024ea2:	9005      	str	r0, [sp, #20]
 8024ea4:	f04f 0a00 	mov.w	sl, #0
 8024ea8:	f04f 0b00 	mov.w	fp, #0
 8024eac:	460a      	mov	r2, r1
 8024eae:	9211      	str	r2, [sp, #68]	@ 0x44
 8024eb0:	7811      	ldrb	r1, [r2, #0]
 8024eb2:	292b      	cmp	r1, #43	@ 0x2b
 8024eb4:	d04c      	beq.n	8024f50 <_strtod_l+0xc0>
 8024eb6:	d839      	bhi.n	8024f2c <_strtod_l+0x9c>
 8024eb8:	290d      	cmp	r1, #13
 8024eba:	d833      	bhi.n	8024f24 <_strtod_l+0x94>
 8024ebc:	2908      	cmp	r1, #8
 8024ebe:	d833      	bhi.n	8024f28 <_strtod_l+0x98>
 8024ec0:	2900      	cmp	r1, #0
 8024ec2:	d03c      	beq.n	8024f3e <_strtod_l+0xae>
 8024ec4:	2200      	movs	r2, #0
 8024ec6:	9208      	str	r2, [sp, #32]
 8024ec8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024eca:	782a      	ldrb	r2, [r5, #0]
 8024ecc:	2a30      	cmp	r2, #48	@ 0x30
 8024ece:	f040 80b5 	bne.w	802503c <_strtod_l+0x1ac>
 8024ed2:	786a      	ldrb	r2, [r5, #1]
 8024ed4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8024ed8:	2a58      	cmp	r2, #88	@ 0x58
 8024eda:	d170      	bne.n	8024fbe <_strtod_l+0x12e>
 8024edc:	9302      	str	r3, [sp, #8]
 8024ede:	9b08      	ldr	r3, [sp, #32]
 8024ee0:	9301      	str	r3, [sp, #4]
 8024ee2:	ab12      	add	r3, sp, #72	@ 0x48
 8024ee4:	9300      	str	r3, [sp, #0]
 8024ee6:	4a8b      	ldr	r2, [pc, #556]	@ (8025114 <_strtod_l+0x284>)
 8024ee8:	9805      	ldr	r0, [sp, #20]
 8024eea:	ab13      	add	r3, sp, #76	@ 0x4c
 8024eec:	a911      	add	r1, sp, #68	@ 0x44
 8024eee:	f001 fa1f 	bl	8026330 <__gethex>
 8024ef2:	f010 060f 	ands.w	r6, r0, #15
 8024ef6:	4604      	mov	r4, r0
 8024ef8:	d005      	beq.n	8024f06 <_strtod_l+0x76>
 8024efa:	2e06      	cmp	r6, #6
 8024efc:	d12a      	bne.n	8024f54 <_strtod_l+0xc4>
 8024efe:	3501      	adds	r5, #1
 8024f00:	2300      	movs	r3, #0
 8024f02:	9511      	str	r5, [sp, #68]	@ 0x44
 8024f04:	9308      	str	r3, [sp, #32]
 8024f06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f08:	2b00      	cmp	r3, #0
 8024f0a:	f040 852f 	bne.w	802596c <_strtod_l+0xadc>
 8024f0e:	9b08      	ldr	r3, [sp, #32]
 8024f10:	ec4b ab10 	vmov	d0, sl, fp
 8024f14:	b1cb      	cbz	r3, 8024f4a <_strtod_l+0xba>
 8024f16:	eeb1 0b40 	vneg.f64	d0, d0
 8024f1a:	b017      	add	sp, #92	@ 0x5c
 8024f1c:	ecbd 8b0a 	vpop	{d8-d12}
 8024f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f24:	2920      	cmp	r1, #32
 8024f26:	d1cd      	bne.n	8024ec4 <_strtod_l+0x34>
 8024f28:	3201      	adds	r2, #1
 8024f2a:	e7c0      	b.n	8024eae <_strtod_l+0x1e>
 8024f2c:	292d      	cmp	r1, #45	@ 0x2d
 8024f2e:	d1c9      	bne.n	8024ec4 <_strtod_l+0x34>
 8024f30:	2101      	movs	r1, #1
 8024f32:	9108      	str	r1, [sp, #32]
 8024f34:	1c51      	adds	r1, r2, #1
 8024f36:	9111      	str	r1, [sp, #68]	@ 0x44
 8024f38:	7852      	ldrb	r2, [r2, #1]
 8024f3a:	2a00      	cmp	r2, #0
 8024f3c:	d1c4      	bne.n	8024ec8 <_strtod_l+0x38>
 8024f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f40:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8024f44:	2b00      	cmp	r3, #0
 8024f46:	f040 850f 	bne.w	8025968 <_strtod_l+0xad8>
 8024f4a:	ec4b ab10 	vmov	d0, sl, fp
 8024f4e:	e7e4      	b.n	8024f1a <_strtod_l+0x8a>
 8024f50:	2100      	movs	r1, #0
 8024f52:	e7ee      	b.n	8024f32 <_strtod_l+0xa2>
 8024f54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024f56:	b13a      	cbz	r2, 8024f68 <_strtod_l+0xd8>
 8024f58:	2135      	movs	r1, #53	@ 0x35
 8024f5a:	a814      	add	r0, sp, #80	@ 0x50
 8024f5c:	f7ff ff37 	bl	8024dce <__copybits>
 8024f60:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024f62:	9805      	ldr	r0, [sp, #20]
 8024f64:	f7ff fb08 	bl	8024578 <_Bfree>
 8024f68:	1e73      	subs	r3, r6, #1
 8024f6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024f6c:	2b04      	cmp	r3, #4
 8024f6e:	d806      	bhi.n	8024f7e <_strtod_l+0xee>
 8024f70:	e8df f003 	tbb	[pc, r3]
 8024f74:	201d0314 	.word	0x201d0314
 8024f78:	14          	.byte	0x14
 8024f79:	00          	.byte	0x00
 8024f7a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8024f7e:	05e3      	lsls	r3, r4, #23
 8024f80:	bf48      	it	mi
 8024f82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8024f86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8024f8a:	0d1b      	lsrs	r3, r3, #20
 8024f8c:	051b      	lsls	r3, r3, #20
 8024f8e:	2b00      	cmp	r3, #0
 8024f90:	d1b9      	bne.n	8024f06 <_strtod_l+0x76>
 8024f92:	f7fe fc37 	bl	8023804 <__errno>
 8024f96:	2322      	movs	r3, #34	@ 0x22
 8024f98:	6003      	str	r3, [r0, #0]
 8024f9a:	e7b4      	b.n	8024f06 <_strtod_l+0x76>
 8024f9c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8024fa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8024fa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8024fa8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8024fac:	e7e7      	b.n	8024f7e <_strtod_l+0xee>
 8024fae:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 802511c <_strtod_l+0x28c>
 8024fb2:	e7e4      	b.n	8024f7e <_strtod_l+0xee>
 8024fb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8024fb8:	f04f 3aff 	mov.w	sl, #4294967295
 8024fbc:	e7df      	b.n	8024f7e <_strtod_l+0xee>
 8024fbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024fc0:	1c5a      	adds	r2, r3, #1
 8024fc2:	9211      	str	r2, [sp, #68]	@ 0x44
 8024fc4:	785b      	ldrb	r3, [r3, #1]
 8024fc6:	2b30      	cmp	r3, #48	@ 0x30
 8024fc8:	d0f9      	beq.n	8024fbe <_strtod_l+0x12e>
 8024fca:	2b00      	cmp	r3, #0
 8024fcc:	d09b      	beq.n	8024f06 <_strtod_l+0x76>
 8024fce:	2301      	movs	r3, #1
 8024fd0:	2600      	movs	r6, #0
 8024fd2:	9307      	str	r3, [sp, #28]
 8024fd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8024fd8:	46b1      	mov	r9, r6
 8024fda:	4635      	mov	r5, r6
 8024fdc:	220a      	movs	r2, #10
 8024fde:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024fe0:	7804      	ldrb	r4, [r0, #0]
 8024fe2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8024fe6:	b2d9      	uxtb	r1, r3
 8024fe8:	2909      	cmp	r1, #9
 8024fea:	d929      	bls.n	8025040 <_strtod_l+0x1b0>
 8024fec:	494a      	ldr	r1, [pc, #296]	@ (8025118 <_strtod_l+0x288>)
 8024fee:	2201      	movs	r2, #1
 8024ff0:	f7fe fb5d 	bl	80236ae <strncmp>
 8024ff4:	b378      	cbz	r0, 8025056 <_strtod_l+0x1c6>
 8024ff6:	2000      	movs	r0, #0
 8024ff8:	4622      	mov	r2, r4
 8024ffa:	462b      	mov	r3, r5
 8024ffc:	4607      	mov	r7, r0
 8024ffe:	9006      	str	r0, [sp, #24]
 8025000:	2a65      	cmp	r2, #101	@ 0x65
 8025002:	d001      	beq.n	8025008 <_strtod_l+0x178>
 8025004:	2a45      	cmp	r2, #69	@ 0x45
 8025006:	d117      	bne.n	8025038 <_strtod_l+0x1a8>
 8025008:	b91b      	cbnz	r3, 8025012 <_strtod_l+0x182>
 802500a:	9b07      	ldr	r3, [sp, #28]
 802500c:	4303      	orrs	r3, r0
 802500e:	d096      	beq.n	8024f3e <_strtod_l+0xae>
 8025010:	2300      	movs	r3, #0
 8025012:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8025016:	f108 0201 	add.w	r2, r8, #1
 802501a:	9211      	str	r2, [sp, #68]	@ 0x44
 802501c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025020:	2a2b      	cmp	r2, #43	@ 0x2b
 8025022:	d06b      	beq.n	80250fc <_strtod_l+0x26c>
 8025024:	2a2d      	cmp	r2, #45	@ 0x2d
 8025026:	d071      	beq.n	802510c <_strtod_l+0x27c>
 8025028:	f04f 0e00 	mov.w	lr, #0
 802502c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8025030:	2c09      	cmp	r4, #9
 8025032:	d979      	bls.n	8025128 <_strtod_l+0x298>
 8025034:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8025038:	2400      	movs	r4, #0
 802503a:	e094      	b.n	8025166 <_strtod_l+0x2d6>
 802503c:	2300      	movs	r3, #0
 802503e:	e7c7      	b.n	8024fd0 <_strtod_l+0x140>
 8025040:	2d08      	cmp	r5, #8
 8025042:	f100 0001 	add.w	r0, r0, #1
 8025046:	bfd4      	ite	le
 8025048:	fb02 3909 	mlale	r9, r2, r9, r3
 802504c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8025050:	3501      	adds	r5, #1
 8025052:	9011      	str	r0, [sp, #68]	@ 0x44
 8025054:	e7c3      	b.n	8024fde <_strtod_l+0x14e>
 8025056:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025058:	1c5a      	adds	r2, r3, #1
 802505a:	9211      	str	r2, [sp, #68]	@ 0x44
 802505c:	785a      	ldrb	r2, [r3, #1]
 802505e:	b375      	cbz	r5, 80250be <_strtod_l+0x22e>
 8025060:	4607      	mov	r7, r0
 8025062:	462b      	mov	r3, r5
 8025064:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8025068:	2909      	cmp	r1, #9
 802506a:	d913      	bls.n	8025094 <_strtod_l+0x204>
 802506c:	2101      	movs	r1, #1
 802506e:	9106      	str	r1, [sp, #24]
 8025070:	e7c6      	b.n	8025000 <_strtod_l+0x170>
 8025072:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025074:	1c5a      	adds	r2, r3, #1
 8025076:	9211      	str	r2, [sp, #68]	@ 0x44
 8025078:	785a      	ldrb	r2, [r3, #1]
 802507a:	3001      	adds	r0, #1
 802507c:	2a30      	cmp	r2, #48	@ 0x30
 802507e:	d0f8      	beq.n	8025072 <_strtod_l+0x1e2>
 8025080:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8025084:	2b08      	cmp	r3, #8
 8025086:	f200 8476 	bhi.w	8025976 <_strtod_l+0xae6>
 802508a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802508c:	930a      	str	r3, [sp, #40]	@ 0x28
 802508e:	4607      	mov	r7, r0
 8025090:	2000      	movs	r0, #0
 8025092:	4603      	mov	r3, r0
 8025094:	3a30      	subs	r2, #48	@ 0x30
 8025096:	f100 0101 	add.w	r1, r0, #1
 802509a:	d023      	beq.n	80250e4 <_strtod_l+0x254>
 802509c:	440f      	add	r7, r1
 802509e:	eb00 0c03 	add.w	ip, r0, r3
 80250a2:	4619      	mov	r1, r3
 80250a4:	240a      	movs	r4, #10
 80250a6:	4561      	cmp	r1, ip
 80250a8:	d10b      	bne.n	80250c2 <_strtod_l+0x232>
 80250aa:	1c5c      	adds	r4, r3, #1
 80250ac:	4403      	add	r3, r0
 80250ae:	2b08      	cmp	r3, #8
 80250b0:	4404      	add	r4, r0
 80250b2:	dc11      	bgt.n	80250d8 <_strtod_l+0x248>
 80250b4:	230a      	movs	r3, #10
 80250b6:	fb03 2909 	mla	r9, r3, r9, r2
 80250ba:	2100      	movs	r1, #0
 80250bc:	e013      	b.n	80250e6 <_strtod_l+0x256>
 80250be:	4628      	mov	r0, r5
 80250c0:	e7dc      	b.n	802507c <_strtod_l+0x1ec>
 80250c2:	2908      	cmp	r1, #8
 80250c4:	f101 0101 	add.w	r1, r1, #1
 80250c8:	dc02      	bgt.n	80250d0 <_strtod_l+0x240>
 80250ca:	fb04 f909 	mul.w	r9, r4, r9
 80250ce:	e7ea      	b.n	80250a6 <_strtod_l+0x216>
 80250d0:	2910      	cmp	r1, #16
 80250d2:	bfd8      	it	le
 80250d4:	4366      	mulle	r6, r4
 80250d6:	e7e6      	b.n	80250a6 <_strtod_l+0x216>
 80250d8:	2b0f      	cmp	r3, #15
 80250da:	dcee      	bgt.n	80250ba <_strtod_l+0x22a>
 80250dc:	230a      	movs	r3, #10
 80250de:	fb03 2606 	mla	r6, r3, r6, r2
 80250e2:	e7ea      	b.n	80250ba <_strtod_l+0x22a>
 80250e4:	461c      	mov	r4, r3
 80250e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80250e8:	1c5a      	adds	r2, r3, #1
 80250ea:	9211      	str	r2, [sp, #68]	@ 0x44
 80250ec:	785a      	ldrb	r2, [r3, #1]
 80250ee:	4608      	mov	r0, r1
 80250f0:	4623      	mov	r3, r4
 80250f2:	e7b7      	b.n	8025064 <_strtod_l+0x1d4>
 80250f4:	2301      	movs	r3, #1
 80250f6:	2700      	movs	r7, #0
 80250f8:	9306      	str	r3, [sp, #24]
 80250fa:	e786      	b.n	802500a <_strtod_l+0x17a>
 80250fc:	f04f 0e00 	mov.w	lr, #0
 8025100:	f108 0202 	add.w	r2, r8, #2
 8025104:	9211      	str	r2, [sp, #68]	@ 0x44
 8025106:	f898 2002 	ldrb.w	r2, [r8, #2]
 802510a:	e78f      	b.n	802502c <_strtod_l+0x19c>
 802510c:	f04f 0e01 	mov.w	lr, #1
 8025110:	e7f6      	b.n	8025100 <_strtod_l+0x270>
 8025112:	bf00      	nop
 8025114:	08036e20 	.word	0x08036e20
 8025118:	08036e08 	.word	0x08036e08
 802511c:	7ff00000 	.word	0x7ff00000
 8025120:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025122:	1c54      	adds	r4, r2, #1
 8025124:	9411      	str	r4, [sp, #68]	@ 0x44
 8025126:	7852      	ldrb	r2, [r2, #1]
 8025128:	2a30      	cmp	r2, #48	@ 0x30
 802512a:	d0f9      	beq.n	8025120 <_strtod_l+0x290>
 802512c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8025130:	2c08      	cmp	r4, #8
 8025132:	d881      	bhi.n	8025038 <_strtod_l+0x1a8>
 8025134:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8025138:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802513a:	9209      	str	r2, [sp, #36]	@ 0x24
 802513c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802513e:	1c51      	adds	r1, r2, #1
 8025140:	9111      	str	r1, [sp, #68]	@ 0x44
 8025142:	7852      	ldrb	r2, [r2, #1]
 8025144:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8025148:	2c09      	cmp	r4, #9
 802514a:	d938      	bls.n	80251be <_strtod_l+0x32e>
 802514c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802514e:	1b0c      	subs	r4, r1, r4
 8025150:	2c08      	cmp	r4, #8
 8025152:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8025156:	dc02      	bgt.n	802515e <_strtod_l+0x2ce>
 8025158:	4564      	cmp	r4, ip
 802515a:	bfa8      	it	ge
 802515c:	4664      	movge	r4, ip
 802515e:	f1be 0f00 	cmp.w	lr, #0
 8025162:	d000      	beq.n	8025166 <_strtod_l+0x2d6>
 8025164:	4264      	negs	r4, r4
 8025166:	2b00      	cmp	r3, #0
 8025168:	d14e      	bne.n	8025208 <_strtod_l+0x378>
 802516a:	9b07      	ldr	r3, [sp, #28]
 802516c:	4318      	orrs	r0, r3
 802516e:	f47f aeca 	bne.w	8024f06 <_strtod_l+0x76>
 8025172:	9b06      	ldr	r3, [sp, #24]
 8025174:	2b00      	cmp	r3, #0
 8025176:	f47f aee2 	bne.w	8024f3e <_strtod_l+0xae>
 802517a:	2a69      	cmp	r2, #105	@ 0x69
 802517c:	d027      	beq.n	80251ce <_strtod_l+0x33e>
 802517e:	dc24      	bgt.n	80251ca <_strtod_l+0x33a>
 8025180:	2a49      	cmp	r2, #73	@ 0x49
 8025182:	d024      	beq.n	80251ce <_strtod_l+0x33e>
 8025184:	2a4e      	cmp	r2, #78	@ 0x4e
 8025186:	f47f aeda 	bne.w	8024f3e <_strtod_l+0xae>
 802518a:	4997      	ldr	r1, [pc, #604]	@ (80253e8 <_strtod_l+0x558>)
 802518c:	a811      	add	r0, sp, #68	@ 0x44
 802518e:	f001 faf1 	bl	8026774 <__match>
 8025192:	2800      	cmp	r0, #0
 8025194:	f43f aed3 	beq.w	8024f3e <_strtod_l+0xae>
 8025198:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802519a:	781b      	ldrb	r3, [r3, #0]
 802519c:	2b28      	cmp	r3, #40	@ 0x28
 802519e:	d12d      	bne.n	80251fc <_strtod_l+0x36c>
 80251a0:	4992      	ldr	r1, [pc, #584]	@ (80253ec <_strtod_l+0x55c>)
 80251a2:	aa14      	add	r2, sp, #80	@ 0x50
 80251a4:	a811      	add	r0, sp, #68	@ 0x44
 80251a6:	f001 faf9 	bl	802679c <__hexnan>
 80251aa:	2805      	cmp	r0, #5
 80251ac:	d126      	bne.n	80251fc <_strtod_l+0x36c>
 80251ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80251b0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80251b4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80251b8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80251bc:	e6a3      	b.n	8024f06 <_strtod_l+0x76>
 80251be:	240a      	movs	r4, #10
 80251c0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80251c4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80251c8:	e7b8      	b.n	802513c <_strtod_l+0x2ac>
 80251ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80251cc:	e7db      	b.n	8025186 <_strtod_l+0x2f6>
 80251ce:	4988      	ldr	r1, [pc, #544]	@ (80253f0 <_strtod_l+0x560>)
 80251d0:	a811      	add	r0, sp, #68	@ 0x44
 80251d2:	f001 facf 	bl	8026774 <__match>
 80251d6:	2800      	cmp	r0, #0
 80251d8:	f43f aeb1 	beq.w	8024f3e <_strtod_l+0xae>
 80251dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80251de:	4985      	ldr	r1, [pc, #532]	@ (80253f4 <_strtod_l+0x564>)
 80251e0:	3b01      	subs	r3, #1
 80251e2:	a811      	add	r0, sp, #68	@ 0x44
 80251e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80251e6:	f001 fac5 	bl	8026774 <__match>
 80251ea:	b910      	cbnz	r0, 80251f2 <_strtod_l+0x362>
 80251ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80251ee:	3301      	adds	r3, #1
 80251f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80251f2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8025408 <_strtod_l+0x578>
 80251f6:	f04f 0a00 	mov.w	sl, #0
 80251fa:	e684      	b.n	8024f06 <_strtod_l+0x76>
 80251fc:	487e      	ldr	r0, [pc, #504]	@ (80253f8 <_strtod_l+0x568>)
 80251fe:	f001 f827 	bl	8026250 <nan>
 8025202:	ec5b ab10 	vmov	sl, fp, d0
 8025206:	e67e      	b.n	8024f06 <_strtod_l+0x76>
 8025208:	ee07 9a90 	vmov	s15, r9
 802520c:	1be2      	subs	r2, r4, r7
 802520e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025212:	2d00      	cmp	r5, #0
 8025214:	bf08      	it	eq
 8025216:	461d      	moveq	r5, r3
 8025218:	2b10      	cmp	r3, #16
 802521a:	9209      	str	r2, [sp, #36]	@ 0x24
 802521c:	461a      	mov	r2, r3
 802521e:	bfa8      	it	ge
 8025220:	2210      	movge	r2, #16
 8025222:	2b09      	cmp	r3, #9
 8025224:	ec5b ab17 	vmov	sl, fp, d7
 8025228:	dc15      	bgt.n	8025256 <_strtod_l+0x3c6>
 802522a:	1be1      	subs	r1, r4, r7
 802522c:	2900      	cmp	r1, #0
 802522e:	f43f ae6a 	beq.w	8024f06 <_strtod_l+0x76>
 8025232:	eba4 0107 	sub.w	r1, r4, r7
 8025236:	dd72      	ble.n	802531e <_strtod_l+0x48e>
 8025238:	2916      	cmp	r1, #22
 802523a:	dc59      	bgt.n	80252f0 <_strtod_l+0x460>
 802523c:	4b6f      	ldr	r3, [pc, #444]	@ (80253fc <_strtod_l+0x56c>)
 802523e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025244:	ed93 7b00 	vldr	d7, [r3]
 8025248:	ec4b ab16 	vmov	d6, sl, fp
 802524c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025250:	ec5b ab17 	vmov	sl, fp, d7
 8025254:	e657      	b.n	8024f06 <_strtod_l+0x76>
 8025256:	4969      	ldr	r1, [pc, #420]	@ (80253fc <_strtod_l+0x56c>)
 8025258:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802525c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8025260:	ee06 6a90 	vmov	s13, r6
 8025264:	2b0f      	cmp	r3, #15
 8025266:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802526a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802526e:	ec5b ab16 	vmov	sl, fp, d6
 8025272:	ddda      	ble.n	802522a <_strtod_l+0x39a>
 8025274:	1a9a      	subs	r2, r3, r2
 8025276:	1be1      	subs	r1, r4, r7
 8025278:	440a      	add	r2, r1
 802527a:	2a00      	cmp	r2, #0
 802527c:	f340 8094 	ble.w	80253a8 <_strtod_l+0x518>
 8025280:	f012 000f 	ands.w	r0, r2, #15
 8025284:	d00a      	beq.n	802529c <_strtod_l+0x40c>
 8025286:	495d      	ldr	r1, [pc, #372]	@ (80253fc <_strtod_l+0x56c>)
 8025288:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802528c:	ed91 7b00 	vldr	d7, [r1]
 8025290:	ec4b ab16 	vmov	d6, sl, fp
 8025294:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025298:	ec5b ab17 	vmov	sl, fp, d7
 802529c:	f032 020f 	bics.w	r2, r2, #15
 80252a0:	d073      	beq.n	802538a <_strtod_l+0x4fa>
 80252a2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80252a6:	dd47      	ble.n	8025338 <_strtod_l+0x4a8>
 80252a8:	2400      	movs	r4, #0
 80252aa:	4625      	mov	r5, r4
 80252ac:	9407      	str	r4, [sp, #28]
 80252ae:	4626      	mov	r6, r4
 80252b0:	9a05      	ldr	r2, [sp, #20]
 80252b2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8025408 <_strtod_l+0x578>
 80252b6:	2322      	movs	r3, #34	@ 0x22
 80252b8:	6013      	str	r3, [r2, #0]
 80252ba:	f04f 0a00 	mov.w	sl, #0
 80252be:	9b07      	ldr	r3, [sp, #28]
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	f43f ae20 	beq.w	8024f06 <_strtod_l+0x76>
 80252c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80252c8:	9805      	ldr	r0, [sp, #20]
 80252ca:	f7ff f955 	bl	8024578 <_Bfree>
 80252ce:	9805      	ldr	r0, [sp, #20]
 80252d0:	4631      	mov	r1, r6
 80252d2:	f7ff f951 	bl	8024578 <_Bfree>
 80252d6:	9805      	ldr	r0, [sp, #20]
 80252d8:	4629      	mov	r1, r5
 80252da:	f7ff f94d 	bl	8024578 <_Bfree>
 80252de:	9907      	ldr	r1, [sp, #28]
 80252e0:	9805      	ldr	r0, [sp, #20]
 80252e2:	f7ff f949 	bl	8024578 <_Bfree>
 80252e6:	9805      	ldr	r0, [sp, #20]
 80252e8:	4621      	mov	r1, r4
 80252ea:	f7ff f945 	bl	8024578 <_Bfree>
 80252ee:	e60a      	b.n	8024f06 <_strtod_l+0x76>
 80252f0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80252f4:	1be0      	subs	r0, r4, r7
 80252f6:	4281      	cmp	r1, r0
 80252f8:	dbbc      	blt.n	8025274 <_strtod_l+0x3e4>
 80252fa:	4a40      	ldr	r2, [pc, #256]	@ (80253fc <_strtod_l+0x56c>)
 80252fc:	f1c3 030f 	rsb	r3, r3, #15
 8025300:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8025304:	ed91 7b00 	vldr	d7, [r1]
 8025308:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802530a:	ec4b ab16 	vmov	d6, sl, fp
 802530e:	1acb      	subs	r3, r1, r3
 8025310:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8025314:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025318:	ed92 6b00 	vldr	d6, [r2]
 802531c:	e796      	b.n	802524c <_strtod_l+0x3bc>
 802531e:	3116      	adds	r1, #22
 8025320:	dba8      	blt.n	8025274 <_strtod_l+0x3e4>
 8025322:	4b36      	ldr	r3, [pc, #216]	@ (80253fc <_strtod_l+0x56c>)
 8025324:	1b3c      	subs	r4, r7, r4
 8025326:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802532a:	ed94 7b00 	vldr	d7, [r4]
 802532e:	ec4b ab16 	vmov	d6, sl, fp
 8025332:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025336:	e78b      	b.n	8025250 <_strtod_l+0x3c0>
 8025338:	2000      	movs	r0, #0
 802533a:	ec4b ab17 	vmov	d7, sl, fp
 802533e:	4e30      	ldr	r6, [pc, #192]	@ (8025400 <_strtod_l+0x570>)
 8025340:	1112      	asrs	r2, r2, #4
 8025342:	4601      	mov	r1, r0
 8025344:	2a01      	cmp	r2, #1
 8025346:	dc23      	bgt.n	8025390 <_strtod_l+0x500>
 8025348:	b108      	cbz	r0, 802534e <_strtod_l+0x4be>
 802534a:	ec5b ab17 	vmov	sl, fp, d7
 802534e:	4a2c      	ldr	r2, [pc, #176]	@ (8025400 <_strtod_l+0x570>)
 8025350:	482c      	ldr	r0, [pc, #176]	@ (8025404 <_strtod_l+0x574>)
 8025352:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8025356:	ed92 7b00 	vldr	d7, [r2]
 802535a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802535e:	ec4b ab16 	vmov	d6, sl, fp
 8025362:	4a29      	ldr	r2, [pc, #164]	@ (8025408 <_strtod_l+0x578>)
 8025364:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025368:	ee17 1a90 	vmov	r1, s15
 802536c:	400a      	ands	r2, r1
 802536e:	4282      	cmp	r2, r0
 8025370:	ec5b ab17 	vmov	sl, fp, d7
 8025374:	d898      	bhi.n	80252a8 <_strtod_l+0x418>
 8025376:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 802537a:	4282      	cmp	r2, r0
 802537c:	bf86      	itte	hi
 802537e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 802540c <_strtod_l+0x57c>
 8025382:	f04f 3aff 	movhi.w	sl, #4294967295
 8025386:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 802538a:	2200      	movs	r2, #0
 802538c:	9206      	str	r2, [sp, #24]
 802538e:	e076      	b.n	802547e <_strtod_l+0x5ee>
 8025390:	f012 0f01 	tst.w	r2, #1
 8025394:	d004      	beq.n	80253a0 <_strtod_l+0x510>
 8025396:	ed96 6b00 	vldr	d6, [r6]
 802539a:	2001      	movs	r0, #1
 802539c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80253a0:	3101      	adds	r1, #1
 80253a2:	1052      	asrs	r2, r2, #1
 80253a4:	3608      	adds	r6, #8
 80253a6:	e7cd      	b.n	8025344 <_strtod_l+0x4b4>
 80253a8:	d0ef      	beq.n	802538a <_strtod_l+0x4fa>
 80253aa:	4252      	negs	r2, r2
 80253ac:	f012 000f 	ands.w	r0, r2, #15
 80253b0:	d00a      	beq.n	80253c8 <_strtod_l+0x538>
 80253b2:	4912      	ldr	r1, [pc, #72]	@ (80253fc <_strtod_l+0x56c>)
 80253b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80253b8:	ed91 7b00 	vldr	d7, [r1]
 80253bc:	ec4b ab16 	vmov	d6, sl, fp
 80253c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80253c4:	ec5b ab17 	vmov	sl, fp, d7
 80253c8:	1112      	asrs	r2, r2, #4
 80253ca:	d0de      	beq.n	802538a <_strtod_l+0x4fa>
 80253cc:	2a1f      	cmp	r2, #31
 80253ce:	dd1f      	ble.n	8025410 <_strtod_l+0x580>
 80253d0:	2400      	movs	r4, #0
 80253d2:	4625      	mov	r5, r4
 80253d4:	9407      	str	r4, [sp, #28]
 80253d6:	4626      	mov	r6, r4
 80253d8:	9a05      	ldr	r2, [sp, #20]
 80253da:	2322      	movs	r3, #34	@ 0x22
 80253dc:	f04f 0a00 	mov.w	sl, #0
 80253e0:	f04f 0b00 	mov.w	fp, #0
 80253e4:	6013      	str	r3, [r2, #0]
 80253e6:	e76a      	b.n	80252be <_strtod_l+0x42e>
 80253e8:	08036c0d 	.word	0x08036c0d
 80253ec:	08036e0c 	.word	0x08036e0c
 80253f0:	08036c05 	.word	0x08036c05
 80253f4:	08036c3c 	.word	0x08036c3c
 80253f8:	08036a8f 	.word	0x08036a8f
 80253fc:	08036d40 	.word	0x08036d40
 8025400:	08036d18 	.word	0x08036d18
 8025404:	7ca00000 	.word	0x7ca00000
 8025408:	7ff00000 	.word	0x7ff00000
 802540c:	7fefffff 	.word	0x7fefffff
 8025410:	f012 0110 	ands.w	r1, r2, #16
 8025414:	bf18      	it	ne
 8025416:	216a      	movne	r1, #106	@ 0x6a
 8025418:	9106      	str	r1, [sp, #24]
 802541a:	ec4b ab17 	vmov	d7, sl, fp
 802541e:	49b0      	ldr	r1, [pc, #704]	@ (80256e0 <_strtod_l+0x850>)
 8025420:	2000      	movs	r0, #0
 8025422:	07d6      	lsls	r6, r2, #31
 8025424:	d504      	bpl.n	8025430 <_strtod_l+0x5a0>
 8025426:	ed91 6b00 	vldr	d6, [r1]
 802542a:	2001      	movs	r0, #1
 802542c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025430:	1052      	asrs	r2, r2, #1
 8025432:	f101 0108 	add.w	r1, r1, #8
 8025436:	d1f4      	bne.n	8025422 <_strtod_l+0x592>
 8025438:	b108      	cbz	r0, 802543e <_strtod_l+0x5ae>
 802543a:	ec5b ab17 	vmov	sl, fp, d7
 802543e:	9a06      	ldr	r2, [sp, #24]
 8025440:	b1b2      	cbz	r2, 8025470 <_strtod_l+0x5e0>
 8025442:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8025446:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802544a:	2a00      	cmp	r2, #0
 802544c:	4658      	mov	r0, fp
 802544e:	dd0f      	ble.n	8025470 <_strtod_l+0x5e0>
 8025450:	2a1f      	cmp	r2, #31
 8025452:	dd55      	ble.n	8025500 <_strtod_l+0x670>
 8025454:	2a34      	cmp	r2, #52	@ 0x34
 8025456:	bfde      	ittt	le
 8025458:	f04f 32ff 	movle.w	r2, #4294967295
 802545c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8025460:	408a      	lslle	r2, r1
 8025462:	f04f 0a00 	mov.w	sl, #0
 8025466:	bfcc      	ite	gt
 8025468:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802546c:	ea02 0b00 	andle.w	fp, r2, r0
 8025470:	ec4b ab17 	vmov	d7, sl, fp
 8025474:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802547c:	d0a8      	beq.n	80253d0 <_strtod_l+0x540>
 802547e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025480:	9805      	ldr	r0, [sp, #20]
 8025482:	f8cd 9000 	str.w	r9, [sp]
 8025486:	462a      	mov	r2, r5
 8025488:	f7ff f8de 	bl	8024648 <__s2b>
 802548c:	9007      	str	r0, [sp, #28]
 802548e:	2800      	cmp	r0, #0
 8025490:	f43f af0a 	beq.w	80252a8 <_strtod_l+0x418>
 8025494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025496:	1b3f      	subs	r7, r7, r4
 8025498:	2b00      	cmp	r3, #0
 802549a:	bfb4      	ite	lt
 802549c:	463b      	movlt	r3, r7
 802549e:	2300      	movge	r3, #0
 80254a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80254a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254a4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80256d0 <_strtod_l+0x840>
 80254a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80254ac:	2400      	movs	r4, #0
 80254ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80254b0:	4625      	mov	r5, r4
 80254b2:	9b07      	ldr	r3, [sp, #28]
 80254b4:	9805      	ldr	r0, [sp, #20]
 80254b6:	6859      	ldr	r1, [r3, #4]
 80254b8:	f7ff f81e 	bl	80244f8 <_Balloc>
 80254bc:	4606      	mov	r6, r0
 80254be:	2800      	cmp	r0, #0
 80254c0:	f43f aef6 	beq.w	80252b0 <_strtod_l+0x420>
 80254c4:	9b07      	ldr	r3, [sp, #28]
 80254c6:	691a      	ldr	r2, [r3, #16]
 80254c8:	ec4b ab19 	vmov	d9, sl, fp
 80254cc:	3202      	adds	r2, #2
 80254ce:	f103 010c 	add.w	r1, r3, #12
 80254d2:	0092      	lsls	r2, r2, #2
 80254d4:	300c      	adds	r0, #12
 80254d6:	f7fe f9ca 	bl	802386e <memcpy>
 80254da:	eeb0 0b49 	vmov.f64	d0, d9
 80254de:	9805      	ldr	r0, [sp, #20]
 80254e0:	aa14      	add	r2, sp, #80	@ 0x50
 80254e2:	a913      	add	r1, sp, #76	@ 0x4c
 80254e4:	f7ff fbec 	bl	8024cc0 <__d2b>
 80254e8:	9012      	str	r0, [sp, #72]	@ 0x48
 80254ea:	2800      	cmp	r0, #0
 80254ec:	f43f aee0 	beq.w	80252b0 <_strtod_l+0x420>
 80254f0:	9805      	ldr	r0, [sp, #20]
 80254f2:	2101      	movs	r1, #1
 80254f4:	f7ff f93e 	bl	8024774 <__i2b>
 80254f8:	4605      	mov	r5, r0
 80254fa:	b940      	cbnz	r0, 802550e <_strtod_l+0x67e>
 80254fc:	2500      	movs	r5, #0
 80254fe:	e6d7      	b.n	80252b0 <_strtod_l+0x420>
 8025500:	f04f 31ff 	mov.w	r1, #4294967295
 8025504:	fa01 f202 	lsl.w	r2, r1, r2
 8025508:	ea02 0a0a 	and.w	sl, r2, sl
 802550c:	e7b0      	b.n	8025470 <_strtod_l+0x5e0>
 802550e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8025510:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025512:	2f00      	cmp	r7, #0
 8025514:	bfab      	itete	ge
 8025516:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8025518:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 802551a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 802551e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8025522:	bfac      	ite	ge
 8025524:	eb07 0903 	addge.w	r9, r7, r3
 8025528:	eba3 0807 	sublt.w	r8, r3, r7
 802552c:	9b06      	ldr	r3, [sp, #24]
 802552e:	1aff      	subs	r7, r7, r3
 8025530:	4417      	add	r7, r2
 8025532:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8025536:	4a6b      	ldr	r2, [pc, #428]	@ (80256e4 <_strtod_l+0x854>)
 8025538:	3f01      	subs	r7, #1
 802553a:	4297      	cmp	r7, r2
 802553c:	da51      	bge.n	80255e2 <_strtod_l+0x752>
 802553e:	1bd1      	subs	r1, r2, r7
 8025540:	291f      	cmp	r1, #31
 8025542:	eba3 0301 	sub.w	r3, r3, r1
 8025546:	f04f 0201 	mov.w	r2, #1
 802554a:	dc3e      	bgt.n	80255ca <_strtod_l+0x73a>
 802554c:	408a      	lsls	r2, r1
 802554e:	920c      	str	r2, [sp, #48]	@ 0x30
 8025550:	2200      	movs	r2, #0
 8025552:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025554:	eb09 0703 	add.w	r7, r9, r3
 8025558:	4498      	add	r8, r3
 802555a:	9b06      	ldr	r3, [sp, #24]
 802555c:	45b9      	cmp	r9, r7
 802555e:	4498      	add	r8, r3
 8025560:	464b      	mov	r3, r9
 8025562:	bfa8      	it	ge
 8025564:	463b      	movge	r3, r7
 8025566:	4543      	cmp	r3, r8
 8025568:	bfa8      	it	ge
 802556a:	4643      	movge	r3, r8
 802556c:	2b00      	cmp	r3, #0
 802556e:	bfc2      	ittt	gt
 8025570:	1aff      	subgt	r7, r7, r3
 8025572:	eba8 0803 	subgt.w	r8, r8, r3
 8025576:	eba9 0903 	subgt.w	r9, r9, r3
 802557a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802557c:	2b00      	cmp	r3, #0
 802557e:	dd16      	ble.n	80255ae <_strtod_l+0x71e>
 8025580:	4629      	mov	r1, r5
 8025582:	9805      	ldr	r0, [sp, #20]
 8025584:	461a      	mov	r2, r3
 8025586:	f7ff f9b5 	bl	80248f4 <__pow5mult>
 802558a:	4605      	mov	r5, r0
 802558c:	2800      	cmp	r0, #0
 802558e:	d0b5      	beq.n	80254fc <_strtod_l+0x66c>
 8025590:	4601      	mov	r1, r0
 8025592:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025594:	9805      	ldr	r0, [sp, #20]
 8025596:	f7ff f903 	bl	80247a0 <__multiply>
 802559a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802559c:	2800      	cmp	r0, #0
 802559e:	f43f ae87 	beq.w	80252b0 <_strtod_l+0x420>
 80255a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80255a4:	9805      	ldr	r0, [sp, #20]
 80255a6:	f7fe ffe7 	bl	8024578 <_Bfree>
 80255aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80255ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80255ae:	2f00      	cmp	r7, #0
 80255b0:	dc1b      	bgt.n	80255ea <_strtod_l+0x75a>
 80255b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80255b4:	2b00      	cmp	r3, #0
 80255b6:	dd21      	ble.n	80255fc <_strtod_l+0x76c>
 80255b8:	4631      	mov	r1, r6
 80255ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80255bc:	9805      	ldr	r0, [sp, #20]
 80255be:	f7ff f999 	bl	80248f4 <__pow5mult>
 80255c2:	4606      	mov	r6, r0
 80255c4:	b9d0      	cbnz	r0, 80255fc <_strtod_l+0x76c>
 80255c6:	2600      	movs	r6, #0
 80255c8:	e672      	b.n	80252b0 <_strtod_l+0x420>
 80255ca:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80255ce:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80255d2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80255d6:	37e2      	adds	r7, #226	@ 0xe2
 80255d8:	fa02 f107 	lsl.w	r1, r2, r7
 80255dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80255de:	920c      	str	r2, [sp, #48]	@ 0x30
 80255e0:	e7b8      	b.n	8025554 <_strtod_l+0x6c4>
 80255e2:	2200      	movs	r2, #0
 80255e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80255e6:	2201      	movs	r2, #1
 80255e8:	e7f9      	b.n	80255de <_strtod_l+0x74e>
 80255ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80255ec:	9805      	ldr	r0, [sp, #20]
 80255ee:	463a      	mov	r2, r7
 80255f0:	f7ff f9da 	bl	80249a8 <__lshift>
 80255f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80255f6:	2800      	cmp	r0, #0
 80255f8:	d1db      	bne.n	80255b2 <_strtod_l+0x722>
 80255fa:	e659      	b.n	80252b0 <_strtod_l+0x420>
 80255fc:	f1b8 0f00 	cmp.w	r8, #0
 8025600:	dd07      	ble.n	8025612 <_strtod_l+0x782>
 8025602:	4631      	mov	r1, r6
 8025604:	9805      	ldr	r0, [sp, #20]
 8025606:	4642      	mov	r2, r8
 8025608:	f7ff f9ce 	bl	80249a8 <__lshift>
 802560c:	4606      	mov	r6, r0
 802560e:	2800      	cmp	r0, #0
 8025610:	d0d9      	beq.n	80255c6 <_strtod_l+0x736>
 8025612:	f1b9 0f00 	cmp.w	r9, #0
 8025616:	dd08      	ble.n	802562a <_strtod_l+0x79a>
 8025618:	4629      	mov	r1, r5
 802561a:	9805      	ldr	r0, [sp, #20]
 802561c:	464a      	mov	r2, r9
 802561e:	f7ff f9c3 	bl	80249a8 <__lshift>
 8025622:	4605      	mov	r5, r0
 8025624:	2800      	cmp	r0, #0
 8025626:	f43f ae43 	beq.w	80252b0 <_strtod_l+0x420>
 802562a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802562c:	9805      	ldr	r0, [sp, #20]
 802562e:	4632      	mov	r2, r6
 8025630:	f7ff fa42 	bl	8024ab8 <__mdiff>
 8025634:	4604      	mov	r4, r0
 8025636:	2800      	cmp	r0, #0
 8025638:	f43f ae3a 	beq.w	80252b0 <_strtod_l+0x420>
 802563c:	2300      	movs	r3, #0
 802563e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8025642:	60c3      	str	r3, [r0, #12]
 8025644:	4629      	mov	r1, r5
 8025646:	f7ff fa1b 	bl	8024a80 <__mcmp>
 802564a:	2800      	cmp	r0, #0
 802564c:	da4e      	bge.n	80256ec <_strtod_l+0x85c>
 802564e:	ea58 080a 	orrs.w	r8, r8, sl
 8025652:	d174      	bne.n	802573e <_strtod_l+0x8ae>
 8025654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025658:	2b00      	cmp	r3, #0
 802565a:	d170      	bne.n	802573e <_strtod_l+0x8ae>
 802565c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025660:	0d1b      	lsrs	r3, r3, #20
 8025662:	051b      	lsls	r3, r3, #20
 8025664:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8025668:	d969      	bls.n	802573e <_strtod_l+0x8ae>
 802566a:	6963      	ldr	r3, [r4, #20]
 802566c:	b913      	cbnz	r3, 8025674 <_strtod_l+0x7e4>
 802566e:	6923      	ldr	r3, [r4, #16]
 8025670:	2b01      	cmp	r3, #1
 8025672:	dd64      	ble.n	802573e <_strtod_l+0x8ae>
 8025674:	4621      	mov	r1, r4
 8025676:	2201      	movs	r2, #1
 8025678:	9805      	ldr	r0, [sp, #20]
 802567a:	f7ff f995 	bl	80249a8 <__lshift>
 802567e:	4629      	mov	r1, r5
 8025680:	4604      	mov	r4, r0
 8025682:	f7ff f9fd 	bl	8024a80 <__mcmp>
 8025686:	2800      	cmp	r0, #0
 8025688:	dd59      	ble.n	802573e <_strtod_l+0x8ae>
 802568a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802568e:	9a06      	ldr	r2, [sp, #24]
 8025690:	0d1b      	lsrs	r3, r3, #20
 8025692:	051b      	lsls	r3, r3, #20
 8025694:	2a00      	cmp	r2, #0
 8025696:	d070      	beq.n	802577a <_strtod_l+0x8ea>
 8025698:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802569c:	d86d      	bhi.n	802577a <_strtod_l+0x8ea>
 802569e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80256a2:	f67f ae99 	bls.w	80253d8 <_strtod_l+0x548>
 80256a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80256d8 <_strtod_l+0x848>
 80256aa:	ec4b ab16 	vmov	d6, sl, fp
 80256ae:	4b0e      	ldr	r3, [pc, #56]	@ (80256e8 <_strtod_l+0x858>)
 80256b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80256b4:	ee17 2a90 	vmov	r2, s15
 80256b8:	4013      	ands	r3, r2
 80256ba:	ec5b ab17 	vmov	sl, fp, d7
 80256be:	2b00      	cmp	r3, #0
 80256c0:	f47f ae01 	bne.w	80252c6 <_strtod_l+0x436>
 80256c4:	9a05      	ldr	r2, [sp, #20]
 80256c6:	2322      	movs	r3, #34	@ 0x22
 80256c8:	6013      	str	r3, [r2, #0]
 80256ca:	e5fc      	b.n	80252c6 <_strtod_l+0x436>
 80256cc:	f3af 8000 	nop.w
 80256d0:	ffc00000 	.word	0xffc00000
 80256d4:	41dfffff 	.word	0x41dfffff
 80256d8:	00000000 	.word	0x00000000
 80256dc:	39500000 	.word	0x39500000
 80256e0:	08036e38 	.word	0x08036e38
 80256e4:	fffffc02 	.word	0xfffffc02
 80256e8:	7ff00000 	.word	0x7ff00000
 80256ec:	46d9      	mov	r9, fp
 80256ee:	d15d      	bne.n	80257ac <_strtod_l+0x91c>
 80256f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80256f4:	f1b8 0f00 	cmp.w	r8, #0
 80256f8:	d02a      	beq.n	8025750 <_strtod_l+0x8c0>
 80256fa:	4aab      	ldr	r2, [pc, #684]	@ (80259a8 <_strtod_l+0xb18>)
 80256fc:	4293      	cmp	r3, r2
 80256fe:	d12a      	bne.n	8025756 <_strtod_l+0x8c6>
 8025700:	9b06      	ldr	r3, [sp, #24]
 8025702:	4652      	mov	r2, sl
 8025704:	b1fb      	cbz	r3, 8025746 <_strtod_l+0x8b6>
 8025706:	4ba9      	ldr	r3, [pc, #676]	@ (80259ac <_strtod_l+0xb1c>)
 8025708:	ea0b 0303 	and.w	r3, fp, r3
 802570c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8025710:	f04f 31ff 	mov.w	r1, #4294967295
 8025714:	d81a      	bhi.n	802574c <_strtod_l+0x8bc>
 8025716:	0d1b      	lsrs	r3, r3, #20
 8025718:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802571c:	fa01 f303 	lsl.w	r3, r1, r3
 8025720:	429a      	cmp	r2, r3
 8025722:	d118      	bne.n	8025756 <_strtod_l+0x8c6>
 8025724:	4ba2      	ldr	r3, [pc, #648]	@ (80259b0 <_strtod_l+0xb20>)
 8025726:	4599      	cmp	r9, r3
 8025728:	d102      	bne.n	8025730 <_strtod_l+0x8a0>
 802572a:	3201      	adds	r2, #1
 802572c:	f43f adc0 	beq.w	80252b0 <_strtod_l+0x420>
 8025730:	4b9e      	ldr	r3, [pc, #632]	@ (80259ac <_strtod_l+0xb1c>)
 8025732:	ea09 0303 	and.w	r3, r9, r3
 8025736:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802573a:	f04f 0a00 	mov.w	sl, #0
 802573e:	9b06      	ldr	r3, [sp, #24]
 8025740:	2b00      	cmp	r3, #0
 8025742:	d1b0      	bne.n	80256a6 <_strtod_l+0x816>
 8025744:	e5bf      	b.n	80252c6 <_strtod_l+0x436>
 8025746:	f04f 33ff 	mov.w	r3, #4294967295
 802574a:	e7e9      	b.n	8025720 <_strtod_l+0x890>
 802574c:	460b      	mov	r3, r1
 802574e:	e7e7      	b.n	8025720 <_strtod_l+0x890>
 8025750:	ea53 030a 	orrs.w	r3, r3, sl
 8025754:	d099      	beq.n	802568a <_strtod_l+0x7fa>
 8025756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025758:	b1c3      	cbz	r3, 802578c <_strtod_l+0x8fc>
 802575a:	ea13 0f09 	tst.w	r3, r9
 802575e:	d0ee      	beq.n	802573e <_strtod_l+0x8ae>
 8025760:	9a06      	ldr	r2, [sp, #24]
 8025762:	4650      	mov	r0, sl
 8025764:	4659      	mov	r1, fp
 8025766:	f1b8 0f00 	cmp.w	r8, #0
 802576a:	d013      	beq.n	8025794 <_strtod_l+0x904>
 802576c:	f7ff fb73 	bl	8024e56 <sulp>
 8025770:	ee39 7b00 	vadd.f64	d7, d9, d0
 8025774:	ec5b ab17 	vmov	sl, fp, d7
 8025778:	e7e1      	b.n	802573e <_strtod_l+0x8ae>
 802577a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802577e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8025782:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8025786:	f04f 3aff 	mov.w	sl, #4294967295
 802578a:	e7d8      	b.n	802573e <_strtod_l+0x8ae>
 802578c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802578e:	ea13 0f0a 	tst.w	r3, sl
 8025792:	e7e4      	b.n	802575e <_strtod_l+0x8ce>
 8025794:	f7ff fb5f 	bl	8024e56 <sulp>
 8025798:	ee39 0b40 	vsub.f64	d0, d9, d0
 802579c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80257a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257a4:	ec5b ab10 	vmov	sl, fp, d0
 80257a8:	d1c9      	bne.n	802573e <_strtod_l+0x8ae>
 80257aa:	e615      	b.n	80253d8 <_strtod_l+0x548>
 80257ac:	4629      	mov	r1, r5
 80257ae:	4620      	mov	r0, r4
 80257b0:	f7ff fade 	bl	8024d70 <__ratio>
 80257b4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80257b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80257bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257c0:	d85d      	bhi.n	802587e <_strtod_l+0x9ee>
 80257c2:	f1b8 0f00 	cmp.w	r8, #0
 80257c6:	d164      	bne.n	8025892 <_strtod_l+0xa02>
 80257c8:	f1ba 0f00 	cmp.w	sl, #0
 80257cc:	d14b      	bne.n	8025866 <_strtod_l+0x9d6>
 80257ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80257d2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80257d6:	2b00      	cmp	r3, #0
 80257d8:	d160      	bne.n	802589c <_strtod_l+0xa0c>
 80257da:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80257de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80257e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257e6:	d401      	bmi.n	80257ec <_strtod_l+0x95c>
 80257e8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80257ec:	eeb1 ab48 	vneg.f64	d10, d8
 80257f0:	486e      	ldr	r0, [pc, #440]	@ (80259ac <_strtod_l+0xb1c>)
 80257f2:	4970      	ldr	r1, [pc, #448]	@ (80259b4 <_strtod_l+0xb24>)
 80257f4:	ea09 0700 	and.w	r7, r9, r0
 80257f8:	428f      	cmp	r7, r1
 80257fa:	ec53 2b1a 	vmov	r2, r3, d10
 80257fe:	d17d      	bne.n	80258fc <_strtod_l+0xa6c>
 8025800:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8025804:	ec4b ab1c 	vmov	d12, sl, fp
 8025808:	eeb0 0b4c 	vmov.f64	d0, d12
 802580c:	f7ff f9e8 	bl	8024be0 <__ulp>
 8025810:	4866      	ldr	r0, [pc, #408]	@ (80259ac <_strtod_l+0xb1c>)
 8025812:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8025816:	ee1c 3a90 	vmov	r3, s25
 802581a:	4a67      	ldr	r2, [pc, #412]	@ (80259b8 <_strtod_l+0xb28>)
 802581c:	ea03 0100 	and.w	r1, r3, r0
 8025820:	4291      	cmp	r1, r2
 8025822:	ec5b ab1c 	vmov	sl, fp, d12
 8025826:	d93c      	bls.n	80258a2 <_strtod_l+0xa12>
 8025828:	ee19 2a90 	vmov	r2, s19
 802582c:	4b60      	ldr	r3, [pc, #384]	@ (80259b0 <_strtod_l+0xb20>)
 802582e:	429a      	cmp	r2, r3
 8025830:	d104      	bne.n	802583c <_strtod_l+0x9ac>
 8025832:	ee19 3a10 	vmov	r3, s18
 8025836:	3301      	adds	r3, #1
 8025838:	f43f ad3a 	beq.w	80252b0 <_strtod_l+0x420>
 802583c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80259b0 <_strtod_l+0xb20>
 8025840:	f04f 3aff 	mov.w	sl, #4294967295
 8025844:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025846:	9805      	ldr	r0, [sp, #20]
 8025848:	f7fe fe96 	bl	8024578 <_Bfree>
 802584c:	9805      	ldr	r0, [sp, #20]
 802584e:	4631      	mov	r1, r6
 8025850:	f7fe fe92 	bl	8024578 <_Bfree>
 8025854:	9805      	ldr	r0, [sp, #20]
 8025856:	4629      	mov	r1, r5
 8025858:	f7fe fe8e 	bl	8024578 <_Bfree>
 802585c:	9805      	ldr	r0, [sp, #20]
 802585e:	4621      	mov	r1, r4
 8025860:	f7fe fe8a 	bl	8024578 <_Bfree>
 8025864:	e625      	b.n	80254b2 <_strtod_l+0x622>
 8025866:	f1ba 0f01 	cmp.w	sl, #1
 802586a:	d103      	bne.n	8025874 <_strtod_l+0x9e4>
 802586c:	f1bb 0f00 	cmp.w	fp, #0
 8025870:	f43f adb2 	beq.w	80253d8 <_strtod_l+0x548>
 8025874:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8025878:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802587c:	e7b8      	b.n	80257f0 <_strtod_l+0x960>
 802587e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8025882:	ee20 8b08 	vmul.f64	d8, d0, d8
 8025886:	f1b8 0f00 	cmp.w	r8, #0
 802588a:	d0af      	beq.n	80257ec <_strtod_l+0x95c>
 802588c:	eeb0 ab48 	vmov.f64	d10, d8
 8025890:	e7ae      	b.n	80257f0 <_strtod_l+0x960>
 8025892:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8025896:	eeb0 8b4a 	vmov.f64	d8, d10
 802589a:	e7a9      	b.n	80257f0 <_strtod_l+0x960>
 802589c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80258a0:	e7a6      	b.n	80257f0 <_strtod_l+0x960>
 80258a2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80258a6:	9b06      	ldr	r3, [sp, #24]
 80258a8:	46d9      	mov	r9, fp
 80258aa:	2b00      	cmp	r3, #0
 80258ac:	d1ca      	bne.n	8025844 <_strtod_l+0x9b4>
 80258ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80258b2:	0d1b      	lsrs	r3, r3, #20
 80258b4:	051b      	lsls	r3, r3, #20
 80258b6:	429f      	cmp	r7, r3
 80258b8:	d1c4      	bne.n	8025844 <_strtod_l+0x9b4>
 80258ba:	ec51 0b18 	vmov	r0, r1, d8
 80258be:	f7da ff9b 	bl	80007f8 <__aeabi_d2lz>
 80258c2:	f7da ff03 	bl	80006cc <__aeabi_l2d>
 80258c6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80258ca:	ec41 0b17 	vmov	d7, r0, r1
 80258ce:	ea49 090a 	orr.w	r9, r9, sl
 80258d2:	ea59 0908 	orrs.w	r9, r9, r8
 80258d6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80258da:	d03c      	beq.n	8025956 <_strtod_l+0xac6>
 80258dc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8025990 <_strtod_l+0xb00>
 80258e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80258e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258e8:	f53f aced 	bmi.w	80252c6 <_strtod_l+0x436>
 80258ec:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8025998 <_strtod_l+0xb08>
 80258f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80258f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258f8:	dda4      	ble.n	8025844 <_strtod_l+0x9b4>
 80258fa:	e4e4      	b.n	80252c6 <_strtod_l+0x436>
 80258fc:	9906      	ldr	r1, [sp, #24]
 80258fe:	b1e1      	cbz	r1, 802593a <_strtod_l+0xaaa>
 8025900:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8025904:	d819      	bhi.n	802593a <_strtod_l+0xaaa>
 8025906:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802590e:	d811      	bhi.n	8025934 <_strtod_l+0xaa4>
 8025910:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8025914:	ee18 3a10 	vmov	r3, s16
 8025918:	2b01      	cmp	r3, #1
 802591a:	bf38      	it	cc
 802591c:	2301      	movcc	r3, #1
 802591e:	ee08 3a10 	vmov	s16, r3
 8025922:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8025926:	f1b8 0f00 	cmp.w	r8, #0
 802592a:	d111      	bne.n	8025950 <_strtod_l+0xac0>
 802592c:	eeb1 7b48 	vneg.f64	d7, d8
 8025930:	ec53 2b17 	vmov	r2, r3, d7
 8025934:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8025938:	1bcb      	subs	r3, r1, r7
 802593a:	eeb0 0b49 	vmov.f64	d0, d9
 802593e:	ec43 2b1a 	vmov	d10, r2, r3
 8025942:	f7ff f94d 	bl	8024be0 <__ulp>
 8025946:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802594a:	ec5b ab19 	vmov	sl, fp, d9
 802594e:	e7aa      	b.n	80258a6 <_strtod_l+0xa16>
 8025950:	eeb0 7b48 	vmov.f64	d7, d8
 8025954:	e7ec      	b.n	8025930 <_strtod_l+0xaa0>
 8025956:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80259a0 <_strtod_l+0xb10>
 802595a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025962:	f57f af6f 	bpl.w	8025844 <_strtod_l+0x9b4>
 8025966:	e4ae      	b.n	80252c6 <_strtod_l+0x436>
 8025968:	2300      	movs	r3, #0
 802596a:	9308      	str	r3, [sp, #32]
 802596c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802596e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025970:	6013      	str	r3, [r2, #0]
 8025972:	f7ff bacc 	b.w	8024f0e <_strtod_l+0x7e>
 8025976:	2a65      	cmp	r2, #101	@ 0x65
 8025978:	f43f abbc 	beq.w	80250f4 <_strtod_l+0x264>
 802597c:	2a45      	cmp	r2, #69	@ 0x45
 802597e:	f43f abb9 	beq.w	80250f4 <_strtod_l+0x264>
 8025982:	2301      	movs	r3, #1
 8025984:	9306      	str	r3, [sp, #24]
 8025986:	f7ff bbf0 	b.w	802516a <_strtod_l+0x2da>
 802598a:	bf00      	nop
 802598c:	f3af 8000 	nop.w
 8025990:	94a03595 	.word	0x94a03595
 8025994:	3fdfffff 	.word	0x3fdfffff
 8025998:	35afe535 	.word	0x35afe535
 802599c:	3fe00000 	.word	0x3fe00000
 80259a0:	94a03595 	.word	0x94a03595
 80259a4:	3fcfffff 	.word	0x3fcfffff
 80259a8:	000fffff 	.word	0x000fffff
 80259ac:	7ff00000 	.word	0x7ff00000
 80259b0:	7fefffff 	.word	0x7fefffff
 80259b4:	7fe00000 	.word	0x7fe00000
 80259b8:	7c9fffff 	.word	0x7c9fffff

080259bc <_strtod_r>:
 80259bc:	4b01      	ldr	r3, [pc, #4]	@ (80259c4 <_strtod_r+0x8>)
 80259be:	f7ff ba67 	b.w	8024e90 <_strtod_l>
 80259c2:	bf00      	nop
 80259c4:	240007fc 	.word	0x240007fc

080259c8 <__ssputs_r>:
 80259c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80259cc:	688e      	ldr	r6, [r1, #8]
 80259ce:	461f      	mov	r7, r3
 80259d0:	42be      	cmp	r6, r7
 80259d2:	680b      	ldr	r3, [r1, #0]
 80259d4:	4682      	mov	sl, r0
 80259d6:	460c      	mov	r4, r1
 80259d8:	4690      	mov	r8, r2
 80259da:	d82d      	bhi.n	8025a38 <__ssputs_r+0x70>
 80259dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80259e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80259e4:	d026      	beq.n	8025a34 <__ssputs_r+0x6c>
 80259e6:	6965      	ldr	r5, [r4, #20]
 80259e8:	6909      	ldr	r1, [r1, #16]
 80259ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80259ee:	eba3 0901 	sub.w	r9, r3, r1
 80259f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80259f6:	1c7b      	adds	r3, r7, #1
 80259f8:	444b      	add	r3, r9
 80259fa:	106d      	asrs	r5, r5, #1
 80259fc:	429d      	cmp	r5, r3
 80259fe:	bf38      	it	cc
 8025a00:	461d      	movcc	r5, r3
 8025a02:	0553      	lsls	r3, r2, #21
 8025a04:	d527      	bpl.n	8025a56 <__ssputs_r+0x8e>
 8025a06:	4629      	mov	r1, r5
 8025a08:	f7fc fc0e 	bl	8022228 <_malloc_r>
 8025a0c:	4606      	mov	r6, r0
 8025a0e:	b360      	cbz	r0, 8025a6a <__ssputs_r+0xa2>
 8025a10:	6921      	ldr	r1, [r4, #16]
 8025a12:	464a      	mov	r2, r9
 8025a14:	f7fd ff2b 	bl	802386e <memcpy>
 8025a18:	89a3      	ldrh	r3, [r4, #12]
 8025a1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8025a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025a22:	81a3      	strh	r3, [r4, #12]
 8025a24:	6126      	str	r6, [r4, #16]
 8025a26:	6165      	str	r5, [r4, #20]
 8025a28:	444e      	add	r6, r9
 8025a2a:	eba5 0509 	sub.w	r5, r5, r9
 8025a2e:	6026      	str	r6, [r4, #0]
 8025a30:	60a5      	str	r5, [r4, #8]
 8025a32:	463e      	mov	r6, r7
 8025a34:	42be      	cmp	r6, r7
 8025a36:	d900      	bls.n	8025a3a <__ssputs_r+0x72>
 8025a38:	463e      	mov	r6, r7
 8025a3a:	6820      	ldr	r0, [r4, #0]
 8025a3c:	4632      	mov	r2, r6
 8025a3e:	4641      	mov	r1, r8
 8025a40:	f7fd fe06 	bl	8023650 <memmove>
 8025a44:	68a3      	ldr	r3, [r4, #8]
 8025a46:	1b9b      	subs	r3, r3, r6
 8025a48:	60a3      	str	r3, [r4, #8]
 8025a4a:	6823      	ldr	r3, [r4, #0]
 8025a4c:	4433      	add	r3, r6
 8025a4e:	6023      	str	r3, [r4, #0]
 8025a50:	2000      	movs	r0, #0
 8025a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a56:	462a      	mov	r2, r5
 8025a58:	f000 ff4d 	bl	80268f6 <_realloc_r>
 8025a5c:	4606      	mov	r6, r0
 8025a5e:	2800      	cmp	r0, #0
 8025a60:	d1e0      	bne.n	8025a24 <__ssputs_r+0x5c>
 8025a62:	6921      	ldr	r1, [r4, #16]
 8025a64:	4650      	mov	r0, sl
 8025a66:	f7fe fcfd 	bl	8024464 <_free_r>
 8025a6a:	230c      	movs	r3, #12
 8025a6c:	f8ca 3000 	str.w	r3, [sl]
 8025a70:	89a3      	ldrh	r3, [r4, #12]
 8025a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025a76:	81a3      	strh	r3, [r4, #12]
 8025a78:	f04f 30ff 	mov.w	r0, #4294967295
 8025a7c:	e7e9      	b.n	8025a52 <__ssputs_r+0x8a>
	...

08025a80 <_svfiprintf_r>:
 8025a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a84:	4698      	mov	r8, r3
 8025a86:	898b      	ldrh	r3, [r1, #12]
 8025a88:	061b      	lsls	r3, r3, #24
 8025a8a:	b09d      	sub	sp, #116	@ 0x74
 8025a8c:	4607      	mov	r7, r0
 8025a8e:	460d      	mov	r5, r1
 8025a90:	4614      	mov	r4, r2
 8025a92:	d510      	bpl.n	8025ab6 <_svfiprintf_r+0x36>
 8025a94:	690b      	ldr	r3, [r1, #16]
 8025a96:	b973      	cbnz	r3, 8025ab6 <_svfiprintf_r+0x36>
 8025a98:	2140      	movs	r1, #64	@ 0x40
 8025a9a:	f7fc fbc5 	bl	8022228 <_malloc_r>
 8025a9e:	6028      	str	r0, [r5, #0]
 8025aa0:	6128      	str	r0, [r5, #16]
 8025aa2:	b930      	cbnz	r0, 8025ab2 <_svfiprintf_r+0x32>
 8025aa4:	230c      	movs	r3, #12
 8025aa6:	603b      	str	r3, [r7, #0]
 8025aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8025aac:	b01d      	add	sp, #116	@ 0x74
 8025aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ab2:	2340      	movs	r3, #64	@ 0x40
 8025ab4:	616b      	str	r3, [r5, #20]
 8025ab6:	2300      	movs	r3, #0
 8025ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8025aba:	2320      	movs	r3, #32
 8025abc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8025ac4:	2330      	movs	r3, #48	@ 0x30
 8025ac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8025c64 <_svfiprintf_r+0x1e4>
 8025aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025ace:	f04f 0901 	mov.w	r9, #1
 8025ad2:	4623      	mov	r3, r4
 8025ad4:	469a      	mov	sl, r3
 8025ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025ada:	b10a      	cbz	r2, 8025ae0 <_svfiprintf_r+0x60>
 8025adc:	2a25      	cmp	r2, #37	@ 0x25
 8025ade:	d1f9      	bne.n	8025ad4 <_svfiprintf_r+0x54>
 8025ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8025ae4:	d00b      	beq.n	8025afe <_svfiprintf_r+0x7e>
 8025ae6:	465b      	mov	r3, fp
 8025ae8:	4622      	mov	r2, r4
 8025aea:	4629      	mov	r1, r5
 8025aec:	4638      	mov	r0, r7
 8025aee:	f7ff ff6b 	bl	80259c8 <__ssputs_r>
 8025af2:	3001      	adds	r0, #1
 8025af4:	f000 80a7 	beq.w	8025c46 <_svfiprintf_r+0x1c6>
 8025af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025afa:	445a      	add	r2, fp
 8025afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8025afe:	f89a 3000 	ldrb.w	r3, [sl]
 8025b02:	2b00      	cmp	r3, #0
 8025b04:	f000 809f 	beq.w	8025c46 <_svfiprintf_r+0x1c6>
 8025b08:	2300      	movs	r3, #0
 8025b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8025b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b12:	f10a 0a01 	add.w	sl, sl, #1
 8025b16:	9304      	str	r3, [sp, #16]
 8025b18:	9307      	str	r3, [sp, #28]
 8025b1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025b1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8025b20:	4654      	mov	r4, sl
 8025b22:	2205      	movs	r2, #5
 8025b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b28:	484e      	ldr	r0, [pc, #312]	@ (8025c64 <_svfiprintf_r+0x1e4>)
 8025b2a:	f7da fbe9 	bl	8000300 <memchr>
 8025b2e:	9a04      	ldr	r2, [sp, #16]
 8025b30:	b9d8      	cbnz	r0, 8025b6a <_svfiprintf_r+0xea>
 8025b32:	06d0      	lsls	r0, r2, #27
 8025b34:	bf44      	itt	mi
 8025b36:	2320      	movmi	r3, #32
 8025b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025b3c:	0711      	lsls	r1, r2, #28
 8025b3e:	bf44      	itt	mi
 8025b40:	232b      	movmi	r3, #43	@ 0x2b
 8025b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025b46:	f89a 3000 	ldrb.w	r3, [sl]
 8025b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8025b4c:	d015      	beq.n	8025b7a <_svfiprintf_r+0xfa>
 8025b4e:	9a07      	ldr	r2, [sp, #28]
 8025b50:	4654      	mov	r4, sl
 8025b52:	2000      	movs	r0, #0
 8025b54:	f04f 0c0a 	mov.w	ip, #10
 8025b58:	4621      	mov	r1, r4
 8025b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025b5e:	3b30      	subs	r3, #48	@ 0x30
 8025b60:	2b09      	cmp	r3, #9
 8025b62:	d94b      	bls.n	8025bfc <_svfiprintf_r+0x17c>
 8025b64:	b1b0      	cbz	r0, 8025b94 <_svfiprintf_r+0x114>
 8025b66:	9207      	str	r2, [sp, #28]
 8025b68:	e014      	b.n	8025b94 <_svfiprintf_r+0x114>
 8025b6a:	eba0 0308 	sub.w	r3, r0, r8
 8025b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8025b72:	4313      	orrs	r3, r2
 8025b74:	9304      	str	r3, [sp, #16]
 8025b76:	46a2      	mov	sl, r4
 8025b78:	e7d2      	b.n	8025b20 <_svfiprintf_r+0xa0>
 8025b7a:	9b03      	ldr	r3, [sp, #12]
 8025b7c:	1d19      	adds	r1, r3, #4
 8025b7e:	681b      	ldr	r3, [r3, #0]
 8025b80:	9103      	str	r1, [sp, #12]
 8025b82:	2b00      	cmp	r3, #0
 8025b84:	bfbb      	ittet	lt
 8025b86:	425b      	neglt	r3, r3
 8025b88:	f042 0202 	orrlt.w	r2, r2, #2
 8025b8c:	9307      	strge	r3, [sp, #28]
 8025b8e:	9307      	strlt	r3, [sp, #28]
 8025b90:	bfb8      	it	lt
 8025b92:	9204      	strlt	r2, [sp, #16]
 8025b94:	7823      	ldrb	r3, [r4, #0]
 8025b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8025b98:	d10a      	bne.n	8025bb0 <_svfiprintf_r+0x130>
 8025b9a:	7863      	ldrb	r3, [r4, #1]
 8025b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8025b9e:	d132      	bne.n	8025c06 <_svfiprintf_r+0x186>
 8025ba0:	9b03      	ldr	r3, [sp, #12]
 8025ba2:	1d1a      	adds	r2, r3, #4
 8025ba4:	681b      	ldr	r3, [r3, #0]
 8025ba6:	9203      	str	r2, [sp, #12]
 8025ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025bac:	3402      	adds	r4, #2
 8025bae:	9305      	str	r3, [sp, #20]
 8025bb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8025c74 <_svfiprintf_r+0x1f4>
 8025bb4:	7821      	ldrb	r1, [r4, #0]
 8025bb6:	2203      	movs	r2, #3
 8025bb8:	4650      	mov	r0, sl
 8025bba:	f7da fba1 	bl	8000300 <memchr>
 8025bbe:	b138      	cbz	r0, 8025bd0 <_svfiprintf_r+0x150>
 8025bc0:	9b04      	ldr	r3, [sp, #16]
 8025bc2:	eba0 000a 	sub.w	r0, r0, sl
 8025bc6:	2240      	movs	r2, #64	@ 0x40
 8025bc8:	4082      	lsls	r2, r0
 8025bca:	4313      	orrs	r3, r2
 8025bcc:	3401      	adds	r4, #1
 8025bce:	9304      	str	r3, [sp, #16]
 8025bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025bd4:	4824      	ldr	r0, [pc, #144]	@ (8025c68 <_svfiprintf_r+0x1e8>)
 8025bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025bda:	2206      	movs	r2, #6
 8025bdc:	f7da fb90 	bl	8000300 <memchr>
 8025be0:	2800      	cmp	r0, #0
 8025be2:	d036      	beq.n	8025c52 <_svfiprintf_r+0x1d2>
 8025be4:	4b21      	ldr	r3, [pc, #132]	@ (8025c6c <_svfiprintf_r+0x1ec>)
 8025be6:	bb1b      	cbnz	r3, 8025c30 <_svfiprintf_r+0x1b0>
 8025be8:	9b03      	ldr	r3, [sp, #12]
 8025bea:	3307      	adds	r3, #7
 8025bec:	f023 0307 	bic.w	r3, r3, #7
 8025bf0:	3308      	adds	r3, #8
 8025bf2:	9303      	str	r3, [sp, #12]
 8025bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bf6:	4433      	add	r3, r6
 8025bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8025bfa:	e76a      	b.n	8025ad2 <_svfiprintf_r+0x52>
 8025bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8025c00:	460c      	mov	r4, r1
 8025c02:	2001      	movs	r0, #1
 8025c04:	e7a8      	b.n	8025b58 <_svfiprintf_r+0xd8>
 8025c06:	2300      	movs	r3, #0
 8025c08:	3401      	adds	r4, #1
 8025c0a:	9305      	str	r3, [sp, #20]
 8025c0c:	4619      	mov	r1, r3
 8025c0e:	f04f 0c0a 	mov.w	ip, #10
 8025c12:	4620      	mov	r0, r4
 8025c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025c18:	3a30      	subs	r2, #48	@ 0x30
 8025c1a:	2a09      	cmp	r2, #9
 8025c1c:	d903      	bls.n	8025c26 <_svfiprintf_r+0x1a6>
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	d0c6      	beq.n	8025bb0 <_svfiprintf_r+0x130>
 8025c22:	9105      	str	r1, [sp, #20]
 8025c24:	e7c4      	b.n	8025bb0 <_svfiprintf_r+0x130>
 8025c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8025c2a:	4604      	mov	r4, r0
 8025c2c:	2301      	movs	r3, #1
 8025c2e:	e7f0      	b.n	8025c12 <_svfiprintf_r+0x192>
 8025c30:	ab03      	add	r3, sp, #12
 8025c32:	9300      	str	r3, [sp, #0]
 8025c34:	462a      	mov	r2, r5
 8025c36:	4b0e      	ldr	r3, [pc, #56]	@ (8025c70 <_svfiprintf_r+0x1f0>)
 8025c38:	a904      	add	r1, sp, #16
 8025c3a:	4638      	mov	r0, r7
 8025c3c:	f7fc fd3c 	bl	80226b8 <_printf_float>
 8025c40:	1c42      	adds	r2, r0, #1
 8025c42:	4606      	mov	r6, r0
 8025c44:	d1d6      	bne.n	8025bf4 <_svfiprintf_r+0x174>
 8025c46:	89ab      	ldrh	r3, [r5, #12]
 8025c48:	065b      	lsls	r3, r3, #25
 8025c4a:	f53f af2d 	bmi.w	8025aa8 <_svfiprintf_r+0x28>
 8025c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c50:	e72c      	b.n	8025aac <_svfiprintf_r+0x2c>
 8025c52:	ab03      	add	r3, sp, #12
 8025c54:	9300      	str	r3, [sp, #0]
 8025c56:	462a      	mov	r2, r5
 8025c58:	4b05      	ldr	r3, [pc, #20]	@ (8025c70 <_svfiprintf_r+0x1f0>)
 8025c5a:	a904      	add	r1, sp, #16
 8025c5c:	4638      	mov	r0, r7
 8025c5e:	f7fc ffb3 	bl	8022bc8 <_printf_i>
 8025c62:	e7ed      	b.n	8025c40 <_svfiprintf_r+0x1c0>
 8025c64:	08036e60 	.word	0x08036e60
 8025c68:	08036e6a 	.word	0x08036e6a
 8025c6c:	080226b9 	.word	0x080226b9
 8025c70:	080259c9 	.word	0x080259c9
 8025c74:	08036e66 	.word	0x08036e66

08025c78 <__sfputc_r>:
 8025c78:	6893      	ldr	r3, [r2, #8]
 8025c7a:	3b01      	subs	r3, #1
 8025c7c:	2b00      	cmp	r3, #0
 8025c7e:	b410      	push	{r4}
 8025c80:	6093      	str	r3, [r2, #8]
 8025c82:	da08      	bge.n	8025c96 <__sfputc_r+0x1e>
 8025c84:	6994      	ldr	r4, [r2, #24]
 8025c86:	42a3      	cmp	r3, r4
 8025c88:	db01      	blt.n	8025c8e <__sfputc_r+0x16>
 8025c8a:	290a      	cmp	r1, #10
 8025c8c:	d103      	bne.n	8025c96 <__sfputc_r+0x1e>
 8025c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025c92:	f7fd bc38 	b.w	8023506 <__swbuf_r>
 8025c96:	6813      	ldr	r3, [r2, #0]
 8025c98:	1c58      	adds	r0, r3, #1
 8025c9a:	6010      	str	r0, [r2, #0]
 8025c9c:	7019      	strb	r1, [r3, #0]
 8025c9e:	4608      	mov	r0, r1
 8025ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025ca4:	4770      	bx	lr

08025ca6 <__sfputs_r>:
 8025ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ca8:	4606      	mov	r6, r0
 8025caa:	460f      	mov	r7, r1
 8025cac:	4614      	mov	r4, r2
 8025cae:	18d5      	adds	r5, r2, r3
 8025cb0:	42ac      	cmp	r4, r5
 8025cb2:	d101      	bne.n	8025cb8 <__sfputs_r+0x12>
 8025cb4:	2000      	movs	r0, #0
 8025cb6:	e007      	b.n	8025cc8 <__sfputs_r+0x22>
 8025cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025cbc:	463a      	mov	r2, r7
 8025cbe:	4630      	mov	r0, r6
 8025cc0:	f7ff ffda 	bl	8025c78 <__sfputc_r>
 8025cc4:	1c43      	adds	r3, r0, #1
 8025cc6:	d1f3      	bne.n	8025cb0 <__sfputs_r+0xa>
 8025cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025ccc <_vfiprintf_r>:
 8025ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cd0:	460d      	mov	r5, r1
 8025cd2:	b09d      	sub	sp, #116	@ 0x74
 8025cd4:	4614      	mov	r4, r2
 8025cd6:	4698      	mov	r8, r3
 8025cd8:	4606      	mov	r6, r0
 8025cda:	b118      	cbz	r0, 8025ce4 <_vfiprintf_r+0x18>
 8025cdc:	6a03      	ldr	r3, [r0, #32]
 8025cde:	b90b      	cbnz	r3, 8025ce4 <_vfiprintf_r+0x18>
 8025ce0:	f7fd fb2a 	bl	8023338 <__sinit>
 8025ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025ce6:	07d9      	lsls	r1, r3, #31
 8025ce8:	d405      	bmi.n	8025cf6 <_vfiprintf_r+0x2a>
 8025cea:	89ab      	ldrh	r3, [r5, #12]
 8025cec:	059a      	lsls	r2, r3, #22
 8025cee:	d402      	bmi.n	8025cf6 <_vfiprintf_r+0x2a>
 8025cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025cf2:	f7fd fdb2 	bl	802385a <__retarget_lock_acquire_recursive>
 8025cf6:	89ab      	ldrh	r3, [r5, #12]
 8025cf8:	071b      	lsls	r3, r3, #28
 8025cfa:	d501      	bpl.n	8025d00 <_vfiprintf_r+0x34>
 8025cfc:	692b      	ldr	r3, [r5, #16]
 8025cfe:	b99b      	cbnz	r3, 8025d28 <_vfiprintf_r+0x5c>
 8025d00:	4629      	mov	r1, r5
 8025d02:	4630      	mov	r0, r6
 8025d04:	f7fd fc3e 	bl	8023584 <__swsetup_r>
 8025d08:	b170      	cbz	r0, 8025d28 <_vfiprintf_r+0x5c>
 8025d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025d0c:	07dc      	lsls	r4, r3, #31
 8025d0e:	d504      	bpl.n	8025d1a <_vfiprintf_r+0x4e>
 8025d10:	f04f 30ff 	mov.w	r0, #4294967295
 8025d14:	b01d      	add	sp, #116	@ 0x74
 8025d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d1a:	89ab      	ldrh	r3, [r5, #12]
 8025d1c:	0598      	lsls	r0, r3, #22
 8025d1e:	d4f7      	bmi.n	8025d10 <_vfiprintf_r+0x44>
 8025d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025d22:	f7fd fd9b 	bl	802385c <__retarget_lock_release_recursive>
 8025d26:	e7f3      	b.n	8025d10 <_vfiprintf_r+0x44>
 8025d28:	2300      	movs	r3, #0
 8025d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d2c:	2320      	movs	r3, #32
 8025d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8025d36:	2330      	movs	r3, #48	@ 0x30
 8025d38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8025ee8 <_vfiprintf_r+0x21c>
 8025d3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025d40:	f04f 0901 	mov.w	r9, #1
 8025d44:	4623      	mov	r3, r4
 8025d46:	469a      	mov	sl, r3
 8025d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025d4c:	b10a      	cbz	r2, 8025d52 <_vfiprintf_r+0x86>
 8025d4e:	2a25      	cmp	r2, #37	@ 0x25
 8025d50:	d1f9      	bne.n	8025d46 <_vfiprintf_r+0x7a>
 8025d52:	ebba 0b04 	subs.w	fp, sl, r4
 8025d56:	d00b      	beq.n	8025d70 <_vfiprintf_r+0xa4>
 8025d58:	465b      	mov	r3, fp
 8025d5a:	4622      	mov	r2, r4
 8025d5c:	4629      	mov	r1, r5
 8025d5e:	4630      	mov	r0, r6
 8025d60:	f7ff ffa1 	bl	8025ca6 <__sfputs_r>
 8025d64:	3001      	adds	r0, #1
 8025d66:	f000 80a7 	beq.w	8025eb8 <_vfiprintf_r+0x1ec>
 8025d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025d6c:	445a      	add	r2, fp
 8025d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025d70:	f89a 3000 	ldrb.w	r3, [sl]
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	f000 809f 	beq.w	8025eb8 <_vfiprintf_r+0x1ec>
 8025d7a:	2300      	movs	r3, #0
 8025d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8025d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025d84:	f10a 0a01 	add.w	sl, sl, #1
 8025d88:	9304      	str	r3, [sp, #16]
 8025d8a:	9307      	str	r3, [sp, #28]
 8025d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8025d92:	4654      	mov	r4, sl
 8025d94:	2205      	movs	r2, #5
 8025d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d9a:	4853      	ldr	r0, [pc, #332]	@ (8025ee8 <_vfiprintf_r+0x21c>)
 8025d9c:	f7da fab0 	bl	8000300 <memchr>
 8025da0:	9a04      	ldr	r2, [sp, #16]
 8025da2:	b9d8      	cbnz	r0, 8025ddc <_vfiprintf_r+0x110>
 8025da4:	06d1      	lsls	r1, r2, #27
 8025da6:	bf44      	itt	mi
 8025da8:	2320      	movmi	r3, #32
 8025daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025dae:	0713      	lsls	r3, r2, #28
 8025db0:	bf44      	itt	mi
 8025db2:	232b      	movmi	r3, #43	@ 0x2b
 8025db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025db8:	f89a 3000 	ldrb.w	r3, [sl]
 8025dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8025dbe:	d015      	beq.n	8025dec <_vfiprintf_r+0x120>
 8025dc0:	9a07      	ldr	r2, [sp, #28]
 8025dc2:	4654      	mov	r4, sl
 8025dc4:	2000      	movs	r0, #0
 8025dc6:	f04f 0c0a 	mov.w	ip, #10
 8025dca:	4621      	mov	r1, r4
 8025dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025dd0:	3b30      	subs	r3, #48	@ 0x30
 8025dd2:	2b09      	cmp	r3, #9
 8025dd4:	d94b      	bls.n	8025e6e <_vfiprintf_r+0x1a2>
 8025dd6:	b1b0      	cbz	r0, 8025e06 <_vfiprintf_r+0x13a>
 8025dd8:	9207      	str	r2, [sp, #28]
 8025dda:	e014      	b.n	8025e06 <_vfiprintf_r+0x13a>
 8025ddc:	eba0 0308 	sub.w	r3, r0, r8
 8025de0:	fa09 f303 	lsl.w	r3, r9, r3
 8025de4:	4313      	orrs	r3, r2
 8025de6:	9304      	str	r3, [sp, #16]
 8025de8:	46a2      	mov	sl, r4
 8025dea:	e7d2      	b.n	8025d92 <_vfiprintf_r+0xc6>
 8025dec:	9b03      	ldr	r3, [sp, #12]
 8025dee:	1d19      	adds	r1, r3, #4
 8025df0:	681b      	ldr	r3, [r3, #0]
 8025df2:	9103      	str	r1, [sp, #12]
 8025df4:	2b00      	cmp	r3, #0
 8025df6:	bfbb      	ittet	lt
 8025df8:	425b      	neglt	r3, r3
 8025dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8025dfe:	9307      	strge	r3, [sp, #28]
 8025e00:	9307      	strlt	r3, [sp, #28]
 8025e02:	bfb8      	it	lt
 8025e04:	9204      	strlt	r2, [sp, #16]
 8025e06:	7823      	ldrb	r3, [r4, #0]
 8025e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8025e0a:	d10a      	bne.n	8025e22 <_vfiprintf_r+0x156>
 8025e0c:	7863      	ldrb	r3, [r4, #1]
 8025e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8025e10:	d132      	bne.n	8025e78 <_vfiprintf_r+0x1ac>
 8025e12:	9b03      	ldr	r3, [sp, #12]
 8025e14:	1d1a      	adds	r2, r3, #4
 8025e16:	681b      	ldr	r3, [r3, #0]
 8025e18:	9203      	str	r2, [sp, #12]
 8025e1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025e1e:	3402      	adds	r4, #2
 8025e20:	9305      	str	r3, [sp, #20]
 8025e22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025ef8 <_vfiprintf_r+0x22c>
 8025e26:	7821      	ldrb	r1, [r4, #0]
 8025e28:	2203      	movs	r2, #3
 8025e2a:	4650      	mov	r0, sl
 8025e2c:	f7da fa68 	bl	8000300 <memchr>
 8025e30:	b138      	cbz	r0, 8025e42 <_vfiprintf_r+0x176>
 8025e32:	9b04      	ldr	r3, [sp, #16]
 8025e34:	eba0 000a 	sub.w	r0, r0, sl
 8025e38:	2240      	movs	r2, #64	@ 0x40
 8025e3a:	4082      	lsls	r2, r0
 8025e3c:	4313      	orrs	r3, r2
 8025e3e:	3401      	adds	r4, #1
 8025e40:	9304      	str	r3, [sp, #16]
 8025e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e46:	4829      	ldr	r0, [pc, #164]	@ (8025eec <_vfiprintf_r+0x220>)
 8025e48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025e4c:	2206      	movs	r2, #6
 8025e4e:	f7da fa57 	bl	8000300 <memchr>
 8025e52:	2800      	cmp	r0, #0
 8025e54:	d03f      	beq.n	8025ed6 <_vfiprintf_r+0x20a>
 8025e56:	4b26      	ldr	r3, [pc, #152]	@ (8025ef0 <_vfiprintf_r+0x224>)
 8025e58:	bb1b      	cbnz	r3, 8025ea2 <_vfiprintf_r+0x1d6>
 8025e5a:	9b03      	ldr	r3, [sp, #12]
 8025e5c:	3307      	adds	r3, #7
 8025e5e:	f023 0307 	bic.w	r3, r3, #7
 8025e62:	3308      	adds	r3, #8
 8025e64:	9303      	str	r3, [sp, #12]
 8025e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e68:	443b      	add	r3, r7
 8025e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e6c:	e76a      	b.n	8025d44 <_vfiprintf_r+0x78>
 8025e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8025e72:	460c      	mov	r4, r1
 8025e74:	2001      	movs	r0, #1
 8025e76:	e7a8      	b.n	8025dca <_vfiprintf_r+0xfe>
 8025e78:	2300      	movs	r3, #0
 8025e7a:	3401      	adds	r4, #1
 8025e7c:	9305      	str	r3, [sp, #20]
 8025e7e:	4619      	mov	r1, r3
 8025e80:	f04f 0c0a 	mov.w	ip, #10
 8025e84:	4620      	mov	r0, r4
 8025e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025e8a:	3a30      	subs	r2, #48	@ 0x30
 8025e8c:	2a09      	cmp	r2, #9
 8025e8e:	d903      	bls.n	8025e98 <_vfiprintf_r+0x1cc>
 8025e90:	2b00      	cmp	r3, #0
 8025e92:	d0c6      	beq.n	8025e22 <_vfiprintf_r+0x156>
 8025e94:	9105      	str	r1, [sp, #20]
 8025e96:	e7c4      	b.n	8025e22 <_vfiprintf_r+0x156>
 8025e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8025e9c:	4604      	mov	r4, r0
 8025e9e:	2301      	movs	r3, #1
 8025ea0:	e7f0      	b.n	8025e84 <_vfiprintf_r+0x1b8>
 8025ea2:	ab03      	add	r3, sp, #12
 8025ea4:	9300      	str	r3, [sp, #0]
 8025ea6:	462a      	mov	r2, r5
 8025ea8:	4b12      	ldr	r3, [pc, #72]	@ (8025ef4 <_vfiprintf_r+0x228>)
 8025eaa:	a904      	add	r1, sp, #16
 8025eac:	4630      	mov	r0, r6
 8025eae:	f7fc fc03 	bl	80226b8 <_printf_float>
 8025eb2:	4607      	mov	r7, r0
 8025eb4:	1c78      	adds	r0, r7, #1
 8025eb6:	d1d6      	bne.n	8025e66 <_vfiprintf_r+0x19a>
 8025eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025eba:	07d9      	lsls	r1, r3, #31
 8025ebc:	d405      	bmi.n	8025eca <_vfiprintf_r+0x1fe>
 8025ebe:	89ab      	ldrh	r3, [r5, #12]
 8025ec0:	059a      	lsls	r2, r3, #22
 8025ec2:	d402      	bmi.n	8025eca <_vfiprintf_r+0x1fe>
 8025ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025ec6:	f7fd fcc9 	bl	802385c <__retarget_lock_release_recursive>
 8025eca:	89ab      	ldrh	r3, [r5, #12]
 8025ecc:	065b      	lsls	r3, r3, #25
 8025ece:	f53f af1f 	bmi.w	8025d10 <_vfiprintf_r+0x44>
 8025ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ed4:	e71e      	b.n	8025d14 <_vfiprintf_r+0x48>
 8025ed6:	ab03      	add	r3, sp, #12
 8025ed8:	9300      	str	r3, [sp, #0]
 8025eda:	462a      	mov	r2, r5
 8025edc:	4b05      	ldr	r3, [pc, #20]	@ (8025ef4 <_vfiprintf_r+0x228>)
 8025ede:	a904      	add	r1, sp, #16
 8025ee0:	4630      	mov	r0, r6
 8025ee2:	f7fc fe71 	bl	8022bc8 <_printf_i>
 8025ee6:	e7e4      	b.n	8025eb2 <_vfiprintf_r+0x1e6>
 8025ee8:	08036e60 	.word	0x08036e60
 8025eec:	08036e6a 	.word	0x08036e6a
 8025ef0:	080226b9 	.word	0x080226b9
 8025ef4:	08025ca7 	.word	0x08025ca7
 8025ef8:	08036e66 	.word	0x08036e66

08025efc <__sflush_r>:
 8025efc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f04:	0716      	lsls	r6, r2, #28
 8025f06:	4605      	mov	r5, r0
 8025f08:	460c      	mov	r4, r1
 8025f0a:	d454      	bmi.n	8025fb6 <__sflush_r+0xba>
 8025f0c:	684b      	ldr	r3, [r1, #4]
 8025f0e:	2b00      	cmp	r3, #0
 8025f10:	dc02      	bgt.n	8025f18 <__sflush_r+0x1c>
 8025f12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	dd48      	ble.n	8025faa <__sflush_r+0xae>
 8025f18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025f1a:	2e00      	cmp	r6, #0
 8025f1c:	d045      	beq.n	8025faa <__sflush_r+0xae>
 8025f1e:	2300      	movs	r3, #0
 8025f20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025f24:	682f      	ldr	r7, [r5, #0]
 8025f26:	6a21      	ldr	r1, [r4, #32]
 8025f28:	602b      	str	r3, [r5, #0]
 8025f2a:	d030      	beq.n	8025f8e <__sflush_r+0x92>
 8025f2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025f2e:	89a3      	ldrh	r3, [r4, #12]
 8025f30:	0759      	lsls	r1, r3, #29
 8025f32:	d505      	bpl.n	8025f40 <__sflush_r+0x44>
 8025f34:	6863      	ldr	r3, [r4, #4]
 8025f36:	1ad2      	subs	r2, r2, r3
 8025f38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025f3a:	b10b      	cbz	r3, 8025f40 <__sflush_r+0x44>
 8025f3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025f3e:	1ad2      	subs	r2, r2, r3
 8025f40:	2300      	movs	r3, #0
 8025f42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025f44:	6a21      	ldr	r1, [r4, #32]
 8025f46:	4628      	mov	r0, r5
 8025f48:	47b0      	blx	r6
 8025f4a:	1c43      	adds	r3, r0, #1
 8025f4c:	89a3      	ldrh	r3, [r4, #12]
 8025f4e:	d106      	bne.n	8025f5e <__sflush_r+0x62>
 8025f50:	6829      	ldr	r1, [r5, #0]
 8025f52:	291d      	cmp	r1, #29
 8025f54:	d82b      	bhi.n	8025fae <__sflush_r+0xb2>
 8025f56:	4a2a      	ldr	r2, [pc, #168]	@ (8026000 <__sflush_r+0x104>)
 8025f58:	410a      	asrs	r2, r1
 8025f5a:	07d6      	lsls	r6, r2, #31
 8025f5c:	d427      	bmi.n	8025fae <__sflush_r+0xb2>
 8025f5e:	2200      	movs	r2, #0
 8025f60:	6062      	str	r2, [r4, #4]
 8025f62:	04d9      	lsls	r1, r3, #19
 8025f64:	6922      	ldr	r2, [r4, #16]
 8025f66:	6022      	str	r2, [r4, #0]
 8025f68:	d504      	bpl.n	8025f74 <__sflush_r+0x78>
 8025f6a:	1c42      	adds	r2, r0, #1
 8025f6c:	d101      	bne.n	8025f72 <__sflush_r+0x76>
 8025f6e:	682b      	ldr	r3, [r5, #0]
 8025f70:	b903      	cbnz	r3, 8025f74 <__sflush_r+0x78>
 8025f72:	6560      	str	r0, [r4, #84]	@ 0x54
 8025f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025f76:	602f      	str	r7, [r5, #0]
 8025f78:	b1b9      	cbz	r1, 8025faa <__sflush_r+0xae>
 8025f7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025f7e:	4299      	cmp	r1, r3
 8025f80:	d002      	beq.n	8025f88 <__sflush_r+0x8c>
 8025f82:	4628      	mov	r0, r5
 8025f84:	f7fe fa6e 	bl	8024464 <_free_r>
 8025f88:	2300      	movs	r3, #0
 8025f8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8025f8c:	e00d      	b.n	8025faa <__sflush_r+0xae>
 8025f8e:	2301      	movs	r3, #1
 8025f90:	4628      	mov	r0, r5
 8025f92:	47b0      	blx	r6
 8025f94:	4602      	mov	r2, r0
 8025f96:	1c50      	adds	r0, r2, #1
 8025f98:	d1c9      	bne.n	8025f2e <__sflush_r+0x32>
 8025f9a:	682b      	ldr	r3, [r5, #0]
 8025f9c:	2b00      	cmp	r3, #0
 8025f9e:	d0c6      	beq.n	8025f2e <__sflush_r+0x32>
 8025fa0:	2b1d      	cmp	r3, #29
 8025fa2:	d001      	beq.n	8025fa8 <__sflush_r+0xac>
 8025fa4:	2b16      	cmp	r3, #22
 8025fa6:	d11e      	bne.n	8025fe6 <__sflush_r+0xea>
 8025fa8:	602f      	str	r7, [r5, #0]
 8025faa:	2000      	movs	r0, #0
 8025fac:	e022      	b.n	8025ff4 <__sflush_r+0xf8>
 8025fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025fb2:	b21b      	sxth	r3, r3
 8025fb4:	e01b      	b.n	8025fee <__sflush_r+0xf2>
 8025fb6:	690f      	ldr	r7, [r1, #16]
 8025fb8:	2f00      	cmp	r7, #0
 8025fba:	d0f6      	beq.n	8025faa <__sflush_r+0xae>
 8025fbc:	0793      	lsls	r3, r2, #30
 8025fbe:	680e      	ldr	r6, [r1, #0]
 8025fc0:	bf08      	it	eq
 8025fc2:	694b      	ldreq	r3, [r1, #20]
 8025fc4:	600f      	str	r7, [r1, #0]
 8025fc6:	bf18      	it	ne
 8025fc8:	2300      	movne	r3, #0
 8025fca:	eba6 0807 	sub.w	r8, r6, r7
 8025fce:	608b      	str	r3, [r1, #8]
 8025fd0:	f1b8 0f00 	cmp.w	r8, #0
 8025fd4:	dde9      	ble.n	8025faa <__sflush_r+0xae>
 8025fd6:	6a21      	ldr	r1, [r4, #32]
 8025fd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025fda:	4643      	mov	r3, r8
 8025fdc:	463a      	mov	r2, r7
 8025fde:	4628      	mov	r0, r5
 8025fe0:	47b0      	blx	r6
 8025fe2:	2800      	cmp	r0, #0
 8025fe4:	dc08      	bgt.n	8025ff8 <__sflush_r+0xfc>
 8025fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025fee:	81a3      	strh	r3, [r4, #12]
 8025ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ff8:	4407      	add	r7, r0
 8025ffa:	eba8 0800 	sub.w	r8, r8, r0
 8025ffe:	e7e7      	b.n	8025fd0 <__sflush_r+0xd4>
 8026000:	dfbffffe 	.word	0xdfbffffe

08026004 <_fflush_r>:
 8026004:	b538      	push	{r3, r4, r5, lr}
 8026006:	690b      	ldr	r3, [r1, #16]
 8026008:	4605      	mov	r5, r0
 802600a:	460c      	mov	r4, r1
 802600c:	b913      	cbnz	r3, 8026014 <_fflush_r+0x10>
 802600e:	2500      	movs	r5, #0
 8026010:	4628      	mov	r0, r5
 8026012:	bd38      	pop	{r3, r4, r5, pc}
 8026014:	b118      	cbz	r0, 802601e <_fflush_r+0x1a>
 8026016:	6a03      	ldr	r3, [r0, #32]
 8026018:	b90b      	cbnz	r3, 802601e <_fflush_r+0x1a>
 802601a:	f7fd f98d 	bl	8023338 <__sinit>
 802601e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026022:	2b00      	cmp	r3, #0
 8026024:	d0f3      	beq.n	802600e <_fflush_r+0xa>
 8026026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026028:	07d0      	lsls	r0, r2, #31
 802602a:	d404      	bmi.n	8026036 <_fflush_r+0x32>
 802602c:	0599      	lsls	r1, r3, #22
 802602e:	d402      	bmi.n	8026036 <_fflush_r+0x32>
 8026030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026032:	f7fd fc12 	bl	802385a <__retarget_lock_acquire_recursive>
 8026036:	4628      	mov	r0, r5
 8026038:	4621      	mov	r1, r4
 802603a:	f7ff ff5f 	bl	8025efc <__sflush_r>
 802603e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026040:	07da      	lsls	r2, r3, #31
 8026042:	4605      	mov	r5, r0
 8026044:	d4e4      	bmi.n	8026010 <_fflush_r+0xc>
 8026046:	89a3      	ldrh	r3, [r4, #12]
 8026048:	059b      	lsls	r3, r3, #22
 802604a:	d4e1      	bmi.n	8026010 <_fflush_r+0xc>
 802604c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802604e:	f7fd fc05 	bl	802385c <__retarget_lock_release_recursive>
 8026052:	e7dd      	b.n	8026010 <_fflush_r+0xc>

08026054 <__swhatbuf_r>:
 8026054:	b570      	push	{r4, r5, r6, lr}
 8026056:	460c      	mov	r4, r1
 8026058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802605c:	2900      	cmp	r1, #0
 802605e:	b096      	sub	sp, #88	@ 0x58
 8026060:	4615      	mov	r5, r2
 8026062:	461e      	mov	r6, r3
 8026064:	da0d      	bge.n	8026082 <__swhatbuf_r+0x2e>
 8026066:	89a3      	ldrh	r3, [r4, #12]
 8026068:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802606c:	f04f 0100 	mov.w	r1, #0
 8026070:	bf14      	ite	ne
 8026072:	2340      	movne	r3, #64	@ 0x40
 8026074:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026078:	2000      	movs	r0, #0
 802607a:	6031      	str	r1, [r6, #0]
 802607c:	602b      	str	r3, [r5, #0]
 802607e:	b016      	add	sp, #88	@ 0x58
 8026080:	bd70      	pop	{r4, r5, r6, pc}
 8026082:	466a      	mov	r2, sp
 8026084:	f000 f8ac 	bl	80261e0 <_fstat_r>
 8026088:	2800      	cmp	r0, #0
 802608a:	dbec      	blt.n	8026066 <__swhatbuf_r+0x12>
 802608c:	9901      	ldr	r1, [sp, #4]
 802608e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026092:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026096:	4259      	negs	r1, r3
 8026098:	4159      	adcs	r1, r3
 802609a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802609e:	e7eb      	b.n	8026078 <__swhatbuf_r+0x24>

080260a0 <__smakebuf_r>:
 80260a0:	898b      	ldrh	r3, [r1, #12]
 80260a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80260a4:	079d      	lsls	r5, r3, #30
 80260a6:	4606      	mov	r6, r0
 80260a8:	460c      	mov	r4, r1
 80260aa:	d507      	bpl.n	80260bc <__smakebuf_r+0x1c>
 80260ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80260b0:	6023      	str	r3, [r4, #0]
 80260b2:	6123      	str	r3, [r4, #16]
 80260b4:	2301      	movs	r3, #1
 80260b6:	6163      	str	r3, [r4, #20]
 80260b8:	b003      	add	sp, #12
 80260ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260bc:	ab01      	add	r3, sp, #4
 80260be:	466a      	mov	r2, sp
 80260c0:	f7ff ffc8 	bl	8026054 <__swhatbuf_r>
 80260c4:	9f00      	ldr	r7, [sp, #0]
 80260c6:	4605      	mov	r5, r0
 80260c8:	4639      	mov	r1, r7
 80260ca:	4630      	mov	r0, r6
 80260cc:	f7fc f8ac 	bl	8022228 <_malloc_r>
 80260d0:	b948      	cbnz	r0, 80260e6 <__smakebuf_r+0x46>
 80260d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260d6:	059a      	lsls	r2, r3, #22
 80260d8:	d4ee      	bmi.n	80260b8 <__smakebuf_r+0x18>
 80260da:	f023 0303 	bic.w	r3, r3, #3
 80260de:	f043 0302 	orr.w	r3, r3, #2
 80260e2:	81a3      	strh	r3, [r4, #12]
 80260e4:	e7e2      	b.n	80260ac <__smakebuf_r+0xc>
 80260e6:	89a3      	ldrh	r3, [r4, #12]
 80260e8:	6020      	str	r0, [r4, #0]
 80260ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80260ee:	81a3      	strh	r3, [r4, #12]
 80260f0:	9b01      	ldr	r3, [sp, #4]
 80260f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80260f6:	b15b      	cbz	r3, 8026110 <__smakebuf_r+0x70>
 80260f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80260fc:	4630      	mov	r0, r6
 80260fe:	f000 f881 	bl	8026204 <_isatty_r>
 8026102:	b128      	cbz	r0, 8026110 <__smakebuf_r+0x70>
 8026104:	89a3      	ldrh	r3, [r4, #12]
 8026106:	f023 0303 	bic.w	r3, r3, #3
 802610a:	f043 0301 	orr.w	r3, r3, #1
 802610e:	81a3      	strh	r3, [r4, #12]
 8026110:	89a3      	ldrh	r3, [r4, #12]
 8026112:	431d      	orrs	r5, r3
 8026114:	81a5      	strh	r5, [r4, #12]
 8026116:	e7cf      	b.n	80260b8 <__smakebuf_r+0x18>

08026118 <_putc_r>:
 8026118:	b570      	push	{r4, r5, r6, lr}
 802611a:	460d      	mov	r5, r1
 802611c:	4614      	mov	r4, r2
 802611e:	4606      	mov	r6, r0
 8026120:	b118      	cbz	r0, 802612a <_putc_r+0x12>
 8026122:	6a03      	ldr	r3, [r0, #32]
 8026124:	b90b      	cbnz	r3, 802612a <_putc_r+0x12>
 8026126:	f7fd f907 	bl	8023338 <__sinit>
 802612a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802612c:	07d8      	lsls	r0, r3, #31
 802612e:	d405      	bmi.n	802613c <_putc_r+0x24>
 8026130:	89a3      	ldrh	r3, [r4, #12]
 8026132:	0599      	lsls	r1, r3, #22
 8026134:	d402      	bmi.n	802613c <_putc_r+0x24>
 8026136:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026138:	f7fd fb8f 	bl	802385a <__retarget_lock_acquire_recursive>
 802613c:	68a3      	ldr	r3, [r4, #8]
 802613e:	3b01      	subs	r3, #1
 8026140:	2b00      	cmp	r3, #0
 8026142:	60a3      	str	r3, [r4, #8]
 8026144:	da05      	bge.n	8026152 <_putc_r+0x3a>
 8026146:	69a2      	ldr	r2, [r4, #24]
 8026148:	4293      	cmp	r3, r2
 802614a:	db12      	blt.n	8026172 <_putc_r+0x5a>
 802614c:	b2eb      	uxtb	r3, r5
 802614e:	2b0a      	cmp	r3, #10
 8026150:	d00f      	beq.n	8026172 <_putc_r+0x5a>
 8026152:	6823      	ldr	r3, [r4, #0]
 8026154:	1c5a      	adds	r2, r3, #1
 8026156:	6022      	str	r2, [r4, #0]
 8026158:	701d      	strb	r5, [r3, #0]
 802615a:	b2ed      	uxtb	r5, r5
 802615c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802615e:	07da      	lsls	r2, r3, #31
 8026160:	d405      	bmi.n	802616e <_putc_r+0x56>
 8026162:	89a3      	ldrh	r3, [r4, #12]
 8026164:	059b      	lsls	r3, r3, #22
 8026166:	d402      	bmi.n	802616e <_putc_r+0x56>
 8026168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802616a:	f7fd fb77 	bl	802385c <__retarget_lock_release_recursive>
 802616e:	4628      	mov	r0, r5
 8026170:	bd70      	pop	{r4, r5, r6, pc}
 8026172:	4629      	mov	r1, r5
 8026174:	4622      	mov	r2, r4
 8026176:	4630      	mov	r0, r6
 8026178:	f7fd f9c5 	bl	8023506 <__swbuf_r>
 802617c:	4605      	mov	r5, r0
 802617e:	e7ed      	b.n	802615c <_putc_r+0x44>

08026180 <_raise_r>:
 8026180:	291f      	cmp	r1, #31
 8026182:	b538      	push	{r3, r4, r5, lr}
 8026184:	4605      	mov	r5, r0
 8026186:	460c      	mov	r4, r1
 8026188:	d904      	bls.n	8026194 <_raise_r+0x14>
 802618a:	2316      	movs	r3, #22
 802618c:	6003      	str	r3, [r0, #0]
 802618e:	f04f 30ff 	mov.w	r0, #4294967295
 8026192:	bd38      	pop	{r3, r4, r5, pc}
 8026194:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026196:	b112      	cbz	r2, 802619e <_raise_r+0x1e>
 8026198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802619c:	b94b      	cbnz	r3, 80261b2 <_raise_r+0x32>
 802619e:	4628      	mov	r0, r5
 80261a0:	f000 f852 	bl	8026248 <_getpid_r>
 80261a4:	4622      	mov	r2, r4
 80261a6:	4601      	mov	r1, r0
 80261a8:	4628      	mov	r0, r5
 80261aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261ae:	f000 b839 	b.w	8026224 <_kill_r>
 80261b2:	2b01      	cmp	r3, #1
 80261b4:	d00a      	beq.n	80261cc <_raise_r+0x4c>
 80261b6:	1c59      	adds	r1, r3, #1
 80261b8:	d103      	bne.n	80261c2 <_raise_r+0x42>
 80261ba:	2316      	movs	r3, #22
 80261bc:	6003      	str	r3, [r0, #0]
 80261be:	2001      	movs	r0, #1
 80261c0:	e7e7      	b.n	8026192 <_raise_r+0x12>
 80261c2:	2100      	movs	r1, #0
 80261c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80261c8:	4620      	mov	r0, r4
 80261ca:	4798      	blx	r3
 80261cc:	2000      	movs	r0, #0
 80261ce:	e7e0      	b.n	8026192 <_raise_r+0x12>

080261d0 <raise>:
 80261d0:	4b02      	ldr	r3, [pc, #8]	@ (80261dc <raise+0xc>)
 80261d2:	4601      	mov	r1, r0
 80261d4:	6818      	ldr	r0, [r3, #0]
 80261d6:	f7ff bfd3 	b.w	8026180 <_raise_r>
 80261da:	bf00      	nop
 80261dc:	240007ac 	.word	0x240007ac

080261e0 <_fstat_r>:
 80261e0:	b538      	push	{r3, r4, r5, lr}
 80261e2:	4d07      	ldr	r5, [pc, #28]	@ (8026200 <_fstat_r+0x20>)
 80261e4:	2300      	movs	r3, #0
 80261e6:	4604      	mov	r4, r0
 80261e8:	4608      	mov	r0, r1
 80261ea:	4611      	mov	r1, r2
 80261ec:	602b      	str	r3, [r5, #0]
 80261ee:	f7f4 fec7 	bl	801af80 <_fstat>
 80261f2:	1c43      	adds	r3, r0, #1
 80261f4:	d102      	bne.n	80261fc <_fstat_r+0x1c>
 80261f6:	682b      	ldr	r3, [r5, #0]
 80261f8:	b103      	cbz	r3, 80261fc <_fstat_r+0x1c>
 80261fa:	6023      	str	r3, [r4, #0]
 80261fc:	bd38      	pop	{r3, r4, r5, pc}
 80261fe:	bf00      	nop
 8026200:	24004034 	.word	0x24004034

08026204 <_isatty_r>:
 8026204:	b538      	push	{r3, r4, r5, lr}
 8026206:	4d06      	ldr	r5, [pc, #24]	@ (8026220 <_isatty_r+0x1c>)
 8026208:	2300      	movs	r3, #0
 802620a:	4604      	mov	r4, r0
 802620c:	4608      	mov	r0, r1
 802620e:	602b      	str	r3, [r5, #0]
 8026210:	f7f4 fec6 	bl	801afa0 <_isatty>
 8026214:	1c43      	adds	r3, r0, #1
 8026216:	d102      	bne.n	802621e <_isatty_r+0x1a>
 8026218:	682b      	ldr	r3, [r5, #0]
 802621a:	b103      	cbz	r3, 802621e <_isatty_r+0x1a>
 802621c:	6023      	str	r3, [r4, #0]
 802621e:	bd38      	pop	{r3, r4, r5, pc}
 8026220:	24004034 	.word	0x24004034

08026224 <_kill_r>:
 8026224:	b538      	push	{r3, r4, r5, lr}
 8026226:	4d07      	ldr	r5, [pc, #28]	@ (8026244 <_kill_r+0x20>)
 8026228:	2300      	movs	r3, #0
 802622a:	4604      	mov	r4, r0
 802622c:	4608      	mov	r0, r1
 802622e:	4611      	mov	r1, r2
 8026230:	602b      	str	r3, [r5, #0]
 8026232:	f7f4 fe61 	bl	801aef8 <_kill>
 8026236:	1c43      	adds	r3, r0, #1
 8026238:	d102      	bne.n	8026240 <_kill_r+0x1c>
 802623a:	682b      	ldr	r3, [r5, #0]
 802623c:	b103      	cbz	r3, 8026240 <_kill_r+0x1c>
 802623e:	6023      	str	r3, [r4, #0]
 8026240:	bd38      	pop	{r3, r4, r5, pc}
 8026242:	bf00      	nop
 8026244:	24004034 	.word	0x24004034

08026248 <_getpid_r>:
 8026248:	f7f4 be4e 	b.w	801aee8 <_getpid>
 802624c:	0000      	movs	r0, r0
	...

08026250 <nan>:
 8026250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8026258 <nan+0x8>
 8026254:	4770      	bx	lr
 8026256:	bf00      	nop
 8026258:	00000000 	.word	0x00000000
 802625c:	7ff80000 	.word	0x7ff80000

08026260 <rshift>:
 8026260:	6903      	ldr	r3, [r0, #16]
 8026262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8026266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802626a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802626e:	f100 0414 	add.w	r4, r0, #20
 8026272:	dd45      	ble.n	8026300 <rshift+0xa0>
 8026274:	f011 011f 	ands.w	r1, r1, #31
 8026278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802627c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8026280:	d10c      	bne.n	802629c <rshift+0x3c>
 8026282:	f100 0710 	add.w	r7, r0, #16
 8026286:	4629      	mov	r1, r5
 8026288:	42b1      	cmp	r1, r6
 802628a:	d334      	bcc.n	80262f6 <rshift+0x96>
 802628c:	1a9b      	subs	r3, r3, r2
 802628e:	009b      	lsls	r3, r3, #2
 8026290:	1eea      	subs	r2, r5, #3
 8026292:	4296      	cmp	r6, r2
 8026294:	bf38      	it	cc
 8026296:	2300      	movcc	r3, #0
 8026298:	4423      	add	r3, r4
 802629a:	e015      	b.n	80262c8 <rshift+0x68>
 802629c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80262a0:	f1c1 0820 	rsb	r8, r1, #32
 80262a4:	40cf      	lsrs	r7, r1
 80262a6:	f105 0e04 	add.w	lr, r5, #4
 80262aa:	46a1      	mov	r9, r4
 80262ac:	4576      	cmp	r6, lr
 80262ae:	46f4      	mov	ip, lr
 80262b0:	d815      	bhi.n	80262de <rshift+0x7e>
 80262b2:	1a9a      	subs	r2, r3, r2
 80262b4:	0092      	lsls	r2, r2, #2
 80262b6:	3a04      	subs	r2, #4
 80262b8:	3501      	adds	r5, #1
 80262ba:	42ae      	cmp	r6, r5
 80262bc:	bf38      	it	cc
 80262be:	2200      	movcc	r2, #0
 80262c0:	18a3      	adds	r3, r4, r2
 80262c2:	50a7      	str	r7, [r4, r2]
 80262c4:	b107      	cbz	r7, 80262c8 <rshift+0x68>
 80262c6:	3304      	adds	r3, #4
 80262c8:	1b1a      	subs	r2, r3, r4
 80262ca:	42a3      	cmp	r3, r4
 80262cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80262d0:	bf08      	it	eq
 80262d2:	2300      	moveq	r3, #0
 80262d4:	6102      	str	r2, [r0, #16]
 80262d6:	bf08      	it	eq
 80262d8:	6143      	streq	r3, [r0, #20]
 80262da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80262de:	f8dc c000 	ldr.w	ip, [ip]
 80262e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80262e6:	ea4c 0707 	orr.w	r7, ip, r7
 80262ea:	f849 7b04 	str.w	r7, [r9], #4
 80262ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80262f2:	40cf      	lsrs	r7, r1
 80262f4:	e7da      	b.n	80262ac <rshift+0x4c>
 80262f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80262fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80262fe:	e7c3      	b.n	8026288 <rshift+0x28>
 8026300:	4623      	mov	r3, r4
 8026302:	e7e1      	b.n	80262c8 <rshift+0x68>

08026304 <__hexdig_fun>:
 8026304:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8026308:	2b09      	cmp	r3, #9
 802630a:	d802      	bhi.n	8026312 <__hexdig_fun+0xe>
 802630c:	3820      	subs	r0, #32
 802630e:	b2c0      	uxtb	r0, r0
 8026310:	4770      	bx	lr
 8026312:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8026316:	2b05      	cmp	r3, #5
 8026318:	d801      	bhi.n	802631e <__hexdig_fun+0x1a>
 802631a:	3847      	subs	r0, #71	@ 0x47
 802631c:	e7f7      	b.n	802630e <__hexdig_fun+0xa>
 802631e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8026322:	2b05      	cmp	r3, #5
 8026324:	d801      	bhi.n	802632a <__hexdig_fun+0x26>
 8026326:	3827      	subs	r0, #39	@ 0x27
 8026328:	e7f1      	b.n	802630e <__hexdig_fun+0xa>
 802632a:	2000      	movs	r0, #0
 802632c:	4770      	bx	lr
	...

08026330 <__gethex>:
 8026330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026334:	b085      	sub	sp, #20
 8026336:	468a      	mov	sl, r1
 8026338:	9302      	str	r3, [sp, #8]
 802633a:	680b      	ldr	r3, [r1, #0]
 802633c:	9001      	str	r0, [sp, #4]
 802633e:	4690      	mov	r8, r2
 8026340:	1c9c      	adds	r4, r3, #2
 8026342:	46a1      	mov	r9, r4
 8026344:	f814 0b01 	ldrb.w	r0, [r4], #1
 8026348:	2830      	cmp	r0, #48	@ 0x30
 802634a:	d0fa      	beq.n	8026342 <__gethex+0x12>
 802634c:	eba9 0303 	sub.w	r3, r9, r3
 8026350:	f1a3 0b02 	sub.w	fp, r3, #2
 8026354:	f7ff ffd6 	bl	8026304 <__hexdig_fun>
 8026358:	4605      	mov	r5, r0
 802635a:	2800      	cmp	r0, #0
 802635c:	d168      	bne.n	8026430 <__gethex+0x100>
 802635e:	49a0      	ldr	r1, [pc, #640]	@ (80265e0 <__gethex+0x2b0>)
 8026360:	2201      	movs	r2, #1
 8026362:	4648      	mov	r0, r9
 8026364:	f7fd f9a3 	bl	80236ae <strncmp>
 8026368:	4607      	mov	r7, r0
 802636a:	2800      	cmp	r0, #0
 802636c:	d167      	bne.n	802643e <__gethex+0x10e>
 802636e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8026372:	4626      	mov	r6, r4
 8026374:	f7ff ffc6 	bl	8026304 <__hexdig_fun>
 8026378:	2800      	cmp	r0, #0
 802637a:	d062      	beq.n	8026442 <__gethex+0x112>
 802637c:	4623      	mov	r3, r4
 802637e:	7818      	ldrb	r0, [r3, #0]
 8026380:	2830      	cmp	r0, #48	@ 0x30
 8026382:	4699      	mov	r9, r3
 8026384:	f103 0301 	add.w	r3, r3, #1
 8026388:	d0f9      	beq.n	802637e <__gethex+0x4e>
 802638a:	f7ff ffbb 	bl	8026304 <__hexdig_fun>
 802638e:	fab0 f580 	clz	r5, r0
 8026392:	096d      	lsrs	r5, r5, #5
 8026394:	f04f 0b01 	mov.w	fp, #1
 8026398:	464a      	mov	r2, r9
 802639a:	4616      	mov	r6, r2
 802639c:	3201      	adds	r2, #1
 802639e:	7830      	ldrb	r0, [r6, #0]
 80263a0:	f7ff ffb0 	bl	8026304 <__hexdig_fun>
 80263a4:	2800      	cmp	r0, #0
 80263a6:	d1f8      	bne.n	802639a <__gethex+0x6a>
 80263a8:	498d      	ldr	r1, [pc, #564]	@ (80265e0 <__gethex+0x2b0>)
 80263aa:	2201      	movs	r2, #1
 80263ac:	4630      	mov	r0, r6
 80263ae:	f7fd f97e 	bl	80236ae <strncmp>
 80263b2:	2800      	cmp	r0, #0
 80263b4:	d13f      	bne.n	8026436 <__gethex+0x106>
 80263b6:	b944      	cbnz	r4, 80263ca <__gethex+0x9a>
 80263b8:	1c74      	adds	r4, r6, #1
 80263ba:	4622      	mov	r2, r4
 80263bc:	4616      	mov	r6, r2
 80263be:	3201      	adds	r2, #1
 80263c0:	7830      	ldrb	r0, [r6, #0]
 80263c2:	f7ff ff9f 	bl	8026304 <__hexdig_fun>
 80263c6:	2800      	cmp	r0, #0
 80263c8:	d1f8      	bne.n	80263bc <__gethex+0x8c>
 80263ca:	1ba4      	subs	r4, r4, r6
 80263cc:	00a7      	lsls	r7, r4, #2
 80263ce:	7833      	ldrb	r3, [r6, #0]
 80263d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80263d4:	2b50      	cmp	r3, #80	@ 0x50
 80263d6:	d13e      	bne.n	8026456 <__gethex+0x126>
 80263d8:	7873      	ldrb	r3, [r6, #1]
 80263da:	2b2b      	cmp	r3, #43	@ 0x2b
 80263dc:	d033      	beq.n	8026446 <__gethex+0x116>
 80263de:	2b2d      	cmp	r3, #45	@ 0x2d
 80263e0:	d034      	beq.n	802644c <__gethex+0x11c>
 80263e2:	1c71      	adds	r1, r6, #1
 80263e4:	2400      	movs	r4, #0
 80263e6:	7808      	ldrb	r0, [r1, #0]
 80263e8:	f7ff ff8c 	bl	8026304 <__hexdig_fun>
 80263ec:	1e43      	subs	r3, r0, #1
 80263ee:	b2db      	uxtb	r3, r3
 80263f0:	2b18      	cmp	r3, #24
 80263f2:	d830      	bhi.n	8026456 <__gethex+0x126>
 80263f4:	f1a0 0210 	sub.w	r2, r0, #16
 80263f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80263fc:	f7ff ff82 	bl	8026304 <__hexdig_fun>
 8026400:	f100 3cff 	add.w	ip, r0, #4294967295
 8026404:	fa5f fc8c 	uxtb.w	ip, ip
 8026408:	f1bc 0f18 	cmp.w	ip, #24
 802640c:	f04f 030a 	mov.w	r3, #10
 8026410:	d91e      	bls.n	8026450 <__gethex+0x120>
 8026412:	b104      	cbz	r4, 8026416 <__gethex+0xe6>
 8026414:	4252      	negs	r2, r2
 8026416:	4417      	add	r7, r2
 8026418:	f8ca 1000 	str.w	r1, [sl]
 802641c:	b1ed      	cbz	r5, 802645a <__gethex+0x12a>
 802641e:	f1bb 0f00 	cmp.w	fp, #0
 8026422:	bf0c      	ite	eq
 8026424:	2506      	moveq	r5, #6
 8026426:	2500      	movne	r5, #0
 8026428:	4628      	mov	r0, r5
 802642a:	b005      	add	sp, #20
 802642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026430:	2500      	movs	r5, #0
 8026432:	462c      	mov	r4, r5
 8026434:	e7b0      	b.n	8026398 <__gethex+0x68>
 8026436:	2c00      	cmp	r4, #0
 8026438:	d1c7      	bne.n	80263ca <__gethex+0x9a>
 802643a:	4627      	mov	r7, r4
 802643c:	e7c7      	b.n	80263ce <__gethex+0x9e>
 802643e:	464e      	mov	r6, r9
 8026440:	462f      	mov	r7, r5
 8026442:	2501      	movs	r5, #1
 8026444:	e7c3      	b.n	80263ce <__gethex+0x9e>
 8026446:	2400      	movs	r4, #0
 8026448:	1cb1      	adds	r1, r6, #2
 802644a:	e7cc      	b.n	80263e6 <__gethex+0xb6>
 802644c:	2401      	movs	r4, #1
 802644e:	e7fb      	b.n	8026448 <__gethex+0x118>
 8026450:	fb03 0002 	mla	r0, r3, r2, r0
 8026454:	e7ce      	b.n	80263f4 <__gethex+0xc4>
 8026456:	4631      	mov	r1, r6
 8026458:	e7de      	b.n	8026418 <__gethex+0xe8>
 802645a:	eba6 0309 	sub.w	r3, r6, r9
 802645e:	3b01      	subs	r3, #1
 8026460:	4629      	mov	r1, r5
 8026462:	2b07      	cmp	r3, #7
 8026464:	dc0a      	bgt.n	802647c <__gethex+0x14c>
 8026466:	9801      	ldr	r0, [sp, #4]
 8026468:	f7fe f846 	bl	80244f8 <_Balloc>
 802646c:	4604      	mov	r4, r0
 802646e:	b940      	cbnz	r0, 8026482 <__gethex+0x152>
 8026470:	4b5c      	ldr	r3, [pc, #368]	@ (80265e4 <__gethex+0x2b4>)
 8026472:	4602      	mov	r2, r0
 8026474:	21e4      	movs	r1, #228	@ 0xe4
 8026476:	485c      	ldr	r0, [pc, #368]	@ (80265e8 <__gethex+0x2b8>)
 8026478:	f7fb fe66 	bl	8022148 <__assert_func>
 802647c:	3101      	adds	r1, #1
 802647e:	105b      	asrs	r3, r3, #1
 8026480:	e7ef      	b.n	8026462 <__gethex+0x132>
 8026482:	f100 0a14 	add.w	sl, r0, #20
 8026486:	2300      	movs	r3, #0
 8026488:	4655      	mov	r5, sl
 802648a:	469b      	mov	fp, r3
 802648c:	45b1      	cmp	r9, r6
 802648e:	d337      	bcc.n	8026500 <__gethex+0x1d0>
 8026490:	f845 bb04 	str.w	fp, [r5], #4
 8026494:	eba5 050a 	sub.w	r5, r5, sl
 8026498:	10ad      	asrs	r5, r5, #2
 802649a:	6125      	str	r5, [r4, #16]
 802649c:	4658      	mov	r0, fp
 802649e:	f7fe f91d 	bl	80246dc <__hi0bits>
 80264a2:	016d      	lsls	r5, r5, #5
 80264a4:	f8d8 6000 	ldr.w	r6, [r8]
 80264a8:	1a2d      	subs	r5, r5, r0
 80264aa:	42b5      	cmp	r5, r6
 80264ac:	dd54      	ble.n	8026558 <__gethex+0x228>
 80264ae:	1bad      	subs	r5, r5, r6
 80264b0:	4629      	mov	r1, r5
 80264b2:	4620      	mov	r0, r4
 80264b4:	f7fe fcae 	bl	8024e14 <__any_on>
 80264b8:	4681      	mov	r9, r0
 80264ba:	b178      	cbz	r0, 80264dc <__gethex+0x1ac>
 80264bc:	1e6b      	subs	r3, r5, #1
 80264be:	1159      	asrs	r1, r3, #5
 80264c0:	f003 021f 	and.w	r2, r3, #31
 80264c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80264c8:	f04f 0901 	mov.w	r9, #1
 80264cc:	fa09 f202 	lsl.w	r2, r9, r2
 80264d0:	420a      	tst	r2, r1
 80264d2:	d003      	beq.n	80264dc <__gethex+0x1ac>
 80264d4:	454b      	cmp	r3, r9
 80264d6:	dc36      	bgt.n	8026546 <__gethex+0x216>
 80264d8:	f04f 0902 	mov.w	r9, #2
 80264dc:	4629      	mov	r1, r5
 80264de:	4620      	mov	r0, r4
 80264e0:	f7ff febe 	bl	8026260 <rshift>
 80264e4:	442f      	add	r7, r5
 80264e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80264ea:	42bb      	cmp	r3, r7
 80264ec:	da42      	bge.n	8026574 <__gethex+0x244>
 80264ee:	9801      	ldr	r0, [sp, #4]
 80264f0:	4621      	mov	r1, r4
 80264f2:	f7fe f841 	bl	8024578 <_Bfree>
 80264f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80264f8:	2300      	movs	r3, #0
 80264fa:	6013      	str	r3, [r2, #0]
 80264fc:	25a3      	movs	r5, #163	@ 0xa3
 80264fe:	e793      	b.n	8026428 <__gethex+0xf8>
 8026500:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8026504:	2a2e      	cmp	r2, #46	@ 0x2e
 8026506:	d012      	beq.n	802652e <__gethex+0x1fe>
 8026508:	2b20      	cmp	r3, #32
 802650a:	d104      	bne.n	8026516 <__gethex+0x1e6>
 802650c:	f845 bb04 	str.w	fp, [r5], #4
 8026510:	f04f 0b00 	mov.w	fp, #0
 8026514:	465b      	mov	r3, fp
 8026516:	7830      	ldrb	r0, [r6, #0]
 8026518:	9303      	str	r3, [sp, #12]
 802651a:	f7ff fef3 	bl	8026304 <__hexdig_fun>
 802651e:	9b03      	ldr	r3, [sp, #12]
 8026520:	f000 000f 	and.w	r0, r0, #15
 8026524:	4098      	lsls	r0, r3
 8026526:	ea4b 0b00 	orr.w	fp, fp, r0
 802652a:	3304      	adds	r3, #4
 802652c:	e7ae      	b.n	802648c <__gethex+0x15c>
 802652e:	45b1      	cmp	r9, r6
 8026530:	d8ea      	bhi.n	8026508 <__gethex+0x1d8>
 8026532:	492b      	ldr	r1, [pc, #172]	@ (80265e0 <__gethex+0x2b0>)
 8026534:	9303      	str	r3, [sp, #12]
 8026536:	2201      	movs	r2, #1
 8026538:	4630      	mov	r0, r6
 802653a:	f7fd f8b8 	bl	80236ae <strncmp>
 802653e:	9b03      	ldr	r3, [sp, #12]
 8026540:	2800      	cmp	r0, #0
 8026542:	d1e1      	bne.n	8026508 <__gethex+0x1d8>
 8026544:	e7a2      	b.n	802648c <__gethex+0x15c>
 8026546:	1ea9      	subs	r1, r5, #2
 8026548:	4620      	mov	r0, r4
 802654a:	f7fe fc63 	bl	8024e14 <__any_on>
 802654e:	2800      	cmp	r0, #0
 8026550:	d0c2      	beq.n	80264d8 <__gethex+0x1a8>
 8026552:	f04f 0903 	mov.w	r9, #3
 8026556:	e7c1      	b.n	80264dc <__gethex+0x1ac>
 8026558:	da09      	bge.n	802656e <__gethex+0x23e>
 802655a:	1b75      	subs	r5, r6, r5
 802655c:	4621      	mov	r1, r4
 802655e:	9801      	ldr	r0, [sp, #4]
 8026560:	462a      	mov	r2, r5
 8026562:	f7fe fa21 	bl	80249a8 <__lshift>
 8026566:	1b7f      	subs	r7, r7, r5
 8026568:	4604      	mov	r4, r0
 802656a:	f100 0a14 	add.w	sl, r0, #20
 802656e:	f04f 0900 	mov.w	r9, #0
 8026572:	e7b8      	b.n	80264e6 <__gethex+0x1b6>
 8026574:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026578:	42bd      	cmp	r5, r7
 802657a:	dd6f      	ble.n	802665c <__gethex+0x32c>
 802657c:	1bed      	subs	r5, r5, r7
 802657e:	42ae      	cmp	r6, r5
 8026580:	dc34      	bgt.n	80265ec <__gethex+0x2bc>
 8026582:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026586:	2b02      	cmp	r3, #2
 8026588:	d022      	beq.n	80265d0 <__gethex+0x2a0>
 802658a:	2b03      	cmp	r3, #3
 802658c:	d024      	beq.n	80265d8 <__gethex+0x2a8>
 802658e:	2b01      	cmp	r3, #1
 8026590:	d115      	bne.n	80265be <__gethex+0x28e>
 8026592:	42ae      	cmp	r6, r5
 8026594:	d113      	bne.n	80265be <__gethex+0x28e>
 8026596:	2e01      	cmp	r6, #1
 8026598:	d10b      	bne.n	80265b2 <__gethex+0x282>
 802659a:	9a02      	ldr	r2, [sp, #8]
 802659c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80265a0:	6013      	str	r3, [r2, #0]
 80265a2:	2301      	movs	r3, #1
 80265a4:	6123      	str	r3, [r4, #16]
 80265a6:	f8ca 3000 	str.w	r3, [sl]
 80265aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80265ac:	2562      	movs	r5, #98	@ 0x62
 80265ae:	601c      	str	r4, [r3, #0]
 80265b0:	e73a      	b.n	8026428 <__gethex+0xf8>
 80265b2:	1e71      	subs	r1, r6, #1
 80265b4:	4620      	mov	r0, r4
 80265b6:	f7fe fc2d 	bl	8024e14 <__any_on>
 80265ba:	2800      	cmp	r0, #0
 80265bc:	d1ed      	bne.n	802659a <__gethex+0x26a>
 80265be:	9801      	ldr	r0, [sp, #4]
 80265c0:	4621      	mov	r1, r4
 80265c2:	f7fd ffd9 	bl	8024578 <_Bfree>
 80265c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80265c8:	2300      	movs	r3, #0
 80265ca:	6013      	str	r3, [r2, #0]
 80265cc:	2550      	movs	r5, #80	@ 0x50
 80265ce:	e72b      	b.n	8026428 <__gethex+0xf8>
 80265d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265d2:	2b00      	cmp	r3, #0
 80265d4:	d1f3      	bne.n	80265be <__gethex+0x28e>
 80265d6:	e7e0      	b.n	802659a <__gethex+0x26a>
 80265d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265da:	2b00      	cmp	r3, #0
 80265dc:	d1dd      	bne.n	802659a <__gethex+0x26a>
 80265de:	e7ee      	b.n	80265be <__gethex+0x28e>
 80265e0:	08036e08 	.word	0x08036e08
 80265e4:	08036c9e 	.word	0x08036c9e
 80265e8:	08036e79 	.word	0x08036e79
 80265ec:	1e6f      	subs	r7, r5, #1
 80265ee:	f1b9 0f00 	cmp.w	r9, #0
 80265f2:	d130      	bne.n	8026656 <__gethex+0x326>
 80265f4:	b127      	cbz	r7, 8026600 <__gethex+0x2d0>
 80265f6:	4639      	mov	r1, r7
 80265f8:	4620      	mov	r0, r4
 80265fa:	f7fe fc0b 	bl	8024e14 <__any_on>
 80265fe:	4681      	mov	r9, r0
 8026600:	117a      	asrs	r2, r7, #5
 8026602:	2301      	movs	r3, #1
 8026604:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8026608:	f007 071f 	and.w	r7, r7, #31
 802660c:	40bb      	lsls	r3, r7
 802660e:	4213      	tst	r3, r2
 8026610:	4629      	mov	r1, r5
 8026612:	4620      	mov	r0, r4
 8026614:	bf18      	it	ne
 8026616:	f049 0902 	orrne.w	r9, r9, #2
 802661a:	f7ff fe21 	bl	8026260 <rshift>
 802661e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8026622:	1b76      	subs	r6, r6, r5
 8026624:	2502      	movs	r5, #2
 8026626:	f1b9 0f00 	cmp.w	r9, #0
 802662a:	d047      	beq.n	80266bc <__gethex+0x38c>
 802662c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026630:	2b02      	cmp	r3, #2
 8026632:	d015      	beq.n	8026660 <__gethex+0x330>
 8026634:	2b03      	cmp	r3, #3
 8026636:	d017      	beq.n	8026668 <__gethex+0x338>
 8026638:	2b01      	cmp	r3, #1
 802663a:	d109      	bne.n	8026650 <__gethex+0x320>
 802663c:	f019 0f02 	tst.w	r9, #2
 8026640:	d006      	beq.n	8026650 <__gethex+0x320>
 8026642:	f8da 3000 	ldr.w	r3, [sl]
 8026646:	ea49 0903 	orr.w	r9, r9, r3
 802664a:	f019 0f01 	tst.w	r9, #1
 802664e:	d10e      	bne.n	802666e <__gethex+0x33e>
 8026650:	f045 0510 	orr.w	r5, r5, #16
 8026654:	e032      	b.n	80266bc <__gethex+0x38c>
 8026656:	f04f 0901 	mov.w	r9, #1
 802665a:	e7d1      	b.n	8026600 <__gethex+0x2d0>
 802665c:	2501      	movs	r5, #1
 802665e:	e7e2      	b.n	8026626 <__gethex+0x2f6>
 8026660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026662:	f1c3 0301 	rsb	r3, r3, #1
 8026666:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802666a:	2b00      	cmp	r3, #0
 802666c:	d0f0      	beq.n	8026650 <__gethex+0x320>
 802666e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8026672:	f104 0314 	add.w	r3, r4, #20
 8026676:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802667a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802667e:	f04f 0c00 	mov.w	ip, #0
 8026682:	4618      	mov	r0, r3
 8026684:	f853 2b04 	ldr.w	r2, [r3], #4
 8026688:	f1b2 3fff 	cmp.w	r2, #4294967295
 802668c:	d01b      	beq.n	80266c6 <__gethex+0x396>
 802668e:	3201      	adds	r2, #1
 8026690:	6002      	str	r2, [r0, #0]
 8026692:	2d02      	cmp	r5, #2
 8026694:	f104 0314 	add.w	r3, r4, #20
 8026698:	d13c      	bne.n	8026714 <__gethex+0x3e4>
 802669a:	f8d8 2000 	ldr.w	r2, [r8]
 802669e:	3a01      	subs	r2, #1
 80266a0:	42b2      	cmp	r2, r6
 80266a2:	d109      	bne.n	80266b8 <__gethex+0x388>
 80266a4:	1171      	asrs	r1, r6, #5
 80266a6:	2201      	movs	r2, #1
 80266a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80266ac:	f006 061f 	and.w	r6, r6, #31
 80266b0:	fa02 f606 	lsl.w	r6, r2, r6
 80266b4:	421e      	tst	r6, r3
 80266b6:	d13a      	bne.n	802672e <__gethex+0x3fe>
 80266b8:	f045 0520 	orr.w	r5, r5, #32
 80266bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80266be:	601c      	str	r4, [r3, #0]
 80266c0:	9b02      	ldr	r3, [sp, #8]
 80266c2:	601f      	str	r7, [r3, #0]
 80266c4:	e6b0      	b.n	8026428 <__gethex+0xf8>
 80266c6:	4299      	cmp	r1, r3
 80266c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80266cc:	d8d9      	bhi.n	8026682 <__gethex+0x352>
 80266ce:	68a3      	ldr	r3, [r4, #8]
 80266d0:	459b      	cmp	fp, r3
 80266d2:	db17      	blt.n	8026704 <__gethex+0x3d4>
 80266d4:	6861      	ldr	r1, [r4, #4]
 80266d6:	9801      	ldr	r0, [sp, #4]
 80266d8:	3101      	adds	r1, #1
 80266da:	f7fd ff0d 	bl	80244f8 <_Balloc>
 80266de:	4681      	mov	r9, r0
 80266e0:	b918      	cbnz	r0, 80266ea <__gethex+0x3ba>
 80266e2:	4b1a      	ldr	r3, [pc, #104]	@ (802674c <__gethex+0x41c>)
 80266e4:	4602      	mov	r2, r0
 80266e6:	2184      	movs	r1, #132	@ 0x84
 80266e8:	e6c5      	b.n	8026476 <__gethex+0x146>
 80266ea:	6922      	ldr	r2, [r4, #16]
 80266ec:	3202      	adds	r2, #2
 80266ee:	f104 010c 	add.w	r1, r4, #12
 80266f2:	0092      	lsls	r2, r2, #2
 80266f4:	300c      	adds	r0, #12
 80266f6:	f7fd f8ba 	bl	802386e <memcpy>
 80266fa:	4621      	mov	r1, r4
 80266fc:	9801      	ldr	r0, [sp, #4]
 80266fe:	f7fd ff3b 	bl	8024578 <_Bfree>
 8026702:	464c      	mov	r4, r9
 8026704:	6923      	ldr	r3, [r4, #16]
 8026706:	1c5a      	adds	r2, r3, #1
 8026708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802670c:	6122      	str	r2, [r4, #16]
 802670e:	2201      	movs	r2, #1
 8026710:	615a      	str	r2, [r3, #20]
 8026712:	e7be      	b.n	8026692 <__gethex+0x362>
 8026714:	6922      	ldr	r2, [r4, #16]
 8026716:	455a      	cmp	r2, fp
 8026718:	dd0b      	ble.n	8026732 <__gethex+0x402>
 802671a:	2101      	movs	r1, #1
 802671c:	4620      	mov	r0, r4
 802671e:	f7ff fd9f 	bl	8026260 <rshift>
 8026722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026726:	3701      	adds	r7, #1
 8026728:	42bb      	cmp	r3, r7
 802672a:	f6ff aee0 	blt.w	80264ee <__gethex+0x1be>
 802672e:	2501      	movs	r5, #1
 8026730:	e7c2      	b.n	80266b8 <__gethex+0x388>
 8026732:	f016 061f 	ands.w	r6, r6, #31
 8026736:	d0fa      	beq.n	802672e <__gethex+0x3fe>
 8026738:	4453      	add	r3, sl
 802673a:	f1c6 0620 	rsb	r6, r6, #32
 802673e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8026742:	f7fd ffcb 	bl	80246dc <__hi0bits>
 8026746:	42b0      	cmp	r0, r6
 8026748:	dbe7      	blt.n	802671a <__gethex+0x3ea>
 802674a:	e7f0      	b.n	802672e <__gethex+0x3fe>
 802674c:	08036c9e 	.word	0x08036c9e

08026750 <L_shift>:
 8026750:	f1c2 0208 	rsb	r2, r2, #8
 8026754:	0092      	lsls	r2, r2, #2
 8026756:	b570      	push	{r4, r5, r6, lr}
 8026758:	f1c2 0620 	rsb	r6, r2, #32
 802675c:	6843      	ldr	r3, [r0, #4]
 802675e:	6804      	ldr	r4, [r0, #0]
 8026760:	fa03 f506 	lsl.w	r5, r3, r6
 8026764:	432c      	orrs	r4, r5
 8026766:	40d3      	lsrs	r3, r2
 8026768:	6004      	str	r4, [r0, #0]
 802676a:	f840 3f04 	str.w	r3, [r0, #4]!
 802676e:	4288      	cmp	r0, r1
 8026770:	d3f4      	bcc.n	802675c <L_shift+0xc>
 8026772:	bd70      	pop	{r4, r5, r6, pc}

08026774 <__match>:
 8026774:	b530      	push	{r4, r5, lr}
 8026776:	6803      	ldr	r3, [r0, #0]
 8026778:	3301      	adds	r3, #1
 802677a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802677e:	b914      	cbnz	r4, 8026786 <__match+0x12>
 8026780:	6003      	str	r3, [r0, #0]
 8026782:	2001      	movs	r0, #1
 8026784:	bd30      	pop	{r4, r5, pc}
 8026786:	f813 2b01 	ldrb.w	r2, [r3], #1
 802678a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802678e:	2d19      	cmp	r5, #25
 8026790:	bf98      	it	ls
 8026792:	3220      	addls	r2, #32
 8026794:	42a2      	cmp	r2, r4
 8026796:	d0f0      	beq.n	802677a <__match+0x6>
 8026798:	2000      	movs	r0, #0
 802679a:	e7f3      	b.n	8026784 <__match+0x10>

0802679c <__hexnan>:
 802679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267a0:	680b      	ldr	r3, [r1, #0]
 80267a2:	6801      	ldr	r1, [r0, #0]
 80267a4:	115e      	asrs	r6, r3, #5
 80267a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80267aa:	f013 031f 	ands.w	r3, r3, #31
 80267ae:	b087      	sub	sp, #28
 80267b0:	bf18      	it	ne
 80267b2:	3604      	addne	r6, #4
 80267b4:	2500      	movs	r5, #0
 80267b6:	1f37      	subs	r7, r6, #4
 80267b8:	4682      	mov	sl, r0
 80267ba:	4690      	mov	r8, r2
 80267bc:	9301      	str	r3, [sp, #4]
 80267be:	f846 5c04 	str.w	r5, [r6, #-4]
 80267c2:	46b9      	mov	r9, r7
 80267c4:	463c      	mov	r4, r7
 80267c6:	9502      	str	r5, [sp, #8]
 80267c8:	46ab      	mov	fp, r5
 80267ca:	784a      	ldrb	r2, [r1, #1]
 80267cc:	1c4b      	adds	r3, r1, #1
 80267ce:	9303      	str	r3, [sp, #12]
 80267d0:	b342      	cbz	r2, 8026824 <__hexnan+0x88>
 80267d2:	4610      	mov	r0, r2
 80267d4:	9105      	str	r1, [sp, #20]
 80267d6:	9204      	str	r2, [sp, #16]
 80267d8:	f7ff fd94 	bl	8026304 <__hexdig_fun>
 80267dc:	2800      	cmp	r0, #0
 80267de:	d151      	bne.n	8026884 <__hexnan+0xe8>
 80267e0:	9a04      	ldr	r2, [sp, #16]
 80267e2:	9905      	ldr	r1, [sp, #20]
 80267e4:	2a20      	cmp	r2, #32
 80267e6:	d818      	bhi.n	802681a <__hexnan+0x7e>
 80267e8:	9b02      	ldr	r3, [sp, #8]
 80267ea:	459b      	cmp	fp, r3
 80267ec:	dd13      	ble.n	8026816 <__hexnan+0x7a>
 80267ee:	454c      	cmp	r4, r9
 80267f0:	d206      	bcs.n	8026800 <__hexnan+0x64>
 80267f2:	2d07      	cmp	r5, #7
 80267f4:	dc04      	bgt.n	8026800 <__hexnan+0x64>
 80267f6:	462a      	mov	r2, r5
 80267f8:	4649      	mov	r1, r9
 80267fa:	4620      	mov	r0, r4
 80267fc:	f7ff ffa8 	bl	8026750 <L_shift>
 8026800:	4544      	cmp	r4, r8
 8026802:	d952      	bls.n	80268aa <__hexnan+0x10e>
 8026804:	2300      	movs	r3, #0
 8026806:	f1a4 0904 	sub.w	r9, r4, #4
 802680a:	f844 3c04 	str.w	r3, [r4, #-4]
 802680e:	f8cd b008 	str.w	fp, [sp, #8]
 8026812:	464c      	mov	r4, r9
 8026814:	461d      	mov	r5, r3
 8026816:	9903      	ldr	r1, [sp, #12]
 8026818:	e7d7      	b.n	80267ca <__hexnan+0x2e>
 802681a:	2a29      	cmp	r2, #41	@ 0x29
 802681c:	d157      	bne.n	80268ce <__hexnan+0x132>
 802681e:	3102      	adds	r1, #2
 8026820:	f8ca 1000 	str.w	r1, [sl]
 8026824:	f1bb 0f00 	cmp.w	fp, #0
 8026828:	d051      	beq.n	80268ce <__hexnan+0x132>
 802682a:	454c      	cmp	r4, r9
 802682c:	d206      	bcs.n	802683c <__hexnan+0xa0>
 802682e:	2d07      	cmp	r5, #7
 8026830:	dc04      	bgt.n	802683c <__hexnan+0xa0>
 8026832:	462a      	mov	r2, r5
 8026834:	4649      	mov	r1, r9
 8026836:	4620      	mov	r0, r4
 8026838:	f7ff ff8a 	bl	8026750 <L_shift>
 802683c:	4544      	cmp	r4, r8
 802683e:	d936      	bls.n	80268ae <__hexnan+0x112>
 8026840:	f1a8 0204 	sub.w	r2, r8, #4
 8026844:	4623      	mov	r3, r4
 8026846:	f853 1b04 	ldr.w	r1, [r3], #4
 802684a:	f842 1f04 	str.w	r1, [r2, #4]!
 802684e:	429f      	cmp	r7, r3
 8026850:	d2f9      	bcs.n	8026846 <__hexnan+0xaa>
 8026852:	1b3b      	subs	r3, r7, r4
 8026854:	f023 0303 	bic.w	r3, r3, #3
 8026858:	3304      	adds	r3, #4
 802685a:	3401      	adds	r4, #1
 802685c:	3e03      	subs	r6, #3
 802685e:	42b4      	cmp	r4, r6
 8026860:	bf88      	it	hi
 8026862:	2304      	movhi	r3, #4
 8026864:	4443      	add	r3, r8
 8026866:	2200      	movs	r2, #0
 8026868:	f843 2b04 	str.w	r2, [r3], #4
 802686c:	429f      	cmp	r7, r3
 802686e:	d2fb      	bcs.n	8026868 <__hexnan+0xcc>
 8026870:	683b      	ldr	r3, [r7, #0]
 8026872:	b91b      	cbnz	r3, 802687c <__hexnan+0xe0>
 8026874:	4547      	cmp	r7, r8
 8026876:	d128      	bne.n	80268ca <__hexnan+0x12e>
 8026878:	2301      	movs	r3, #1
 802687a:	603b      	str	r3, [r7, #0]
 802687c:	2005      	movs	r0, #5
 802687e:	b007      	add	sp, #28
 8026880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026884:	3501      	adds	r5, #1
 8026886:	2d08      	cmp	r5, #8
 8026888:	f10b 0b01 	add.w	fp, fp, #1
 802688c:	dd06      	ble.n	802689c <__hexnan+0x100>
 802688e:	4544      	cmp	r4, r8
 8026890:	d9c1      	bls.n	8026816 <__hexnan+0x7a>
 8026892:	2300      	movs	r3, #0
 8026894:	f844 3c04 	str.w	r3, [r4, #-4]
 8026898:	2501      	movs	r5, #1
 802689a:	3c04      	subs	r4, #4
 802689c:	6822      	ldr	r2, [r4, #0]
 802689e:	f000 000f 	and.w	r0, r0, #15
 80268a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80268a6:	6020      	str	r0, [r4, #0]
 80268a8:	e7b5      	b.n	8026816 <__hexnan+0x7a>
 80268aa:	2508      	movs	r5, #8
 80268ac:	e7b3      	b.n	8026816 <__hexnan+0x7a>
 80268ae:	9b01      	ldr	r3, [sp, #4]
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d0dd      	beq.n	8026870 <__hexnan+0xd4>
 80268b4:	f1c3 0320 	rsb	r3, r3, #32
 80268b8:	f04f 32ff 	mov.w	r2, #4294967295
 80268bc:	40da      	lsrs	r2, r3
 80268be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80268c2:	4013      	ands	r3, r2
 80268c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80268c8:	e7d2      	b.n	8026870 <__hexnan+0xd4>
 80268ca:	3f04      	subs	r7, #4
 80268cc:	e7d0      	b.n	8026870 <__hexnan+0xd4>
 80268ce:	2004      	movs	r0, #4
 80268d0:	e7d5      	b.n	802687e <__hexnan+0xe2>

080268d2 <__ascii_mbtowc>:
 80268d2:	b082      	sub	sp, #8
 80268d4:	b901      	cbnz	r1, 80268d8 <__ascii_mbtowc+0x6>
 80268d6:	a901      	add	r1, sp, #4
 80268d8:	b142      	cbz	r2, 80268ec <__ascii_mbtowc+0x1a>
 80268da:	b14b      	cbz	r3, 80268f0 <__ascii_mbtowc+0x1e>
 80268dc:	7813      	ldrb	r3, [r2, #0]
 80268de:	600b      	str	r3, [r1, #0]
 80268e0:	7812      	ldrb	r2, [r2, #0]
 80268e2:	1e10      	subs	r0, r2, #0
 80268e4:	bf18      	it	ne
 80268e6:	2001      	movne	r0, #1
 80268e8:	b002      	add	sp, #8
 80268ea:	4770      	bx	lr
 80268ec:	4610      	mov	r0, r2
 80268ee:	e7fb      	b.n	80268e8 <__ascii_mbtowc+0x16>
 80268f0:	f06f 0001 	mvn.w	r0, #1
 80268f4:	e7f8      	b.n	80268e8 <__ascii_mbtowc+0x16>

080268f6 <_realloc_r>:
 80268f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268fa:	4680      	mov	r8, r0
 80268fc:	4615      	mov	r5, r2
 80268fe:	460c      	mov	r4, r1
 8026900:	b921      	cbnz	r1, 802690c <_realloc_r+0x16>
 8026902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026906:	4611      	mov	r1, r2
 8026908:	f7fb bc8e 	b.w	8022228 <_malloc_r>
 802690c:	b92a      	cbnz	r2, 802691a <_realloc_r+0x24>
 802690e:	f7fd fda9 	bl	8024464 <_free_r>
 8026912:	2400      	movs	r4, #0
 8026914:	4620      	mov	r0, r4
 8026916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802691a:	f000 f827 	bl	802696c <_malloc_usable_size_r>
 802691e:	4285      	cmp	r5, r0
 8026920:	4606      	mov	r6, r0
 8026922:	d802      	bhi.n	802692a <_realloc_r+0x34>
 8026924:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8026928:	d8f4      	bhi.n	8026914 <_realloc_r+0x1e>
 802692a:	4629      	mov	r1, r5
 802692c:	4640      	mov	r0, r8
 802692e:	f7fb fc7b 	bl	8022228 <_malloc_r>
 8026932:	4607      	mov	r7, r0
 8026934:	2800      	cmp	r0, #0
 8026936:	d0ec      	beq.n	8026912 <_realloc_r+0x1c>
 8026938:	42b5      	cmp	r5, r6
 802693a:	462a      	mov	r2, r5
 802693c:	4621      	mov	r1, r4
 802693e:	bf28      	it	cs
 8026940:	4632      	movcs	r2, r6
 8026942:	f7fc ff94 	bl	802386e <memcpy>
 8026946:	4621      	mov	r1, r4
 8026948:	4640      	mov	r0, r8
 802694a:	f7fd fd8b 	bl	8024464 <_free_r>
 802694e:	463c      	mov	r4, r7
 8026950:	e7e0      	b.n	8026914 <_realloc_r+0x1e>

08026952 <__ascii_wctomb>:
 8026952:	4603      	mov	r3, r0
 8026954:	4608      	mov	r0, r1
 8026956:	b141      	cbz	r1, 802696a <__ascii_wctomb+0x18>
 8026958:	2aff      	cmp	r2, #255	@ 0xff
 802695a:	d904      	bls.n	8026966 <__ascii_wctomb+0x14>
 802695c:	228a      	movs	r2, #138	@ 0x8a
 802695e:	601a      	str	r2, [r3, #0]
 8026960:	f04f 30ff 	mov.w	r0, #4294967295
 8026964:	4770      	bx	lr
 8026966:	700a      	strb	r2, [r1, #0]
 8026968:	2001      	movs	r0, #1
 802696a:	4770      	bx	lr

0802696c <_malloc_usable_size_r>:
 802696c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026970:	1f18      	subs	r0, r3, #4
 8026972:	2b00      	cmp	r3, #0
 8026974:	bfbc      	itt	lt
 8026976:	580b      	ldrlt	r3, [r1, r0]
 8026978:	18c0      	addlt	r0, r0, r3
 802697a:	4770      	bx	lr

0802697c <_init>:
 802697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802697e:	bf00      	nop
 8026980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026982:	bc08      	pop	{r3}
 8026984:	469e      	mov	lr, r3
 8026986:	4770      	bx	lr

08026988 <_fini>:
 8026988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802698a:	bf00      	nop
 802698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802698e:	bc08      	pop	{r3}
 8026990:	469e      	mov	lr, r3
 8026992:	4770      	bx	lr

Disassembly of section .iram:

08026994 <mg_ota_boot>:
MG_IRAM void mg_ota_boot(void) {
 8026994:	b580      	push	{r7, lr}
 8026996:	b088      	sub	sp, #32
 8026998:	af00      	add	r7, sp, #0
  MG_INFO(("Booting. Flash bank: %d", mg_flash_bank()));
 802699a:	4b2d      	ldr	r3, [pc, #180]	@ (8026a50 <mg_ota_boot+0xbc>)
 802699c:	681b      	ldr	r3, [r3, #0]
 802699e:	2b01      	cmp	r3, #1
 80269a0:	dd0d      	ble.n	80269be <mg_ota_boot+0x2a>
 80269a2:	4b2c      	ldr	r3, [pc, #176]	@ (8026a54 <mg_ota_boot+0xc0>)
 80269a4:	f641 12ac 	movw	r2, #6572	@ 0x19ac
 80269a8:	492b      	ldr	r1, [pc, #172]	@ (8026a58 <mg_ota_boot+0xc4>)
 80269aa:	2002      	movs	r0, #2
 80269ac:	f7e1 f958 	bl	8007c60 <mg_log_prefix>
 80269b0:	f000 f881 	bl	8026ab6 <mg_flash_bank>
 80269b4:	4603      	mov	r3, r0
 80269b6:	4619      	mov	r1, r3
 80269b8:	4828      	ldr	r0, [pc, #160]	@ (8026a5c <mg_ota_boot+0xc8>)
 80269ba:	f7e1 f9a1 	bl	8007d00 <mg_log>
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 80269be:	f107 0310 	add.w	r3, r7, #16
 80269c2:	2100      	movs	r1, #0
 80269c4:	4618      	mov	r0, r3
 80269c6:	f000 fb41 	bl	802704c <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 80269ca:	463b      	mov	r3, r7
 80269cc:	2101      	movs	r1, #1
 80269ce:	4618      	mov	r0, r3
 80269d0:	f000 fb3c 	bl	802704c <mg_otadata>
  if (curr.status == MG_OTA_FIRST_BOOT) {
 80269d4:	69fb      	ldr	r3, [r7, #28]
 80269d6:	2b01      	cmp	r3, #1
 80269d8:	d135      	bne.n	8026a46 <mg_ota_boot+0xb2>
    if (prev.status == MG_OTA_UNAVAILABLE) {
 80269da:	68fb      	ldr	r3, [r7, #12]
 80269dc:	2b00      	cmp	r3, #0
 80269de:	d118      	bne.n	8026a12 <mg_ota_boot+0x7e>
      MG_INFO(("Setting previous firmware state to committed"));
 80269e0:	4b1b      	ldr	r3, [pc, #108]	@ (8026a50 <mg_ota_boot+0xbc>)
 80269e2:	681b      	ldr	r3, [r3, #0]
 80269e4:	2b01      	cmp	r3, #1
 80269e6:	dd09      	ble.n	80269fc <mg_ota_boot+0x68>
 80269e8:	4b1a      	ldr	r3, [pc, #104]	@ (8026a54 <mg_ota_boot+0xc0>)
 80269ea:	f641 12b2 	movw	r2, #6578	@ 0x19b2
 80269ee:	491a      	ldr	r1, [pc, #104]	@ (8026a58 <mg_ota_boot+0xc4>)
 80269f0:	2002      	movs	r0, #2
 80269f2:	f7e1 f935 	bl	8007c60 <mg_log_prefix>
 80269f6:	481a      	ldr	r0, [pc, #104]	@ (8026a60 <mg_ota_boot+0xcc>)
 80269f8:	f7e1 f982 	bl	8007d00 <mg_log>
      prev.status = MG_OTA_COMMITTED;
 80269fc:	2303      	movs	r3, #3
 80269fe:	60fb      	str	r3, [r7, #12]
      mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_PREVIOUS), &prev, sizeof(prev));
 8026a00:	2001      	movs	r0, #1
 8026a02:	f000 faff 	bl	8027004 <mg_fwkey>
 8026a06:	4601      	mov	r1, r0
 8026a08:	463a      	mov	r2, r7
 8026a0a:	2310      	movs	r3, #16
 8026a0c:	2000      	movs	r0, #0
 8026a0e:	f7da fe69 	bl	80016e4 <mg_flash_save>
    curr.status = MG_OTA_UNCOMMITTED;
 8026a12:	2302      	movs	r3, #2
 8026a14:	61fb      	str	r3, [r7, #28]
    MG_INFO(("First boot, setting status to UNCOMMITTED"));
 8026a16:	4b0e      	ldr	r3, [pc, #56]	@ (8026a50 <mg_ota_boot+0xbc>)
 8026a18:	681b      	ldr	r3, [r3, #0]
 8026a1a:	2b01      	cmp	r3, #1
 8026a1c:	dd09      	ble.n	8026a32 <mg_ota_boot+0x9e>
 8026a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8026a54 <mg_ota_boot+0xc0>)
 8026a20:	f641 12b7 	movw	r2, #6583	@ 0x19b7
 8026a24:	490c      	ldr	r1, [pc, #48]	@ (8026a58 <mg_ota_boot+0xc4>)
 8026a26:	2002      	movs	r0, #2
 8026a28:	f7e1 f91a 	bl	8007c60 <mg_log_prefix>
 8026a2c:	480d      	ldr	r0, [pc, #52]	@ (8026a64 <mg_ota_boot+0xd0>)
 8026a2e:	f7e1 f967 	bl	8007d00 <mg_log>
    mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &curr, sizeof(curr));
 8026a32:	2000      	movs	r0, #0
 8026a34:	f000 fae6 	bl	8027004 <mg_fwkey>
 8026a38:	4601      	mov	r1, r0
 8026a3a:	f107 0210 	add.w	r2, r7, #16
 8026a3e:	2310      	movs	r3, #16
 8026a40:	2000      	movs	r0, #0
 8026a42:	f7da fe4f 	bl	80016e4 <mg_flash_save>
}
 8026a46:	bf00      	nop
 8026a48:	3720      	adds	r7, #32
 8026a4a:	46bd      	mov	sp, r7
 8026a4c:	bd80      	pop	{r7, pc}
 8026a4e:	bf00      	nop
 8026a50:	24000240 	.word	0x24000240
 8026a54:	0802a65c 	.word	0x0802a65c
 8026a58:	08027148 	.word	0x08027148
 8026a5c:	08027160 	.word	0x08027160
 8026a60:	08027178 	.word	0x08027178
 8026a64:	080271a8 	.word	0x080271a8

08026a68 <mg_flash_start>:
MG_IRAM void *mg_flash_start(void) {
 8026a68:	b480      	push	{r7}
 8026a6a:	af00      	add	r7, sp, #0
  return (void *) 0x08000000;
 8026a6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
}
 8026a70:	4618      	mov	r0, r3
 8026a72:	46bd      	mov	sp, r7
 8026a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a78:	4770      	bx	lr

08026a7a <mg_flash_size>:
MG_IRAM size_t mg_flash_size(void) {
 8026a7a:	b480      	push	{r7}
 8026a7c:	af00      	add	r7, sp, #0
  return MG_REG(FLASH_SIZE_REG) * 1024;
 8026a7e:	4b04      	ldr	r3, [pc, #16]	@ (8026a90 <mg_flash_size+0x16>)
 8026a80:	681b      	ldr	r3, [r3, #0]
 8026a82:	029b      	lsls	r3, r3, #10
}
 8026a84:	4618      	mov	r0, r3
 8026a86:	46bd      	mov	sp, r7
 8026a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a8c:	4770      	bx	lr
 8026a8e:	bf00      	nop
 8026a90:	1ff1e880 	.word	0x1ff1e880

08026a94 <mg_flash_sector_size>:
MG_IRAM size_t mg_flash_sector_size(void) {
 8026a94:	b480      	push	{r7}
 8026a96:	af00      	add	r7, sp, #0
  return 128 * 1024;  // 128k
 8026a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
}
 8026a9c:	4618      	mov	r0, r3
 8026a9e:	46bd      	mov	sp, r7
 8026aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aa4:	4770      	bx	lr

08026aa6 <mg_flash_write_align>:
MG_IRAM size_t mg_flash_write_align(void) {
 8026aa6:	b480      	push	{r7}
 8026aa8:	af00      	add	r7, sp, #0
  return 32;  // 256 bit
 8026aaa:	2320      	movs	r3, #32
}
 8026aac:	4618      	mov	r0, r3
 8026aae:	46bd      	mov	sp, r7
 8026ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ab4:	4770      	bx	lr

08026ab6 <mg_flash_bank>:
MG_IRAM int mg_flash_bank(void) {
 8026ab6:	b580      	push	{r7, lr}
 8026ab8:	af00      	add	r7, sp, #0
  if (mg_flash_size() < 2 * 1024 * 1024) return 0;  // No dual bank support
 8026aba:	f7ff ffde 	bl	8026a7a <mg_flash_size>
 8026abe:	4603      	mov	r3, r0
 8026ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8026ac4:	d201      	bcs.n	8026aca <mg_flash_bank+0x14>
 8026ac6:	2300      	movs	r3, #0
 8026ac8:	e006      	b.n	8026ad8 <mg_flash_bank+0x22>
  return MG_REG(FLASH_BASE1 + FLASH_OPTCR) & MG_BIT(31) ? 2 : 1;
 8026aca:	4b04      	ldr	r3, [pc, #16]	@ (8026adc <mg_flash_bank+0x26>)
 8026acc:	681b      	ldr	r3, [r3, #0]
 8026ace:	2b00      	cmp	r3, #0
 8026ad0:	da01      	bge.n	8026ad6 <mg_flash_bank+0x20>
 8026ad2:	2302      	movs	r3, #2
 8026ad4:	e000      	b.n	8026ad8 <mg_flash_bank+0x22>
 8026ad6:	2301      	movs	r3, #1
}
 8026ad8:	4618      	mov	r0, r3
 8026ada:	bd80      	pop	{r7, pc}
 8026adc:	52002018 	.word	0x52002018

08026ae0 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
 8026ae0:	b580      	push	{r7, lr}
 8026ae2:	af00      	add	r7, sp, #0
  if (unlocked == false) {
 8026ae4:	4b11      	ldr	r3, [pc, #68]	@ (8026b2c <flash_unlock+0x4c>)
 8026ae6:	781b      	ldrb	r3, [r3, #0]
 8026ae8:	f083 0301 	eor.w	r3, r3, #1
 8026aec:	b2db      	uxtb	r3, r3
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d019      	beq.n	8026b26 <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
 8026af2:	4b0f      	ldr	r3, [pc, #60]	@ (8026b30 <flash_unlock+0x50>)
 8026af4:	4a0f      	ldr	r2, [pc, #60]	@ (8026b34 <flash_unlock+0x54>)
 8026af6:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
 8026af8:	4b0d      	ldr	r3, [pc, #52]	@ (8026b30 <flash_unlock+0x50>)
 8026afa:	4a0f      	ldr	r2, [pc, #60]	@ (8026b38 <flash_unlock+0x58>)
 8026afc:	601a      	str	r2, [r3, #0]
    if (mg_flash_bank() > 0) {
 8026afe:	f7ff ffda 	bl	8026ab6 <mg_flash_bank>
 8026b02:	4603      	mov	r3, r0
 8026b04:	2b00      	cmp	r3, #0
 8026b06:	dd05      	ble.n	8026b14 <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
 8026b08:	4b0c      	ldr	r3, [pc, #48]	@ (8026b3c <flash_unlock+0x5c>)
 8026b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8026b34 <flash_unlock+0x54>)
 8026b0c:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
 8026b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8026b3c <flash_unlock+0x5c>)
 8026b10:	4a09      	ldr	r2, [pc, #36]	@ (8026b38 <flash_unlock+0x58>)
 8026b12:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
 8026b14:	4b0a      	ldr	r3, [pc, #40]	@ (8026b40 <flash_unlock+0x60>)
 8026b16:	4a0b      	ldr	r2, [pc, #44]	@ (8026b44 <flash_unlock+0x64>)
 8026b18:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
 8026b1a:	4b09      	ldr	r3, [pc, #36]	@ (8026b40 <flash_unlock+0x60>)
 8026b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8026b48 <flash_unlock+0x68>)
 8026b1e:	601a      	str	r2, [r3, #0]
    unlocked = true;
 8026b20:	4b02      	ldr	r3, [pc, #8]	@ (8026b2c <flash_unlock+0x4c>)
 8026b22:	2201      	movs	r2, #1
 8026b24:	701a      	strb	r2, [r3, #0]
}
 8026b26:	bf00      	nop
 8026b28:	bd80      	pop	{r7, pc}
 8026b2a:	bf00      	nop
 8026b2c:	24003df0 	.word	0x24003df0
 8026b30:	52002004 	.word	0x52002004
 8026b34:	45670123 	.word	0x45670123
 8026b38:	cdef89ab 	.word	0xcdef89ab
 8026b3c:	52002104 	.word	0x52002104
 8026b40:	52002008 	.word	0x52002008
 8026b44:	08192a3b 	.word	0x08192a3b
 8026b48:	4c5d6e7f 	.word	0x4c5d6e7f

08026b4c <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
 8026b4c:	b590      	push	{r4, r7, lr}
 8026b4e:	b087      	sub	sp, #28
 8026b50:	af00      	add	r7, sp, #0
 8026b52:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *end = base + mg_flash_size();
 8026b54:	f7ff ff88 	bl	8026a68 <mg_flash_start>
 8026b58:	6178      	str	r0, [r7, #20]
 8026b5a:	f7ff ff8e 	bl	8026a7a <mg_flash_size>
 8026b5e:	4602      	mov	r2, r0
 8026b60:	697b      	ldr	r3, [r7, #20]
 8026b62:	4413      	add	r3, r2
 8026b64:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
 8026b66:	687b      	ldr	r3, [r7, #4]
 8026b68:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % mg_flash_sector_size()) == 0;
 8026b6a:	68fa      	ldr	r2, [r7, #12]
 8026b6c:	697b      	ldr	r3, [r7, #20]
 8026b6e:	429a      	cmp	r2, r3
 8026b70:	d313      	bcc.n	8026b9a <flash_page_start+0x4e>
 8026b72:	68fa      	ldr	r2, [r7, #12]
 8026b74:	693b      	ldr	r3, [r7, #16]
 8026b76:	429a      	cmp	r2, r3
 8026b78:	d20f      	bcs.n	8026b9a <flash_page_start+0x4e>
 8026b7a:	68fa      	ldr	r2, [r7, #12]
 8026b7c:	697b      	ldr	r3, [r7, #20]
 8026b7e:	1ad3      	subs	r3, r2, r3
 8026b80:	461c      	mov	r4, r3
 8026b82:	f7ff ff87 	bl	8026a94 <mg_flash_sector_size>
 8026b86:	4603      	mov	r3, r0
 8026b88:	fbb4 f2f3 	udiv	r2, r4, r3
 8026b8c:	fb02 f303 	mul.w	r3, r2, r3
 8026b90:	1ae3      	subs	r3, r4, r3
 8026b92:	2b00      	cmp	r3, #0
 8026b94:	d101      	bne.n	8026b9a <flash_page_start+0x4e>
 8026b96:	2301      	movs	r3, #1
 8026b98:	e000      	b.n	8026b9c <flash_page_start+0x50>
 8026b9a:	2300      	movs	r3, #0
 8026b9c:	f003 0301 	and.w	r3, r3, #1
 8026ba0:	b2db      	uxtb	r3, r3
}
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	371c      	adds	r7, #28
 8026ba6:	46bd      	mov	sp, r7
 8026ba8:	bd90      	pop	{r4, r7, pc}

08026baa <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
 8026baa:	b480      	push	{r7}
 8026bac:	b083      	sub	sp, #12
 8026bae:	af00      	add	r7, sp, #0
 8026bb0:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	3310      	adds	r3, #16
 8026bb6:	681a      	ldr	r2, [r3, #0]
 8026bb8:	4b06      	ldr	r3, [pc, #24]	@ (8026bd4 <flash_is_err+0x2a>)
 8026bba:	4013      	ands	r3, r2
 8026bbc:	2b00      	cmp	r3, #0
 8026bbe:	bf14      	ite	ne
 8026bc0:	2301      	movne	r3, #1
 8026bc2:	2300      	moveq	r3, #0
 8026bc4:	b2db      	uxtb	r3, r3
}
 8026bc6:	4618      	mov	r0, r3
 8026bc8:	370c      	adds	r7, #12
 8026bca:	46bd      	mov	sp, r7
 8026bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bd0:	4770      	bx	lr
 8026bd2:	bf00      	nop
 8026bd4:	0ffe0000 	.word	0x0ffe0000

08026bd8 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
 8026bd8:	b480      	push	{r7}
 8026bda:	b083      	sub	sp, #12
 8026bdc:	af00      	add	r7, sp, #0
 8026bde:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
 8026be0:	bf00      	nop
 8026be2:	687b      	ldr	r3, [r7, #4]
 8026be4:	3310      	adds	r3, #16
 8026be6:	681b      	ldr	r3, [r3, #0]
 8026be8:	f003 0305 	and.w	r3, r3, #5
 8026bec:	2b00      	cmp	r3, #0
 8026bee:	d1f8      	bne.n	8026be2 <flash_wait+0xa>
}
 8026bf0:	bf00      	nop
 8026bf2:	bf00      	nop
 8026bf4:	370c      	adds	r7, #12
 8026bf6:	46bd      	mov	sp, r7
 8026bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bfc:	4770      	bx	lr

08026bfe <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
 8026bfe:	b580      	push	{r7, lr}
 8026c00:	b082      	sub	sp, #8
 8026c02:	af00      	add	r7, sp, #0
 8026c04:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
 8026c06:	6878      	ldr	r0, [r7, #4]
 8026c08:	f7ff ffe6 	bl	8026bd8 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
 8026c0c:	687b      	ldr	r3, [r7, #4]
 8026c0e:	3314      	adds	r3, #20
 8026c10:	461a      	mov	r2, r3
 8026c12:	4b03      	ldr	r3, [pc, #12]	@ (8026c20 <flash_clear_err+0x22>)
 8026c14:	6013      	str	r3, [r2, #0]
}
 8026c16:	bf00      	nop
 8026c18:	3708      	adds	r7, #8
 8026c1a:	46bd      	mov	sp, r7
 8026c1c:	bd80      	pop	{r7, pc}
 8026c1e:	bf00      	nop
 8026c20:	07ff0000 	.word	0x07ff0000

08026c24 <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
 8026c24:	b480      	push	{r7}
 8026c26:	b083      	sub	sp, #12
 8026c28:	af00      	add	r7, sp, #0
 8026c2a:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	3318      	adds	r3, #24
 8026c30:	681b      	ldr	r3, [r3, #0]
 8026c32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8026c36:	2b00      	cmp	r3, #0
 8026c38:	bf14      	ite	ne
 8026c3a:	2301      	movne	r3, #1
 8026c3c:	2300      	moveq	r3, #0
 8026c3e:	b2db      	uxtb	r3, r3
}
 8026c40:	4618      	mov	r0, r3
 8026c42:	370c      	adds	r7, #12
 8026c44:	46bd      	mov	sp, r7
 8026c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c4a:	4770      	bx	lr

08026c4c <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
 8026c4c:	b580      	push	{r7, lr}
 8026c4e:	b084      	sub	sp, #16
 8026c50:	af00      	add	r7, sp, #0
 8026c52:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) mg_flash_start();
 8026c54:	f7ff ff08 	bl	8026a68 <mg_flash_start>
 8026c58:	4602      	mov	r2, r0
 8026c5a:	687b      	ldr	r3, [r7, #4]
 8026c5c:	1a9b      	subs	r3, r3, r2
 8026c5e:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 0) return FLASH_BASE1;
 8026c60:	f7ff ff29 	bl	8026ab6 <mg_flash_bank>
 8026c64:	4603      	mov	r3, r0
 8026c66:	2b00      	cmp	r3, #0
 8026c68:	d101      	bne.n	8026c6e <flash_bank+0x22>
 8026c6a:	4b08      	ldr	r3, [pc, #32]	@ (8026c8c <flash_bank+0x40>)
 8026c6c:	e009      	b.n	8026c82 <flash_bank+0x36>
  return ofs < mg_flash_size() / 2 ? FLASH_BASE1 : FLASH_BASE2;
 8026c6e:	f7ff ff04 	bl	8026a7a <mg_flash_size>
 8026c72:	4603      	mov	r3, r0
 8026c74:	085b      	lsrs	r3, r3, #1
 8026c76:	68fa      	ldr	r2, [r7, #12]
 8026c78:	429a      	cmp	r2, r3
 8026c7a:	d201      	bcs.n	8026c80 <flash_bank+0x34>
 8026c7c:	4b03      	ldr	r3, [pc, #12]	@ (8026c8c <flash_bank+0x40>)
 8026c7e:	e000      	b.n	8026c82 <flash_bank+0x36>
 8026c80:	4b03      	ldr	r3, [pc, #12]	@ (8026c90 <flash_bank+0x44>)
}
 8026c82:	4618      	mov	r0, r3
 8026c84:	3710      	adds	r7, #16
 8026c86:	46bd      	mov	sp, r7
 8026c88:	bd80      	pop	{r7, pc}
 8026c8a:	bf00      	nop
 8026c8c:	52002000 	.word	0x52002000
 8026c90:	52002100 	.word	0x52002100

08026c94 <mg_flash_erase>:
MG_IRAM bool mg_flash_erase(void *addr) {
 8026c94:	b580      	push	{r7, lr}
 8026c96:	b08a      	sub	sp, #40	@ 0x28
 8026c98:	af02      	add	r7, sp, #8
 8026c9a:	6078      	str	r0, [r7, #4]
  bool ok = false;
 8026c9c:	2300      	movs	r3, #0
 8026c9e:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
 8026ca0:	6878      	ldr	r0, [r7, #4]
 8026ca2:	f7ff ff53 	bl	8026b4c <flash_page_start>
 8026ca6:	4603      	mov	r3, r0
 8026ca8:	f083 0301 	eor.w	r3, r3, #1
 8026cac:	b2db      	uxtb	r3, r3
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	d010      	beq.n	8026cd4 <mg_flash_erase+0x40>
    MG_ERROR(("%p is not on a sector boundary", addr));
 8026cb2:	4b45      	ldr	r3, [pc, #276]	@ (8026dc8 <mg_flash_erase+0x134>)
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	2b00      	cmp	r3, #0
 8026cb8:	f340 8081 	ble.w	8026dbe <mg_flash_erase+0x12a>
 8026cbc:	4b43      	ldr	r3, [pc, #268]	@ (8026dcc <mg_flash_erase+0x138>)
 8026cbe:	f240 428e 	movw	r2, #1166	@ 0x48e
 8026cc2:	4943      	ldr	r1, [pc, #268]	@ (8026dd0 <mg_flash_erase+0x13c>)
 8026cc4:	2001      	movs	r0, #1
 8026cc6:	f7e0 ffcb 	bl	8007c60 <mg_log_prefix>
 8026cca:	6879      	ldr	r1, [r7, #4]
 8026ccc:	4841      	ldr	r0, [pc, #260]	@ (8026dd4 <mg_flash_erase+0x140>)
 8026cce:	f7e1 f817 	bl	8007d00 <mg_log>
 8026cd2:	e074      	b.n	8026dbe <mg_flash_erase+0x12a>
    uintptr_t diff = (char *) addr - (char *) mg_flash_start();
 8026cd4:	f7ff fec8 	bl	8026a68 <mg_flash_start>
 8026cd8:	4602      	mov	r2, r0
 8026cda:	687b      	ldr	r3, [r7, #4]
 8026cdc:	1a9b      	subs	r3, r3, r2
 8026cde:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / mg_flash_sector_size();
 8026ce0:	f7ff fed8 	bl	8026a94 <mg_flash_sector_size>
 8026ce4:	4602      	mov	r2, r0
 8026ce6:	697b      	ldr	r3, [r7, #20]
 8026ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8026cec:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
 8026cee:	6878      	ldr	r0, [r7, #4]
 8026cf0:	f7ff ffac 	bl	8026c4c <flash_bank>
 8026cf4:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
 8026cf6:	693b      	ldr	r3, [r7, #16]
 8026cf8:	330c      	adds	r3, #12
 8026cfa:	681b      	ldr	r3, [r3, #0]
 8026cfc:	60fb      	str	r3, [r7, #12]
    flash_unlock();
 8026cfe:	f7ff feef 	bl	8026ae0 <flash_unlock>
    if (sector > 7) sector -= 8;
 8026d02:	69bb      	ldr	r3, [r7, #24]
 8026d04:	2b07      	cmp	r3, #7
 8026d06:	d902      	bls.n	8026d0e <mg_flash_erase+0x7a>
 8026d08:	69bb      	ldr	r3, [r7, #24]
 8026d0a:	3b08      	subs	r3, #8
 8026d0c:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
 8026d0e:	6938      	ldr	r0, [r7, #16]
 8026d10:	f7ff ff75 	bl	8026bfe <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
 8026d14:	693b      	ldr	r3, [r7, #16]
 8026d16:	330c      	adds	r3, #12
 8026d18:	461a      	mov	r2, r3
 8026d1a:	2320      	movs	r3, #32
 8026d1c:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
 8026d1e:	693b      	ldr	r3, [r7, #16]
 8026d20:	330c      	adds	r3, #12
 8026d22:	681a      	ldr	r2, [r3, #0]
 8026d24:	69bb      	ldr	r3, [r7, #24]
 8026d26:	021b      	lsls	r3, r3, #8
 8026d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8026d2c:	6939      	ldr	r1, [r7, #16]
 8026d2e:	310c      	adds	r1, #12
 8026d30:	4313      	orrs	r3, r2
 8026d32:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
 8026d34:	693b      	ldr	r3, [r7, #16]
 8026d36:	330c      	adds	r3, #12
 8026d38:	681b      	ldr	r3, [r3, #0]
 8026d3a:	693a      	ldr	r2, [r7, #16]
 8026d3c:	320c      	adds	r2, #12
 8026d3e:	f043 0304 	orr.w	r3, r3, #4
 8026d42:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
 8026d44:	693b      	ldr	r3, [r7, #16]
 8026d46:	330c      	adds	r3, #12
 8026d48:	681b      	ldr	r3, [r3, #0]
 8026d4a:	693a      	ldr	r2, [r7, #16]
 8026d4c:	320c      	adds	r2, #12
 8026d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026d52:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
 8026d54:	6938      	ldr	r0, [r7, #16]
 8026d56:	f7ff ff28 	bl	8026baa <flash_is_err>
 8026d5a:	4603      	mov	r3, r0
 8026d5c:	2b00      	cmp	r3, #0
 8026d5e:	bf14      	ite	ne
 8026d60:	2301      	movne	r3, #1
 8026d62:	2300      	moveq	r3, #0
 8026d64:	b2db      	uxtb	r3, r3
 8026d66:	f083 0301 	eor.w	r3, r3, #1
 8026d6a:	b2db      	uxtb	r3, r3
 8026d6c:	77fb      	strb	r3, [r7, #31]
 8026d6e:	7ffb      	ldrb	r3, [r7, #31]
 8026d70:	f003 0301 	and.w	r3, r3, #1
 8026d74:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
 8026d76:	4b14      	ldr	r3, [pc, #80]	@ (8026dc8 <mg_flash_erase+0x134>)
 8026d78:	681b      	ldr	r3, [r3, #0]
 8026d7a:	2b02      	cmp	r3, #2
 8026d7c:	dd1a      	ble.n	8026db4 <mg_flash_erase+0x120>
 8026d7e:	4b13      	ldr	r3, [pc, #76]	@ (8026dcc <mg_flash_erase+0x138>)
 8026d80:	f240 429e 	movw	r2, #1182	@ 0x49e
 8026d84:	4912      	ldr	r1, [pc, #72]	@ (8026dd0 <mg_flash_erase+0x13c>)
 8026d86:	2003      	movs	r0, #3
 8026d88:	f7e0 ff6a 	bl	8007c60 <mg_log_prefix>
 8026d8c:	7ffb      	ldrb	r3, [r7, #31]
 8026d8e:	2b00      	cmp	r3, #0
 8026d90:	d001      	beq.n	8026d96 <mg_flash_erase+0x102>
 8026d92:	4911      	ldr	r1, [pc, #68]	@ (8026dd8 <mg_flash_erase+0x144>)
 8026d94:	e000      	b.n	8026d98 <mg_flash_erase+0x104>
 8026d96:	4911      	ldr	r1, [pc, #68]	@ (8026ddc <mg_flash_erase+0x148>)
 8026d98:	693b      	ldr	r3, [r7, #16]
 8026d9a:	330c      	adds	r3, #12
 8026d9c:	681b      	ldr	r3, [r3, #0]
 8026d9e:	693a      	ldr	r2, [r7, #16]
 8026da0:	3210      	adds	r2, #16
 8026da2:	6812      	ldr	r2, [r2, #0]
 8026da4:	9201      	str	r2, [sp, #4]
 8026da6:	9300      	str	r3, [sp, #0]
 8026da8:	460b      	mov	r3, r1
 8026daa:	687a      	ldr	r2, [r7, #4]
 8026dac:	69b9      	ldr	r1, [r7, #24]
 8026dae:	480c      	ldr	r0, [pc, #48]	@ (8026de0 <mg_flash_erase+0x14c>)
 8026db0:	f7e0 ffa6 	bl	8007d00 <mg_log>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
 8026db4:	693b      	ldr	r3, [r7, #16]
 8026db6:	330c      	adds	r3, #12
 8026db8:	461a      	mov	r2, r3
 8026dba:	68fb      	ldr	r3, [r7, #12]
 8026dbc:	6013      	str	r3, [r2, #0]
  return ok;
 8026dbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8026dc0:	4618      	mov	r0, r3
 8026dc2:	3720      	adds	r7, #32
 8026dc4:	46bd      	mov	sp, r7
 8026dc6:	bd80      	pop	{r7, pc}
 8026dc8:	24000240 	.word	0x24000240
 8026dcc:	0802a6a0 	.word	0x0802a6a0
 8026dd0:	08027148 	.word	0x08027148
 8026dd4:	080272e0 	.word	0x080272e0
 8026dd8:	08027300 	.word	0x08027300
 8026ddc:	08027304 	.word	0x08027304
 8026de0:	0802730c 	.word	0x0802730c

08026de4 <mg_flash_swap_bank>:
MG_IRAM bool mg_flash_swap_bank(size_t size) {
 8026de4:	b580      	push	{r7, lr}
 8026de6:	b084      	sub	sp, #16
 8026de8:	af00      	add	r7, sp, #0
 8026dea:	6078      	str	r0, [r7, #4]
  if (mg_flash_bank() == 0) return true;
 8026dec:	f7ff fe63 	bl	8026ab6 <mg_flash_bank>
 8026df0:	4603      	mov	r3, r0
 8026df2:	2b00      	cmp	r3, #0
 8026df4:	d101      	bne.n	8026dfa <mg_flash_swap_bank+0x16>
 8026df6:	2301      	movs	r3, #1
 8026df8:	e02e      	b.n	8026e58 <mg_flash_swap_bank+0x74>
  uint32_t bank = FLASH_BASE1;
 8026dfa:	4b19      	ldr	r3, [pc, #100]	@ (8026e60 <mg_flash_swap_bank+0x7c>)
 8026dfc:	60fb      	str	r3, [r7, #12]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
 8026dfe:	68f8      	ldr	r0, [r7, #12]
 8026e00:	f7ff ff10 	bl	8026c24 <flash_bank_is_swapped>
 8026e04:	4603      	mov	r3, r0
 8026e06:	2b00      	cmp	r3, #0
 8026e08:	d001      	beq.n	8026e0e <mg_flash_swap_bank+0x2a>
 8026e0a:	2300      	movs	r3, #0
 8026e0c:	e001      	b.n	8026e12 <mg_flash_swap_bank+0x2e>
 8026e0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8026e12:	60bb      	str	r3, [r7, #8]
  flash_unlock();
 8026e14:	f7ff fe64 	bl	8026ae0 <flash_unlock>
  flash_clear_err(bank);
 8026e18:	68f8      	ldr	r0, [r7, #12]
 8026e1a:	f7ff fef0 	bl	8026bfe <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
 8026e1e:	68fb      	ldr	r3, [r7, #12]
 8026e20:	3320      	adds	r3, #32
 8026e22:	681b      	ldr	r3, [r3, #0]
 8026e24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8026e28:	68fb      	ldr	r3, [r7, #12]
 8026e2a:	3320      	adds	r3, #32
 8026e2c:	4619      	mov	r1, r3
 8026e2e:	68bb      	ldr	r3, [r7, #8]
 8026e30:	4313      	orrs	r3, r2
 8026e32:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
 8026e34:	68fb      	ldr	r3, [r7, #12]
 8026e36:	3318      	adds	r3, #24
 8026e38:	681b      	ldr	r3, [r3, #0]
 8026e3a:	68fa      	ldr	r2, [r7, #12]
 8026e3c:	3218      	adds	r2, #24
 8026e3e:	f043 0302 	orr.w	r3, r3, #2
 8026e42:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
 8026e44:	bf00      	nop
 8026e46:	68fb      	ldr	r3, [r7, #12]
 8026e48:	331c      	adds	r3, #28
 8026e4a:	681b      	ldr	r3, [r3, #0]
 8026e4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8026e50:	68ba      	ldr	r2, [r7, #8]
 8026e52:	429a      	cmp	r2, r3
 8026e54:	d1f7      	bne.n	8026e46 <mg_flash_swap_bank+0x62>
  return true;
 8026e56:	2301      	movs	r3, #1
}
 8026e58:	4618      	mov	r0, r3
 8026e5a:	3710      	adds	r7, #16
 8026e5c:	46bd      	mov	sp, r7
 8026e5e:	bd80      	pop	{r7, pc}
 8026e60:	52002000 	.word	0x52002000

08026e64 <mg_flash_write>:
MG_IRAM bool mg_flash_write(void *addr, const void *buf, size_t len) {
 8026e64:	b580      	push	{r7, lr}
 8026e66:	b08c      	sub	sp, #48	@ 0x30
 8026e68:	af02      	add	r7, sp, #8
 8026e6a:	60f8      	str	r0, [r7, #12]
 8026e6c:	60b9      	str	r1, [r7, #8]
 8026e6e:	607a      	str	r2, [r7, #4]
  if ((len % mg_flash_write_align()) != 0) {
 8026e70:	f7ff fe19 	bl	8026aa6 <mg_flash_write_align>
 8026e74:	4602      	mov	r2, r0
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8026e7c:	fb01 f202 	mul.w	r2, r1, r2
 8026e80:	1a9b      	subs	r3, r3, r2
 8026e82:	2b00      	cmp	r3, #0
 8026e84:	d014      	beq.n	8026eb0 <mg_flash_write+0x4c>
    MG_ERROR(("%lu is not aligned to %lu", len, mg_flash_write_align()));
 8026e86:	4b50      	ldr	r3, [pc, #320]	@ (8026fc8 <mg_flash_write+0x164>)
 8026e88:	681b      	ldr	r3, [r3, #0]
 8026e8a:	2b00      	cmp	r3, #0
 8026e8c:	dd0e      	ble.n	8026eac <mg_flash_write+0x48>
 8026e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8026fcc <mg_flash_write+0x168>)
 8026e90:	f240 42b7 	movw	r2, #1207	@ 0x4b7
 8026e94:	494e      	ldr	r1, [pc, #312]	@ (8026fd0 <mg_flash_write+0x16c>)
 8026e96:	2001      	movs	r0, #1
 8026e98:	f7e0 fee2 	bl	8007c60 <mg_log_prefix>
 8026e9c:	f7ff fe03 	bl	8026aa6 <mg_flash_write_align>
 8026ea0:	4603      	mov	r3, r0
 8026ea2:	461a      	mov	r2, r3
 8026ea4:	6879      	ldr	r1, [r7, #4]
 8026ea6:	484b      	ldr	r0, [pc, #300]	@ (8026fd4 <mg_flash_write+0x170>)
 8026ea8:	f7e0 ff2a 	bl	8007d00 <mg_log>
    return false;
 8026eac:	2300      	movs	r3, #0
 8026eae:	e086      	b.n	8026fbe <mg_flash_write+0x15a>
  uint32_t bank = flash_bank(addr);
 8026eb0:	68f8      	ldr	r0, [r7, #12]
 8026eb2:	f7ff fecb 	bl	8026c4c <flash_bank>
 8026eb6:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
 8026eb8:	68fb      	ldr	r3, [r7, #12]
 8026eba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
 8026ebc:	68bb      	ldr	r3, [r7, #8]
 8026ebe:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
 8026ec0:	68ba      	ldr	r2, [r7, #8]
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	4413      	add	r3, r2
 8026ec6:	617b      	str	r3, [r7, #20]
  bool ok = true;
 8026ec8:	2301      	movs	r3, #1
 8026eca:	77fb      	strb	r3, [r7, #31]
  flash_unlock();
 8026ecc:	f7ff fe08 	bl	8026ae0 <flash_unlock>
  flash_clear_err(bank);
 8026ed0:	69b8      	ldr	r0, [r7, #24]
 8026ed2:	f7ff fe94 	bl	8026bfe <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
 8026ed6:	69bb      	ldr	r3, [r7, #24]
 8026ed8:	330c      	adds	r3, #12
 8026eda:	461a      	mov	r2, r3
 8026edc:	2302      	movs	r3, #2
 8026ede:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
 8026ee0:	69bb      	ldr	r3, [r7, #24]
 8026ee2:	330c      	adds	r3, #12
 8026ee4:	681b      	ldr	r3, [r3, #0]
 8026ee6:	69ba      	ldr	r2, [r7, #24]
 8026ee8:	320c      	adds	r2, #12
 8026eea:	f043 0320 	orr.w	r3, r3, #32
 8026eee:	6013      	str	r3, [r2, #0]
  MG_DEBUG(("Writing flash @ %p, %lu bytes", addr, len));
 8026ef0:	4b35      	ldr	r3, [pc, #212]	@ (8026fc8 <mg_flash_write+0x164>)
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	2b02      	cmp	r3, #2
 8026ef6:	dd0b      	ble.n	8026f10 <mg_flash_write+0xac>
 8026ef8:	4b34      	ldr	r3, [pc, #208]	@ (8026fcc <mg_flash_write+0x168>)
 8026efa:	f240 42c3 	movw	r2, #1219	@ 0x4c3
 8026efe:	4934      	ldr	r1, [pc, #208]	@ (8026fd0 <mg_flash_write+0x16c>)
 8026f00:	2003      	movs	r0, #3
 8026f02:	f7e0 fead 	bl	8007c60 <mg_log_prefix>
 8026f06:	687a      	ldr	r2, [r7, #4]
 8026f08:	68f9      	ldr	r1, [r7, #12]
 8026f0a:	4833      	ldr	r0, [pc, #204]	@ (8026fd8 <mg_flash_write+0x174>)
 8026f0c:	f7e0 fef8 	bl	8007d00 <mg_log>
  MG_ARM_DISABLE_IRQ();
 8026f10:	b672      	cpsid	i
  while (ok && src < end) {
 8026f12:	e024      	b.n	8026f5e <mg_flash_write+0xfa>
    if (flash_page_start(dst) && mg_flash_erase(dst) == false) {
 8026f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026f16:	f7ff fe19 	bl	8026b4c <flash_page_start>
 8026f1a:	4603      	mov	r3, r0
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	d00b      	beq.n	8026f38 <mg_flash_write+0xd4>
 8026f20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026f22:	f7ff feb7 	bl	8026c94 <mg_flash_erase>
 8026f26:	4603      	mov	r3, r0
 8026f28:	f083 0301 	eor.w	r3, r3, #1
 8026f2c:	b2db      	uxtb	r3, r3
 8026f2e:	2b00      	cmp	r3, #0
 8026f30:	d002      	beq.n	8026f38 <mg_flash_write+0xd4>
      ok = false;
 8026f32:	2300      	movs	r3, #0
 8026f34:	77fb      	strb	r3, [r7, #31]
      break;
 8026f36:	e019      	b.n	8026f6c <mg_flash_write+0x108>
    *(volatile uint32_t *) dst++ = *src++;
 8026f38:	6a3a      	ldr	r2, [r7, #32]
 8026f3a:	1d13      	adds	r3, r2, #4
 8026f3c:	623b      	str	r3, [r7, #32]
 8026f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026f40:	1d19      	adds	r1, r3, #4
 8026f42:	6279      	str	r1, [r7, #36]	@ 0x24
 8026f44:	6812      	ldr	r2, [r2, #0]
 8026f46:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
 8026f48:	69b8      	ldr	r0, [r7, #24]
 8026f4a:	f7ff fe45 	bl	8026bd8 <flash_wait>
    if (flash_is_err(bank)) ok = false;
 8026f4e:	69b8      	ldr	r0, [r7, #24]
 8026f50:	f7ff fe2b 	bl	8026baa <flash_is_err>
 8026f54:	4603      	mov	r3, r0
 8026f56:	2b00      	cmp	r3, #0
 8026f58:	d001      	beq.n	8026f5e <mg_flash_write+0xfa>
 8026f5a:	2300      	movs	r3, #0
 8026f5c:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
 8026f5e:	7ffb      	ldrb	r3, [r7, #31]
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	d003      	beq.n	8026f6c <mg_flash_write+0x108>
 8026f64:	6a3a      	ldr	r2, [r7, #32]
 8026f66:	697b      	ldr	r3, [r7, #20]
 8026f68:	429a      	cmp	r2, r3
 8026f6a:	d3d3      	bcc.n	8026f14 <mg_flash_write+0xb0>
  MG_ARM_ENABLE_IRQ();
 8026f6c:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
 8026f6e:	4b16      	ldr	r3, [pc, #88]	@ (8026fc8 <mg_flash_write+0x164>)
 8026f70:	681b      	ldr	r3, [r3, #0]
 8026f72:	2b02      	cmp	r3, #2
 8026f74:	dd1a      	ble.n	8026fac <mg_flash_write+0x148>
 8026f76:	4b15      	ldr	r3, [pc, #84]	@ (8026fcc <mg_flash_write+0x168>)
 8026f78:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8026f7c:	4914      	ldr	r1, [pc, #80]	@ (8026fd0 <mg_flash_write+0x16c>)
 8026f7e:	2003      	movs	r0, #3
 8026f80:	f7e0 fe6e 	bl	8007c60 <mg_log_prefix>
 8026f84:	7ffb      	ldrb	r3, [r7, #31]
 8026f86:	2b00      	cmp	r3, #0
 8026f88:	d001      	beq.n	8026f8e <mg_flash_write+0x12a>
 8026f8a:	4914      	ldr	r1, [pc, #80]	@ (8026fdc <mg_flash_write+0x178>)
 8026f8c:	e000      	b.n	8026f90 <mg_flash_write+0x12c>
 8026f8e:	4914      	ldr	r1, [pc, #80]	@ (8026fe0 <mg_flash_write+0x17c>)
 8026f90:	69bb      	ldr	r3, [r7, #24]
 8026f92:	330c      	adds	r3, #12
 8026f94:	681b      	ldr	r3, [r3, #0]
 8026f96:	69ba      	ldr	r2, [r7, #24]
 8026f98:	3210      	adds	r2, #16
 8026f9a:	6812      	ldr	r2, [r2, #0]
 8026f9c:	9201      	str	r2, [sp, #4]
 8026f9e:	9300      	str	r3, [sp, #0]
 8026fa0:	460b      	mov	r3, r1
 8026fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026fa4:	6879      	ldr	r1, [r7, #4]
 8026fa6:	480f      	ldr	r0, [pc, #60]	@ (8026fe4 <mg_flash_write+0x180>)
 8026fa8:	f7e0 feaa 	bl	8007d00 <mg_log>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
 8026fac:	69bb      	ldr	r3, [r7, #24]
 8026fae:	330c      	adds	r3, #12
 8026fb0:	681b      	ldr	r3, [r3, #0]
 8026fb2:	69ba      	ldr	r2, [r7, #24]
 8026fb4:	320c      	adds	r2, #12
 8026fb6:	f023 0302 	bic.w	r3, r3, #2
 8026fba:	6013      	str	r3, [r2, #0]
  return ok;
 8026fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8026fbe:	4618      	mov	r0, r3
 8026fc0:	3728      	adds	r7, #40	@ 0x28
 8026fc2:	46bd      	mov	sp, r7
 8026fc4:	bd80      	pop	{r7, pc}
 8026fc6:	bf00      	nop
 8026fc8:	24000240 	.word	0x24000240
 8026fcc:	0802a6b0 	.word	0x0802a6b0
 8026fd0:	08027148 	.word	0x08027148
 8026fd4:	08027338 	.word	0x08027338
 8026fd8:	08027354 	.word	0x08027354
 8026fdc:	08027300 	.word	0x08027300
 8026fe0:	08027304 	.word	0x08027304
 8026fe4:	08027374 	.word	0x08027374

08026fe8 <mg_device_reset>:
MG_IRAM void mg_device_reset(void) {
 8026fe8:	b480      	push	{r7}
 8026fea:	af00      	add	r7, sp, #0
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 8026fec:	4b03      	ldr	r3, [pc, #12]	@ (8026ffc <mg_device_reset+0x14>)
 8026fee:	4a04      	ldr	r2, [pc, #16]	@ (8027000 <mg_device_reset+0x18>)
 8026ff0:	601a      	str	r2, [r3, #0]
}
 8026ff2:	bf00      	nop
 8026ff4:	46bd      	mov	sp, r7
 8026ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ffa:	4770      	bx	lr
 8026ffc:	e000ed0c 	.word	0xe000ed0c
 8027000:	05fa0004 	.word	0x05fa0004

08027004 <mg_fwkey>:
MG_IRAM static uint32_t mg_fwkey(int fw) {
 8027004:	b580      	push	{r7, lr}
 8027006:	b084      	sub	sp, #16
 8027008:	af00      	add	r7, sp, #0
 802700a:	6078      	str	r0, [r7, #4]
  uint32_t key = MG_OTADATA_KEY + fw;
 802700c:	687a      	ldr	r2, [r7, #4]
 802700e:	4b0e      	ldr	r3, [pc, #56]	@ (8027048 <mg_fwkey+0x44>)
 8027010:	4413      	add	r3, r2
 8027012:	60fb      	str	r3, [r7, #12]
  int bank = mg_flash_bank();
 8027014:	f7ff fd4f 	bl	8026ab6 <mg_flash_bank>
 8027018:	60b8      	str	r0, [r7, #8]
  if (bank == 2 && fw == MG_FIRMWARE_PREVIOUS) key--;
 802701a:	68bb      	ldr	r3, [r7, #8]
 802701c:	2b02      	cmp	r3, #2
 802701e:	d105      	bne.n	802702c <mg_fwkey+0x28>
 8027020:	687b      	ldr	r3, [r7, #4]
 8027022:	2b01      	cmp	r3, #1
 8027024:	d102      	bne.n	802702c <mg_fwkey+0x28>
 8027026:	68fb      	ldr	r3, [r7, #12]
 8027028:	3b01      	subs	r3, #1
 802702a:	60fb      	str	r3, [r7, #12]
  if (bank == 2 && fw == MG_FIRMWARE_CURRENT) key++;
 802702c:	68bb      	ldr	r3, [r7, #8]
 802702e:	2b02      	cmp	r3, #2
 8027030:	d105      	bne.n	802703e <mg_fwkey+0x3a>
 8027032:	687b      	ldr	r3, [r7, #4]
 8027034:	2b00      	cmp	r3, #0
 8027036:	d102      	bne.n	802703e <mg_fwkey+0x3a>
 8027038:	68fb      	ldr	r3, [r7, #12]
 802703a:	3301      	adds	r3, #1
 802703c:	60fb      	str	r3, [r7, #12]
  return key;
 802703e:	68fb      	ldr	r3, [r7, #12]
}
 8027040:	4618      	mov	r0, r3
 8027042:	3710      	adds	r7, #16
 8027044:	46bd      	mov	sp, r7
 8027046:	bd80      	pop	{r7, pc}
 8027048:	b07afed0 	.word	0xb07afed0

0802704c <mg_otadata>:
MG_IRAM static struct mg_otadata mg_otadata(int fw) {
 802704c:	b590      	push	{r4, r7, lr}
 802704e:	b089      	sub	sp, #36	@ 0x24
 8027050:	af00      	add	r7, sp, #0
 8027052:	6078      	str	r0, [r7, #4]
 8027054:	6039      	str	r1, [r7, #0]
  uint32_t key = mg_fwkey(fw);
 8027056:	6838      	ldr	r0, [r7, #0]
 8027058:	f7ff ffd4 	bl	8027004 <mg_fwkey>
 802705c:	61f8      	str	r0, [r7, #28]
  struct mg_otadata od = {};
 802705e:	f107 030c 	add.w	r3, r7, #12
 8027062:	2200      	movs	r2, #0
 8027064:	601a      	str	r2, [r3, #0]
 8027066:	605a      	str	r2, [r3, #4]
 8027068:	609a      	str	r2, [r3, #8]
 802706a:	60da      	str	r2, [r3, #12]
  MG_INFO(("Loading %s OTA data", fw == MG_FIRMWARE_CURRENT ? "curr" : "prev"));
 802706c:	4b13      	ldr	r3, [pc, #76]	@ (80270bc <mg_otadata+0x70>)
 802706e:	681b      	ldr	r3, [r3, #0]
 8027070:	2b01      	cmp	r3, #1
 8027072:	dd10      	ble.n	8027096 <mg_otadata+0x4a>
 8027074:	4b12      	ldr	r3, [pc, #72]	@ (80270c0 <mg_otadata+0x74>)
 8027076:	f641 1273 	movw	r2, #6515	@ 0x1973
 802707a:	4912      	ldr	r1, [pc, #72]	@ (80270c4 <mg_otadata+0x78>)
 802707c:	2002      	movs	r0, #2
 802707e:	f7e0 fdef 	bl	8007c60 <mg_log_prefix>
 8027082:	683b      	ldr	r3, [r7, #0]
 8027084:	2b00      	cmp	r3, #0
 8027086:	d101      	bne.n	802708c <mg_otadata+0x40>
 8027088:	4b0f      	ldr	r3, [pc, #60]	@ (80270c8 <mg_otadata+0x7c>)
 802708a:	e000      	b.n	802708e <mg_otadata+0x42>
 802708c:	4b0f      	ldr	r3, [pc, #60]	@ (80270cc <mg_otadata+0x80>)
 802708e:	4619      	mov	r1, r3
 8027090:	480f      	ldr	r0, [pc, #60]	@ (80270d0 <mg_otadata+0x84>)
 8027092:	f7e0 fe35 	bl	8007d00 <mg_log>
  mg_flash_load(NULL, key, &od, sizeof(od));
 8027096:	f107 020c 	add.w	r2, r7, #12
 802709a:	2310      	movs	r3, #16
 802709c:	69f9      	ldr	r1, [r7, #28]
 802709e:	2000      	movs	r0, #0
 80270a0:	f7da f9d6 	bl	8001450 <mg_flash_load>
  return od;
 80270a4:	687b      	ldr	r3, [r7, #4]
 80270a6:	461c      	mov	r4, r3
 80270a8:	f107 030c 	add.w	r3, r7, #12
 80270ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80270b2:	6878      	ldr	r0, [r7, #4]
 80270b4:	3724      	adds	r7, #36	@ 0x24
 80270b6:	46bd      	mov	sp, r7
 80270b8:	bd90      	pop	{r4, r7, pc}
 80270ba:	bf00      	nop
 80270bc:	24000240 	.word	0x24000240
 80270c0:	0802a888 	.word	0x0802a888
 80270c4:	08027148 	.word	0x08027148
 80270c8:	080288d0 	.word	0x080288d0
 80270cc:	080288d8 	.word	0x080288d8
 80270d0:	080288e0 	.word	0x080288e0

080270d4 <mg_ota_commit>:
MG_IRAM bool mg_ota_commit(void) {
 80270d4:	b580      	push	{r7, lr}
 80270d6:	b086      	sub	sp, #24
 80270d8:	af00      	add	r7, sp, #0
  bool ok = true;
 80270da:	2301      	movs	r3, #1
 80270dc:	75fb      	strb	r3, [r7, #23]
  struct mg_otadata od = mg_otadata(MG_FIRMWARE_CURRENT);
 80270de:	1d3b      	adds	r3, r7, #4
 80270e0:	2100      	movs	r1, #0
 80270e2:	4618      	mov	r0, r3
 80270e4:	f7ff ffb2 	bl	802704c <mg_otadata>
  if (od.status != MG_OTA_COMMITTED) {
 80270e8:	693b      	ldr	r3, [r7, #16]
 80270ea:	2b03      	cmp	r3, #3
 80270ec:	d01b      	beq.n	8027126 <mg_ota_commit+0x52>
    od.status = MG_OTA_COMMITTED;
 80270ee:	2303      	movs	r3, #3
 80270f0:	613b      	str	r3, [r7, #16]
    MG_INFO(("Committing current firmware, OD size %lu", sizeof(od)));
 80270f2:	4b0f      	ldr	r3, [pc, #60]	@ (8027130 <mg_ota_commit+0x5c>)
 80270f4:	681b      	ldr	r3, [r3, #0]
 80270f6:	2b01      	cmp	r3, #1
 80270f8:	dd0a      	ble.n	8027110 <mg_ota_commit+0x3c>
 80270fa:	4b0e      	ldr	r3, [pc, #56]	@ (8027134 <mg_ota_commit+0x60>)
 80270fc:	f641 129b 	movw	r2, #6555	@ 0x199b
 8027100:	490d      	ldr	r1, [pc, #52]	@ (8027138 <mg_ota_commit+0x64>)
 8027102:	2002      	movs	r0, #2
 8027104:	f7e0 fdac 	bl	8007c60 <mg_log_prefix>
 8027108:	2110      	movs	r1, #16
 802710a:	480c      	ldr	r0, [pc, #48]	@ (802713c <mg_ota_commit+0x68>)
 802710c:	f7e0 fdf8 	bl	8007d00 <mg_log>
    ok = mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &od, sizeof(od));
 8027110:	2000      	movs	r0, #0
 8027112:	f7ff ff77 	bl	8027004 <mg_fwkey>
 8027116:	4601      	mov	r1, r0
 8027118:	1d3a      	adds	r2, r7, #4
 802711a:	2310      	movs	r3, #16
 802711c:	2000      	movs	r0, #0
 802711e:	f7da fae1 	bl	80016e4 <mg_flash_save>
 8027122:	4603      	mov	r3, r0
 8027124:	75fb      	strb	r3, [r7, #23]
  return ok;
 8027126:	7dfb      	ldrb	r3, [r7, #23]
}
 8027128:	4618      	mov	r0, r3
 802712a:	3718      	adds	r7, #24
 802712c:	46bd      	mov	sp, r7
 802712e:	bd80      	pop	{r7, pc}
 8027130:	24000240 	.word	0x24000240
 8027134:	0802a894 	.word	0x0802a894
 8027138:	08027148 	.word	0x08027148
 802713c:	080288f4 	.word	0x080288f4
